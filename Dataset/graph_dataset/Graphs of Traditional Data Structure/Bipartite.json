[
{"graph": "Node 0 is connected to nodes 5, 7, 9.\nNode 1 is connected to nodes 5, 7, 8.\nNode 2 is connected to nodes 5, 8.\nNode 3 is connected to nodes 4, 6, 7, 9.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 1, 3.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 9],\n1: [5, 7, 8],\n2: [5, 8],\n3: [4, 6, 7, 9],\n4: [3],\n5: [0, 1, 2],\n6: [3],\n7: [0, 1, 3],\n8: [1, 2],\n9: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 9, 11.\nNode 1 is connected to nodes 6, 7, 11.\nNode 2 is connected to nodes 5, 7, 9, 10.\nNode 3 is connected to node 8.\nNode 4 is connected to nodes 6, 8, 11.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 1, 4.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 3, 4.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 0, 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 9, 11],\n1: [6, 7, 11],\n2: [5, 7, 9, 10],\n3: [8],\n4: [6, 8, 11],\n5: [0, 2],\n6: [1, 4],\n7: [0, 1, 2],\n8: [3, 4],\n9: [0, 2],\n10: [2],\n11: [0, 1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6.\nNode 1 is connected to nodes 3, 5, 6, 7.\nNode 2 is connected to nodes 3, 5, 6, 7.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6],\n1: [3, 5, 6, 7],\n2: [3, 5, 6, 7],\n3: [0, 1, 2],\n4: [0],\n5: [1, 2],\n6: [0, 1, 2],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 9.\nNode 1 is connected to nodes 7, 10, 11.\nNode 2 is connected to nodes 6, 7, 12.\nNode 3 is connected to nodes 7, 9, 11.\nNode 4 is connected to nodes 8, 10.\nNode 5 is connected to node 9.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 0, 3, 5.\nNode 10 is connected to nodes 1, 4.\nNode 11 is connected to nodes 1, 3.\nNode 12 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9],\n1: [7, 10, 11],\n2: [6, 7, 12],\n3: [7, 9, 11],\n4: [8, 10],\n5: [9],\n6: [2],\n7: [1, 2, 3],\n8: [4],\n9: [0, 3, 5],\n10: [1, 4],\n11: [1, 3],\n12: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 11.\nNode 1 is connected to nodes 7, 9, 10, 13.\nNode 2 is connected to nodes 9, 12, 13, 14.\nNode 3 is connected to nodes 6, 9, 11, 13.\nNode 4 is connected to nodes 5, 6, 9.\nNode 5 is connected to node 4.\nNode 6 is connected to nodes 0, 3, 4.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 1, 2, 3, 4.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 3.\nNode 12 is connected to node 2.\nNode 13 is connected to nodes 1, 2, 3.\nNode 14 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 11],\n1: [7, 9, 10, 13],\n2: [9, 12, 13, 14],\n3: [6, 9, 11, 13],\n4: [5, 6, 9],\n5: [4],\n6: [0, 3, 4],\n7: [0, 1],\n8: [0],\n9: [0, 1, 2, 3, 4],\n10: [1],\n11: [0, 3],\n12: [2],\n13: [1, 2, 3],\n14: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 13.\nNode 1 is connected to nodes 6, 7, 8, 11.\nNode 2 is connected to nodes 7, 10, 12.\nNode 3 is connected to nodes 5, 10.\nNode 4 is connected to nodes 6, 12, 13.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 4.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 2, 3.\nNode 11 is connected to node 1.\nNode 12 is connected to nodes 2, 4.\nNode 13 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 13],\n1: [6, 7, 8, 11],\n2: [7, 10, 12],\n3: [5, 10],\n4: [6, 12, 13],\n5: [3],\n6: [1, 4],\n7: [1, 2],\n8: [0, 1],\n9: [0],\n10: [2, 3],\n11: [1],\n12: [2, 4],\n13: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6.\nNode 1 is connected to nodes 4, 5, 7, 8.\nNode 2 is connected to nodes 3, 4, 8.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6],\n1: [4, 5, 7, 8],\n2: [3, 4, 8],\n3: [2],\n4: [0, 1, 2],\n5: [1],\n6: [0],\n7: [1],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 8.\nNode 1 is connected to nodes 6, 7, 8.\nNode 2 is connected to nodes 5, 6, 8.\nNode 3 is connected to node 7.\nNode 4 is connected to node 0.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 8],\n1: [6, 7, 8],\n2: [5, 6, 8],\n3: [7],\n4: [0],\n5: [2],\n6: [0, 1, 2],\n7: [1, 3],\n8: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 12, 13.\nNode 1 is connected to node 9.\nNode 2 is connected to nodes 5, 8, 13.\nNode 3 is connected to nodes 7, 11, 12, 14.\nNode 4 is connected to nodes 5, 6, 9, 12.\nNode 5 is connected to nodes 2, 4.\nNode 6 is connected to node 4.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 1, 4.\nNode 10 is connected to node 0.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 0, 3, 4.\nNode 13 is connected to nodes 0, 2.\nNode 14 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 12, 13],\n1: [9],\n2: [5, 8, 13],\n3: [7, 11, 12, 14],\n4: [5, 6, 9, 12],\n5: [2, 4],\n6: [4],\n7: [3],\n8: [0, 2],\n9: [1, 4],\n10: [0],\n11: [3],\n12: [0, 3, 4],\n13: [0, 2],\n14: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8, 10.\nNode 1 is connected to nodes 7, 8, 9.\nNode 2 is connected to nodes 6, 8.\nNode 3 is connected to nodes 4, 5, 6, 8.\nNode 4 is connected to nodes 0, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to node 1.\nNode 10 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8, 10],\n1: [7, 8, 9],\n2: [6, 8],\n3: [4, 5, 6, 8],\n4: [0, 3],\n5: [3],\n6: [2, 3],\n7: [0, 1],\n8: [0, 1, 2, 3],\n9: [1],\n10: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 9.\nNode 1 is connected to nodes 4, 5, 8.\nNode 2 is connected to nodes 7, 8.\nNode 3 is connected to nodes 4, 6, 7, 8.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 1, 2, 3.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 9],\n1: [4, 5, 8],\n2: [7, 8],\n3: [4, 6, 7, 8],\n4: [1, 3],\n5: [1],\n6: [0, 3],\n7: [0, 2, 3],\n8: [1, 2, 3],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 11, 12.\nNode 1 is connected to nodes 4, 7, 9.\nNode 2 is connected to nodes 4, 5, 8, 10.\nNode 3 is connected to nodes 9, 12.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 2.\nNode 11 is connected to node 0.\nNode 12 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 11, 12],\n1: [4, 7, 9],\n2: [4, 5, 8, 10],\n3: [9, 12],\n4: [1, 2],\n5: [2],\n6: [0],\n7: [1],\n8: [0, 2],\n9: [1, 3],\n10: [2],\n11: [0],\n12: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 10.\nNode 1 is connected to nodes 5, 10.\nNode 2 is connected to nodes 5, 7, 9, 10.\nNode 3 is connected to nodes 6, 7, 8, 9.\nNode 4 is connected to nodes 6, 7.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 3, 4.\nNode 7 is connected to nodes 2, 3, 4.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10],\n1: [5, 10],\n2: [5, 7, 9, 10],\n3: [6, 7, 8, 9],\n4: [6, 7],\n5: [1, 2],\n6: [3, 4],\n7: [2, 3, 4],\n8: [3],\n9: [2, 3],\n10: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 12.\nNode 1 is connected to nodes 5, 8, 9, 11.\nNode 2 is connected to nodes 6, 7, 10.\nNode 3 is connected to nodes 6, 9.\nNode 4 is connected to nodes 8, 12.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 0, 1, 4.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 2.\nNode 11 is connected to node 1.\nNode 12 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 12],\n1: [5, 8, 9, 11],\n2: [6, 7, 10],\n3: [6, 9],\n4: [8, 12],\n5: [1],\n6: [2, 3],\n7: [2],\n8: [0, 1, 4],\n9: [1, 3],\n10: [2],\n11: [1],\n12: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 11.\nNode 1 is connected to nodes 6, 8, 10, 11.\nNode 2 is connected to nodes 9, 13.\nNode 3 is connected to nodes 7, 8, 9, 12, 13.\nNode 4 is connected to nodes 7, 11, 12, 14.\nNode 5 is connected to nodes 7, 8, 9, 11, 13.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 3, 4, 5.\nNode 8 is connected to nodes 0, 1, 3, 5.\nNode 9 is connected to nodes 2, 3, 5.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 1, 4, 5.\nNode 12 is connected to nodes 3, 4.\nNode 13 is connected to nodes 2, 3, 5.\nNode 14 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 11],\n1: [6, 8, 10, 11],\n2: [9, 13],\n3: [7, 8, 9, 12, 13],\n4: [7, 11, 12, 14],\n5: [7, 8, 9, 11, 13],\n6: [1],\n7: [3, 4, 5],\n8: [0, 1, 3, 5],\n9: [2, 3, 5],\n10: [1],\n11: [0, 1, 4, 5],\n12: [3, 4],\n13: [2, 3, 5],\n14: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 8, 10.\nNode 1 is connected to nodes 3, 6, 7, 9.\nNode 2 is connected to nodes 3, 4, 7, 8.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to node 1.\nNode 10 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 8, 10],\n1: [3, 6, 7, 9],\n2: [3, 4, 7, 8],\n3: [1, 2],\n4: [0, 2],\n5: [0],\n6: [0, 1],\n7: [1, 2],\n8: [0, 2],\n9: [1],\n10: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9, 11.\nNode 1 is connected to node 10.\nNode 2 is connected to nodes 7, 8, 11, 12.\nNode 3 is connected to nodes 7, 9, 10, 12.\nNode 4 is connected to nodes 7, 8, 10, 13.\nNode 5 is connected to nodes 6, 7, 8, 10, 11, 12.\nNode 6 is connected to node 5.\nNode 7 is connected to nodes 0, 2, 3, 4, 5.\nNode 8 is connected to nodes 2, 4, 5.\nNode 9 is connected to nodes 0, 3.\nNode 10 is connected to nodes 1, 3, 4, 5.\nNode 11 is connected to nodes 0, 2, 5.\nNode 12 is connected to nodes 2, 3, 5.\nNode 13 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9, 11],\n1: [10],\n2: [7, 8, 11, 12],\n3: [7, 9, 10, 12],\n4: [7, 8, 10, 13],\n5: [6, 7, 8, 10, 11, 12],\n6: [5],\n7: [0, 2, 3, 4, 5],\n8: [2, 4, 5],\n9: [0, 3],\n10: [1, 3, 4, 5],\n11: [0, 2, 5],\n12: [2, 3, 5],\n13: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 5.\nNode 1 is connected to nodes 4, 7.\nNode 2 is connected to nodes 4, 6, 8, 9.\nNode 3 is connected to nodes 4, 5, 9, 10.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5],\n1: [4, 7],\n2: [4, 6, 8, 9],\n3: [4, 5, 9, 10],\n4: [1, 2, 3],\n5: [0, 3],\n6: [2],\n7: [1],\n8: [2],\n9: [2, 3],\n10: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10, 12, 14.\nNode 1 is connected to nodes 7, 12, 13, 14.\nNode 2 is connected to nodes 7, 8, 10, 11, 12, 14.\nNode 3 is connected to nodes 8, 12.\nNode 4 is connected to nodes 7, 9, 12, 13.\nNode 5 is connected to nodes 7, 9, 10, 12, 14.\nNode 6 is connected to nodes 9, 10, 11, 12, 14.\nNode 7 is connected to nodes 0, 1, 2, 4, 5.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to nodes 4, 5, 6.\nNode 10 is connected to nodes 0, 2, 5, 6.\nNode 11 is connected to nodes 2, 6.\nNode 12 is connected to nodes 0, 1, 2, 3, 4, 5, 6.\nNode 13 is connected to nodes 1, 4.\nNode 14 is connected to nodes 0, 1, 2, 5, 6.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10, 12, 14],\n1: [7, 12, 13, 14],\n2: [7, 8, 10, 11, 12, 14],\n3: [8, 12],\n4: [7, 9, 12, 13],\n5: [7, 9, 10, 12, 14],\n6: [9, 10, 11, 12, 14],\n7: [0, 1, 2, 4, 5],\n8: [2, 3],\n9: [4, 5, 6],\n10: [0, 2, 5, 6],\n11: [2, 6],\n12: [0, 1, 2, 3, 4, 5, 6],\n13: [1, 4],\n14: [0, 1, 2, 5, 6]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 11.\nNode 1 is connected to nodes 4, 7, 9, 11.\nNode 2 is connected to nodes 5, 6, 8.\nNode 3 is connected to nodes 9, 10.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 3.\nNode 11 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 11],\n1: [4, 7, 9, 11],\n2: [5, 6, 8],\n3: [9, 10],\n4: [1],\n5: [2],\n6: [0, 2],\n7: [0, 1],\n8: [2],\n9: [1, 3],\n10: [3],\n11: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 10, 13.\nNode 1 is connected to nodes 9, 12, 13.\nNode 2 is connected to nodes 6, 7, 9, 10, 11.\nNode 3 is connected to node 13.\nNode 4 is connected to nodes 9, 10, 13.\nNode 5 is connected to nodes 7, 9, 11.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 2, 5.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 1, 2, 4, 5.\nNode 10 is connected to nodes 0, 2, 4.\nNode 11 is connected to nodes 2, 5.\nNode 12 is connected to node 1.\nNode 13 is connected to nodes 0, 1, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 10, 13],\n1: [9, 12, 13],\n2: [6, 7, 9, 10, 11],\n3: [13],\n4: [9, 10, 13],\n5: [7, 9, 11],\n6: [0, 2],\n7: [0, 2, 5],\n8: [0],\n9: [1, 2, 4, 5],\n10: [0, 2, 4],\n11: [2, 5],\n12: [1],\n13: [0, 1, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 9, 10, 11, 13.\nNode 1 is connected to nodes 6, 12.\nNode 2 is connected to nodes 6, 12, 13.\nNode 3 is connected to nodes 9, 11.\nNode 4 is connected to nodes 6, 8, 11, 12.\nNode 5 is connected to nodes 7, 9, 10, 11, 12.\nNode 6 is connected to nodes 0, 1, 2, 4.\nNode 7 is connected to node 5.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 0, 3, 5.\nNode 10 is connected to nodes 0, 5.\nNode 11 is connected to nodes 0, 3, 4, 5.\nNode 12 is connected to nodes 1, 2, 4, 5.\nNode 13 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 9, 10, 11, 13],\n1: [6, 12],\n2: [6, 12, 13],\n3: [9, 11],\n4: [6, 8, 11, 12],\n5: [7, 9, 10, 11, 12],\n6: [0, 1, 2, 4],\n7: [5],\n8: [0, 4],\n9: [0, 3, 5],\n10: [0, 5],\n11: [0, 3, 4, 5],\n12: [1, 2, 4, 5],\n13: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 8.\nNode 1 is connected to nodes 4, 6, 7, 8, 9.\nNode 2 is connected to nodes 5, 9.\nNode 3 is connected to node 0.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to node 1.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 8],\n1: [4, 6, 7, 8, 9],\n2: [5, 9],\n3: [0],\n4: [1],\n5: [2],\n6: [1],\n7: [1],\n8: [0, 1],\n9: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6, 8.\nNode 1 is connected to nodes 4, 5, 6, 7, 8.\nNode 2 is connected to node 7.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6, 8],\n1: [4, 5, 6, 7, 8],\n2: [7],\n3: [0],\n4: [0, 1],\n5: [1],\n6: [0, 1],\n7: [1, 2],\n8: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6.\nNode 1 is connected to nodes 3, 7.\nNode 2 is connected to nodes 3, 4, 5.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6],\n1: [3, 7],\n2: [3, 4, 5],\n3: [0, 1, 2],\n4: [0, 2],\n5: [2],\n6: [0],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6.\nNode 1 is connected to nodes 3, 6, 7.\nNode 2 is connected to nodes 5, 7.\nNode 3 is connected to node 1.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6],\n1: [3, 6, 7],\n2: [5, 7],\n3: [1],\n4: [0],\n5: [0, 2],\n6: [0, 1],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 7.\nNode 1 is connected to nodes 2, 4, 6, 8, 9.\nNode 2 is connected to node 1.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to node 0.\nNode 8 is connected to node 1.\nNode 9 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 7],\n1: [2, 4, 6, 8, 9],\n2: [1],\n3: [0],\n4: [0, 1],\n5: [0],\n6: [1],\n7: [0],\n8: [1],\n9: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 7, 8, 10.\nNode 1 is connected to node 4.\nNode 2 is connected to nodes 9, 10.\nNode 3 is connected to nodes 5, 7, 11.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 7, 8, 10],\n1: [4],\n2: [9, 10],\n3: [5, 7, 11],\n4: [0, 1],\n5: [0, 3],\n6: [0],\n7: [0, 3],\n8: [0],\n9: [2],\n10: [0, 2],\n11: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 7.\nNode 1 is connected to nodes 4, 6, 7.\nNode 2 is connected to node 4.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 7],\n1: [4, 6, 7],\n2: [4],\n3: [0],\n4: [1, 2],\n5: [0],\n6: [1],\n7: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 9, 11, 13.\nNode 1 is connected to nodes 5, 7, 9, 10, 12.\nNode 2 is connected to nodes 5, 7, 9, 12, 13.\nNode 3 is connected to nodes 5, 6, 8, 11, 12.\nNode 4 is connected to nodes 7, 8, 11, 12, 14.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 2, 4.\nNode 8 is connected to nodes 3, 4.\nNode 9 is connected to nodes 0, 1, 2.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 3, 4.\nNode 12 is connected to nodes 1, 2, 3, 4.\nNode 13 is connected to nodes 0, 2.\nNode 14 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9, 11, 13],\n1: [5, 7, 9, 10, 12],\n2: [5, 7, 9, 12, 13],\n3: [5, 6, 8, 11, 12],\n4: [7, 8, 11, 12, 14],\n5: [1, 2, 3],\n6: [3],\n7: [1, 2, 4],\n8: [3, 4],\n9: [0, 1, 2],\n10: [1],\n11: [0, 3, 4],\n12: [1, 2, 3, 4],\n13: [0, 2],\n14: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 9, 11.\nNode 1 is connected to nodes 4, 5, 7, 8, 10, 11.\nNode 2 is connected to nodes 4, 7.\nNode 3 is connected to nodes 4, 6, 8, 11.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to node 0.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 9, 11],\n1: [4, 5, 7, 8, 10, 11],\n2: [4, 7],\n3: [4, 6, 8, 11],\n4: [1, 2, 3],\n5: [0, 1],\n6: [0, 3],\n7: [0, 1, 2],\n8: [1, 3],\n9: [0],\n10: [1],\n11: [0, 1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 8, 9, 10, 11, 12, 13.\nNode 1 is connected to nodes 7, 11, 12.\nNode 2 is connected to nodes 9, 12, 14.\nNode 3 is connected to nodes 6, 7, 8, 10, 12.\nNode 4 is connected to nodes 7, 9, 10, 11, 12, 13, 14.\nNode 5 is connected to node 0.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 3, 4.\nNode 8 is connected to nodes 0, 3.\nNode 9 is connected to nodes 0, 2, 4.\nNode 10 is connected to nodes 0, 3, 4.\nNode 11 is connected to nodes 0, 1, 4.\nNode 12 is connected to nodes 0, 1, 2, 3, 4.\nNode 13 is connected to nodes 0, 4.\nNode 14 is connected to nodes 2, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 8, 9, 10, 11, 12, 13],\n1: [7, 11, 12],\n2: [9, 12, 14],\n3: [6, 7, 8, 10, 12],\n4: [7, 9, 10, 11, 12, 13, 14],\n5: [0],\n6: [3],\n7: [1, 3, 4],\n8: [0, 3],\n9: [0, 2, 4],\n10: [0, 3, 4],\n11: [0, 1, 4],\n12: [0, 1, 2, 3, 4],\n13: [0, 4],\n14: [2, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6.\nNode 1 is connected to nodes 4, 6, 7.\nNode 2 is connected to nodes 3, 4, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6],\n1: [4, 6, 7],\n2: [3, 4, 7],\n3: [2],\n4: [1, 2],\n5: [0],\n6: [0, 1],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 7, 8.\nNode 1 is connected to nodes 3, 4, 6.\nNode 2 is connected to nodes 3, 5, 6, 7.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 7, 8],\n1: [3, 4, 6],\n2: [3, 5, 6, 7],\n3: [0, 1, 2],\n4: [1],\n5: [0, 2],\n6: [1, 2],\n7: [0, 2],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 10.\nNode 1 is connected to nodes 5, 8, 9, 12.\nNode 2 is connected to nodes 6, 7, 12.\nNode 3 is connected to nodes 7, 8, 10, 11.\nNode 4 is connected to nodes 7, 8, 10, 12.\nNode 5 is connected to node 1.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 2, 3, 4.\nNode 8 is connected to nodes 1, 3, 4.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 3, 4.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 1, 2, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10],\n1: [5, 8, 9, 12],\n2: [6, 7, 12],\n3: [7, 8, 10, 11],\n4: [7, 8, 10, 12],\n5: [1],\n6: [2],\n7: [2, 3, 4],\n8: [1, 3, 4],\n9: [1],\n10: [0, 3, 4],\n11: [3],\n12: [1, 2, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 8.\nNode 1 is connected to nodes 6, 9.\nNode 2 is connected to nodes 7, 8, 9.\nNode 3 is connected to nodes 4, 6, 8.\nNode 4 is connected to nodes 0, 3.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 8],\n1: [6, 9],\n2: [7, 8, 9],\n3: [4, 6, 8],\n4: [0, 3],\n5: [0],\n6: [1, 3],\n7: [2],\n8: [0, 2, 3],\n9: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10.\nNode 1 is connected to nodes 9, 10, 11.\nNode 2 is connected to node 9.\nNode 3 is connected to node 8.\nNode 4 is connected to nodes 6, 7, 12.\nNode 5 is connected to nodes 6, 10, 11.\nNode 6 is connected to nodes 4, 5.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 3.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to nodes 0, 1, 5.\nNode 11 is connected to nodes 1, 5.\nNode 12 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10],\n1: [9, 10, 11],\n2: [9],\n3: [8],\n4: [6, 7, 12],\n5: [6, 10, 11],\n6: [4, 5],\n7: [4],\n8: [0, 3],\n9: [1, 2],\n10: [0, 1, 5],\n11: [1, 5],\n12: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6.\nNode 1 is connected to nodes 4, 7.\nNode 2 is connected to nodes 4, 6, 7.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6],\n1: [4, 7],\n2: [4, 6, 7],\n3: [0],\n4: [0, 1, 2],\n5: [0],\n6: [0, 2],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6.\nNode 1 is connected to nodes 5, 6, 7.\nNode 2 is connected to node 5.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6],\n1: [5, 6, 7],\n2: [5],\n3: [0],\n4: [0],\n5: [1, 2],\n6: [0, 1],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 9, 10, 11.\nNode 1 is connected to nodes 4, 5, 6, 8.\nNode 2 is connected to nodes 4, 5, 6, 7, 8, 11.\nNode 3 is connected to node 10.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9, 10, 11],\n1: [4, 5, 6, 8],\n2: [4, 5, 6, 7, 8, 11],\n3: [10],\n4: [1, 2],\n5: [1, 2],\n6: [1, 2],\n7: [2],\n8: [1, 2],\n9: [0],\n10: [0, 3],\n11: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8, 9.\nNode 1 is connected to nodes 5, 7, 8.\nNode 2 is connected to nodes 7, 9.\nNode 3 is connected to nodes 4, 5, 6, 7, 8, 9, 10.\nNode 4 is connected to nodes 0, 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 1, 2, 3.\nNode 8 is connected to nodes 0, 1, 3.\nNode 9 is connected to nodes 0, 2, 3.\nNode 10 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8, 9],\n1: [5, 7, 8],\n2: [7, 9],\n3: [4, 5, 6, 7, 8, 9, 10],\n4: [0, 3],\n5: [1, 3],\n6: [3],\n7: [0, 1, 2, 3],\n8: [0, 1, 3],\n9: [0, 2, 3],\n10: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 7, 9.\nNode 2 is connected to nodes 4, 8, 9.\nNode 3 is connected to nodes 4, 5, 6, 8, 9.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to node 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 0, 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [7, 9],\n2: [4, 8, 9],\n3: [4, 5, 6, 8, 9],\n4: [2, 3],\n5: [3],\n6: [3],\n7: [1],\n8: [0, 2, 3],\n9: [0, 1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7.\nNode 1 is connected to nodes 5, 9.\nNode 2 is connected to node 5.\nNode 3 is connected to nodes 8, 10.\nNode 4 is connected to nodes 8, 9, 10.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 0.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 3, 4.\nNode 9 is connected to nodes 1, 4.\nNode 10 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7],\n1: [5, 9],\n2: [5],\n3: [8, 10],\n4: [8, 9, 10],\n5: [0, 1, 2],\n6: [0],\n7: [0],\n8: [3, 4],\n9: [1, 4],\n10: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 10.\nNode 1 is connected to nodes 7, 9, 10.\nNode 2 is connected to nodes 5, 7, 11.\nNode 3 is connected to nodes 6, 8, 11.\nNode 4 is connected to node 7.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 2, 4.\nNode 8 is connected to node 3.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 10],\n1: [7, 9, 10],\n2: [5, 7, 11],\n3: [6, 8, 11],\n4: [7],\n5: [0, 2],\n6: [0, 3],\n7: [1, 2, 4],\n8: [3],\n9: [1],\n10: [0, 1],\n11: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 10.\nNode 1 is connected to nodes 5, 6, 7, 11, 12.\nNode 2 is connected to nodes 8, 9, 11, 12.\nNode 3 is connected to nodes 6, 8, 10.\nNode 4 is connected to node 11.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 1, 2, 4.\nNode 12 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10],\n1: [5, 6, 7, 11, 12],\n2: [8, 9, 11, 12],\n3: [6, 8, 10],\n4: [11],\n5: [1],\n6: [1, 3],\n7: [1],\n8: [2, 3],\n9: [2],\n10: [0, 3],\n11: [1, 2, 4],\n12: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 10.\nNode 1 is connected to nodes 5, 6, 7, 8.\nNode 2 is connected to nodes 6, 8, 9.\nNode 3 is connected to node 6.\nNode 4 is connected to nodes 8, 10.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1, 2, 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 1, 2, 4.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 10],\n1: [5, 6, 7, 8],\n2: [6, 8, 9],\n3: [6],\n4: [8, 10],\n5: [0, 1],\n6: [0, 1, 2, 3],\n7: [1],\n8: [0, 1, 2, 4],\n9: [2],\n10: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 10.\nNode 1 is connected to node 4.\nNode 2 is connected to nodes 4, 8.\nNode 3 is connected to nodes 6, 7, 8, 9.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to node 3.\nNode 10 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 10],\n1: [4],\n2: [4, 8],\n3: [6, 7, 8, 9],\n4: [1, 2],\n5: [0],\n6: [3],\n7: [0, 3],\n8: [2, 3],\n9: [3],\n10: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 8, 9, 10, 12.\nNode 1 is connected to nodes 5, 8, 10, 12.\nNode 2 is connected to nodes 6, 9, 11.\nNode 3 is connected to nodes 8, 9, 10.\nNode 4 is connected to nodes 6, 7, 9, 12.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 1, 3.\nNode 9 is connected to nodes 0, 2, 3, 4.\nNode 10 is connected to nodes 0, 1, 3.\nNode 11 is connected to node 2.\nNode 12 is connected to nodes 0, 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 8, 9, 10, 12],\n1: [5, 8, 10, 12],\n2: [6, 9, 11],\n3: [8, 9, 10],\n4: [6, 7, 9, 12],\n5: [0, 1],\n6: [2, 4],\n7: [4],\n8: [0, 1, 3],\n9: [0, 2, 3, 4],\n10: [0, 1, 3],\n11: [2],\n12: [0, 1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 10, 12.\nNode 1 is connected to nodes 6, 7.\nNode 2 is connected to nodes 5, 7, 11.\nNode 3 is connected to nodes 5, 12, 13.\nNode 4 is connected to nodes 10, 13.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to node 0.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 0, 4.\nNode 11 is connected to node 2.\nNode 12 is connected to nodes 0, 3.\nNode 13 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 10, 12],\n1: [6, 7],\n2: [5, 7, 11],\n3: [5, 12, 13],\n4: [10, 13],\n5: [2, 3],\n6: [0, 1],\n7: [0, 1, 2],\n8: [0],\n9: [0],\n10: [0, 4],\n11: [2],\n12: [0, 3],\n13: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 11, 12.\nNode 1 is connected to nodes 4, 6.\nNode 2 is connected to nodes 6, 7, 8, 11, 14.\nNode 3 is connected to nodes 5, 7, 9, 10, 11, 13, 14.\nNode 4 is connected to node 1.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to node 3.\nNode 10 is connected to node 3.\nNode 11 is connected to nodes 0, 2, 3.\nNode 12 is connected to node 0.\nNode 13 is connected to node 3.\nNode 14 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 11, 12],\n1: [4, 6],\n2: [6, 7, 8, 11, 14],\n3: [5, 7, 9, 10, 11, 13, 14],\n4: [1],\n5: [3],\n6: [1, 2],\n7: [2, 3],\n8: [0, 2],\n9: [3],\n10: [3],\n11: [0, 2, 3],\n12: [0],\n13: [3],\n14: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 11.\nNode 1 is connected to nodes 5, 6, 7, 9, 11.\nNode 2 is connected to nodes 4, 5, 7, 9.\nNode 3 is connected to nodes 6, 8, 9, 10, 11, 12, 13.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to node 3.\nNode 11 is connected to nodes 0, 1, 3.\nNode 12 is connected to node 3.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 11],\n1: [5, 6, 7, 9, 11],\n2: [4, 5, 7, 9],\n3: [6, 8, 9, 10, 11, 12, 13],\n4: [2],\n5: [1, 2],\n6: [0, 1, 3],\n7: [0, 1, 2],\n8: [3],\n9: [1, 2, 3],\n10: [3],\n11: [0, 1, 3],\n12: [3],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 13.\nNode 1 is connected to nodes 6, 7, 11.\nNode 2 is connected to node 12.\nNode 3 is connected to nodes 6, 8, 9, 10, 12.\nNode 4 is connected to nodes 6, 9, 11, 12, 13.\nNode 5 is connected to nodes 7, 8, 9, 10, 12.\nNode 6 is connected to nodes 1, 3, 4.\nNode 7 is connected to nodes 1, 5.\nNode 8 is connected to nodes 0, 3, 5.\nNode 9 is connected to nodes 3, 4, 5.\nNode 10 is connected to nodes 0, 3, 5.\nNode 11 is connected to nodes 1, 4.\nNode 12 is connected to nodes 2, 3, 4, 5.\nNode 13 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 13],\n1: [6, 7, 11],\n2: [12],\n3: [6, 8, 9, 10, 12],\n4: [6, 9, 11, 12, 13],\n5: [7, 8, 9, 10, 12],\n6: [1, 3, 4],\n7: [1, 5],\n8: [0, 3, 5],\n9: [3, 4, 5],\n10: [0, 3, 5],\n11: [1, 4],\n12: [2, 3, 4, 5],\n13: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 10, 13, 14.\nNode 1 is connected to nodes 12, 14.\nNode 2 is connected to nodes 6, 7.\nNode 3 is connected to nodes 7, 11, 13, 14.\nNode 4 is connected to nodes 6, 8, 14.\nNode 5 is connected to nodes 6, 8, 9, 13.\nNode 6 is connected to nodes 0, 2, 4, 5.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 0, 4, 5.\nNode 9 is connected to node 5.\nNode 10 is connected to node 0.\nNode 11 is connected to node 3.\nNode 12 is connected to node 1.\nNode 13 is connected to nodes 0, 3, 5.\nNode 14 is connected to nodes 0, 1, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 10, 13, 14],\n1: [12, 14],\n2: [6, 7],\n3: [7, 11, 13, 14],\n4: [6, 8, 14],\n5: [6, 8, 9, 13],\n6: [0, 2, 4, 5],\n7: [0, 2, 3],\n8: [0, 4, 5],\n9: [5],\n10: [0],\n11: [3],\n12: [1],\n13: [0, 3, 5],\n14: [0, 1, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 9, 12, 14.\nNode 1 is connected to node 11.\nNode 2 is connected to nodes 7, 10.\nNode 3 is connected to nodes 8, 13, 14.\nNode 4 is connected to nodes 7, 8, 9, 10, 12, 13.\nNode 5 is connected to nodes 9, 11.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 2, 4.\nNode 8 is connected to nodes 3, 4.\nNode 9 is connected to nodes 0, 4, 5.\nNode 10 is connected to nodes 2, 4.\nNode 11 is connected to nodes 1, 5.\nNode 12 is connected to nodes 0, 4.\nNode 13 is connected to nodes 3, 4.\nNode 14 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 9, 12, 14],\n1: [11],\n2: [7, 10],\n3: [8, 13, 14],\n4: [7, 8, 9, 10, 12, 13],\n5: [9, 11],\n6: [0],\n7: [2, 4],\n8: [3, 4],\n9: [0, 4, 5],\n10: [2, 4],\n11: [1, 5],\n12: [0, 4],\n13: [3, 4],\n14: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 11.\nNode 1 is connected to nodes 10, 12.\nNode 2 is connected to nodes 4, 7, 11.\nNode 3 is connected to nodes 4, 5, 6, 10, 11.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 0.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 1, 3.\nNode 11 is connected to nodes 0, 2, 3.\nNode 12 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 11],\n1: [10, 12],\n2: [4, 7, 11],\n3: [4, 5, 6, 10, 11],\n4: [2, 3],\n5: [3],\n6: [0, 3],\n7: [0, 2],\n8: [0],\n9: [0],\n10: [1, 3],\n11: [0, 2, 3],\n12: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 10, 12.\nNode 1 is connected to node 14.\nNode 2 is connected to nodes 6, 7, 8, 9, 12, 14.\nNode 3 is connected to nodes 7, 8, 11.\nNode 4 is connected to nodes 9, 10.\nNode 5 is connected to nodes 8, 9, 10, 13.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 2, 3, 5.\nNode 9 is connected to nodes 2, 4, 5.\nNode 10 is connected to nodes 0, 4, 5.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 0, 2.\nNode 13 is connected to node 5.\nNode 14 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10, 12],\n1: [14],\n2: [6, 7, 8, 9, 12, 14],\n3: [7, 8, 11],\n4: [9, 10],\n5: [8, 9, 10, 13],\n6: [2],\n7: [2, 3],\n8: [2, 3, 5],\n9: [2, 4, 5],\n10: [0, 4, 5],\n11: [3],\n12: [0, 2],\n13: [5],\n14: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 9, 11, 13.\nNode 1 is connected to nodes 9, 10, 11, 13, 14.\nNode 2 is connected to nodes 6, 10, 12, 13, 14.\nNode 3 is connected to nodes 6, 7, 10, 12.\nNode 4 is connected to nodes 10, 14.\nNode 5 is connected to nodes 7, 8, 10, 13.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to nodes 0, 3, 5.\nNode 8 is connected to nodes 0, 5.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to nodes 1, 2, 3, 4, 5.\nNode 11 is connected to nodes 0, 1.\nNode 12 is connected to nodes 2, 3.\nNode 13 is connected to nodes 0, 1, 2, 5.\nNode 14 is connected to nodes 1, 2, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 9, 11, 13],\n1: [9, 10, 11, 13, 14],\n2: [6, 10, 12, 13, 14],\n3: [6, 7, 10, 12],\n4: [10, 14],\n5: [7, 8, 10, 13],\n6: [2, 3],\n7: [0, 3, 5],\n8: [0, 5],\n9: [0, 1],\n10: [1, 2, 3, 4, 5],\n11: [0, 1],\n12: [2, 3],\n13: [0, 1, 2, 5],\n14: [1, 2, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6.\nNode 1 is connected to nodes 5, 6, 7.\nNode 2 is connected to node 4.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6],\n1: [5, 6, 7],\n2: [4],\n3: [0],\n4: [0, 2],\n5: [1],\n6: [0, 1],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 4, 5.\nNode 2 is connected to nodes 6, 7, 8.\nNode 3 is connected to nodes 4, 6.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [4, 5],\n2: [6, 7, 8],\n3: [4, 6],\n4: [1, 3],\n5: [1],\n6: [2, 3],\n7: [0, 2],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6, 7, 9.\nNode 1 is connected to nodes 3, 5, 6.\nNode 2 is connected to nodes 4, 5, 7, 8, 9.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6, 7, 9],\n1: [3, 5, 6],\n2: [4, 5, 7, 8, 9],\n3: [0, 1],\n4: [2],\n5: [1, 2],\n6: [0, 1],\n7: [0, 2],\n8: [2],\n9: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8.\nNode 1 is connected to nodes 5, 7, 8, 9.\nNode 2 is connected to nodes 5, 8, 11.\nNode 3 is connected to nodes 5, 6, 9, 10, 11.\nNode 4 is connected to nodes 5, 8, 9, 10.\nNode 5 is connected to nodes 0, 1, 2, 3, 4.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 0, 1, 2, 4.\nNode 9 is connected to nodes 1, 3, 4.\nNode 10 is connected to nodes 3, 4.\nNode 11 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8],\n1: [5, 7, 8, 9],\n2: [5, 8, 11],\n3: [5, 6, 9, 10, 11],\n4: [5, 8, 9, 10],\n5: [0, 1, 2, 3, 4],\n6: [0, 3],\n7: [0, 1],\n8: [0, 1, 2, 4],\n9: [1, 3, 4],\n10: [3, 4],\n11: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10, 12.\nNode 1 is connected to nodes 4, 5, 13, 14.\nNode 2 is connected to nodes 5, 6, 8.\nNode 3 is connected to nodes 9, 10, 11, 13.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 2.\nNode 9 is connected to node 3.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to node 3.\nNode 12 is connected to node 0.\nNode 13 is connected to nodes 1, 3.\nNode 14 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10, 12],\n1: [4, 5, 13, 14],\n2: [5, 6, 8],\n3: [9, 10, 11, 13],\n4: [1],\n5: [1, 2],\n6: [2],\n7: [0],\n8: [2],\n9: [3],\n10: [0, 3],\n11: [3],\n12: [0],\n13: [1, 3],\n14: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 10, 11, 12.\nNode 1 is connected to node 11.\nNode 2 is connected to node 9.\nNode 3 is connected to nodes 5, 8, 10, 12.\nNode 4 is connected to nodes 7, 9, 12.\nNode 5 is connected to node 3.\nNode 6 is connected to node 0.\nNode 7 is connected to node 4.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 0, 1.\nNode 12 is connected to nodes 0, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 10, 11, 12],\n1: [11],\n2: [9],\n3: [5, 8, 10, 12],\n4: [7, 9, 12],\n5: [3],\n6: [0],\n7: [4],\n8: [3],\n9: [2, 4],\n10: [0, 3],\n11: [0, 1],\n12: [0, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 10, 11.\nNode 1 is connected to nodes 11, 13.\nNode 2 is connected to nodes 6, 9, 11.\nNode 3 is connected to node 12.\nNode 4 is connected to nodes 6, 7, 9, 12, 13.\nNode 5 is connected to nodes 6, 7, 9.\nNode 6 is connected to nodes 2, 4, 5.\nNode 7 is connected to nodes 4, 5.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 2, 4, 5.\nNode 10 is connected to node 0.\nNode 11 is connected to nodes 0, 1, 2.\nNode 12 is connected to nodes 3, 4.\nNode 13 is connected to nodes 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 10, 11],\n1: [11, 13],\n2: [6, 9, 11],\n3: [12],\n4: [6, 7, 9, 12, 13],\n5: [6, 7, 9],\n6: [2, 4, 5],\n7: [4, 5],\n8: [0],\n9: [0, 2, 4, 5],\n10: [0],\n11: [0, 1, 2],\n12: [3, 4],\n13: [1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10.\nNode 1 is connected to nodes 5, 8, 10.\nNode 2 is connected to node 10.\nNode 3 is connected to nodes 6, 9, 10, 11.\nNode 4 is connected to nodes 7, 9.\nNode 5 is connected to node 1.\nNode 6 is connected to node 3.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 3, 4.\nNode 10 is connected to nodes 0, 1, 2, 3.\nNode 11 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10],\n1: [5, 8, 10],\n2: [10],\n3: [6, 9, 10, 11],\n4: [7, 9],\n5: [1],\n6: [3],\n7: [4],\n8: [0, 1],\n9: [3, 4],\n10: [0, 1, 2, 3],\n11: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8, 9, 10.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 5, 11.\nNode 3 is connected to nodes 5, 6, 10, 11.\nNode 4 is connected to nodes 8, 9, 11.\nNode 5 is connected to nodes 0, 1, 2, 3.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8, 9, 10],\n1: [5, 6],\n2: [5, 11],\n3: [5, 6, 10, 11],\n4: [8, 9, 11],\n5: [0, 1, 2, 3],\n6: [0, 1, 3],\n7: [0],\n8: [0, 4],\n9: [0, 4],\n10: [0, 3],\n11: [2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 9, 11.\nNode 1 is connected to nodes 5, 6, 9.\nNode 2 is connected to nodes 7, 8, 12, 13, 14.\nNode 3 is connected to nodes 5, 7, 10.\nNode 4 is connected to nodes 5, 11, 12.\nNode 5 is connected to nodes 1, 3, 4.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to node 3.\nNode 11 is connected to nodes 0, 4.\nNode 12 is connected to nodes 2, 4.\nNode 13 is connected to node 2.\nNode 14 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9, 11],\n1: [5, 6, 9],\n2: [7, 8, 12, 13, 14],\n3: [5, 7, 10],\n4: [5, 11, 12],\n5: [1, 3, 4],\n6: [1],\n7: [2, 3],\n8: [2],\n9: [0, 1],\n10: [3],\n11: [0, 4],\n12: [2, 4],\n13: [2],\n14: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9.\nNode 1 is connected to nodes 5, 7, 8.\nNode 2 is connected to nodes 7, 9.\nNode 3 is connected to nodes 4, 5, 6, 8, 9.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 0, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9],\n1: [5, 7, 8],\n2: [7, 9],\n3: [4, 5, 6, 8, 9],\n4: [3],\n5: [1, 3],\n6: [3],\n7: [0, 1, 2],\n8: [1, 3],\n9: [0, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6.\nNode 1 is connected to nodes 4, 8.\nNode 2 is connected to nodes 4, 5, 8.\nNode 3 is connected to nodes 7, 8.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 0.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6],\n1: [4, 8],\n2: [4, 5, 8],\n3: [7, 8],\n4: [0, 1, 2],\n5: [2],\n6: [0],\n7: [3],\n8: [1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6, 7, 8.\nNode 1 is connected to node 4.\nNode 2 is connected to node 3.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to node 0.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6, 7, 8],\n1: [4],\n2: [3],\n3: [0, 2],\n4: [0, 1],\n5: [0],\n6: [0],\n7: [0],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 7.\nNode 1 is connected to nodes 8, 9.\nNode 2 is connected to nodes 4, 6, 9.\nNode 3 is connected to nodes 5, 7, 8.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 7],\n1: [8, 9],\n2: [4, 6, 9],\n3: [5, 7, 8],\n4: [0, 2],\n5: [0, 3],\n6: [2],\n7: [0, 3],\n8: [1, 3],\n9: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 5, 6, 7, 8.\nNode 3 is connected to nodes 4, 5.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [5, 6],\n2: [5, 6, 7, 8],\n3: [4, 5],\n4: [3],\n5: [1, 2, 3],\n6: [0, 1, 2],\n7: [0, 2],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10, 12.\nNode 1 is connected to node 6.\nNode 2 is connected to nodes 6, 7, 9, 10.\nNode 3 is connected to nodes 8, 9, 12.\nNode 4 is connected to nodes 5, 7, 10, 11.\nNode 5 is connected to node 4.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2, 4.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 2, 4.\nNode 11 is connected to node 4.\nNode 12 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10, 12],\n1: [6],\n2: [6, 7, 9, 10],\n3: [8, 9, 12],\n4: [5, 7, 10, 11],\n5: [4],\n6: [1, 2],\n7: [0, 2, 4],\n8: [3],\n9: [2, 3],\n10: [0, 2, 4],\n11: [4],\n12: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6, 8, 9.\nNode 1 is connected to nodes 4, 6, 9.\nNode 2 is connected to nodes 3, 5, 6, 7, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6, 8, 9],\n1: [4, 6, 9],\n2: [3, 5, 6, 7, 8],\n3: [0, 2],\n4: [1],\n5: [2],\n6: [0, 1, 2],\n7: [2],\n8: [0, 2],\n9: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 9.\nNode 1 is connected to nodes 4, 6, 7.\nNode 2 is connected to nodes 4, 8.\nNode 3 is connected to nodes 4, 5, 7.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to node 2.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 9],\n1: [4, 6, 7],\n2: [4, 8],\n3: [4, 5, 7],\n4: [1, 2, 3],\n5: [0, 3],\n6: [1],\n7: [1, 3],\n8: [2],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 11, 12.\nNode 1 is connected to nodes 6, 9, 10.\nNode 2 is connected to nodes 6, 8, 11.\nNode 3 is connected to nodes 5, 6, 9.\nNode 4 is connected to node 0.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 2, 3.\nNode 7 is connected to node 0.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 2.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 11, 12],\n1: [6, 9, 10],\n2: [6, 8, 11],\n3: [5, 6, 9],\n4: [0],\n5: [3],\n6: [1, 2, 3],\n7: [0],\n8: [2],\n9: [1, 3],\n10: [1],\n11: [0, 2],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 7.\nNode 1 is connected to nodes 3, 4, 6, 8, 9.\nNode 2 is connected to nodes 3, 4, 7, 9.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 7],\n1: [3, 4, 6, 8, 9],\n2: [3, 4, 7, 9],\n3: [0, 1, 2],\n4: [1, 2],\n5: [0],\n6: [1],\n7: [0, 2],\n8: [1],\n9: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 9.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to nodes 5, 6, 7, 8.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 5, 7, 10.\nNode 5 is connected to nodes 0, 1, 2, 4.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 1, 2, 3, 4.\nNode 8 is connected to node 2.\nNode 9 is connected to node 0.\nNode 10 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 9],\n1: [5, 7],\n2: [5, 6, 7, 8],\n3: [7],\n4: [5, 7, 10],\n5: [0, 1, 2, 4],\n6: [2],\n7: [1, 2, 3, 4],\n8: [2],\n9: [0],\n10: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8, 12.\nNode 1 is connected to nodes 4, 5, 9, 10.\nNode 2 is connected to nodes 4, 5, 6, 7, 9.\nNode 3 is connected to nodes 4, 11.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to node 1.\nNode 11 is connected to node 3.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8, 12],\n1: [4, 5, 9, 10],\n2: [4, 5, 6, 7, 9],\n3: [4, 11],\n4: [1, 2, 3],\n5: [0, 1, 2],\n6: [0, 2],\n7: [0, 2],\n8: [0],\n9: [1, 2],\n10: [1],\n11: [3],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 6, 8, 11.\nNode 2 is connected to nodes 6, 7, 10.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 7, 8, 10, 12.\nNode 5 is connected to node 9.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 2, 3, 4.\nNode 8 is connected to nodes 0, 1, 4.\nNode 9 is connected to nodes 0, 5.\nNode 10 is connected to nodes 2, 4.\nNode 11 is connected to node 1.\nNode 12 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [6, 8, 11],\n2: [6, 7, 10],\n3: [7],\n4: [7, 8, 10, 12],\n5: [9],\n6: [1, 2],\n7: [2, 3, 4],\n8: [0, 1, 4],\n9: [0, 5],\n10: [2, 4],\n11: [1],\n12: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 7, 9, 11, 12.\nNode 1 is connected to nodes 4, 5, 6, 9.\nNode 2 is connected to nodes 8, 9, 10.\nNode 3 is connected to nodes 6, 8, 9.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to nodes 0, 1, 2, 3.\nNode 10 is connected to node 2.\nNode 11 is connected to node 0.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 7, 9, 11, 12],\n1: [4, 5, 6, 9],\n2: [8, 9, 10],\n3: [6, 8, 9],\n4: [0, 1],\n5: [0, 1],\n6: [0, 1, 3],\n7: [0],\n8: [2, 3],\n9: [0, 1, 2, 3],\n10: [2],\n11: [0],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7.\nNode 1 is connected to nodes 5, 7, 9.\nNode 2 is connected to nodes 4, 5, 6.\nNode 3 is connected to nodes 4, 8, 9.\nNode 4 is connected to nodes 0, 2, 3.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7],\n1: [5, 7, 9],\n2: [4, 5, 6],\n3: [4, 8, 9],\n4: [0, 2, 3],\n5: [1, 2],\n6: [2],\n7: [0, 1],\n8: [3],\n9: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 6.\nNode 1 is connected to nodes 6, 7, 9.\nNode 2 is connected to nodes 5, 6, 7, 8.\nNode 3 is connected to nodes 4, 5, 9.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6],\n1: [6, 7, 9],\n2: [5, 6, 7, 8],\n3: [4, 5, 9],\n4: [3],\n5: [2, 3],\n6: [0, 1, 2],\n7: [1, 2],\n8: [2],\n9: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 10, 11, 12.\nNode 1 is connected to nodes 5, 6, 9.\nNode 2 is connected to nodes 5, 6, 7, 9.\nNode 3 is connected to nodes 11, 12, 13.\nNode 4 is connected to nodes 6, 7, 8, 11, 12.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to nodes 1, 2, 4.\nNode 7 is connected to nodes 0, 2, 4.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to node 0.\nNode 11 is connected to nodes 0, 3, 4.\nNode 12 is connected to nodes 0, 3, 4.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 10, 11, 12],\n1: [5, 6, 9],\n2: [5, 6, 7, 9],\n3: [11, 12, 13],\n4: [6, 7, 8, 11, 12],\n5: [0, 1, 2],\n6: [1, 2, 4],\n7: [0, 2, 4],\n8: [4],\n9: [1, 2],\n10: [0],\n11: [0, 3, 4],\n12: [0, 3, 4],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 3, 8.\nNode 2 is connected to nodes 3, 4, 5, 6, 7.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [3, 8],\n2: [3, 4, 5, 6, 7],\n3: [1, 2],\n4: [2],\n5: [2],\n6: [2],\n7: [0, 2],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 5.\nNode 1 is connected to nodes 4, 7, 8, 9.\nNode 2 is connected to nodes 4, 5, 6, 8, 10, 12.\nNode 3 is connected to nodes 6, 7, 9, 10, 11, 13.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to nodes 2, 3.\nNode 11 is connected to node 3.\nNode 12 is connected to node 2.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5],\n1: [4, 7, 8, 9],\n2: [4, 5, 6, 8, 10, 12],\n3: [6, 7, 9, 10, 11, 13],\n4: [1, 2],\n5: [0, 2],\n6: [2, 3],\n7: [1, 3],\n8: [1, 2],\n9: [1, 3],\n10: [2, 3],\n11: [3],\n12: [2],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to node 4.\nNode 3 is connected to nodes 5, 6, 8.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to nodes 0, 1, 3.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to node 0.\nNode 8 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7],\n1: [4, 5, 6],\n2: [4],\n3: [5, 6, 8],\n4: [1, 2],\n5: [0, 1, 3],\n6: [0, 1, 3],\n7: [0],\n8: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 12.\nNode 1 is connected to nodes 5, 8, 9, 13, 14.\nNode 2 is connected to nodes 4, 6, 7, 9, 10, 11.\nNode 3 is connected to nodes 4, 7, 9, 12, 13.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to node 2.\nNode 11 is connected to node 2.\nNode 12 is connected to nodes 0, 3.\nNode 13 is connected to nodes 1, 3.\nNode 14 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 12],\n1: [5, 8, 9, 13, 14],\n2: [4, 6, 7, 9, 10, 11],\n3: [4, 7, 9, 12, 13],\n4: [2, 3],\n5: [0, 1],\n6: [0, 2],\n7: [2, 3],\n8: [0, 1],\n9: [1, 2, 3],\n10: [2],\n11: [2],\n12: [0, 3],\n13: [1, 3],\n14: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 5.\nNode 1 is connected to nodes 3, 6, 8.\nNode 2 is connected to nodes 4, 5, 6, 7.\nNode 3 is connected to node 1.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5],\n1: [3, 6, 8],\n2: [4, 5, 6, 7],\n3: [1],\n4: [2],\n5: [0, 2],\n6: [1, 2],\n7: [2],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 11, 14.\nNode 1 is connected to nodes 8, 9, 11.\nNode 2 is connected to nodes 7, 13.\nNode 3 is connected to nodes 11, 13, 14.\nNode 4 is connected to nodes 6, 7, 9, 10, 12, 13.\nNode 5 is connected to nodes 6, 7, 8, 9, 12, 14.\nNode 6 is connected to nodes 4, 5.\nNode 7 is connected to nodes 2, 4, 5.\nNode 8 is connected to nodes 1, 5.\nNode 9 is connected to nodes 1, 4, 5.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 0, 1, 3.\nNode 12 is connected to nodes 4, 5.\nNode 13 is connected to nodes 2, 3, 4.\nNode 14 is connected to nodes 0, 3, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [11, 14],\n1: [8, 9, 11],\n2: [7, 13],\n3: [11, 13, 14],\n4: [6, 7, 9, 10, 12, 13],\n5: [6, 7, 8, 9, 12, 14],\n6: [4, 5],\n7: [2, 4, 5],\n8: [1, 5],\n9: [1, 4, 5],\n10: [4],\n11: [0, 1, 3],\n12: [4, 5],\n13: [2, 3, 4],\n14: [0, 3, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7.\nNode 1 is connected to nodes 4, 5, 8, 9.\nNode 2 is connected to node 7.\nNode 3 is connected to nodes 5, 6, 8, 9.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7],\n1: [4, 5, 8, 9],\n2: [7],\n3: [5, 6, 8, 9],\n4: [1],\n5: [0, 1, 3],\n6: [3],\n7: [0, 2],\n8: [1, 3],\n9: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6, 7.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to node 3.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 0.\nNode 5 is connected to node 1.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6, 7],\n1: [5, 7],\n2: [3],\n3: [0, 2],\n4: [0],\n5: [1],\n6: [0],\n7: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 8.\nNode 1 is connected to nodes 5, 7, 8, 9.\nNode 2 is connected to node 8.\nNode 3 is connected to nodes 4, 5, 6, 8.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8],\n1: [5, 7, 8, 9],\n2: [8],\n3: [4, 5, 6, 8],\n4: [3],\n5: [1, 3],\n6: [3],\n7: [1],\n8: [0, 1, 2, 3],\n9: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7.\nNode 1 is connected to nodes 4, 6.\nNode 2 is connected to nodes 3, 5, 6, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7],\n1: [4, 6],\n2: [3, 5, 6, 7],\n3: [2],\n4: [1],\n5: [0, 2],\n6: [1, 2],\n7: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 2, 3, 4, 5, 6, 7.\nNode 2 is connected to node 1.\nNode 3 is connected to node 1.\nNode 4 is connected to node 1.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [2, 3, 4, 5, 6, 7],\n2: [1],\n3: [1],\n4: [1],\n5: [1],\n6: [0, 1],\n7: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 4.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to nodes 3, 4, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to node 1.\nNode 7 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4],\n1: [4, 5, 6],\n2: [3, 4, 7],\n3: [2],\n4: [0, 1, 2],\n5: [1],\n6: [1],\n7: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to node 7.\nNode 2 is connected to nodes 11, 13, 14.\nNode 3 is connected to nodes 9, 12, 13.\nNode 4 is connected to node 8.\nNode 5 is connected to nodes 9, 10.\nNode 6 is connected to nodes 7, 9, 12, 13.\nNode 7 is connected to nodes 1, 6.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 0, 3, 5, 6.\nNode 10 is connected to node 5.\nNode 11 is connected to node 2.\nNode 12 is connected to nodes 3, 6.\nNode 13 is connected to nodes 2, 3, 6.\nNode 14 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [7],\n2: [11, 13, 14],\n3: [9, 12, 13],\n4: [8],\n5: [9, 10],\n6: [7, 9, 12, 13],\n7: [1, 6],\n8: [0, 4],\n9: [0, 3, 5, 6],\n10: [5],\n11: [2],\n12: [3, 6],\n13: [2, 3, 6],\n14: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10.\nNode 1 is connected to nodes 7, 10.\nNode 2 is connected to nodes 6, 9, 11.\nNode 3 is connected to nodes 7, 11.\nNode 4 is connected to nodes 6, 7, 8, 9, 11.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to nodes 1, 3, 4.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to nodes 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10],\n1: [7, 10],\n2: [6, 9, 11],\n3: [7, 11],\n4: [6, 7, 8, 9, 11],\n5: [0],\n6: [2, 4],\n7: [1, 3, 4],\n8: [4],\n9: [2, 4],\n10: [0, 1],\n11: [2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 6, 7.\nNode 1 is connected to node 4.\nNode 2 is connected to nodes 3, 4, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to node 0.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 6, 7],\n1: [4],\n2: [3, 4, 8],\n3: [0, 2],\n4: [1, 2],\n5: [0],\n6: [0],\n7: [0],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 8.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 4, 8.\nNode 3 is connected to nodes 4, 6, 8.\nNode 4 is connected to nodes 0, 2, 3.\nNode 5 is connected to node 0.\nNode 6 is connected to node 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 8],\n1: [7, 8],\n2: [4, 8],\n3: [4, 6, 8],\n4: [0, 2, 3],\n5: [0],\n6: [3],\n7: [1],\n8: [0, 1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 9, 14.\nNode 1 is connected to nodes 11, 12.\nNode 2 is connected to nodes 6, 7, 8, 11, 12, 14.\nNode 3 is connected to nodes 7, 11.\nNode 4 is connected to nodes 9, 10, 11, 13.\nNode 5 is connected to nodes 8, 12.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 2, 5.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 1, 2, 3, 4.\nNode 12 is connected to nodes 1, 2, 5.\nNode 13 is connected to node 4.\nNode 14 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 9, 14],\n1: [11, 12],\n2: [6, 7, 8, 11, 12, 14],\n3: [7, 11],\n4: [9, 10, 11, 13],\n5: [8, 12],\n6: [0, 2],\n7: [2, 3],\n8: [2, 5],\n9: [0, 4],\n10: [4],\n11: [1, 2, 3, 4],\n12: [1, 2, 5],\n13: [4],\n14: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 10.\nNode 1 is connected to nodes 6, 11.\nNode 2 is connected to nodes 7, 9.\nNode 3 is connected to nodes 5, 7, 8.\nNode 4 is connected to nodes 6, 7, 8, 10.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 4.\nNode 7 is connected to nodes 2, 3, 4.\nNode 8 is connected to nodes 0, 3, 4.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to nodes 0, 4.\nNode 11 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 10],\n1: [6, 11],\n2: [7, 9],\n3: [5, 7, 8],\n4: [6, 7, 8, 10],\n5: [3],\n6: [1, 4],\n7: [2, 3, 4],\n8: [0, 3, 4],\n9: [0, 2],\n10: [0, 4],\n11: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6, 9.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 3, 4, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6, 9],\n1: [7, 8],\n2: [3, 4, 8],\n3: [0, 2],\n4: [0, 2],\n5: [0],\n6: [0],\n7: [1],\n8: [1, 2],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 10, 13, 14.\nNode 1 is connected to nodes 6, 9.\nNode 2 is connected to nodes 7, 9, 10, 12.\nNode 3 is connected to nodes 7, 8, 12.\nNode 4 is connected to node 8.\nNode 5 is connected to nodes 10, 11.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 0, 3, 4.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to nodes 0, 2, 5.\nNode 11 is connected to node 5.\nNode 12 is connected to nodes 2, 3.\nNode 13 is connected to node 0.\nNode 14 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 10, 13, 14],\n1: [6, 9],\n2: [7, 9, 10, 12],\n3: [7, 8, 12],\n4: [8],\n5: [10, 11],\n6: [1],\n7: [0, 2, 3],\n8: [0, 3, 4],\n9: [1, 2],\n10: [0, 2, 5],\n11: [5],\n12: [2, 3],\n13: [0],\n14: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 7.\nNode 1 is connected to node 4.\nNode 2 is connected to nodes 5, 6, 7.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 2.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 7],\n1: [4],\n2: [5, 6, 7],\n3: [0],\n4: [0, 1],\n5: [2],\n6: [2],\n7: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 9, 10.\nNode 1 is connected to nodes 5, 6, 9, 11.\nNode 2 is connected to nodes 7, 8, 9, 10.\nNode 3 is connected to nodes 6, 8, 9.\nNode 4 is connected to nodes 6, 7, 10, 11.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 3, 4.\nNode 7 is connected to nodes 0, 2, 4.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 0, 1, 2, 3.\nNode 10 is connected to nodes 0, 2, 4.\nNode 11 is connected to nodes 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 9, 10],\n1: [5, 6, 9, 11],\n2: [7, 8, 9, 10],\n3: [6, 8, 9],\n4: [6, 7, 10, 11],\n5: [1],\n6: [1, 3, 4],\n7: [0, 2, 4],\n8: [0, 2, 3],\n9: [0, 1, 2, 3],\n10: [0, 2, 4],\n11: [1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 12.\nNode 1 is connected to nodes 8, 10.\nNode 2 is connected to nodes 6, 7, 9.\nNode 3 is connected to nodes 7, 10, 12.\nNode 4 is connected to node 10.\nNode 5 is connected to nodes 9, 11.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 2, 5.\nNode 10 is connected to nodes 0, 1, 3, 4.\nNode 11 is connected to node 5.\nNode 12 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 12],\n1: [8, 10],\n2: [6, 7, 9],\n3: [7, 10, 12],\n4: [10],\n5: [9, 11],\n6: [2],\n7: [2, 3],\n8: [0, 1],\n9: [2, 5],\n10: [0, 1, 3, 4],\n11: [5],\n12: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 11, 12.\nNode 1 is connected to nodes 7, 12.\nNode 2 is connected to nodes 6, 9.\nNode 3 is connected to node 12.\nNode 4 is connected to nodes 8, 9, 10.\nNode 5 is connected to node 11.\nNode 6 is connected to node 2.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 0, 5.\nNode 12 is connected to nodes 0, 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 11, 12],\n1: [7, 12],\n2: [6, 9],\n3: [12],\n4: [8, 9, 10],\n5: [11],\n6: [2],\n7: [1],\n8: [0, 4],\n9: [2, 4],\n10: [4],\n11: [0, 5],\n12: [0, 1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 7.\nNode 1 is connected to nodes 5, 6, 7.\nNode 2 is connected to nodes 6, 8.\nNode 3 is connected to node 6.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1, 2, 3.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 7],\n1: [5, 6, 7],\n2: [6, 8],\n3: [6],\n4: [0],\n5: [0, 1],\n6: [0, 1, 2, 3],\n7: [0, 1],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6.\nNode 1 is connected to nodes 3, 5.\nNode 2 is connected to nodes 4, 5, 6, 7.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6],\n1: [3, 5],\n2: [4, 5, 6, 7],\n3: [1],\n4: [0, 2],\n5: [0, 1, 2],\n6: [0, 2],\n7: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5.\nNode 1 is connected to nodes 3, 5, 6, 7.\nNode 2 is connected to nodes 4, 6, 8, 9.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 2.\nNode 9 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5],\n1: [3, 5, 6, 7],\n2: [4, 6, 8, 9],\n3: [1],\n4: [0, 2],\n5: [0, 1],\n6: [1, 2],\n7: [1],\n8: [2],\n9: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 11, 12.\nNode 1 is connected to nodes 6, 7, 10.\nNode 2 is connected to nodes 8, 9, 10, 11, 12, 13.\nNode 3 is connected to nodes 6, 7, 8, 9, 10, 12, 13.\nNode 4 is connected to nodes 5, 6, 7, 11, 14.\nNode 5 is connected to node 4.\nNode 6 is connected to nodes 0, 1, 3, 4.\nNode 7 is connected to nodes 1, 3, 4.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 1, 2, 3.\nNode 11 is connected to nodes 0, 2, 4.\nNode 12 is connected to nodes 0, 2, 3.\nNode 13 is connected to nodes 2, 3.\nNode 14 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 11, 12],\n1: [6, 7, 10],\n2: [8, 9, 10, 11, 12, 13],\n3: [6, 7, 8, 9, 10, 12, 13],\n4: [5, 6, 7, 11, 14],\n5: [4],\n6: [0, 1, 3, 4],\n7: [1, 3, 4],\n8: [2, 3],\n9: [2, 3],\n10: [1, 2, 3],\n11: [0, 2, 4],\n12: [0, 2, 3],\n13: [2, 3],\n14: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 9, 11, 12.\nNode 1 is connected to nodes 5, 7, 9, 10.\nNode 2 is connected to nodes 7, 9, 11, 13, 14.\nNode 3 is connected to nodes 7, 9, 11, 13, 14.\nNode 4 is connected to node 10.\nNode 5 is connected to node 1.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 1, 2, 3.\nNode 10 is connected to nodes 1, 4.\nNode 11 is connected to nodes 0, 2, 3.\nNode 12 is connected to node 0.\nNode 13 is connected to nodes 2, 3.\nNode 14 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 9, 11, 12],\n1: [5, 7, 9, 10],\n2: [7, 9, 11, 13, 14],\n3: [7, 9, 11, 13, 14],\n4: [10],\n5: [1],\n6: [0],\n7: [1, 2, 3],\n8: [0],\n9: [0, 1, 2, 3],\n10: [1, 4],\n11: [0, 2, 3],\n12: [0],\n13: [2, 3],\n14: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 11.\nNode 1 is connected to nodes 6, 7, 8, 10.\nNode 2 is connected to nodes 5, 6, 7, 11.\nNode 3 is connected to nodes 5, 7.\nNode 4 is connected to nodes 7, 9, 10.\nNode 5 is connected to nodes 0, 2, 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 1, 2, 3, 4.\nNode 8 is connected to node 1.\nNode 9 is connected to node 4.\nNode 10 is connected to nodes 1, 4.\nNode 11 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 11],\n1: [6, 7, 8, 10],\n2: [5, 6, 7, 11],\n3: [5, 7],\n4: [7, 9, 10],\n5: [0, 2, 3],\n6: [1, 2],\n7: [1, 2, 3, 4],\n8: [1],\n9: [4],\n10: [1, 4],\n11: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 10.\nNode 1 is connected to nodes 5, 6, 7.\nNode 2 is connected to nodes 6, 7, 10.\nNode 3 is connected to nodes 6, 10.\nNode 4 is connected to nodes 9, 10.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 2, 3.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to nodes 0, 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 10],\n1: [5, 6, 7],\n2: [6, 7, 10],\n3: [6, 10],\n4: [9, 10],\n5: [1],\n6: [1, 2, 3],\n7: [1, 2],\n8: [0],\n9: [0, 4],\n10: [0, 2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 11, 12, 13, 14.\nNode 1 is connected to nodes 6, 7, 8, 9, 11, 13.\nNode 2 is connected to nodes 6, 8, 13.\nNode 3 is connected to nodes 7, 10.\nNode 4 is connected to nodes 6, 7, 9, 10, 11, 12.\nNode 5 is connected to nodes 6, 9, 10, 12.\nNode 6 is connected to nodes 0, 1, 2, 4, 5.\nNode 7 is connected to nodes 0, 1, 3, 4.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 1, 4, 5.\nNode 10 is connected to nodes 3, 4, 5.\nNode 11 is connected to nodes 0, 1, 4.\nNode 12 is connected to nodes 0, 4, 5.\nNode 13 is connected to nodes 0, 1, 2.\nNode 14 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 11, 12, 13, 14],\n1: [6, 7, 8, 9, 11, 13],\n2: [6, 8, 13],\n3: [7, 10],\n4: [6, 7, 9, 10, 11, 12],\n5: [6, 9, 10, 12],\n6: [0, 1, 2, 4, 5],\n7: [0, 1, 3, 4],\n8: [1, 2],\n9: [1, 4, 5],\n10: [3, 4, 5],\n11: [0, 1, 4],\n12: [0, 4, 5],\n13: [0, 1, 2],\n14: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 10.\nNode 1 is connected to nodes 4, 6, 7, 8.\nNode 2 is connected to nodes 5, 9.\nNode 3 is connected to nodes 4, 9, 10.\nNode 4 is connected to nodes 0, 1, 3.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 10],\n1: [4, 6, 7, 8],\n2: [5, 9],\n3: [4, 9, 10],\n4: [0, 1, 3],\n5: [2],\n6: [0, 1],\n7: [1],\n8: [1],\n9: [2, 3],\n10: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 8.\nNode 1 is connected to nodes 6, 7, 8.\nNode 2 is connected to nodes 5, 6, 7.\nNode 3 is connected to node 6.\nNode 4 is connected to node 0.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 1, 2, 3.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 8],\n1: [6, 7, 8],\n2: [5, 6, 7],\n3: [6],\n4: [0],\n5: [2],\n6: [1, 2, 3],\n7: [1, 2],\n8: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10, 12.\nNode 1 is connected to nodes 7, 8, 9, 13.\nNode 2 is connected to node 8.\nNode 3 is connected to nodes 11, 12, 13, 14.\nNode 4 is connected to node 10.\nNode 5 is connected to node 10.\nNode 6 is connected to node 9.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 1, 6.\nNode 10 is connected to nodes 0, 4, 5.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 0, 3.\nNode 13 is connected to nodes 1, 3.\nNode 14 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10, 12],\n1: [7, 8, 9, 13],\n2: [8],\n3: [11, 12, 13, 14],\n4: [10],\n5: [10],\n6: [9],\n7: [0, 1],\n8: [1, 2],\n9: [1, 6],\n10: [0, 4, 5],\n11: [3],\n12: [0, 3],\n13: [1, 3],\n14: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8.\nNode 1 is connected to nodes 4, 5, 6, 7.\nNode 2 is connected to nodes 4, 6, 7, 8.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 1, 2, 3.\nNode 8 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8],\n1: [4, 5, 6, 7],\n2: [4, 6, 7, 8],\n3: [7],\n4: [1, 2],\n5: [1],\n6: [1, 2],\n7: [0, 1, 2, 3],\n8: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 10, 13, 14.\nNode 1 is connected to nodes 10, 13.\nNode 2 is connected to nodes 9, 10, 11.\nNode 3 is connected to nodes 5, 6, 9, 10, 13, 14.\nNode 4 is connected to nodes 7, 8, 11, 12, 13.\nNode 5 is connected to node 3.\nNode 6 is connected to node 3.\nNode 7 is connected to node 4.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 1, 2, 3.\nNode 11 is connected to nodes 2, 4.\nNode 12 is connected to node 4.\nNode 13 is connected to nodes 0, 1, 3, 4.\nNode 14 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10, 13, 14],\n1: [10, 13],\n2: [9, 10, 11],\n3: [5, 6, 9, 10, 13, 14],\n4: [7, 8, 11, 12, 13],\n5: [3],\n6: [3],\n7: [4],\n8: [4],\n9: [2, 3],\n10: [0, 1, 2, 3],\n11: [2, 4],\n12: [4],\n13: [0, 1, 3, 4],\n14: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 12.\nNode 1 is connected to nodes 6, 9, 11.\nNode 2 is connected to nodes 6, 8, 10.\nNode 3 is connected to node 10.\nNode 4 is connected to nodes 9, 10.\nNode 5 is connected to nodes 6, 7.\nNode 6 is connected to nodes 0, 1, 2, 5.\nNode 7 is connected to node 5.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 1, 4.\nNode 10 is connected to nodes 2, 3, 4.\nNode 11 is connected to node 1.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 12],\n1: [6, 9, 11],\n2: [6, 8, 10],\n3: [10],\n4: [9, 10],\n5: [6, 7],\n6: [0, 1, 2, 5],\n7: [5],\n8: [2],\n9: [1, 4],\n10: [2, 3, 4],\n11: [1],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8.\nNode 1 is connected to nodes 5, 6, 8.\nNode 2 is connected to nodes 4, 6, 7, 9.\nNode 3 is connected to nodes 4, 7.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8],\n1: [5, 6, 8],\n2: [4, 6, 7, 9],\n3: [4, 7],\n4: [2, 3],\n5: [1],\n6: [1, 2],\n7: [0, 2, 3],\n8: [0, 1],\n9: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6.\nNode 1 is connected to nodes 5, 6, 7, 8.\nNode 2 is connected to nodes 4, 8.\nNode 3 is connected to nodes 4, 5, 7.\nNode 4 is connected to nodes 0, 2, 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6],\n1: [5, 6, 7, 8],\n2: [4, 8],\n3: [4, 5, 7],\n4: [0, 2, 3],\n5: [1, 3],\n6: [0, 1],\n7: [1, 3],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 3, 4, 5, 7.\nNode 2 is connected to nodes 3, 4, 6, 7, 8.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [3, 4, 5, 7],\n2: [3, 4, 6, 7, 8],\n3: [1, 2],\n4: [1, 2],\n5: [1],\n6: [2],\n7: [0, 1, 2],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6, 7, 8.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 3, 4, 5, 6, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6, 7, 8],\n1: [7, 8],\n2: [3, 4, 5, 6, 8],\n3: [0, 2],\n4: [2],\n5: [2],\n6: [0, 2],\n7: [0, 1],\n8: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to nodes 3, 4, 5, 6, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7],\n1: [5, 7],\n2: [3, 4, 5, 6, 7],\n3: [2],\n4: [2],\n5: [0, 1, 2],\n6: [0, 2],\n7: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 9.\nNode 1 is connected to nodes 4, 5, 7, 9.\nNode 2 is connected to node 8.\nNode 3 is connected to nodes 4, 6, 7.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 9],\n1: [4, 5, 7, 9],\n2: [8],\n3: [4, 6, 7],\n4: [1, 3],\n5: [0, 1],\n6: [0, 3],\n7: [1, 3],\n8: [0, 2],\n9: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 10, 11.\nNode 1 is connected to nodes 6, 7, 9, 10.\nNode 2 is connected to nodes 6, 7, 9, 10.\nNode 3 is connected to nodes 6, 9, 10, 11, 13.\nNode 4 is connected to nodes 6, 7, 12.\nNode 5 is connected to nodes 8, 10, 11.\nNode 6 is connected to nodes 0, 1, 2, 3, 4.\nNode 7 is connected to nodes 0, 1, 2, 4.\nNode 8 is connected to nodes 0, 5.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to nodes 0, 1, 2, 3, 5.\nNode 11 is connected to nodes 0, 3, 5.\nNode 12 is connected to node 4.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 10, 11],\n1: [6, 7, 9, 10],\n2: [6, 7, 9, 10],\n3: [6, 9, 10, 11, 13],\n4: [6, 7, 12],\n5: [8, 10, 11],\n6: [0, 1, 2, 3, 4],\n7: [0, 1, 2, 4],\n8: [0, 5],\n9: [1, 2, 3],\n10: [0, 1, 2, 3, 5],\n11: [0, 3, 5],\n12: [4],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6.\nNode 1 is connected to nodes 5, 6, 8.\nNode 2 is connected to nodes 4, 7, 8.\nNode 3 is connected to node 7.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6],\n1: [5, 6, 8],\n2: [4, 7, 8],\n3: [7],\n4: [2],\n5: [0, 1],\n6: [0, 1],\n7: [2, 3],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10.\nNode 1 is connected to nodes 7, 8, 9, 10.\nNode 2 is connected to nodes 5, 7, 8, 9.\nNode 3 is connected to nodes 6, 10.\nNode 4 is connected to node 8.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 1, 2, 4.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to nodes 0, 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10],\n1: [7, 8, 9, 10],\n2: [5, 7, 8, 9],\n3: [6, 10],\n4: [8],\n5: [0, 2],\n6: [3],\n7: [1, 2],\n8: [1, 2, 4],\n9: [1, 2],\n10: [0, 1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 11.\nNode 1 is connected to nodes 5, 6, 7, 8, 9, 12, 13.\nNode 2 is connected to nodes 8, 10.\nNode 3 is connected to nodes 6, 8.\nNode 4 is connected to nodes 5, 7.\nNode 5 is connected to nodes 1, 4.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 1, 4.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to node 0.\nNode 12 is connected to node 1.\nNode 13 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 11],\n1: [5, 6, 7, 8, 9, 12, 13],\n2: [8, 10],\n3: [6, 8],\n4: [5, 7],\n5: [1, 4],\n6: [1, 3],\n7: [1, 4],\n8: [0, 1, 2, 3],\n9: [1],\n10: [0, 2],\n11: [0],\n12: [1],\n13: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to node 9.\nNode 2 is connected to nodes 10, 11.\nNode 3 is connected to nodes 8, 10, 11.\nNode 4 is connected to nodes 6, 10.\nNode 5 is connected to nodes 6, 7, 9, 10, 11, 12.\nNode 6 is connected to nodes 4, 5.\nNode 7 is connected to nodes 0, 5.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 1, 5.\nNode 10 is connected to nodes 2, 3, 4, 5.\nNode 11 is connected to nodes 2, 3, 5.\nNode 12 is connected to node 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [9],\n2: [10, 11],\n3: [8, 10, 11],\n4: [6, 10],\n5: [6, 7, 9, 10, 11, 12],\n6: [4, 5],\n7: [0, 5],\n8: [3],\n9: [1, 5],\n10: [2, 3, 4, 5],\n11: [2, 3, 5],\n12: [5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10, 13.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 6, 10.\nNode 3 is connected to node 10.\nNode 4 is connected to nodes 7, 11, 12.\nNode 5 is connected to nodes 9, 10, 13.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 1, 4.\nNode 8 is connected to node 1.\nNode 9 is connected to node 5.\nNode 10 is connected to nodes 0, 2, 3, 5.\nNode 11 is connected to node 4.\nNode 12 is connected to node 4.\nNode 13 is connected to nodes 0, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10, 13],\n1: [7, 8],\n2: [6, 10],\n3: [10],\n4: [7, 11, 12],\n5: [9, 10, 13],\n6: [2],\n7: [0, 1, 4],\n8: [1],\n9: [5],\n10: [0, 2, 3, 5],\n11: [4],\n12: [4],\n13: [0, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8, 12.\nNode 1 is connected to nodes 4, 10, 11, 12.\nNode 2 is connected to nodes 5, 6, 7, 9, 10, 12, 13.\nNode 3 is connected to nodes 7, 9, 10, 11.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 1, 2, 3.\nNode 11 is connected to nodes 1, 3.\nNode 12 is connected to nodes 0, 1, 2.\nNode 13 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8, 12],\n1: [4, 10, 11, 12],\n2: [5, 6, 7, 9, 10, 12, 13],\n3: [7, 9, 10, 11],\n4: [1],\n5: [0, 2],\n6: [0, 2],\n7: [0, 2, 3],\n8: [0],\n9: [2, 3],\n10: [1, 2, 3],\n11: [1, 3],\n12: [0, 1, 2],\n13: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 12.\nNode 1 is connected to nodes 5, 7, 8, 10.\nNode 2 is connected to nodes 5, 8, 10.\nNode 3 is connected to nodes 5, 6, 7, 8, 9.\nNode 4 is connected to nodes 6, 7, 10, 11, 12, 13.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to nodes 0, 3, 4.\nNode 7 is connected to nodes 0, 1, 3, 4.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to nodes 0, 3.\nNode 10 is connected to nodes 1, 2, 4.\nNode 11 is connected to node 4.\nNode 12 is connected to nodes 0, 4.\nNode 13 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 12],\n1: [5, 7, 8, 10],\n2: [5, 8, 10],\n3: [5, 6, 7, 8, 9],\n4: [6, 7, 10, 11, 12, 13],\n5: [1, 2, 3],\n6: [0, 3, 4],\n7: [0, 1, 3, 4],\n8: [0, 1, 2, 3],\n9: [0, 3],\n10: [1, 2, 4],\n11: [4],\n12: [0, 4],\n13: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to nodes 3, 6, 7, 8.\nNode 3 is connected to node 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [4, 5, 6],\n2: [3, 6, 7, 8],\n3: [2],\n4: [1],\n5: [1],\n6: [1, 2],\n7: [0, 2],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6.\nNode 1 is connected to nodes 4, 5.\nNode 2 is connected to nodes 3, 5, 7.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 0.\nNode 7 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6],\n1: [4, 5],\n2: [3, 5, 7],\n3: [0, 2],\n4: [0, 1],\n5: [0, 1, 2],\n6: [0],\n7: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 11.\nNode 1 is connected to nodes 6, 9, 10.\nNode 2 is connected to nodes 7, 10.\nNode 3 is connected to nodes 5, 8, 9.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 1.\nNode 7 is connected to node 2.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 11],\n1: [6, 9, 10],\n2: [7, 10],\n3: [5, 8, 9],\n4: [0],\n5: [0, 3],\n6: [1],\n7: [2],\n8: [3],\n9: [1, 3],\n10: [1, 2],\n11: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6, 7.\nNode 1 is connected to nodes 4, 7, 8.\nNode 2 is connected to nodes 3, 5, 6.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6, 7],\n1: [4, 7, 8],\n2: [3, 5, 6],\n3: [0, 2],\n4: [1],\n5: [2],\n6: [0, 2],\n7: [0, 1],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 11.\nNode 1 is connected to nodes 5, 8, 10, 12.\nNode 2 is connected to nodes 6, 8, 10.\nNode 3 is connected to nodes 4, 8, 11, 12, 13.\nNode 4 is connected to node 3.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to nodes 0, 3.\nNode 12 is connected to nodes 1, 3.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 11],\n1: [5, 8, 10, 12],\n2: [6, 8, 10],\n3: [4, 8, 11, 12, 13],\n4: [3],\n5: [1],\n6: [0, 2],\n7: [0],\n8: [0, 1, 2, 3],\n9: [0],\n10: [1, 2],\n11: [0, 3],\n12: [1, 3],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6.\nNode 1 is connected to nodes 6, 7, 8.\nNode 2 is connected to nodes 3, 4, 8.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6],\n1: [6, 7, 8],\n2: [3, 4, 8],\n3: [2],\n4: [0, 2],\n5: [0],\n6: [0, 1],\n7: [1],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 9.\nNode 1 is connected to nodes 3, 4, 6, 7, 8, 10.\nNode 2 is connected to nodes 5, 6, 7.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to node 1.\nNode 9 is connected to node 0.\nNode 10 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 9],\n1: [3, 4, 6, 7, 8, 10],\n2: [5, 6, 7],\n3: [0, 1],\n4: [0, 1],\n5: [2],\n6: [1, 2],\n7: [1, 2],\n8: [1],\n9: [0],\n10: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 3.\nNode 1 is connected to nodes 3, 4, 5, 6, 7, 8, 9, 10.\nNode 2 is connected to nodes 5, 8.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 1.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 1.\nNode 10 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3],\n1: [3, 4, 5, 6, 7, 8, 9, 10],\n2: [5, 8],\n3: [0, 1],\n4: [1],\n5: [1, 2],\n6: [1],\n7: [1],\n8: [1, 2],\n9: [1],\n10: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 7, 9, 10, 11.\nNode 1 is connected to nodes 5, 8, 9.\nNode 2 is connected to nodes 9, 10, 11, 12.\nNode 3 is connected to nodes 7, 9, 10, 11.\nNode 4 is connected to node 0.\nNode 5 is connected to node 1.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 0, 1, 2, 3.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to nodes 0, 2, 3.\nNode 12 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 7, 9, 10, 11],\n1: [5, 8, 9],\n2: [9, 10, 11, 12],\n3: [7, 9, 10, 11],\n4: [0],\n5: [1],\n6: [0],\n7: [0, 3],\n8: [1],\n9: [0, 1, 2, 3],\n10: [0, 2, 3],\n11: [0, 2, 3],\n12: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 12.\nNode 1 is connected to nodes 7, 11, 14.\nNode 2 is connected to nodes 7, 9.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 8, 9, 10, 13.\nNode 5 is connected to node 8.\nNode 6 is connected to nodes 11, 12.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to nodes 4, 5.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 1, 6.\nNode 12 is connected to nodes 0, 6.\nNode 13 is connected to node 4.\nNode 14 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [12],\n1: [7, 11, 14],\n2: [7, 9],\n3: [7],\n4: [8, 9, 10, 13],\n5: [8],\n6: [11, 12],\n7: [1, 2, 3],\n8: [4, 5],\n9: [2, 4],\n10: [4],\n11: [1, 6],\n12: [0, 6],\n13: [4],\n14: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to nodes 8, 9, 10, 11.\nNode 3 is connected to nodes 4, 7, 9, 10, 11.\nNode 4 is connected to nodes 0, 1, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 3.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 2, 3.\nNode 11 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6],\n1: [4, 5, 6],\n2: [8, 9, 10, 11],\n3: [4, 7, 9, 10, 11],\n4: [0, 1, 3],\n5: [0, 1],\n6: [0, 1],\n7: [3],\n8: [2],\n9: [2, 3],\n10: [2, 3],\n11: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 4, 5, 6, 7.\nNode 1 is connected to nodes 3, 4, 5, 6, 7.\nNode 2 is connected to node 0.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 4, 5, 6, 7],\n1: [3, 4, 5, 6, 7],\n2: [0],\n3: [1],\n4: [0, 1],\n5: [0, 1],\n6: [0, 1],\n7: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 8, 10.\nNode 1 is connected to node 5.\nNode 2 is connected to nodes 6, 9, 12.\nNode 3 is connected to nodes 9, 10, 12.\nNode 4 is connected to nodes 7, 11, 12.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 4.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to node 4.\nNode 12 is connected to nodes 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 8, 10],\n1: [5],\n2: [6, 9, 12],\n3: [9, 10, 12],\n4: [7, 11, 12],\n5: [0, 1],\n6: [2],\n7: [0, 4],\n8: [0],\n9: [2, 3],\n10: [0, 3],\n11: [4],\n12: [2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 7.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to node 6.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 7],\n1: [5, 6],\n2: [6],\n3: [0],\n4: [0],\n5: [0, 1],\n6: [1, 2],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 7.\nNode 1 is connected to node 8.\nNode 2 is connected to nodes 4, 6, 7, 8.\nNode 3 is connected to node 0.\nNode 4 is connected to node 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 7],\n1: [8],\n2: [4, 6, 7, 8],\n3: [0],\n4: [2],\n5: [0],\n6: [2],\n7: [0, 2],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to node 4.\nNode 3 is connected to nodes 4, 6, 7, 9.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8],\n1: [5, 7],\n2: [4],\n3: [4, 6, 7, 9],\n4: [2, 3],\n5: [0, 1],\n6: [0, 3],\n7: [1, 3],\n8: [0],\n9: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 4, 5, 6, 7.\nNode 1 is connected to nodes 3, 5, 6.\nNode 2 is connected to node 0.\nNode 3 is connected to node 1.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 4, 5, 6, 7],\n1: [3, 5, 6],\n2: [0],\n3: [1],\n4: [0],\n5: [0, 1],\n6: [0, 1],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 9, 10, 11, 12, 14.\nNode 1 is connected to nodes 6, 9, 12.\nNode 2 is connected to nodes 8, 13.\nNode 3 is connected to nodes 8, 9, 10, 13, 14.\nNode 4 is connected to nodes 8, 11, 12.\nNode 5 is connected to nodes 8, 11, 12, 13.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 2, 3, 4, 5.\nNode 9 is connected to nodes 0, 1, 3.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 0, 4, 5.\nNode 12 is connected to nodes 0, 1, 4, 5.\nNode 13 is connected to nodes 2, 3, 5.\nNode 14 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 9, 10, 11, 12, 14],\n1: [6, 9, 12],\n2: [8, 13],\n3: [8, 9, 10, 13, 14],\n4: [8, 11, 12],\n5: [8, 11, 12, 13],\n6: [0, 1],\n7: [0],\n8: [2, 3, 4, 5],\n9: [0, 1, 3],\n10: [0, 3],\n11: [0, 4, 5],\n12: [0, 1, 4, 5],\n13: [2, 3, 5],\n14: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 11.\nNode 1 is connected to nodes 5, 7, 8, 11.\nNode 2 is connected to nodes 9, 10, 11, 12.\nNode 3 is connected to nodes 6, 7, 9, 10, 11.\nNode 4 is connected to nodes 8, 10, 11.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 1, 3.\nNode 8 is connected to nodes 1, 4.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 2, 3, 4.\nNode 11 is connected to nodes 0, 1, 2, 3, 4.\nNode 12 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 11],\n1: [5, 7, 8, 11],\n2: [9, 10, 11, 12],\n3: [6, 7, 9, 10, 11],\n4: [8, 10, 11],\n5: [1],\n6: [0, 3],\n7: [0, 1, 3],\n8: [1, 4],\n9: [2, 3],\n10: [2, 3, 4],\n11: [0, 1, 2, 3, 4],\n12: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 9, 10.\nNode 1 is connected to nodes 5, 6, 9.\nNode 2 is connected to nodes 7, 9, 11.\nNode 3 is connected to nodes 5, 6, 8, 9, 10.\nNode 4 is connected to nodes 7, 9, 10, 11.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 2, 4.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 0, 1, 2, 3, 4.\nNode 10 is connected to nodes 0, 3, 4.\nNode 11 is connected to nodes 2, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9, 10],\n1: [5, 6, 9],\n2: [7, 9, 11],\n3: [5, 6, 8, 9, 10],\n4: [7, 9, 10, 11],\n5: [1, 3],\n6: [1, 3],\n7: [2, 4],\n8: [3],\n9: [0, 1, 2, 3, 4],\n10: [0, 3, 4],\n11: [2, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10.\nNode 1 is connected to nodes 4, 6, 7, 8, 9.\nNode 2 is connected to nodes 6, 7, 10.\nNode 3 is connected to nodes 4, 5, 7, 8.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10],\n1: [4, 6, 7, 8, 9],\n2: [6, 7, 10],\n3: [4, 5, 7, 8],\n4: [1, 3],\n5: [0, 3],\n6: [1, 2],\n7: [1, 2, 3],\n8: [1, 3],\n9: [1],\n10: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8.\nNode 1 is connected to nodes 3, 5, 7.\nNode 2 is connected to nodes 4, 5, 6.\nNode 3 is connected to node 1.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8],\n1: [3, 5, 7],\n2: [4, 5, 6],\n3: [1],\n4: [2],\n5: [1, 2],\n6: [0, 2],\n7: [0, 1],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 9, 11.\nNode 1 is connected to nodes 7, 9.\nNode 2 is connected to nodes 5, 10.\nNode 3 is connected to nodes 6, 7, 8, 10.\nNode 4 is connected to nodes 9, 11.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 0, 3.\nNode 9 is connected to nodes 0, 1, 4.\nNode 10 is connected to nodes 2, 3.\nNode 11 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 9, 11],\n1: [7, 9],\n2: [5, 10],\n3: [6, 7, 8, 10],\n4: [9, 11],\n5: [0, 2],\n6: [0, 3],\n7: [1, 3],\n8: [0, 3],\n9: [0, 1, 4],\n10: [2, 3],\n11: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 7, 9.\nNode 1 is connected to nodes 6, 7.\nNode 2 is connected to nodes 5, 6, 10.\nNode 3 is connected to nodes 5, 6, 8, 10.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 2, 3.\nNode 6 is connected to nodes 0, 1, 2, 3.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 3.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 7, 9],\n1: [6, 7],\n2: [5, 6, 10],\n3: [5, 6, 8, 10],\n4: [0],\n5: [0, 2, 3],\n6: [0, 1, 2, 3],\n7: [0, 1],\n8: [3],\n9: [0],\n10: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10, 11, 13.\nNode 1 is connected to nodes 5, 7, 9, 12.\nNode 2 is connected to nodes 3, 4, 6, 8, 10, 11, 13.\nNode 3 is connected to node 2.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 2.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to nodes 0, 2.\nNode 12 is connected to node 1.\nNode 13 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10, 11, 13],\n1: [5, 7, 9, 12],\n2: [3, 4, 6, 8, 10, 11, 13],\n3: [2],\n4: [2],\n5: [0, 1],\n6: [2],\n7: [1],\n8: [2],\n9: [1],\n10: [0, 2],\n11: [0, 2],\n12: [1],\n13: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 12, 13.\nNode 1 is connected to nodes 6, 10.\nNode 2 is connected to nodes 12, 14.\nNode 3 is connected to nodes 5, 6, 8, 9, 11, 12, 13, 14.\nNode 4 is connected to nodes 7, 12, 14.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 3.\nNode 9 is connected to node 3.\nNode 10 is connected to node 1.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 0, 2, 3, 4.\nNode 13 is connected to nodes 0, 3.\nNode 14 is connected to nodes 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 12, 13],\n1: [6, 10],\n2: [12, 14],\n3: [5, 6, 8, 9, 11, 12, 13, 14],\n4: [7, 12, 14],\n5: [3],\n6: [0, 1, 3],\n7: [4],\n8: [0, 3],\n9: [3],\n10: [1],\n11: [3],\n12: [0, 2, 3, 4],\n13: [0, 3],\n14: [2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 3, 4, 5, 6, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7],\n1: [5, 6],\n2: [3, 4, 5, 6, 7],\n3: [2],\n4: [0, 2],\n5: [1, 2],\n6: [1, 2],\n7: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 10.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to nodes 6, 10.\nNode 3 is connected to nodes 7, 9.\nNode 4 is connected to nodes 5, 6.\nNode 5 is connected to nodes 0, 1, 4.\nNode 6 is connected to nodes 0, 2, 4.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to node 3.\nNode 10 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 10],\n1: [5, 7],\n2: [6, 10],\n3: [7, 9],\n4: [5, 6],\n5: [0, 1, 4],\n6: [0, 2, 4],\n7: [1, 3],\n8: [0],\n9: [3],\n10: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10, 12, 14.\nNode 1 is connected to nodes 4, 5, 8, 9, 11.\nNode 2 is connected to nodes 6, 7, 10, 12, 14.\nNode 3 is connected to nodes 4, 6, 8, 9, 10, 11, 13, 14.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to nodes 1, 3.\nNode 12 is connected to nodes 0, 2.\nNode 13 is connected to node 3.\nNode 14 is connected to nodes 0, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10, 12, 14],\n1: [4, 5, 8, 9, 11],\n2: [6, 7, 10, 12, 14],\n3: [4, 6, 8, 9, 10, 11, 13, 14],\n4: [1, 3],\n5: [0, 1],\n6: [2, 3],\n7: [2],\n8: [1, 3],\n9: [1, 3],\n10: [0, 2, 3],\n11: [1, 3],\n12: [0, 2],\n13: [3],\n14: [0, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7.\nNode 1 is connected to nodes 4, 6, 7.\nNode 2 is connected to nodes 3, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7],\n1: [4, 6, 7],\n2: [3, 7],\n3: [2],\n4: [1],\n5: [0],\n6: [1],\n7: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 11.\nNode 1 is connected to nodes 8, 9, 10, 12, 13.\nNode 2 is connected to nodes 8, 9.\nNode 3 is connected to nodes 7, 8.\nNode 4 is connected to nodes 9, 14.\nNode 5 is connected to nodes 6, 7, 12, 13.\nNode 6 is connected to nodes 0, 5.\nNode 7 is connected to nodes 0, 3, 5.\nNode 8 is connected to nodes 1, 2, 3.\nNode 9 is connected to nodes 1, 2, 4.\nNode 10 is connected to node 1.\nNode 11 is connected to node 0.\nNode 12 is connected to nodes 1, 5.\nNode 13 is connected to nodes 1, 5.\nNode 14 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 11],\n1: [8, 9, 10, 12, 13],\n2: [8, 9],\n3: [7, 8],\n4: [9, 14],\n5: [6, 7, 12, 13],\n6: [0, 5],\n7: [0, 3, 5],\n8: [1, 2, 3],\n9: [1, 2, 4],\n10: [1],\n11: [0],\n12: [1, 5],\n13: [1, 5],\n14: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 8.\nNode 1 is connected to nodes 4, 5, 7, 8.\nNode 2 is connected to node 7.\nNode 3 is connected to nodes 4, 5, 6, 7, 8.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to nodes 0, 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8],\n1: [4, 5, 7, 8],\n2: [7],\n3: [4, 5, 6, 7, 8],\n4: [1, 3],\n5: [1, 3],\n6: [3],\n7: [1, 2, 3],\n8: [0, 1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to node 4.\nNode 2 is connected to node 9.\nNode 3 is connected to nodes 4, 5, 6, 7, 9.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to node 3.\nNode 7 is connected to node 3.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [4],\n2: [9],\n3: [4, 5, 6, 7, 9],\n4: [1, 3],\n5: [3],\n6: [3],\n7: [3],\n8: [0],\n9: [0, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6, 9, 10, 11.\nNode 1 is connected to nodes 4, 7.\nNode 2 is connected to nodes 4, 6, 8.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 2.\nNode 9 is connected to node 0.\nNode 10 is connected to node 0.\nNode 11 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6, 9, 10, 11],\n1: [4, 7],\n2: [4, 6, 8],\n3: [0],\n4: [0, 1, 2],\n5: [0],\n6: [0, 2],\n7: [1],\n8: [2],\n9: [0],\n10: [0],\n11: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 4, 6.\nNode 3 is connected to nodes 4, 5.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [7, 8],\n2: [4, 6],\n3: [4, 5],\n4: [2, 3],\n5: [3],\n6: [0, 2],\n7: [0, 1],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 9, 11.\nNode 1 is connected to nodes 6, 9, 11.\nNode 2 is connected to nodes 6, 7, 10.\nNode 3 is connected to node 6.\nNode 4 is connected to nodes 6, 8, 11.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 1, 2, 3, 4.\nNode 7 is connected to node 2.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 0, 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 9, 11],\n1: [6, 9, 11],\n2: [6, 7, 10],\n3: [6],\n4: [6, 8, 11],\n5: [0],\n6: [1, 2, 3, 4],\n7: [2],\n8: [4],\n9: [0, 1],\n10: [2],\n11: [0, 1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 9.\nNode 1 is connected to node 6.\nNode 2 is connected to nodes 4, 5, 7, 11.\nNode 3 is connected to nodes 5, 8, 9, 10.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 2.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 0, 3.\nNode 10 is connected to node 3.\nNode 11 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 9],\n1: [6],\n2: [4, 5, 7, 11],\n3: [5, 8, 9, 10],\n4: [2],\n5: [2, 3],\n6: [0, 1],\n7: [2],\n8: [3],\n9: [0, 3],\n10: [3],\n11: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 10.\nNode 1 is connected to nodes 4, 5, 7, 8, 9.\nNode 2 is connected to nodes 7, 9, 10, 11.\nNode 3 is connected to node 9.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 1.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 10],\n1: [4, 5, 7, 8, 9],\n2: [7, 9, 10, 11],\n3: [9],\n4: [0, 1],\n5: [1],\n6: [0],\n7: [1, 2],\n8: [1],\n9: [1, 2, 3],\n10: [0, 2],\n11: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 8, 10.\nNode 1 is connected to nodes 4, 6.\nNode 2 is connected to nodes 5, 7, 8, 9, 10.\nNode 3 is connected to nodes 4, 5, 6, 7, 8, 10, 11.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 0, 2, 3.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 8, 10],\n1: [4, 6],\n2: [5, 7, 8, 9, 10],\n3: [4, 5, 6, 7, 8, 10, 11],\n4: [1, 3],\n5: [0, 2, 3],\n6: [1, 3],\n7: [2, 3],\n8: [0, 2, 3],\n9: [2],\n10: [0, 2, 3],\n11: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 7.\nNode 1 is connected to nodes 3, 4, 5.\nNode 2 is connected to nodes 3, 4, 6.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 2.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 7],\n1: [3, 4, 5],\n2: [3, 4, 6],\n3: [1, 2],\n4: [0, 1, 2],\n5: [0, 1],\n6: [2],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10.\nNode 1 is connected to nodes 8, 12.\nNode 2 is connected to nodes 6, 9.\nNode 3 is connected to nodes 9, 13.\nNode 4 is connected to nodes 7, 8.\nNode 5 is connected to nodes 9, 10, 11, 13.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 4.\nNode 8 is connected to nodes 1, 4.\nNode 9 is connected to nodes 2, 3, 5.\nNode 10 is connected to nodes 0, 5.\nNode 11 is connected to node 5.\nNode 12 is connected to node 1.\nNode 13 is connected to nodes 3, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10],\n1: [8, 12],\n2: [6, 9],\n3: [9, 13],\n4: [7, 8],\n5: [9, 10, 11, 13],\n6: [2],\n7: [0, 4],\n8: [1, 4],\n9: [2, 3, 5],\n10: [0, 5],\n11: [5],\n12: [1],\n13: [3, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6, 7, 8, 11.\nNode 1 is connected to nodes 5, 6, 9, 10, 11.\nNode 2 is connected to nodes 5, 6, 9.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6, 7, 8, 11],\n1: [5, 6, 9, 10, 11],\n2: [5, 6, 9],\n3: [0],\n4: [0],\n5: [1, 2],\n6: [0, 1, 2],\n7: [0],\n8: [0],\n9: [1, 2],\n10: [1],\n11: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8.\nNode 1 is connected to nodes 6, 8, 9.\nNode 2 is connected to nodes 6, 7.\nNode 3 is connected to nodes 5, 6.\nNode 4 is connected to node 0.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 2, 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8],\n1: [6, 8, 9],\n2: [6, 7],\n3: [5, 6],\n4: [0],\n5: [3],\n6: [1, 2, 3],\n7: [0, 2],\n8: [0, 1],\n9: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 9, 10.\nNode 1 is connected to nodes 3, 4, 7, 8, 9.\nNode 2 is connected to nodes 3, 5, 6, 8.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 9, 10],\n1: [3, 4, 7, 8, 9],\n2: [3, 5, 6, 8],\n3: [1, 2],\n4: [1],\n5: [2],\n6: [0, 2],\n7: [1],\n8: [1, 2],\n9: [0, 1],\n10: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 11, 12.\nNode 1 is connected to nodes 7, 8, 14.\nNode 2 is connected to nodes 7, 8.\nNode 3 is connected to nodes 8, 9, 10, 14.\nNode 4 is connected to nodes 9, 11, 13, 14.\nNode 5 is connected to nodes 9, 10, 11, 13.\nNode 6 is connected to nodes 10, 12.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 1, 2, 3.\nNode 9 is connected to nodes 3, 4, 5.\nNode 10 is connected to nodes 3, 5, 6.\nNode 11 is connected to nodes 0, 4, 5.\nNode 12 is connected to nodes 0, 6.\nNode 13 is connected to nodes 4, 5.\nNode 14 is connected to nodes 1, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 11, 12],\n1: [7, 8, 14],\n2: [7, 8],\n3: [8, 9, 10, 14],\n4: [9, 11, 13, 14],\n5: [9, 10, 11, 13],\n6: [10, 12],\n7: [0, 1, 2],\n8: [1, 2, 3],\n9: [3, 4, 5],\n10: [3, 5, 6],\n11: [0, 4, 5],\n12: [0, 6],\n13: [4, 5],\n14: [1, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 11.\nNode 1 is connected to nodes 5, 8, 9, 10, 11, 12.\nNode 2 is connected to nodes 5, 6, 8, 10, 12.\nNode 3 is connected to nodes 5, 6, 9, 11, 12, 13.\nNode 4 is connected to nodes 12, 13.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to nodes 2, 3.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to nodes 0, 1, 3.\nNode 12 is connected to nodes 1, 2, 3, 4.\nNode 13 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 11],\n1: [5, 8, 9, 10, 11, 12],\n2: [5, 6, 8, 10, 12],\n3: [5, 6, 9, 11, 12, 13],\n4: [12, 13],\n5: [1, 2, 3],\n6: [2, 3],\n7: [0],\n8: [1, 2],\n9: [1, 3],\n10: [1, 2],\n11: [0, 1, 3],\n12: [1, 2, 3, 4],\n13: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6, 7.\nNode 1 is connected to node 4.\nNode 2 is connected to node 6.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6, 7],\n1: [4],\n2: [6],\n3: [0],\n4: [0, 1],\n5: [0],\n6: [0, 2],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9, 10, 11.\nNode 1 is connected to nodes 6, 9.\nNode 2 is connected to nodes 5, 7, 8.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 9, 11, 12.\nNode 5 is connected to node 2.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 0, 1, 4.\nNode 10 is connected to node 0.\nNode 11 is connected to nodes 0, 4.\nNode 12 is connected to node 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9, 10, 11],\n1: [6, 9],\n2: [5, 7, 8],\n3: [7],\n4: [9, 11, 12],\n5: [2],\n6: [1],\n7: [0, 2, 3],\n8: [2],\n9: [0, 1, 4],\n10: [0],\n11: [0, 4],\n12: [4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 6, 7.\nNode 1 is connected to nodes 4, 5, 7, 8.\nNode 2 is connected to nodes 5, 8.\nNode 3 is connected to node 0.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 6, 7],\n1: [4, 5, 7, 8],\n2: [5, 8],\n3: [0],\n4: [1],\n5: [0, 1, 2],\n6: [0],\n7: [0, 1],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 7.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to node 7.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 1.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 7],\n1: [4, 5, 6],\n2: [7],\n3: [0],\n4: [0, 1],\n5: [1],\n6: [1],\n7: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 4, 7, 8.\nNode 3 is connected to nodes 8, 9.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 1.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5],\n1: [5, 6],\n2: [4, 7, 8],\n3: [8, 9],\n4: [0, 2],\n5: [0, 1],\n6: [1],\n7: [2],\n8: [2, 3],\n9: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 9, 10.\nNode 1 is connected to nodes 9, 11.\nNode 2 is connected to nodes 9, 10.\nNode 3 is connected to nodes 10, 12.\nNode 4 is connected to nodes 5, 7, 9, 11.\nNode 5 is connected to node 4.\nNode 6 is connected to node 0.\nNode 7 is connected to node 4.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 1, 2, 4.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to nodes 1, 4.\nNode 12 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 9, 10],\n1: [9, 11],\n2: [9, 10],\n3: [10, 12],\n4: [5, 7, 9, 11],\n5: [4],\n6: [0],\n7: [4],\n8: [0],\n9: [0, 1, 2, 4],\n10: [0, 2, 3],\n11: [1, 4],\n12: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 5, 6.\nNode 1 is connected to nodes 3, 4, 5, 7.\nNode 2 is connected to node 0.\nNode 3 is connected to node 1.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 5, 6],\n1: [3, 4, 5, 7],\n2: [0],\n3: [1],\n4: [1],\n5: [0, 1],\n6: [0],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5.\nNode 1 is connected to nodes 6, 7.\nNode 2 is connected to nodes 3, 7.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 0.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5],\n1: [6, 7],\n2: [3, 7],\n3: [0, 2],\n4: [0],\n5: [0],\n6: [1],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6.\nNode 1 is connected to nodes 6, 7.\nNode 2 is connected to nodes 4, 5, 10.\nNode 3 is connected to nodes 5, 8, 9.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.\nNode 8 is connected to node 3.\nNode 9 is connected to node 3.\nNode 10 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6],\n1: [6, 7],\n2: [4, 5, 10],\n3: [5, 8, 9],\n4: [0, 2],\n5: [2, 3],\n6: [0, 1],\n7: [1],\n8: [3],\n9: [3],\n10: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 11, 14.\nNode 1 is connected to nodes 6, 7, 8, 9, 10.\nNode 2 is connected to nodes 6, 9, 11, 12.\nNode 3 is connected to nodes 7, 8, 10, 12, 14.\nNode 4 is connected to nodes 6, 13, 14.\nNode 5 is connected to nodes 6, 8, 9, 14.\nNode 6 is connected to nodes 1, 2, 4, 5.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 1, 3, 5.\nNode 9 is connected to nodes 1, 2, 5.\nNode 10 is connected to nodes 1, 3.\nNode 11 is connected to nodes 0, 2.\nNode 12 is connected to nodes 2, 3.\nNode 13 is connected to node 4.\nNode 14 is connected to nodes 0, 3, 4, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [11, 14],\n1: [6, 7, 8, 9, 10],\n2: [6, 9, 11, 12],\n3: [7, 8, 10, 12, 14],\n4: [6, 13, 14],\n5: [6, 8, 9, 14],\n6: [1, 2, 4, 5],\n7: [1, 3],\n8: [1, 3, 5],\n9: [1, 2, 5],\n10: [1, 3],\n11: [0, 2],\n12: [2, 3],\n13: [4],\n14: [0, 3, 4, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8, 9.\nNode 1 is connected to nodes 6, 7, 8.\nNode 2 is connected to nodes 3, 5, 7, 9.\nNode 3 is connected to node 2.\nNode 4 is connected to node 0.\nNode 5 is connected to node 2.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8, 9],\n1: [6, 7, 8],\n2: [3, 5, 7, 9],\n3: [2],\n4: [0],\n5: [2],\n6: [1],\n7: [0, 1, 2],\n8: [0, 1],\n9: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9.\nNode 1 is connected to nodes 5, 10, 11.\nNode 2 is connected to nodes 4, 7, 8.\nNode 3 is connected to nodes 5, 6, 9, 10.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 0, 3.\nNode 10 is connected to nodes 1, 3.\nNode 11 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9],\n1: [5, 10, 11],\n2: [4, 7, 8],\n3: [5, 6, 9, 10],\n4: [2],\n5: [1, 3],\n6: [0, 3],\n7: [0, 2],\n8: [0, 2],\n9: [0, 3],\n10: [1, 3],\n11: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 11.\nNode 1 is connected to nodes 7, 8, 11, 13.\nNode 2 is connected to nodes 6, 10, 11, 14.\nNode 3 is connected to node 10.\nNode 4 is connected to nodes 6, 10, 12.\nNode 5 is connected to nodes 7, 10, 11.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to nodes 1, 5.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 2, 3, 4, 5.\nNode 11 is connected to nodes 0, 1, 2, 5.\nNode 12 is connected to node 4.\nNode 13 is connected to node 1.\nNode 14 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 11],\n1: [7, 8, 11, 13],\n2: [6, 10, 11, 14],\n3: [10],\n4: [6, 10, 12],\n5: [7, 10, 11],\n6: [2, 4],\n7: [1, 5],\n8: [0, 1],\n9: [0],\n10: [2, 3, 4, 5],\n11: [0, 1, 2, 5],\n12: [4],\n13: [1],\n14: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 11, 13, 14.\nNode 1 is connected to nodes 4, 6, 8, 9, 10, 12, 14.\nNode 2 is connected to nodes 4, 5.\nNode 3 is connected to nodes 5, 6, 7, 12, 14.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to node 1.\nNode 11 is connected to node 0.\nNode 12 is connected to nodes 1, 3.\nNode 13 is connected to node 0.\nNode 14 is connected to nodes 0, 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 11, 13, 14],\n1: [4, 6, 8, 9, 10, 12, 14],\n2: [4, 5],\n3: [5, 6, 7, 12, 14],\n4: [1, 2],\n5: [2, 3],\n6: [1, 3],\n7: [3],\n8: [0, 1],\n9: [0, 1],\n10: [1],\n11: [0],\n12: [1, 3],\n13: [0],\n14: [0, 1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 9.\nNode 1 is connected to nodes 4, 7, 8, 9.\nNode 2 is connected to nodes 5, 6.\nNode 3 is connected to nodes 6, 8.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2, 3.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 9],\n1: [4, 7, 8, 9],\n2: [5, 6],\n3: [6, 8],\n4: [0, 1],\n5: [2],\n6: [0, 2, 3],\n7: [1],\n8: [1, 3],\n9: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6, 7, 8.\nNode 1 is connected to nodes 4, 7.\nNode 2 is connected to nodes 3, 5, 6, 7, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6, 7, 8],\n1: [4, 7],\n2: [3, 5, 6, 7, 8],\n3: [0, 2],\n4: [0, 1],\n5: [2],\n6: [0, 2],\n7: [0, 1, 2],\n8: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 9, 12.\nNode 1 is connected to nodes 10, 12, 14.\nNode 2 is connected to nodes 9, 10, 12, 14.\nNode 3 is connected to nodes 9, 12.\nNode 4 is connected to nodes 8, 10, 13, 14.\nNode 5 is connected to nodes 8, 9, 11, 14.\nNode 6 is connected to nodes 7, 11, 12.\nNode 7 is connected to node 6.\nNode 8 is connected to nodes 4, 5.\nNode 9 is connected to nodes 0, 2, 3, 5.\nNode 10 is connected to nodes 1, 2, 4.\nNode 11 is connected to nodes 5, 6.\nNode 12 is connected to nodes 0, 1, 2, 3, 6.\nNode 13 is connected to node 4.\nNode 14 is connected to nodes 1, 2, 4, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9, 12],\n1: [10, 12, 14],\n2: [9, 10, 12, 14],\n3: [9, 12],\n4: [8, 10, 13, 14],\n5: [8, 9, 11, 14],\n6: [7, 11, 12],\n7: [6],\n8: [4, 5],\n9: [0, 2, 3, 5],\n10: [1, 2, 4],\n11: [5, 6],\n12: [0, 1, 2, 3, 6],\n13: [4],\n14: [1, 2, 4, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 4, 6.\nNode 2 is connected to nodes 4, 7, 8, 9.\nNode 3 is connected to nodes 5, 6, 8, 9.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 0, 2.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [4, 6],\n2: [4, 7, 8, 9],\n3: [5, 6, 8, 9],\n4: [1, 2],\n5: [3],\n6: [1, 3],\n7: [0, 2],\n8: [2, 3],\n9: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8.\nNode 1 is connected to nodes 4, 5, 6, 7.\nNode 2 is connected to node 7.\nNode 3 is connected to nodes 6, 8.\nNode 4 is connected to node 1.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1, 3.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8],\n1: [4, 5, 6, 7],\n2: [7],\n3: [6, 8],\n4: [1],\n5: [1],\n6: [0, 1, 3],\n7: [1, 2],\n8: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 3, 4, 5, 6.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to node 0.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 0.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 3, 4, 5, 6],\n1: [5, 7],\n2: [0],\n3: [0],\n4: [0],\n5: [0, 1],\n6: [0],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 11.\nNode 1 is connected to nodes 8, 9.\nNode 2 is connected to nodes 6, 10, 12.\nNode 3 is connected to nodes 12, 13.\nNode 4 is connected to node 12.\nNode 5 is connected to nodes 7, 9, 11, 13.\nNode 6 is connected to node 2.\nNode 7 is connected to node 5.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 1, 5.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 0, 5.\nNode 12 is connected to nodes 2, 3, 4.\nNode 13 is connected to nodes 3, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [11],\n1: [8, 9],\n2: [6, 10, 12],\n3: [12, 13],\n4: [12],\n5: [7, 9, 11, 13],\n6: [2],\n7: [5],\n8: [1],\n9: [1, 5],\n10: [2],\n11: [0, 5],\n12: [2, 3, 4],\n13: [3, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 7.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to node 5.\nNode 3 is connected to nodes 5, 7, 8.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7],\n1: [4, 5, 6],\n2: [5],\n3: [5, 7, 8],\n4: [1],\n5: [1, 2, 3],\n6: [1],\n7: [0, 3],\n8: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 12, 13.\nNode 1 is connected to nodes 6, 13.\nNode 2 is connected to nodes 5, 7, 10, 12, 13.\nNode 3 is connected to nodes 8, 9, 10, 11, 12, 13.\nNode 4 is connected to nodes 6, 7, 9, 12.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 1, 4.\nNode 7 is connected to nodes 0, 2, 4.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 3, 4.\nNode 10 is connected to nodes 2, 3.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 0, 2, 3, 4.\nNode 13 is connected to nodes 0, 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 12, 13],\n1: [6, 13],\n2: [5, 7, 10, 12, 13],\n3: [8, 9, 10, 11, 12, 13],\n4: [6, 7, 9, 12],\n5: [2],\n6: [1, 4],\n7: [0, 2, 4],\n8: [3],\n9: [3, 4],\n10: [2, 3],\n11: [3],\n12: [0, 2, 3, 4],\n13: [0, 1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 9.\nNode 1 is connected to nodes 7, 8, 10, 11.\nNode 2 is connected to nodes 4, 10, 11.\nNode 3 is connected to nodes 5, 7, 9, 11.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 0, 3.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to nodes 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 9],\n1: [7, 8, 10, 11],\n2: [4, 10, 11],\n3: [5, 7, 9, 11],\n4: [2],\n5: [0, 3],\n6: [0],\n7: [1, 3],\n8: [1],\n9: [0, 3],\n10: [1, 2],\n11: [1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 12, 13, 14.\nNode 1 is connected to nodes 5, 9.\nNode 2 is connected to nodes 5, 8, 14.\nNode 3 is connected to nodes 5, 6, 7, 9, 10, 12.\nNode 4 is connected to nodes 5, 6, 11, 12.\nNode 5 is connected to nodes 1, 2, 3, 4.\nNode 6 is connected to nodes 3, 4.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to node 4.\nNode 12 is connected to nodes 0, 3, 4.\nNode 13 is connected to node 0.\nNode 14 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 12, 13, 14],\n1: [5, 9],\n2: [5, 8, 14],\n3: [5, 6, 7, 9, 10, 12],\n4: [5, 6, 11, 12],\n5: [1, 2, 3, 4],\n6: [3, 4],\n7: [3],\n8: [0, 2],\n9: [1, 3],\n10: [0, 3],\n11: [4],\n12: [0, 3, 4],\n13: [0],\n14: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 7, 9, 10.\nNode 1 is connected to nodes 8, 10.\nNode 2 is connected to nodes 3, 4, 5, 6.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 1.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 7, 9, 10],\n1: [8, 10],\n2: [3, 4, 5, 6],\n3: [0, 2],\n4: [0, 2],\n5: [2],\n6: [2],\n7: [0],\n8: [1],\n9: [0],\n10: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8.\nNode 1 is connected to nodes 5, 6, 7, 9, 11.\nNode 2 is connected to nodes 5, 6, 7, 8, 9, 10, 12.\nNode 3 is connected to nodes 5, 8, 9, 12.\nNode 4 is connected to nodes 9, 10.\nNode 5 is connected to nodes 0, 1, 2, 3.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 1, 2, 3, 4.\nNode 10 is connected to nodes 2, 4.\nNode 11 is connected to node 1.\nNode 12 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8],\n1: [5, 6, 7, 9, 11],\n2: [5, 6, 7, 8, 9, 10, 12],\n3: [5, 8, 9, 12],\n4: [9, 10],\n5: [0, 1, 2, 3],\n6: [0, 1, 2],\n7: [1, 2],\n8: [0, 2, 3],\n9: [1, 2, 3, 4],\n10: [2, 4],\n11: [1],\n12: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 8, 11.\nNode 1 is connected to nodes 6, 7, 8, 9.\nNode 2 is connected to nodes 6, 7, 10, 11.\nNode 3 is connected to node 9.\nNode 4 is connected to nodes 5, 6, 7, 8.\nNode 5 is connected to nodes 0, 4.\nNode 6 is connected to nodes 1, 2, 4.\nNode 7 is connected to nodes 0, 1, 2, 4.\nNode 8 is connected to nodes 0, 1, 4.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 8, 11],\n1: [6, 7, 8, 9],\n2: [6, 7, 10, 11],\n3: [9],\n4: [5, 6, 7, 8],\n5: [0, 4],\n6: [1, 2, 4],\n7: [0, 1, 2, 4],\n8: [0, 1, 4],\n9: [1, 3],\n10: [2],\n11: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7.\nNode 1 is connected to nodes 6, 8.\nNode 2 is connected to nodes 3, 4, 5, 8, 9.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to node 2.\nNode 6 is connected to node 1.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7],\n1: [6, 8],\n2: [3, 4, 5, 8, 9],\n3: [2],\n4: [0, 2],\n5: [2],\n6: [1],\n7: [0],\n8: [1, 2],\n9: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 4, 5, 6, 8.\nNode 2 is connected to nodes 4, 6.\nNode 3 is connected to nodes 4, 6, 7, 8.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1, 2, 3.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [4, 5, 6, 8],\n2: [4, 6],\n3: [4, 6, 7, 8],\n4: [1, 2, 3],\n5: [1],\n6: [0, 1, 2, 3],\n7: [0, 3],\n8: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9.\nNode 1 is connected to nodes 3, 4, 8, 9.\nNode 2 is connected to nodes 3, 5, 6, 8.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1, 2.\nNode 9 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9],\n1: [3, 4, 8, 9],\n2: [3, 5, 6, 8],\n3: [1, 2],\n4: [1],\n5: [2],\n6: [0, 2],\n7: [0],\n8: [0, 1, 2],\n9: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 8, 9, 11, 12.\nNode 1 is connected to nodes 5, 6, 7, 9, 10, 11, 12.\nNode 2 is connected to nodes 4, 5, 9, 10.\nNode 3 is connected to nodes 4, 6, 7, 9, 10, 11, 12, 13.\nNode 4 is connected to nodes 0, 2, 3.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 1, 2, 3.\nNode 10 is connected to nodes 1, 2, 3.\nNode 11 is connected to nodes 0, 1, 3.\nNode 12 is connected to nodes 0, 1, 3.\nNode 13 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 8, 9, 11, 12],\n1: [5, 6, 7, 9, 10, 11, 12],\n2: [4, 5, 9, 10],\n3: [4, 6, 7, 9, 10, 11, 12, 13],\n4: [0, 2, 3],\n5: [0, 1, 2],\n6: [1, 3],\n7: [1, 3],\n8: [0],\n9: [0, 1, 2, 3],\n10: [1, 2, 3],\n11: [0, 1, 3],\n12: [0, 1, 3],\n13: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 9, 10.\nNode 1 is connected to nodes 5, 9.\nNode 2 is connected to nodes 5, 6, 8, 9, 10.\nNode 3 is connected to nodes 5, 6.\nNode 4 is connected to nodes 5, 6, 7, 8.\nNode 5 is connected to nodes 0, 1, 2, 3, 4.\nNode 6 is connected to nodes 2, 3, 4.\nNode 7 is connected to nodes 0, 4.\nNode 8 is connected to nodes 2, 4.\nNode 9 is connected to nodes 0, 1, 2.\nNode 10 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 9, 10],\n1: [5, 9],\n2: [5, 6, 8, 9, 10],\n3: [5, 6],\n4: [5, 6, 7, 8],\n5: [0, 1, 2, 3, 4],\n6: [2, 3, 4],\n7: [0, 4],\n8: [2, 4],\n9: [0, 1, 2],\n10: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 3, 5.\nNode 1 is connected to nodes 3, 4, 6, 7, 8.\nNode 2 is connected to node 0.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 1.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to node 1.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 3, 5],\n1: [3, 4, 6, 7, 8],\n2: [0],\n3: [0, 1],\n4: [1],\n5: [0],\n6: [1],\n7: [1],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9, 12, 13.\nNode 1 is connected to nodes 9, 10, 14.\nNode 2 is connected to nodes 5, 7, 8, 9.\nNode 3 is connected to nodes 5, 6, 8, 11, 14.\nNode 4 is connected to nodes 5, 7, 8, 10, 13, 14.\nNode 5 is connected to nodes 2, 3, 4.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 2, 4.\nNode 8 is connected to nodes 2, 3, 4.\nNode 9 is connected to nodes 0, 1, 2.\nNode 10 is connected to nodes 1, 4.\nNode 11 is connected to node 3.\nNode 12 is connected to node 0.\nNode 13 is connected to nodes 0, 4.\nNode 14 is connected to nodes 1, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9, 12, 13],\n1: [9, 10, 14],\n2: [5, 7, 8, 9],\n3: [5, 6, 8, 11, 14],\n4: [5, 7, 8, 10, 13, 14],\n5: [2, 3, 4],\n6: [3],\n7: [0, 2, 4],\n8: [2, 3, 4],\n9: [0, 1, 2],\n10: [1, 4],\n11: [3],\n12: [0],\n13: [0, 4],\n14: [1, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 7, 10.\nNode 2 is connected to nodes 8, 9, 11, 13.\nNode 3 is connected to nodes 7, 8, 13.\nNode 4 is connected to nodes 8, 9, 11, 13.\nNode 5 is connected to nodes 7, 9, 10, 12.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 1, 3, 5.\nNode 8 is connected to nodes 2, 3, 4.\nNode 9 is connected to nodes 2, 4, 5.\nNode 10 is connected to nodes 1, 5.\nNode 11 is connected to nodes 2, 4.\nNode 12 is connected to node 5.\nNode 13 is connected to nodes 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [7, 10],\n2: [8, 9, 11, 13],\n3: [7, 8, 13],\n4: [8, 9, 11, 13],\n5: [7, 9, 10, 12],\n6: [0],\n7: [0, 1, 3, 5],\n8: [2, 3, 4],\n9: [2, 4, 5],\n10: [1, 5],\n11: [2, 4],\n12: [5],\n13: [2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 10.\nNode 1 is connected to nodes 8, 11.\nNode 2 is connected to node 10.\nNode 3 is connected to nodes 9, 14.\nNode 4 is connected to nodes 12, 13, 14.\nNode 5 is connected to nodes 8, 12, 13.\nNode 6 is connected to nodes 7, 8, 11.\nNode 7 is connected to nodes 0, 6.\nNode 8 is connected to nodes 1, 5, 6.\nNode 9 is connected to node 3.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to nodes 1, 6.\nNode 12 is connected to nodes 4, 5.\nNode 13 is connected to nodes 4, 5.\nNode 14 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 10],\n1: [8, 11],\n2: [10],\n3: [9, 14],\n4: [12, 13, 14],\n5: [8, 12, 13],\n6: [7, 8, 11],\n7: [0, 6],\n8: [1, 5, 6],\n9: [3],\n10: [0, 2],\n11: [1, 6],\n12: [4, 5],\n13: [4, 5],\n14: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7, 8, 9, 10, 11.\nNode 1 is connected to nodes 7, 8, 9, 10.\nNode 2 is connected to nodes 6, 7, 8, 9.\nNode 3 is connected to nodes 6, 8, 12.\nNode 4 is connected to nodes 9, 11.\nNode 5 is connected to nodes 8, 11.\nNode 6 is connected to nodes 0, 2, 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 0, 1, 2, 3, 5.\nNode 9 is connected to nodes 0, 1, 2, 4.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to nodes 0, 4, 5.\nNode 12 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7, 8, 9, 10, 11],\n1: [7, 8, 9, 10],\n2: [6, 7, 8, 9],\n3: [6, 8, 12],\n4: [9, 11],\n5: [8, 11],\n6: [0, 2, 3],\n7: [0, 1, 2],\n8: [0, 1, 2, 3, 5],\n9: [0, 1, 2, 4],\n10: [0, 1],\n11: [0, 4, 5],\n12: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 8.\nNode 1 is connected to nodes 4, 5, 7.\nNode 2 is connected to nodes 3, 4, 5, 6.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 8],\n1: [4, 5, 7],\n2: [3, 4, 5, 6],\n3: [0, 2],\n4: [1, 2],\n5: [1, 2],\n6: [2],\n7: [1],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9, 12, 13.\nNode 1 is connected to nodes 6, 8, 11.\nNode 2 is connected to nodes 6, 8, 12, 13.\nNode 3 is connected to nodes 10, 11, 13.\nNode 4 is connected to nodes 7, 10.\nNode 5 is connected to nodes 6, 9, 11.\nNode 6 is connected to nodes 1, 2, 5.\nNode 7 is connected to nodes 0, 4.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 0, 5.\nNode 10 is connected to nodes 3, 4.\nNode 11 is connected to nodes 1, 3, 5.\nNode 12 is connected to nodes 0, 2.\nNode 13 is connected to nodes 0, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9, 12, 13],\n1: [6, 8, 11],\n2: [6, 8, 12, 13],\n3: [10, 11, 13],\n4: [7, 10],\n5: [6, 9, 11],\n6: [1, 2, 5],\n7: [0, 4],\n8: [1, 2],\n9: [0, 5],\n10: [3, 4],\n11: [1, 3, 5],\n12: [0, 2],\n13: [0, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 3.\nNode 1 is connected to nodes 3, 4, 5, 6, 7.\nNode 2 is connected to nodes 4, 6, 8, 9.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 2.\nNode 9 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3],\n1: [3, 4, 5, 6, 7],\n2: [4, 6, 8, 9],\n3: [0, 1],\n4: [1, 2],\n5: [1],\n6: [1, 2],\n7: [1],\n8: [2],\n9: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 10.\nNode 1 is connected to nodes 4, 8.\nNode 2 is connected to nodes 9, 10.\nNode 3 is connected to nodes 4, 5, 7, 9, 10, 11.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to node 0.\nNode 7 is connected to node 3.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 10],\n1: [4, 8],\n2: [9, 10],\n3: [4, 5, 7, 9, 10, 11],\n4: [1, 3],\n5: [3],\n6: [0],\n7: [3],\n8: [1],\n9: [2, 3],\n10: [0, 2, 3],\n11: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8.\nNode 1 is connected to nodes 3, 4, 5, 6, 7, 10.\nNode 2 is connected to nodes 3, 5, 9, 10.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 0.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8],\n1: [3, 4, 5, 6, 7, 10],\n2: [3, 5, 9, 10],\n3: [1, 2],\n4: [0, 1],\n5: [1, 2],\n6: [1],\n7: [0, 1],\n8: [0],\n9: [2],\n10: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5.\nNode 1 is connected to nodes 6, 8.\nNode 2 is connected to nodes 3, 4, 7, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 1.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5],\n1: [6, 8],\n2: [3, 4, 7, 8],\n3: [0, 2],\n4: [2],\n5: [0],\n6: [1],\n7: [2],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 9, 13.\nNode 1 is connected to nodes 7, 11, 13.\nNode 2 is connected to nodes 10, 12.\nNode 3 is connected to nodes 6, 10.\nNode 4 is connected to nodes 8, 10.\nNode 5 is connected to node 13.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 2, 3, 4.\nNode 11 is connected to node 1.\nNode 12 is connected to node 2.\nNode 13 is connected to nodes 0, 1, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 9, 13],\n1: [7, 11, 13],\n2: [10, 12],\n3: [6, 10],\n4: [8, 10],\n5: [13],\n6: [3],\n7: [0, 1],\n8: [0, 4],\n9: [0],\n10: [2, 3, 4],\n11: [1],\n12: [2],\n13: [0, 1, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 10, 11.\nNode 1 is connected to nodes 8, 10, 11.\nNode 2 is connected to nodes 9, 11, 12.\nNode 3 is connected to nodes 7, 13.\nNode 4 is connected to nodes 6, 7, 10, 11, 12.\nNode 5 is connected to nodes 8, 9, 11, 13.\nNode 6 is connected to node 4.\nNode 7 is connected to nodes 3, 4.\nNode 8 is connected to nodes 1, 5.\nNode 9 is connected to nodes 2, 5.\nNode 10 is connected to nodes 0, 1, 4.\nNode 11 is connected to nodes 0, 1, 2, 4, 5.\nNode 12 is connected to nodes 2, 4.\nNode 13 is connected to nodes 3, 5.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10, 11],\n1: [8, 10, 11],\n2: [9, 11, 12],\n3: [7, 13],\n4: [6, 7, 10, 11, 12],\n5: [8, 9, 11, 13],\n6: [4],\n7: [3, 4],\n8: [1, 5],\n9: [2, 5],\n10: [0, 1, 4],\n11: [0, 1, 2, 4, 5],\n12: [2, 4],\n13: [3, 5]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 6.\nNode 1 is connected to nodes 5, 8.\nNode 2 is connected to nodes 3, 4, 5, 6, 7.\nNode 3 is connected to node 2.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6],\n1: [5, 8],\n2: [3, 4, 5, 6, 7],\n3: [2],\n4: [2],\n5: [1, 2],\n6: [0, 2],\n7: [2],\n8: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6.\nNode 1 is connected to nodes 5, 8.\nNode 2 is connected to nodes 6, 7, 8.\nNode 3 is connected to nodes 5, 7, 8.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6],\n1: [5, 8],\n2: [6, 7, 8],\n3: [5, 7, 8],\n4: [0],\n5: [1, 3],\n6: [0, 2],\n7: [2, 3],\n8: [1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 7, 9.\nNode 2 is connected to nodes 4, 5, 9.\nNode 3 is connected to nodes 5, 6.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 2, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to node 1.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [7, 9],\n2: [4, 5, 9],\n3: [5, 6],\n4: [2],\n5: [2, 3],\n6: [3],\n7: [1],\n8: [0],\n9: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6, 7.\nNode 1 is connected to node 6.\nNode 2 is connected to nodes 3, 4, 5, 6, 8.\nNode 3 is connected to nodes 0, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6, 7],\n1: [6],\n2: [3, 4, 5, 6, 8],\n3: [0, 2],\n4: [2],\n5: [2],\n6: [0, 1, 2],\n7: [0],\n8: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 10, 12, 13, 14.\nNode 1 is connected to node 8.\nNode 2 is connected to nodes 6, 10, 11.\nNode 3 is connected to nodes 9, 10, 12.\nNode 4 is connected to node 6.\nNode 5 is connected to node 6.\nNode 6 is connected to nodes 2, 4, 5.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 3.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to node 2.\nNode 12 is connected to nodes 0, 3.\nNode 13 is connected to node 0.\nNode 14 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 10, 12, 13, 14],\n1: [8],\n2: [6, 10, 11],\n3: [9, 10, 12],\n4: [6],\n5: [6],\n6: [2, 4, 5],\n7: [0],\n8: [0, 1],\n9: [3],\n10: [0, 2, 3],\n11: [2],\n12: [0, 3],\n13: [0],\n14: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 5.\nNode 1 is connected to nodes 4, 5, 6.\nNode 2 is connected to nodes 5, 7.\nNode 3 is connected to nodes 4, 8, 9.\nNode 4 is connected to nodes 1, 3.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 1.\nNode 7 is connected to node 2.\nNode 8 is connected to node 3.\nNode 9 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5],\n1: [4, 5, 6],\n2: [5, 7],\n3: [4, 8, 9],\n4: [1, 3],\n5: [0, 1, 2],\n6: [1],\n7: [2],\n8: [3],\n9: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 9.\nNode 1 is connected to nodes 4, 7, 8.\nNode 2 is connected to node 8.\nNode 3 is connected to node 7.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 9],\n1: [4, 7, 8],\n2: [8],\n3: [7],\n4: [0, 1],\n5: [0],\n6: [0],\n7: [1, 3],\n8: [1, 2],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 9, 10, 11.\nNode 1 is connected to nodes 5, 6, 7, 8, 11, 12, 13.\nNode 2 is connected to nodes 6, 8, 12.\nNode 3 is connected to nodes 5, 11, 12, 13.\nNode 4 is connected to nodes 8, 9.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to nodes 0, 1, 2, 4.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to node 0.\nNode 11 is connected to nodes 0, 1, 3.\nNode 12 is connected to nodes 1, 2, 3.\nNode 13 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 9, 10, 11],\n1: [5, 6, 7, 8, 11, 12, 13],\n2: [6, 8, 12],\n3: [5, 11, 12, 13],\n4: [8, 9],\n5: [1, 3],\n6: [1, 2],\n7: [0, 1],\n8: [0, 1, 2, 4],\n9: [0, 4],\n10: [0],\n11: [0, 1, 3],\n12: [1, 2, 3],\n13: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 9, 10.\nNode 1 is connected to nodes 5, 8, 10.\nNode 2 is connected to node 10.\nNode 3 is connected to nodes 5, 7, 8.\nNode 4 is connected to node 6.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 0, 4.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 0, 1, 3.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 9, 10],\n1: [5, 8, 10],\n2: [10],\n3: [5, 7, 8],\n4: [6],\n5: [1, 3],\n6: [0, 4],\n7: [3],\n8: [0, 1, 3],\n9: [0],\n10: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 9, 10.\nNode 1 is connected to nodes 7, 9.\nNode 2 is connected to nodes 5, 6, 8, 9.\nNode 3 is connected to nodes 7, 8.\nNode 4 is connected to nodes 8, 10.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1, 3.\nNode 8 is connected to nodes 2, 3, 4.\nNode 9 is connected to nodes 0, 1, 2.\nNode 10 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 9, 10],\n1: [7, 9],\n2: [5, 6, 8, 9],\n3: [7, 8],\n4: [8, 10],\n5: [0, 2],\n6: [0, 2],\n7: [0, 1, 3],\n8: [2, 3, 4],\n9: [0, 1, 2],\n10: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 9, 10.\nNode 1 is connected to nodes 6, 7, 8, 11.\nNode 2 is connected to nodes 6, 9, 11.\nNode 3 is connected to nodes 4, 5, 10.\nNode 4 is connected to nodes 0, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to nodes 0, 3.\nNode 11 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 9, 10],\n1: [6, 7, 8, 11],\n2: [6, 9, 11],\n3: [4, 5, 10],\n4: [0, 3],\n5: [3],\n6: [1, 2],\n7: [1],\n8: [1],\n9: [0, 2],\n10: [0, 3],\n11: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8.\nNode 1 is connected to nodes 4, 5, 7.\nNode 2 is connected to nodes 4, 6, 7.\nNode 3 is connected to nodes 6, 8.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 2, 3.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8],\n1: [4, 5, 7],\n2: [4, 6, 7],\n3: [6, 8],\n4: [1, 2],\n5: [1],\n6: [0, 2, 3],\n7: [1, 2],\n8: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7.\nNode 1 is connected to nodes 4, 6, 7, 10, 11.\nNode 2 is connected to nodes 5, 7, 9.\nNode 3 is connected to nodes 4, 6, 8, 9, 11, 12.\nNode 4 is connected to nodes 0, 1, 3.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 1, 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 2, 3.\nNode 10 is connected to node 1.\nNode 11 is connected to nodes 1, 3.\nNode 12 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7],\n1: [4, 6, 7, 10, 11],\n2: [5, 7, 9],\n3: [4, 6, 8, 9, 11, 12],\n4: [0, 1, 3],\n5: [2],\n6: [1, 3],\n7: [0, 1, 2],\n8: [3],\n9: [2, 3],\n10: [1],\n11: [1, 3],\n12: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 9, 10.\nNode 2 is connected to nodes 5, 7, 10.\nNode 3 is connected to nodes 6, 7.\nNode 4 is connected to nodes 7, 8.\nNode 5 is connected to node 2.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 2, 3, 4.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [9, 10],\n2: [5, 7, 10],\n3: [6, 7],\n4: [7, 8],\n5: [2],\n6: [3],\n7: [2, 3, 4],\n8: [0, 4],\n9: [0, 1],\n10: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8, 9, 10.\nNode 1 is connected to nodes 5, 9, 10.\nNode 2 is connected to nodes 7, 9, 10.\nNode 3 is connected to nodes 5, 6, 11, 12.\nNode 4 is connected to nodes 5, 7, 8, 10, 12.\nNode 5 is connected to nodes 0, 1, 3, 4.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 2, 4.\nNode 8 is connected to nodes 0, 4.\nNode 9 is connected to nodes 0, 1, 2.\nNode 10 is connected to nodes 0, 1, 2, 4.\nNode 11 is connected to node 3.\nNode 12 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8, 9, 10],\n1: [5, 9, 10],\n2: [7, 9, 10],\n3: [5, 6, 11, 12],\n4: [5, 7, 8, 10, 12],\n5: [0, 1, 3, 4],\n6: [0, 3],\n7: [2, 4],\n8: [0, 4],\n9: [0, 1, 2],\n10: [0, 1, 2, 4],\n11: [3],\n12: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 8.\nNode 1 is connected to nodes 6, 7, 8.\nNode 2 is connected to nodes 4, 6, 9.\nNode 3 is connected to nodes 6, 7, 9.\nNode 4 is connected to node 2.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1, 2, 3.\nNode 7 is connected to nodes 1, 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 8],\n1: [6, 7, 8],\n2: [4, 6, 9],\n3: [6, 7, 9],\n4: [2],\n5: [0],\n6: [0, 1, 2, 3],\n7: [1, 3],\n8: [0, 1],\n9: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 12.\nNode 1 is connected to node 9.\nNode 2 is connected to nodes 6, 10.\nNode 3 is connected to nodes 7, 9, 11.\nNode 4 is connected to nodes 6, 8, 9, 12.\nNode 5 is connected to nodes 8, 10, 11.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 4, 5.\nNode 9 is connected to nodes 1, 3, 4.\nNode 10 is connected to nodes 2, 5.\nNode 11 is connected to nodes 3, 5.\nNode 12 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [12],\n1: [9],\n2: [6, 10],\n3: [7, 9, 11],\n4: [6, 8, 9, 12],\n5: [8, 10, 11],\n6: [2, 4],\n7: [3],\n8: [4, 5],\n9: [1, 3, 4],\n10: [2, 5],\n11: [3, 5],\n12: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 8, 9.\nNode 1 is connected to nodes 5, 6, 8.\nNode 2 is connected to node 5.\nNode 3 is connected to nodes 4, 5.\nNode 4 is connected to node 3.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to node 1.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 8, 9],\n1: [5, 6, 8],\n2: [5],\n3: [4, 5],\n4: [3],\n5: [1, 2, 3],\n6: [1],\n7: [0],\n8: [0, 1],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 6, 7.\nNode 1 is connected to nodes 3, 4.\nNode 2 is connected to nodes 3, 6, 7.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 6, 7],\n1: [3, 4],\n2: [3, 6, 7],\n3: [0, 1, 2],\n4: [1],\n5: [0],\n6: [0, 2],\n7: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 7, 8.\nNode 1 is connected to node 8.\nNode 2 is connected to nodes 3, 6, 8.\nNode 3 is connected to node 2.\nNode 4 is connected to node 0.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 7, 8],\n1: [8],\n2: [3, 6, 8],\n3: [2],\n4: [0],\n5: [0],\n6: [0, 2],\n7: [0],\n8: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 9, 12, 13.\nNode 1 is connected to nodes 5, 8.\nNode 2 is connected to nodes 4, 5, 6, 11, 13.\nNode 3 is connected to nodes 4, 5, 10, 11, 12, 13.\nNode 4 is connected to nodes 2, 3.\nNode 5 is connected to nodes 0, 1, 2, 3.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 1.\nNode 9 is connected to node 0.\nNode 10 is connected to node 3.\nNode 11 is connected to nodes 2, 3.\nNode 12 is connected to nodes 0, 3.\nNode 13 is connected to nodes 0, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 9, 12, 13],\n1: [5, 8],\n2: [4, 5, 6, 11, 13],\n3: [4, 5, 10, 11, 12, 13],\n4: [2, 3],\n5: [0, 1, 2, 3],\n6: [0, 2],\n7: [0],\n8: [1],\n9: [0],\n10: [3],\n11: [2, 3],\n12: [0, 3],\n13: [0, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 6.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 4, 5, 7.\nNode 3 is connected to node 0.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 6],\n1: [5, 6],\n2: [4, 5, 7],\n3: [0],\n4: [2],\n5: [1, 2],\n6: [0, 1],\n7: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 9, 14.\nNode 1 is connected to nodes 5, 8, 9, 10, 11, 12, 13.\nNode 2 is connected to nodes 5, 9, 12.\nNode 3 is connected to nodes 5, 8, 10, 11.\nNode 4 is connected to nodes 7, 8, 9, 10, 14.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to node 0.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 1, 3, 4.\nNode 9 is connected to nodes 0, 1, 2, 4.\nNode 10 is connected to nodes 1, 3, 4.\nNode 11 is connected to nodes 1, 3.\nNode 12 is connected to nodes 1, 2.\nNode 13 is connected to node 1.\nNode 14 is connected to nodes 0, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 9, 14],\n1: [5, 8, 9, 10, 11, 12, 13],\n2: [5, 9, 12],\n3: [5, 8, 10, 11],\n4: [7, 8, 9, 10, 14],\n5: [1, 2, 3],\n6: [0],\n7: [4],\n8: [0, 1, 3, 4],\n9: [0, 1, 2, 4],\n10: [1, 3, 4],\n11: [1, 3],\n12: [1, 2],\n13: [1],\n14: [0, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to node 8.\nNode 2 is connected to nodes 6, 8, 9.\nNode 3 is connected to nodes 7, 9, 11, 12.\nNode 4 is connected to nodes 9, 11, 12.\nNode 5 is connected to nodes 6, 7, 10, 11.\nNode 6 is connected to nodes 0, 2, 5.\nNode 7 is connected to nodes 0, 3, 5.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to nodes 2, 3, 4.\nNode 10 is connected to node 5.\nNode 11 is connected to nodes 3, 4, 5.\nNode 12 is connected to nodes 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [8],\n2: [6, 8, 9],\n3: [7, 9, 11, 12],\n4: [9, 11, 12],\n5: [6, 7, 10, 11],\n6: [0, 2, 5],\n7: [0, 3, 5],\n8: [1, 2],\n9: [2, 3, 4],\n10: [5],\n11: [3, 4, 5],\n12: [3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 8, 9.\nNode 1 is connected to nodes 4, 7, 8, 9, 10, 11.\nNode 2 is connected to nodes 4, 7, 10.\nNode 3 is connected to nodes 4, 6, 7.\nNode 4 is connected to nodes 0, 1, 2, 3.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 8, 9],\n1: [4, 7, 8, 9, 10, 11],\n2: [4, 7, 10],\n3: [4, 6, 7],\n4: [0, 1, 2, 3],\n5: [0],\n6: [0, 3],\n7: [1, 2, 3],\n8: [0, 1],\n9: [0, 1],\n10: [1, 2],\n11: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 6, 11.\nNode 2 is connected to nodes 6, 8, 10, 11.\nNode 3 is connected to nodes 5, 7, 8, 9, 10, 11.\nNode 4 is connected to nodes 6, 7, 9, 10, 11.\nNode 5 is connected to node 3.\nNode 6 is connected to nodes 1, 2, 4.\nNode 7 is connected to nodes 3, 4.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 0, 3, 4.\nNode 10 is connected to nodes 2, 3, 4.\nNode 11 is connected to nodes 1, 2, 3, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [6, 11],\n2: [6, 8, 10, 11],\n3: [5, 7, 8, 9, 10, 11],\n4: [6, 7, 9, 10, 11],\n5: [3],\n6: [1, 2, 4],\n7: [3, 4],\n8: [0, 2, 3],\n9: [0, 3, 4],\n10: [2, 3, 4],\n11: [1, 2, 3, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 5, 7.\nNode 1 is connected to nodes 3, 4, 5, 6.\nNode 2 is connected to node 5.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 1.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 5, 7],\n1: [3, 4, 5, 6],\n2: [5],\n3: [0, 1],\n4: [1],\n5: [0, 1, 2],\n6: [1],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6.\nNode 1 is connected to nodes 8, 10.\nNode 2 is connected to nodes 5, 6, 8.\nNode 3 is connected to node 5.\nNode 4 is connected to nodes 5, 7, 9, 10.\nNode 5 is connected to nodes 0, 2, 3, 4.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 1, 2.\nNode 9 is connected to node 4.\nNode 10 is connected to nodes 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6],\n1: [8, 10],\n2: [5, 6, 8],\n3: [5],\n4: [5, 7, 9, 10],\n5: [0, 2, 3, 4],\n6: [0, 2],\n7: [4],\n8: [1, 2],\n9: [4],\n10: [1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8.\nNode 1 is connected to nodes 3, 4, 5, 7.\nNode 2 is connected to node 6.\nNode 3 is connected to node 1.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 0, 1.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8],\n1: [3, 4, 5, 7],\n2: [6],\n3: [1],\n4: [1],\n5: [0, 1],\n6: [0, 2],\n7: [0, 1],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 11.\nNode 1 is connected to nodes 8, 9.\nNode 2 is connected to nodes 5, 7, 8.\nNode 3 is connected to nodes 5, 6, 7, 10.\nNode 4 is connected to nodes 8, 9, 10.\nNode 5 is connected to nodes 0, 2, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 1, 2, 4.\nNode 9 is connected to nodes 1, 4.\nNode 10 is connected to nodes 3, 4.\nNode 11 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 11],\n1: [8, 9],\n2: [5, 7, 8],\n3: [5, 6, 7, 10],\n4: [8, 9, 10],\n5: [0, 2, 3],\n6: [3],\n7: [0, 2, 3],\n8: [1, 2, 4],\n9: [1, 4],\n10: [3, 4],\n11: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 7.\nNode 1 is connected to nodes 3, 5, 6, 7.\nNode 2 is connected to node 7.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 7],\n1: [3, 5, 6, 7],\n2: [7],\n3: [0, 1],\n4: [0],\n5: [0, 1],\n6: [1],\n7: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8.\nNode 1 is connected to node 9.\nNode 2 is connected to nodes 8, 9.\nNode 3 is connected to nodes 4, 8.\nNode 4 is connected to node 3.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8],\n1: [9],\n2: [8, 9],\n3: [4, 8],\n4: [3],\n5: [0],\n6: [0],\n7: [0],\n8: [0, 2, 3],\n9: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9, 13, 14.\nNode 1 is connected to nodes 8, 11.\nNode 2 is connected to nodes 7, 8, 11.\nNode 3 is connected to nodes 8, 9, 14.\nNode 4 is connected to nodes 9, 10, 14.\nNode 5 is connected to nodes 8, 10, 11.\nNode 6 is connected to nodes 9, 12, 14.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 0, 1, 2, 3, 5.\nNode 9 is connected to nodes 0, 3, 4, 6.\nNode 10 is connected to nodes 4, 5.\nNode 11 is connected to nodes 1, 2, 5.\nNode 12 is connected to node 6.\nNode 13 is connected to node 0.\nNode 14 is connected to nodes 0, 3, 4, 6.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9, 13, 14],\n1: [8, 11],\n2: [7, 8, 11],\n3: [8, 9, 14],\n4: [9, 10, 14],\n5: [8, 10, 11],\n6: [9, 12, 14],\n7: [2],\n8: [0, 1, 2, 3, 5],\n9: [0, 3, 4, 6],\n10: [4, 5],\n11: [1, 2, 5],\n12: [6],\n13: [0],\n14: [0, 3, 4, 6]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 8, 9, 10.\nNode 1 is connected to nodes 5, 6, 8.\nNode 2 is connected to nodes 9, 10.\nNode 3 is connected to nodes 6, 7, 9.\nNode 4 is connected to nodes 6, 7.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 1, 3, 4.\nNode 7 is connected to nodes 3, 4.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 0, 2, 3.\nNode 10 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 8, 9, 10],\n1: [5, 6, 8],\n2: [9, 10],\n3: [6, 7, 9],\n4: [6, 7],\n5: [0, 1],\n6: [1, 3, 4],\n7: [3, 4],\n8: [0, 1],\n9: [0, 2, 3],\n10: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 7.\nNode 1 is connected to nodes 7, 8.\nNode 2 is connected to nodes 5, 7, 8.\nNode 3 is connected to nodes 4, 6.\nNode 4 is connected to node 3.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 7],\n1: [7, 8],\n2: [5, 7, 8],\n3: [4, 6],\n4: [3],\n5: [2],\n6: [0, 3],\n7: [0, 1, 2],\n8: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 8, 10, 12, 14.\nNode 1 is connected to nodes 8, 9, 11.\nNode 2 is connected to nodes 6, 9, 10, 13.\nNode 3 is connected to nodes 7, 9, 14.\nNode 4 is connected to nodes 6, 7, 11.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to nodes 0, 3, 4.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to nodes 0, 2.\nNode 11 is connected to nodes 1, 4.\nNode 12 is connected to node 0.\nNode 13 is connected to node 2.\nNode 14 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 8, 10, 12, 14],\n1: [8, 9, 11],\n2: [6, 9, 10, 13],\n3: [7, 9, 14],\n4: [6, 7, 11],\n5: [0],\n6: [2, 4],\n7: [0, 3, 4],\n8: [0, 1],\n9: [1, 2, 3],\n10: [0, 2],\n11: [1, 4],\n12: [0],\n13: [2],\n14: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 9.\nNode 1 is connected to nodes 9, 11.\nNode 2 is connected to nodes 6, 7, 8, 9, 11.\nNode 3 is connected to nodes 6, 7, 11.\nNode 4 is connected to nodes 5, 6, 9, 10.\nNode 5 is connected to nodes 0, 4.\nNode 6 is connected to nodes 2, 3, 4.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 0, 1, 2, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 1, 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 9],\n1: [9, 11],\n2: [6, 7, 8, 9, 11],\n3: [6, 7, 11],\n4: [5, 6, 9, 10],\n5: [0, 4],\n6: [2, 3, 4],\n7: [0, 2, 3],\n8: [2],\n9: [0, 1, 2, 4],\n10: [4],\n11: [1, 2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 9.\nNode 1 is connected to nodes 4, 5, 6, 9.\nNode 2 is connected to nodes 4, 7, 8.\nNode 3 is connected to nodes 4, 7, 8, 10.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to node 1.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 0, 2, 3.\nNode 9 is connected to nodes 0, 1.\nNode 10 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 9],\n1: [4, 5, 6, 9],\n2: [4, 7, 8],\n3: [4, 7, 8, 10],\n4: [1, 2, 3],\n5: [1],\n6: [1],\n7: [2, 3],\n8: [0, 2, 3],\n9: [0, 1],\n10: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8.\nNode 1 is connected to nodes 5, 7, 8, 9.\nNode 2 is connected to node 9.\nNode 3 is connected to nodes 6, 7, 9, 10, 11.\nNode 4 is connected to nodes 7, 8, 10.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 3.\nNode 7 is connected to nodes 1, 3, 4.\nNode 8 is connected to nodes 0, 1, 4.\nNode 9 is connected to nodes 1, 2, 3.\nNode 10 is connected to nodes 3, 4.\nNode 11 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8],\n1: [5, 7, 8, 9],\n2: [9],\n3: [6, 7, 9, 10, 11],\n4: [7, 8, 10],\n5: [1],\n6: [0, 3],\n7: [1, 3, 4],\n8: [0, 1, 4],\n9: [1, 2, 3],\n10: [3, 4],\n11: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 6.\nNode 1 is connected to nodes 3, 6, 7.\nNode 2 is connected to nodes 3, 4, 5.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to node 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6],\n1: [3, 6, 7],\n2: [3, 4, 5],\n3: [1, 2],\n4: [2],\n5: [2],\n6: [0, 1],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 6, 7, 8.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to nodes 4, 5.\nNode 3 is connected to nodes 4, 7.\nNode 4 is connected to nodes 0, 2, 3.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 0, 1, 3.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 6, 7, 8],\n1: [5, 7],\n2: [4, 5],\n3: [4, 7],\n4: [0, 2, 3],\n5: [1, 2],\n6: [0],\n7: [0, 1, 3],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6.\nNode 1 is connected to nodes 3, 7.\nNode 2 is connected to nodes 3, 4, 5, 7.\nNode 3 is connected to nodes 1, 2.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to node 0.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6],\n1: [3, 7],\n2: [3, 4, 5, 7],\n3: [1, 2],\n4: [2],\n5: [0, 2],\n6: [0],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 10.\nNode 1 is connected to node 5.\nNode 2 is connected to nodes 5, 8, 10.\nNode 3 is connected to nodes 5, 7, 8, 9.\nNode 4 is connected to nodes 6, 8, 9.\nNode 5 is connected to nodes 1, 2, 3.\nNode 6 is connected to node 4.\nNode 7 is connected to node 3.\nNode 8 is connected to nodes 2, 3, 4.\nNode 9 is connected to nodes 3, 4.\nNode 10 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10],\n1: [5],\n2: [5, 8, 10],\n3: [5, 7, 8, 9],\n4: [6, 8, 9],\n5: [1, 2, 3],\n6: [4],\n7: [3],\n8: [2, 3, 4],\n9: [3, 4],\n10: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 7, 9.\nNode 1 is connected to nodes 8, 13.\nNode 2 is connected to nodes 11, 13.\nNode 3 is connected to nodes 7, 11, 12.\nNode 4 is connected to nodes 5, 6, 9, 10, 12.\nNode 5 is connected to nodes 0, 4.\nNode 6 is connected to node 4.\nNode 7 is connected to nodes 0, 3.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 2, 3.\nNode 12 is connected to nodes 3, 4.\nNode 13 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 7, 9],\n1: [8, 13],\n2: [11, 13],\n3: [7, 11, 12],\n4: [5, 6, 9, 10, 12],\n5: [0, 4],\n6: [4],\n7: [0, 3],\n8: [1],\n9: [0, 4],\n10: [4],\n11: [2, 3],\n12: [3, 4],\n13: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 8, 9.\nNode 1 is connected to nodes 3, 5, 7, 9.\nNode 2 is connected to nodes 5, 6, 8.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to node 1.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 8, 9],\n1: [3, 5, 7, 9],\n2: [5, 6, 8],\n3: [0, 1],\n4: [0],\n5: [1, 2],\n6: [2],\n7: [1],\n8: [0, 2],\n9: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 7, 8.\nNode 1 is connected to node 5.\nNode 2 is connected to nodes 6, 7, 8.\nNode 3 is connected to nodes 5, 7.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 2, 3.\nNode 8 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 7, 8],\n1: [5],\n2: [6, 7, 8],\n3: [5, 7],\n4: [0],\n5: [1, 3],\n6: [2],\n7: [0, 2, 3],\n8: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10.\nNode 1 is connected to nodes 9, 10, 11.\nNode 2 is connected to nodes 5, 6, 7, 8.\nNode 3 is connected to nodes 10, 11.\nNode 4 is connected to nodes 6, 7, 8.\nNode 5 is connected to nodes 0, 2.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to nodes 2, 4.\nNode 8 is connected to nodes 2, 4.\nNode 9 is connected to node 1.\nNode 10 is connected to nodes 0, 1, 3.\nNode 11 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10],\n1: [9, 10, 11],\n2: [5, 6, 7, 8],\n3: [10, 11],\n4: [6, 7, 8],\n5: [0, 2],\n6: [2, 4],\n7: [2, 4],\n8: [2, 4],\n9: [1],\n10: [0, 1, 3],\n11: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 6.\nNode 1 is connected to nodes 2, 6, 7.\nNode 2 is connected to node 1.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 6],\n1: [2, 6, 7],\n2: [1],\n3: [0],\n4: [0],\n5: [0],\n6: [0, 1],\n7: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 9.\nNode 1 is connected to nodes 3, 5, 6, 8.\nNode 2 is connected to nodes 4, 6, 7.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to node 1.\nNode 9 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 9],\n1: [3, 5, 6, 8],\n2: [4, 6, 7],\n3: [1],\n4: [0, 2],\n5: [0, 1],\n6: [1, 2],\n7: [2],\n8: [1],\n9: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 7.\nNode 1 is connected to nodes 3, 4, 6, 7.\nNode 2 is connected to nodes 5, 7.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 2.\nNode 6 is connected to node 1.\nNode 7 is connected to nodes 0, 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 7],\n1: [3, 4, 6, 7],\n2: [5, 7],\n3: [0, 1],\n4: [0, 1],\n5: [2],\n6: [1],\n7: [0, 1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6.\nNode 1 is connected to nodes 3, 5, 7.\nNode 2 is connected to nodes 5, 6, 7.\nNode 3 is connected to nodes 0, 1.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 2.\nNode 7 is connected to nodes 1, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6],\n1: [3, 5, 7],\n2: [5, 6, 7],\n3: [0, 1],\n4: [0],\n5: [1, 2],\n6: [0, 2],\n7: [1, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 11, 12.\nNode 1 is connected to nodes 5, 9.\nNode 2 is connected to nodes 6, 7, 9, 11.\nNode 3 is connected to node 8.\nNode 4 is connected to nodes 6, 7, 8, 9, 10.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to nodes 2, 4.\nNode 7 is connected to nodes 2, 4.\nNode 8 is connected to nodes 3, 4.\nNode 9 is connected to nodes 1, 2, 4.\nNode 10 is connected to node 4.\nNode 11 is connected to nodes 0, 2.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 11, 12],\n1: [5, 9],\n2: [6, 7, 9, 11],\n3: [8],\n4: [6, 7, 8, 9, 10],\n5: [0, 1],\n6: [2, 4],\n7: [2, 4],\n8: [3, 4],\n9: [1, 2, 4],\n10: [4],\n11: [0, 2],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 8, 10, 11, 12, 13.\nNode 1 is connected to nodes 6, 9, 12, 13.\nNode 2 is connected to nodes 6, 7, 8.\nNode 3 is connected to nodes 5, 6, 9, 11, 12.\nNode 4 is connected to nodes 5, 8, 13.\nNode 5 is connected to nodes 3, 4.\nNode 6 is connected to nodes 1, 2, 3.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 0, 2, 4.\nNode 9 is connected to nodes 1, 3.\nNode 10 is connected to node 0.\nNode 11 is connected to nodes 0, 3.\nNode 12 is connected to nodes 0, 1, 3.\nNode 13 is connected to nodes 0, 1, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [8, 10, 11, 12, 13],\n1: [6, 9, 12, 13],\n2: [6, 7, 8],\n3: [5, 6, 9, 11, 12],\n4: [5, 8, 13],\n5: [3, 4],\n6: [1, 2, 3],\n7: [2],\n8: [0, 2, 4],\n9: [1, 3],\n10: [0],\n11: [0, 3],\n12: [0, 1, 3],\n13: [0, 1, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 6, 8, 10, 11.\nNode 1 is connected to nodes 5, 6.\nNode 2 is connected to nodes 6, 8, 10.\nNode 3 is connected to nodes 7, 10, 11.\nNode 4 is connected to nodes 7, 9.\nNode 5 is connected to node 1.\nNode 6 is connected to nodes 0, 1, 2.\nNode 7 is connected to nodes 3, 4.\nNode 8 is connected to nodes 0, 2.\nNode 9 is connected to node 4.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to nodes 0, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [6, 8, 10, 11],\n1: [5, 6],\n2: [6, 8, 10],\n3: [7, 10, 11],\n4: [7, 9],\n5: [1],\n6: [0, 1, 2],\n7: [3, 4],\n8: [0, 2],\n9: [4],\n10: [0, 2, 3],\n11: [0, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 10, 11, 13.\nNode 1 is connected to node 13.\nNode 2 is connected to nodes 7, 9, 10.\nNode 3 is connected to nodes 7, 10, 12, 13.\nNode 4 is connected to nodes 8, 9, 14.\nNode 5 is connected to nodes 7, 8, 11.\nNode 6 is connected to node 14.\nNode 7 is connected to nodes 2, 3, 5.\nNode 8 is connected to nodes 4, 5.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to nodes 0, 2, 3.\nNode 11 is connected to nodes 0, 5.\nNode 12 is connected to node 3.\nNode 13 is connected to nodes 0, 1, 3.\nNode 14 is connected to nodes 4, 6.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [10, 11, 13],\n1: [13],\n2: [7, 9, 10],\n3: [7, 10, 12, 13],\n4: [8, 9, 14],\n5: [7, 8, 11],\n6: [14],\n7: [2, 3, 5],\n8: [4, 5],\n9: [2, 4],\n10: [0, 2, 3],\n11: [0, 5],\n12: [3],\n13: [0, 1, 3],\n14: [4, 6]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 9.\nNode 1 is connected to nodes 5, 7, 9, 10.\nNode 2 is connected to nodes 10, 11.\nNode 3 is connected to nodes 5, 6, 10, 11.\nNode 4 is connected to nodes 7, 8, 9.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 4.\nNode 8 is connected to node 4.\nNode 9 is connected to nodes 0, 1, 4.\nNode 10 is connected to nodes 1, 2, 3.\nNode 11 is connected to nodes 2, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9],\n1: [5, 7, 9, 10],\n2: [10, 11],\n3: [5, 6, 10, 11],\n4: [7, 8, 9],\n5: [1, 3],\n6: [3],\n7: [1, 4],\n8: [4],\n9: [0, 1, 4],\n10: [1, 2, 3],\n11: [2, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 8.\nNode 1 is connected to nodes 4, 7.\nNode 2 is connected to node 7.\nNode 3 is connected to nodes 4, 5, 6, 7.\nNode 4 is connected to nodes 0, 1, 3.\nNode 5 is connected to node 3.\nNode 6 is connected to node 3.\nNode 7 is connected to nodes 1, 2, 3.\nNode 8 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 8],\n1: [4, 7],\n2: [7],\n3: [4, 5, 6, 7],\n4: [0, 1, 3],\n5: [3],\n6: [3],\n7: [1, 2, 3],\n8: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 9.\nNode 1 is connected to nodes 6, 10, 11.\nNode 2 is connected to nodes 8, 10, 11.\nNode 3 is connected to nodes 7, 10, 11, 12.\nNode 4 is connected to nodes 6, 9, 11.\nNode 5 is connected to nodes 6, 11.\nNode 6 is connected to nodes 1, 4, 5.\nNode 7 is connected to node 3.\nNode 8 is connected to node 2.\nNode 9 is connected to nodes 0, 4.\nNode 10 is connected to nodes 1, 2, 3.\nNode 11 is connected to nodes 1, 2, 3, 4, 5.\nNode 12 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [9],\n1: [6, 10, 11],\n2: [8, 10, 11],\n3: [7, 10, 11, 12],\n4: [6, 9, 11],\n5: [6, 11],\n6: [1, 4, 5],\n7: [3],\n8: [2],\n9: [0, 4],\n10: [1, 2, 3],\n11: [1, 2, 3, 4, 5],\n12: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 7.\nNode 1 is connected to nodes 4, 5.\nNode 2 is connected to nodes 4, 6.\nNode 3 is connected to node 0.\nNode 4 is connected to nodes 0, 1, 2.\nNode 5 is connected to node 1.\nNode 6 is connected to node 2.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 7],\n1: [4, 5],\n2: [4, 6],\n3: [0],\n4: [0, 1, 2],\n5: [1],\n6: [2],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 6, 7, 8, 9, 10, 11.\nNode 1 is connected to nodes 3, 5, 6, 10.\nNode 2 is connected to nodes 3, 4, 5, 11.\nNode 3 is connected to nodes 0, 1, 2.\nNode 4 is connected to nodes 0, 2.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 0.\nNode 8 is connected to node 0.\nNode 9 is connected to node 0.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 6, 7, 8, 9, 10, 11],\n1: [3, 5, 6, 10],\n2: [3, 4, 5, 11],\n3: [0, 1, 2],\n4: [0, 2],\n5: [1, 2],\n6: [0, 1],\n7: [0],\n8: [0],\n9: [0],\n10: [0, 1],\n11: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to node 5.\nNode 1 is connected to nodes 6, 8, 11.\nNode 2 is connected to nodes 4, 6, 7, 9, 10.\nNode 3 is connected to nodes 5, 8, 11.\nNode 4 is connected to node 2.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 2.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to node 2.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 1, 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5],\n1: [6, 8, 11],\n2: [4, 6, 7, 9, 10],\n3: [5, 8, 11],\n4: [2],\n5: [0, 3],\n6: [1, 2],\n7: [2],\n8: [1, 3],\n9: [2],\n10: [2],\n11: [1, 3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 7, 9.\nNode 1 is connected to nodes 8, 9, 10, 11.\nNode 2 is connected to node 10.\nNode 3 is connected to nodes 6, 9.\nNode 4 is connected to nodes 5, 10.\nNode 5 is connected to node 4.\nNode 6 is connected to node 3.\nNode 7 is connected to node 0.\nNode 8 is connected to node 1.\nNode 9 is connected to nodes 0, 1, 3.\nNode 10 is connected to nodes 1, 2, 4.\nNode 11 is connected to node 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [7, 9],\n1: [8, 9, 10, 11],\n2: [10],\n3: [6, 9],\n4: [5, 10],\n5: [4],\n6: [3],\n7: [0],\n8: [1],\n9: [0, 1, 3],\n10: [1, 2, 4],\n11: [1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 10, 11.\nNode 1 is connected to nodes 10, 11.\nNode 2 is connected to nodes 6, 8, 9, 10.\nNode 3 is connected to nodes 7, 8, 12.\nNode 4 is connected to nodes 5, 7, 9, 10.\nNode 5 is connected to nodes 0, 4.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 3, 4.\nNode 8 is connected to nodes 2, 3.\nNode 9 is connected to nodes 2, 4.\nNode 10 is connected to nodes 0, 1, 2, 4.\nNode 11 is connected to nodes 0, 1.\nNode 12 is connected to node 3.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 10, 11],\n1: [10, 11],\n2: [6, 8, 9, 10],\n3: [7, 8, 12],\n4: [5, 7, 9, 10],\n5: [0, 4],\n6: [2],\n7: [3, 4],\n8: [2, 3],\n9: [2, 4],\n10: [0, 1, 2, 4],\n11: [0, 1],\n12: [3]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 7, 8, 9.\nNode 1 is connected to nodes 4, 8.\nNode 2 is connected to nodes 3, 4, 9, 10.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 1, 2.\nNode 5 is connected to node 0.\nNode 6 is connected to node 0.\nNode 7 is connected to node 0.\nNode 8 is connected to nodes 0, 1.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to node 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 7, 8, 9],\n1: [4, 8],\n2: [3, 4, 9, 10],\n3: [2],\n4: [1, 2],\n5: [0],\n6: [0],\n7: [0],\n8: [0, 1],\n9: [0, 2],\n10: [2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 8, 9, 11.\nNode 1 is connected to nodes 4, 5, 6, 7, 10, 11.\nNode 2 is connected to nodes 3, 5, 6, 9, 10.\nNode 3 is connected to node 2.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to node 1.\nNode 8 is connected to node 0.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 8, 9, 11],\n1: [4, 5, 6, 7, 10, 11],\n2: [3, 5, 6, 9, 10],\n3: [2],\n4: [0, 1],\n5: [1, 2],\n6: [1, 2],\n7: [1],\n8: [0],\n9: [0, 2],\n10: [1, 2],\n11: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 4, 5, 7.\nNode 1 is connected to nodes 5, 7.\nNode 2 is connected to nodes 5, 6.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 5 is connected to nodes 0, 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 4, 5, 7],\n1: [5, 7],\n2: [5, 6],\n3: [0],\n4: [0],\n5: [0, 1, 2],\n6: [2],\n7: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 6, 11, 12.\nNode 1 is connected to nodes 8, 9, 12.\nNode 2 is connected to nodes 6, 7, 10, 11.\nNode 3 is connected to nodes 5, 6, 7, 8.\nNode 4 is connected to node 9.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to nodes 0, 2, 3.\nNode 7 is connected to nodes 2, 3.\nNode 8 is connected to nodes 1, 3.\nNode 9 is connected to nodes 1, 4.\nNode 10 is connected to node 2.\nNode 11 is connected to nodes 0, 2.\nNode 12 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 6, 11, 12],\n1: [8, 9, 12],\n2: [6, 7, 10, 11],\n3: [5, 6, 7, 8],\n4: [9],\n5: [0, 3],\n6: [0, 2, 3],\n7: [2, 3],\n8: [1, 3],\n9: [1, 4],\n10: [2],\n11: [0, 2],\n12: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 2, 4, 5, 6, 7.\nNode 1 is connected to nodes 2, 3, 4, 6.\nNode 2 is connected to nodes 0, 1.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 0, 1.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [2, 4, 5, 6, 7],\n1: [2, 3, 4, 6],\n2: [0, 1],\n3: [1],\n4: [0, 1],\n5: [0],\n6: [0, 1],\n7: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 3, 7, 8.\nNode 1 is connected to nodes 4, 5, 7, 8.\nNode 2 is connected to nodes 5, 6, 7.\nNode 3 is connected to node 0.\nNode 4 is connected to node 1.\nNode 5 is connected to nodes 1, 2.\nNode 6 is connected to node 2.\nNode 7 is connected to nodes 0, 1, 2.\nNode 8 is connected to nodes 0, 1.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [3, 7, 8],\n1: [4, 5, 7, 8],\n2: [5, 6, 7],\n3: [0],\n4: [1],\n5: [1, 2],\n6: [2],\n7: [0, 1, 2],\n8: [0, 1]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 5, 8, 10, 12.\nNode 1 is connected to nodes 5, 8, 10, 13.\nNode 2 is connected to nodes 9, 13.\nNode 3 is connected to nodes 6, 8, 11.\nNode 4 is connected to nodes 7, 8, 13.\nNode 5 is connected to nodes 0, 1.\nNode 6 is connected to node 3.\nNode 7 is connected to node 4.\nNode 8 is connected to nodes 0, 1, 3, 4.\nNode 9 is connected to node 2.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to node 3.\nNode 12 is connected to node 0.\nNode 13 is connected to nodes 1, 2, 4.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [5, 8, 10, 12],\n1: [5, 8, 10, 13],\n2: [9, 13],\n3: [6, 8, 11],\n4: [7, 8, 13],\n5: [0, 1],\n6: [3],\n7: [4],\n8: [0, 1, 3, 4],\n9: [2],\n10: [0, 1],\n11: [3],\n12: [0],\n13: [1, 2, 4]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 5, 6, 8, 11.\nNode 1 is connected to nodes 3, 6, 7, 8, 9, 10.\nNode 2 is connected to nodes 7, 8, 9, 10, 11.\nNode 3 is connected to node 1.\nNode 4 is connected to node 0.\nNode 5 is connected to node 0.\nNode 6 is connected to nodes 0, 1.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 1, 2.\nNode 9 is connected to nodes 1, 2.\nNode 10 is connected to nodes 1, 2.\nNode 11 is connected to nodes 0, 2.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 5, 6, 8, 11],\n1: [3, 6, 7, 8, 9, 10],\n2: [7, 8, 9, 10, 11],\n3: [1],\n4: [0],\n5: [0],\n6: [0, 1],\n7: [1, 2],\n8: [0, 1, 2],\n9: [1, 2],\n10: [1, 2],\n11: [0, 2]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node 0 is connected to nodes 4, 8, 9, 10, 11, 12.\nNode 1 is connected to nodes 4, 5, 6, 7, 8, 10.\nNode 2 is connected to nodes 4, 6, 7, 8, 9.\nNode 3 is connected to nodes 4, 5, 8.\nNode 4 is connected to nodes 0, 1, 2, 3.\nNode 5 is connected to nodes 1, 3.\nNode 6 is connected to nodes 1, 2.\nNode 7 is connected to nodes 1, 2.\nNode 8 is connected to nodes 0, 1, 2, 3.\nNode 9 is connected to nodes 0, 2.\nNode 10 is connected to nodes 0, 1.\nNode 11 is connected to node 0.\nNode 12 is connected to node 0.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\d+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge.strip('. ')) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{0: [4, 8, 9, 10, 11, 12],\n1: [4, 5, 6, 7, 8, 10],\n2: [4, 6, 7, 8, 9],\n3: [4, 5, 8],\n4: [0, 1, 2, 3],\n5: [1, 3],\n6: [1, 2],\n7: [1, 2],\n8: [0, 1, 2, 3],\n9: [0, 2],\n10: [0, 1],\n11: [0],\n12: [0]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = [int(edge) for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "Node LXU is connected to nodes QQA, XBL, QOE.\nNode NWZ is connected to nodes QQA, XBL, FPU.\nNode VRM is connected to nodes QQA, FPU.\nNode ZEN is connected to nodes CHR, TSY, XBL, QOE.\nNode CHR is connected to node ZEN.\nNode QQA is connected to nodes LXU, NWZ, VRM.\nNode TSY is connected to node ZEN.\nNode XBL is connected to nodes LXU, NWZ, ZEN.\nNode FPU is connected to nodes NWZ, VRM.\nNode QOE is connected to nodes LXU, ZEN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LXU: [QQA, XBL, QOE],\nNWZ: [QQA, XBL, FPU],\nVRM: [QQA, FPU],\nZEN: [CHR, TSY, XBL, QOE],\nCHR: [ZEN],\nQQA: [LXU, NWZ, VRM],\nTSY: [ZEN],\nXBL: [LXU, NWZ, ZEN],\nFPU: [NWZ, VRM],\nQOE: [LXU, ZEN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JTP is connected to nodes AEV, RJC, JWF, RRW.\nNode QXT is connected to nodes URJ, RJC, RRW.\nNode PET is connected to nodes AEV, RJC, JWF, AHJ.\nNode LIT is connected to node CIY.\nNode AGU is connected to nodes URJ, CIY, RRW.\nNode AEV is connected to nodes JTP, PET.\nNode URJ is connected to nodes QXT, AGU.\nNode RJC is connected to nodes JTP, QXT, PET.\nNode CIY is connected to nodes LIT, AGU.\nNode JWF is connected to nodes JTP, PET.\nNode AHJ is connected to node PET.\nNode RRW is connected to nodes JTP, QXT, AGU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JTP: [AEV, RJC, JWF, RRW],\nQXT: [URJ, RJC, RRW],\nPET: [AEV, RJC, JWF, AHJ],\nLIT: [CIY],\nAGU: [URJ, CIY, RRW],\nAEV: [JTP, PET],\nURJ: [QXT, AGU],\nRJC: [JTP, QXT, PET],\nCIY: [LIT, AGU],\nJWF: [JTP, PET],\nAHJ: [PET],\nRRW: [JTP, QXT, AGU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GZM is connected to nodes FWF, DAD, MPS.\nNode OOC is connected to nodes FWF, SMU, MPS, WJW.\nNode UIQ is connected to nodes FWF, SMU, MPS, WJW.\nNode FWF is connected to nodes GZM, OOC, UIQ.\nNode DAD is connected to node GZM.\nNode SMU is connected to nodes OOC, UIQ.\nNode MPS is connected to nodes GZM, OOC, UIQ.\nNode WJW is connected to nodes OOC, UIQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GZM: [FWF, DAD, MPS],\nOOC: [FWF, SMU, MPS, WJW],\nUIQ: [FWF, SMU, MPS, WJW],\nFWF: [GZM, OOC, UIQ],\nDAD: [GZM],\nSMU: [OOC, UIQ],\nMPS: [GZM, OOC, UIQ],\nWJW: [OOC, UIQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZCQ is connected to node MYI.\nNode PER is connected to nodes CUF, IRZ, ZAG.\nNode KNY is connected to nodes SWR, CUF, LDM.\nNode YAK is connected to nodes CUF, MYI, ZAG.\nNode YFL is connected to nodes HGR, IRZ.\nNode PLA is connected to node MYI.\nNode SWR is connected to node KNY.\nNode CUF is connected to nodes PER, KNY, YAK.\nNode HGR is connected to node YFL.\nNode MYI is connected to nodes ZCQ, YAK, PLA.\nNode IRZ is connected to nodes PER, YFL.\nNode ZAG is connected to nodes PER, YAK.\nNode LDM is connected to node KNY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZCQ: [MYI],\nPER: [CUF, IRZ, ZAG],\nKNY: [SWR, CUF, LDM],\nYAK: [CUF, MYI, ZAG],\nYFL: [HGR, IRZ],\nPLA: [MYI],\nSWR: [KNY],\nCUF: [PER, KNY, YAK],\nHGR: [YFL],\nMYI: [ZCQ, YAK, PLA],\nIRZ: [PER, YFL],\nZAG: [PER, YAK],\nLDM: [KNY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VNZ is connected to nodes ZPG, XBK, WWE, LLT, MJI.\nNode FXX is connected to nodes XBK, LLT, BVG, ANI.\nNode XDK is connected to nodes LLT, VCX, ANI, FII.\nNode ONB is connected to nodes ZPG, LLT, MJI, ANI.\nNode NOH is connected to nodes OET, ZPG, LLT.\nNode OET is connected to node NOH.\nNode ZPG is connected to nodes VNZ, ONB, NOH.\nNode XBK is connected to nodes VNZ, FXX.\nNode WWE is connected to node VNZ.\nNode LLT is connected to nodes VNZ, FXX, XDK, ONB, NOH.\nNode BVG is connected to node FXX.\nNode MJI is connected to nodes VNZ, ONB.\nNode VCX is connected to node XDK.\nNode ANI is connected to nodes FXX, XDK, ONB.\nNode FII is connected to node XDK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VNZ: [ZPG, XBK, WWE, LLT, MJI],\nFXX: [XBK, LLT, BVG, ANI],\nXDK: [LLT, VCX, ANI, FII],\nONB: [ZPG, LLT, MJI, ANI],\nNOH: [OET, ZPG, LLT],\nOET: [NOH],\nZPG: [VNZ, ONB, NOH],\nXBK: [VNZ, FXX],\nWWE: [VNZ],\nLLT: [VNZ, FXX, XDK, ONB, NOH],\nBVG: [FXX],\nMJI: [VNZ, ONB],\nVCX: [XDK],\nANI: [FXX, XDK, ONB],\nFII: [XDK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QOQ is connected to nodes AVC, SZW, TFD.\nNode VVW is connected to nodes SPY, NLD, AVC, QML.\nNode YJP is connected to nodes NLD, PIK, WUZ.\nNode NNC is connected to nodes EUD, PIK.\nNode GIG is connected to nodes SPY, WUZ, TFD.\nNode EUD is connected to node NNC.\nNode SPY is connected to nodes VVW, GIG.\nNode NLD is connected to nodes VVW, YJP.\nNode AVC is connected to nodes QOQ, VVW.\nNode SZW is connected to node QOQ.\nNode PIK is connected to nodes YJP, NNC.\nNode QML is connected to node VVW.\nNode WUZ is connected to nodes YJP, GIG.\nNode TFD is connected to nodes QOQ, GIG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QOQ: [AVC, SZW, TFD],\nVVW: [SPY, NLD, AVC, QML],\nYJP: [NLD, PIK, WUZ],\nNNC: [EUD, PIK],\nGIG: [SPY, WUZ, TFD],\nEUD: [NNC],\nSPY: [VVW, GIG],\nNLD: [VVW, YJP],\nAVC: [QOQ, VVW],\nSZW: [QOQ],\nPIK: [YJP, NNC],\nQML: [VVW],\nWUZ: [YJP, GIG],\nTFD: [QOQ, GIG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DUJ is connected to nodes TGQ, QUP.\nNode QWC is connected to nodes TGQ, CLP, MIW, AEQ.\nNode AWT is connected to nodes BPR, TGQ, AEQ.\nNode BPR is connected to node AWT.\nNode TGQ is connected to nodes DUJ, QWC, AWT.\nNode CLP is connected to node QWC.\nNode QUP is connected to node DUJ.\nNode MIW is connected to node QWC.\nNode AEQ is connected to nodes QWC, AWT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DUJ: [TGQ, QUP],\nQWC: [TGQ, CLP, MIW, AEQ],\nAWT: [BPR, TGQ, AEQ],\nBPR: [AWT],\nTGQ: [DUJ, QWC, AWT],\nCLP: [QWC],\nQUP: [DUJ],\nMIW: [QWC],\nAEQ: [QWC, AWT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AOV is connected to nodes MWP, RXC, EEH.\nNode WWW is connected to nodes RXC, VUV, EEH.\nNode ETP is connected to nodes PNI, RXC, EEH.\nNode NZD is connected to node VUV.\nNode MWP is connected to node AOV.\nNode PNI is connected to node ETP.\nNode RXC is connected to nodes AOV, WWW, ETP.\nNode VUV is connected to nodes WWW, NZD.\nNode EEH is connected to nodes AOV, WWW, ETP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AOV: [MWP, RXC, EEH],\nWWW: [RXC, VUV, EEH],\nETP: [PNI, RXC, EEH],\nNZD: [VUV],\nMWP: [AOV],\nPNI: [ETP],\nRXC: [AOV, WWW, ETP],\nVUV: [WWW, NZD],\nEEH: [AOV, WWW, ETP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QZI is connected to nodes XXJ, TCI, EXR, ZVX.\nNode EKP is connected to node RTJ.\nNode ZZY is connected to nodes CCS, XXJ, ZVX.\nNode UTF is connected to nodes TUM, XBF, EXR, WCX.\nNode PVG is connected to nodes CCS, FYC, RTJ, EXR.\nNode CCS is connected to nodes ZZY, PVG.\nNode FYC is connected to node PVG.\nNode TUM is connected to node UTF.\nNode XXJ is connected to nodes QZI, ZZY.\nNode RTJ is connected to nodes EKP, PVG.\nNode TCI is connected to node QZI.\nNode XBF is connected to node UTF.\nNode EXR is connected to nodes QZI, UTF, PVG.\nNode ZVX is connected to nodes QZI, ZZY.\nNode WCX is connected to node UTF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QZI: [XXJ, TCI, EXR, ZVX],\nEKP: [RTJ],\nZZY: [CCS, XXJ, ZVX],\nUTF: [TUM, XBF, EXR, WCX],\nPVG: [CCS, FYC, RTJ, EXR],\nCCS: [ZZY, PVG],\nFYC: [PVG],\nTUM: [UTF],\nXXJ: [QZI, ZZY],\nRTJ: [EKP, PVG],\nTCI: [QZI],\nXBF: [UTF],\nEXR: [QZI, UTF, PVG],\nZVX: [QZI, ZZY],\nWCX: [UTF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TGX is connected to nodes CYW, HPA, FEV, KAB.\nNode WYH is connected to nodes HPA, FEV, GTJ.\nNode UNQ is connected to nodes ZOF, FEV.\nNode OIC is connected to nodes CYW, LEX, ZOF, FEV.\nNode CYW is connected to nodes TGX, OIC.\nNode LEX is connected to node OIC.\nNode ZOF is connected to nodes UNQ, OIC.\nNode HPA is connected to nodes TGX, WYH.\nNode FEV is connected to nodes TGX, WYH, UNQ, OIC.\nNode GTJ is connected to node WYH.\nNode KAB is connected to node TGX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TGX: [CYW, HPA, FEV, KAB],\nWYH: [HPA, FEV, GTJ],\nUNQ: [ZOF, FEV],\nOIC: [CYW, LEX, ZOF, FEV],\nCYW: [TGX, OIC],\nLEX: [OIC],\nZOF: [UNQ, OIC],\nHPA: [TGX, WYH],\nFEV: [TGX, WYH, UNQ, OIC],\nGTJ: [WYH],\nKAB: [TGX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CQP is connected to nodes BFC, JLQ, FLV.\nNode WFS is connected to nodes BBZ, UOU, NEN.\nNode FAF is connected to nodes JLQ, NEN.\nNode PAP is connected to nodes BBZ, BFC, JLQ, NEN.\nNode BBZ is connected to nodes WFS, PAP.\nNode UOU is connected to node WFS.\nNode BFC is connected to nodes CQP, PAP.\nNode JLQ is connected to nodes CQP, FAF, PAP.\nNode NEN is connected to nodes WFS, FAF, PAP.\nNode FLV is connected to node CQP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CQP: [BFC, JLQ, FLV],\nWFS: [BBZ, UOU, NEN],\nFAF: [JLQ, NEN],\nPAP: [BBZ, BFC, JLQ, NEN],\nBBZ: [WFS, PAP],\nUOU: [WFS],\nBFC: [CQP, PAP],\nJLQ: [CQP, FAF, PAP],\nNEN: [WFS, FAF, PAP],\nFLV: [CQP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AOX is connected to nodes XWR, BDJ, EVH, FZD.\nNode IDK is connected to nodes YYI, PZZ, WSK.\nNode QQY is connected to nodes YYI, GEI, BDJ, PJO.\nNode TRH is connected to nodes WSK, FZD.\nNode YYI is connected to nodes IDK, QQY.\nNode GEI is connected to node QQY.\nNode XWR is connected to node AOX.\nNode PZZ is connected to node IDK.\nNode BDJ is connected to nodes AOX, QQY.\nNode WSK is connected to nodes IDK, TRH.\nNode PJO is connected to node QQY.\nNode EVH is connected to node AOX.\nNode FZD is connected to nodes AOX, TRH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AOX: [XWR, BDJ, EVH, FZD],\nIDK: [YYI, PZZ, WSK],\nQQY: [YYI, GEI, BDJ, PJO],\nTRH: [WSK, FZD],\nYYI: [IDK, QQY],\nGEI: [QQY],\nXWR: [AOX],\nPZZ: [IDK],\nBDJ: [AOX, QQY],\nWSK: [IDK, TRH],\nPJO: [QQY],\nEVH: [AOX],\nFZD: [AOX, TRH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LOE is connected to node LVM.\nNode XUZ is connected to nodes UCE, LVM.\nNode ZZO is connected to nodes UCE, FHI, OSW, LVM.\nNode JFC is connected to nodes NMF, FHI, JBG, OSW.\nNode EQB is connected to nodes NMF, FHI.\nNode UCE is connected to nodes XUZ, ZZO.\nNode NMF is connected to nodes JFC, EQB.\nNode FHI is connected to nodes ZZO, JFC, EQB.\nNode JBG is connected to node JFC.\nNode OSW is connected to nodes ZZO, JFC.\nNode LVM is connected to nodes LOE, XUZ, ZZO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LOE: [LVM],\nXUZ: [UCE, LVM],\nZZO: [UCE, FHI, OSW, LVM],\nJFC: [NMF, FHI, JBG, OSW],\nEQB: [NMF, FHI],\nUCE: [XUZ, ZZO],\nNMF: [JFC, EQB],\nFHI: [ZZO, JFC, EQB],\nJBG: [JFC],\nOSW: [ZZO, JFC],\nLVM: [LOE, XUZ, ZZO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RQR is connected to nodes OLM, ESG.\nNode CQG is connected to nodes GBW, OLM, KXT, TYJ.\nNode JIK is connected to nodes RDQ, AGJ, SWI.\nNode GAC is connected to nodes RDQ, KXT.\nNode PNC is connected to nodes OLM, ESG.\nNode GBW is connected to node CQG.\nNode RDQ is connected to nodes JIK, GAC.\nNode AGJ is connected to node JIK.\nNode OLM is connected to nodes RQR, CQG, PNC.\nNode KXT is connected to nodes CQG, GAC.\nNode SWI is connected to node JIK.\nNode TYJ is connected to node CQG.\nNode ESG is connected to nodes RQR, PNC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RQR: [OLM, ESG],\nCQG: [GBW, OLM, KXT, TYJ],\nJIK: [RDQ, AGJ, SWI],\nGAC: [RDQ, KXT],\nPNC: [OLM, ESG],\nGBW: [CQG],\nRDQ: [JIK, GAC],\nAGJ: [JIK],\nOLM: [RQR, CQG, PNC],\nKXT: [CQG, GAC],\nSWI: [JIK],\nTYJ: [CQG],\nESG: [RQR, PNC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MCZ is connected to nodes MMD, ZFZ.\nNode DHR is connected to nodes QUS, MMD, QFK, ZFZ.\nNode XHY is connected to nodes IDE, AZK.\nNode RGU is connected to nodes SQO, MMD, IDE, NUI, AZK.\nNode NDP is connected to nodes SQO, ZFZ, NUI, PRI.\nNode HMH is connected to nodes SQO, MMD, IDE, ZFZ, AZK.\nNode QUS is connected to node DHR.\nNode SQO is connected to nodes RGU, NDP, HMH.\nNode MMD is connected to nodes MCZ, DHR, RGU, HMH.\nNode IDE is connected to nodes XHY, RGU, HMH.\nNode QFK is connected to node DHR.\nNode ZFZ is connected to nodes MCZ, DHR, NDP, HMH.\nNode NUI is connected to nodes RGU, NDP.\nNode AZK is connected to nodes XHY, RGU, HMH.\nNode PRI is connected to node NDP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MCZ: [MMD, ZFZ],\nDHR: [QUS, MMD, QFK, ZFZ],\nXHY: [IDE, AZK],\nRGU: [SQO, MMD, IDE, NUI, AZK],\nNDP: [SQO, ZFZ, NUI, PRI],\nHMH: [SQO, MMD, IDE, ZFZ, AZK],\nQUS: [DHR],\nSQO: [RGU, NDP, HMH],\nMMD: [MCZ, DHR, RGU, HMH],\nIDE: [XHY, RGU, HMH],\nQFK: [DHR],\nZFZ: [MCZ, DHR, NDP, HMH],\nNUI: [RGU, NDP],\nAZK: [XHY, RGU, HMH],\nPRI: [NDP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GMI is connected to nodes WRS, XMT, DQN, CDC, NJG.\nNode UGG is connected to nodes CFX, DQN, VKR, TBH.\nNode QRH is connected to nodes CFX, WRS, VKR, CDC.\nNode CFX is connected to nodes UGG, QRH.\nNode WRS is connected to nodes GMI, QRH.\nNode XMT is connected to node GMI.\nNode DQN is connected to nodes GMI, UGG.\nNode VKR is connected to nodes UGG, QRH.\nNode CDC is connected to nodes GMI, QRH.\nNode TBH is connected to node UGG.\nNode NJG is connected to node GMI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GMI: [WRS, XMT, DQN, CDC, NJG],\nUGG: [CFX, DQN, VKR, TBH],\nQRH: [CFX, WRS, VKR, CDC],\nCFX: [UGG, QRH],\nWRS: [GMI, QRH],\nXMT: [GMI],\nDQN: [GMI, UGG],\nVKR: [UGG, QRH],\nCDC: [GMI, QRH],\nTBH: [UGG],\nNJG: [GMI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RVP is connected to nodes EUX, VEC, LKK.\nNode ITL is connected to node UGH.\nNode AJK is connected to nodes EUX, DJF, LKK, XCF.\nNode UAP is connected to nodes EUX, VEC, UGH, XCF.\nNode WGY is connected to nodes EUX, DJF, UGH, ANV.\nNode ZFR is connected to nodes DVG, EUX, DJF, UGH, LKK, XCF.\nNode DVG is connected to node ZFR.\nNode EUX is connected to nodes RVP, AJK, UAP, WGY, ZFR.\nNode DJF is connected to nodes AJK, WGY, ZFR.\nNode VEC is connected to nodes RVP, UAP.\nNode UGH is connected to nodes ITL, UAP, WGY, ZFR.\nNode LKK is connected to nodes RVP, AJK, ZFR.\nNode XCF is connected to nodes AJK, UAP, ZFR.\nNode ANV is connected to node WGY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RVP: [EUX, VEC, LKK],\nITL: [UGH],\nAJK: [EUX, DJF, LKK, XCF],\nUAP: [EUX, VEC, UGH, XCF],\nWGY: [EUX, DJF, UGH, ANV],\nZFR: [DVG, EUX, DJF, UGH, LKK, XCF],\nDVG: [ZFR],\nEUX: [RVP, AJK, UAP, WGY, ZFR],\nDJF: [AJK, WGY, ZFR],\nVEC: [RVP, UAP],\nUGH: [ITL, UAP, WGY, ZFR],\nLKK: [RVP, AJK, ZFR],\nXCF: [AJK, UAP, ZFR],\nANV: [WGY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TDC is connected to node XZB.\nNode CAA is connected to nodes OZB, JER.\nNode PQM is connected to nodes OZB, UXN, HIT, SHH.\nNode EAW is connected to nodes OZB, XZB, SHH, TEA.\nNode OZB is connected to nodes CAA, PQM, EAW.\nNode XZB is connected to nodes TDC, EAW.\nNode UXN is connected to node PQM.\nNode JER is connected to node CAA.\nNode HIT is connected to node PQM.\nNode SHH is connected to nodes PQM, EAW.\nNode TEA is connected to node EAW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TDC: [XZB],\nCAA: [OZB, JER],\nPQM: [OZB, UXN, HIT, SHH],\nEAW: [OZB, XZB, SHH, TEA],\nOZB: [CAA, PQM, EAW],\nXZB: [TDC, EAW],\nUXN: [PQM],\nJER: [CAA],\nHIT: [PQM],\nSHH: [PQM, EAW],\nTEA: [EAW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NVD is connected to nodes NCR, GXV, VYU, VYX.\nNode HOI is connected to nodes NCR, VYU, CBM, VYX.\nNode UCB is connected to nodes NCR, XLD, GXV, SUN, VYU, VYX.\nNode OYU is connected to nodes XLD, VYU.\nNode DAM is connected to nodes NCR, TSK, VYU, CBM.\nNode BBY is connected to nodes NCR, TSK, GXV, VYU, VYX.\nNode RLO is connected to nodes TSK, GXV, SUN, VYU, VYX.\nNode NCR is connected to nodes NVD, HOI, UCB, DAM, BBY.\nNode XLD is connected to nodes UCB, OYU.\nNode TSK is connected to nodes DAM, BBY, RLO.\nNode GXV is connected to nodes NVD, UCB, BBY, RLO.\nNode SUN is connected to nodes UCB, RLO.\nNode VYU is connected to nodes NVD, HOI, UCB, OYU, DAM, BBY, RLO.\nNode CBM is connected to nodes HOI, DAM.\nNode VYX is connected to nodes NVD, HOI, UCB, BBY, RLO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NVD: [NCR, GXV, VYU, VYX],\nHOI: [NCR, VYU, CBM, VYX],\nUCB: [NCR, XLD, GXV, SUN, VYU, VYX],\nOYU: [XLD, VYU],\nDAM: [NCR, TSK, VYU, CBM],\nBBY: [NCR, TSK, GXV, VYU, VYX],\nRLO: [TSK, GXV, SUN, VYU, VYX],\nNCR: [NVD, HOI, UCB, DAM, BBY],\nXLD: [UCB, OYU],\nTSK: [DAM, BBY, RLO],\nGXV: [NVD, UCB, BBY, RLO],\nSUN: [UCB, RLO],\nVYU: [NVD, HOI, UCB, OYU, DAM, BBY, RLO],\nCBM: [HOI, DAM],\nVYX: [NVD, HOI, UCB, BBY, RLO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NAU is connected to nodes EJR, ETZ, SHA.\nNode KRS is connected to nodes SEN, ETZ, SII, SHA.\nNode LWB is connected to nodes ZZP, EJR, UIH.\nNode JVX is connected to nodes SII, MVG.\nNode SEN is connected to node KRS.\nNode ZZP is connected to node LWB.\nNode EJR is connected to nodes NAU, LWB.\nNode ETZ is connected to nodes NAU, KRS.\nNode UIH is connected to node LWB.\nNode SII is connected to nodes KRS, JVX.\nNode MVG is connected to node JVX.\nNode SHA is connected to nodes NAU, KRS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NAU: [EJR, ETZ, SHA],\nKRS: [SEN, ETZ, SII, SHA],\nLWB: [ZZP, EJR, UIH],\nJVX: [SII, MVG],\nSEN: [KRS],\nZZP: [LWB],\nEJR: [NAU, LWB],\nETZ: [NAU, KRS],\nUIH: [LWB],\nSII: [KRS, JVX],\nMVG: [JVX],\nSHA: [NAU, KRS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LQG is connected to nodes AAQ, SSZ, WTI, IOS, WWI.\nNode ELD is connected to nodes LBF, WTE, WWI.\nNode GJX is connected to nodes AAQ, SSZ, LBF, IOS, NPX.\nNode FKT is connected to node WWI.\nNode NBE is connected to nodes LBF, IOS, WWI.\nNode BVP is connected to nodes SSZ, LBF, NPX.\nNode AAQ is connected to nodes LQG, GJX.\nNode SSZ is connected to nodes LQG, GJX, BVP.\nNode WTI is connected to node LQG.\nNode LBF is connected to nodes ELD, GJX, NBE, BVP.\nNode IOS is connected to nodes LQG, GJX, NBE.\nNode NPX is connected to nodes GJX, BVP.\nNode WTE is connected to node ELD.\nNode WWI is connected to nodes LQG, ELD, FKT, NBE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LQG: [AAQ, SSZ, WTI, IOS, WWI],\nELD: [LBF, WTE, WWI],\nGJX: [AAQ, SSZ, LBF, IOS, NPX],\nFKT: [WWI],\nNBE: [LBF, IOS, WWI],\nBVP: [SSZ, LBF, NPX],\nAAQ: [LQG, GJX],\nSSZ: [LQG, GJX, BVP],\nWTI: [LQG],\nLBF: [ELD, GJX, NBE, BVP],\nIOS: [LQG, GJX, NBE],\nNPX: [GJX, BVP],\nWTE: [ELD],\nWWI: [LQG, ELD, FKT, NBE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HOF is connected to nodes DHW, WNS, IVZ, FNA, MUP, WLA.\nNode HXE is connected to nodes DHW, IAO.\nNode HZU is connected to nodes DHW, IAO, WLA.\nNode RZQ is connected to nodes IVZ, MUP.\nNode VXM is connected to nodes DHW, WNS, MUP, IAO.\nNode OAF is connected to nodes INT, IVZ, FNA, MUP, IAO.\nNode DHW is connected to nodes HOF, HXE, HZU, VXM.\nNode INT is connected to node OAF.\nNode WNS is connected to nodes HOF, VXM.\nNode IVZ is connected to nodes HOF, RZQ, OAF.\nNode FNA is connected to nodes HOF, OAF.\nNode MUP is connected to nodes HOF, RZQ, VXM, OAF.\nNode IAO is connected to nodes HXE, HZU, VXM, OAF.\nNode WLA is connected to nodes HOF, HZU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HOF: [DHW, WNS, IVZ, FNA, MUP, WLA],\nHXE: [DHW, IAO],\nHZU: [DHW, IAO, WLA],\nRZQ: [IVZ, MUP],\nVXM: [DHW, WNS, MUP, IAO],\nOAF: [INT, IVZ, FNA, MUP, IAO],\nDHW: [HOF, HXE, HZU, VXM],\nINT: [OAF],\nWNS: [HOF, VXM],\nIVZ: [HOF, RZQ, OAF],\nFNA: [HOF, OAF],\nMUP: [HOF, RZQ, VXM, OAF],\nIAO: [HXE, HZU, VXM, OAF],\nWLA: [HOF, HZU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HTE is connected to nodes IDY, JYL.\nNode JHP is connected to nodes CKI, NXZ, ROL, JYL, CVW.\nNode TCA is connected to nodes UMI, CVW.\nNode IDY is connected to node HTE.\nNode CKI is connected to node JHP.\nNode UMI is connected to node TCA.\nNode NXZ is connected to node JHP.\nNode ROL is connected to node JHP.\nNode JYL is connected to nodes HTE, JHP.\nNode CVW is connected to nodes JHP, TCA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HTE: [IDY, JYL],\nJHP: [CKI, NXZ, ROL, JYL, CVW],\nTCA: [UMI, CVW],\nIDY: [HTE],\nCKI: [JHP],\nUMI: [TCA],\nNXZ: [JHP],\nROL: [JHP],\nJYL: [HTE, JHP],\nCVW: [JHP, TCA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZPW is connected to nodes ESD, CDM, CXW, JDC.\nNode RCM is connected to nodes CDM, VZJ, CXW, TGF, JDC.\nNode BPF is connected to node TGF.\nNode ESD is connected to node ZPW.\nNode CDM is connected to nodes ZPW, RCM.\nNode VZJ is connected to node RCM.\nNode CXW is connected to nodes ZPW, RCM.\nNode TGF is connected to nodes RCM, BPF.\nNode JDC is connected to nodes ZPW, RCM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZPW: [ESD, CDM, CXW, JDC],\nRCM: [CDM, VZJ, CXW, TGF, JDC],\nBPF: [TGF],\nESD: [ZPW],\nCDM: [ZPW, RCM],\nVZJ: [RCM],\nCXW: [ZPW, RCM],\nTGF: [RCM, BPF],\nJDC: [ZPW, RCM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZMK is connected to nodes JEV, IWN, AEM.\nNode GYE is connected to nodes JEV, LJZ.\nNode FHY is connected to nodes JEV, IWN, BUH.\nNode JEV is connected to nodes ZMK, GYE, FHY.\nNode IWN is connected to nodes ZMK, FHY.\nNode BUH is connected to node FHY.\nNode AEM is connected to node ZMK.\nNode LJZ is connected to node GYE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZMK: [JEV, IWN, AEM],\nGYE: [JEV, LJZ],\nFHY: [JEV, IWN, BUH],\nJEV: [ZMK, GYE, FHY],\nIWN: [ZMK, FHY],\nBUH: [FHY],\nAEM: [ZMK],\nLJZ: [GYE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YNH is connected to nodes HWB, AGM, CMX.\nNode SSV is connected to nodes OEE, CMX, FVX.\nNode LOM is connected to nodes AGM, FVX.\nNode OEE is connected to node SSV.\nNode HWB is connected to node YNH.\nNode AGM is connected to nodes YNH, LOM.\nNode CMX is connected to nodes YNH, SSV.\nNode FVX is connected to nodes SSV, LOM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YNH: [HWB, AGM, CMX],\nSSV: [OEE, CMX, FVX],\nLOM: [AGM, FVX],\nOEE: [SSV],\nHWB: [YNH],\nAGM: [YNH, LOM],\nCMX: [YNH, SSV],\nFVX: [SSV, LOM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AJH is connected to nodes GDI, ZSH, ZYF, TWT.\nNode ONJ is connected to nodes XRQ, ZSH, VEN, VMJ, KYS.\nNode XRQ is connected to node ONJ.\nNode GDI is connected to node AJH.\nNode ZSH is connected to nodes AJH, ONJ.\nNode ZYF is connected to node AJH.\nNode VEN is connected to node ONJ.\nNode TWT is connected to node AJH.\nNode VMJ is connected to node ONJ.\nNode KYS is connected to node ONJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AJH: [GDI, ZSH, ZYF, TWT],\nONJ: [XRQ, ZSH, VEN, VMJ, KYS],\nXRQ: [ONJ],\nGDI: [AJH],\nZSH: [AJH, ONJ],\nZYF: [AJH],\nVEN: [ONJ],\nTWT: [AJH],\nVMJ: [ONJ],\nKYS: [ONJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WJD is connected to nodes YWF, EVZ, ORB, VIH, MHB, DKQ.\nNode TNC is connected to node YWF.\nNode UQD is connected to nodes PDG, DKQ.\nNode UFI is connected to nodes EVZ, VIH, ZSR.\nNode YWF is connected to nodes WJD, TNC.\nNode EVZ is connected to nodes WJD, UFI.\nNode ORB is connected to node WJD.\nNode VIH is connected to nodes WJD, UFI.\nNode MHB is connected to node WJD.\nNode PDG is connected to node UQD.\nNode DKQ is connected to nodes WJD, UQD.\nNode ZSR is connected to node UFI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WJD: [YWF, EVZ, ORB, VIH, MHB, DKQ],\nTNC: [YWF],\nUQD: [PDG, DKQ],\nUFI: [EVZ, VIH, ZSR],\nYWF: [WJD, TNC],\nEVZ: [WJD, UFI],\nORB: [WJD],\nVIH: [WJD, UFI],\nMHB: [WJD],\nPDG: [UQD],\nDKQ: [WJD, UQD],\nZSR: [UFI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GKS is connected to nodes XGM, HFK, CVB.\nNode IHS is connected to nodes UWA, SWW, CVB.\nNode MHX is connected to node UWA.\nNode XGM is connected to node GKS.\nNode UWA is connected to nodes IHS, MHX.\nNode HFK is connected to node GKS.\nNode SWW is connected to node IHS.\nNode CVB is connected to nodes GKS, IHS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GKS: [XGM, HFK, CVB],\nIHS: [UWA, SWW, CVB],\nMHX: [UWA],\nXGM: [GKS],\nUWA: [IHS, MHX],\nHFK: [GKS],\nSWW: [IHS],\nCVB: [GKS, IHS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TGT is connected to nodes AVE, LYV, CMX.\nNode SAD is connected to nodes FPB, VHH, AVE, KIW, SUL.\nNode UQL is connected to nodes FPB, VHH, AVE, SUL, CMX.\nNode SIT is connected to nodes FPB, WQR, FBF, LYV, SUL.\nNode STQ is connected to nodes VHH, FBF, LYV, SUL, ASR.\nNode FPB is connected to nodes SAD, UQL, SIT.\nNode WQR is connected to node SIT.\nNode VHH is connected to nodes SAD, UQL, STQ.\nNode FBF is connected to nodes SIT, STQ.\nNode AVE is connected to nodes TGT, SAD, UQL.\nNode KIW is connected to node SAD.\nNode LYV is connected to nodes TGT, SIT, STQ.\nNode SUL is connected to nodes SAD, UQL, SIT, STQ.\nNode CMX is connected to nodes TGT, UQL.\nNode ASR is connected to node STQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TGT: [AVE, LYV, CMX],\nSAD: [FPB, VHH, AVE, KIW, SUL],\nUQL: [FPB, VHH, AVE, SUL, CMX],\nSIT: [FPB, WQR, FBF, LYV, SUL],\nSTQ: [VHH, FBF, LYV, SUL, ASR],\nFPB: [SAD, UQL, SIT],\nWQR: [SIT],\nVHH: [SAD, UQL, STQ],\nFBF: [SIT, STQ],\nAVE: [TGT, SAD, UQL],\nKIW: [SAD],\nLYV: [TGT, SIT, STQ],\nSUL: [SAD, UQL, SIT, STQ],\nCMX: [TGT, UQL],\nASR: [STQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YYO is connected to nodes WJH, GSO, IIP, PQY, ICR.\nNode IAG is connected to nodes YNE, WJH, IIP, ZVH, JXL, ICR.\nNode XCB is connected to nodes YNE, IIP.\nNode GOX is connected to nodes YNE, GSO, ZVH, ICR.\nNode YNE is connected to nodes IAG, XCB, GOX.\nNode WJH is connected to nodes YYO, IAG.\nNode GSO is connected to nodes YYO, GOX.\nNode IIP is connected to nodes YYO, IAG, XCB.\nNode ZVH is connected to nodes IAG, GOX.\nNode PQY is connected to node YYO.\nNode JXL is connected to node IAG.\nNode ICR is connected to nodes YYO, IAG, GOX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YYO: [WJH, GSO, IIP, PQY, ICR],\nIAG: [YNE, WJH, IIP, ZVH, JXL, ICR],\nXCB: [YNE, IIP],\nGOX: [YNE, GSO, ZVH, ICR],\nYNE: [IAG, XCB, GOX],\nWJH: [YYO, IAG],\nGSO: [YYO, GOX],\nIIP: [YYO, IAG, XCB],\nZVH: [IAG, GOX],\nPQY: [YYO],\nJXL: [IAG],\nICR: [YYO, IAG, GOX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PJY is connected to nodes AKV, BCK, VFD, CWD, EEI, OHE, XSY.\nNode CTS is connected to nodes KLY, EEI, OHE.\nNode QQN is connected to nodes VFD, OHE, ZAE.\nNode VOV is connected to nodes LHC, KLY, BCK, CWD, OHE.\nNode EUI is connected to nodes KLY, VFD, CWD, EEI, OHE, XSY, ZAE.\nNode AKV is connected to node PJY.\nNode LHC is connected to node VOV.\nNode KLY is connected to nodes CTS, VOV, EUI.\nNode BCK is connected to nodes PJY, VOV.\nNode VFD is connected to nodes PJY, QQN, EUI.\nNode CWD is connected to nodes PJY, VOV, EUI.\nNode EEI is connected to nodes PJY, CTS, EUI.\nNode OHE is connected to nodes PJY, CTS, QQN, VOV, EUI.\nNode XSY is connected to nodes PJY, EUI.\nNode ZAE is connected to nodes QQN, EUI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PJY: [AKV, BCK, VFD, CWD, EEI, OHE, XSY],\nCTS: [KLY, EEI, OHE],\nQQN: [VFD, OHE, ZAE],\nVOV: [LHC, KLY, BCK, CWD, OHE],\nEUI: [KLY, VFD, CWD, EEI, OHE, XSY, ZAE],\nAKV: [PJY],\nLHC: [VOV],\nKLY: [CTS, VOV, EUI],\nBCK: [PJY, VOV],\nVFD: [PJY, QQN, EUI],\nCWD: [PJY, VOV, EUI],\nEEI: [PJY, CTS, EUI],\nOHE: [PJY, CTS, QQN, VOV, EUI],\nXSY: [PJY, EUI],\nZAE: [QQN, EUI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VDI is connected to nodes CEM, HVB.\nNode JHP is connected to nodes OYE, HVB, ZLA.\nNode HCX is connected to nodes THS, OYE, ZLA.\nNode THS is connected to node HCX.\nNode OYE is connected to nodes JHP, HCX.\nNode CEM is connected to node VDI.\nNode HVB is connected to nodes VDI, JHP.\nNode ZLA is connected to nodes JHP, HCX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VDI: [CEM, HVB],\nJHP: [OYE, HVB, ZLA],\nHCX: [THS, OYE, ZLA],\nTHS: [HCX],\nOYE: [JHP, HCX],\nCEM: [VDI],\nHVB: [VDI, JHP],\nZLA: [JHP, HCX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZCD is connected to nodes GPF, RYL, BDO, ZZQ.\nNode LKK is connected to nodes GPF, NDH, DBN.\nNode PBN is connected to nodes GPF, RYL, DBN, BDO.\nNode GPF is connected to nodes ZCD, LKK, PBN.\nNode NDH is connected to node LKK.\nNode RYL is connected to nodes ZCD, PBN.\nNode DBN is connected to nodes LKK, PBN.\nNode BDO is connected to nodes ZCD, PBN.\nNode ZZQ is connected to node ZCD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZCD: [GPF, RYL, BDO, ZZQ],\nLKK: [GPF, NDH, DBN],\nPBN: [GPF, RYL, DBN, BDO],\nGPF: [ZCD, LKK, PBN],\nNDH: [LKK],\nRYL: [ZCD, PBN],\nDBN: [LKK, PBN],\nBDO: [ZCD, PBN],\nZZQ: [ZCD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EFE is connected to node DPZ.\nNode GXQ is connected to nodes POV, GXG, BEB, OLC.\nNode RTE is connected to nodes EJR, OQE, OLC.\nNode VPQ is connected to nodes OQE, GXG, DPZ, VYC.\nNode BHU is connected to nodes OQE, GXG, DPZ, OLC.\nNode POV is connected to node GXQ.\nNode EJR is connected to node RTE.\nNode OQE is connected to nodes RTE, VPQ, BHU.\nNode GXG is connected to nodes GXQ, VPQ, BHU.\nNode BEB is connected to node GXQ.\nNode DPZ is connected to nodes EFE, VPQ, BHU.\nNode VYC is connected to node VPQ.\nNode OLC is connected to nodes GXQ, RTE, BHU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EFE: [DPZ],\nGXQ: [POV, GXG, BEB, OLC],\nRTE: [EJR, OQE, OLC],\nVPQ: [OQE, GXG, DPZ, VYC],\nBHU: [OQE, GXG, DPZ, OLC],\nPOV: [GXQ],\nEJR: [RTE],\nOQE: [RTE, VPQ, BHU],\nGXG: [GXQ, VPQ, BHU],\nBEB: [GXQ],\nDPZ: [EFE, VPQ, BHU],\nVYC: [VPQ],\nOLC: [GXQ, RTE, BHU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TXL is connected to nodes VZL, ADB, SCF.\nNode XMZ is connected to nodes PCE, HJP.\nNode CRN is connected to nodes QAV, SCF, HJP.\nNode RZQ is connected to nodes VZL, PCE, SCF.\nNode VZL is connected to nodes TXL, RZQ.\nNode ADB is connected to node TXL.\nNode PCE is connected to nodes XMZ, RZQ.\nNode QAV is connected to node CRN.\nNode SCF is connected to nodes TXL, CRN, RZQ.\nNode HJP is connected to nodes XMZ, CRN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TXL: [VZL, ADB, SCF],\nXMZ: [PCE, HJP],\nCRN: [QAV, SCF, HJP],\nRZQ: [VZL, PCE, SCF],\nVZL: [TXL, RZQ],\nADB: [TXL],\nPCE: [XMZ, RZQ],\nQAV: [CRN],\nSCF: [TXL, CRN, RZQ],\nHJP: [XMZ, CRN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ATK is connected to nodes UDZ, ILG.\nNode TOK is connected to nodes XKV, ILG, WHG.\nNode GEW is connected to node XKV.\nNode AFV is connected to node UDZ.\nNode SNK is connected to nodes CVF, TYA, USW.\nNode RYK is connected to nodes CVF, ILG, WHG.\nNode CVF is connected to nodes SNK, RYK.\nNode TYA is connected to node SNK.\nNode UDZ is connected to nodes ATK, AFV.\nNode XKV is connected to nodes TOK, GEW.\nNode ILG is connected to nodes ATK, TOK, RYK.\nNode WHG is connected to nodes TOK, RYK.\nNode USW is connected to node SNK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ATK: [UDZ, ILG],\nTOK: [XKV, ILG, WHG],\nGEW: [XKV],\nAFV: [UDZ],\nSNK: [CVF, TYA, USW],\nRYK: [CVF, ILG, WHG],\nCVF: [SNK, RYK],\nTYA: [SNK],\nUDZ: [ATK, AFV],\nXKV: [TOK, GEW],\nILG: [ATK, TOK, RYK],\nWHG: [TOK, RYK],\nUSW: [SNK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IWK is connected to nodes XNC, RMJ, VJV, MBI.\nNode MRH is connected to nodes RMJ, OFJ.\nNode XZI is connected to nodes RMJ, MBI, OFJ.\nNode XNC is connected to node IWK.\nNode RMJ is connected to nodes IWK, MRH, XZI.\nNode VJV is connected to node IWK.\nNode MBI is connected to nodes IWK, XZI.\nNode OFJ is connected to nodes MRH, XZI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IWK: [XNC, RMJ, VJV, MBI],\nMRH: [RMJ, OFJ],\nXZI: [RMJ, MBI, OFJ],\nXNC: [IWK],\nRMJ: [IWK, MRH, XZI],\nVJV: [IWK],\nMBI: [IWK, XZI],\nOFJ: [MRH, XZI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TLH is connected to nodes FBH, XQH, PWZ.\nNode KLV is connected to nodes URA, PWZ, LNO.\nNode LOR is connected to node URA.\nNode FBH is connected to node TLH.\nNode XQH is connected to node TLH.\nNode URA is connected to nodes KLV, LOR.\nNode PWZ is connected to nodes TLH, KLV.\nNode LNO is connected to node KLV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TLH: [FBH, XQH, PWZ],\nKLV: [URA, PWZ, LNO],\nLOR: [URA],\nFBH: [TLH],\nXQH: [TLH],\nURA: [KLV, LOR],\nPWZ: [TLH, KLV],\nLNO: [KLV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QJD is connected to nodes CGG, HDF, DYI.\nNode CTX is connected to nodes ENF, BEW, QFL, TFT.\nNode IMW is connected to nodes ENF, BEW, QFL, FJE, TFT, DYI.\nNode XMC is connected to node HDF.\nNode ENF is connected to nodes CTX, IMW.\nNode BEW is connected to nodes CTX, IMW.\nNode QFL is connected to nodes CTX, IMW.\nNode FJE is connected to node IMW.\nNode TFT is connected to nodes CTX, IMW.\nNode CGG is connected to node QJD.\nNode HDF is connected to nodes QJD, XMC.\nNode DYI is connected to nodes QJD, IMW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QJD: [CGG, HDF, DYI],\nCTX: [ENF, BEW, QFL, TFT],\nIMW: [ENF, BEW, QFL, FJE, TFT, DYI],\nXMC: [HDF],\nENF: [CTX, IMW],\nBEW: [CTX, IMW],\nQFL: [CTX, IMW],\nFJE: [IMW],\nTFT: [CTX, IMW],\nCGG: [QJD],\nHDF: [QJD, XMC],\nDYI: [QJD, IMW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CJQ is connected to nodes STP, HFQ, DCQ, EQL.\nNode ZTP is connected to nodes ZUR, HFQ, DCQ.\nNode FMZ is connected to nodes HFQ, EQL.\nNode HKE is connected to nodes STP, ZUR, VDK, HFQ, DCQ, EQL, MCY.\nNode STP is connected to nodes CJQ, HKE.\nNode ZUR is connected to nodes ZTP, HKE.\nNode VDK is connected to node HKE.\nNode HFQ is connected to nodes CJQ, ZTP, FMZ, HKE.\nNode DCQ is connected to nodes CJQ, ZTP, HKE.\nNode EQL is connected to nodes CJQ, FMZ, HKE.\nNode MCY is connected to node HKE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CJQ: [STP, HFQ, DCQ, EQL],\nZTP: [ZUR, HFQ, DCQ],\nFMZ: [HFQ, EQL],\nHKE: [STP, ZUR, VDK, HFQ, DCQ, EQL, MCY],\nSTP: [CJQ, HKE],\nZUR: [ZTP, HKE],\nVDK: [HKE],\nHFQ: [CJQ, ZTP, FMZ, HKE],\nDCQ: [CJQ, ZTP, HKE],\nEQL: [CJQ, FMZ, HKE],\nMCY: [HKE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OQG is connected to nodes KTK, WYQ.\nNode GMK is connected to nodes KOB, WYQ.\nNode TAB is connected to nodes HUQ, KTK, WYQ.\nNode NZU is connected to nodes HUQ, RNX, FKM, KTK, WYQ.\nNode HUQ is connected to nodes TAB, NZU.\nNode RNX is connected to node NZU.\nNode FKM is connected to node NZU.\nNode KOB is connected to node GMK.\nNode KTK is connected to nodes OQG, TAB, NZU.\nNode WYQ is connected to nodes OQG, GMK, TAB, NZU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OQG: [KTK, WYQ],\nGMK: [KOB, WYQ],\nTAB: [HUQ, KTK, WYQ],\nNZU: [HUQ, RNX, FKM, KTK, WYQ],\nHUQ: [TAB, NZU],\nRNX: [NZU],\nFKM: [NZU],\nKOB: [GMK],\nKTK: [OQG, TAB, NZU],\nWYQ: [OQG, GMK, TAB, NZU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UZJ is connected to nodes VMQ, CMV, UAS.\nNode EHD is connected to nodes VMQ, WZN.\nNode APX is connected to node VMQ.\nNode SVG is connected to nodes PEE, CJK.\nNode HMM is connected to nodes PEE, WZN, CJK.\nNode VMQ is connected to nodes UZJ, EHD, APX.\nNode CMV is connected to node UZJ.\nNode UAS is connected to node UZJ.\nNode PEE is connected to nodes SVG, HMM.\nNode WZN is connected to nodes EHD, HMM.\nNode CJK is connected to nodes SVG, HMM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UZJ: [VMQ, CMV, UAS],\nEHD: [VMQ, WZN],\nAPX: [VMQ],\nSVG: [PEE, CJK],\nHMM: [PEE, WZN, CJK],\nVMQ: [UZJ, EHD, APX],\nCMV: [UZJ],\nUAS: [UZJ],\nPEE: [SVG, HMM],\nWZN: [EHD, HMM],\nCJK: [SVG, HMM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LDM is connected to nodes UBM, NPZ, WCS.\nNode CSN is connected to nodes BRW, OYV, WCS.\nNode GWN is connected to nodes UBM, BRW, UQQ.\nNode AWT is connected to nodes NPZ, ZXQ, UQQ.\nNode SXD is connected to node BRW.\nNode UBM is connected to nodes LDM, GWN.\nNode NPZ is connected to nodes LDM, AWT.\nNode BRW is connected to nodes CSN, GWN, SXD.\nNode ZXQ is connected to node AWT.\nNode OYV is connected to node CSN.\nNode WCS is connected to nodes LDM, CSN.\nNode UQQ is connected to nodes GWN, AWT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LDM: [UBM, NPZ, WCS],\nCSN: [BRW, OYV, WCS],\nGWN: [UBM, BRW, UQQ],\nAWT: [NPZ, ZXQ, UQQ],\nSXD: [BRW],\nUBM: [LDM, GWN],\nNPZ: [LDM, AWT],\nBRW: [CSN, GWN, SXD],\nZXQ: [AWT],\nOYV: [CSN],\nWCS: [LDM, CSN],\nUQQ: [GWN, AWT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SGK is connected to node IDQ.\nNode DXQ is connected to nodes WYN, LHH, VWL, EAB, AWR.\nNode INU is connected to nodes RIL, XJN, EAB, AWR.\nNode YMQ is connected to nodes LHH, RIL, IDQ.\nNode LXB is connected to node EAB.\nNode WYN is connected to node DXQ.\nNode LHH is connected to nodes DXQ, YMQ.\nNode VWL is connected to node DXQ.\nNode RIL is connected to nodes INU, YMQ.\nNode XJN is connected to node INU.\nNode IDQ is connected to nodes SGK, YMQ.\nNode EAB is connected to nodes DXQ, INU, LXB.\nNode AWR is connected to nodes DXQ, INU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SGK: [IDQ],\nDXQ: [WYN, LHH, VWL, EAB, AWR],\nINU: [RIL, XJN, EAB, AWR],\nYMQ: [LHH, RIL, IDQ],\nLXB: [EAB],\nWYN: [DXQ],\nLHH: [DXQ, YMQ],\nVWL: [DXQ],\nRIL: [INU, YMQ],\nXJN: [INU],\nIDQ: [SGK, YMQ],\nEAB: [DXQ, INU, LXB],\nAWR: [DXQ, INU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AZR is connected to nodes ZMJ, YEG, BGW, LJU.\nNode DWH is connected to nodes ZMJ, YEG, DJA, BGW.\nNode HQL is connected to nodes YEG, BGW, XCF.\nNode WNF is connected to node YEG.\nNode ULJ is connected to nodes BGW, LJU.\nNode ZMJ is connected to nodes AZR, DWH.\nNode YEG is connected to nodes AZR, DWH, HQL, WNF.\nNode DJA is connected to node DWH.\nNode BGW is connected to nodes AZR, DWH, HQL, ULJ.\nNode XCF is connected to node HQL.\nNode LJU is connected to nodes AZR, ULJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AZR: [ZMJ, YEG, BGW, LJU],\nDWH: [ZMJ, YEG, DJA, BGW],\nHQL: [YEG, BGW, XCF],\nWNF: [YEG],\nULJ: [BGW, LJU],\nZMJ: [AZR, DWH],\nYEG: [AZR, DWH, HQL, WNF],\nDJA: [DWH],\nBGW: [AZR, DWH, HQL, ULJ],\nXCF: [HQL],\nLJU: [AZR, ULJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YFO is connected to nodes BCX, SWA, FGG.\nNode OKE is connected to node GZN.\nNode ZBU is connected to nodes GZN, GZO.\nNode QHI is connected to nodes RFQ, SWA, GZO, NTX.\nNode GZN is connected to nodes OKE, ZBU.\nNode BCX is connected to node YFO.\nNode RFQ is connected to node QHI.\nNode SWA is connected to nodes YFO, QHI.\nNode GZO is connected to nodes ZBU, QHI.\nNode NTX is connected to node QHI.\nNode FGG is connected to node YFO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YFO: [BCX, SWA, FGG],\nOKE: [GZN],\nZBU: [GZN, GZO],\nQHI: [RFQ, SWA, GZO, NTX],\nGZN: [OKE, ZBU],\nBCX: [YFO],\nRFQ: [QHI],\nSWA: [YFO, QHI],\nGZO: [ZBU, QHI],\nNTX: [QHI],\nFGG: [YFO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZEB is connected to nodes ZHJ, DFD, YEZ, CLY, IRH.\nNode AXJ is connected to nodes ZHJ, DFD, CLY, IRH.\nNode KPE is connected to nodes ROG, YEZ, PDP.\nNode KGE is connected to nodes DFD, YEZ, CLY.\nNode TDG is connected to nodes ROG, SPQ, YEZ, IRH.\nNode ZHJ is connected to nodes ZEB, AXJ.\nNode ROG is connected to nodes KPE, TDG.\nNode SPQ is connected to node TDG.\nNode DFD is connected to nodes ZEB, AXJ, KGE.\nNode YEZ is connected to nodes ZEB, KPE, KGE, TDG.\nNode CLY is connected to nodes ZEB, AXJ, KGE.\nNode PDP is connected to node KPE.\nNode IRH is connected to nodes ZEB, AXJ, TDG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZEB: [ZHJ, DFD, YEZ, CLY, IRH],\nAXJ: [ZHJ, DFD, CLY, IRH],\nKPE: [ROG, YEZ, PDP],\nKGE: [DFD, YEZ, CLY],\nTDG: [ROG, SPQ, YEZ, IRH],\nZHJ: [ZEB, AXJ],\nROG: [KPE, TDG],\nSPQ: [TDG],\nDFD: [ZEB, AXJ, KGE],\nYEZ: [ZEB, KPE, KGE, TDG],\nCLY: [ZEB, AXJ, KGE],\nPDP: [KPE],\nIRH: [ZEB, AXJ, TDG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HMC is connected to nodes QVT, KPY, GQN, YXF, QJN, KAH.\nNode OLD is connected to nodes QVT, KPY.\nNode WFE is connected to nodes JPN, KPY, IBV.\nNode RGJ is connected to nodes JPN, KAH, DJD.\nNode BGP is connected to nodes QJN, DJD.\nNode JPN is connected to nodes WFE, RGJ.\nNode QVT is connected to nodes HMC, OLD.\nNode KPY is connected to nodes HMC, OLD, WFE.\nNode GQN is connected to node HMC.\nNode YXF is connected to node HMC.\nNode QJN is connected to nodes HMC, BGP.\nNode IBV is connected to node WFE.\nNode KAH is connected to nodes HMC, RGJ.\nNode DJD is connected to nodes RGJ, BGP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HMC: [QVT, KPY, GQN, YXF, QJN, KAH],\nOLD: [QVT, KPY],\nWFE: [JPN, KPY, IBV],\nRGJ: [JPN, KAH, DJD],\nBGP: [QJN, DJD],\nJPN: [WFE, RGJ],\nQVT: [HMC, OLD],\nKPY: [HMC, OLD, WFE],\nGQN: [HMC],\nYXF: [HMC],\nQJN: [HMC, BGP],\nIBV: [WFE],\nKAH: [HMC, RGJ],\nDJD: [RGJ, BGP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YOG is connected to nodes ETE, OAS, GMV.\nNode YLS is connected to nodes FHY, TLY.\nNode GRT is connected to nodes TLY, VZU, ETE, OAS, QJO.\nNode WYH is connected to nodes MPH, VZU, JFD, NDB, OAS, NPX, QJO.\nNode FHY is connected to node YLS.\nNode MPH is connected to node WYH.\nNode TLY is connected to nodes YLS, GRT.\nNode VZU is connected to nodes GRT, WYH.\nNode ETE is connected to nodes YOG, GRT.\nNode JFD is connected to node WYH.\nNode NDB is connected to node WYH.\nNode OAS is connected to nodes YOG, GRT, WYH.\nNode GMV is connected to node YOG.\nNode NPX is connected to node WYH.\nNode QJO is connected to nodes GRT, WYH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YOG: [ETE, OAS, GMV],\nYLS: [FHY, TLY],\nGRT: [TLY, VZU, ETE, OAS, QJO],\nWYH: [MPH, VZU, JFD, NDB, OAS, NPX, QJO],\nFHY: [YLS],\nMPH: [WYH],\nTLY: [YLS, GRT],\nVZU: [GRT, WYH],\nETE: [YOG, GRT],\nJFD: [WYH],\nNDB: [WYH],\nOAS: [YOG, GRT, WYH],\nGMV: [YOG],\nNPX: [WYH],\nQJO: [GRT, WYH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PHC is connected to nodes RKB, QYC, IHY.\nNode AZZ is connected to nodes KVC, RKB, QYC, WQB, IHY.\nNode ANR is connected to nodes BNI, KVC, QYC, WQB.\nNode EEU is connected to nodes RKB, CZN, WQB, OXE, IHY, UZY, NPI.\nNode BNI is connected to node ANR.\nNode KVC is connected to nodes AZZ, ANR.\nNode RKB is connected to nodes PHC, AZZ, EEU.\nNode QYC is connected to nodes PHC, AZZ, ANR.\nNode CZN is connected to node EEU.\nNode WQB is connected to nodes AZZ, ANR, EEU.\nNode OXE is connected to node EEU.\nNode IHY is connected to nodes PHC, AZZ, EEU.\nNode UZY is connected to node EEU.\nNode NPI is connected to node EEU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PHC: [RKB, QYC, IHY],\nAZZ: [KVC, RKB, QYC, WQB, IHY],\nANR: [BNI, KVC, QYC, WQB],\nEEU: [RKB, CZN, WQB, OXE, IHY, UZY, NPI],\nBNI: [ANR],\nKVC: [AZZ, ANR],\nRKB: [PHC, AZZ, EEU],\nQYC: [PHC, AZZ, ANR],\nCZN: [EEU],\nWQB: [AZZ, ANR, EEU],\nOXE: [EEU],\nIHY: [PHC, AZZ, EEU],\nUZY: [EEU],\nNPI: [EEU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TXO is connected to nodes OAE, OSV, NXR.\nNode JPI is connected to nodes VUL, RPS, YFZ.\nNode EIO is connected to node YUG.\nNode DUM is connected to nodes VUL, OAE, XUP, OSV, YUG.\nNode IJB is connected to nodes VUL, XUP, YFZ, YUG, NXR.\nNode QII is connected to nodes RPS, OAE, XUP, OSV, YUG.\nNode VUL is connected to nodes JPI, DUM, IJB.\nNode RPS is connected to nodes JPI, QII.\nNode OAE is connected to nodes TXO, DUM, QII.\nNode XUP is connected to nodes DUM, IJB, QII.\nNode OSV is connected to nodes TXO, DUM, QII.\nNode YFZ is connected to nodes JPI, IJB.\nNode YUG is connected to nodes EIO, DUM, IJB, QII.\nNode NXR is connected to nodes TXO, IJB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TXO: [OAE, OSV, NXR],\nJPI: [VUL, RPS, YFZ],\nEIO: [YUG],\nDUM: [VUL, OAE, XUP, OSV, YUG],\nIJB: [VUL, XUP, YFZ, YUG, NXR],\nQII: [RPS, OAE, XUP, OSV, YUG],\nVUL: [JPI, DUM, IJB],\nRPS: [JPI, QII],\nOAE: [TXO, DUM, QII],\nXUP: [DUM, IJB, QII],\nOSV: [TXO, DUM, QII],\nYFZ: [JPI, IJB],\nYUG: [EIO, DUM, IJB, QII],\nNXR: [TXO, IJB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LTI is connected to nodes SIF, DUU, TNB, XRX, CBM, SHA.\nNode ASW is connected to nodes TGF, SHA.\nNode VRQ is connected to nodes SIF, DUU.\nNode BVR is connected to nodes DUU, BPI, CBM, SHA.\nNode FAA is connected to nodes SIF, TNB, SHA.\nNode LGU is connected to nodes SIF, TNB, BIJ, CBM.\nNode SIF is connected to nodes LTI, VRQ, FAA, LGU.\nNode DUU is connected to nodes LTI, VRQ, BVR.\nNode TNB is connected to nodes LTI, FAA, LGU.\nNode BIJ is connected to node LGU.\nNode XRX is connected to node LTI.\nNode BPI is connected to node BVR.\nNode TGF is connected to node ASW.\nNode CBM is connected to nodes LTI, BVR, LGU.\nNode SHA is connected to nodes LTI, ASW, BVR, FAA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LTI: [SIF, DUU, TNB, XRX, CBM, SHA],\nASW: [TGF, SHA],\nVRQ: [SIF, DUU],\nBVR: [DUU, BPI, CBM, SHA],\nFAA: [SIF, TNB, SHA],\nLGU: [SIF, TNB, BIJ, CBM],\nSIF: [LTI, VRQ, FAA, LGU],\nDUU: [LTI, VRQ, BVR],\nTNB: [LTI, FAA, LGU],\nBIJ: [LGU],\nXRX: [LTI],\nBPI: [BVR],\nTGF: [ASW],\nCBM: [LTI, BVR, LGU],\nSHA: [LTI, ASW, BVR, FAA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OTL is connected to nodes LHF, VII, SZP, JKN.\nNode LQG is connected to node GPO.\nNode MYZ is connected to nodes YVL, MLT.\nNode ADZ is connected to nodes QHX, UGJ, JKN.\nNode EDW is connected to nodes YVL, QHX, VII, MLT, SZP, UGJ.\nNode VBH is connected to nodes VII, GPO.\nNode LHF is connected to node OTL.\nNode YVL is connected to nodes MYZ, EDW.\nNode QHX is connected to nodes ADZ, EDW.\nNode VII is connected to nodes OTL, EDW, VBH.\nNode MLT is connected to nodes MYZ, EDW.\nNode GPO is connected to nodes LQG, VBH.\nNode SZP is connected to nodes OTL, EDW.\nNode UGJ is connected to nodes ADZ, EDW.\nNode JKN is connected to nodes OTL, ADZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OTL: [LHF, VII, SZP, JKN],\nLQG: [GPO],\nMYZ: [YVL, MLT],\nADZ: [QHX, UGJ, JKN],\nEDW: [YVL, QHX, VII, MLT, SZP, UGJ],\nVBH: [VII, GPO],\nLHF: [OTL],\nYVL: [MYZ, EDW],\nQHX: [ADZ, EDW],\nVII: [OTL, EDW, VBH],\nMLT: [MYZ, EDW],\nGPO: [LQG, VBH],\nSZP: [OTL, EDW],\nUGJ: [ADZ, EDW],\nJKN: [OTL, ADZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GWN is connected to nodes OTA, JPO, VIL, QQW, SSX.\nNode CZM is connected to nodes NFQ, OSI.\nNode UUL is connected to nodes TVD, JPO, SSX.\nNode ACV is connected to nodes TVD, DZC, OTA, NFQ, SSX.\nNode TVD is connected to nodes UUL, ACV.\nNode DZC is connected to node ACV.\nNode OTA is connected to nodes GWN, ACV.\nNode JPO is connected to nodes GWN, UUL.\nNode VIL is connected to node GWN.\nNode QQW is connected to node GWN.\nNode NFQ is connected to nodes CZM, ACV.\nNode SSX is connected to nodes GWN, UUL, ACV.\nNode OSI is connected to node CZM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GWN: [OTA, JPO, VIL, QQW, SSX],\nCZM: [NFQ, OSI],\nUUL: [TVD, JPO, SSX],\nACV: [TVD, DZC, OTA, NFQ, SSX],\nTVD: [UUL, ACV],\nDZC: [ACV],\nOTA: [GWN, ACV],\nJPO: [GWN, UUL],\nVIL: [GWN],\nQQW: [GWN],\nNFQ: [CZM, ACV],\nSSX: [GWN, UUL, ACV],\nOSI: [CZM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UCA is connected to nodes MSM, ZJM.\nNode CSO is connected to node UEK.\nNode NBV is connected to nodes WDG, VCG, LCT, VIA, ZJM, UEK.\nNode QCT is connected to nodes VCG, LCT, ZGQ.\nNode LSM is connected to nodes VIA, MSM.\nNode HWQ is connected to nodes LCT, VIA, MSM, LYQ.\nNode WDG is connected to node NBV.\nNode VCG is connected to nodes NBV, QCT.\nNode LCT is connected to nodes NBV, QCT, HWQ.\nNode VIA is connected to nodes NBV, LSM, HWQ.\nNode MSM is connected to nodes UCA, LSM, HWQ.\nNode ZGQ is connected to node QCT.\nNode ZJM is connected to nodes UCA, NBV.\nNode LYQ is connected to node HWQ.\nNode UEK is connected to nodes CSO, NBV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UCA: [MSM, ZJM],\nCSO: [UEK],\nNBV: [WDG, VCG, LCT, VIA, ZJM, UEK],\nQCT: [VCG, LCT, ZGQ],\nLSM: [VIA, MSM],\nHWQ: [LCT, VIA, MSM, LYQ],\nWDG: [NBV],\nVCG: [NBV, QCT],\nLCT: [NBV, QCT, HWQ],\nVIA: [NBV, LSM, HWQ],\nMSM: [UCA, LSM, HWQ],\nZGQ: [QCT],\nZJM: [UCA, NBV],\nLYQ: [HWQ],\nUEK: [CSO, NBV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RFY is connected to nodes EEZ, VXJ, SNP, JYD, RXA.\nNode PRN is connected to nodes SNP, MYC, JYD, RXA, GPB.\nNode CHC is connected to nodes LUF, MYC, VSR, RXA, GPB.\nNode DAQ is connected to nodes LUF, EEZ, MYC, VSR.\nNode AFA is connected to nodes MYC, GPB.\nNode PLV is connected to nodes EEZ, VXJ, MYC, RXA.\nNode LUF is connected to nodes CHC, DAQ.\nNode EEZ is connected to nodes RFY, DAQ, PLV.\nNode VXJ is connected to nodes RFY, PLV.\nNode SNP is connected to nodes RFY, PRN.\nNode MYC is connected to nodes PRN, CHC, DAQ, AFA, PLV.\nNode JYD is connected to nodes RFY, PRN.\nNode VSR is connected to nodes CHC, DAQ.\nNode RXA is connected to nodes RFY, PRN, CHC, PLV.\nNode GPB is connected to nodes PRN, CHC, AFA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RFY: [EEZ, VXJ, SNP, JYD, RXA],\nPRN: [SNP, MYC, JYD, RXA, GPB],\nCHC: [LUF, MYC, VSR, RXA, GPB],\nDAQ: [LUF, EEZ, MYC, VSR],\nAFA: [MYC, GPB],\nPLV: [EEZ, VXJ, MYC, RXA],\nLUF: [CHC, DAQ],\nEEZ: [RFY, DAQ, PLV],\nVXJ: [RFY, PLV],\nSNP: [RFY, PRN],\nMYC: [PRN, CHC, DAQ, AFA, PLV],\nJYD: [RFY, PRN],\nVSR: [CHC, DAQ],\nRXA: [RFY, PRN, CHC, PLV],\nGPB: [PRN, CHC, AFA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JVH is connected to nodes VLN, KCZ, JQB.\nNode NSD is connected to nodes NLB, JQB, EIK.\nNode QQI is connected to node KCZ.\nNode VLN is connected to node JVH.\nNode KCZ is connected to nodes JVH, QQI.\nNode NLB is connected to node NSD.\nNode JQB is connected to nodes JVH, NSD.\nNode EIK is connected to node NSD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JVH: [VLN, KCZ, JQB],\nNSD: [NLB, JQB, EIK],\nQQI: [KCZ],\nVLN: [JVH],\nKCZ: [JVH, QQI],\nNLB: [NSD],\nJQB: [JVH, NSD],\nEIK: [NSD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XRA is connected to node UVQ.\nNode LHN is connected to nodes UEI, CSW.\nNode OXB is connected to nodes HZE, UVQ, FSU.\nNode TXG is connected to nodes UEI, HZE.\nNode UEI is connected to nodes LHN, TXG.\nNode CSW is connected to node LHN.\nNode HZE is connected to nodes OXB, TXG.\nNode UVQ is connected to nodes XRA, OXB.\nNode FSU is connected to node OXB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XRA: [UVQ],\nLHN: [UEI, CSW],\nOXB: [HZE, UVQ, FSU],\nTXG: [UEI, HZE],\nUEI: [LHN, TXG],\nCSW: [LHN],\nHZE: [OXB, TXG],\nUVQ: [XRA, OXB],\nFSU: [OXB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KTY is connected to nodes AHI, LHX, BKI, NHE.\nNode SFS is connected to nodes AHI, GKT, LHX.\nNode CVO is connected to nodes PTM, GKT, BKI, NBX, NHE.\nNode AHI is connected to nodes KTY, SFS.\nNode PTM is connected to node CVO.\nNode GKT is connected to nodes SFS, CVO.\nNode LHX is connected to nodes KTY, SFS.\nNode BKI is connected to nodes KTY, CVO.\nNode NBX is connected to node CVO.\nNode NHE is connected to nodes KTY, CVO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KTY: [AHI, LHX, BKI, NHE],\nSFS: [AHI, GKT, LHX],\nCVO: [PTM, GKT, BKI, NBX, NHE],\nAHI: [KTY, SFS],\nPTM: [CVO],\nGKT: [SFS, CVO],\nLHX: [KTY, SFS],\nBKI: [KTY, CVO],\nNBX: [CVO],\nNHE: [KTY, CVO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OKG is connected to nodes TSM, BXX, ORR, TYA.\nNode YXE is connected to nodes TSM, ORR, TYA, YNI.\nNode FQQ is connected to nodes TSM, TYA, NBX.\nNode REC is connected to nodes TSM, BXX, YNI, VZL, NBX.\nNode MYF is connected to nodes TSM, TYA, YNI, VZL.\nNode TSM is connected to nodes OKG, YXE, FQQ, REC, MYF.\nNode BXX is connected to nodes OKG, REC.\nNode ORR is connected to nodes OKG, YXE.\nNode TYA is connected to nodes OKG, YXE, FQQ, MYF.\nNode YNI is connected to nodes YXE, REC, MYF.\nNode VZL is connected to nodes REC, MYF.\nNode NBX is connected to nodes FQQ, REC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OKG: [TSM, BXX, ORR, TYA],\nYXE: [TSM, ORR, TYA, YNI],\nFQQ: [TSM, TYA, NBX],\nREC: [TSM, BXX, YNI, VZL, NBX],\nMYF: [TSM, TYA, YNI, VZL],\nTSM: [OKG, YXE, FQQ, REC, MYF],\nBXX: [OKG, REC],\nORR: [OKG, YXE],\nTYA: [OKG, YXE, FQQ, MYF],\nYNI: [YXE, REC, MYF],\nVZL: [REC, MYF],\nNBX: [FQQ, REC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OEH is connected to nodes KVI, JMG, XWO.\nNode DVV is connected to nodes NTB, FKD, NJG, FVN.\nNode UMC is connected to nodes FKD, AAI, AMY.\nNode WVK is connected to nodes GGJ, JMG, YEC, NJG.\nNode NTB is connected to node DVV.\nNode FKD is connected to nodes DVV, UMC.\nNode AAI is connected to node UMC.\nNode KVI is connected to node OEH.\nNode AMY is connected to node UMC.\nNode GGJ is connected to node WVK.\nNode JMG is connected to nodes OEH, WVK.\nNode YEC is connected to node WVK.\nNode XWO is connected to node OEH.\nNode NJG is connected to nodes DVV, WVK.\nNode FVN is connected to node DVV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OEH: [KVI, JMG, XWO],\nDVV: [NTB, FKD, NJG, FVN],\nUMC: [FKD, AAI, AMY],\nWVK: [GGJ, JMG, YEC, NJG],\nNTB: [DVV],\nFKD: [DVV, UMC],\nAAI: [UMC],\nKVI: [OEH],\nAMY: [UMC],\nGGJ: [WVK],\nJMG: [OEH, WVK],\nYEC: [WVK],\nXWO: [OEH],\nNJG: [DVV, WVK],\nFVN: [DVV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ERI is connected to nodes OVS, ZXY, COJ, HGF.\nNode TZR is connected to node COJ.\nNode LTG is connected to node HUP.\nNode DTF is connected to nodes YBQ, PWA, ZXY, HGF.\nNode HHF is connected to nodes WLC, HUP, HGF.\nNode YBQ is connected to node DTF.\nNode OVS is connected to node ERI.\nNode WLC is connected to node HHF.\nNode PWA is connected to node DTF.\nNode HUP is connected to nodes LTG, HHF.\nNode ZXY is connected to nodes ERI, DTF.\nNode COJ is connected to nodes ERI, TZR.\nNode HGF is connected to nodes ERI, DTF, HHF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ERI: [OVS, ZXY, COJ, HGF],\nTZR: [COJ],\nLTG: [HUP],\nDTF: [YBQ, PWA, ZXY, HGF],\nHHF: [WLC, HUP, HGF],\nYBQ: [DTF],\nOVS: [ERI],\nWLC: [HHF],\nPWA: [DTF],\nHUP: [LTG, HHF],\nZXY: [ERI, DTF],\nCOJ: [ERI, TZR],\nHGF: [ERI, DTF, HHF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GVL is connected to nodes UYX, DSW, VEL, UQV.\nNode HHD is connected to nodes UQV, SWD.\nNode ZTY is connected to nodes YBD, DSW, UQV.\nNode ZCN is connected to node ZKQ.\nNode BMM is connected to nodes YBD, XCY, DSW, ZKQ, SWD.\nNode QRH is connected to nodes YBD, XCY, DSW.\nNode YBD is connected to nodes ZTY, BMM, QRH.\nNode XCY is connected to nodes BMM, QRH.\nNode UYX is connected to node GVL.\nNode DSW is connected to nodes GVL, ZTY, BMM, QRH.\nNode VEL is connected to node GVL.\nNode UQV is connected to nodes GVL, HHD, ZTY.\nNode ZKQ is connected to nodes ZCN, BMM.\nNode SWD is connected to nodes HHD, BMM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GVL: [UYX, DSW, VEL, UQV],\nHHD: [UQV, SWD],\nZTY: [YBD, DSW, UQV],\nZCN: [ZKQ],\nBMM: [YBD, XCY, DSW, ZKQ, SWD],\nQRH: [YBD, XCY, DSW],\nYBD: [ZTY, BMM, QRH],\nXCY: [BMM, QRH],\nUYX: [GVL],\nDSW: [GVL, ZTY, BMM, QRH],\nVEL: [GVL],\nUQV: [GVL, HHD, ZTY],\nZKQ: [ZCN, BMM],\nSWD: [HHD, BMM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BRE is connected to nodes KUQ, RCV.\nNode SZA is connected to nodes KPW, KUQ, RCV.\nNode CEI is connected to node RCV.\nNode SBB is connected to nodes WXJ, MCS, RCV, DWY.\nNode SDT is connected to nodes JMF, MCS.\nNode KPW is connected to node SZA.\nNode WXJ is connected to node SBB.\nNode JMF is connected to node SDT.\nNode KUQ is connected to nodes BRE, SZA.\nNode MCS is connected to nodes SBB, SDT.\nNode RCV is connected to nodes BRE, SZA, CEI, SBB.\nNode DWY is connected to node SBB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BRE: [KUQ, RCV],\nSZA: [KPW, KUQ, RCV],\nCEI: [RCV],\nSBB: [WXJ, MCS, RCV, DWY],\nSDT: [JMF, MCS],\nKPW: [SZA],\nWXJ: [SBB],\nJMF: [SDT],\nKUQ: [BRE, SZA],\nMCS: [SBB, SDT],\nRCV: [BRE, SZA, CEI, SBB],\nDWY: [SBB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BHC is connected to nodes LVO, HUT, ZCY, LXT, YXI, RRW.\nNode CCE is connected to nodes LVO, HUT.\nNode NNH is connected to nodes LVO, EJV.\nNode PJV is connected to nodes LVO, HUT, RRW, EJV.\nNode BWR is connected to nodes LXT, YXI, EJV.\nNode LVO is connected to nodes BHC, CCE, NNH, PJV.\nNode HUT is connected to nodes BHC, CCE, PJV.\nNode ZCY is connected to node BHC.\nNode LXT is connected to nodes BHC, BWR.\nNode YXI is connected to nodes BHC, BWR.\nNode RRW is connected to nodes BHC, PJV.\nNode EJV is connected to nodes NNH, PJV, BWR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BHC: [LVO, HUT, ZCY, LXT, YXI, RRW],\nCCE: [LVO, HUT],\nNNH: [LVO, EJV],\nPJV: [LVO, HUT, RRW, EJV],\nBWR: [LXT, YXI, EJV],\nLVO: [BHC, CCE, NNH, PJV],\nHUT: [BHC, CCE, PJV],\nZCY: [BHC],\nLXT: [BHC, BWR],\nYXI: [BHC, BWR],\nRRW: [BHC, PJV],\nEJV: [NNH, PJV, BWR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZEI is connected to nodes SDF, LVF.\nNode VRB is connected to nodes ZTH, LVK, SDF.\nNode STN is connected to nodes GAJ, OTF, DKD, KHV, JYZ.\nNode ANP is connected to nodes ZTH, GAJ, ZZR.\nNode TXW is connected to nodes ZTH, LVF, DKD.\nNode ZTH is connected to nodes VRB, ANP, TXW.\nNode LVK is connected to node VRB.\nNode GAJ is connected to nodes STN, ANP.\nNode OTF is connected to node STN.\nNode SDF is connected to nodes ZEI, VRB.\nNode ZZR is connected to node ANP.\nNode LVF is connected to nodes ZEI, TXW.\nNode DKD is connected to nodes STN, TXW.\nNode KHV is connected to node STN.\nNode JYZ is connected to node STN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZEI: [SDF, LVF],\nVRB: [ZTH, LVK, SDF],\nSTN: [GAJ, OTF, DKD, KHV, JYZ],\nANP: [ZTH, GAJ, ZZR],\nTXW: [ZTH, LVF, DKD],\nZTH: [VRB, ANP, TXW],\nLVK: [VRB],\nGAJ: [STN, ANP],\nOTF: [STN],\nSDF: [ZEI, VRB],\nZZR: [ANP],\nLVF: [ZEI, TXW],\nDKD: [STN, TXW],\nKHV: [STN],\nJYZ: [STN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LFZ is connected to nodes OXU, VEW.\nNode MIL is connected to nodes FOA, OXU, SPL.\nNode LLG is connected to nodes OXU, VEW.\nNode GAD is connected to nodes SID, FOA, RPI, SPL, VEW.\nNode SID is connected to node GAD.\nNode FOA is connected to nodes MIL, GAD.\nNode RPI is connected to node GAD.\nNode OXU is connected to nodes LFZ, MIL, LLG.\nNode SPL is connected to nodes MIL, GAD.\nNode VEW is connected to nodes LFZ, LLG, GAD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LFZ: [OXU, VEW],\nMIL: [FOA, OXU, SPL],\nLLG: [OXU, VEW],\nGAD: [SID, FOA, RPI, SPL, VEW],\nSID: [GAD],\nFOA: [MIL, GAD],\nRPI: [GAD],\nOXU: [LFZ, MIL, LLG],\nSPL: [MIL, GAD],\nVEW: [LFZ, LLG, GAD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DCC is connected to nodes HIY, MDY.\nNode UCB is connected to nodes HIY, OJR.\nNode QNP is connected to nodes HIY, VZF, OJR.\nNode LUE is connected to nodes IAF, OJR.\nNode HIY is connected to nodes DCC, UCB, QNP.\nNode VZF is connected to node QNP.\nNode MDY is connected to node DCC.\nNode IAF is connected to node LUE.\nNode OJR is connected to nodes UCB, QNP, LUE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DCC: [HIY, MDY],\nUCB: [HIY, OJR],\nQNP: [HIY, VZF, OJR],\nLUE: [IAF, OJR],\nHIY: [DCC, UCB, QNP],\nVZF: [QNP],\nMDY: [DCC],\nIAF: [LUE],\nOJR: [UCB, QNP, LUE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DJG is connected to nodes OCZ, QCB, FTZ, GJT, SMJ, EVW.\nNode AIW is connected to node QCB.\nNode ZED is connected to node OCZ.\nNode OCZ is connected to nodes DJG, ZED.\nNode QCB is connected to nodes DJG, AIW.\nNode FTZ is connected to node DJG.\nNode GJT is connected to node DJG.\nNode SMJ is connected to node DJG.\nNode EVW is connected to node DJG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DJG: [OCZ, QCB, FTZ, GJT, SMJ, EVW],\nAIW: [QCB],\nZED: [OCZ],\nOCZ: [DJG, ZED],\nQCB: [DJG, AIW],\nFTZ: [DJG],\nGJT: [DJG],\nSMJ: [DJG],\nEVW: [DJG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CCD is connected to nodes EGO, ZMR, TPE.\nNode EUB is connected to nodes TUE, GPB.\nNode YHR is connected to nodes EGO, ISV, GPB.\nNode FNV is connected to nodes ZMR, TPE, TUE.\nNode EGO is connected to nodes CCD, YHR.\nNode ZMR is connected to nodes CCD, FNV.\nNode ISV is connected to node YHR.\nNode TPE is connected to nodes CCD, FNV.\nNode TUE is connected to nodes EUB, FNV.\nNode GPB is connected to nodes EUB, YHR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CCD: [EGO, ZMR, TPE],\nEUB: [TUE, GPB],\nYHR: [EGO, ISV, GPB],\nFNV: [ZMR, TPE, TUE],\nEGO: [CCD, YHR],\nZMR: [CCD, FNV],\nISV: [YHR],\nTPE: [CCD, FNV],\nTUE: [EUB, FNV],\nGPB: [EUB, YHR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AIU is connected to nodes MDN, TFB.\nNode KMT is connected to nodes KNU, MDN.\nNode WGP is connected to nodes KNU, MDN, TFB, YMA.\nNode DQB is connected to nodes UUL, KNU.\nNode UUL is connected to node DQB.\nNode KNU is connected to nodes KMT, WGP, DQB.\nNode MDN is connected to nodes AIU, KMT, WGP.\nNode TFB is connected to nodes AIU, WGP.\nNode YMA is connected to node WGP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AIU: [MDN, TFB],\nKMT: [KNU, MDN],\nWGP: [KNU, MDN, TFB, YMA],\nDQB: [UUL, KNU],\nUUL: [DQB],\nKNU: [KMT, WGP, DQB],\nMDN: [AIU, KMT, WGP],\nTFB: [AIU, WGP],\nYMA: [WGP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BGB is connected to nodes FJX, WWV, FIP.\nNode AAD is connected to node PUY.\nNode UCB is connected to nodes PUY, FJX, DJV, WWV.\nNode ERN is connected to nodes OFT, DJV, FIP.\nNode AOP is connected to nodes BKF, FJX, WWV, NMP.\nNode BKF is connected to node AOP.\nNode PUY is connected to nodes AAD, UCB.\nNode FJX is connected to nodes BGB, UCB, AOP.\nNode OFT is connected to node ERN.\nNode DJV is connected to nodes UCB, ERN.\nNode WWV is connected to nodes BGB, UCB, AOP.\nNode NMP is connected to node AOP.\nNode FIP is connected to nodes BGB, ERN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BGB: [FJX, WWV, FIP],\nAAD: [PUY],\nUCB: [PUY, FJX, DJV, WWV],\nERN: [OFT, DJV, FIP],\nAOP: [BKF, FJX, WWV, NMP],\nBKF: [AOP],\nPUY: [AAD, UCB],\nFJX: [BGB, UCB, AOP],\nOFT: [ERN],\nDJV: [UCB, ERN],\nWWV: [BGB, UCB, AOP],\nNMP: [AOP],\nFIP: [BGB, ERN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KQU is connected to nodes SFJ, VTE, RKC, ULH.\nNode AQJ is connected to nodes QGG, VTE, ULH.\nNode VRW is connected to nodes SFJ, VPR, VTE, GUE, RKC.\nNode SFJ is connected to nodes KQU, VRW.\nNode QGG is connected to node AQJ.\nNode VPR is connected to node VRW.\nNode VTE is connected to nodes KQU, AQJ, VRW.\nNode GUE is connected to node VRW.\nNode RKC is connected to nodes KQU, VRW.\nNode ULH is connected to nodes KQU, AQJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KQU: [SFJ, VTE, RKC, ULH],\nAQJ: [QGG, VTE, ULH],\nVRW: [SFJ, VPR, VTE, GUE, RKC],\nSFJ: [KQU, VRW],\nQGG: [AQJ],\nVPR: [VRW],\nVTE: [KQU, AQJ, VRW],\nGUE: [VRW],\nRKC: [KQU, VRW],\nULH: [KQU, AQJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BAV is connected to nodes LUQ, PJK.\nNode QXG is connected to nodes QBS, IQK, WBM.\nNode REB is connected to nodes QBS, TBW.\nNode TCH is connected to nodes QBS, LUQ, WBM.\nNode QBS is connected to nodes QXG, REB, TCH.\nNode LUQ is connected to nodes BAV, TCH.\nNode IQK is connected to node QXG.\nNode WBM is connected to nodes QXG, TCH.\nNode TBW is connected to node REB.\nNode PJK is connected to node BAV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BAV: [LUQ, PJK],\nQXG: [QBS, IQK, WBM],\nREB: [QBS, TBW],\nTCH: [QBS, LUQ, WBM],\nQBS: [QXG, REB, TCH],\nLUQ: [BAV, TCH],\nIQK: [QXG],\nWBM: [QXG, TCH],\nTBW: [REB],\nPJK: [BAV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PLV is connected to nodes RBQ, JOE, CMS, NAM.\nNode DCR is connected to nodes YRK, UTR, ZST.\nNode ODI is connected to nodes YRK, HHN, CMS.\nNode JVX is connected to nodes DKL, YRK, UTR.\nNode RBQ is connected to node PLV.\nNode DKL is connected to node JVX.\nNode YRK is connected to nodes DCR, ODI, JVX.\nNode JOE is connected to node PLV.\nNode HHN is connected to node ODI.\nNode UTR is connected to nodes DCR, JVX.\nNode ZST is connected to node DCR.\nNode CMS is connected to nodes PLV, ODI.\nNode NAM is connected to node PLV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PLV: [RBQ, JOE, CMS, NAM],\nDCR: [YRK, UTR, ZST],\nODI: [YRK, HHN, CMS],\nJVX: [DKL, YRK, UTR],\nRBQ: [PLV],\nDKL: [JVX],\nYRK: [DCR, ODI, JVX],\nJOE: [PLV],\nHHN: [ODI],\nUTR: [DCR, JVX],\nZST: [DCR],\nCMS: [PLV, ODI],\nNAM: [PLV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DRY is connected to nodes IMY, UFN, UXE.\nNode IYU is connected to nodes IMY, CWJ, WGA, GBL, RZK.\nNode FPP is connected to nodes IMY, CWJ, UXE, RZK.\nNode IMY is connected to nodes DRY, IYU, FPP.\nNode CWJ is connected to nodes IYU, FPP.\nNode UFN is connected to node DRY.\nNode WGA is connected to node IYU.\nNode UXE is connected to nodes DRY, FPP.\nNode GBL is connected to node IYU.\nNode RZK is connected to nodes IYU, FPP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DRY: [IMY, UFN, UXE],\nIYU: [IMY, CWJ, WGA, GBL, RZK],\nFPP: [IMY, CWJ, UXE, RZK],\nIMY: [DRY, IYU, FPP],\nCWJ: [IYU, FPP],\nUFN: [DRY],\nWGA: [IYU],\nUXE: [DRY, FPP],\nGBL: [IYU],\nRZK: [IYU, FPP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UXI is connected to nodes JJD, HEE.\nNode SMY is connected to nodes JJD, GVG.\nNode GCZ is connected to nodes JJD, CCI, GVG, QUM.\nNode HLL is connected to node GVG.\nNode MHO is connected to nodes JJD, GVG, TGP.\nNode JJD is connected to nodes UXI, SMY, GCZ, MHO.\nNode CCI is connected to node GCZ.\nNode GVG is connected to nodes SMY, GCZ, HLL, MHO.\nNode QUM is connected to node GCZ.\nNode HEE is connected to node UXI.\nNode TGP is connected to node MHO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UXI: [JJD, HEE],\nSMY: [JJD, GVG],\nGCZ: [JJD, CCI, GVG, QUM],\nHLL: [GVG],\nMHO: [JJD, GVG, TGP],\nJJD: [UXI, SMY, GCZ, MHO],\nCCI: [GCZ],\nGVG: [SMY, GCZ, HLL, MHO],\nQUM: [GCZ],\nHEE: [UXI],\nTGP: [MHO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VBY is connected to nodes BAT, JXZ, BQN, IJC, ITD.\nNode CMN is connected to nodes FTG, BAT, RIE, SJR.\nNode SCO is connected to nodes FTG, BAT, JXZ, BQN, RIE.\nNode HSN is connected to nodes FTG, JTX.\nNode FTG is connected to nodes CMN, SCO, HSN.\nNode BAT is connected to nodes VBY, CMN, SCO.\nNode JXZ is connected to nodes VBY, SCO.\nNode BQN is connected to nodes VBY, SCO.\nNode IJC is connected to node VBY.\nNode RIE is connected to nodes CMN, SCO.\nNode SJR is connected to node CMN.\nNode JTX is connected to node HSN.\nNode ITD is connected to node VBY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VBY: [BAT, JXZ, BQN, IJC, ITD],\nCMN: [FTG, BAT, RIE, SJR],\nSCO: [FTG, BAT, JXZ, BQN, RIE],\nHSN: [FTG, JTX],\nFTG: [CMN, SCO, HSN],\nBAT: [VBY, CMN, SCO],\nJXZ: [VBY, SCO],\nBQN: [VBY, SCO],\nIJC: [VBY],\nRIE: [CMN, SCO],\nSJR: [CMN],\nJTX: [HSN],\nITD: [VBY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LYS is connected to nodes WYR, IUT.\nNode LPA is connected to nodes QHS, WYR, FIM.\nNode JYJ is connected to nodes QHS, AXI, FNA.\nNode FUE is connected to node AXI.\nNode LWI is connected to nodes AXI, WYR, FNA, PKS.\nNode MJF is connected to node IUT.\nNode QHS is connected to nodes LPA, JYJ.\nNode AXI is connected to nodes JYJ, FUE, LWI.\nNode WYR is connected to nodes LYS, LPA, LWI.\nNode IUT is connected to nodes LYS, MJF.\nNode FNA is connected to nodes JYJ, LWI.\nNode FIM is connected to node LPA.\nNode PKS is connected to node LWI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LYS: [WYR, IUT],\nLPA: [QHS, WYR, FIM],\nJYJ: [QHS, AXI, FNA],\nFUE: [AXI],\nLWI: [AXI, WYR, FNA, PKS],\nMJF: [IUT],\nQHS: [LPA, JYJ],\nAXI: [JYJ, FUE, LWI],\nWYR: [LYS, LPA, LWI],\nIUT: [LYS, MJF],\nFNA: [JYJ, LWI],\nFIM: [LPA],\nPKS: [LWI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GBK is connected to nodes KIQ, CAY, JKG, HPT, OJO, YFV, NRW.\nNode KWG is connected to nodes KIQ, CAY, JKG, OJO.\nNode UPX is connected to nodes LNA, OJO, EJL.\nNode TUY is connected to nodes JKG, LNA, OJO.\nNode KIQ is connected to nodes GBK, KWG.\nNode CAY is connected to nodes GBK, KWG.\nNode JKG is connected to nodes GBK, KWG, TUY.\nNode HPT is connected to node GBK.\nNode LNA is connected to nodes UPX, TUY.\nNode OJO is connected to nodes GBK, KWG, UPX, TUY.\nNode EJL is connected to node UPX.\nNode YFV is connected to node GBK.\nNode NRW is connected to node GBK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GBK: [KIQ, CAY, JKG, HPT, OJO, YFV, NRW],\nKWG: [KIQ, CAY, JKG, OJO],\nUPX: [LNA, OJO, EJL],\nTUY: [JKG, LNA, OJO],\nKIQ: [GBK, KWG],\nCAY: [GBK, KWG],\nJKG: [GBK, KWG, TUY],\nHPT: [GBK],\nLNA: [UPX, TUY],\nOJO: [GBK, KWG, UPX, TUY],\nEJL: [UPX],\nYFV: [GBK],\nNRW: [GBK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZQX is connected to nodes EQE, JYL.\nNode TNC is connected to nodes HIO, JYL, TAV.\nNode EDQ is connected to nodes EQE, HIO, CQD.\nNode FPE is connected to nodes EQE, FAI, TAV.\nNode EQE is connected to nodes ZQX, EDQ, FPE.\nNode HIO is connected to nodes TNC, EDQ.\nNode CQD is connected to node EDQ.\nNode JYL is connected to nodes ZQX, TNC.\nNode FAI is connected to node FPE.\nNode TAV is connected to nodes TNC, FPE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZQX: [EQE, JYL],\nTNC: [HIO, JYL, TAV],\nEDQ: [EQE, HIO, CQD],\nFPE: [EQE, FAI, TAV],\nEQE: [ZQX, EDQ, FPE],\nHIO: [TNC, EDQ],\nCQD: [EDQ],\nJYL: [ZQX, TNC],\nFAI: [FPE],\nTAV: [TNC, FPE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GEC is connected to node VZX.\nNode XZE is connected to nodes VZX, RYZ, FIY.\nNode GKI is connected to nodes IDO, VZX, RYZ, DJC.\nNode TSR is connected to nodes FNC, IDO, FIY.\nNode FNC is connected to node TSR.\nNode IDO is connected to nodes GKI, TSR.\nNode VZX is connected to nodes GEC, XZE, GKI.\nNode RYZ is connected to nodes XZE, GKI.\nNode DJC is connected to node GKI.\nNode FIY is connected to nodes XZE, TSR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GEC: [VZX],\nXZE: [VZX, RYZ, FIY],\nGKI: [IDO, VZX, RYZ, DJC],\nTSR: [FNC, IDO, FIY],\nFNC: [TSR],\nIDO: [GKI, TSR],\nVZX: [GEC, XZE, GKI],\nRYZ: [XZE, GKI],\nDJC: [GKI],\nFIY: [XZE, TSR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EDL is connected to nodes TBT, QIX, YOZ, TZT, OWC.\nNode TLI is connected to nodes TBT, ZVY, CNW.\nNode WNH is connected to nodes TBT, ZVY, QIX, CNW.\nNode OUY is connected to nodes TZT, OWC, AUX.\nNode XNR is connected to nodes ZVY, QIX, VDQ, TZT, OWC.\nNode TBT is connected to nodes EDL, TLI, WNH.\nNode ZVY is connected to nodes TLI, WNH, XNR.\nNode QIX is connected to nodes EDL, WNH, XNR.\nNode VDQ is connected to node XNR.\nNode CNW is connected to nodes TLI, WNH.\nNode YOZ is connected to node EDL.\nNode TZT is connected to nodes EDL, OUY, XNR.\nNode OWC is connected to nodes EDL, OUY, XNR.\nNode AUX is connected to node OUY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EDL: [TBT, QIX, YOZ, TZT, OWC],\nTLI: [TBT, ZVY, CNW],\nWNH: [TBT, ZVY, QIX, CNW],\nOUY: [TZT, OWC, AUX],\nXNR: [ZVY, QIX, VDQ, TZT, OWC],\nTBT: [EDL, TLI, WNH],\nZVY: [TLI, WNH, XNR],\nQIX: [EDL, WNH, XNR],\nVDQ: [XNR],\nCNW: [TLI, WNH],\nYOZ: [EDL],\nTZT: [EDL, OUY, XNR],\nOWC: [EDL, OUY, XNR],\nAUX: [OUY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YKH is connected to node TBJ.\nNode OIA is connected to nodes OLI, QKU.\nNode OVK is connected to nodes OLI, VWK, NVT, KOP, TBJ.\nNode OLI is connected to nodes OIA, OVK.\nNode VWK is connected to node OVK.\nNode NVT is connected to node OVK.\nNode KOP is connected to node OVK.\nNode TBJ is connected to nodes YKH, OVK.\nNode QKU is connected to node OIA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YKH: [TBJ],\nOIA: [OLI, QKU],\nOVK: [OLI, VWK, NVT, KOP, TBJ],\nOLI: [OIA, OVK],\nVWK: [OVK],\nNVT: [OVK],\nKOP: [OVK],\nTBJ: [YKH, OVK],\nQKU: [OIA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZCV is connected to node CGF.\nNode CKM is connected to nodes LUL, XMP, AXA, XKW.\nNode IWX is connected to nodes LUL, CGF, BSZ, AXA, CIL, CQO.\nNode NUE is connected to nodes BSZ, XMP, XKW, CIL, ZOA, HUJ.\nNode LUL is connected to nodes CKM, IWX.\nNode CGF is connected to nodes ZCV, IWX.\nNode BSZ is connected to nodes IWX, NUE.\nNode XMP is connected to nodes CKM, NUE.\nNode AXA is connected to nodes CKM, IWX.\nNode XKW is connected to nodes CKM, NUE.\nNode CIL is connected to nodes IWX, NUE.\nNode ZOA is connected to node NUE.\nNode CQO is connected to node IWX.\nNode HUJ is connected to node NUE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZCV: [CGF],\nCKM: [LUL, XMP, AXA, XKW],\nIWX: [LUL, CGF, BSZ, AXA, CIL, CQO],\nNUE: [BSZ, XMP, XKW, CIL, ZOA, HUJ],\nLUL: [CKM, IWX],\nCGF: [ZCV, IWX],\nBSZ: [IWX, NUE],\nXMP: [CKM, NUE],\nAXA: [CKM, IWX],\nXKW: [CKM, NUE],\nCIL: [IWX, NUE],\nZOA: [NUE],\nCQO: [IWX],\nHUJ: [NUE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RUV is connected to nodes AVQ, DGN, GKF.\nNode FHM is connected to nodes IKU, AVQ, DGN.\nNode GYA is connected to node IKU.\nNode UNQ is connected to nodes AVQ, DGN, WTL.\nNode IKU is connected to nodes FHM, GYA.\nNode AVQ is connected to nodes RUV, FHM, UNQ.\nNode DGN is connected to nodes RUV, FHM, UNQ.\nNode GKF is connected to node RUV.\nNode WTL is connected to node UNQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RUV: [AVQ, DGN, GKF],\nFHM: [IKU, AVQ, DGN],\nGYA: [IKU],\nUNQ: [AVQ, DGN, WTL],\nIKU: [FHM, GYA],\nAVQ: [RUV, FHM, UNQ],\nDGN: [RUV, FHM, UNQ],\nGKF: [RUV],\nWTL: [UNQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ADS is connected to nodes TDW, HZH, BEA, QRL.\nNode SLD is connected to nodes TDW, BEA, IDO, JBN, JTN.\nNode PKZ is connected to nodes WLZ, HZH, YSW, IDO, ZSW, RPD.\nNode KNE is connected to nodes WLZ, YSW, IDO, QRL, JBN.\nNode WLZ is connected to nodes PKZ, KNE.\nNode TDW is connected to nodes ADS, SLD.\nNode HZH is connected to nodes ADS, PKZ.\nNode YSW is connected to nodes PKZ, KNE.\nNode BEA is connected to nodes ADS, SLD.\nNode IDO is connected to nodes SLD, PKZ, KNE.\nNode ZSW is connected to node PKZ.\nNode RPD is connected to node PKZ.\nNode QRL is connected to nodes ADS, KNE.\nNode JBN is connected to nodes SLD, KNE.\nNode JTN is connected to node SLD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ADS: [TDW, HZH, BEA, QRL],\nSLD: [TDW, BEA, IDO, JBN, JTN],\nPKZ: [WLZ, HZH, YSW, IDO, ZSW, RPD],\nKNE: [WLZ, YSW, IDO, QRL, JBN],\nWLZ: [PKZ, KNE],\nTDW: [ADS, SLD],\nHZH: [ADS, PKZ],\nYSW: [PKZ, KNE],\nBEA: [ADS, SLD],\nIDO: [SLD, PKZ, KNE],\nZSW: [PKZ],\nRPD: [PKZ],\nQRL: [ADS, KNE],\nJBN: [SLD, KNE],\nJTN: [SLD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SYS is connected to node TGI.\nNode UMD is connected to nodes BJK, LBV, LWM.\nNode KYC is connected to nodes IAM, TGI, LBV, HQY.\nNode BJK is connected to node UMD.\nNode IAM is connected to node KYC.\nNode TGI is connected to nodes SYS, KYC.\nNode LBV is connected to nodes UMD, KYC.\nNode HQY is connected to node KYC.\nNode LWM is connected to node UMD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SYS: [TGI],\nUMD: [BJK, LBV, LWM],\nKYC: [IAM, TGI, LBV, HQY],\nBJK: [UMD],\nIAM: [KYC],\nTGI: [SYS, KYC],\nLBV: [UMD, KYC],\nHQY: [KYC],\nLWM: [UMD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SPB is connected to nodes UPF, QZN.\nNode DHC is connected to nodes YBC, RIZ, UPF.\nNode FWW is connected to nodes EYP, UWJ.\nNode IPO is connected to nodes UPF, UWJ, QZN.\nNode ERN is connected to nodes THR, EYP, RIZ, RCL, VVE, UWJ.\nNode XGA is connected to nodes THR, EYP, YBC, RIZ, VVE, QZN.\nNode THR is connected to nodes ERN, XGA.\nNode EYP is connected to nodes FWW, ERN, XGA.\nNode YBC is connected to nodes DHC, XGA.\nNode RIZ is connected to nodes DHC, ERN, XGA.\nNode RCL is connected to node ERN.\nNode UPF is connected to nodes SPB, DHC, IPO.\nNode VVE is connected to nodes ERN, XGA.\nNode UWJ is connected to nodes FWW, IPO, ERN.\nNode QZN is connected to nodes SPB, IPO, XGA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SPB: [UPF, QZN],\nDHC: [YBC, RIZ, UPF],\nFWW: [EYP, UWJ],\nIPO: [UPF, UWJ, QZN],\nERN: [THR, EYP, RIZ, RCL, VVE, UWJ],\nXGA: [THR, EYP, YBC, RIZ, VVE, QZN],\nTHR: [ERN, XGA],\nEYP: [FWW, ERN, XGA],\nYBC: [DHC, XGA],\nRIZ: [DHC, ERN, XGA],\nRCL: [ERN],\nUPF: [SPB, DHC, IPO],\nVVE: [ERN, XGA],\nUWJ: [FWW, IPO, ERN],\nQZN: [SPB, IPO, XGA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TVZ is connected to nodes KOM, BIH.\nNode QBS is connected to nodes GOZ, KOM, WCU, ULO.\nNode PMC is connected to node BIH.\nNode KDY is connected to nodes KOM, ZXD, WCU, ULO.\nNode GOZ is connected to node QBS.\nNode KOM is connected to nodes TVZ, QBS, KDY.\nNode ZXD is connected to node KDY.\nNode BIH is connected to nodes TVZ, PMC.\nNode WCU is connected to nodes QBS, KDY.\nNode ULO is connected to nodes QBS, KDY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TVZ: [KOM, BIH],\nQBS: [GOZ, KOM, WCU, ULO],\nPMC: [BIH],\nKDY: [KOM, ZXD, WCU, ULO],\nGOZ: [QBS],\nKOM: [TVZ, QBS, KDY],\nZXD: [KDY],\nBIH: [TVZ, PMC],\nWCU: [QBS, KDY],\nULO: [QBS, KDY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TOE is connected to nodes EEQ, STG, ADE, CGJ.\nNode KEF is connected to nodes LSW, CGJ.\nNode GAG is connected to node EEQ.\nNode EEQ is connected to nodes TOE, GAG.\nNode STG is connected to node TOE.\nNode LSW is connected to node KEF.\nNode ADE is connected to node TOE.\nNode CGJ is connected to nodes TOE, KEF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TOE: [EEQ, STG, ADE, CGJ],\nKEF: [LSW, CGJ],\nGAG: [EEQ],\nEEQ: [TOE, GAG],\nSTG: [TOE],\nLSW: [KEF],\nADE: [TOE],\nCGJ: [TOE, KEF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TBU is connected to node SPG.\nNode QHL is connected to nodes PNR, HTK, SPG, ZBM.\nNode DDM is connected to node SPG.\nNode ZID is connected to nodes INM, PNR, OJG, SPG.\nNode INM is connected to node ZID.\nNode PNR is connected to nodes QHL, ZID.\nNode OJG is connected to node ZID.\nNode HTK is connected to node QHL.\nNode SPG is connected to nodes TBU, QHL, DDM, ZID.\nNode ZBM is connected to node QHL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TBU: [SPG],\nQHL: [PNR, HTK, SPG, ZBM],\nDDM: [SPG],\nZID: [INM, PNR, OJG, SPG],\nINM: [ZID],\nPNR: [QHL, ZID],\nOJG: [ZID],\nHTK: [QHL],\nSPG: [TBU, QHL, DDM, ZID],\nZBM: [QHL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PQT is connected to nodes NAG, HUU.\nNode WZJ is connected to nodes SXF, MFX.\nNode RGV is connected to nodes AZW, NAG, MFX, HUU.\nNode AZW is connected to node RGV.\nNode SXF is connected to node WZJ.\nNode NAG is connected to nodes PQT, RGV.\nNode MFX is connected to nodes WZJ, RGV.\nNode HUU is connected to nodes PQT, RGV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PQT: [NAG, HUU],\nWZJ: [SXF, MFX],\nRGV: [AZW, NAG, MFX, HUU],\nAZW: [RGV],\nSXF: [WZJ],\nNAG: [PQT, RGV],\nMFX: [WZJ, RGV],\nHUU: [PQT, RGV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SSC is connected to nodes USC, MDE.\nNode HYZ is connected to nodes QOX, VWD, FGW, ZSH, USC, MDE.\nNode QOX is connected to node HYZ.\nNode VWD is connected to node HYZ.\nNode FGW is connected to node HYZ.\nNode ZSH is connected to node HYZ.\nNode USC is connected to nodes SSC, HYZ.\nNode MDE is connected to nodes SSC, HYZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SSC: [USC, MDE],\nHYZ: [QOX, VWD, FGW, ZSH, USC, MDE],\nQOX: [HYZ],\nVWD: [HYZ],\nFGW: [HYZ],\nZSH: [HYZ],\nUSC: [SSC, HYZ],\nMDE: [SSC, HYZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DVS is connected to node DNF.\nNode ITN is connected to nodes DNF, VEE, YWU.\nNode AZL is connected to nodes QVF, DNF, EVW.\nNode QVF is connected to node AZL.\nNode DNF is connected to nodes DVS, ITN, AZL.\nNode VEE is connected to node ITN.\nNode YWU is connected to node ITN.\nNode EVW is connected to node AZL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DVS: [DNF],\nITN: [DNF, VEE, YWU],\nAZL: [QVF, DNF, EVW],\nQVF: [AZL],\nDNF: [DVS, ITN, AZL],\nVEE: [ITN],\nYWU: [ITN],\nEVW: [AZL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PSU is connected to nodes XOO, DEU.\nNode BOW is connected to node KJV.\nNode UDL is connected to nodes FWL, VYX, SYJ.\nNode HDO is connected to nodes DEU, QEH, VYX.\nNode WQC is connected to node XOO.\nNode TPA is connected to nodes DEU, LSP.\nNode DTZ is connected to nodes KJV, DEU, QEH, VYX.\nNode KJV is connected to nodes BOW, DTZ.\nNode XOO is connected to nodes PSU, WQC.\nNode DEU is connected to nodes PSU, HDO, TPA, DTZ.\nNode LSP is connected to node TPA.\nNode FWL is connected to node UDL.\nNode QEH is connected to nodes HDO, DTZ.\nNode VYX is connected to nodes UDL, HDO, DTZ.\nNode SYJ is connected to node UDL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PSU: [XOO, DEU],\nBOW: [KJV],\nUDL: [FWL, VYX, SYJ],\nHDO: [DEU, QEH, VYX],\nWQC: [XOO],\nTPA: [DEU, LSP],\nDTZ: [KJV, DEU, QEH, VYX],\nKJV: [BOW, DTZ],\nXOO: [PSU, WQC],\nDEU: [PSU, HDO, TPA, DTZ],\nLSP: [TPA],\nFWL: [UDL],\nQEH: [HDO, DTZ],\nVYX: [UDL, HDO, DTZ],\nSYJ: [UDL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DCC is connected to nodes GYI, TAW.\nNode KDX is connected to nodes XBR, TAW.\nNode VAF is connected to nodes VDK, ZIQ, MXG.\nNode FPS is connected to nodes XBR, MXG.\nNode UNJ is connected to nodes VDK, XBR, SDC, ZIQ, MXG.\nNode GYI is connected to node DCC.\nNode VDK is connected to nodes VAF, UNJ.\nNode XBR is connected to nodes KDX, FPS, UNJ.\nNode SDC is connected to node UNJ.\nNode ZIQ is connected to nodes VAF, UNJ.\nNode TAW is connected to nodes DCC, KDX.\nNode MXG is connected to nodes VAF, FPS, UNJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DCC: [GYI, TAW],\nKDX: [XBR, TAW],\nVAF: [VDK, ZIQ, MXG],\nFPS: [XBR, MXG],\nUNJ: [VDK, XBR, SDC, ZIQ, MXG],\nGYI: [DCC],\nVDK: [VAF, UNJ],\nXBR: [KDX, FPS, UNJ],\nSDC: [UNJ],\nZIQ: [VAF, UNJ],\nTAW: [DCC, KDX],\nMXG: [VAF, FPS, UNJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VGO is connected to nodes SHN, PHQ, JJS, VWC.\nNode AXT is connected to node VTJ.\nNode RVD is connected to nodes SHN, VTJ, ZMW.\nNode SHN is connected to nodes VGO, RVD.\nNode VTJ is connected to nodes AXT, RVD.\nNode PHQ is connected to node VGO.\nNode JJS is connected to node VGO.\nNode VWC is connected to node VGO.\nNode ZMW is connected to node RVD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VGO: [SHN, PHQ, JJS, VWC],\nAXT: [VTJ],\nRVD: [SHN, VTJ, ZMW],\nSHN: [VGO, RVD],\nVTJ: [AXT, RVD],\nPHQ: [VGO],\nJJS: [VGO],\nVWC: [VGO],\nZMW: [RVD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PHC is connected to nodes BTE, FFD, TOM.\nNode JTM is connected to nodes QAP, TOM.\nNode RVF is connected to nodes BTE, TOM.\nNode CSZ is connected to nodes BTE, UPO, TOM.\nNode BTE is connected to nodes PHC, RVF, CSZ.\nNode FFD is connected to node PHC.\nNode UPO is connected to node CSZ.\nNode QAP is connected to node JTM.\nNode TOM is connected to nodes PHC, JTM, RVF, CSZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PHC: [BTE, FFD, TOM],\nJTM: [QAP, TOM],\nRVF: [BTE, TOM],\nCSZ: [BTE, UPO, TOM],\nBTE: [PHC, RVF, CSZ],\nFFD: [PHC],\nUPO: [CSZ],\nQAP: [JTM],\nTOM: [PHC, JTM, RVF, CSZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WDY is connected to nodes URR, IJC, GLD.\nNode ERP is connected to nodes FSE, DUB.\nNode ESY is connected to nodes URR, SXQ, NEE, FSE, DUB, GLD.\nNode CVL is connected to nodes SXQ, FSE.\nNode LGB is connected to nodes IJC, ONK, FSE, DBW.\nNode XEE is connected to nodes NEE, DUB.\nNode URR is connected to nodes WDY, ESY.\nNode SXQ is connected to nodes ESY, CVL.\nNode NEE is connected to nodes ESY, XEE.\nNode IJC is connected to nodes WDY, LGB.\nNode ONK is connected to node LGB.\nNode FSE is connected to nodes ERP, ESY, CVL, LGB.\nNode DUB is connected to nodes ERP, ESY, XEE.\nNode DBW is connected to node LGB.\nNode GLD is connected to nodes WDY, ESY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WDY: [URR, IJC, GLD],\nERP: [FSE, DUB],\nESY: [URR, SXQ, NEE, FSE, DUB, GLD],\nCVL: [SXQ, FSE],\nLGB: [IJC, ONK, FSE, DBW],\nXEE: [NEE, DUB],\nURR: [WDY, ESY],\nSXQ: [ESY, CVL],\nNEE: [ESY, XEE],\nIJC: [WDY, LGB],\nONK: [LGB],\nFSE: [ERP, ESY, CVL, LGB],\nDUB: [ERP, ESY, XEE],\nDBW: [LGB],\nGLD: [WDY, ESY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PNZ is connected to nodes HGE, ORV, RHM.\nNode KPI is connected to nodes VTE, WWI.\nNode MXJ is connected to nodes FSY, ORV.\nNode CWQ is connected to nodes DRN, FSY, HGE.\nNode XYD is connected to nodes VTE, FSY, HGE, RHM.\nNode DRN is connected to node CWQ.\nNode VTE is connected to nodes KPI, XYD.\nNode FSY is connected to nodes MXJ, CWQ, XYD.\nNode HGE is connected to nodes PNZ, CWQ, XYD.\nNode ORV is connected to nodes PNZ, MXJ.\nNode RHM is connected to nodes PNZ, XYD.\nNode WWI is connected to node KPI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PNZ: [HGE, ORV, RHM],\nKPI: [VTE, WWI],\nMXJ: [FSY, ORV],\nCWQ: [DRN, FSY, HGE],\nXYD: [VTE, FSY, HGE, RHM],\nDRN: [CWQ],\nVTE: [KPI, XYD],\nFSY: [MXJ, CWQ, XYD],\nHGE: [PNZ, CWQ, XYD],\nORV: [PNZ, MXJ],\nRHM: [PNZ, XYD],\nWWI: [KPI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AVO is connected to nodes IZW, ZID, HNL, LTW, BUC.\nNode XXY is connected to nodes BUO, PFF.\nNode ZOV is connected to nodes IZW, ZID, PFF.\nNode IZW is connected to nodes AVO, ZOV.\nNode ZID is connected to nodes AVO, ZOV.\nNode HNL is connected to node AVO.\nNode LTW is connected to node AVO.\nNode BUO is connected to node XXY.\nNode PFF is connected to nodes XXY, ZOV.\nNode BUC is connected to node AVO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AVO: [IZW, ZID, HNL, LTW, BUC],\nXXY: [BUO, PFF],\nZOV: [IZW, ZID, PFF],\nIZW: [AVO, ZOV],\nZID: [AVO, ZOV],\nHNL: [AVO],\nLTW: [AVO],\nBUO: [XXY],\nPFF: [XXY, ZOV],\nBUC: [AVO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NNM is connected to nodes IWG, DUH, RMW, XCV, ODX.\nNode DZB is connected to nodes RTG, UGK.\nNode FBH is connected to nodes IWG, UGK, RMW, GRU.\nNode WUI is connected to nodes IWG, DUH, GRU.\nNode QEE is connected to node DUH.\nNode PIJ is connected to nodes RMW, OWM.\nNode RTG is connected to node DZB.\nNode IWG is connected to nodes NNM, FBH, WUI.\nNode DUH is connected to nodes NNM, WUI, QEE.\nNode UGK is connected to nodes DZB, FBH.\nNode RMW is connected to nodes NNM, FBH, PIJ.\nNode OWM is connected to node PIJ.\nNode GRU is connected to nodes FBH, WUI.\nNode XCV is connected to node NNM.\nNode ODX is connected to node NNM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NNM: [IWG, DUH, RMW, XCV, ODX],\nDZB: [RTG, UGK],\nFBH: [IWG, UGK, RMW, GRU],\nWUI: [IWG, DUH, GRU],\nQEE: [DUH],\nPIJ: [RMW, OWM],\nRTG: [DZB],\nIWG: [NNM, FBH, WUI],\nDUH: [NNM, WUI, QEE],\nUGK: [DZB, FBH],\nRMW: [NNM, FBH, PIJ],\nOWM: [PIJ],\nGRU: [FBH, WUI],\nXCV: [NNM],\nODX: [NNM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MLC is connected to nodes SDO, LFV, FSM.\nNode CWF is connected to node LFV.\nNode EXC is connected to nodes BFK, NAS, FSM.\nNode SDO is connected to node MLC.\nNode LFV is connected to nodes MLC, CWF.\nNode BFK is connected to node EXC.\nNode NAS is connected to node EXC.\nNode FSM is connected to nodes MLC, EXC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MLC: [SDO, LFV, FSM],\nCWF: [LFV],\nEXC: [BFK, NAS, FSM],\nSDO: [MLC],\nLFV: [MLC, CWF],\nBFK: [EXC],\nNAS: [EXC],\nFSM: [MLC, EXC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YAB is connected to nodes ABI, ZOE, YAO, PKF.\nNode NRT is connected to nodes YON, FXG, YAO, WME.\nNode GVB is connected to nodes ABI, ZOE, YAO, PKF.\nNode RZR is connected to nodes FXG, ZOE, YAO.\nNode XWQ is connected to nodes FXG, ABI, PKF, WME.\nNode YON is connected to node NRT.\nNode FXG is connected to nodes NRT, RZR, XWQ.\nNode ABI is connected to nodes YAB, GVB, XWQ.\nNode ZOE is connected to nodes YAB, GVB, RZR.\nNode YAO is connected to nodes YAB, NRT, GVB, RZR.\nNode PKF is connected to nodes YAB, GVB, XWQ.\nNode WME is connected to nodes NRT, XWQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YAB: [ABI, ZOE, YAO, PKF],\nNRT: [YON, FXG, YAO, WME],\nGVB: [ABI, ZOE, YAO, PKF],\nRZR: [FXG, ZOE, YAO],\nXWQ: [FXG, ABI, PKF, WME],\nYON: [NRT],\nFXG: [NRT, RZR, XWQ],\nABI: [YAB, GVB, XWQ],\nZOE: [YAB, GVB, RZR],\nYAO: [YAB, NRT, GVB, RZR],\nPKF: [YAB, GVB, XWQ],\nWME: [NRT, XWQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RJY is connected to nodes EVS, MJH, TXA.\nNode IGF is connected to nodes EVS, MJH.\nNode ERZ is connected to nodes XXZ, CXL, HOK.\nNode FTK is connected to nodes CXL, MJH, TXA.\nNode GHA is connected to node MJH.\nNode ZVT is connected to nodes HOK, NUX.\nNode XXZ is connected to node ERZ.\nNode CXL is connected to nodes ERZ, FTK.\nNode EVS is connected to nodes RJY, IGF.\nNode HOK is connected to nodes ERZ, ZVT.\nNode MJH is connected to nodes RJY, IGF, FTK, GHA.\nNode NUX is connected to node ZVT.\nNode TXA is connected to nodes RJY, FTK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RJY: [EVS, MJH, TXA],\nIGF: [EVS, MJH],\nERZ: [XXZ, CXL, HOK],\nFTK: [CXL, MJH, TXA],\nGHA: [MJH],\nZVT: [HOK, NUX],\nXXZ: [ERZ],\nCXL: [ERZ, FTK],\nEVS: [RJY, IGF],\nHOK: [ERZ, ZVT],\nMJH: [RJY, IGF, FTK, GHA],\nNUX: [ZVT],\nTXA: [RJY, FTK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UNB is connected to nodes RDK, ERU, FKQ.\nNode WLP is connected to nodes TYS, FKQ.\nNode ONC is connected to nodes DKE, ESZ.\nNode KHT is connected to node FKQ.\nNode ZTT is connected to nodes RDK, ESZ, SFW.\nNode KFU is connected to node ERU.\nNode DKE is connected to node ONC.\nNode TYS is connected to node WLP.\nNode RDK is connected to nodes UNB, ZTT.\nNode ESZ is connected to nodes ONC, ZTT.\nNode SFW is connected to node ZTT.\nNode ERU is connected to nodes UNB, KFU.\nNode FKQ is connected to nodes UNB, WLP, KHT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UNB: [RDK, ERU, FKQ],\nWLP: [TYS, FKQ],\nONC: [DKE, ESZ],\nKHT: [FKQ],\nZTT: [RDK, ESZ, SFW],\nKFU: [ERU],\nDKE: [ONC],\nTYS: [WLP],\nRDK: [UNB, ZTT],\nESZ: [ONC, ZTT],\nSFW: [ZTT],\nERU: [UNB, KFU],\nFKQ: [UNB, WLP, KHT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XHA is connected to nodes WTI, PAP, UJF, PUQ.\nNode NNW is connected to nodes PAP, UJF, PUQ.\nNode UOC is connected to nodes UJF, IYG.\nNode XKH is connected to node UJF.\nNode WTI is connected to node XHA.\nNode PAP is connected to nodes XHA, NNW.\nNode UJF is connected to nodes XHA, NNW, UOC, XKH.\nNode PUQ is connected to nodes XHA, NNW.\nNode IYG is connected to node UOC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XHA: [WTI, PAP, UJF, PUQ],\nNNW: [PAP, UJF, PUQ],\nUOC: [UJF, IYG],\nXKH: [UJF],\nWTI: [XHA],\nPAP: [XHA, NNW],\nUJF: [XHA, NNW, UOC, XKH],\nPUQ: [XHA, NNW],\nIYG: [UOC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FCV is connected to nodes AGM, EIH, CBD.\nNode PZR is connected to nodes GNQ, EIH.\nNode FXM is connected to nodes AGM, EIH, CBD, IJW.\nNode GNQ is connected to node PZR.\nNode AGM is connected to nodes FCV, FXM.\nNode EIH is connected to nodes FCV, PZR, FXM.\nNode CBD is connected to nodes FCV, FXM.\nNode IJW is connected to node FXM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FCV: [AGM, EIH, CBD],\nPZR: [GNQ, EIH],\nFXM: [AGM, EIH, CBD, IJW],\nGNQ: [PZR],\nAGM: [FCV, FXM],\nEIH: [FCV, PZR, FXM],\nCBD: [FCV, FXM],\nIJW: [FXM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IOW is connected to nodes ROV, SAY.\nNode VVX is connected to nodes BPX, SAY, EYB, AWU.\nNode QLO is connected to nodes ROV, EYB, ODU, ZBY.\nNode BPX is connected to node VVX.\nNode ROV is connected to nodes IOW, QLO.\nNode SAY is connected to nodes IOW, VVX.\nNode EYB is connected to nodes VVX, QLO.\nNode AWU is connected to node VVX.\nNode ODU is connected to node QLO.\nNode ZBY is connected to node QLO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IOW: [ROV, SAY],\nVVX: [BPX, SAY, EYB, AWU],\nQLO: [ROV, EYB, ODU, ZBY],\nBPX: [VVX],\nROV: [IOW, QLO],\nSAY: [IOW, VVX],\nEYB: [VVX, QLO],\nAWU: [VVX],\nODU: [QLO],\nZBY: [QLO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PHM is connected to nodes OTZ, KLK, PCW.\nNode IYU is connected to nodes OTZ, FIK, YBG.\nNode FKA is connected to nodes YNS, BFM, YBG, KLK, PCW, SKX.\nNode EPB is connected to nodes OTZ, FIK, YNS, BFM, YBG, PCW, SKX.\nNode WGR is connected to nodes DEW, OTZ, FIK, KLK, IGZ.\nNode DEW is connected to node WGR.\nNode OTZ is connected to nodes PHM, IYU, EPB, WGR.\nNode FIK is connected to nodes IYU, EPB, WGR.\nNode YNS is connected to nodes FKA, EPB.\nNode BFM is connected to nodes FKA, EPB.\nNode YBG is connected to nodes IYU, FKA, EPB.\nNode KLK is connected to nodes PHM, FKA, WGR.\nNode PCW is connected to nodes PHM, FKA, EPB.\nNode SKX is connected to nodes FKA, EPB.\nNode IGZ is connected to node WGR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PHM: [OTZ, KLK, PCW],\nIYU: [OTZ, FIK, YBG],\nFKA: [YNS, BFM, YBG, KLK, PCW, SKX],\nEPB: [OTZ, FIK, YNS, BFM, YBG, PCW, SKX],\nWGR: [DEW, OTZ, FIK, KLK, IGZ],\nDEW: [WGR],\nOTZ: [PHM, IYU, EPB, WGR],\nFIK: [IYU, EPB, WGR],\nYNS: [FKA, EPB],\nBFM: [FKA, EPB],\nYBG: [IYU, FKA, EPB],\nKLK: [PHM, FKA, WGR],\nPCW: [PHM, FKA, EPB],\nSKX: [FKA, EPB],\nIGZ: [WGR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TPS is connected to nodes PUC, XFX, TIF, PGY, BTD.\nNode IOK is connected to nodes HPS, NVL, TIF, KYV.\nNode DAS is connected to nodes NVL, TIF, PGY, PIX, YMB.\nNode FTB is connected to nodes NVL, TIF, PGY, PIX, YMB.\nNode IVX is connected to node KYV.\nNode HPS is connected to node IOK.\nNode PUC is connected to node TPS.\nNode NVL is connected to nodes IOK, DAS, FTB.\nNode XFX is connected to node TPS.\nNode TIF is connected to nodes TPS, IOK, DAS, FTB.\nNode KYV is connected to nodes IOK, IVX.\nNode PGY is connected to nodes TPS, DAS, FTB.\nNode BTD is connected to node TPS.\nNode PIX is connected to nodes DAS, FTB.\nNode YMB is connected to nodes DAS, FTB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TPS: [PUC, XFX, TIF, PGY, BTD],\nIOK: [HPS, NVL, TIF, KYV],\nDAS: [NVL, TIF, PGY, PIX, YMB],\nFTB: [NVL, TIF, PGY, PIX, YMB],\nIVX: [KYV],\nHPS: [IOK],\nPUC: [TPS],\nNVL: [IOK, DAS, FTB],\nXFX: [TPS],\nTIF: [TPS, IOK, DAS, FTB],\nKYV: [IOK, IVX],\nPGY: [TPS, DAS, FTB],\nBTD: [TPS],\nPIX: [DAS, FTB],\nYMB: [DAS, FTB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SXX is connected to nodes MQM, XKB.\nNode TQE is connected to nodes IUX, HIC, HDL, NQX.\nNode ASI is connected to nodes MQM, IUX, HIC, XKB.\nNode SXE is connected to nodes MQM, HIC.\nNode DBL is connected to nodes HIC, FDF, NQX.\nNode MQM is connected to nodes SXX, ASI, SXE.\nNode IUX is connected to nodes TQE, ASI.\nNode HIC is connected to nodes TQE, ASI, SXE, DBL.\nNode HDL is connected to node TQE.\nNode FDF is connected to node DBL.\nNode NQX is connected to nodes TQE, DBL.\nNode XKB is connected to nodes SXX, ASI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SXX: [MQM, XKB],\nTQE: [IUX, HIC, HDL, NQX],\nASI: [MQM, IUX, HIC, XKB],\nSXE: [MQM, HIC],\nDBL: [HIC, FDF, NQX],\nMQM: [SXX, ASI, SXE],\nIUX: [TQE, ASI],\nHIC: [TQE, ASI, SXE, DBL],\nHDL: [TQE],\nFDF: [DBL],\nNQX: [TQE, DBL],\nXKB: [SXX, ASI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CSN is connected to nodes AWR, BBB, ABG.\nNode OCY is connected to nodes XBC, OTF, QUD.\nNode ZVF is connected to nodes OTF, QUD, ABG.\nNode GMO is connected to nodes OTF, ABG.\nNode BEZ is connected to nodes BBB, ABG.\nNode XBC is connected to node OCY.\nNode OTF is connected to nodes OCY, ZVF, GMO.\nNode QUD is connected to nodes OCY, ZVF.\nNode AWR is connected to node CSN.\nNode BBB is connected to nodes CSN, BEZ.\nNode ABG is connected to nodes CSN, ZVF, GMO, BEZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CSN: [AWR, BBB, ABG],\nOCY: [XBC, OTF, QUD],\nZVF: [OTF, QUD, ABG],\nGMO: [OTF, ABG],\nBEZ: [BBB, ABG],\nXBC: [OCY],\nOTF: [OCY, ZVF, GMO],\nQUD: [OCY, ZVF],\nAWR: [CSN],\nBBB: [CSN, BEZ],\nABG: [CSN, ZVF, GMO, BEZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZOQ is connected to nodes AYK, PWU, ENS, WBM, FJG, PKV.\nNode IUU is connected to nodes AYK, PWU, HKL, FIL, ENS, FJG.\nNode MBU is connected to nodes AYK, HKL, FJG.\nNode WPN is connected to nodes PWU, ZPY.\nNode FCB is connected to nodes AYK, PWU, FIL, ZPY, ENS, WBM.\nNode TLC is connected to nodes AYK, FIL, ZPY, WBM.\nNode AYK is connected to nodes ZOQ, IUU, MBU, FCB, TLC.\nNode PWU is connected to nodes ZOQ, IUU, WPN, FCB.\nNode HKL is connected to nodes IUU, MBU.\nNode FIL is connected to nodes IUU, FCB, TLC.\nNode ZPY is connected to nodes WPN, FCB, TLC.\nNode ENS is connected to nodes ZOQ, IUU, FCB.\nNode WBM is connected to nodes ZOQ, FCB, TLC.\nNode FJG is connected to nodes ZOQ, IUU, MBU.\nNode PKV is connected to node ZOQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZOQ: [AYK, PWU, ENS, WBM, FJG, PKV],\nIUU: [AYK, PWU, HKL, FIL, ENS, FJG],\nMBU: [AYK, HKL, FJG],\nWPN: [PWU, ZPY],\nFCB: [AYK, PWU, FIL, ZPY, ENS, WBM],\nTLC: [AYK, FIL, ZPY, WBM],\nAYK: [ZOQ, IUU, MBU, FCB, TLC],\nPWU: [ZOQ, IUU, WPN, FCB],\nHKL: [IUU, MBU],\nFIL: [IUU, FCB, TLC],\nZPY: [WPN, FCB, TLC],\nENS: [ZOQ, IUU, FCB],\nWBM: [ZOQ, FCB, TLC],\nFJG: [ZOQ, IUU, MBU],\nPKV: [ZOQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WOA is connected to nodes DGA, QMF, MWM.\nNode NWQ is connected to nodes DGA, QMF, WZP, MSK.\nNode TAN is connected to nodes HTS, RJF.\nNode PYK is connected to nodes DGA, RJF, MWM.\nNode DGA is connected to nodes WOA, NWQ, PYK.\nNode HTS is connected to node TAN.\nNode QMF is connected to nodes WOA, NWQ.\nNode WZP is connected to node NWQ.\nNode MSK is connected to node NWQ.\nNode RJF is connected to nodes TAN, PYK.\nNode MWM is connected to nodes WOA, PYK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WOA: [DGA, QMF, MWM],\nNWQ: [DGA, QMF, WZP, MSK],\nTAN: [HTS, RJF],\nPYK: [DGA, RJF, MWM],\nDGA: [WOA, NWQ, PYK],\nHTS: [TAN],\nQMF: [WOA, NWQ],\nWZP: [NWQ],\nMSK: [NWQ],\nRJF: [TAN, PYK],\nMWM: [WOA, PYK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OYL is connected to nodes JCU, JGR.\nNode BHM is connected to nodes IQQ, BWE, JGR.\nNode VIT is connected to nodes XDI, IQQ, BWE.\nNode NAT is connected to node IQQ.\nNode JCU is connected to node OYL.\nNode XDI is connected to node VIT.\nNode IQQ is connected to nodes BHM, VIT, NAT.\nNode BWE is connected to nodes BHM, VIT.\nNode JGR is connected to nodes OYL, BHM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OYL: [JCU, JGR],\nBHM: [IQQ, BWE, JGR],\nVIT: [XDI, IQQ, BWE],\nNAT: [IQQ],\nJCU: [OYL],\nXDI: [VIT],\nIQQ: [BHM, VIT, NAT],\nBWE: [BHM, VIT],\nJGR: [OYL, BHM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IER is connected to nodes MGU, VLX, XEX.\nNode YTD is connected to nodes MGU, EBM, IKQ, RAF.\nNode GXC is connected to node EBM.\nNode RLH is connected to nodes NNQ, XEX, RAF, DPN.\nNode AYC is connected to node VLX.\nNode HCT is connected to node VLX.\nNode UPD is connected to node IKQ.\nNode MGU is connected to nodes IER, YTD.\nNode EBM is connected to nodes YTD, GXC.\nNode IKQ is connected to nodes YTD, UPD.\nNode VLX is connected to nodes IER, AYC, HCT.\nNode NNQ is connected to node RLH.\nNode XEX is connected to nodes IER, RLH.\nNode RAF is connected to nodes YTD, RLH.\nNode DPN is connected to node RLH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IER: [MGU, VLX, XEX],\nYTD: [MGU, EBM, IKQ, RAF],\nGXC: [EBM],\nRLH: [NNQ, XEX, RAF, DPN],\nAYC: [VLX],\nHCT: [VLX],\nUPD: [IKQ],\nMGU: [IER, YTD],\nEBM: [YTD, GXC],\nIKQ: [YTD, UPD],\nVLX: [IER, AYC, HCT],\nNNQ: [RLH],\nXEX: [IER, RLH],\nRAF: [YTD, RLH],\nDPN: [RLH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WTG is connected to nodes DAO, APH.\nNode BVD is connected to nodes QJZ, DRL, KXT, DAO.\nNode LTU is connected to nodes QJZ, KXT, DAO, APH.\nNode GBC is connected to node DAO.\nNode QJZ is connected to nodes BVD, LTU.\nNode DRL is connected to node BVD.\nNode KXT is connected to nodes BVD, LTU.\nNode DAO is connected to nodes WTG, BVD, LTU, GBC.\nNode APH is connected to nodes WTG, LTU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WTG: [DAO, APH],\nBVD: [QJZ, DRL, KXT, DAO],\nLTU: [QJZ, KXT, DAO, APH],\nGBC: [DAO],\nQJZ: [BVD, LTU],\nDRL: [BVD],\nKXT: [BVD, LTU],\nDAO: [WTG, BVD, LTU, GBC],\nAPH: [WTG, LTU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KHC is connected to nodes QTK, YUU, JDC.\nNode UKT is connected to nodes QTK, YUU.\nNode WOC is connected to nodes FFY, QTK, ACP.\nNode WQZ is connected to nodes LUI, ZMS, FFY, QTK, YUU, JDC.\nNode QXR is connected to nodes SDP, ZYT, ACP, KPP, YUU.\nNode LUI is connected to node WQZ.\nNode ZMS is connected to node WQZ.\nNode SDP is connected to node QXR.\nNode ZYT is connected to node QXR.\nNode FFY is connected to nodes WOC, WQZ.\nNode QTK is connected to nodes KHC, UKT, WOC, WQZ.\nNode ACP is connected to nodes WOC, QXR.\nNode KPP is connected to node QXR.\nNode YUU is connected to nodes KHC, UKT, WQZ, QXR.\nNode JDC is connected to nodes KHC, WQZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KHC: [QTK, YUU, JDC],\nUKT: [QTK, YUU],\nWOC: [FFY, QTK, ACP],\nWQZ: [LUI, ZMS, FFY, QTK, YUU, JDC],\nQXR: [SDP, ZYT, ACP, KPP, YUU],\nLUI: [WQZ],\nZMS: [WQZ],\nSDP: [QXR],\nZYT: [QXR],\nFFY: [WOC, WQZ],\nQTK: [KHC, UKT, WOC, WQZ],\nACP: [WOC, QXR],\nKPP: [QXR],\nYUU: [KHC, UKT, WQZ, QXR],\nJDC: [KHC, WQZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NSY is connected to nodes LYI, VNU.\nNode YBA is connected to nodes LYI, RHL, OPX.\nNode OQM is connected to nodes LYI, AHK, TTB.\nNode VXT is connected to node TTB.\nNode LHL is connected to nodes RHL, TTB.\nNode PKD is connected to nodes LYI, YIQ.\nNode LYI is connected to nodes NSY, YBA, OQM, PKD.\nNode YIQ is connected to node PKD.\nNode AHK is connected to node OQM.\nNode RHL is connected to nodes YBA, LHL.\nNode TTB is connected to nodes OQM, VXT, LHL.\nNode OPX is connected to node YBA.\nNode VNU is connected to node NSY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NSY: [LYI, VNU],\nYBA: [LYI, RHL, OPX],\nOQM: [LYI, AHK, TTB],\nVXT: [TTB],\nLHL: [RHL, TTB],\nPKD: [LYI, YIQ],\nLYI: [NSY, YBA, OQM, PKD],\nYIQ: [PKD],\nAHK: [OQM],\nRHL: [YBA, LHL],\nTTB: [OQM, VXT, LHL],\nOPX: [YBA],\nVNU: [NSY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WWJ is connected to nodes VVH, PWQ.\nNode UAP is connected to nodes FIC, ZWM, PWQ.\nNode ESY is connected to nodes HEV, ZWM, VVH, QAL.\nNode OQZ is connected to nodes HEV, VVH.\nNode HEV is connected to nodes ESY, OQZ.\nNode FIC is connected to node UAP.\nNode ZWM is connected to nodes UAP, ESY.\nNode VVH is connected to nodes WWJ, ESY, OQZ.\nNode PWQ is connected to nodes WWJ, UAP.\nNode QAL is connected to node ESY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WWJ: [VVH, PWQ],\nUAP: [FIC, ZWM, PWQ],\nESY: [HEV, ZWM, VVH, QAL],\nOQZ: [HEV, VVH],\nHEV: [ESY, OQZ],\nFIC: [UAP],\nZWM: [UAP, ESY],\nVVH: [WWJ, ESY, OQZ],\nPWQ: [WWJ, UAP],\nQAL: [ESY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LEQ is connected to nodes TFS, GEP.\nNode VOQ is connected to nodes EOP, GEP, WYR, WWO.\nNode RAI is connected to nodes TFS, WWO.\nNode FBG is connected to nodes TFS, EOP, WYR.\nNode TFS is connected to nodes LEQ, RAI, FBG.\nNode EOP is connected to nodes VOQ, FBG.\nNode GEP is connected to nodes LEQ, VOQ.\nNode WYR is connected to nodes VOQ, FBG.\nNode WWO is connected to nodes VOQ, RAI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LEQ: [TFS, GEP],\nVOQ: [EOP, GEP, WYR, WWO],\nRAI: [TFS, WWO],\nFBG: [TFS, EOP, WYR],\nTFS: [LEQ, RAI, FBG],\nEOP: [VOQ, FBG],\nGEP: [LEQ, VOQ],\nWYR: [VOQ, FBG],\nWWO: [VOQ, RAI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DJX is connected to node VOF.\nNode FFU is connected to nodes WHJ, SES, IPJ, VOF.\nNode FXL is connected to nodes WHJ, SES, APF, VOF, XCT.\nNode WHJ is connected to nodes FFU, FXL.\nNode SES is connected to nodes FFU, FXL.\nNode IPJ is connected to node FFU.\nNode APF is connected to node FXL.\nNode VOF is connected to nodes DJX, FFU, FXL.\nNode XCT is connected to node FXL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DJX: [VOF],\nFFU: [WHJ, SES, IPJ, VOF],\nFXL: [WHJ, SES, APF, VOF, XCT],\nWHJ: [FFU, FXL],\nSES: [FFU, FXL],\nIPJ: [FFU],\nAPF: [FXL],\nVOF: [DJX, FFU, FXL],\nXCT: [FXL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RZG is connected to nodes KLY, ISI, DPR, JCI.\nNode EUY is connected to nodes DPR, JCI.\nNode NSC is connected to nodes KLY, WVI, WVA, ISI, JCI.\nNode KLY is connected to nodes RZG, NSC.\nNode WVI is connected to node NSC.\nNode WVA is connected to node NSC.\nNode ISI is connected to nodes RZG, NSC.\nNode DPR is connected to nodes RZG, EUY.\nNode JCI is connected to nodes RZG, EUY, NSC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RZG: [KLY, ISI, DPR, JCI],\nEUY: [DPR, JCI],\nNSC: [KLY, WVI, WVA, ISI, JCI],\nKLY: [RZG, NSC],\nWVI: [NSC],\nWVA: [NSC],\nISI: [RZG, NSC],\nDPR: [RZG, EUY],\nJCI: [RZG, EUY, NSC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZEE is connected to nodes OLY, SGN, YEW.\nNode XIC is connected to nodes OLY, YEW.\nNode NXV is connected to nodes ZTT, HFU, OLY, SGN, YEW.\nNode ZTT is connected to node NXV.\nNode HFU is connected to node NXV.\nNode OLY is connected to nodes ZEE, XIC, NXV.\nNode SGN is connected to nodes ZEE, NXV.\nNode YEW is connected to nodes ZEE, XIC, NXV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZEE: [OLY, SGN, YEW],\nXIC: [OLY, YEW],\nNXV: [ZTT, HFU, OLY, SGN, YEW],\nZTT: [NXV],\nHFU: [NXV],\nOLY: [ZEE, XIC, NXV],\nSGN: [ZEE, NXV],\nYEW: [ZEE, XIC, NXV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WMI is connected to nodes KKT, CQY, KBP, UVN.\nNode HZF is connected to nodes MWL, KKT, OKF, UVN.\nNode XQQ is connected to node KBP.\nNode JHL is connected to nodes MWL, CQY, OKF.\nNode MWL is connected to nodes HZF, JHL.\nNode KKT is connected to nodes WMI, HZF.\nNode CQY is connected to nodes WMI, JHL.\nNode OKF is connected to nodes HZF, JHL.\nNode KBP is connected to nodes WMI, XQQ.\nNode UVN is connected to nodes WMI, HZF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WMI: [KKT, CQY, KBP, UVN],\nHZF: [MWL, KKT, OKF, UVN],\nXQQ: [KBP],\nJHL: [MWL, CQY, OKF],\nMWL: [HZF, JHL],\nKKT: [WMI, HZF],\nCQY: [WMI, JHL],\nOKF: [HZF, JHL],\nKBP: [WMI, XQQ],\nUVN: [WMI, HZF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JBQ is connected to nodes RIJ, TON, XKH, YYJ, PIQ.\nNode DWL is connected to nodes RIJ, TON, YHY, YYJ.\nNode QPD is connected to nodes RIJ, TON, YHY, YYJ.\nNode JAW is connected to nodes RIJ, YHY, YYJ, PIQ, FCJ.\nNode RTL is connected to nodes RIJ, TON, TNY.\nNode LAT is connected to nodes XKH, YYJ, PIQ.\nNode RIJ is connected to nodes JBQ, DWL, QPD, JAW, RTL.\nNode TON is connected to nodes JBQ, DWL, QPD, RTL.\nNode XKH is connected to nodes JBQ, LAT.\nNode YHY is connected to nodes DWL, QPD, JAW.\nNode YYJ is connected to nodes JBQ, DWL, QPD, JAW, LAT.\nNode PIQ is connected to nodes JBQ, JAW, LAT.\nNode TNY is connected to node RTL.\nNode FCJ is connected to node JAW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JBQ: [RIJ, TON, XKH, YYJ, PIQ],\nDWL: [RIJ, TON, YHY, YYJ],\nQPD: [RIJ, TON, YHY, YYJ],\nJAW: [RIJ, YHY, YYJ, PIQ, FCJ],\nRTL: [RIJ, TON, TNY],\nLAT: [XKH, YYJ, PIQ],\nRIJ: [JBQ, DWL, QPD, JAW, RTL],\nTON: [JBQ, DWL, QPD, RTL],\nXKH: [JBQ, LAT],\nYHY: [DWL, QPD, JAW],\nYYJ: [JBQ, DWL, QPD, JAW, LAT],\nPIQ: [JBQ, JAW, LAT],\nTNY: [RTL],\nFCJ: [JAW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FVW is connected to nodes ZGF, PSM.\nNode NCN is connected to nodes ZGF, PSM, MRJ.\nNode PHS is connected to nodes OAF, TTW, MRJ.\nNode MQF is connected to node TTW.\nNode OAF is connected to node PHS.\nNode ZGF is connected to nodes FVW, NCN.\nNode PSM is connected to nodes FVW, NCN.\nNode TTW is connected to nodes PHS, MQF.\nNode MRJ is connected to nodes NCN, PHS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FVW: [ZGF, PSM],\nNCN: [ZGF, PSM, MRJ],\nPHS: [OAF, TTW, MRJ],\nMQF: [TTW],\nOAF: [PHS],\nZGF: [FVW, NCN],\nPSM: [FVW, NCN],\nTTW: [PHS, MQF],\nMRJ: [NCN, PHS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CDR is connected to nodes HOC, FDD.\nNode RNE is connected to nodes JMB, CGS, ELU, FDD.\nNode WSP is connected to nodes HOC, JMB, CGS, ELU.\nNode ZFK is connected to nodes NHC, FDD.\nNode BJO is connected to node CGS.\nNode HOC is connected to nodes CDR, WSP.\nNode NHC is connected to node ZFK.\nNode JMB is connected to nodes RNE, WSP.\nNode CGS is connected to nodes RNE, WSP, BJO.\nNode ELU is connected to nodes RNE, WSP.\nNode FDD is connected to nodes CDR, RNE, ZFK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CDR: [HOC, FDD],\nRNE: [JMB, CGS, ELU, FDD],\nWSP: [HOC, JMB, CGS, ELU],\nZFK: [NHC, FDD],\nBJO: [CGS],\nHOC: [CDR, WSP],\nNHC: [ZFK],\nJMB: [RNE, WSP],\nCGS: [RNE, WSP, BJO],\nELU: [RNE, WSP],\nFDD: [CDR, RNE, ZFK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BDX is connected to nodes UGW, JWT, AYL.\nNode PTY is connected to nodes PLF, MNS, MXS, UGW, TOI, DYB, DQY.\nNode UEG is connected to nodes UGW, JWT.\nNode PAW is connected to nodes MNS, UGW.\nNode VLG is connected to nodes PLF, MXS.\nNode PLF is connected to nodes PTY, VLG.\nNode MNS is connected to nodes PTY, PAW.\nNode MXS is connected to nodes PTY, VLG.\nNode UGW is connected to nodes BDX, PTY, UEG, PAW.\nNode TOI is connected to node PTY.\nNode JWT is connected to nodes BDX, UEG.\nNode AYL is connected to node BDX.\nNode DYB is connected to node PTY.\nNode DQY is connected to node PTY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BDX: [UGW, JWT, AYL],\nPTY: [PLF, MNS, MXS, UGW, TOI, DYB, DQY],\nUEG: [UGW, JWT],\nPAW: [MNS, UGW],\nVLG: [PLF, MXS],\nPLF: [PTY, VLG],\nMNS: [PTY, PAW],\nMXS: [PTY, VLG],\nUGW: [BDX, PTY, UEG, PAW],\nTOI: [PTY],\nJWT: [BDX, UEG],\nAYL: [BDX],\nDYB: [PTY],\nDQY: [PTY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IWK is connected to node GZI.\nNode QYQ is connected to node FWL.\nNode WXY is connected to nodes NNL, WFB.\nNode ZST is connected to nodes DUE, NNL, WFB.\nNode KHX is connected to nodes BXS, NNL.\nNode JGW is connected to nodes BXS, GZI, FWL, NNL, WFB, CIR.\nNode BXS is connected to nodes KHX, JGW.\nNode GZI is connected to nodes IWK, JGW.\nNode DUE is connected to node ZST.\nNode FWL is connected to nodes QYQ, JGW.\nNode NNL is connected to nodes WXY, ZST, KHX, JGW.\nNode WFB is connected to nodes WXY, ZST, JGW.\nNode CIR is connected to node JGW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IWK: [GZI],\nQYQ: [FWL],\nWXY: [NNL, WFB],\nZST: [DUE, NNL, WFB],\nKHX: [BXS, NNL],\nJGW: [BXS, GZI, FWL, NNL, WFB, CIR],\nBXS: [KHX, JGW],\nGZI: [IWK, JGW],\nDUE: [ZST],\nFWL: [QYQ, JGW],\nNNL: [WXY, ZST, KHX, JGW],\nWFB: [WXY, ZST, JGW],\nCIR: [JGW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HYL is connected to nodes RJC, NWP, SHV.\nNode XLU is connected to nodes RJC, QME.\nNode OTY is connected to nodes NKN, NWP.\nNode RDD is connected to node NWP.\nNode DAV is connected to nodes RJC, IFJ, GTU.\nNode AGL is connected to nodes GOR, NWP, SHV.\nNode NKN is connected to node OTY.\nNode RJC is connected to nodes HYL, XLU, DAV.\nNode QME is connected to node XLU.\nNode GOR is connected to node AGL.\nNode NWP is connected to nodes HYL, OTY, RDD, AGL.\nNode IFJ is connected to node DAV.\nNode GTU is connected to node DAV.\nNode SHV is connected to nodes HYL, AGL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HYL: [RJC, NWP, SHV],\nXLU: [RJC, QME],\nOTY: [NKN, NWP],\nRDD: [NWP],\nDAV: [RJC, IFJ, GTU],\nAGL: [GOR, NWP, SHV],\nNKN: [OTY],\nRJC: [HYL, XLU, DAV],\nQME: [XLU],\nGOR: [AGL],\nNWP: [HYL, OTY, RDD, AGL],\nIFJ: [DAV],\nGTU: [DAV],\nSHV: [HYL, AGL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TCM is connected to nodes OEK, ULX, CBT, PWS, QSH.\nNode JIS is connected to nodes BSJ, LUU, CHM, QSH.\nNode CAD is connected to nodes OEK, ULX, CBT, NWG, LUU, QSH, CHK.\nNode IOJ is connected to nodes CBT, NWG, LUU, CHM.\nNode BSJ is connected to node JIS.\nNode OEK is connected to nodes TCM, CAD.\nNode ULX is connected to nodes TCM, CAD.\nNode CBT is connected to nodes TCM, CAD, IOJ.\nNode PWS is connected to node TCM.\nNode NWG is connected to nodes CAD, IOJ.\nNode LUU is connected to nodes JIS, CAD, IOJ.\nNode CHM is connected to nodes JIS, IOJ.\nNode QSH is connected to nodes TCM, JIS, CAD.\nNode CHK is connected to node CAD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TCM: [OEK, ULX, CBT, PWS, QSH],\nJIS: [BSJ, LUU, CHM, QSH],\nCAD: [OEK, ULX, CBT, NWG, LUU, QSH, CHK],\nIOJ: [CBT, NWG, LUU, CHM],\nBSJ: [JIS],\nOEK: [TCM, CAD],\nULX: [TCM, CAD],\nCBT: [TCM, CAD, IOJ],\nPWS: [TCM],\nNWG: [CAD, IOJ],\nLUU: [JIS, CAD, IOJ],\nCHM: [JIS, IOJ],\nQSH: [TCM, JIS, CAD],\nCHK: [CAD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OAR is connected to nodes QZC, UHR, HYV, OWX, GEY.\nNode SAW is connected to nodes EEJ, UHR, HYV, JMX.\nNode JTD is connected to nodes EEJ, HYV, JMX.\nNode YNK is connected to nodes EEJ, QZC, UHR, HYV, OWX.\nNode NHN is connected to nodes QZC, UHR, JMX, EKK, GEY, EYV.\nNode EEJ is connected to nodes SAW, JTD, YNK.\nNode QZC is connected to nodes OAR, YNK, NHN.\nNode UHR is connected to nodes OAR, SAW, YNK, NHN.\nNode HYV is connected to nodes OAR, SAW, JTD, YNK.\nNode OWX is connected to nodes OAR, YNK.\nNode JMX is connected to nodes SAW, JTD, NHN.\nNode EKK is connected to node NHN.\nNode GEY is connected to nodes OAR, NHN.\nNode EYV is connected to node NHN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OAR: [QZC, UHR, HYV, OWX, GEY],\nSAW: [EEJ, UHR, HYV, JMX],\nJTD: [EEJ, HYV, JMX],\nYNK: [EEJ, QZC, UHR, HYV, OWX],\nNHN: [QZC, UHR, JMX, EKK, GEY, EYV],\nEEJ: [SAW, JTD, YNK],\nQZC: [OAR, YNK, NHN],\nUHR: [OAR, SAW, YNK, NHN],\nHYV: [OAR, SAW, JTD, YNK],\nOWX: [OAR, YNK],\nJMX: [SAW, JTD, NHN],\nEKK: [NHN],\nGEY: [OAR, NHN],\nEYV: [NHN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UOH is connected to node ZJN.\nNode LEY is connected to nodes YKA, XKH, MBX.\nNode UKT is connected to nodes ECT, MBX, ZJN, LNK.\nNode ECT is connected to node UKT.\nNode YKA is connected to node LEY.\nNode XKH is connected to node LEY.\nNode MBX is connected to nodes LEY, UKT.\nNode ZJN is connected to nodes UOH, UKT.\nNode LNK is connected to node UKT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UOH: [ZJN],\nLEY: [YKA, XKH, MBX],\nUKT: [ECT, MBX, ZJN, LNK],\nECT: [UKT],\nYKA: [LEY],\nXKH: [LEY],\nMBX: [LEY, UKT],\nZJN: [UOH, UKT],\nLNK: [UKT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZNJ is connected to nodes VBO, KZK, TFT, DAO.\nNode WXA is connected to nodes KZK, TFT.\nNode NKI is connected to nodes VBO, TFT, CHP.\nNode VBO is connected to nodes ZNJ, NKI.\nNode KZK is connected to nodes ZNJ, WXA.\nNode TFT is connected to nodes ZNJ, WXA, NKI.\nNode DAO is connected to node ZNJ.\nNode CHP is connected to node NKI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZNJ: [VBO, KZK, TFT, DAO],\nWXA: [KZK, TFT],\nNKI: [VBO, TFT, CHP],\nVBO: [ZNJ, NKI],\nKZK: [ZNJ, WXA],\nTFT: [ZNJ, WXA, NKI],\nDAO: [ZNJ],\nCHP: [NKI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node APR is connected to nodes IPY, CAB, YTF.\nNode OEJ is connected to nodes FGP, GMT, XMJ.\nNode IXY is connected to nodes DEO, XMJ.\nNode KTD is connected to nodes CAB, VDH, GMT.\nNode IPY is connected to node APR.\nNode CAB is connected to nodes APR, KTD.\nNode FGP is connected to node OEJ.\nNode DEO is connected to node IXY.\nNode VDH is connected to node KTD.\nNode GMT is connected to nodes OEJ, KTD.\nNode XMJ is connected to nodes OEJ, IXY.\nNode YTF is connected to node APR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{APR: [IPY, CAB, YTF],\nOEJ: [FGP, GMT, XMJ],\nIXY: [DEO, XMJ],\nKTD: [CAB, VDH, GMT],\nIPY: [APR],\nCAB: [APR, KTD],\nFGP: [OEJ],\nDEO: [IXY],\nVDH: [KTD],\nGMT: [OEJ, KTD],\nXMJ: [OEJ, IXY],\nYTF: [APR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XLZ is connected to nodes TLC, OCN, HMW.\nNode ZKK is connected to nodes SLJ, HMW, RZE.\nNode HHH is connected to nodes TLC, IUX, OCN.\nNode TLC is connected to nodes XLZ, HHH.\nNode SLJ is connected to node ZKK.\nNode IUX is connected to node HHH.\nNode OCN is connected to nodes XLZ, HHH.\nNode HMW is connected to nodes XLZ, ZKK.\nNode RZE is connected to node ZKK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XLZ: [TLC, OCN, HMW],\nZKK: [SLJ, HMW, RZE],\nHHH: [TLC, IUX, OCN],\nTLC: [XLZ, HHH],\nSLJ: [ZKK],\nIUX: [HHH],\nOCN: [XLZ, HHH],\nHMW: [XLZ, ZKK],\nRZE: [ZKK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZKR is connected to nodes XUH, PWW, RGK, EZG, AAG.\nNode FJO is connected to nodes BSG, RGK, KKF, RNU.\nNode LAT is connected to nodes XUH, RGK, KKF.\nNode BVJ is connected to nodes EZL, RGK, AAG, RNU, OSH.\nNode EZL is connected to node BVJ.\nNode BSG is connected to node FJO.\nNode XUH is connected to nodes ZKR, LAT.\nNode PWW is connected to node ZKR.\nNode RGK is connected to nodes ZKR, FJO, LAT, BVJ.\nNode EZG is connected to node ZKR.\nNode KKF is connected to nodes FJO, LAT.\nNode AAG is connected to nodes ZKR, BVJ.\nNode RNU is connected to nodes FJO, BVJ.\nNode OSH is connected to node BVJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZKR: [XUH, PWW, RGK, EZG, AAG],\nFJO: [BSG, RGK, KKF, RNU],\nLAT: [XUH, RGK, KKF],\nBVJ: [EZL, RGK, AAG, RNU, OSH],\nEZL: [BVJ],\nBSG: [FJO],\nXUH: [ZKR, LAT],\nPWW: [ZKR],\nRGK: [ZKR, FJO, LAT, BVJ],\nEZG: [ZKR],\nKKF: [FJO, LAT],\nAAG: [ZKR, BVJ],\nRNU: [FJO, BVJ],\nOSH: [BVJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HMJ is connected to nodes PYT, NFM, BZW.\nNode BCV is connected to nodes BZW, KTU, GCV.\nNode BBX is connected to nodes VEK, PYT, GCV.\nNode VEK is connected to node BBX.\nNode PYT is connected to nodes HMJ, BBX.\nNode NFM is connected to node HMJ.\nNode BZW is connected to nodes HMJ, BCV.\nNode KTU is connected to node BCV.\nNode GCV is connected to nodes BCV, BBX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HMJ: [PYT, NFM, BZW],\nBCV: [BZW, KTU, GCV],\nBBX: [VEK, PYT, GCV],\nVEK: [BBX],\nPYT: [HMJ, BBX],\nNFM: [HMJ],\nBZW: [HMJ, BCV],\nKTU: [BCV],\nGCV: [BCV, BBX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CRD is connected to nodes AXT, UBP, JEW.\nNode STF is connected to nodes AXT, UBP, LJV, ENE, RAO, ENY.\nNode EWI is connected to nodes UZM, LJV, ENE.\nNode AXT is connected to nodes CRD, STF.\nNode UBP is connected to nodes CRD, STF.\nNode UZM is connected to node EWI.\nNode LJV is connected to nodes STF, EWI.\nNode ENE is connected to nodes STF, EWI.\nNode RAO is connected to node STF.\nNode JEW is connected to node CRD.\nNode ENY is connected to node STF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CRD: [AXT, UBP, JEW],\nSTF: [AXT, UBP, LJV, ENE, RAO, ENY],\nEWI: [UZM, LJV, ENE],\nAXT: [CRD, STF],\nUBP: [CRD, STF],\nUZM: [EWI],\nLJV: [STF, EWI],\nENE: [STF, EWI],\nRAO: [STF],\nJEW: [CRD],\nENY: [STF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IGC is connected to node ULJ.\nNode PIR is connected to nodes ULJ, ZWV, VWX, CDX, WKL, IKX, FDF, YSB.\nNode LBE is connected to nodes VWX, IKX.\nNode ULJ is connected to nodes IGC, PIR.\nNode ZWV is connected to node PIR.\nNode VWX is connected to nodes PIR, LBE.\nNode CDX is connected to node PIR.\nNode WKL is connected to node PIR.\nNode IKX is connected to nodes PIR, LBE.\nNode FDF is connected to node PIR.\nNode YSB is connected to node PIR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IGC: [ULJ],\nPIR: [ULJ, ZWV, VWX, CDX, WKL, IKX, FDF, YSB],\nLBE: [VWX, IKX],\nULJ: [IGC, PIR],\nZWV: [PIR],\nVWX: [PIR, LBE],\nCDX: [PIR],\nWKL: [PIR],\nIKX: [PIR, LBE],\nFDF: [PIR],\nYSB: [PIR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HZC is connected to nodes JJK, AWZ, MNW, YFZ, RGY, GWG.\nNode URK is connected to nodes RVR, QUJ, YFZ.\nNode WSA is connected to nodes YFZ, RGY, GWG, BJP.\nNode SZS is connected to nodes MNW, YFZ, RGY, GWG.\nNode JJK is connected to node HZC.\nNode RVR is connected to node URK.\nNode AWZ is connected to node HZC.\nNode MNW is connected to nodes HZC, SZS.\nNode QUJ is connected to node URK.\nNode YFZ is connected to nodes HZC, URK, WSA, SZS.\nNode RGY is connected to nodes HZC, WSA, SZS.\nNode GWG is connected to nodes HZC, WSA, SZS.\nNode BJP is connected to node WSA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HZC: [JJK, AWZ, MNW, YFZ, RGY, GWG],\nURK: [RVR, QUJ, YFZ],\nWSA: [YFZ, RGY, GWG, BJP],\nSZS: [MNW, YFZ, RGY, GWG],\nJJK: [HZC],\nRVR: [URK],\nAWZ: [HZC],\nMNW: [HZC, SZS],\nQUJ: [URK],\nYFZ: [HZC, URK, WSA, SZS],\nRGY: [HZC, WSA, SZS],\nGWG: [HZC, WSA, SZS],\nBJP: [WSA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SMI is connected to node JQL.\nNode WPN is connected to nodes ZOB, CAS, YCZ.\nNode XNI is connected to nodes ZOB, HNI.\nNode TGM is connected to node ZOB.\nNode TDY is connected to nodes KQP, HNI, BBS, RKP.\nNode AFV is connected to node KQP.\nNode BMP is connected to nodes CAS, JQL.\nNode ZOB is connected to nodes WPN, XNI, TGM.\nNode KQP is connected to nodes TDY, AFV.\nNode HNI is connected to nodes XNI, TDY.\nNode BBS is connected to node TDY.\nNode CAS is connected to nodes WPN, BMP.\nNode JQL is connected to nodes SMI, BMP.\nNode RKP is connected to node TDY.\nNode YCZ is connected to node WPN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SMI: [JQL],\nWPN: [ZOB, CAS, YCZ],\nXNI: [ZOB, HNI],\nTGM: [ZOB],\nTDY: [KQP, HNI, BBS, RKP],\nAFV: [KQP],\nBMP: [CAS, JQL],\nZOB: [WPN, XNI, TGM],\nKQP: [TDY, AFV],\nHNI: [XNI, TDY],\nBBS: [TDY],\nCAS: [WPN, BMP],\nJQL: [SMI, BMP],\nRKP: [TDY],\nYCZ: [WPN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SHS is connected to nodes CBN, BHI, VVI.\nNode GCC is connected to nodes CBN, BHI, VVI.\nNode FRC is connected to nodes LHU, QDV, JFN, MLZ.\nNode WLS is connected to nodes CBN, UZZ, QDV, JFN, MLZ.\nNode CBN is connected to nodes SHS, GCC, WLS.\nNode BHI is connected to nodes SHS, GCC.\nNode VVI is connected to nodes SHS, GCC.\nNode UZZ is connected to node WLS.\nNode LHU is connected to node FRC.\nNode QDV is connected to nodes FRC, WLS.\nNode JFN is connected to nodes FRC, WLS.\nNode MLZ is connected to nodes FRC, WLS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SHS: [CBN, BHI, VVI],\nGCC: [CBN, BHI, VVI],\nFRC: [LHU, QDV, JFN, MLZ],\nWLS: [CBN, UZZ, QDV, JFN, MLZ],\nCBN: [SHS, GCC, WLS],\nBHI: [SHS, GCC],\nVVI: [SHS, GCC],\nUZZ: [WLS],\nLHU: [FRC],\nQDV: [FRC, WLS],\nJFN: [FRC, WLS],\nMLZ: [FRC, WLS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EAN is connected to nodes MDG, PFU, ZXQ, LWF, DVL.\nNode ZEC is connected to nodes BMA, PFU, ZXQ, LWF, DVL.\nNode MDG is connected to node EAN.\nNode BMA is connected to node ZEC.\nNode PFU is connected to nodes EAN, ZEC.\nNode ZXQ is connected to nodes EAN, ZEC.\nNode LWF is connected to nodes EAN, ZEC.\nNode DVL is connected to nodes EAN, ZEC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EAN: [MDG, PFU, ZXQ, LWF, DVL],\nZEC: [BMA, PFU, ZXQ, LWF, DVL],\nMDG: [EAN],\nBMA: [ZEC],\nPFU: [EAN, ZEC],\nZXQ: [EAN, ZEC],\nLWF: [EAN, ZEC],\nDVL: [EAN, ZEC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JIN is connected to nodes AAJ, UPI, XQX, ESE.\nNode RAW is connected to node AAJ.\nNode ZHQ is connected to nodes RXB, DZZ, YUG.\nNode CEV is connected to nodes DZZ, ESE, YUG.\nNode RYR is connected to nodes UPI, XLV, YUG.\nNode AAJ is connected to nodes JIN, RAW.\nNode RXB is connected to node ZHQ.\nNode UPI is connected to nodes JIN, RYR.\nNode XQX is connected to node JIN.\nNode DZZ is connected to nodes ZHQ, CEV.\nNode ESE is connected to nodes JIN, CEV.\nNode XLV is connected to node RYR.\nNode YUG is connected to nodes ZHQ, CEV, RYR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JIN: [AAJ, UPI, XQX, ESE],\nRAW: [AAJ],\nZHQ: [RXB, DZZ, YUG],\nCEV: [DZZ, ESE, YUG],\nRYR: [UPI, XLV, YUG],\nAAJ: [JIN, RAW],\nRXB: [ZHQ],\nUPI: [JIN, RYR],\nXQX: [JIN],\nDZZ: [ZHQ, CEV],\nESE: [JIN, CEV],\nXLV: [RYR],\nYUG: [ZHQ, CEV, RYR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GKU is connected to nodes YOE, XYL, QEA, BCE.\nNode APJ is connected to nodes QEA, RGT.\nNode SVV is connected to node RGT.\nNode YOE is connected to node GKU.\nNode XYL is connected to node GKU.\nNode QEA is connected to nodes GKU, APJ.\nNode RGT is connected to nodes APJ, SVV.\nNode BCE is connected to node GKU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GKU: [YOE, XYL, QEA, BCE],\nAPJ: [QEA, RGT],\nSVV: [RGT],\nYOE: [GKU],\nXYL: [GKU],\nQEA: [GKU, APJ],\nRGT: [APJ, SVV],\nBCE: [GKU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UAT is connected to nodes UTQ, MWH, IHE.\nNode KDX is connected to node ZWS.\nNode ZJY is connected to nodes ZIY, VJT, IHE, ZWS.\nNode UTQ is connected to node UAT.\nNode ZIY is connected to node ZJY.\nNode MWH is connected to node UAT.\nNode VJT is connected to node ZJY.\nNode IHE is connected to nodes UAT, ZJY.\nNode ZWS is connected to nodes KDX, ZJY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UAT: [UTQ, MWH, IHE],\nKDX: [ZWS],\nZJY: [ZIY, VJT, IHE, ZWS],\nUTQ: [UAT],\nZIY: [ZJY],\nMWH: [UAT],\nVJT: [ZJY],\nIHE: [UAT, ZJY],\nZWS: [KDX, ZJY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CZK is connected to nodes GSO, CHS, YLW.\nNode GBT is connected to nodes GSO, EZP.\nNode LKJ is connected to node CHO.\nNode VLC is connected to nodes CHO, CHS, EZP, IRI.\nNode CHO is connected to nodes LKJ, VLC.\nNode GSO is connected to nodes CZK, GBT.\nNode CHS is connected to nodes CZK, VLC.\nNode EZP is connected to nodes GBT, VLC.\nNode YLW is connected to node CZK.\nNode IRI is connected to node VLC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CZK: [GSO, CHS, YLW],\nGBT: [GSO, EZP],\nLKJ: [CHO],\nVLC: [CHO, CHS, EZP, IRI],\nCHO: [LKJ, VLC],\nGSO: [CZK, GBT],\nCHS: [CZK, VLC],\nEZP: [GBT, VLC],\nYLW: [CZK],\nIRI: [VLC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BPB is connected to nodes MYO, UKL, NUR, SQK, BII.\nNode UAW is connected to nodes QYB, NUR, SQK.\nNode MYO is connected to node BPB.\nNode QYB is connected to node UAW.\nNode UKL is connected to node BPB.\nNode NUR is connected to nodes BPB, UAW.\nNode SQK is connected to nodes BPB, UAW.\nNode BII is connected to node BPB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BPB: [MYO, UKL, NUR, SQK, BII],\nUAW: [QYB, NUR, SQK],\nMYO: [BPB],\nQYB: [UAW],\nUKL: [BPB],\nNUR: [BPB, UAW],\nSQK: [BPB, UAW],\nBII: [BPB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DFB is connected to nodes HAS, FOB, CRU, RLZ, CCX, PNX, QYS.\nNode GYE is connected to nodes HAS, CRU, PNX.\nNode YEI is connected to nodes ZGY, NGE.\nNode MCJ is connected to nodes ZGY, CRU, RLZ, NGE, QYS.\nNode WSK is connected to nodes ZGY, CCX, PNX.\nNode WKL is connected to nodes ZGY, CCX, PNX, NGE.\nNode HAS is connected to nodes DFB, GYE.\nNode FOB is connected to node DFB.\nNode ZGY is connected to nodes YEI, MCJ, WSK, WKL.\nNode CRU is connected to nodes DFB, GYE, MCJ.\nNode RLZ is connected to nodes DFB, MCJ.\nNode CCX is connected to nodes DFB, WSK, WKL.\nNode PNX is connected to nodes DFB, GYE, WSK, WKL.\nNode NGE is connected to nodes YEI, MCJ, WKL.\nNode QYS is connected to nodes DFB, MCJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DFB: [HAS, FOB, CRU, RLZ, CCX, PNX, QYS],\nGYE: [HAS, CRU, PNX],\nYEI: [ZGY, NGE],\nMCJ: [ZGY, CRU, RLZ, NGE, QYS],\nWSK: [ZGY, CCX, PNX],\nWKL: [ZGY, CCX, PNX, NGE],\nHAS: [DFB, GYE],\nFOB: [DFB],\nZGY: [YEI, MCJ, WSK, WKL],\nCRU: [DFB, GYE, MCJ],\nRLZ: [DFB, MCJ],\nCCX: [DFB, WSK, WKL],\nPNX: [DFB, GYE, WSK, WKL],\nNGE: [YEI, MCJ, WKL],\nQYS: [DFB, MCJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KSJ is connected to nodes RAO, JJT, SHF.\nNode ZGJ is connected to nodes LZC, JJT, NHB, SHF.\nNode XOB is connected to nodes KJI, HWI, SHF, BZN.\nNode HIA is connected to nodes RAO, JJT, KJI, HWI, SHF.\nNode AFY is connected to nodes NHB, HWI, SHF.\nNode LZC is connected to node ZGJ.\nNode RAO is connected to nodes KSJ, HIA.\nNode JJT is connected to nodes KSJ, ZGJ, HIA.\nNode NHB is connected to nodes ZGJ, AFY.\nNode KJI is connected to nodes XOB, HIA.\nNode HWI is connected to nodes XOB, HIA, AFY.\nNode SHF is connected to nodes KSJ, ZGJ, XOB, HIA, AFY.\nNode BZN is connected to node XOB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KSJ: [RAO, JJT, SHF],\nZGJ: [LZC, JJT, NHB, SHF],\nXOB: [KJI, HWI, SHF, BZN],\nHIA: [RAO, JJT, KJI, HWI, SHF],\nAFY: [NHB, HWI, SHF],\nLZC: [ZGJ],\nRAO: [KSJ, HIA],\nJJT: [KSJ, ZGJ, HIA],\nNHB: [ZGJ, AFY],\nKJI: [XOB, HIA],\nHWI: [XOB, HIA, AFY],\nSHF: [KSJ, ZGJ, XOB, HIA, AFY],\nBZN: [XOB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GHF is connected to nodes QKP, RPM.\nNode MSD is connected to nodes CGZ, VJV, QKP.\nNode YGM is connected to nodes YAD, QKP, VWB.\nNode LIT is connected to nodes CGZ, VJV, OUW, QKP, RPM.\nNode JXD is connected to nodes YAD, QKP, RPM, VWB.\nNode CGZ is connected to nodes MSD, LIT.\nNode VJV is connected to nodes MSD, LIT.\nNode YAD is connected to nodes YGM, JXD.\nNode OUW is connected to node LIT.\nNode QKP is connected to nodes GHF, MSD, YGM, LIT, JXD.\nNode RPM is connected to nodes GHF, LIT, JXD.\nNode VWB is connected to nodes YGM, JXD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GHF: [QKP, RPM],\nMSD: [CGZ, VJV, QKP],\nYGM: [YAD, QKP, VWB],\nLIT: [CGZ, VJV, OUW, QKP, RPM],\nJXD: [YAD, QKP, RPM, VWB],\nCGZ: [MSD, LIT],\nVJV: [MSD, LIT],\nYAD: [YGM, JXD],\nOUW: [LIT],\nQKP: [GHF, MSD, YGM, LIT, JXD],\nRPM: [GHF, LIT, JXD],\nVWB: [YGM, JXD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YUH is connected to nodes FUS, LXT.\nNode EGA is connected to nodes RHD, FZU, GIS, HBU, ADY.\nNode HRR is connected to nodes FZU, GIS, LXT.\nNode NKI is connected to nodes RHD, FUS, GIS, HBU.\nNode RHD is connected to nodes EGA, NKI.\nNode FUS is connected to nodes YUH, NKI.\nNode FZU is connected to nodes EGA, HRR.\nNode GIS is connected to nodes EGA, HRR, NKI.\nNode HBU is connected to nodes EGA, NKI.\nNode ADY is connected to node EGA.\nNode LXT is connected to nodes YUH, HRR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YUH: [FUS, LXT],\nEGA: [RHD, FZU, GIS, HBU, ADY],\nHRR: [FZU, GIS, LXT],\nNKI: [RHD, FUS, GIS, HBU],\nRHD: [EGA, NKI],\nFUS: [YUH, NKI],\nFZU: [EGA, HRR],\nGIS: [EGA, HRR, NKI],\nHBU: [EGA, NKI],\nADY: [EGA],\nLXT: [YUH, HRR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QBV is connected to nodes RQU, ANV, PQS.\nNode JPL is connected to nodes QLZ, SNP, ANV.\nNode IPA is connected to nodes KVL, SNP, RQU.\nNode QLZ is connected to node JPL.\nNode KVL is connected to node IPA.\nNode SNP is connected to nodes JPL, IPA.\nNode RQU is connected to nodes QBV, IPA.\nNode ANV is connected to nodes QBV, JPL.\nNode PQS is connected to node QBV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QBV: [RQU, ANV, PQS],\nJPL: [QLZ, SNP, ANV],\nIPA: [KVL, SNP, RQU],\nQLZ: [JPL],\nKVL: [IPA],\nSNP: [JPL, IPA],\nRQU: [QBV, IPA],\nANV: [QBV, JPL],\nPQS: [QBV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DVE is connected to nodes ETJ, DDQ, UBN, MQO, UHV.\nNode CYD is connected to nodes RZJ, MQO.\nNode JDD is connected to nodes ETJ, GOC.\nNode CNK is connected to nodes DDQ, RZJ, UBN, GOC.\nNode FYA is connected to nodes MQO, UHV.\nNode ETJ is connected to nodes DVE, JDD.\nNode DDQ is connected to nodes DVE, CNK.\nNode RZJ is connected to nodes CYD, CNK.\nNode UBN is connected to nodes DVE, CNK.\nNode MQO is connected to nodes DVE, CYD, FYA.\nNode GOC is connected to nodes JDD, CNK.\nNode UHV is connected to nodes DVE, FYA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DVE: [ETJ, DDQ, UBN, MQO, UHV],\nCYD: [RZJ, MQO],\nJDD: [ETJ, GOC],\nCNK: [DDQ, RZJ, UBN, GOC],\nFYA: [MQO, UHV],\nETJ: [DVE, JDD],\nDDQ: [DVE, CNK],\nRZJ: [CYD, CNK],\nUBN: [DVE, CNK],\nMQO: [DVE, CYD, FYA],\nGOC: [JDD, CNK],\nUHV: [DVE, FYA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CTD is connected to nodes DEA, CNU, RUO, XYZ, JCQ.\nNode WYP is connected to nodes RUO, XYZ.\nNode QPX is connected to nodes CNU, RUO, CNG.\nNode FCN is connected to nodes CNU, RUO, BGQ, CNG.\nNode DEA is connected to node CTD.\nNode CNU is connected to nodes CTD, QPX, FCN.\nNode RUO is connected to nodes CTD, WYP, QPX, FCN.\nNode XYZ is connected to nodes CTD, WYP.\nNode BGQ is connected to node FCN.\nNode JCQ is connected to node CTD.\nNode CNG is connected to nodes QPX, FCN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CTD: [DEA, CNU, RUO, XYZ, JCQ],\nWYP: [RUO, XYZ],\nQPX: [CNU, RUO, CNG],\nFCN: [CNU, RUO, BGQ, CNG],\nDEA: [CTD],\nCNU: [CTD, QPX, FCN],\nRUO: [CTD, WYP, QPX, FCN],\nXYZ: [CTD, WYP],\nBGQ: [FCN],\nJCQ: [CTD],\nCNG: [QPX, FCN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UOH is connected to nodes LJH, UYF, JHN, XZT.\nNode ZZW is connected to nodes LJH, SPO, EKA, WQD.\nNode KJY is connected to nodes FPP, YNB, UIZ, CXU, UYF, JHN, XZT.\nNode FPP is connected to node KJY.\nNode YNB is connected to node KJY.\nNode LJH is connected to nodes UOH, ZZW.\nNode UIZ is connected to node KJY.\nNode SPO is connected to node ZZW.\nNode CXU is connected to node KJY.\nNode EKA is connected to node ZZW.\nNode UYF is connected to nodes UOH, KJY.\nNode JHN is connected to nodes UOH, KJY.\nNode WQD is connected to node ZZW.\nNode XZT is connected to nodes UOH, KJY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UOH: [LJH, UYF, JHN, XZT],\nZZW: [LJH, SPO, EKA, WQD],\nKJY: [FPP, YNB, UIZ, CXU, UYF, JHN, XZT],\nFPP: [KJY],\nYNB: [KJY],\nLJH: [UOH, ZZW],\nUIZ: [KJY],\nSPO: [ZZW],\nCXU: [KJY],\nEKA: [ZZW],\nUYF: [UOH, KJY],\nJHN: [UOH, KJY],\nWQD: [ZZW],\nXZT: [UOH, KJY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NAT is connected to nodes WGK, QPY, VPG, BII.\nNode KJY is connected to nodes WGK, GEG.\nNode XRW is connected to nodes VPG, QLU.\nNode LOI is connected to nodes QQX, WGK, QPY, YNY, GEP, VPG, BII, QLU.\nNode WZT is connected to nodes YBT, VPG, QLU.\nNode QQX is connected to node LOI.\nNode WGK is connected to nodes NAT, KJY, LOI.\nNode YBT is connected to node WZT.\nNode QPY is connected to nodes NAT, LOI.\nNode YNY is connected to node LOI.\nNode GEG is connected to node KJY.\nNode GEP is connected to node LOI.\nNode VPG is connected to nodes NAT, XRW, LOI, WZT.\nNode BII is connected to nodes NAT, LOI.\nNode QLU is connected to nodes XRW, LOI, WZT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NAT: [WGK, QPY, VPG, BII],\nKJY: [WGK, GEG],\nXRW: [VPG, QLU],\nLOI: [QQX, WGK, QPY, YNY, GEP, VPG, BII, QLU],\nWZT: [YBT, VPG, QLU],\nQQX: [LOI],\nWGK: [NAT, KJY, LOI],\nYBT: [WZT],\nQPY: [NAT, LOI],\nYNY: [LOI],\nGEG: [KJY],\nGEP: [LOI],\nVPG: [NAT, XRW, LOI, WZT],\nBII: [NAT, LOI],\nQLU: [XRW, LOI, WZT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CRD is connected to nodes ZQM, ZKP.\nNode KQW is connected to nodes JXK, IAH.\nNode SKD is connected to nodes HYV, ZQM, JXK, IAH, ZKP.\nNode HYV is connected to node SKD.\nNode ZQM is connected to nodes CRD, SKD.\nNode JXK is connected to nodes KQW, SKD.\nNode IAH is connected to nodes KQW, SKD.\nNode ZKP is connected to nodes CRD, SKD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CRD: [ZQM, ZKP],\nKQW: [JXK, IAH],\nSKD: [HYV, ZQM, JXK, IAH, ZKP],\nHYV: [SKD],\nZQM: [CRD, SKD],\nJXK: [KQW, SKD],\nIAH: [KQW, SKD],\nZKP: [CRD, SKD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LZA is connected to nodes KZM, AKJ, ISH, ZMG.\nNode AWC is connected to nodes KZM, DAY.\nNode BHM is connected to nodes AKJ, ZMG.\nNode ZZL is connected to nodes DAY, RNW.\nNode WAP is connected to nodes KZM, AKJ.\nNode KZM is connected to nodes LZA, AWC, WAP.\nNode AKJ is connected to nodes LZA, BHM, WAP.\nNode DAY is connected to nodes AWC, ZZL.\nNode ISH is connected to node LZA.\nNode RNW is connected to node ZZL.\nNode ZMG is connected to nodes LZA, BHM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LZA: [KZM, AKJ, ISH, ZMG],\nAWC: [KZM, DAY],\nBHM: [AKJ, ZMG],\nZZL: [DAY, RNW],\nWAP: [KZM, AKJ],\nKZM: [LZA, AWC, WAP],\nAKJ: [LZA, BHM, WAP],\nDAY: [AWC, ZZL],\nISH: [LZA],\nRNW: [ZZL],\nZMG: [LZA, BHM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GTZ is connected to nodes CWF, GYO, EBJ, PTA.\nNode WAE is connected to nodes QKL, CWF, MPH, WFZ, AEB.\nNode VPZ is connected to nodes QNJ, WUD, GYO, EBJ, PTA.\nNode TJU is connected to nodes QKL, QNJ, MPH, WFZ, GYO, AEB, QYI, PTA.\nNode QKL is connected to nodes WAE, TJU.\nNode CWF is connected to nodes GTZ, WAE.\nNode QNJ is connected to nodes VPZ, TJU.\nNode WUD is connected to node VPZ.\nNode MPH is connected to nodes WAE, TJU.\nNode WFZ is connected to nodes WAE, TJU.\nNode GYO is connected to nodes GTZ, VPZ, TJU.\nNode AEB is connected to nodes WAE, TJU.\nNode EBJ is connected to nodes GTZ, VPZ.\nNode QYI is connected to node TJU.\nNode PTA is connected to nodes GTZ, VPZ, TJU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GTZ: [CWF, GYO, EBJ, PTA],\nWAE: [QKL, CWF, MPH, WFZ, AEB],\nVPZ: [QNJ, WUD, GYO, EBJ, PTA],\nTJU: [QKL, QNJ, MPH, WFZ, GYO, AEB, QYI, PTA],\nQKL: [WAE, TJU],\nCWF: [GTZ, WAE],\nQNJ: [VPZ, TJU],\nWUD: [VPZ],\nMPH: [WAE, TJU],\nWFZ: [WAE, TJU],\nGYO: [GTZ, VPZ, TJU],\nAEB: [WAE, TJU],\nEBJ: [GTZ, VPZ],\nQYI: [TJU],\nPTA: [GTZ, VPZ, TJU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VQR is connected to nodes XPR, FSM.\nNode KMK is connected to nodes BYJ, VQA, FSM.\nNode MYJ is connected to nodes HHR, FSM.\nNode HHR is connected to node MYJ.\nNode BYJ is connected to node KMK.\nNode XPR is connected to node VQR.\nNode VQA is connected to node KMK.\nNode FSM is connected to nodes VQR, KMK, MYJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VQR: [XPR, FSM],\nKMK: [BYJ, VQA, FSM],\nMYJ: [HHR, FSM],\nHHR: [MYJ],\nBYJ: [KMK],\nXPR: [VQR],\nVQA: [KMK],\nFSM: [VQR, KMK, MYJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IVZ is connected to nodes GLZ, OUI, NHQ.\nNode PCX is connected to nodes BZM, BRG, PIZ, CKP, CWN.\nNode UQG is connected to nodes BZM, BRG.\nNode SGJ is connected to nodes OUI, BZM.\nNode IDN is connected to nodes BRG, RME.\nNode RMH is connected to nodes GLZ, OUI, CKP, CWN.\nNode GLZ is connected to nodes IVZ, RMH.\nNode OUI is connected to nodes IVZ, SGJ, RMH.\nNode BZM is connected to nodes PCX, UQG, SGJ.\nNode BRG is connected to nodes PCX, UQG, IDN.\nNode PIZ is connected to node PCX.\nNode NHQ is connected to node IVZ.\nNode CKP is connected to nodes PCX, RMH.\nNode CWN is connected to nodes PCX, RMH.\nNode RME is connected to node IDN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IVZ: [GLZ, OUI, NHQ],\nPCX: [BZM, BRG, PIZ, CKP, CWN],\nUQG: [BZM, BRG],\nSGJ: [OUI, BZM],\nIDN: [BRG, RME],\nRMH: [GLZ, OUI, CKP, CWN],\nGLZ: [IVZ, RMH],\nOUI: [IVZ, SGJ, RMH],\nBZM: [PCX, UQG, SGJ],\nBRG: [PCX, UQG, IDN],\nPIZ: [PCX],\nNHQ: [IVZ],\nCKP: [PCX, RMH],\nCWN: [PCX, RMH],\nRME: [IDN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ROS is connected to node UXB.\nNode DAQ is connected to nodes AFS, TOV, UZC, UXB.\nNode ODO is connected to node UZC.\nNode PNE is connected to nodes AFS, TOV, POT, UZC, UXB.\nNode AFS is connected to nodes DAQ, PNE.\nNode TOV is connected to nodes DAQ, PNE.\nNode POT is connected to node PNE.\nNode UZC is connected to nodes DAQ, ODO, PNE.\nNode UXB is connected to nodes ROS, DAQ, PNE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ROS: [UXB],\nDAQ: [AFS, TOV, UZC, UXB],\nODO: [UZC],\nPNE: [AFS, TOV, POT, UZC, UXB],\nAFS: [DAQ, PNE],\nTOV: [DAQ, PNE],\nPOT: [PNE],\nUZC: [DAQ, ODO, PNE],\nUXB: [ROS, DAQ, PNE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VWJ is connected to nodes TOJ, LJP.\nNode OIH is connected to node PCG.\nNode JSD is connected to node LJP.\nNode ZAP is connected to nodes PCG, PTG, KQE, USY, LJP.\nNode PCG is connected to nodes OIH, ZAP.\nNode PTG is connected to node ZAP.\nNode KQE is connected to node ZAP.\nNode USY is connected to node ZAP.\nNode TOJ is connected to node VWJ.\nNode LJP is connected to nodes VWJ, JSD, ZAP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VWJ: [TOJ, LJP],\nOIH: [PCG],\nJSD: [LJP],\nZAP: [PCG, PTG, KQE, USY, LJP],\nPCG: [OIH, ZAP],\nPTG: [ZAP],\nKQE: [ZAP],\nUSY: [ZAP],\nTOJ: [VWJ],\nLJP: [VWJ, JSD, ZAP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VQC is connected to nodes AGL, TAL, ZAO, WVR, ICJ, SKR, HPE.\nNode RTE is connected to nodes TAL, GQK.\nNode OZS is connected to nodes TAL, WVR, VVE.\nNode AGL is connected to node VQC.\nNode TAL is connected to nodes VQC, RTE, OZS.\nNode ZAO is connected to node VQC.\nNode WVR is connected to nodes VQC, OZS.\nNode GQK is connected to node RTE.\nNode VVE is connected to node OZS.\nNode ICJ is connected to node VQC.\nNode SKR is connected to node VQC.\nNode HPE is connected to node VQC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VQC: [AGL, TAL, ZAO, WVR, ICJ, SKR, HPE],\nRTE: [TAL, GQK],\nOZS: [TAL, WVR, VVE],\nAGL: [VQC],\nTAL: [VQC, RTE, OZS],\nZAO: [VQC],\nWVR: [VQC, OZS],\nGQK: [RTE],\nVVE: [OZS],\nICJ: [VQC],\nSKR: [VQC],\nHPE: [VQC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YZH is connected to nodes XJV, IVQ.\nNode WFS is connected to nodes IVQ, EYZ.\nNode KXX is connected to nodes IWW, XJV.\nNode LTE is connected to nodes IWW, JYP.\nNode IWW is connected to nodes KXX, LTE.\nNode JYP is connected to node LTE.\nNode XJV is connected to nodes YZH, KXX.\nNode IVQ is connected to nodes YZH, WFS.\nNode EYZ is connected to node WFS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YZH: [XJV, IVQ],\nWFS: [IVQ, EYZ],\nKXX: [IWW, XJV],\nLTE: [IWW, JYP],\nIWW: [KXX, LTE],\nJYP: [LTE],\nXJV: [YZH, KXX],\nIVQ: [YZH, WFS],\nEYZ: [WFS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QYR is connected to nodes IPV, ONF, RTD.\nNode POB is connected to nodes ZLX, ONF, RTD.\nNode HFM is connected to nodes ZLX, PZW, EOJ.\nNode YBC is connected to node ZLX.\nNode QRA is connected to nodes ZLX, HSF, RTD.\nNode IPV is connected to node QYR.\nNode ZLX is connected to nodes POB, HFM, YBC, QRA.\nNode PZW is connected to node HFM.\nNode HSF is connected to node QRA.\nNode ONF is connected to nodes QYR, POB.\nNode EOJ is connected to node HFM.\nNode RTD is connected to nodes QYR, POB, QRA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QYR: [IPV, ONF, RTD],\nPOB: [ZLX, ONF, RTD],\nHFM: [ZLX, PZW, EOJ],\nYBC: [ZLX],\nQRA: [ZLX, HSF, RTD],\nIPV: [QYR],\nZLX: [POB, HFM, YBC, QRA],\nPZW: [HFM],\nHSF: [QRA],\nONF: [QYR, POB],\nEOJ: [HFM],\nRTD: [QYR, POB, QRA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UYU is connected to nodes CJY, MEC.\nNode ITV is connected to node CJY.\nNode UKF is connected to nodes ZXE, FMO, BSJ, WWC.\nNode LMN is connected to nodes FMO, OUQ, MEC, XYO.\nNode ZXE is connected to node UKF.\nNode FMO is connected to nodes UKF, LMN.\nNode CJY is connected to nodes UYU, ITV.\nNode BSJ is connected to node UKF.\nNode OUQ is connected to node LMN.\nNode MEC is connected to nodes UYU, LMN.\nNode XYO is connected to node LMN.\nNode WWC is connected to node UKF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UYU: [CJY, MEC],\nITV: [CJY],\nUKF: [ZXE, FMO, BSJ, WWC],\nLMN: [FMO, OUQ, MEC, XYO],\nZXE: [UKF],\nFMO: [UKF, LMN],\nCJY: [UYU, ITV],\nBSJ: [UKF],\nOUQ: [LMN],\nMEC: [UYU, LMN],\nXYO: [LMN],\nWWC: [UKF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YSY is connected to nodes VUF, BTK, VBZ.\nNode SNQ is connected to nodes VUF, PAN, JLQ, MIP, EKW.\nNode DQW is connected to nodes JLQ, EKW, VBZ, FXP.\nNode WCY is connected to node EKW.\nNode VUF is connected to nodes YSY, SNQ.\nNode PAN is connected to node SNQ.\nNode BTK is connected to node YSY.\nNode JLQ is connected to nodes SNQ, DQW.\nNode MIP is connected to node SNQ.\nNode EKW is connected to nodes SNQ, DQW, WCY.\nNode VBZ is connected to nodes YSY, DQW.\nNode FXP is connected to node DQW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YSY: [VUF, BTK, VBZ],\nSNQ: [VUF, PAN, JLQ, MIP, EKW],\nDQW: [JLQ, EKW, VBZ, FXP],\nWCY: [EKW],\nVUF: [YSY, SNQ],\nPAN: [SNQ],\nBTK: [YSY],\nJLQ: [SNQ, DQW],\nMIP: [SNQ],\nEKW: [SNQ, DQW, WCY],\nVBZ: [YSY, DQW],\nFXP: [DQW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JNW is connected to nodes UBB, BXB, ZCI.\nNode TOJ is connected to nodes MQD, URU.\nNode EXX is connected to nodes UBB, ELR, BXB, QDJ, ZCI.\nNode MWK is connected to nodes MQD, UBB, URU, ELR, BXB, ZCI, BSL.\nNode MQD is connected to nodes TOJ, MWK.\nNode UBB is connected to nodes JNW, EXX, MWK.\nNode URU is connected to nodes TOJ, MWK.\nNode ELR is connected to nodes EXX, MWK.\nNode BXB is connected to nodes JNW, EXX, MWK.\nNode QDJ is connected to node EXX.\nNode ZCI is connected to nodes JNW, EXX, MWK.\nNode BSL is connected to node MWK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JNW: [UBB, BXB, ZCI],\nTOJ: [MQD, URU],\nEXX: [UBB, ELR, BXB, QDJ, ZCI],\nMWK: [MQD, UBB, URU, ELR, BXB, ZCI, BSL],\nMQD: [TOJ, MWK],\nUBB: [JNW, EXX, MWK],\nURU: [TOJ, MWK],\nELR: [EXX, MWK],\nBXB: [JNW, EXX, MWK],\nQDJ: [EXX],\nZCI: [JNW, EXX, MWK],\nBSL: [MWK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SEO is connected to nodes RYE, UZU, ABW.\nNode YDH is connected to nodes YSO, RYE, UZU.\nNode XOR is connected to nodes YSO, RYE, SJF.\nNode YSO is connected to nodes YDH, XOR.\nNode RYE is connected to nodes SEO, YDH, XOR.\nNode UZU is connected to nodes SEO, YDH.\nNode SJF is connected to node XOR.\nNode ABW is connected to node SEO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SEO: [RYE, UZU, ABW],\nYDH: [YSO, RYE, UZU],\nXOR: [YSO, RYE, SJF],\nYSO: [YDH, XOR],\nRYE: [SEO, YDH, XOR],\nUZU: [SEO, YDH],\nSJF: [XOR],\nABW: [SEO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FYH is connected to nodes HQU, JCS.\nNode BWA is connected to nodes RGM, OJI.\nNode WOP is connected to nodes OBQ, NTE.\nNode USJ is connected to nodes NTE, QXK.\nNode WMX is connected to nodes HQU, RGM.\nNode AMU is connected to nodes NTE, JCS, KHV, QXK.\nNode OBQ is connected to node WOP.\nNode HQU is connected to nodes FYH, WMX.\nNode RGM is connected to nodes BWA, WMX.\nNode NTE is connected to nodes WOP, USJ, AMU.\nNode JCS is connected to nodes FYH, AMU.\nNode KHV is connected to node AMU.\nNode OJI is connected to node BWA.\nNode QXK is connected to nodes USJ, AMU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FYH: [HQU, JCS],\nBWA: [RGM, OJI],\nWOP: [OBQ, NTE],\nUSJ: [NTE, QXK],\nWMX: [HQU, RGM],\nAMU: [NTE, JCS, KHV, QXK],\nOBQ: [WOP],\nHQU: [FYH, WMX],\nRGM: [BWA, WMX],\nNTE: [WOP, USJ, AMU],\nJCS: [FYH, AMU],\nKHV: [AMU],\nOJI: [BWA],\nQXK: [USJ, AMU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JUX is connected to nodes NWD, MZM, NWP, VSP, HQJ, MKG.\nNode EHQ is connected to nodes ZVO, NWP, NGJ, QOG, MKG.\nNode DQM is connected to nodes ZVO, NWP, NGJ.\nNode NWD is connected to node JUX.\nNode MZM is connected to node JUX.\nNode ZVO is connected to nodes EHQ, DQM.\nNode NWP is connected to nodes JUX, EHQ, DQM.\nNode VSP is connected to node JUX.\nNode HQJ is connected to node JUX.\nNode NGJ is connected to nodes EHQ, DQM.\nNode QOG is connected to node EHQ.\nNode MKG is connected to nodes JUX, EHQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JUX: [NWD, MZM, NWP, VSP, HQJ, MKG],\nEHQ: [ZVO, NWP, NGJ, QOG, MKG],\nDQM: [ZVO, NWP, NGJ],\nNWD: [JUX],\nMZM: [JUX],\nZVO: [EHQ, DQM],\nNWP: [JUX, EHQ, DQM],\nVSP: [JUX],\nHQJ: [JUX],\nNGJ: [EHQ, DQM],\nQOG: [EHQ],\nMKG: [JUX, EHQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YAA is connected to nodes IKJ, FMP, BBW.\nNode JZE is connected to nodes LZW, BBW, ZJU.\nNode ZRE is connected to nodes LZW, FMP.\nNode ZAT is connected to nodes JAD, LZW.\nNode IKJ is connected to node YAA.\nNode JAD is connected to node ZAT.\nNode LZW is connected to nodes JZE, ZRE, ZAT.\nNode FMP is connected to nodes YAA, ZRE.\nNode BBW is connected to nodes YAA, JZE.\nNode ZJU is connected to node JZE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YAA: [IKJ, FMP, BBW],\nJZE: [LZW, BBW, ZJU],\nZRE: [LZW, FMP],\nZAT: [JAD, LZW],\nIKJ: [YAA],\nJAD: [ZAT],\nLZW: [JZE, ZRE, ZAT],\nFMP: [YAA, ZRE],\nBBW: [YAA, JZE],\nZJU: [JZE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node USR is connected to nodes HRW, RTV, UBY.\nNode GSU is connected to nodes GBW, KDY, DTW, YQM, RTV.\nNode QII is connected to nodes GBW, HBY, HRW, YQM.\nNode GBW is connected to nodes GSU, QII.\nNode KDY is connected to node GSU.\nNode HBY is connected to node QII.\nNode HRW is connected to nodes USR, QII.\nNode DTW is connected to node GSU.\nNode YQM is connected to nodes GSU, QII.\nNode RTV is connected to nodes USR, GSU.\nNode UBY is connected to node USR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{USR: [HRW, RTV, UBY],\nGSU: [GBW, KDY, DTW, YQM, RTV],\nQII: [GBW, HBY, HRW, YQM],\nGBW: [GSU, QII],\nKDY: [GSU],\nHBY: [QII],\nHRW: [USR, QII],\nDTW: [GSU],\nYQM: [GSU, QII],\nRTV: [USR, GSU],\nUBY: [USR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DWL is connected to nodes OGS, AVL, SCF.\nNode CBI is connected to nodes OGS, EGX, OXC.\nNode LBQ is connected to nodes OGS, EGX.\nNode LUX is connected to nodes EGX, CUB, VUS, OXC.\nNode ZFJ is connected to nodes CUB, AVL, DUO, OXC.\nNode SPW is connected to nodes CUB, VUS, AVL, DUO.\nNode SZU is connected to nodes VUS, SCF.\nNode OGS is connected to nodes DWL, CBI, LBQ.\nNode EGX is connected to nodes CBI, LBQ, LUX.\nNode CUB is connected to nodes LUX, ZFJ, SPW.\nNode VUS is connected to nodes LUX, SPW, SZU.\nNode AVL is connected to nodes DWL, ZFJ, SPW.\nNode SCF is connected to nodes DWL, SZU.\nNode DUO is connected to nodes ZFJ, SPW.\nNode OXC is connected to nodes CBI, LUX, ZFJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DWL: [OGS, AVL, SCF],\nCBI: [OGS, EGX, OXC],\nLBQ: [OGS, EGX],\nLUX: [EGX, CUB, VUS, OXC],\nZFJ: [CUB, AVL, DUO, OXC],\nSPW: [CUB, VUS, AVL, DUO],\nSZU: [VUS, SCF],\nOGS: [DWL, CBI, LBQ],\nEGX: [CBI, LBQ, LUX],\nCUB: [LUX, ZFJ, SPW],\nVUS: [LUX, SPW, SZU],\nAVL: [DWL, ZFJ, SPW],\nSCF: [DWL, SZU],\nDUO: [ZFJ, SPW],\nOXC: [CBI, LUX, ZFJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UNB is connected to nodes RPW, TSV.\nNode NXO is connected to nodes HUV, VBC, YYP, OGM, TSV, YPH.\nNode ATK is connected to nodes HUV, WLN, VBC, OGM, YPH.\nNode GWN is connected to nodes HUV, WLN, YYP, TSV, YPH, KKA.\nNode YQR is connected to nodes YPH, KKA.\nNode HUV is connected to nodes NXO, ATK, GWN.\nNode WLN is connected to nodes ATK, GWN.\nNode RPW is connected to node UNB.\nNode VBC is connected to nodes NXO, ATK.\nNode YYP is connected to nodes NXO, GWN.\nNode OGM is connected to nodes NXO, ATK.\nNode TSV is connected to nodes UNB, NXO, GWN.\nNode YPH is connected to nodes NXO, ATK, GWN, YQR.\nNode KKA is connected to nodes GWN, YQR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UNB: [RPW, TSV],\nNXO: [HUV, VBC, YYP, OGM, TSV, YPH],\nATK: [HUV, WLN, VBC, OGM, YPH],\nGWN: [HUV, WLN, YYP, TSV, YPH, KKA],\nYQR: [YPH, KKA],\nHUV: [NXO, ATK, GWN],\nWLN: [ATK, GWN],\nRPW: [UNB],\nVBC: [NXO, ATK],\nYYP: [NXO, GWN],\nOGM: [NXO, ATK],\nTSV: [UNB, NXO, GWN],\nYPH: [NXO, ATK, GWN, YQR],\nKKA: [GWN, YQR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JME is connected to nodes LOP, AZW, KWH, PHJ, JPK.\nNode BAA is connected to node AZW.\nNode UTN is connected to node PHJ.\nNode LOP is connected to node JME.\nNode AZW is connected to nodes JME, BAA.\nNode KWH is connected to node JME.\nNode PHJ is connected to nodes JME, UTN.\nNode JPK is connected to node JME.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JME: [LOP, AZW, KWH, PHJ, JPK],\nBAA: [AZW],\nUTN: [PHJ],\nLOP: [JME],\nAZW: [JME, BAA],\nKWH: [JME],\nPHJ: [JME, UTN],\nJPK: [JME]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JTE is connected to nodes GZK, XIS, DNG, UFE.\nNode DIY is connected to nodes CBB, XIS.\nNode AUU is connected to nodes OMK, GZK, IMZ.\nNode NTY is connected to node GZK.\nNode GJO is connected to nodes XIS, UFE, YQH.\nNode OMK is connected to node AUU.\nNode CBB is connected to node DIY.\nNode GZK is connected to nodes JTE, AUU, NTY.\nNode IMZ is connected to node AUU.\nNode XIS is connected to nodes JTE, DIY, GJO.\nNode DNG is connected to node JTE.\nNode UFE is connected to nodes JTE, GJO.\nNode YQH is connected to node GJO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JTE: [GZK, XIS, DNG, UFE],\nDIY: [CBB, XIS],\nAUU: [OMK, GZK, IMZ],\nNTY: [GZK],\nGJO: [XIS, UFE, YQH],\nOMK: [AUU],\nCBB: [DIY],\nGZK: [JTE, AUU, NTY],\nIMZ: [AUU],\nXIS: [JTE, DIY, GJO],\nDNG: [JTE],\nUFE: [JTE, GJO],\nYQH: [GJO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GKD is connected to nodes AVP, YFU, VQV, IYJ.\nNode YMS is connected to nodes HQR, YFU, IYJ, COD.\nNode WLW is connected to nodes YFU, COD.\nNode AVP is connected to node GKD.\nNode HQR is connected to node YMS.\nNode YFU is connected to nodes GKD, YMS, WLW.\nNode VQV is connected to node GKD.\nNode IYJ is connected to nodes GKD, YMS.\nNode COD is connected to nodes YMS, WLW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GKD: [AVP, YFU, VQV, IYJ],\nYMS: [HQR, YFU, IYJ, COD],\nWLW: [YFU, COD],\nAVP: [GKD],\nHQR: [YMS],\nYFU: [GKD, YMS, WLW],\nVQV: [GKD],\nIYJ: [GKD, YMS],\nCOD: [YMS, WLW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FVM is connected to nodes NGW, OCT, WZY.\nNode GAX is connected to nodes OCT, ITX, JWA.\nNode ILL is connected to node WZY.\nNode NGW is connected to node FVM.\nNode OCT is connected to nodes FVM, GAX.\nNode ITX is connected to node GAX.\nNode JWA is connected to node GAX.\nNode WZY is connected to nodes FVM, ILL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FVM: [NGW, OCT, WZY],\nGAX: [OCT, ITX, JWA],\nILL: [WZY],\nNGW: [FVM],\nOCT: [FVM, GAX],\nITX: [GAX],\nJWA: [GAX],\nWZY: [FVM, ILL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FVP is connected to nodes SOS, IVP.\nNode NNO is connected to nodes IVP, ERW.\nNode DEE is connected to nodes SOS, XJN, DAA.\nNode DRZ is connected to nodes DAA, PCK.\nNode SOS is connected to nodes FVP, DEE.\nNode IVP is connected to nodes FVP, NNO.\nNode ERW is connected to node NNO.\nNode XJN is connected to node DEE.\nNode DAA is connected to nodes DEE, DRZ.\nNode PCK is connected to node DRZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FVP: [SOS, IVP],\nNNO: [IVP, ERW],\nDEE: [SOS, XJN, DAA],\nDRZ: [DAA, PCK],\nSOS: [FVP, DEE],\nIVP: [FVP, NNO],\nERW: [NNO],\nXJN: [DEE],\nDAA: [DEE, DRZ],\nPCK: [DRZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WLD is connected to nodes AFH, WBS, RJB, ESP.\nNode OIW is connected to nodes RJB, DTK.\nNode JYK is connected to nodes RJB, ESP.\nNode MGQ is connected to nodes ESP, LYF.\nNode MOR is connected to nodes SOF, BUV, RJB, DTK.\nNode SOF is connected to node MOR.\nNode AFH is connected to node WLD.\nNode BUV is connected to node MOR.\nNode WBS is connected to node WLD.\nNode RJB is connected to nodes WLD, OIW, JYK, MOR.\nNode ESP is connected to nodes WLD, JYK, MGQ.\nNode DTK is connected to nodes OIW, MOR.\nNode LYF is connected to node MGQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WLD: [AFH, WBS, RJB, ESP],\nOIW: [RJB, DTK],\nJYK: [RJB, ESP],\nMGQ: [ESP, LYF],\nMOR: [SOF, BUV, RJB, DTK],\nSOF: [MOR],\nAFH: [WLD],\nBUV: [MOR],\nWBS: [WLD],\nRJB: [WLD, OIW, JYK, MOR],\nESP: [WLD, JYK, MGQ],\nDTK: [OIW, MOR],\nLYF: [MGQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MTT is connected to nodes GRS, VEN, DMO.\nNode XGB is connected to nodes WHY, JOQ, VEN, CBP.\nNode GRS is connected to node MTT.\nNode WHY is connected to node XGB.\nNode JOQ is connected to node XGB.\nNode VEN is connected to nodes MTT, XGB.\nNode DMO is connected to node MTT.\nNode CBP is connected to node XGB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MTT: [GRS, VEN, DMO],\nXGB: [WHY, JOQ, VEN, CBP],\nGRS: [MTT],\nWHY: [XGB],\nJOQ: [XGB],\nVEN: [MTT, XGB],\nDMO: [MTT],\nCBP: [XGB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MLR is connected to nodes TCX, FIY, PIN.\nNode TWF is connected to nodes ZCI, OCL.\nNode PBW is connected to nodes TCX, OCL.\nNode TCX is connected to nodes MLR, PBW.\nNode FIY is connected to node MLR.\nNode PIN is connected to node MLR.\nNode ZCI is connected to node TWF.\nNode OCL is connected to nodes TWF, PBW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MLR: [TCX, FIY, PIN],\nTWF: [ZCI, OCL],\nPBW: [TCX, OCL],\nTCX: [MLR, PBW],\nFIY: [MLR],\nPIN: [MLR],\nZCI: [TWF],\nOCL: [TWF, PBW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XJI is connected to nodes WHD, HXW.\nNode ETU is connected to nodes HXW, VPB.\nNode UQK is connected to nodes WHD, OWZ, CRG.\nNode XLC is connected to nodes OWZ, DSS, IQS.\nNode WHD is connected to nodes XJI, UQK.\nNode OWZ is connected to nodes UQK, XLC.\nNode HXW is connected to nodes XJI, ETU.\nNode VPB is connected to node ETU.\nNode DSS is connected to node XLC.\nNode IQS is connected to node XLC.\nNode CRG is connected to node UQK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XJI: [WHD, HXW],\nETU: [HXW, VPB],\nUQK: [WHD, OWZ, CRG],\nXLC: [OWZ, DSS, IQS],\nWHD: [XJI, UQK],\nOWZ: [UQK, XLC],\nHXW: [XJI, ETU],\nVPB: [ETU],\nDSS: [XLC],\nIQS: [XLC],\nCRG: [UQK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KYL is connected to nodes AAE, TMT.\nNode HKS is connected to nodes ZVL, ERK, IHR, MZC, IUO.\nNode PMG is connected to nodes ZVL, MZC, AAE, RSX.\nNode QST is connected to nodes ERK, IHR, IUO, RSX, TMT.\nNode JMY is connected to nodes ZVL, PEW, TMT.\nNode HTQ is connected to nodes ZVL, IHR, MZC, TMT.\nNode ZVL is connected to nodes HKS, PMG, JMY, HTQ.\nNode ERK is connected to nodes HKS, QST.\nNode IHR is connected to nodes HKS, QST, HTQ.\nNode MZC is connected to nodes HKS, PMG, HTQ.\nNode IUO is connected to nodes HKS, QST.\nNode AAE is connected to nodes KYL, PMG.\nNode RSX is connected to nodes PMG, QST.\nNode PEW is connected to node JMY.\nNode TMT is connected to nodes KYL, QST, JMY, HTQ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KYL: [AAE, TMT],\nHKS: [ZVL, ERK, IHR, MZC, IUO],\nPMG: [ZVL, MZC, AAE, RSX],\nQST: [ERK, IHR, IUO, RSX, TMT],\nJMY: [ZVL, PEW, TMT],\nHTQ: [ZVL, IHR, MZC, TMT],\nZVL: [HKS, PMG, JMY, HTQ],\nERK: [HKS, QST],\nIHR: [HKS, QST, HTQ],\nMZC: [HKS, PMG, HTQ],\nIUO: [HKS, QST],\nAAE: [KYL, PMG],\nRSX: [PMG, QST],\nPEW: [JMY],\nTMT: [KYL, QST, JMY, HTQ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GAI is connected to nodes JQN, BTM, OFR, KKA.\nNode PHR is connected to nodes BJS, BTM, OFR.\nNode UHU is connected to nodes RWI, SIV, BTM, KKA.\nNode RWI is connected to node UHU.\nNode JQN is connected to node GAI.\nNode SIV is connected to node UHU.\nNode BJS is connected to node PHR.\nNode BTM is connected to nodes GAI, PHR, UHU.\nNode OFR is connected to nodes GAI, PHR.\nNode KKA is connected to nodes GAI, UHU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GAI: [JQN, BTM, OFR, KKA],\nPHR: [BJS, BTM, OFR],\nUHU: [RWI, SIV, BTM, KKA],\nRWI: [UHU],\nJQN: [GAI],\nSIV: [UHU],\nBJS: [PHR],\nBTM: [GAI, PHR, UHU],\nOFR: [GAI, PHR],\nKKA: [GAI, UHU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FNJ is connected to nodes UUF, FIJ, NAY, QJJ.\nNode EGY is connected to nodes GQL, KKP, LQI.\nNode LWI is connected to nodes GDQ, FIJ, NAY.\nNode PNC is connected to nodes GQL, UUF, QJJ, KKP.\nNode GDQ is connected to node LWI.\nNode GQL is connected to nodes EGY, PNC.\nNode UUF is connected to nodes FNJ, PNC.\nNode FIJ is connected to nodes FNJ, LWI.\nNode NAY is connected to nodes FNJ, LWI.\nNode QJJ is connected to nodes FNJ, PNC.\nNode KKP is connected to nodes EGY, PNC.\nNode LQI is connected to node EGY.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FNJ: [UUF, FIJ, NAY, QJJ],\nEGY: [GQL, KKP, LQI],\nLWI: [GDQ, FIJ, NAY],\nPNC: [GQL, UUF, QJJ, KKP],\nGDQ: [LWI],\nGQL: [EGY, PNC],\nUUF: [FNJ, PNC],\nFIJ: [FNJ, LWI],\nNAY: [FNJ, LWI],\nQJJ: [FNJ, PNC],\nKKP: [EGY, PNC],\nLQI: [EGY]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FFK is connected to nodes XZA, VQQ, QPS.\nNode BNW is connected to nodes YXL, XZA, QPS, WNZ.\nNode GXW is connected to nodes FYO, IEA, QPS, PWO.\nNode DQD is connected to node IEA.\nNode QQX is connected to nodes FYO, IEA, FXC.\nNode CFZ is connected to nodes YXL, IEA, QPS.\nNode FYO is connected to nodes GXW, QQX.\nNode YXL is connected to nodes BNW, CFZ.\nNode XZA is connected to nodes FFK, BNW.\nNode VQQ is connected to node FFK.\nNode IEA is connected to nodes GXW, DQD, QQX, CFZ.\nNode QPS is connected to nodes FFK, BNW, GXW, CFZ.\nNode FXC is connected to node QQX.\nNode WNZ is connected to node BNW.\nNode PWO is connected to node GXW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FFK: [XZA, VQQ, QPS],\nBNW: [YXL, XZA, QPS, WNZ],\nGXW: [FYO, IEA, QPS, PWO],\nDQD: [IEA],\nQQX: [FYO, IEA, FXC],\nCFZ: [YXL, IEA, QPS],\nFYO: [GXW, QQX],\nYXL: [BNW, CFZ],\nXZA: [FFK, BNW],\nVQQ: [FFK],\nIEA: [GXW, DQD, QQX, CFZ],\nQPS: [FFK, BNW, GXW, CFZ],\nFXC: [QQX],\nWNZ: [BNW],\nPWO: [GXW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DZT is connected to nodes GLW, FRB, FQU, UZY, DOR.\nNode LTY is connected to nodes VGS, VFO, GLW, FRB, UXE, ZUT, DOR.\nNode QWO is connected to nodes VGS, VCU.\nNode DHP is connected to nodes VCU, VFO, BZR, ZUT, DOR.\nNode VGS is connected to nodes LTY, QWO.\nNode VCU is connected to nodes QWO, DHP.\nNode VFO is connected to nodes LTY, DHP.\nNode BZR is connected to node DHP.\nNode GLW is connected to nodes DZT, LTY.\nNode FRB is connected to nodes DZT, LTY.\nNode UXE is connected to node LTY.\nNode FQU is connected to node DZT.\nNode ZUT is connected to nodes LTY, DHP.\nNode UZY is connected to node DZT.\nNode DOR is connected to nodes DZT, LTY, DHP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DZT: [GLW, FRB, FQU, UZY, DOR],\nLTY: [VGS, VFO, GLW, FRB, UXE, ZUT, DOR],\nQWO: [VGS, VCU],\nDHP: [VCU, VFO, BZR, ZUT, DOR],\nVGS: [LTY, QWO],\nVCU: [QWO, DHP],\nVFO: [LTY, DHP],\nBZR: [DHP],\nGLW: [DZT, LTY],\nFRB: [DZT, LTY],\nUXE: [LTY],\nFQU: [DZT],\nZUT: [LTY, DHP],\nUZY: [DZT],\nDOR: [DZT, LTY, DHP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OOB is connected to nodes CUR, VAT, VZT.\nNode WZH is connected to nodes CUR, GIH, QUO, VZT.\nNode KYX is connected to nodes MVR, VAT.\nNode JTH is connected to nodes VAT, QUO.\nNode CUR is connected to nodes OOB, WZH.\nNode MVR is connected to node KYX.\nNode VAT is connected to nodes OOB, KYX, JTH.\nNode GIH is connected to node WZH.\nNode QUO is connected to nodes WZH, JTH.\nNode VZT is connected to nodes OOB, WZH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OOB: [CUR, VAT, VZT],\nWZH: [CUR, GIH, QUO, VZT],\nKYX: [MVR, VAT],\nJTH: [VAT, QUO],\nCUR: [OOB, WZH],\nMVR: [KYX],\nVAT: [OOB, KYX, JTH],\nGIH: [WZH],\nQUO: [WZH, JTH],\nVZT: [OOB, WZH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TYK is connected to nodes WAK, OOU, TSV, ZPK, KWL.\nNode BDU is connected to nodes OOU, ZPK.\nNode GFW is connected to nodes WAK, CYA, TSV, ZPK, KWL.\nNode WAK is connected to nodes TYK, GFW.\nNode OOU is connected to nodes TYK, BDU.\nNode CYA is connected to node GFW.\nNode TSV is connected to nodes TYK, GFW.\nNode ZPK is connected to nodes TYK, BDU, GFW.\nNode KWL is connected to nodes TYK, GFW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TYK: [WAK, OOU, TSV, ZPK, KWL],\nBDU: [OOU, ZPK],\nGFW: [WAK, CYA, TSV, ZPK, KWL],\nWAK: [TYK, GFW],\nOOU: [TYK, BDU],\nCYA: [GFW],\nTSV: [TYK, GFW],\nZPK: [TYK, BDU, GFW],\nKWL: [TYK, GFW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NWM is connected to nodes WOI, QNH.\nNode KMY is connected to nodes EZV, QNH, VWU.\nNode TBU is connected to nodes WOI, EZV, QNH, VWU.\nNode WYM is connected to nodes WOI, QNH.\nNode SYF is connected to nodes VAT, EZV, MML, VWU.\nNode WJV is connected to nodes VAT, WOI, JWD, VWU.\nNode OQA is connected to nodes PHL, JWD, QNH.\nNode PHL is connected to node OQA.\nNode VAT is connected to nodes SYF, WJV.\nNode WOI is connected to nodes NWM, TBU, WYM, WJV.\nNode EZV is connected to nodes KMY, TBU, SYF.\nNode JWD is connected to nodes WJV, OQA.\nNode QNH is connected to nodes NWM, KMY, TBU, WYM, OQA.\nNode MML is connected to node SYF.\nNode VWU is connected to nodes KMY, TBU, SYF, WJV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NWM: [WOI, QNH],\nKMY: [EZV, QNH, VWU],\nTBU: [WOI, EZV, QNH, VWU],\nWYM: [WOI, QNH],\nSYF: [VAT, EZV, MML, VWU],\nWJV: [VAT, WOI, JWD, VWU],\nOQA: [PHL, JWD, QNH],\nPHL: [OQA],\nVAT: [SYF, WJV],\nWOI: [NWM, TBU, WYM, WJV],\nEZV: [KMY, TBU, SYF],\nJWD: [WJV, OQA],\nQNH: [NWM, KMY, TBU, WYM, OQA],\nMML: [SYF],\nVWU: [KMY, TBU, SYF, WJV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YWH is connected to node IJX.\nNode OZE is connected to nodes UAR, BYZ.\nNode YDR is connected to nodes UAR, IJX, LWT, VAU.\nNode HMM is connected to nodes XMD, BYZ, LWT, VAU.\nNode UAR is connected to nodes OZE, YDR.\nNode XMD is connected to node HMM.\nNode BYZ is connected to nodes OZE, HMM.\nNode IJX is connected to nodes YWH, YDR.\nNode LWT is connected to nodes YDR, HMM.\nNode VAU is connected to nodes YDR, HMM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YWH: [IJX],\nOZE: [UAR, BYZ],\nYDR: [UAR, IJX, LWT, VAU],\nHMM: [XMD, BYZ, LWT, VAU],\nUAR: [OZE, YDR],\nXMD: [HMM],\nBYZ: [OZE, HMM],\nIJX: [YWH, YDR],\nLWT: [YDR, HMM],\nVAU: [YDR, HMM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node APK is connected to nodes LNP, JSS.\nNode LHP is connected to nodes QLE, GGE, LNP, XAZ.\nNode ZIC is connected to node XAZ.\nNode VPJ is connected to nodes LNP, JSS.\nNode QLE is connected to node LHP.\nNode GGE is connected to node LHP.\nNode LNP is connected to nodes APK, LHP, VPJ.\nNode XAZ is connected to nodes LHP, ZIC.\nNode JSS is connected to nodes APK, VPJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{APK: [LNP, JSS],\nLHP: [QLE, GGE, LNP, XAZ],\nZIC: [XAZ],\nVPJ: [LNP, JSS],\nQLE: [LHP],\nGGE: [LHP],\nLNP: [APK, LHP, VPJ],\nXAZ: [LHP, ZIC],\nJSS: [APK, VPJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UYK is connected to nodes YPM, ZJI, KCZ, HLN, WRE.\nNode QQT is connected to nodes HLN, GIB.\nNode YPM is connected to node UYK.\nNode ZJI is connected to node UYK.\nNode KCZ is connected to node UYK.\nNode HLN is connected to nodes UYK, QQT.\nNode WRE is connected to node UYK.\nNode GIB is connected to node QQT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UYK: [YPM, ZJI, KCZ, HLN, WRE],\nQQT: [HLN, GIB],\nYPM: [UYK],\nZJI: [UYK],\nKCZ: [UYK],\nHLN: [UYK, QQT],\nWRE: [UYK],\nGIB: [QQT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LQG is connected to node PYX.\nNode MMZ is connected to nodes GCR, ZZZ.\nNode SMF is connected to nodes OMD, EEX, XIB.\nNode NTY is connected to nodes XIB, ZUL.\nNode DTC is connected to node XIB.\nNode RQJ is connected to nodes SEX, ZZZ, PYX, ZUL.\nNode OMD is connected to node SMF.\nNode SEX is connected to node RQJ.\nNode GCR is connected to node MMZ.\nNode ZZZ is connected to nodes MMZ, RQJ.\nNode EEX is connected to node SMF.\nNode PYX is connected to nodes LQG, RQJ.\nNode XIB is connected to nodes SMF, NTY, DTC.\nNode ZUL is connected to nodes NTY, RQJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LQG: [PYX],\nMMZ: [GCR, ZZZ],\nSMF: [OMD, EEX, XIB],\nNTY: [XIB, ZUL],\nDTC: [XIB],\nRQJ: [SEX, ZZZ, PYX, ZUL],\nOMD: [SMF],\nSEX: [RQJ],\nGCR: [MMZ],\nZZZ: [MMZ, RQJ],\nEEX: [SMF],\nPYX: [LQG, RQJ],\nXIB: [SMF, NTY, DTC],\nZUL: [NTY, RQJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VSF is connected to node BVF.\nNode PBX is connected to nodes RGQ, XSA, JXL.\nNode AMO is connected to node XSA.\nNode QDG is connected to nodes XSA, BVF, SHD.\nNode RGQ is connected to node PBX.\nNode XSA is connected to nodes PBX, AMO, QDG.\nNode JXL is connected to node PBX.\nNode BVF is connected to nodes VSF, QDG.\nNode SHD is connected to node QDG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VSF: [BVF],\nPBX: [RGQ, XSA, JXL],\nAMO: [XSA],\nQDG: [XSA, BVF, SHD],\nRGQ: [PBX],\nXSA: [PBX, AMO, QDG],\nJXL: [PBX],\nBVF: [VSF, QDG],\nSHD: [QDG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OKW is connected to nodes UUD, OCG, WBD.\nNode ONJ is connected to nodes IDB, WBD.\nNode FRA is connected to nodes OCT, UUD, ODS, OCG, WBD.\nNode TMW is connected to nodes CES, VSL, ODS, YJS, OCG, WBD.\nNode YZD is connected to nodes IDB, UUD, VSL, OCG.\nNode OCT is connected to node FRA.\nNode IDB is connected to nodes ONJ, YZD.\nNode UUD is connected to nodes OKW, FRA, YZD.\nNode CES is connected to node TMW.\nNode VSL is connected to nodes TMW, YZD.\nNode ODS is connected to nodes FRA, TMW.\nNode YJS is connected to node TMW.\nNode OCG is connected to nodes OKW, FRA, TMW, YZD.\nNode WBD is connected to nodes OKW, ONJ, FRA, TMW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OKW: [UUD, OCG, WBD],\nONJ: [IDB, WBD],\nFRA: [OCT, UUD, ODS, OCG, WBD],\nTMW: [CES, VSL, ODS, YJS, OCG, WBD],\nYZD: [IDB, UUD, VSL, OCG],\nOCT: [FRA],\nIDB: [ONJ, YZD],\nUUD: [OKW, FRA, YZD],\nCES: [TMW],\nVSL: [TMW, YZD],\nODS: [FRA, TMW],\nYJS: [TMW],\nOCG: [OKW, FRA, TMW, YZD],\nWBD: [OKW, ONJ, FRA, TMW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TUZ is connected to nodes ENL, GYL, YVQ.\nNode TDX is connected to nodes ULJ, HYB, CQY, WCJ.\nNode SGK is connected to nodes MZN, CQY, WCJ.\nNode YCH is connected to nodes ENL, ULJ, YVQ, WCJ.\nNode MZN is connected to node SGK.\nNode ENL is connected to nodes TUZ, YCH.\nNode GYL is connected to node TUZ.\nNode ULJ is connected to nodes TDX, YCH.\nNode HYB is connected to node TDX.\nNode YVQ is connected to nodes TUZ, YCH.\nNode CQY is connected to nodes TDX, SGK.\nNode WCJ is connected to nodes TDX, SGK, YCH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TUZ: [ENL, GYL, YVQ],\nTDX: [ULJ, HYB, CQY, WCJ],\nSGK: [MZN, CQY, WCJ],\nYCH: [ENL, ULJ, YVQ, WCJ],\nMZN: [SGK],\nENL: [TUZ, YCH],\nGYL: [TUZ],\nULJ: [TDX, YCH],\nHYB: [TDX],\nYVQ: [TUZ, YCH],\nCQY: [TDX, SGK],\nWCJ: [TDX, SGK, YCH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZHS is connected to nodes LJZ, DNQ, XUP, FMJ, KRK.\nNode EMU is connected to nodes BYM, FKO.\nNode JIR is connected to nodes BYM, LJZ, KRK.\nNode FFS is connected to nodes BYM, INO, ZNT, FKO, DNQ, XUP.\nNode CYI is connected to nodes BYM, INO, EAI, XUP.\nNode BYM is connected to nodes EMU, JIR, FFS, CYI.\nNode INO is connected to nodes FFS, CYI.\nNode ZNT is connected to node FFS.\nNode LJZ is connected to nodes ZHS, JIR.\nNode FKO is connected to nodes EMU, FFS.\nNode DNQ is connected to nodes ZHS, FFS.\nNode EAI is connected to node CYI.\nNode XUP is connected to nodes ZHS, FFS, CYI.\nNode FMJ is connected to node ZHS.\nNode KRK is connected to nodes ZHS, JIR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZHS: [LJZ, DNQ, XUP, FMJ, KRK],\nEMU: [BYM, FKO],\nJIR: [BYM, LJZ, KRK],\nFFS: [BYM, INO, ZNT, FKO, DNQ, XUP],\nCYI: [BYM, INO, EAI, XUP],\nBYM: [EMU, JIR, FFS, CYI],\nINO: [FFS, CYI],\nZNT: [FFS],\nLJZ: [ZHS, JIR],\nFKO: [EMU, FFS],\nDNQ: [ZHS, FFS],\nEAI: [CYI],\nXUP: [ZHS, FFS, CYI],\nFMJ: [ZHS],\nKRK: [ZHS, JIR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EIO is connected to nodes ZNN, LLN, GMH, CLK, LOC.\nNode YBR is connected to nodes DDH, LOC.\nNode QBJ is connected to nodes ZNN, LLN, LJL, SCP.\nNode ZNN is connected to nodes EIO, QBJ.\nNode LLN is connected to nodes EIO, QBJ.\nNode LJL is connected to node QBJ.\nNode SCP is connected to node QBJ.\nNode GMH is connected to node EIO.\nNode DDH is connected to node YBR.\nNode CLK is connected to node EIO.\nNode LOC is connected to nodes EIO, YBR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EIO: [ZNN, LLN, GMH, CLK, LOC],\nYBR: [DDH, LOC],\nQBJ: [ZNN, LLN, LJL, SCP],\nZNN: [EIO, QBJ],\nLLN: [EIO, QBJ],\nLJL: [QBJ],\nSCP: [QBJ],\nGMH: [EIO],\nDDH: [YBR],\nCLK: [EIO],\nLOC: [EIO, YBR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ICL is connected to nodes LAU, YNE, GLN.\nNode ARK is connected to nodes LAU, YNE, JFD, KXX, FJA.\nNode MUE is connected to nodes LAU, YNE, JFD, GLN, KXX, NWL, ODV.\nNode IQR is connected to nodes LAU, GLN, KXX, ODV.\nNode UKZ is connected to nodes KXX, NWL.\nNode LAU is connected to nodes ICL, ARK, MUE, IQR.\nNode YNE is connected to nodes ICL, ARK, MUE.\nNode JFD is connected to nodes ARK, MUE.\nNode GLN is connected to nodes ICL, MUE, IQR.\nNode KXX is connected to nodes ARK, MUE, IQR, UKZ.\nNode NWL is connected to nodes MUE, UKZ.\nNode FJA is connected to node ARK.\nNode ODV is connected to nodes MUE, IQR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ICL: [LAU, YNE, GLN],\nARK: [LAU, YNE, JFD, KXX, FJA],\nMUE: [LAU, YNE, JFD, GLN, KXX, NWL, ODV],\nIQR: [LAU, GLN, KXX, ODV],\nUKZ: [KXX, NWL],\nLAU: [ICL, ARK, MUE, IQR],\nYNE: [ICL, ARK, MUE],\nJFD: [ARK, MUE],\nGLN: [ICL, MUE, IQR],\nKXX: [ARK, MUE, IQR, UKZ],\nNWL: [MUE, UKZ],\nFJA: [ARK],\nODV: [MUE, IQR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZOU is connected to nodes NSJ, QKQ, JZO, UEF.\nNode CDR is connected to nodes VQS, QKQ, JZO, DRG.\nNode OAV is connected to nodes VQS, QKQ, AOR, UEF.\nNode GQW is connected to node DRG.\nNode NLG is connected to nodes NSJ, VQS, QKQ, JZO.\nNode NSJ is connected to nodes ZOU, NLG.\nNode VQS is connected to nodes CDR, OAV, NLG.\nNode QKQ is connected to nodes ZOU, CDR, OAV, NLG.\nNode JZO is connected to nodes ZOU, CDR, NLG.\nNode DRG is connected to nodes CDR, GQW.\nNode AOR is connected to node OAV.\nNode UEF is connected to nodes ZOU, OAV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZOU: [NSJ, QKQ, JZO, UEF],\nCDR: [VQS, QKQ, JZO, DRG],\nOAV: [VQS, QKQ, AOR, UEF],\nGQW: [DRG],\nNLG: [NSJ, VQS, QKQ, JZO],\nNSJ: [ZOU, NLG],\nVQS: [CDR, OAV, NLG],\nQKQ: [ZOU, CDR, OAV, NLG],\nJZO: [ZOU, CDR, NLG],\nDRG: [CDR, GQW],\nAOR: [OAV],\nUEF: [ZOU, OAV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XQN is connected to nodes FJC, OTD.\nNode KRJ is connected to nodes FJE, FZE.\nNode SMZ is connected to nodes XNR, FJC, IKU, FZE, HJP.\nNode XNR is connected to node SMZ.\nNode FJC is connected to nodes XQN, SMZ.\nNode IKU is connected to node SMZ.\nNode FJE is connected to node KRJ.\nNode OTD is connected to node XQN.\nNode FZE is connected to nodes KRJ, SMZ.\nNode HJP is connected to node SMZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XQN: [FJC, OTD],\nKRJ: [FJE, FZE],\nSMZ: [XNR, FJC, IKU, FZE, HJP],\nXNR: [SMZ],\nFJC: [XQN, SMZ],\nIKU: [SMZ],\nFJE: [KRJ],\nOTD: [XQN],\nFZE: [KRJ, SMZ],\nHJP: [SMZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node PAB is connected to nodes IND, ODU.\nNode DAT is connected to nodes KJU, UUR, IND, SIB.\nNode BIR is connected to nodes KJU, IND.\nNode LNX is connected to nodes KJU, IND, ODU, SIB.\nNode KJU is connected to nodes DAT, BIR, LNX.\nNode UUR is connected to node DAT.\nNode IND is connected to nodes PAB, DAT, BIR, LNX.\nNode ODU is connected to nodes PAB, LNX.\nNode SIB is connected to nodes DAT, LNX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{PAB: [IND, ODU],\nDAT: [KJU, UUR, IND, SIB],\nBIR: [KJU, IND],\nLNX: [KJU, IND, ODU, SIB],\nKJU: [DAT, BIR, LNX],\nUUR: [DAT],\nIND: [PAB, DAT, BIR, LNX],\nODU: [PAB, LNX],\nSIB: [DAT, LNX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YWT is connected to nodes OBV, JLB, PXS, OGI.\nNode XBE is connected to nodes YVI, KAT, PXS, OGI.\nNode DMM is connected to nodes YVI, JOZ, OBV, PXS.\nNode YVI is connected to nodes XBE, DMM.\nNode KAT is connected to node XBE.\nNode JOZ is connected to node DMM.\nNode OBV is connected to nodes YWT, DMM.\nNode JLB is connected to node YWT.\nNode PXS is connected to nodes YWT, XBE, DMM.\nNode OGI is connected to nodes YWT, XBE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YWT: [OBV, JLB, PXS, OGI],\nXBE: [YVI, KAT, PXS, OGI],\nDMM: [YVI, JOZ, OBV, PXS],\nYVI: [XBE, DMM],\nKAT: [XBE],\nJOZ: [DMM],\nOBV: [YWT, DMM],\nJLB: [YWT],\nPXS: [YWT, XBE, DMM],\nOGI: [YWT, XBE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IOE is connected to nodes IQR, ZPC, XBB, QTA, ZOF, WJT.\nNode ZCK is connected to nodes ZPC, KRN, RKO, QTA, TFM, ZOF, WJT.\nNode NCW is connected to nodes IQR, ZPC, QTA, TFM.\nNode IXP is connected to nodes IQR, KRN, RKO, QTA, TFM, ZOF, WJT, HTG.\nNode IQR is connected to nodes IOE, NCW, IXP.\nNode ZPC is connected to nodes IOE, ZCK, NCW.\nNode KRN is connected to nodes ZCK, IXP.\nNode RKO is connected to nodes ZCK, IXP.\nNode XBB is connected to node IOE.\nNode QTA is connected to nodes IOE, ZCK, NCW, IXP.\nNode TFM is connected to nodes ZCK, NCW, IXP.\nNode ZOF is connected to nodes IOE, ZCK, IXP.\nNode WJT is connected to nodes IOE, ZCK, IXP.\nNode HTG is connected to node IXP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IOE: [IQR, ZPC, XBB, QTA, ZOF, WJT],\nZCK: [ZPC, KRN, RKO, QTA, TFM, ZOF, WJT],\nNCW: [IQR, ZPC, QTA, TFM],\nIXP: [IQR, KRN, RKO, QTA, TFM, ZOF, WJT, HTG],\nIQR: [IOE, NCW, IXP],\nZPC: [IOE, ZCK, NCW],\nKRN: [ZCK, IXP],\nRKO: [ZCK, IXP],\nXBB: [IOE],\nQTA: [IOE, ZCK, NCW, IXP],\nTFM: [ZCK, NCW, IXP],\nZOF: [IOE, ZCK, IXP],\nWJT: [IOE, ZCK, IXP],\nHTG: [IXP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SFX is connected to nodes BXJ, KXQ, YTP, DFK.\nNode ZFF is connected to nodes BXJ, YTP.\nNode PRA is connected to nodes BXJ, DYP, KZW, YTP, DFK.\nNode EMI is connected to nodes BXJ, DYP.\nNode JND is connected to nodes BXJ, DYP, KXQ, KZW.\nNode BXJ is connected to nodes SFX, ZFF, PRA, EMI, JND.\nNode DYP is connected to nodes PRA, EMI, JND.\nNode KXQ is connected to nodes SFX, JND.\nNode KZW is connected to nodes PRA, JND.\nNode YTP is connected to nodes SFX, ZFF, PRA.\nNode DFK is connected to nodes SFX, PRA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SFX: [BXJ, KXQ, YTP, DFK],\nZFF: [BXJ, YTP],\nPRA: [BXJ, DYP, KZW, YTP, DFK],\nEMI: [BXJ, DYP],\nJND: [BXJ, DYP, KXQ, KZW],\nBXJ: [SFX, ZFF, PRA, EMI, JND],\nDYP: [PRA, EMI, JND],\nKXQ: [SFX, JND],\nKZW: [PRA, JND],\nYTP: [SFX, ZFF, PRA],\nDFK: [SFX, PRA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GPE is connected to nodes JAD, RHZ, UHI.\nNode EQE is connected to nodes RHZ, ZHO, ESC, QUP, IWX.\nNode JAD is connected to node GPE.\nNode RHZ is connected to nodes GPE, EQE.\nNode ZHO is connected to node EQE.\nNode UHI is connected to node GPE.\nNode ESC is connected to node EQE.\nNode QUP is connected to node EQE.\nNode IWX is connected to node EQE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GPE: [JAD, RHZ, UHI],\nEQE: [RHZ, ZHO, ESC, QUP, IWX],\nJAD: [GPE],\nRHZ: [GPE, EQE],\nZHO: [EQE],\nUHI: [GPE],\nESC: [EQE],\nQUP: [EQE],\nIWX: [EQE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NMJ is connected to nodes MHD, KQC, ZER, TOL.\nNode FLF is connected to nodes KQC, MXM, HGF.\nNode OIZ is connected to nodes DCD, MHD, KMA, KQC.\nNode HHU is connected to nodes DCD, VJB, KMA, HXD, HGF.\nNode YWM is connected to nodes DCD, MHD, KMA, MXM, TOL, HGF.\nNode DCD is connected to nodes OIZ, HHU, YWM.\nNode VJB is connected to node HHU.\nNode MHD is connected to nodes NMJ, OIZ, YWM.\nNode KMA is connected to nodes OIZ, HHU, YWM.\nNode KQC is connected to nodes NMJ, FLF, OIZ.\nNode MXM is connected to nodes FLF, YWM.\nNode HXD is connected to node HHU.\nNode ZER is connected to node NMJ.\nNode TOL is connected to nodes NMJ, YWM.\nNode HGF is connected to nodes FLF, HHU, YWM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NMJ: [MHD, KQC, ZER, TOL],\nFLF: [KQC, MXM, HGF],\nOIZ: [DCD, MHD, KMA, KQC],\nHHU: [DCD, VJB, KMA, HXD, HGF],\nYWM: [DCD, MHD, KMA, MXM, TOL, HGF],\nDCD: [OIZ, HHU, YWM],\nVJB: [HHU],\nMHD: [NMJ, OIZ, YWM],\nKMA: [OIZ, HHU, YWM],\nKQC: [NMJ, FLF, OIZ],\nMXM: [FLF, YWM],\nHXD: [HHU],\nZER: [NMJ],\nTOL: [NMJ, YWM],\nHGF: [FLF, HHU, YWM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VEJ is connected to nodes RVV, DFA.\nNode DRA is connected to nodes DFA, RRT.\nNode PKT is connected to nodes URF, AVK, IEL, SHA.\nNode WYV is connected to nodes DFA, URF, SHA.\nNode BCO is connected to nodes URF, AVK, IEL, SHA.\nNode YSA is connected to nodes DFA, AVK, RRT, COG.\nNode RVV is connected to node VEJ.\nNode DFA is connected to nodes VEJ, DRA, WYV, YSA.\nNode URF is connected to nodes PKT, WYV, BCO.\nNode AVK is connected to nodes PKT, BCO, YSA.\nNode RRT is connected to nodes DRA, YSA.\nNode IEL is connected to nodes PKT, BCO.\nNode COG is connected to node YSA.\nNode SHA is connected to nodes PKT, WYV, BCO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VEJ: [RVV, DFA],\nDRA: [DFA, RRT],\nPKT: [URF, AVK, IEL, SHA],\nWYV: [DFA, URF, SHA],\nBCO: [URF, AVK, IEL, SHA],\nYSA: [DFA, AVK, RRT, COG],\nRVV: [VEJ],\nDFA: [VEJ, DRA, WYV, YSA],\nURF: [PKT, WYV, BCO],\nAVK: [PKT, BCO, YSA],\nRRT: [DRA, YSA],\nIEL: [PKT, BCO],\nCOG: [YSA],\nSHA: [PKT, WYV, BCO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GDS is connected to nodes NZS, WVQ.\nNode IOF is connected to nodes EHR, DUB.\nNode JZL is connected to node WVQ.\nNode IEW is connected to nodes AYT, WIC.\nNode EMX is connected to nodes OXU, HZL, WIC.\nNode HHM is connected to nodes EHR, OXU, HZL.\nNode GUG is connected to nodes NZS, EHR, DUB.\nNode NZS is connected to nodes GDS, GUG.\nNode EHR is connected to nodes IOF, HHM, GUG.\nNode AYT is connected to node IEW.\nNode WVQ is connected to nodes GDS, JZL.\nNode DUB is connected to nodes IOF, GUG.\nNode OXU is connected to nodes EMX, HHM.\nNode HZL is connected to nodes EMX, HHM.\nNode WIC is connected to nodes IEW, EMX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GDS: [NZS, WVQ],\nIOF: [EHR, DUB],\nJZL: [WVQ],\nIEW: [AYT, WIC],\nEMX: [OXU, HZL, WIC],\nHHM: [EHR, OXU, HZL],\nGUG: [NZS, EHR, DUB],\nNZS: [GDS, GUG],\nEHR: [IOF, HHM, GUG],\nAYT: [IEW],\nWVQ: [GDS, JZL],\nDUB: [IOF, GUG],\nOXU: [EMX, HHM],\nHZL: [EMX, HHM],\nWIC: [IEW, EMX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ETR is connected to nodes FKR, KCQ, QHY, CDZ, NEV, QSK.\nNode UAM is connected to nodes KCQ, QHY, CDZ, NEV.\nNode BFQ is connected to nodes FKR, KCQ, QHY, CDZ.\nNode SFM is connected to nodes FKR, QHY, TPH.\nNode FKB is connected to nodes CDZ, QSK.\nNode MPA is connected to nodes QHY, QSK.\nNode FKR is connected to nodes ETR, BFQ, SFM.\nNode KCQ is connected to nodes ETR, UAM, BFQ.\nNode QHY is connected to nodes ETR, UAM, BFQ, SFM, MPA.\nNode CDZ is connected to nodes ETR, UAM, BFQ, FKB.\nNode NEV is connected to nodes ETR, UAM.\nNode QSK is connected to nodes ETR, FKB, MPA.\nNode TPH is connected to node SFM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ETR: [FKR, KCQ, QHY, CDZ, NEV, QSK],\nUAM: [KCQ, QHY, CDZ, NEV],\nBFQ: [FKR, KCQ, QHY, CDZ],\nSFM: [FKR, QHY, TPH],\nFKB: [CDZ, QSK],\nMPA: [QHY, QSK],\nFKR: [ETR, BFQ, SFM],\nKCQ: [ETR, UAM, BFQ],\nQHY: [ETR, UAM, BFQ, SFM, MPA],\nCDZ: [ETR, UAM, BFQ, FKB],\nNEV: [ETR, UAM],\nQSK: [ETR, FKB, MPA],\nTPH: [SFM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZWN is connected to nodes UTN, SNZ.\nNode JSY is connected to nodes HXG, OMZ, CZT.\nNode JUB is connected to nodes UTN, HXG, OMZ, AWR.\nNode UTN is connected to nodes ZWN, JUB.\nNode HXG is connected to nodes JSY, JUB.\nNode OMZ is connected to nodes JSY, JUB.\nNode AWR is connected to node JUB.\nNode CZT is connected to node JSY.\nNode SNZ is connected to node ZWN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZWN: [UTN, SNZ],\nJSY: [HXG, OMZ, CZT],\nJUB: [UTN, HXG, OMZ, AWR],\nUTN: [ZWN, JUB],\nHXG: [JSY, JUB],\nOMZ: [JSY, JUB],\nAWR: [JUB],\nCZT: [JSY],\nSNZ: [ZWN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VBQ is connected to nodes FRZ, IPI, EEV, UFX.\nNode JYR is connected to nodes CFG, DUX, WSH.\nNode ZJK is connected to nodes CFG, DUX, EEV, UFX.\nNode UOK is connected to nodes SFN, WSH, UFX.\nNode QGJ is connected to nodes FRZ, SFN.\nNode GJK is connected to nodes CFG, IPI, WSH.\nNode CFG is connected to nodes JYR, ZJK, GJK.\nNode FRZ is connected to nodes VBQ, QGJ.\nNode DUX is connected to nodes JYR, ZJK.\nNode IPI is connected to nodes VBQ, GJK.\nNode SFN is connected to nodes UOK, QGJ.\nNode WSH is connected to nodes JYR, UOK, GJK.\nNode EEV is connected to nodes VBQ, ZJK.\nNode UFX is connected to nodes VBQ, ZJK, UOK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VBQ: [FRZ, IPI, EEV, UFX],\nJYR: [CFG, DUX, WSH],\nZJK: [CFG, DUX, EEV, UFX],\nUOK: [SFN, WSH, UFX],\nQGJ: [FRZ, SFN],\nGJK: [CFG, IPI, WSH],\nCFG: [JYR, ZJK, GJK],\nFRZ: [VBQ, QGJ],\nDUX: [JYR, ZJK],\nIPI: [VBQ, GJK],\nSFN: [UOK, QGJ],\nWSH: [JYR, UOK, GJK],\nEEV: [VBQ, ZJK],\nUFX: [VBQ, ZJK, UOK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SGP is connected to node RDI.\nNode THJ is connected to nodes RDI, HAP, VCZ, XXI, CLK.\nNode EEI is connected to nodes HAP, XXI, MJB, TPH.\nNode RDI is connected to nodes SGP, THJ.\nNode HAP is connected to nodes THJ, EEI.\nNode VCZ is connected to node THJ.\nNode XXI is connected to nodes THJ, EEI.\nNode CLK is connected to node THJ.\nNode MJB is connected to node EEI.\nNode TPH is connected to node EEI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SGP: [RDI],\nTHJ: [RDI, HAP, VCZ, XXI, CLK],\nEEI: [HAP, XXI, MJB, TPH],\nRDI: [SGP, THJ],\nHAP: [THJ, EEI],\nVCZ: [THJ],\nXXI: [THJ, EEI],\nCLK: [THJ],\nMJB: [EEI],\nTPH: [EEI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YNJ is connected to nodes LEI, RLD.\nNode ALU is connected to nodes DBB, WLO.\nNode TNZ is connected to nodes ZQV, RLD.\nNode TWH is connected to nodes DBB, WWY, OKH, ZQV, RLD, BQO.\nNode DBB is connected to nodes ALU, TWH.\nNode WWY is connected to node TWH.\nNode LEI is connected to node YNJ.\nNode OKH is connected to node TWH.\nNode WLO is connected to node ALU.\nNode ZQV is connected to nodes TNZ, TWH.\nNode RLD is connected to nodes YNJ, TNZ, TWH.\nNode BQO is connected to node TWH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YNJ: [LEI, RLD],\nALU: [DBB, WLO],\nTNZ: [ZQV, RLD],\nTWH: [DBB, WWY, OKH, ZQV, RLD, BQO],\nDBB: [ALU, TWH],\nWWY: [TWH],\nLEI: [YNJ],\nOKH: [TWH],\nWLO: [ALU],\nZQV: [TNZ, TWH],\nRLD: [YNJ, TNZ, TWH],\nBQO: [TWH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TNC is connected to nodes YJF, TSE, RVC.\nNode PSO is connected to nodes ZQG, YJF, INT, JWR, TSE, WKJ.\nNode KGX is connected to nodes ZQG, INT, TXS, WKJ.\nNode ZQG is connected to nodes PSO, KGX.\nNode YJF is connected to nodes TNC, PSO.\nNode INT is connected to nodes PSO, KGX.\nNode JWR is connected to node PSO.\nNode TSE is connected to nodes TNC, PSO.\nNode RVC is connected to node TNC.\nNode TXS is connected to node KGX.\nNode WKJ is connected to nodes PSO, KGX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TNC: [YJF, TSE, RVC],\nPSO: [ZQG, YJF, INT, JWR, TSE, WKJ],\nKGX: [ZQG, INT, TXS, WKJ],\nZQG: [PSO, KGX],\nYJF: [TNC, PSO],\nINT: [PSO, KGX],\nJWR: [PSO],\nTSE: [TNC, PSO],\nRVC: [TNC],\nTXS: [KGX],\nWKJ: [PSO, KGX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DFM is connected to nodes OEC, FGH.\nNode XVO is connected to nodes IRR, QXM.\nNode ZED is connected to nodes OEC, BEO, NMR, QXM.\nNode OEC is connected to nodes DFM, ZED.\nNode BEO is connected to node ZED.\nNode FGH is connected to node DFM.\nNode IRR is connected to node XVO.\nNode NMR is connected to node ZED.\nNode QXM is connected to nodes XVO, ZED.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DFM: [OEC, FGH],\nXVO: [IRR, QXM],\nZED: [OEC, BEO, NMR, QXM],\nOEC: [DFM, ZED],\nBEO: [ZED],\nFGH: [DFM],\nIRR: [XVO],\nNMR: [ZED],\nQXM: [XVO, ZED]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CZW is connected to nodes ORL, IKY, LYL, RUM.\nNode LEL is connected to nodes ORL, FCG, RUM.\nNode DDJ is connected to nodes OLU, XWF.\nNode MTI is connected to nodes QKH, OLU.\nNode JKZ is connected to nodes IKY, OLU.\nNode LSW is connected to node RUM.\nNode QKH is connected to node MTI.\nNode ORL is connected to nodes CZW, LEL.\nNode IKY is connected to nodes CZW, JKZ.\nNode LYL is connected to node CZW.\nNode OLU is connected to nodes DDJ, MTI, JKZ.\nNode FCG is connected to node LEL.\nNode XWF is connected to node DDJ.\nNode RUM is connected to nodes CZW, LEL, LSW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CZW: [ORL, IKY, LYL, RUM],\nLEL: [ORL, FCG, RUM],\nDDJ: [OLU, XWF],\nMTI: [QKH, OLU],\nJKZ: [IKY, OLU],\nLSW: [RUM],\nQKH: [MTI],\nORL: [CZW, LEL],\nIKY: [CZW, JKZ],\nLYL: [CZW],\nOLU: [DDJ, MTI, JKZ],\nFCG: [LEL],\nXWF: [DDJ],\nRUM: [CZW, LEL, LSW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OLD is connected to nodes CBL, ESE.\nNode ZQA is connected to nodes BKO, CBL, ESE.\nNode KDG is connected to nodes HBR, ESE, GCN.\nNode AVZ is connected to nodes OHS, QOV.\nNode WOS is connected to nodes WKP, OHS, CBL, ESE, GCN.\nNode ATM is connected to nodes BKO, HBR, ESE, QOV.\nNode WKP is connected to node WOS.\nNode OHS is connected to nodes AVZ, WOS.\nNode BKO is connected to nodes ZQA, ATM.\nNode HBR is connected to nodes KDG, ATM.\nNode CBL is connected to nodes OLD, ZQA, WOS.\nNode ESE is connected to nodes OLD, ZQA, KDG, WOS, ATM.\nNode GCN is connected to nodes KDG, WOS.\nNode QOV is connected to nodes AVZ, ATM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OLD: [CBL, ESE],\nZQA: [BKO, CBL, ESE],\nKDG: [HBR, ESE, GCN],\nAVZ: [OHS, QOV],\nWOS: [WKP, OHS, CBL, ESE, GCN],\nATM: [BKO, HBR, ESE, QOV],\nWKP: [WOS],\nOHS: [AVZ, WOS],\nBKO: [ZQA, ATM],\nHBR: [KDG, ATM],\nCBL: [OLD, ZQA, WOS],\nESE: [OLD, ZQA, KDG, WOS, ATM],\nGCN: [KDG, WOS],\nQOV: [AVZ, ATM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IQD is connected to node DIM.\nNode OHL is connected to nodes ABV, SCA.\nNode ETY is connected to nodes BBK, IOZ, ABV, DIM, FTN.\nNode BBK is connected to node ETY.\nNode IOZ is connected to node ETY.\nNode ABV is connected to nodes OHL, ETY.\nNode DIM is connected to nodes IQD, ETY.\nNode FTN is connected to node ETY.\nNode SCA is connected to node OHL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IQD: [DIM],\nOHL: [ABV, SCA],\nETY: [BBK, IOZ, ABV, DIM, FTN],\nBBK: [ETY],\nIOZ: [ETY],\nABV: [OHL, ETY],\nDIM: [IQD, ETY],\nFTN: [ETY],\nSCA: [OHL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EXL is connected to nodes GUR, PQB.\nNode EKU is connected to nodes IXS, ALY.\nNode DPS is connected to nodes PQB, DBS, ALY.\nNode LJT is connected to nodes IXS, DBS, ALY.\nNode GUR is connected to node EXL.\nNode IXS is connected to nodes EKU, LJT.\nNode PQB is connected to nodes EXL, DPS.\nNode DBS is connected to nodes DPS, LJT.\nNode ALY is connected to nodes EKU, DPS, LJT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EXL: [GUR, PQB],\nEKU: [IXS, ALY],\nDPS: [PQB, DBS, ALY],\nLJT: [IXS, DBS, ALY],\nGUR: [EXL],\nIXS: [EKU, LJT],\nPQB: [EXL, DPS],\nDBS: [DPS, LJT],\nALY: [EKU, DPS, LJT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KHQ is connected to nodes OMA, IMF.\nNode YLP is connected to nodes ZQV, IMF.\nNode RYJ is connected to nodes MCM, GQL, IMF.\nNode RBI is connected to nodes GQL, XIK.\nNode MCM is connected to node RYJ.\nNode GQL is connected to nodes RYJ, RBI.\nNode XIK is connected to node RBI.\nNode ZQV is connected to node YLP.\nNode OMA is connected to node KHQ.\nNode IMF is connected to nodes KHQ, YLP, RYJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KHQ: [OMA, IMF],\nYLP: [ZQV, IMF],\nRYJ: [MCM, GQL, IMF],\nRBI: [GQL, XIK],\nMCM: [RYJ],\nGQL: [RYJ, RBI],\nXIK: [RBI],\nZQV: [YLP],\nOMA: [KHQ],\nIMF: [KHQ, YLP, RYJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NXJ is connected to nodes ACO, ZMP, PAB.\nNode ORW is connected to node ZMP.\nNode UCB is connected to nodes ACO, QOY, VAY, ZMP, HHL.\nNode ACO is connected to nodes NXJ, UCB.\nNode QOY is connected to node UCB.\nNode VAY is connected to node UCB.\nNode ZMP is connected to nodes NXJ, ORW, UCB.\nNode PAB is connected to node NXJ.\nNode HHL is connected to node UCB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NXJ: [ACO, ZMP, PAB],\nORW: [ZMP],\nUCB: [ACO, QOY, VAY, ZMP, HHL],\nACO: [NXJ, UCB],\nQOY: [UCB],\nVAY: [UCB],\nZMP: [NXJ, ORW, UCB],\nPAB: [NXJ],\nHHL: [UCB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node LIO is connected to nodes ZOI, UEV, STL, CDW, WQV, NOU.\nNode BPW is connected to node UEV.\nNode SVR is connected to nodes ZCL, STL, CVP.\nNode ZAJ is connected to nodes DPF, STL, CDW.\nNode UKB is connected to node ZCL.\nNode NUF is connected to node ZCL.\nNode ZCL is connected to nodes SVR, UKB, NUF.\nNode ZOI is connected to node LIO.\nNode UEV is connected to nodes LIO, BPW.\nNode DPF is connected to node ZAJ.\nNode STL is connected to nodes LIO, SVR, ZAJ.\nNode CVP is connected to node SVR.\nNode CDW is connected to nodes LIO, ZAJ.\nNode WQV is connected to node LIO.\nNode NOU is connected to node LIO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{LIO: [ZOI, UEV, STL, CDW, WQV, NOU],\nBPW: [UEV],\nSVR: [ZCL, STL, CVP],\nZAJ: [DPF, STL, CDW],\nUKB: [ZCL],\nNUF: [ZCL],\nZCL: [SVR, UKB, NUF],\nZOI: [LIO],\nUEV: [LIO, BPW],\nDPF: [ZAJ],\nSTL: [LIO, SVR, ZAJ],\nCVP: [SVR],\nCDW: [LIO, ZAJ],\nWQV: [LIO],\nNOU: [LIO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GRD is connected to node JWU.\nNode SLG is connected to nodes JJK, JWU, ZES.\nNode NIL is connected to nodes JWU, VDK.\nNode NFB is connected to nodes JJK, YMI, ZCP.\nNode JJK is connected to nodes SLG, NFB.\nNode JWU is connected to nodes GRD, SLG, NIL.\nNode ZES is connected to node SLG.\nNode VDK is connected to node NIL.\nNode YMI is connected to node NFB.\nNode ZCP is connected to node NFB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GRD: [JWU],\nSLG: [JJK, JWU, ZES],\nNIL: [JWU, VDK],\nNFB: [JJK, YMI, ZCP],\nJJK: [SLG, NFB],\nJWU: [GRD, SLG, NIL],\nZES: [SLG],\nVDK: [NIL],\nYMI: [NFB],\nZCP: [NFB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GYA is connected to nodes FGF, TNU, LTP, ARS.\nNode YPU is connected to nodes FGF, STO, DAN.\nNode PNU is connected to node DAN.\nNode QSD is connected to node STO.\nNode FGF is connected to nodes GYA, YPU.\nNode TNU is connected to node GYA.\nNode LTP is connected to node GYA.\nNode STO is connected to nodes YPU, QSD.\nNode DAN is connected to nodes YPU, PNU.\nNode ARS is connected to node GYA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GYA: [FGF, TNU, LTP, ARS],\nYPU: [FGF, STO, DAN],\nPNU: [DAN],\nQSD: [STO],\nFGF: [GYA, YPU],\nTNU: [GYA],\nLTP: [GYA],\nSTO: [YPU, QSD],\nDAN: [YPU, PNU],\nARS: [GYA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YBV is connected to nodes VIO, XNP, ECJ, RBO, QQJ.\nNode BLO is connected to nodes AWV, AWX, VIO, XNP, QQJ, IWT, JBJ.\nNode NRV is connected to nodes AWX, XNP, IWT.\nNode RHF is connected to nodes AWV, QQJ, IWT, JBJ.\nNode IDL is connected to nodes XNP, ECJ.\nNode AWV is connected to nodes BLO, RHF.\nNode AWX is connected to nodes BLO, NRV.\nNode VIO is connected to nodes YBV, BLO.\nNode XNP is connected to nodes YBV, BLO, NRV, IDL.\nNode ECJ is connected to nodes YBV, IDL.\nNode RBO is connected to node YBV.\nNode QQJ is connected to nodes YBV, BLO, RHF.\nNode IWT is connected to nodes BLO, NRV, RHF.\nNode JBJ is connected to nodes BLO, RHF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YBV: [VIO, XNP, ECJ, RBO, QQJ],\nBLO: [AWV, AWX, VIO, XNP, QQJ, IWT, JBJ],\nNRV: [AWX, XNP, IWT],\nRHF: [AWV, QQJ, IWT, JBJ],\nIDL: [XNP, ECJ],\nAWV: [BLO, RHF],\nAWX: [BLO, NRV],\nVIO: [YBV, BLO],\nXNP: [YBV, BLO, NRV, IDL],\nECJ: [YBV, IDL],\nRBO: [YBV],\nQQJ: [YBV, BLO, RHF],\nIWT: [BLO, NRV, RHF],\nJBJ: [BLO, RHF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HCR is connected to nodes WGM, TOV, IVW, XMF.\nNode MWV is connected to nodes QZS, TOV, XMF.\nNode QBX is connected to node XMF.\nNode AUC is connected to nodes QZS, FXZ, TOV.\nNode VTP is connected to node WGM.\nNode QZS is connected to nodes MWV, AUC.\nNode WGM is connected to nodes HCR, VTP.\nNode FXZ is connected to node AUC.\nNode TOV is connected to nodes HCR, MWV, AUC.\nNode IVW is connected to node HCR.\nNode XMF is connected to nodes HCR, MWV, QBX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HCR: [WGM, TOV, IVW, XMF],\nMWV: [QZS, TOV, XMF],\nQBX: [XMF],\nAUC: [QZS, FXZ, TOV],\nVTP: [WGM],\nQZS: [MWV, AUC],\nWGM: [HCR, VTP],\nFXZ: [AUC],\nTOV: [HCR, MWV, AUC],\nIVW: [HCR],\nXMF: [HCR, MWV, QBX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GZT is connected to nodes QXO, NQF, WBQ, XSD, AXV.\nNode FOI is connected to nodes WBQ, XSD.\nNode SSM is connected to nodes QXO, NQF, YPS, XSD.\nNode QGU is connected to nodes WBQ, YPS.\nNode RXB is connected to nodes YPS, AXV.\nNode QXO is connected to nodes GZT, SSM.\nNode NQF is connected to nodes GZT, SSM.\nNode WBQ is connected to nodes GZT, FOI, QGU.\nNode YPS is connected to nodes SSM, QGU, RXB.\nNode XSD is connected to nodes GZT, FOI, SSM.\nNode AXV is connected to nodes GZT, RXB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GZT: [QXO, NQF, WBQ, XSD, AXV],\nFOI: [WBQ, XSD],\nSSM: [QXO, NQF, YPS, XSD],\nQGU: [WBQ, YPS],\nRXB: [YPS, AXV],\nQXO: [GZT, SSM],\nNQF: [GZT, SSM],\nWBQ: [GZT, FOI, QGU],\nYPS: [SSM, QGU, RXB],\nXSD: [GZT, FOI, SSM],\nAXV: [GZT, RXB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node POL is connected to nodes LCX, QFS, NUU.\nNode VGC is connected to nodes NNQ, OEN, OSZ, XYV.\nNode KVH is connected to nodes NNQ, QFS, XYV.\nNode ZBT is connected to nodes LCX, MYI, NUU.\nNode LCX is connected to nodes POL, ZBT.\nNode MYI is connected to node ZBT.\nNode NNQ is connected to nodes VGC, KVH.\nNode OEN is connected to node VGC.\nNode OSZ is connected to node VGC.\nNode QFS is connected to nodes POL, KVH.\nNode NUU is connected to nodes POL, ZBT.\nNode XYV is connected to nodes VGC, KVH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{POL: [LCX, QFS, NUU],\nVGC: [NNQ, OEN, OSZ, XYV],\nKVH: [NNQ, QFS, XYV],\nZBT: [LCX, MYI, NUU],\nLCX: [POL, ZBT],\nMYI: [ZBT],\nNNQ: [VGC, KVH],\nOEN: [VGC],\nOSZ: [VGC],\nQFS: [POL, KVH],\nNUU: [POL, ZBT],\nXYV: [VGC, KVH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AWW is connected to nodes TSZ, DBR.\nNode RJV is connected to nodes SJS, FCJ, JMD.\nNode OHB is connected to nodes SJS, TSZ, JMD.\nNode URU is connected to nodes TSZ, DBR.\nNode SJS is connected to nodes RJV, OHB.\nNode FCJ is connected to node RJV.\nNode TSZ is connected to nodes AWW, OHB, URU.\nNode JMD is connected to nodes RJV, OHB.\nNode DBR is connected to nodes AWW, URU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AWW: [TSZ, DBR],\nRJV: [SJS, FCJ, JMD],\nOHB: [SJS, TSZ, JMD],\nURU: [TSZ, DBR],\nSJS: [RJV, OHB],\nFCJ: [RJV],\nTSZ: [AWW, OHB, URU],\nJMD: [RJV, OHB],\nDBR: [AWW, URU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node EHQ is connected to nodes DVM, TDL.\nNode AXL is connected to nodes DVM, NCV, TDL, QUE, CLV.\nNode VRB is connected to nodes EVU, TDL, HNU.\nNode CCD is connected to nodes DVM, NCV, JWC, HNU, CLV, UTL.\nNode DVM is connected to nodes EHQ, AXL, CCD.\nNode EVU is connected to node VRB.\nNode NCV is connected to nodes AXL, CCD.\nNode TDL is connected to nodes EHQ, AXL, VRB.\nNode JWC is connected to node CCD.\nNode HNU is connected to nodes VRB, CCD.\nNode QUE is connected to node AXL.\nNode CLV is connected to nodes AXL, CCD.\nNode UTL is connected to node CCD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{EHQ: [DVM, TDL],\nAXL: [DVM, NCV, TDL, QUE, CLV],\nVRB: [EVU, TDL, HNU],\nCCD: [DVM, NCV, JWC, HNU, CLV, UTL],\nDVM: [EHQ, AXL, CCD],\nEVU: [VRB],\nNCV: [AXL, CCD],\nTDL: [EHQ, AXL, VRB],\nJWC: [CCD],\nHNU: [VRB, CCD],\nQUE: [AXL],\nCLV: [AXL, CCD],\nUTL: [CCD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SDZ is connected to nodes XFG, LHA.\nNode LIZ is connected to nodes LHA, KHJ.\nNode BGR is connected to nodes MUB, ITX, KHJ.\nNode DTN is connected to nodes OOS, ITX.\nNode KGR is connected to nodes ITX, XFG.\nNode MUB is connected to node BGR.\nNode OOS is connected to node DTN.\nNode ITX is connected to nodes BGR, DTN, KGR.\nNode XFG is connected to nodes SDZ, KGR.\nNode LHA is connected to nodes SDZ, LIZ.\nNode KHJ is connected to nodes LIZ, BGR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SDZ: [XFG, LHA],\nLIZ: [LHA, KHJ],\nBGR: [MUB, ITX, KHJ],\nDTN: [OOS, ITX],\nKGR: [ITX, XFG],\nMUB: [BGR],\nOOS: [DTN],\nITX: [BGR, DTN, KGR],\nXFG: [SDZ, KGR],\nLHA: [SDZ, LIZ],\nKHJ: [LIZ, BGR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZCR is connected to nodes AKU, IGD, ZTH, GWI, JMH.\nNode BLY is connected to nodes AKU, GWI, JMH.\nNode ANN is connected to nodes PYM, GWI, JMH.\nNode BBK is connected to nodes AKU, IGD, TFB, AMB.\nNode TRP is connected to nodes AKU, PYM, ZTH, JMH, AMB.\nNode AKU is connected to nodes ZCR, BLY, BBK, TRP.\nNode IGD is connected to nodes ZCR, BBK.\nNode PYM is connected to nodes ANN, TRP.\nNode ZTH is connected to nodes ZCR, TRP.\nNode GWI is connected to nodes ZCR, BLY, ANN.\nNode JMH is connected to nodes ZCR, BLY, ANN, TRP.\nNode TFB is connected to node BBK.\nNode AMB is connected to nodes BBK, TRP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZCR: [AKU, IGD, ZTH, GWI, JMH],\nBLY: [AKU, GWI, JMH],\nANN: [PYM, GWI, JMH],\nBBK: [AKU, IGD, TFB, AMB],\nTRP: [AKU, PYM, ZTH, JMH, AMB],\nAKU: [ZCR, BLY, BBK, TRP],\nIGD: [ZCR, BBK],\nPYM: [ANN, TRP],\nZTH: [ZCR, TRP],\nGWI: [ZCR, BLY, ANN],\nJMH: [ZCR, BLY, ANN, TRP],\nTFB: [BBK],\nAMB: [BBK, TRP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TWE is connected to nodes OZA, HYQ, CNY.\nNode ORG is connected to nodes HYQ, TEM, CNY.\nNode PWW is connected to nodes HGR, HYQ, EAG.\nNode UBB is connected to nodes HYQ, TEM, EAG.\nNode HGR is connected to node PWW.\nNode OZA is connected to node TWE.\nNode HYQ is connected to nodes TWE, ORG, PWW, UBB.\nNode TEM is connected to nodes ORG, UBB.\nNode CNY is connected to nodes TWE, ORG.\nNode EAG is connected to nodes PWW, UBB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TWE: [OZA, HYQ, CNY],\nORG: [HYQ, TEM, CNY],\nPWW: [HGR, HYQ, EAG],\nUBB: [HYQ, TEM, EAG],\nHGR: [PWW],\nOZA: [TWE],\nHYQ: [TWE, ORG, PWW, UBB],\nTEM: [ORG, UBB],\nCNY: [TWE, ORG],\nEAG: [PWW, UBB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IJI is connected to node ZCI.\nNode FZN is connected to node HKW.\nNode WSD is connected to nodes PEH, QWY.\nNode KYX is connected to nodes YUN, HKW, WCT.\nNode ARV is connected to nodes PEH, TUB, HKW, ZCI.\nNode PKD is connected to nodes TUB, QWY, WCT.\nNode PEH is connected to nodes WSD, ARV.\nNode YUN is connected to node KYX.\nNode TUB is connected to nodes ARV, PKD.\nNode HKW is connected to nodes FZN, KYX, ARV.\nNode QWY is connected to nodes WSD, PKD.\nNode WCT is connected to nodes KYX, PKD.\nNode ZCI is connected to nodes IJI, ARV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IJI: [ZCI],\nFZN: [HKW],\nWSD: [PEH, QWY],\nKYX: [YUN, HKW, WCT],\nARV: [PEH, TUB, HKW, ZCI],\nPKD: [TUB, QWY, WCT],\nPEH: [WSD, ARV],\nYUN: [KYX],\nTUB: [ARV, PKD],\nHKW: [FZN, KYX, ARV],\nQWY: [WSD, PKD],\nWCT: [KYX, PKD],\nZCI: [IJI, ARV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ESM is connected to nodes ULU, RSA, GUF.\nNode ICB is connected to nodes EIN, VKT, RSA.\nNode VRY is connected to node EIN.\nNode MGX is connected to nodes YIU, EIN.\nNode YIU is connected to node MGX.\nNode EIN is connected to nodes ICB, VRY, MGX.\nNode VKT is connected to node ICB.\nNode ULU is connected to node ESM.\nNode RSA is connected to nodes ESM, ICB.\nNode GUF is connected to node ESM.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ESM: [ULU, RSA, GUF],\nICB: [EIN, VKT, RSA],\nVRY: [EIN],\nMGX: [YIU, EIN],\nYIU: [MGX],\nEIN: [ICB, VRY, MGX],\nVKT: [ICB],\nULU: [ESM],\nRSA: [ESM, ICB],\nGUF: [ESM]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XJI is connected to nodes AMI, RAK, SUL, LMT.\nNode CSN is connected to nodes AMI, VFC.\nNode CPR is connected to nodes AMI, SUL, LMT.\nNode AMI is connected to nodes XJI, CSN, CPR.\nNode VFC is connected to node CSN.\nNode RAK is connected to node XJI.\nNode SUL is connected to nodes XJI, CPR.\nNode LMT is connected to nodes XJI, CPR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XJI: [AMI, RAK, SUL, LMT],\nCSN: [AMI, VFC],\nCPR: [AMI, SUL, LMT],\nAMI: [XJI, CSN, CPR],\nVFC: [CSN],\nRAK: [XJI],\nSUL: [XJI, CPR],\nLMT: [XJI, CPR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YIA is connected to nodes KSS, YVY, IYE, MTW, ZBY.\nNode CMC is connected to node ZBY.\nNode BJK is connected to nodes PMM, IYE, ZBY.\nNode PMM is connected to node BJK.\nNode KSS is connected to node YIA.\nNode YVY is connected to node YIA.\nNode IYE is connected to nodes YIA, BJK.\nNode MTW is connected to node YIA.\nNode ZBY is connected to nodes YIA, CMC, BJK.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YIA: [KSS, YVY, IYE, MTW, ZBY],\nCMC: [ZBY],\nBJK: [PMM, IYE, ZBY],\nPMM: [BJK],\nKSS: [YIA],\nYVY: [YIA],\nIYE: [YIA, BJK],\nMTW: [YIA],\nZBY: [YIA, CMC, BJK]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DWT is connected to nodes VKE, QNJ, XSK, DCD, OEW, ZNS.\nNode JEQ is connected to nodes VKE, CUR.\nNode WIE is connected to nodes CPT, VKE, QNJ, ZSE, ZNS.\nNode RGU is connected to nodes CPT, VKE, XYG, ZSE, OEW, ZNS.\nNode CPT is connected to nodes WIE, RGU.\nNode VKE is connected to nodes DWT, JEQ, WIE, RGU.\nNode QNJ is connected to nodes DWT, WIE.\nNode XSK is connected to node DWT.\nNode CUR is connected to node JEQ.\nNode DCD is connected to node DWT.\nNode XYG is connected to node RGU.\nNode ZSE is connected to nodes WIE, RGU.\nNode OEW is connected to nodes DWT, RGU.\nNode ZNS is connected to nodes DWT, WIE, RGU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DWT: [VKE, QNJ, XSK, DCD, OEW, ZNS],\nJEQ: [VKE, CUR],\nWIE: [CPT, VKE, QNJ, ZSE, ZNS],\nRGU: [CPT, VKE, XYG, ZSE, OEW, ZNS],\nCPT: [WIE, RGU],\nVKE: [DWT, JEQ, WIE, RGU],\nQNJ: [DWT, WIE],\nXSK: [DWT],\nCUR: [JEQ],\nDCD: [DWT],\nXYG: [RGU],\nZSE: [WIE, RGU],\nOEW: [DWT, RGU],\nZNS: [DWT, WIE, RGU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UDO is connected to nodes PDZ, ECF.\nNode GIN is connected to nodes WFF, ECF.\nNode EGB is connected to nodes RWI, WFF, XWG.\nNode PDZ is connected to node UDO.\nNode RWI is connected to node EGB.\nNode WFF is connected to nodes GIN, EGB.\nNode ECF is connected to nodes UDO, GIN.\nNode XWG is connected to node EGB.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UDO: [PDZ, ECF],\nGIN: [WFF, ECF],\nEGB: [RWI, WFF, XWG],\nPDZ: [UDO],\nRWI: [EGB],\nWFF: [GIN, EGB],\nECF: [UDO, GIN],\nXWG: [EGB]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node REF is connected to nodes PWY, DXG, PFA, MRL.\nNode WVC is connected to nodes JTQ, DXG, PFA, KNS, RNU, GXY, MZU.\nNode KPG is connected to nodes JTQ, PFA, GXY.\nNode XKO is connected to nodes JTQ, DXG, KNS, RNU.\nNode WSA is connected to nodes KHU, DXG, PFA, KNS, MRL.\nNode JTQ is connected to nodes WVC, KPG, XKO.\nNode PWY is connected to node REF.\nNode KHU is connected to node WSA.\nNode DXG is connected to nodes REF, WVC, XKO, WSA.\nNode PFA is connected to nodes REF, WVC, KPG, WSA.\nNode KNS is connected to nodes WVC, XKO, WSA.\nNode RNU is connected to nodes WVC, XKO.\nNode GXY is connected to nodes WVC, KPG.\nNode MZU is connected to node WVC.\nNode MRL is connected to nodes REF, WSA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{REF: [PWY, DXG, PFA, MRL],\nWVC: [JTQ, DXG, PFA, KNS, RNU, GXY, MZU],\nKPG: [JTQ, PFA, GXY],\nXKO: [JTQ, DXG, KNS, RNU],\nWSA: [KHU, DXG, PFA, KNS, MRL],\nJTQ: [WVC, KPG, XKO],\nPWY: [REF],\nKHU: [WSA],\nDXG: [REF, WVC, XKO, WSA],\nPFA: [REF, WVC, KPG, WSA],\nKNS: [WVC, XKO, WSA],\nRNU: [WVC, XKO],\nGXY: [WVC, KPG],\nMZU: [WVC],\nMRL: [REF, WSA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node AOY is connected to nodes ECM, OSF.\nNode QXQ is connected to node NXI.\nNode WQG is connected to nodes ECM, NXI, ENJ.\nNode BUJ is connected to nodes OSF, ENJ, ELI, AYX.\nNode QJZ is connected to nodes ENJ, ELI, AYX.\nNode XDP is connected to nodes ECM, OSF, SHM, ELI.\nNode ECM is connected to nodes AOY, WQG, XDP.\nNode OSF is connected to nodes AOY, BUJ, XDP.\nNode NXI is connected to nodes QXQ, WQG.\nNode ENJ is connected to nodes WQG, BUJ, QJZ.\nNode SHM is connected to node XDP.\nNode ELI is connected to nodes BUJ, QJZ, XDP.\nNode AYX is connected to nodes BUJ, QJZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{AOY: [ECM, OSF],\nQXQ: [NXI],\nWQG: [ECM, NXI, ENJ],\nBUJ: [OSF, ENJ, ELI, AYX],\nQJZ: [ENJ, ELI, AYX],\nXDP: [ECM, OSF, SHM, ELI],\nECM: [AOY, WQG, XDP],\nOSF: [AOY, BUJ, XDP],\nNXI: [QXQ, WQG],\nENJ: [WQG, BUJ, QJZ],\nSHM: [XDP],\nELI: [BUJ, QJZ, XDP],\nAYX: [BUJ, QJZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BKS is connected to nodes QHD, HSW, ZQM, FIL, KHS.\nNode MVF is connected to nodes QHD, LVF, FIL, KHS, VFJ, UVU.\nNode ZGN is connected to nodes QHD, LVF, VFJ.\nNode YRJ is connected to nodes QHD, ZQM, LVF.\nNode QHD is connected to nodes BKS, MVF, ZGN, YRJ.\nNode HSW is connected to node BKS.\nNode ZQM is connected to nodes BKS, YRJ.\nNode LVF is connected to nodes MVF, ZGN, YRJ.\nNode FIL is connected to nodes BKS, MVF.\nNode KHS is connected to nodes BKS, MVF.\nNode VFJ is connected to nodes MVF, ZGN.\nNode UVU is connected to node MVF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BKS: [QHD, HSW, ZQM, FIL, KHS],\nMVF: [QHD, LVF, FIL, KHS, VFJ, UVU],\nZGN: [QHD, LVF, VFJ],\nYRJ: [QHD, ZQM, LVF],\nQHD: [BKS, MVF, ZGN, YRJ],\nHSW: [BKS],\nZQM: [BKS, YRJ],\nLVF: [MVF, ZGN, YRJ],\nFIL: [BKS, MVF],\nKHS: [BKS, MVF],\nVFJ: [MVF, ZGN],\nUVU: [MVF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node UPS is connected to nodes KPU, EHS.\nNode RXZ is connected to nodes VYM, MDD.\nNode DTB is connected to nodes VYM, KPU, GEX, MDD.\nNode JZB is connected to nodes RAU, WDZ, KPU, EHS, GEX, MDD.\nNode HHD is connected to nodes VYM, WDZ, EHS, GEX, MDD.\nNode RAU is connected to node JZB.\nNode VYM is connected to nodes RXZ, DTB, HHD.\nNode WDZ is connected to nodes JZB, HHD.\nNode KPU is connected to nodes UPS, DTB, JZB.\nNode EHS is connected to nodes UPS, JZB, HHD.\nNode GEX is connected to nodes DTB, JZB, HHD.\nNode MDD is connected to nodes RXZ, DTB, JZB, HHD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{UPS: [KPU, EHS],\nRXZ: [VYM, MDD],\nDTB: [VYM, KPU, GEX, MDD],\nJZB: [RAU, WDZ, KPU, EHS, GEX, MDD],\nHHD: [VYM, WDZ, EHS, GEX, MDD],\nRAU: [JZB],\nVYM: [RXZ, DTB, HHD],\nWDZ: [JZB, HHD],\nKPU: [UPS, DTB, JZB],\nEHS: [UPS, JZB, HHD],\nGEX: [DTB, JZB, HHD],\nMDD: [RXZ, DTB, JZB, HHD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ADV is connected to nodes XOB, PQI, QNH.\nNode WCH is connected to nodes XOB, AQQ, PQI, PMN.\nNode YIF is connected to node PQI.\nNode XOB is connected to nodes ADV, WCH.\nNode AQQ is connected to node WCH.\nNode PQI is connected to nodes ADV, WCH, YIF.\nNode PMN is connected to node WCH.\nNode QNH is connected to node ADV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ADV: [XOB, PQI, QNH],\nWCH: [XOB, AQQ, PQI, PMN],\nYIF: [PQI],\nXOB: [ADV, WCH],\nAQQ: [WCH],\nPQI: [ADV, WCH, YIF],\nPMN: [WCH],\nQNH: [ADV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NJS is connected to nodes EMQ, WVJ.\nNode HCO is connected to nodes GTL, LOC.\nNode PGV is connected to nodes EMQ, WVJ, GTL.\nNode IXN is connected to node EMQ.\nNode EKH is connected to nodes EMQ, JIL, BNZ, LOC.\nNode EMQ is connected to nodes NJS, PGV, IXN, EKH.\nNode WVJ is connected to nodes NJS, PGV.\nNode JIL is connected to node EKH.\nNode GTL is connected to nodes HCO, PGV.\nNode BNZ is connected to node EKH.\nNode LOC is connected to nodes HCO, EKH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NJS: [EMQ, WVJ],\nHCO: [GTL, LOC],\nPGV: [EMQ, WVJ, GTL],\nIXN: [EMQ],\nEKH: [EMQ, JIL, BNZ, LOC],\nEMQ: [NJS, PGV, IXN, EKH],\nWVJ: [NJS, PGV],\nJIL: [EKH],\nGTL: [HCO, PGV],\nBNZ: [EKH],\nLOC: [HCO, EKH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DGF is connected to nodes AXQ, FMH, ASJ, YKC.\nNode EFY is connected to nodes OPC, COE, AXQ, ASJ.\nNode NDD is connected to node FMH.\nNode OPC is connected to node EFY.\nNode COE is connected to node EFY.\nNode AXQ is connected to nodes DGF, EFY.\nNode FMH is connected to nodes DGF, NDD.\nNode ASJ is connected to nodes DGF, EFY.\nNode YKC is connected to node DGF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DGF: [AXQ, FMH, ASJ, YKC],\nEFY: [OPC, COE, AXQ, ASJ],\nNDD: [FMH],\nOPC: [EFY],\nCOE: [EFY],\nAXQ: [DGF, EFY],\nFMH: [DGF, NDD],\nASJ: [DGF, EFY],\nYKC: [DGF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JNW is connected to nodes FAG, QXN, KSD.\nNode YLQ is connected to nodes XAP, LXP.\nNode DTQ is connected to nodes FAG, QXN, XAP.\nNode WFX is connected to nodes FAG, SNC, QXN, OLM.\nNode XZS is connected to nodes XAP, LXP, OLM.\nNode FAG is connected to nodes JNW, DTQ, WFX.\nNode SNC is connected to node WFX.\nNode QXN is connected to nodes JNW, DTQ, WFX.\nNode XAP is connected to nodes YLQ, DTQ, XZS.\nNode LXP is connected to nodes YLQ, XZS.\nNode OLM is connected to nodes WFX, XZS.\nNode KSD is connected to node JNW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JNW: [FAG, QXN, KSD],\nYLQ: [XAP, LXP],\nDTQ: [FAG, QXN, XAP],\nWFX: [FAG, SNC, QXN, OLM],\nXZS: [XAP, LXP, OLM],\nFAG: [JNW, DTQ, WFX],\nSNC: [WFX],\nQXN: [JNW, DTQ, WFX],\nXAP: [YLQ, DTQ, XZS],\nLXP: [YLQ, XZS],\nOLM: [WFX, XZS],\nKSD: [JNW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node BEN is connected to nodes WEZ, CCN, FFF, KDE.\nNode EQF is connected to nodes WEZ, FFF, PTF, KDE.\nNode HSH is connected to node KDE.\nNode WEZ is connected to nodes BEN, EQF.\nNode CCN is connected to node BEN.\nNode FFF is connected to nodes BEN, EQF.\nNode PTF is connected to node EQF.\nNode KDE is connected to nodes BEN, EQF, HSH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{BEN: [WEZ, CCN, FFF, KDE],\nEQF: [WEZ, FFF, PTF, KDE],\nHSH: [KDE],\nWEZ: [BEN, EQF],\nCCN: [BEN],\nFFF: [BEN, EQF],\nPTF: [EQF],\nKDE: [BEN, EQF, HSH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZCE is connected to nodes QRJ, OOG, MJO, OCU.\nNode TVV is connected to node BCR.\nNode LEA is connected to nodes OCU, BCR.\nNode FGA is connected to nodes PGD, OCU.\nNode PGD is connected to node FGA.\nNode QRJ is connected to node ZCE.\nNode OOG is connected to node ZCE.\nNode MJO is connected to node ZCE.\nNode OCU is connected to nodes ZCE, LEA, FGA.\nNode BCR is connected to nodes TVV, LEA.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZCE: [QRJ, OOG, MJO, OCU],\nTVV: [BCR],\nLEA: [OCU, BCR],\nFGA: [PGD, OCU],\nPGD: [FGA],\nQRJ: [ZCE],\nOOG: [ZCE],\nMJO: [ZCE],\nOCU: [ZCE, LEA, FGA],\nBCR: [TVV, LEA]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JSJ is connected to nodes TSN, YRF, LIJ, YYC.\nNode WMF is connected to nodes TSN, QQL.\nNode SMX is connected to nodes PYS, TSN, QQL.\nNode AJR is connected to nodes TSN, YRF, YYC.\nNode SCJ is connected to nodes YRF, PFA, YYC.\nNode NYO is connected to nodes TSN, PFA, QQL.\nNode HRH is connected to nodes YRF, ONF, YYC.\nNode PYS is connected to node SMX.\nNode TSN is connected to nodes JSJ, WMF, SMX, AJR, NYO.\nNode YRF is connected to nodes JSJ, AJR, SCJ, HRH.\nNode PFA is connected to nodes SCJ, NYO.\nNode QQL is connected to nodes WMF, SMX, NYO.\nNode ONF is connected to node HRH.\nNode LIJ is connected to node JSJ.\nNode YYC is connected to nodes JSJ, AJR, SCJ, HRH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JSJ: [TSN, YRF, LIJ, YYC],\nWMF: [TSN, QQL],\nSMX: [PYS, TSN, QQL],\nAJR: [TSN, YRF, YYC],\nSCJ: [YRF, PFA, YYC],\nNYO: [TSN, PFA, QQL],\nHRH: [YRF, ONF, YYC],\nPYS: [SMX],\nTSN: [JSJ, WMF, SMX, AJR, NYO],\nYRF: [JSJ, AJR, SCJ, HRH],\nPFA: [SCJ, NYO],\nQQL: [WMF, SMX, NYO],\nONF: [HRH],\nLIJ: [JSJ],\nYYC: [JSJ, AJR, SCJ, HRH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NGL is connected to nodes XUP, CGR, YDD, GPB.\nNode QLJ is connected to nodes XUP, XLD, CGR.\nNode FDP is connected to nodes YDD, GPB.\nNode ODL is connected to nodes XLD, FSQ, YDD.\nNode RMO is connected to nodes XLD, FSQ.\nNode XUP is connected to nodes NGL, QLJ.\nNode XLD is connected to nodes QLJ, ODL, RMO.\nNode FSQ is connected to nodes ODL, RMO.\nNode CGR is connected to nodes NGL, QLJ.\nNode YDD is connected to nodes NGL, FDP, ODL.\nNode GPB is connected to nodes NGL, FDP.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NGL: [XUP, CGR, YDD, GPB],\nQLJ: [XUP, XLD, CGR],\nFDP: [YDD, GPB],\nODL: [XLD, FSQ, YDD],\nRMO: [XLD, FSQ],\nXUP: [NGL, QLJ],\nXLD: [QLJ, ODL, RMO],\nFSQ: [ODL, RMO],\nCGR: [NGL, QLJ],\nYDD: [NGL, FDP, ODL],\nGPB: [NGL, FDP]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node THN is connected to nodes DCX, WVB.\nNode YKO is connected to nodes WVB, MIO.\nNode LAT is connected to nodes FQQ, WVB, MIO.\nNode QVW is connected to nodes TXI, DCX.\nNode TXI is connected to node QVW.\nNode FQQ is connected to node LAT.\nNode DCX is connected to nodes THN, QVW.\nNode WVB is connected to nodes THN, YKO, LAT.\nNode MIO is connected to nodes YKO, LAT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{THN: [DCX, WVB],\nYKO: [WVB, MIO],\nLAT: [FQQ, WVB, MIO],\nQVW: [TXI, DCX],\nTXI: [QVW],\nFQQ: [LAT],\nDCX: [THN, QVW],\nWVB: [THN, YKO, LAT],\nMIO: [YKO, LAT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZBO is connected to nodes KNZ, NZJ, GXG, CBB, LNW, CTY.\nNode HLS is connected to nodes GXG, TBM, KSF.\nNode WSP is connected to nodes IAB, TBM, CBB, TRK.\nNode QSN is connected to nodes NZJ, TBM, CTY.\nNode BXB is connected to nodes IAB, NZJ, KSF.\nNode KNZ is connected to node ZBO.\nNode IAB is connected to nodes WSP, BXB.\nNode NZJ is connected to nodes ZBO, QSN, BXB.\nNode GXG is connected to nodes ZBO, HLS.\nNode TBM is connected to nodes HLS, WSP, QSN.\nNode CBB is connected to nodes ZBO, WSP.\nNode KSF is connected to nodes HLS, BXB.\nNode LNW is connected to node ZBO.\nNode TRK is connected to node WSP.\nNode CTY is connected to nodes ZBO, QSN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZBO: [KNZ, NZJ, GXG, CBB, LNW, CTY],\nHLS: [GXG, TBM, KSF],\nWSP: [IAB, TBM, CBB, TRK],\nQSN: [NZJ, TBM, CTY],\nBXB: [IAB, NZJ, KSF],\nKNZ: [ZBO],\nIAB: [WSP, BXB],\nNZJ: [ZBO, QSN, BXB],\nGXG: [ZBO, HLS],\nTBM: [HLS, WSP, QSN],\nCBB: [ZBO, WSP],\nKSF: [HLS, BXB],\nLNW: [ZBO],\nTRK: [WSP],\nCTY: [ZBO, QSN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MBK is connected to nodes WAT, GGD, BAE.\nNode GJY is connected to nodes BAE, LDY.\nNode FZO is connected to nodes CKZ, GGD, FMJ, BAE, LDY.\nNode MZV is connected to nodes CKZ, GGD, LDY.\nNode QZD is connected to nodes WAT, CKZ, BAE, YMA.\nNode WAT is connected to nodes MBK, QZD.\nNode CKZ is connected to nodes FZO, MZV, QZD.\nNode GGD is connected to nodes MBK, FZO, MZV.\nNode FMJ is connected to node FZO.\nNode BAE is connected to nodes MBK, GJY, FZO, QZD.\nNode YMA is connected to node QZD.\nNode LDY is connected to nodes GJY, FZO, MZV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MBK: [WAT, GGD, BAE],\nGJY: [BAE, LDY],\nFZO: [CKZ, GGD, FMJ, BAE, LDY],\nMZV: [CKZ, GGD, LDY],\nQZD: [WAT, CKZ, BAE, YMA],\nWAT: [MBK, QZD],\nCKZ: [FZO, MZV, QZD],\nGGD: [MBK, FZO, MZV],\nFMJ: [FZO],\nBAE: [MBK, GJY, FZO, QZD],\nYMA: [QZD],\nLDY: [GJY, FZO, MZV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FAZ is connected to nodes BKM, UJN.\nNode MJJ is connected to nodes CXJ, IOB, MOE, UJN.\nNode DLH is connected to nodes CXJ, UUG, BKM.\nNode QXL is connected to nodes CXJ, UUG, BKM, ZXK.\nNode CXJ is connected to nodes MJJ, DLH, QXL.\nNode IOB is connected to node MJJ.\nNode MOE is connected to node MJJ.\nNode UUG is connected to nodes DLH, QXL.\nNode BKM is connected to nodes FAZ, DLH, QXL.\nNode UJN is connected to nodes FAZ, MJJ.\nNode ZXK is connected to node QXL.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FAZ: [BKM, UJN],\nMJJ: [CXJ, IOB, MOE, UJN],\nDLH: [CXJ, UUG, BKM],\nQXL: [CXJ, UUG, BKM, ZXK],\nCXJ: [MJJ, DLH, QXL],\nIOB: [MJJ],\nMOE: [MJJ],\nUUG: [DLH, QXL],\nBKM: [FAZ, DLH, QXL],\nUJN: [FAZ, MJJ],\nZXK: [QXL]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WRA is connected to nodes DYT, VLM.\nNode SIS is connected to nodes YXJ, RAJ, VLM, GEQ.\nNode CLW is connected to node GEQ.\nNode XUZ is connected to nodes DYT, RAJ, GEQ, EVN, TVK.\nNode MFU is connected to nodes RAJ, VLM, EVN.\nNode YXJ is connected to node SIS.\nNode DYT is connected to nodes WRA, XUZ.\nNode RAJ is connected to nodes SIS, XUZ, MFU.\nNode VLM is connected to nodes WRA, SIS, MFU.\nNode GEQ is connected to nodes SIS, CLW, XUZ.\nNode EVN is connected to nodes XUZ, MFU.\nNode TVK is connected to node XUZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WRA: [DYT, VLM],\nSIS: [YXJ, RAJ, VLM, GEQ],\nCLW: [GEQ],\nXUZ: [DYT, RAJ, GEQ, EVN, TVK],\nMFU: [RAJ, VLM, EVN],\nYXJ: [SIS],\nDYT: [WRA, XUZ],\nRAJ: [SIS, XUZ, MFU],\nVLM: [WRA, SIS, MFU],\nGEQ: [SIS, CLW, XUZ],\nEVN: [XUZ, MFU],\nTVK: [XUZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node HYL is connected to node SDA.\nNode QMT is connected to nodes KCV, SDA, RMY.\nNode LBB is connected to nodes KCV, AVU, OLO.\nNode KCV is connected to nodes QMT, LBB.\nNode AVU is connected to node LBB.\nNode OLO is connected to node LBB.\nNode SDA is connected to nodes HYL, QMT.\nNode RMY is connected to node QMT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{HYL: [SDA],\nQMT: [KCV, SDA, RMY],\nLBB: [KCV, AVU, OLO],\nKCV: [QMT, LBB],\nAVU: [LBB],\nOLO: [LBB],\nSDA: [HYL, QMT],\nRMY: [QMT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node GDG is connected to nodes GTT, SPD, PQP, XST.\nNode LZO is connected to nodes UHH, PQP.\nNode USQ is connected to nodes GTT, UHH.\nNode NLN is connected to nodes GTT, PQP.\nNode GTT is connected to nodes GDG, USQ, NLN.\nNode UHH is connected to nodes LZO, USQ.\nNode SPD is connected to node GDG.\nNode PQP is connected to nodes GDG, LZO, NLN.\nNode XST is connected to node GDG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{GDG: [GTT, SPD, PQP, XST],\nLZO: [UHH, PQP],\nUSQ: [GTT, UHH],\nNLN: [GTT, PQP],\nGTT: [GDG, USQ, NLN],\nUHH: [LZO, USQ],\nSPD: [GDG],\nPQP: [GDG, LZO, NLN],\nXST: [GDG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RXO is connected to nodes NVX, EXK.\nNode QDG is connected to nodes ZTH, QYS.\nNode MPW is connected to nodes ZTH, EOH, NVX, QYS.\nNode ZTH is connected to nodes QDG, MPW.\nNode EOH is connected to node MPW.\nNode NVX is connected to nodes RXO, MPW.\nNode EXK is connected to node RXO.\nNode QYS is connected to nodes QDG, MPW.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RXO: [NVX, EXK],\nQDG: [ZTH, QYS],\nMPW: [ZTH, EOH, NVX, QYS],\nZTH: [QDG, MPW],\nEOH: [MPW],\nNVX: [RXO, MPW],\nEXK: [RXO],\nQYS: [QDG, MPW]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QLY is connected to node RSZ.\nNode UKS is connected to node QEZ.\nNode IWE is connected to nodes QEZ, FPN, RSZ.\nNode VJL is connected to nodes QEZ, QPG, FPN, EGP.\nNode YYD is connected to nodes GVF, FPN, EGP.\nNode QEZ is connected to nodes UKS, IWE, VJL.\nNode GVF is connected to node YYD.\nNode QPG is connected to node VJL.\nNode FPN is connected to nodes IWE, VJL, YYD.\nNode EGP is connected to nodes VJL, YYD.\nNode RSZ is connected to nodes QLY, IWE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QLY: [RSZ],\nUKS: [QEZ],\nIWE: [QEZ, FPN, RSZ],\nVJL: [QEZ, QPG, FPN, EGP],\nYYD: [GVF, FPN, EGP],\nQEZ: [UKS, IWE, VJL],\nGVF: [YYD],\nQPG: [VJL],\nFPN: [IWE, VJL, YYD],\nEGP: [VJL, YYD],\nRSZ: [QLY, IWE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ADT is connected to nodes BYM, YQG, APS.\nNode XVA is connected to nodes SWX, DGP.\nNode SRE is connected to nodes RAK, DGP.\nNode HVF is connected to nodes YQG, RAK, PCK.\nNode OIR is connected to nodes BYM, ZND, APS, EXB, PCK.\nNode BYM is connected to nodes ADT, OIR.\nNode ZND is connected to node OIR.\nNode YQG is connected to nodes ADT, HVF.\nNode SWX is connected to node XVA.\nNode APS is connected to nodes ADT, OIR.\nNode EXB is connected to node OIR.\nNode RAK is connected to nodes SRE, HVF.\nNode PCK is connected to nodes HVF, OIR.\nNode DGP is connected to nodes XVA, SRE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ADT: [BYM, YQG, APS],\nXVA: [SWX, DGP],\nSRE: [RAK, DGP],\nHVF: [YQG, RAK, PCK],\nOIR: [BYM, ZND, APS, EXB, PCK],\nBYM: [ADT, OIR],\nZND: [OIR],\nYQG: [ADT, HVF],\nSWX: [XVA],\nAPS: [ADT, OIR],\nEXB: [OIR],\nRAK: [SRE, HVF],\nPCK: [HVF, OIR],\nDGP: [XVA, SRE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JSD is connected to nodes ZFW, ZBV, EOG, HQO.\nNode BMT is connected to nodes ZFW, VMC, PUT, HQO.\nNode DLN is connected to nodes VMC, ZNF, EOG.\nNode ZFW is connected to nodes JSD, BMT.\nNode ZBV is connected to node JSD.\nNode VMC is connected to nodes BMT, DLN.\nNode ZNF is connected to node DLN.\nNode PUT is connected to node BMT.\nNode EOG is connected to nodes JSD, DLN.\nNode HQO is connected to nodes JSD, BMT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JSD: [ZFW, ZBV, EOG, HQO],\nBMT: [ZFW, VMC, PUT, HQO],\nDLN: [VMC, ZNF, EOG],\nZFW: [JSD, BMT],\nZBV: [JSD],\nVMC: [BMT, DLN],\nZNF: [DLN],\nPUT: [BMT],\nEOG: [JSD, DLN],\nHQO: [JSD, BMT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ICD is connected to nodes YRW, QNQ, IUQ.\nNode IDA is connected to node LCU.\nNode UFD is connected to nodes UGH, QNQ, IUQ.\nNode FXS is connected to nodes LCU, QNQ.\nNode YRW is connected to node ICD.\nNode LCU is connected to nodes IDA, FXS.\nNode UGH is connected to node UFD.\nNode QNQ is connected to nodes ICD, UFD, FXS.\nNode IUQ is connected to nodes ICD, UFD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ICD: [YRW, QNQ, IUQ],\nIDA: [LCU],\nUFD: [UGH, QNQ, IUQ],\nFXS: [LCU, QNQ],\nYRW: [ICD],\nLCU: [IDA, FXS],\nUGH: [UFD],\nQNQ: [ICD, UFD, FXS],\nIUQ: [ICD, UFD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node TFA is connected to nodes BNK, BRK.\nNode FOQ is connected to nodes WVU, BRK, FIP.\nNode CWY is connected to nodes BNK, TIT, JAO, RIH.\nNode SLC is connected to nodes BRK, FIP.\nNode LNS is connected to nodes TIT, JAO, RIH.\nNode BNK is connected to nodes TFA, CWY.\nNode TIT is connected to nodes CWY, LNS.\nNode JAO is connected to nodes CWY, LNS.\nNode RIH is connected to nodes CWY, LNS.\nNode WVU is connected to node FOQ.\nNode BRK is connected to nodes TFA, FOQ, SLC.\nNode FIP is connected to nodes FOQ, SLC.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{TFA: [BNK, BRK],\nFOQ: [WVU, BRK, FIP],\nCWY: [BNK, TIT, JAO, RIH],\nSLC: [BRK, FIP],\nLNS: [TIT, JAO, RIH],\nBNK: [TFA, CWY],\nTIT: [CWY, LNS],\nJAO: [CWY, LNS],\nRIH: [CWY, LNS],\nWVU: [FOQ],\nBRK: [TFA, FOQ, SLC],\nFIP: [FOQ, SLC]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NNP is connected to nodes FUG, YVB, BGW, QWY.\nNode VNO is connected to nodes SPF, QWY, CYH.\nNode SPF is connected to node VNO.\nNode FUG is connected to node NNP.\nNode YVB is connected to node NNP.\nNode BGW is connected to node NNP.\nNode QWY is connected to nodes NNP, VNO.\nNode CYH is connected to node VNO.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NNP: [FUG, YVB, BGW, QWY],\nVNO: [SPF, QWY, CYH],\nSPF: [VNO],\nFUG: [NNP],\nYVB: [NNP],\nBGW: [NNP],\nQWY: [NNP, VNO],\nCYH: [VNO]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node YYG is connected to nodes ZQJ, HVJ, SMT.\nNode UIN is connected to nodes DBL, HVJ, TJH, UHO.\nNode ZQX is connected to nodes ZQJ, TJH, NDN.\nNode DBL is connected to node UIN.\nNode ZQJ is connected to nodes YYG, ZQX.\nNode HVJ is connected to nodes YYG, UIN.\nNode TJH is connected to nodes UIN, ZQX.\nNode NDN is connected to node ZQX.\nNode UHO is connected to node UIN.\nNode SMT is connected to node YYG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{YYG: [ZQJ, HVJ, SMT],\nUIN: [DBL, HVJ, TJH, UHO],\nZQX: [ZQJ, TJH, NDN],\nDBL: [UIN],\nZQJ: [YYG, ZQX],\nHVJ: [YYG, UIN],\nTJH: [UIN, ZQX],\nNDN: [ZQX],\nUHO: [UIN],\nSMT: [YYG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IFP is connected to nodes PQC, FEE, EGN.\nNode BVE is connected to nodes PQC, FEE, AZE, EGN.\nNode LJF is connected to nodes UHO, EGN.\nNode PQC is connected to nodes IFP, BVE.\nNode FEE is connected to nodes IFP, BVE.\nNode UHO is connected to node LJF.\nNode AZE is connected to node BVE.\nNode EGN is connected to nodes IFP, BVE, LJF.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IFP: [PQC, FEE, EGN],\nBVE: [PQC, FEE, AZE, EGN],\nLJF: [UHO, EGN],\nPQC: [IFP, BVE],\nFEE: [IFP, BVE],\nUHO: [LJF],\nAZE: [BVE],\nEGN: [IFP, BVE, LJF]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node SZV is connected to nodes MCA, DWC, NWJ.\nNode PHE is connected to nodes MCA, UOT, ODQ.\nNode ODE is connected to nodes UOT, NWJ, ODQ.\nNode MCA is connected to nodes SZV, PHE.\nNode DWC is connected to node SZV.\nNode UOT is connected to nodes PHE, ODE.\nNode NWJ is connected to nodes SZV, ODE.\nNode ODQ is connected to nodes PHE, ODE.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{SZV: [MCA, DWC, NWJ],\nPHE: [MCA, UOT, ODQ],\nODE: [UOT, NWJ, ODQ],\nMCA: [SZV, PHE],\nDWC: [SZV],\nUOT: [PHE, ODE],\nNWJ: [SZV, ODE],\nODQ: [PHE, ODE]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JUS is connected to nodes VGV, HBX, FVR.\nNode CRZ is connected to nodes VGV, DON.\nNode OFN is connected to nodes HTH, LPT, DON, HBX.\nNode PGD is connected to node YAF.\nNode FME is connected to nodes HTH, LPT, YAF, DON, RMF.\nNode VGV is connected to nodes JUS, CRZ.\nNode HTH is connected to nodes OFN, FME.\nNode LPT is connected to nodes OFN, FME.\nNode YAF is connected to nodes PGD, FME.\nNode DON is connected to nodes CRZ, OFN, FME.\nNode RMF is connected to node FME.\nNode HBX is connected to nodes JUS, OFN.\nNode FVR is connected to node JUS.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JUS: [VGV, HBX, FVR],\nCRZ: [VGV, DON],\nOFN: [HTH, LPT, DON, HBX],\nPGD: [YAF],\nFME: [HTH, LPT, YAF, DON, RMF],\nVGV: [JUS, CRZ],\nHTH: [OFN, FME],\nLPT: [OFN, FME],\nYAF: [PGD, FME],\nDON: [CRZ, OFN, FME],\nRMF: [FME],\nHBX: [JUS, OFN],\nFVR: [JUS]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OTJ is connected to nodes HWK, ZUW, PSJ, QRZ, NHW.\nNode MVF is connected to nodes SFH, NBW, QRZ, NHW.\nNode BEL is connected to nodes SFH, FSQ, HWK.\nNode QWF is connected to nodes WWY, SFH, NBW, PSJ, QRZ.\nNode LOJ is connected to nodes WWY, HWK, NHW.\nNode WWY is connected to nodes QWF, LOJ.\nNode SFH is connected to nodes MVF, BEL, QWF.\nNode FSQ is connected to node BEL.\nNode HWK is connected to nodes OTJ, BEL, LOJ.\nNode NBW is connected to nodes MVF, QWF.\nNode ZUW is connected to node OTJ.\nNode PSJ is connected to nodes OTJ, QWF.\nNode QRZ is connected to nodes OTJ, MVF, QWF.\nNode NHW is connected to nodes OTJ, MVF, LOJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OTJ: [HWK, ZUW, PSJ, QRZ, NHW],\nMVF: [SFH, NBW, QRZ, NHW],\nBEL: [SFH, FSQ, HWK],\nQWF: [WWY, SFH, NBW, PSJ, QRZ],\nLOJ: [WWY, HWK, NHW],\nWWY: [QWF, LOJ],\nSFH: [MVF, BEL, QWF],\nFSQ: [BEL],\nHWK: [OTJ, BEL, LOJ],\nNBW: [MVF, QWF],\nZUW: [OTJ],\nPSJ: [OTJ, QWF],\nQRZ: [OTJ, MVF, QWF],\nNHW: [OTJ, MVF, LOJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node MXO is connected to nodes OKX, MCB, LLG, GJM.\nNode SOO is connected to nodes EQI, OKX.\nNode OTG is connected to nodes OKX, MCB, LLG.\nNode LJV is connected to nodes TTX, LLG, GJM.\nNode KFQ is connected to nodes TTX, KER.\nNode EQI is connected to node SOO.\nNode OKX is connected to nodes MXO, SOO, OTG.\nNode TTX is connected to nodes LJV, KFQ.\nNode MCB is connected to nodes MXO, OTG.\nNode KER is connected to node KFQ.\nNode LLG is connected to nodes MXO, OTG, LJV.\nNode GJM is connected to nodes MXO, LJV.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{MXO: [OKX, MCB, LLG, GJM],\nSOO: [EQI, OKX],\nOTG: [OKX, MCB, LLG],\nLJV: [TTX, LLG, GJM],\nKFQ: [TTX, KER],\nEQI: [SOO],\nOKX: [MXO, SOO, OTG],\nTTX: [LJV, KFQ],\nMCB: [MXO, OTG],\nKER: [KFQ],\nLLG: [MXO, OTG, LJV],\nGJM: [MXO, LJV]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node FGE is connected to nodes QDO, NAQ, SDR.\nNode FHB is connected to node SDR.\nNode QQR is connected to nodes ZLY, QDI, QDO.\nNode GCE is connected to nodes ZLY, QDO, SPG, SDR.\nNode NYL is connected to nodes ADF, QDI, SCA.\nNode GVR is connected to nodes ZLY, ADF, NAQ.\nNode TFN is connected to node SCA.\nNode ZLY is connected to nodes QQR, GCE, GVR.\nNode ADF is connected to nodes NYL, GVR.\nNode QDI is connected to nodes QQR, NYL.\nNode QDO is connected to nodes FGE, QQR, GCE.\nNode NAQ is connected to nodes FGE, GVR.\nNode SPG is connected to node GCE.\nNode SDR is connected to nodes FGE, FHB, GCE.\nNode SCA is connected to nodes NYL, TFN.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{FGE: [QDO, NAQ, SDR],\nFHB: [SDR],\nQQR: [ZLY, QDI, QDO],\nGCE: [ZLY, QDO, SPG, SDR],\nNYL: [ADF, QDI, SCA],\nGVR: [ZLY, ADF, NAQ],\nTFN: [SCA],\nZLY: [QQR, GCE, GVR],\nADF: [NYL, GVR],\nQDI: [QQR, NYL],\nQDO: [FGE, QQR, GCE],\nNAQ: [FGE, GVR],\nSPG: [GCE],\nSDR: [FGE, FHB, GCE],\nSCA: [NYL, TFN]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node CLA is connected to node IFY.\nNode ERX is connected to nodes PXN, YFJ, IFY, DTS.\nNode KMP is connected to nodes DTS, TPQ.\nNode MJR is connected to nodes PXN, NQY, DTS, TPQ.\nNode RNH is connected to nodes YFJ, CEY, IFY.\nNode PXN is connected to nodes ERX, MJR.\nNode NQY is connected to node MJR.\nNode YFJ is connected to nodes ERX, RNH.\nNode CEY is connected to node RNH.\nNode IFY is connected to nodes CLA, ERX, RNH.\nNode DTS is connected to nodes ERX, KMP, MJR.\nNode TPQ is connected to nodes KMP, MJR.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{CLA: [IFY],\nERX: [PXN, YFJ, IFY, DTS],\nKMP: [DTS, TPQ],\nMJR: [PXN, NQY, DTS, TPQ],\nRNH: [YFJ, CEY, IFY],\nPXN: [ERX, MJR],\nNQY: [MJR],\nYFJ: [ERX, RNH],\nCEY: [RNH],\nIFY: [CLA, ERX, RNH],\nDTS: [ERX, KMP, MJR],\nTPQ: [KMP, MJR]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ETU is connected to nodes WLB, KFF.\nNode JVT is connected to nodes WLB, XXV.\nNode NSW is connected to node XXV.\nNode KYX is connected to nodes WLB, JKI, QID, XXV.\nNode WLB is connected to nodes ETU, JVT, KYX.\nNode JKI is connected to node KYX.\nNode QID is connected to node KYX.\nNode XXV is connected to nodes JVT, NSW, KYX.\nNode KFF is connected to node ETU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ETU: [WLB, KFF],\nJVT: [WLB, XXV],\nNSW: [XXV],\nKYX: [WLB, JKI, QID, XXV],\nWLB: [ETU, JVT, KYX],\nJKI: [KYX],\nQID: [KYX],\nXXV: [JVT, NSW, KYX],\nKFF: [ETU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node OUP is connected to node UFH.\nNode SWL is connected to nodes ATM, AWZ, QEP.\nNode LTV is connected to nodes CBJ, AWZ, QEP.\nNode PMX is connected to nodes NBA, AWZ, QEP, GXR.\nNode WOP is connected to nodes ATM, UFH, QEP.\nNode SLV is connected to nodes ATM, QEP.\nNode ATM is connected to nodes SWL, WOP, SLV.\nNode NBA is connected to node PMX.\nNode CBJ is connected to node LTV.\nNode UFH is connected to nodes OUP, WOP.\nNode AWZ is connected to nodes SWL, LTV, PMX.\nNode QEP is connected to nodes SWL, LTV, PMX, WOP, SLV.\nNode GXR is connected to node PMX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{OUP: [UFH],\nSWL: [ATM, AWZ, QEP],\nLTV: [CBJ, AWZ, QEP],\nPMX: [NBA, AWZ, QEP, GXR],\nWOP: [ATM, UFH, QEP],\nSLV: [ATM, QEP],\nATM: [SWL, WOP, SLV],\nNBA: [PMX],\nCBJ: [LTV],\nUFH: [OUP, WOP],\nAWZ: [SWL, LTV, PMX],\nQEP: [SWL, LTV, PMX, WOP, SLV],\nGXR: [PMX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node XWD is connected to nodes IBU, PPD, IFF.\nNode OCR is connected to nodes PPD, BKU.\nNode MTC is connected to nodes PPD, SLS.\nNode IBU is connected to node XWD.\nNode PPD is connected to nodes XWD, OCR, MTC.\nNode BKU is connected to node OCR.\nNode SLS is connected to node MTC.\nNode IFF is connected to node XWD.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{XWD: [IBU, PPD, IFF],\nOCR: [PPD, BKU],\nMTC: [PPD, SLS],\nIBU: [XWD],\nPPD: [XWD, OCR, MTC],\nBKU: [OCR],\nSLS: [MTC],\nIFF: [XWD]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ACE is connected to nodes NZK, SDL, LQX, VBJ, QUD, GRY, MPZ, ZBJ.\nNode EQP is connected to nodes NZK, YDV, LQX, MPZ.\nNode POG is connected to nodes NZK, SDL, YDV, ZBJ.\nNode NZK is connected to nodes ACE, EQP, POG.\nNode SDL is connected to nodes ACE, POG.\nNode YDV is connected to nodes EQP, POG.\nNode LQX is connected to nodes ACE, EQP.\nNode VBJ is connected to node ACE.\nNode QUD is connected to node ACE.\nNode GRY is connected to node ACE.\nNode MPZ is connected to nodes ACE, EQP.\nNode ZBJ is connected to nodes ACE, POG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ACE: [NZK, SDL, LQX, VBJ, QUD, GRY, MPZ, ZBJ],\nEQP: [NZK, YDV, LQX, MPZ],\nPOG: [NZK, SDL, YDV, ZBJ],\nNZK: [ACE, EQP, POG],\nSDL: [ACE, POG],\nYDV: [EQP, POG],\nLQX: [ACE, EQP],\nVBJ: [ACE],\nQUD: [ACE],\nGRY: [ACE],\nMPZ: [ACE, EQP],\nZBJ: [ACE, POG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node WAB is connected to node DSZ.\nNode AMZ is connected to nodes MQC, EMF, KHS.\nNode ZTA is connected to nodes WSO, MQC, QBW, QJY, DLX.\nNode REG is connected to nodes DSZ, EMF, KHS.\nNode WSO is connected to node ZTA.\nNode DSZ is connected to nodes WAB, REG.\nNode MQC is connected to nodes AMZ, ZTA.\nNode QBW is connected to node ZTA.\nNode EMF is connected to nodes AMZ, REG.\nNode QJY is connected to node ZTA.\nNode DLX is connected to node ZTA.\nNode KHS is connected to nodes AMZ, REG.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{WAB: [DSZ],\nAMZ: [MQC, EMF, KHS],\nZTA: [WSO, MQC, QBW, QJY, DLX],\nREG: [DSZ, EMF, KHS],\nWSO: [ZTA],\nDSZ: [WAB, REG],\nMQC: [AMZ, ZTA],\nQBW: [ZTA],\nEMF: [AMZ, REG],\nQJY: [ZTA],\nDLX: [ZTA],\nKHS: [AMZ, REG]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NJP is connected to nodes LOZ, DVF.\nNode BVZ is connected to nodes KYI, DVF, UOB, DDP.\nNode PJJ is connected to node UOB.\nNode NZH is connected to nodes IBE, DVF.\nNode UEG is connected to nodes GRX, UOB.\nNode GRX is connected to node UEG.\nNode IBE is connected to node NZH.\nNode LOZ is connected to node NJP.\nNode KYI is connected to node BVZ.\nNode DVF is connected to nodes NJP, BVZ, NZH.\nNode UOB is connected to nodes BVZ, PJJ, UEG.\nNode DDP is connected to node BVZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NJP: [LOZ, DVF],\nBVZ: [KYI, DVF, UOB, DDP],\nPJJ: [UOB],\nNZH: [IBE, DVF],\nUEG: [GRX, UOB],\nGRX: [UEG],\nIBE: [NZH],\nLOZ: [NJP],\nKYI: [BVZ],\nDVF: [NJP, BVZ, NZH],\nUOB: [BVZ, PJJ, UEG],\nDDP: [BVZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node JML is connected to nodes OVS, WAR, NAP.\nNode BQE is connected to nodes WAR, NAP.\nNode PEX is connected to nodes GSH, GNS, WHN, WAR.\nNode PPI is connected to nodes ZMZ, GNS, NYK.\nNode LTJ is connected to nodes OVS, ZMZ, WHN, WAR.\nNode OVS is connected to nodes JML, LTJ.\nNode GSH is connected to node PEX.\nNode ZMZ is connected to nodes PPI, LTJ.\nNode GNS is connected to nodes PEX, PPI.\nNode WHN is connected to nodes PEX, LTJ.\nNode WAR is connected to nodes JML, BQE, PEX, LTJ.\nNode NAP is connected to nodes JML, BQE.\nNode NYK is connected to node PPI.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{JML: [OVS, WAR, NAP],\nBQE: [WAR, NAP],\nPEX: [GSH, GNS, WHN, WAR],\nPPI: [ZMZ, GNS, NYK],\nLTJ: [OVS, ZMZ, WHN, WAR],\nOVS: [JML, LTJ],\nGSH: [PEX],\nZMZ: [PPI, LTJ],\nGNS: [PEX, PPI],\nWHN: [PEX, LTJ],\nWAR: [JML, BQE, PEX, LTJ],\nNAP: [JML, BQE],\nNYK: [PPI]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node ZRT is connected to nodes KXN, FSO, WQS, VBI, UBU.\nNode FSX is connected to nodes ZVO, VBI.\nNode ITZ is connected to nodes QRW, ZVO, UBU, QKM.\nNode QRW is connected to node ITZ.\nNode ZVO is connected to nodes FSX, ITZ.\nNode KXN is connected to node ZRT.\nNode FSO is connected to node ZRT.\nNode WQS is connected to node ZRT.\nNode VBI is connected to nodes ZRT, FSX.\nNode UBU is connected to nodes ZRT, ITZ.\nNode QKM is connected to node ITZ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{ZRT: [KXN, FSO, WQS, VBI, UBU],\nFSX: [ZVO, VBI],\nITZ: [QRW, ZVO, UBU, QKM],\nQRW: [ITZ],\nZVO: [FSX, ITZ],\nKXN: [ZRT],\nFSO: [ZRT],\nWQS: [ZRT],\nVBI: [ZRT, FSX],\nUBU: [ZRT, ITZ],\nQKM: [ITZ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node VAO is connected to nodes WLF, MEZ, CFI, IAR.\nNode AFJ is connected to nodes WLF, GZX, FLZ, LXO, JLQ, IAR.\nNode EMQ is connected to nodes XFM, GZX, FLZ, CFI, JLQ.\nNode XFM is connected to node EMQ.\nNode WLF is connected to nodes VAO, AFJ.\nNode GZX is connected to nodes AFJ, EMQ.\nNode FLZ is connected to nodes AFJ, EMQ.\nNode LXO is connected to node AFJ.\nNode MEZ is connected to node VAO.\nNode CFI is connected to nodes VAO, EMQ.\nNode JLQ is connected to nodes AFJ, EMQ.\nNode IAR is connected to nodes VAO, AFJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{VAO: [WLF, MEZ, CFI, IAR],\nAFJ: [WLF, GZX, FLZ, LXO, JLQ, IAR],\nEMQ: [XFM, GZX, FLZ, CFI, JLQ],\nXFM: [EMQ],\nWLF: [VAO, AFJ],\nGZX: [AFJ, EMQ],\nFLZ: [AFJ, EMQ],\nLXO: [AFJ],\nMEZ: [VAO],\nCFI: [VAO, EMQ],\nJLQ: [AFJ, EMQ],\nIAR: [VAO, AFJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node QHN is connected to nodes CBX, VZR, JNA, XXV.\nNode LJX is connected to nodes JNA, XXV.\nNode RLE is connected to nodes JNA, SSS.\nNode CBX is connected to node QHN.\nNode VZR is connected to node QHN.\nNode JNA is connected to nodes QHN, LJX, RLE.\nNode SSS is connected to node RLE.\nNode XXV is connected to nodes QHN, LJX.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{QHN: [CBX, VZR, JNA, XXV],\nLJX: [JNA, XXV],\nRLE: [JNA, SSS],\nCBX: [QHN],\nVZR: [QHN],\nJNA: [QHN, LJX, RLE],\nSSS: [RLE],\nXXV: [QHN, LJX]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node IWV is connected to nodes ZJS, YGW, OJL, YED.\nNode RNJ is connected to nodes SAP, DGN, YED.\nNode LGM is connected to nodes YGW, BXD, KMD, OJL.\nNode VAB is connected to nodes ZJS, YGW, BXD, SAP.\nNode TZC is connected to node DGN.\nNode ZJS is connected to nodes IWV, VAB.\nNode YGW is connected to nodes IWV, LGM, VAB.\nNode BXD is connected to nodes LGM, VAB.\nNode SAP is connected to nodes RNJ, VAB.\nNode DGN is connected to nodes RNJ, TZC.\nNode KMD is connected to node LGM.\nNode OJL is connected to nodes IWV, LGM.\nNode YED is connected to nodes IWV, RNJ.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{IWV: [ZJS, YGW, OJL, YED],\nRNJ: [SAP, DGN, YED],\nLGM: [YGW, BXD, KMD, OJL],\nVAB: [ZJS, YGW, BXD, SAP],\nTZC: [DGN],\nZJS: [IWV, VAB],\nYGW: [IWV, LGM, VAB],\nBXD: [LGM, VAB],\nSAP: [RNJ, VAB],\nDGN: [RNJ, TZC],\nKMD: [LGM],\nOJL: [IWV, LGM],\nYED: [IWV, RNJ]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node DLH is connected to nodes WVE, NEB, RFD, GDP, TLK.\nNode MNN is connected to nodes WVE, CPX, NEB, GDP.\nNode WVE is connected to nodes DLH, MNN.\nNode CPX is connected to node MNN.\nNode NEB is connected to nodes DLH, MNN.\nNode RFD is connected to node DLH.\nNode GDP is connected to nodes DLH, MNN.\nNode TLK is connected to node DLH.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{DLH: [WVE, NEB, RFD, GDP, TLK],\nMNN: [WVE, CPX, NEB, GDP],\nWVE: [DLH, MNN],\nCPX: [MNN],\nNEB: [DLH, MNN],\nRFD: [DLH],\nGDP: [DLH, MNN],\nTLK: [DLH]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node NVQ is connected to nodes IUI, EMG, NFD.\nNode SDU is connected to nodes RWU, OWB, EMG, NFD.\nNode AKY is connected to nodes OWB, PEE, EMG.\nNode IUI is connected to node NVQ.\nNode RWU is connected to node SDU.\nNode OWB is connected to nodes SDU, AKY.\nNode PEE is connected to node AKY.\nNode EMG is connected to nodes NVQ, SDU, AKY.\nNode NFD is connected to nodes NVQ, SDU.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{NVQ: [IUI, EMG, NFD],\nSDU: [RWU, OWB, EMG, NFD],\nAKY: [OWB, PEE, EMG],\nIUI: [NVQ],\nRWU: [SDU],\nOWB: [SDU, AKY],\nPEE: [AKY],\nEMG: [NVQ, SDU, AKY],\nNFD: [NVQ, SDU]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KHC is connected to nodes TAL, GYK, MWW, DND.\nNode DSY is connected to nodes TAL, GYK, MWW, JTU.\nNode BNX is connected to nodes UBV, JTU.\nNode MAU is connected to nodes JDS, GYK, EZU.\nNode AVT is connected to nodes ZAD, GYK, JTU.\nNode TAL is connected to nodes KHC, DSY.\nNode JDS is connected to node MAU.\nNode ZAD is connected to node AVT.\nNode GYK is connected to nodes KHC, DSY, MAU, AVT.\nNode UBV is connected to node BNX.\nNode MWW is connected to nodes KHC, DSY.\nNode EZU is connected to node MAU.\nNode DND is connected to node KHC.\nNode JTU is connected to nodes DSY, BNX, AVT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KHC: [TAL, GYK, MWW, DND],\nDSY: [TAL, GYK, MWW, JTU],\nBNX: [UBV, JTU],\nMAU: [JDS, GYK, EZU],\nAVT: [ZAD, GYK, JTU],\nTAL: [KHC, DSY],\nJDS: [MAU],\nZAD: [AVT],\nGYK: [KHC, DSY, MAU, AVT],\nUBV: [BNX],\nMWW: [KHC, DSY],\nEZU: [MAU],\nDND: [KHC],\nJTU: [DSY, BNX, AVT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node KHI is connected to nodes VGO, UYO, CNU, FUO, YJM.\nNode ICN is connected to nodes LDH, CNU, QRH, FUO, QXU, MFR.\nNode PKT is connected to nodes QRH, FUO, QXU, MFR, YJM.\nNode LDH is connected to node ICN.\nNode VGO is connected to node KHI.\nNode UYO is connected to node KHI.\nNode CNU is connected to nodes KHI, ICN.\nNode QRH is connected to nodes ICN, PKT.\nNode FUO is connected to nodes KHI, ICN, PKT.\nNode QXU is connected to nodes ICN, PKT.\nNode MFR is connected to nodes ICN, PKT.\nNode YJM is connected to nodes KHI, PKT.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{KHI: [VGO, UYO, CNU, FUO, YJM],\nICN: [LDH, CNU, QRH, FUO, QXU, MFR],\nPKT: [QRH, FUO, QXU, MFR, YJM],\nLDH: [ICN],\nVGO: [KHI],\nUYO: [KHI],\nCNU: [KHI, ICN],\nQRH: [ICN, PKT],\nFUO: [KHI, ICN, PKT],\nQXU: [ICN, PKT],\nMFR: [ICN, PKT],\nYJM: [KHI, PKT]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"},
{"graph": "Node RET is connected to nodes XFD, OQS, ZHP, FSZ, COO, XTL.\nNode WQL is connected to nodes XFD, PZV, JSO, LIU, OQS, FSZ.\nNode JPE is connected to nodes XFD, JSO, LIU, OQS, ZHP.\nNode ADZ is connected to nodes XFD, PZV, OQS.\nNode XFD is connected to nodes RET, WQL, JPE, ADZ.\nNode PZV is connected to nodes WQL, ADZ.\nNode JSO is connected to nodes WQL, JPE.\nNode LIU is connected to nodes WQL, JPE.\nNode OQS is connected to nodes RET, WQL, JPE, ADZ.\nNode ZHP is connected to nodes RET, JPE.\nNode FSZ is connected to nodes RET, WQL.\nNode COO is connected to node RET.\nNode XTL is connected to node RET.", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"Node (\\w+) is connected to nodes? (.+)\"\nmatches = re.findall(pattern, graph_str)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)\n", "graph_type": "bipartite_graph"},
{"graph": "{RET: [XFD, OQS, ZHP, FSZ, COO, XTL],\nWQL: [XFD, PZV, JSO, LIU, OQS, FSZ],\nJPE: [XFD, JSO, LIU, OQS, ZHP],\nADZ: [XFD, PZV, OQS],\nXFD: [RET, WQL, JPE, ADZ],\nPZV: [WQL, ADZ],\nJSO: [WQL, JPE],\nLIU: [WQL, JPE],\nOQS: [RET, WQL, JPE, ADZ],\nZHP: [RET, JPE],\nFSZ: [RET, WQL],\nCOO: [RET],\nXTL: [RET]}", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract connections\npattern = r\"(\\w+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n#  Add edges to the graph\nfor match in matches:\n    node = match[0]\n    edges = [edge.strip() for edge in match[1].split(\", \")]\n    for edge in edges:\n        G.add_edge(node, edge)", "graph_type": "bipartite_graph"}
]
