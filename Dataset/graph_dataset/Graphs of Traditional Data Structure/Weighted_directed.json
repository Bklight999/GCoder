[
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->7,8) (0->4,1) (0->2,9) (0->6,1) (1->7,8) (1->3,10) (1->6,5) (1->5,1) (4->5,2) (5->6,6) (6->7,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,3) (1->2,5) (2->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,5) (1->4,1) (1->2,10) (2->5,5) (3->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,1) (0->4,7) (0->7,10) (0->3,6) (1->5,7) (1->3,4) (2->3,9) (2->4,7) (3->5,5) (4->5,3) (5->6,8) (5->7,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->4,10) (0->12,6) (0->9,1) (0->10,4) (1->9,5) (1->2,5) (1->5,6) (1->10,9) (2->8,3) (3->11,4) (4->9,2) (4->11,2) (4->5,2) (4->7,3) (5->11,1) (6->11,7) (6->9,5) (8->10,2) (8->9,6) (9->10,1) (10->12,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,6) (1->2,6) (2->3,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,3) (1->3,9) (1->2,9) (2->4,1) (3->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->4,4) (1->2,10) (2->4,10) (4->5,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->3,5) (0->1,9) (1->5,4) (1->8,9) (1->4,9) (2->8,3) (2->3,3) (2->4,3) (2->5,3) (2->7,8) (3->6,7) (3->5,5) (3->10,9) (4->11,9) (4->5,10) (4->9,4) (5->6,9) (5->11,1) (6->9,8) (6->7,4) (6->8,6) (6->11,3) (7->10,10) (8->9,1) (9->11,5) (9->10,4) (10->11,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,7) (0->2,1) (1->3,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (1->2,6) (2->3,8) (2->4,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,3) (0->3,6) (3->6,1) (3->4,1) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,1) (1->2,2) (2->5,9) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,1) (2->3,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,9) (0->4,5) (1->2,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->8,8) (0->13,3) (0->5,10) (0->9,4) (0->2,10) (0->17,8) (1->15,7) (1->17,5) (1->11,3) (1->4,4) (1->16,7) (1->3,6) (1->13,3) (2->17,4) (2->5,3) (2->4,1) (2->11,10) (2->16,1) (2->10,2) (3->9,6) (3->13,9) (3->11,5) (3->17,1) (3->15,8) (3->16,1) (3->10,7) (3->8,8) (4->17,9) (4->15,4) (4->12,5) (4->10,2) (5->7,2) (5->6,8) (5->13,8) (5->12,9) (6->11,9) (6->15,4) (6->14,6) (6->7,4) (6->9,3) (7->8,1) (7->17,7) (7->13,3) (8->17,4) (8->9,3) (8->15,9) (8->16,8) (8->12,9) (9->12,10) (9->16,10) (9->11,7) (10->11,4) (10->13,6) (11->15,10) (11->12,2) (11->17,7) (11->16,2) (12->17,10) (12->16,5) (12->13,10) (13->16,5) (13->14,6) (13->15,5) (14->17,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->4,1) (0->2,7) (0->5,3) (2->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,3) (1->5,9) (2->4,9) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,7) (0->3,1) (1->2,9) (2->3,9) (2->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->7,4) (1->6,10) (2->4,9) (3->5,3) (4->6,6) (5->6,5) (6->7,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,3) (0->4,3) (1->2,9) (1->3,8) (2->6,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->13,9) (0->10,7) (1->7,10) (1->11,2) (2->10,9) (2->12,9) (2->3,5) (3->6,9) (3->9,6) (3->11,3) (3->13,4) (4->13,1) (5->9,7) (5->14,8) (6->10,3) (6->9,8) (7->9,3) (7->8,8) (8->14,8) (9->14,4) (9->10,10) (9->11,6) (10->12,1) (11->13,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->8,10) (0->1,7) (0->10,2) (0->12,10) (0->5,5) (0->3,10) (0->6,10) (1->7,4) (1->13,8) (1->11,9) (1->9,7) (1->12,3) (1->4,4) (2->3,10) (2->11,6) (2->14,7) (2->8,10) (2->4,5) (2->10,1) (3->7,6) (3->4,4) (3->6,4) (3->9,9) (3->5,6) (4->9,7) (4->10,8) (5->11,3) (5->12,2) (5->9,10) (6->10,5) (6->8,6) (6->13,7) (6->12,8) (7->13,10) (7->8,3) (7->11,9) (8->12,10) (8->13,2) (9->10,3) (9->13,1) (9->11,3) (10->13,5) (10->12,2) (11->13,9) (11->14,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->3,6) (0->2,8) (1->3,9) (2->5,8) (2->3,8) (3->4,3) (4->5,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,7) (1->2,7) (1->3,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,6) (1->3,4) (2->3,3) (3->5,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,10) (1->2,10) (2->3,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->15,5) (0->2,7) (0->10,4) (0->1,8) (0->3,7) (0->4,7) (0->5,10) (1->13,9) (1->10,4) (1->4,7) (1->17,6) (1->3,2) (1->2,2) (2->7,8) (2->11,5) (2->3,3) (2->15,8) (2->9,10) (2->4,2) (2->17,6) (3->11,2) (3->7,3) (3->9,6) (3->8,1) (3->14,5) (3->10,8) (4->13,3) (4->10,8) (4->5,1) (4->9,10) (4->7,2) (5->9,5) (5->16,3) (5->7,7) (5->12,8) (5->17,8) (6->11,8) (6->8,5) (6->16,4) (6->10,2) (7->11,5) (7->15,6) (7->12,5) (8->16,1) (8->9,8) (8->14,3) (9->12,10) (9->11,4) (10->11,10) (10->15,4) (10->16,8) (10->12,1) (11->12,8) (11->13,1) (11->14,9) (11->16,4) (12->13,6) (12->17,6) (12->15,10) (13->15,4) (13->14,8) (14->17,5) (15->17,7) (16->17,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,5) (0->2,1) (2->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->4,9) (1->3,2) (2->5,8) (3->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,1) (0->1,2) (1->3,9) (2->4,1) (3->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (1->2,2) (2->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (1->2,4) (2->3,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,3) (1->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,4) (0->3,7) (2->3,8) (3->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,4) (1->2,6) (2->3,7) (3->6,4) (3->5,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,9) (1->2,7) (2->4,3) (3->4,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->8,2) (1->5,10) (2->5,1) (3->6,2) (5->6,10) (6->7,3) (6->8,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,8) (1->2,6) (2->3,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (1->2,2) (2->4,10) (2->3,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->4,4) (0->3,1) (1->4,6) (2->6,4) (2->4,7) (3->4,8) (3->6,4) (4->5,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,10) (1->2,2) (2->3,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->6,8) (0->12,2) (0->11,6) (0->5,4) (1->14,5) (1->9,8) (1->11,6) (1->17,8) (1->15,8) (1->12,7) (2->15,6) (2->5,3) (2->16,7) (2->9,4) (2->8,3) (3->8,3) (3->15,8) (3->17,2) (4->6,4) (4->15,1) (4->11,6) (4->5,6) (4->16,1) (4->8,2) (5->10,7) (5->17,4) (6->10,4) (6->9,10) (6->7,7) (7->10,5) (7->14,5) (7->8,9) (7->17,10) (8->16,1) (8->10,1) (8->13,10) (8->11,10) (8->17,10) (8->12,6) (9->10,4) (10->15,9) (10->17,3) (11->15,7) (11->14,4) (12->14,9) (12->15,8) (12->16,8) (14->17,3) (15->17,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,7) (0->7,2) (0->3,6) (1->5,5) (1->2,6) (2->3,6) (2->5,9) (3->7,5) (3->5,7) (4->5,4) (5->6,3) (6->7,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (1->2,3) (2->3,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,5) (0->2,4) (1->2,1) (2->4,7) (2->3,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,4) (1->4,7) (2->3,6) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,4) (1->3,5) (1->2,1) (2->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,10) (2->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->2,10) (0->6,10) (1->6,10) (3->6,7) (3->4,6) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,6) (0->5,7) (1->2,3) (2->3,3) (3->5,10) (4->5,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,9) (0->3,1) (1->2,10) (2->3,10) (3->5,1) (3->4,1) (4->5,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->3,5) (0->16,8) (0->13,10) (0->17,3) (1->9,10) (1->13,2) (1->8,6) (2->13,10) (2->5,3) (2->18,8) (2->8,4) (3->5,4) (3->8,8) (3->6,4) (3->14,1) (3->15,5) (3->4,6) (4->7,7) (4->14,2) (4->18,7) (4->5,7) (4->9,1) (5->8,5) (5->13,6) (5->18,3) (5->7,8) (6->12,9) (6->16,8) (6->15,10) (6->11,3) (6->14,4) (7->15,9) (8->12,1) (8->13,7) (9->14,7) (9->10,10) (10->18,1) (10->14,5) (10->15,3) (11->13,10) (11->15,7) (11->14,7) (11->17,6) (12->14,3) (12->16,10) (12->13,10) (13->14,4) (13->15,2) (13->16,7) (13->18,3) (15->17,3) (16->18,1) (17->18,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->5,1) (0->6,6) (0->10,5) (0->7,1) (1->9,10) (1->7,10) (2->3,4) (2->8,2) (3->6,1) (4->8,3) (4->9,6) (5->8,5) (7->10,7) (8->9,10) (9->10,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->17,5) (0->11,3) (0->13,5) (0->7,3) (0->4,2) (0->18,3) (1->11,4) (1->2,7) (1->17,1) (1->18,5) (1->13,4) (1->14,5) (1->16,10) (2->11,6) (2->9,6) (2->12,10) (2->7,3) (2->8,9) (2->3,5) (2->4,10) (2->5,2) (2->14,1) (3->12,2) (3->19,7) (3->15,6) (3->6,3) (3->16,2) (4->5,8) (4->12,2) (4->6,4) (4->10,2) (4->16,2) (5->19,8) (5->11,3) (5->15,1) (5->17,3) (5->6,7) (6->11,6) (6->15,9) (6->10,10) (6->14,9) (7->18,6) (7->10,9) (7->12,5) (7->15,3) (8->9,10) (8->16,3) (8->10,6) (8->15,4) (9->17,4) (9->18,9) (9->13,9) (10->17,8) (10->11,5) (10->12,10) (10->16,7) (11->14,8) (11->17,8) (11->18,9) (11->15,3) (12->18,5) (12->15,1) (12->17,9) (13->15,5) (13->17,9) (14->17,6) (14->18,9) (14->19,6) (14->16,8) (15->18,6) (16->18,9) (17->18,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,5) (2->3,7) (3->4,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,8) (0->1,5) (0->3,7) (0->2,9) (1->3,9) (2->5,5) (3->5,6) (4->6,3) (5->6,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (1->2,9) (2->6,8) (2->5,7) (3->4,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->6,2) (0->4,1) (1->4,10) (1->9,3) (1->8,5) (2->6,3) (2->3,3) (2->10,6) (4->6,1) (4->5,5) (5->6,6) (5->9,4) (5->7,4) (6->8,3) (6->10,4) (6->11,6) (8->12,5) (8->9,4) (10->11,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->3,4) (1->3,6) (1->5,2) (2->3,1) (2->5,8) (2->4,8) (3->4,2) (4->5,2) (4->6,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,5) (0->6,2) (0->4,1) (1->5,1) (2->5,7) (2->7,5) (2->6,5) (3->7,10) (3->6,2) (4->5,5) (4->7,6) (4->6,4) (5->6,10) (6->7,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,10) (1->3,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->6,6) (0->1,2) (2->9,10) (2->6,4) (2->5,10) (2->13,6) (2->4,3) (3->6,2) (4->5,5) (4->7,7) (4->11,3) (4->12,7) (5->10,1) (5->12,6) (6->8,2) (7->13,8) (7->10,3) (7->9,3) (8->11,1) (9->14,7) (9->13,9) (9->12,5) (10->14,10) (11->13,6) (12->13,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (1->3,8) (2->3,7) (3->4,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,1) (1->5,2) (1->3,2) (3->4,6) (3->5,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->11,1) (0->3,5) (0->8,1) (0->2,2) (0->4,5) (1->15,3) (2->15,8) (2->14,2) (2->16,9) (2->17,3) (2->12,1) (3->6,8) (3->10,3) (3->8,6) (3->15,4) (3->5,7) (4->15,1) (4->8,6) (4->5,1) (4->16,8) (4->10,9) (4->6,2) (5->10,9) (5->15,6) (6->9,1) (6->10,4) (6->11,10) (6->13,10) (6->16,8) (7->13,9) (7->15,1) (7->12,5) (7->9,2) (7->16,4) (8->9,2) (8->17,4) (8->16,7) (9->11,1) (9->12,1) (9->17,10) (10->14,3) (10->13,8) (10->15,10) (11->16,8) (11->12,3) (14->16,6) (14->17,10) (15->16,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,5) (0->1,7) (1->4,9) (1->2,2) (2->4,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->6,7) (0->13,6) (1->4,6) (1->15,5) (1->6,6) (1->9,3) (1->12,3) (2->16,1) (2->6,9) (3->8,1) (3->11,1) (4->6,2) (4->10,5) (4->15,2) (5->9,9) (5->10,10) (5->14,5) (6->16,2) (6->13,9) (7->9,2) (7->13,6) (7->15,9) (8->11,1) (8->9,6) (9->12,1) (9->15,8) (9->16,3) (10->11,10) (10->14,9) (10->16,2) (11->16,2) (11->13,9) (11->14,8) (13->15,7) (14->16,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->7,7) (0->1,7) (1->8,8) (2->3,1) (2->6,10) (2->7,2) (3->8,9) (5->6,4) (5->7,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->3,2) (0->1,4) (1->2,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->5,10) (0->1,6) (0->3,3) (1->3,9) (1->4,9) (2->8,2) (2->6,10) (2->3,3) (3->5,10) (3->8,4) (3->7,10) (3->6,1) (3->4,2) (5->7,10) (6->8,3) (6->7,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,9) (0->3,10) (1->2,4) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,8) (1->2,8) (2->3,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->6,5) (1->6,5) (2->3,7) (3->4,8) (3->6,10) (4->5,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,9) (1->3,9) (2->5,2) (3->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->2,9) (0->5,10) (1->4,8) (1->5,2) (1->6,8) (1->8,5) (1->9,5) (1->3,3) (2->4,10) (2->9,4) (3->6,1) (3->7,6) (3->9,6) (3->4,10) (4->7,7) (4->5,6) (5->9,4) (5->8,1) (5->6,10) (6->8,2) (7->8,1) (8->9,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->7,2) (0->1,8) (1->6,5) (1->5,7) (1->9,1) (2->7,6) (3->9,7) (3->4,7) (4->5,6) (5->7,2) (7->9,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,2) (1->2,6) (1->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->16,6) (0->13,4) (0->9,5) (0->7,1) (0->3,5) (0->8,4) (1->13,3) (1->9,3) (1->8,3) (1->3,6) (2->18,6) (2->8,2) (2->13,2) (2->17,3) (2->16,9) (2->10,5) (2->14,5) (3->8,5) (4->18,6) (4->7,2) (4->6,2) (4->16,8) (4->14,10) (5->12,6) (5->15,1) (5->10,7) (5->9,6) (7->14,3) (7->16,3) (7->13,3) (7->9,3) (8->12,10) (8->11,6) (9->11,10) (10->12,5) (10->17,10) (11->12,6) (13->18,4) (13->16,3) (14->16,2) (14->18,1) (15->18,2) (15->17,3) (17->18,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->2,5) (0->3,9) (0->6,4) (1->4,3) (1->6,6) (1->5,8) (3->4,3) (3->5,8) (4->5,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,3) (2->3,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->4,7) (0->5,5) (0->6,9) (1->2,1) (1->3,5) (2->5,7) (2->7,1) (2->4,8) (3->5,4) (3->6,8) (3->4,10) (4->7,6) (5->6,7) (5->8,8) (6->7,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,3) (0->3,9) (1->3,1) (3->4,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->3,5) (1->3,9) (2->4,1) (3->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->12,10) (0->14,10) (0->11,7) (0->16,5) (0->5,10) (0->10,2) (0->13,1) (1->13,6) (1->19,5) (1->8,9) (1->3,3) (1->18,2) (2->8,8) (2->11,1) (2->9,1) (2->19,1) (2->5,9) (2->17,2) (2->12,3) (3->17,7) (3->15,7) (3->14,10) (3->4,2) (3->12,9) (4->14,7) (4->19,3) (4->18,8) (4->9,5) (4->5,9) (5->7,4) (5->19,8) (5->10,2) (5->15,6) (6->15,7) (6->8,2) (6->18,7) (6->9,6) (6->7,7) (6->12,2) (6->14,5) (7->12,8) (7->13,9) (7->17,7) (7->11,8) (7->8,3) (7->9,2) (7->19,6) (7->16,9) (8->12,5) (8->19,2) (8->15,4) (9->14,10) (9->15,8) (10->13,2) (10->17,8) (11->12,6) (11->18,4) (11->13,3) (12->15,1) (12->17,9) (12->19,1) (12->14,8) (13->17,1) (13->16,6) (13->14,6) (14->17,3) (15->17,4) (16->18,10) (18->19,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,6) (1->3,2) (3->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,4) (0->7,7) (1->5,6) (1->3,8) (1->4,7) (2->3,8) (2->4,1) (3->4,4) (3->6,10) (4->6,4) (6->7,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->5,3) (0->1,4) (1->7,3) (1->5,7) (1->6,4) (2->7,10) (2->4,4) (4->7,6) (6->7,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,1) (1->3,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,3) (0->2,4) (2->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->3,8) (0->1,6) (1->2,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,8) (1->2,3) (3->4,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->10,5) (0->5,6) (0->8,8) (0->6,1) (0->9,9) (0->12,8) (1->10,6) (1->4,6) (1->8,4) (1->11,7) (2->4,3) (3->11,4) (3->6,8) (3->7,1) (4->6,6) (4->8,6) (5->7,7) (5->12,10) (5->9,1) (6->10,9) (7->11,6) (7->9,8) (9->11,1) (9->12,10) (10->12,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->5,4) (0->3,6) (0->4,7) (1->5,9) (2->10,4) (2->6,7) (2->7,6) (3->9,6) (3->4,3) (4->10,2) (4->8,7) (4->9,7) (4->7,9) (5->6,7) (5->7,5) (5->10,7) (6->9,10) (6->7,7) (6->10,10) (6->8,1) (7->8,8) (8->9,9) (9->10,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,4) (0->2,9) (0->1,10) (1->6,3) (2->5,8) (2->4,7) (2->3,5) (3->6,5) (4->7,2) (4->8,1) (5->8,9) (5->6,1) (5->7,2) (6->7,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,2) (0->6,3) (0->5,7) (1->2,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->4,5) (0->14,2) (0->1,4) (1->7,3) (1->5,3) (1->13,1) (1->2,4) (1->4,7) (2->14,9) (2->6,9) (2->5,3) (2->4,2) (2->7,10) (3->4,2) (3->13,2) (3->8,2) (3->6,10) (3->14,7) (3->11,3) (4->6,1) (4->9,6) (4->14,7) (5->14,6) (5->6,2) (6->11,6) (6->10,9) (6->12,3) (6->7,10) (7->9,7) (7->8,10) (9->10,8) (9->12,8) (10->14,8) (10->12,8) (11->14,4) (11->12,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,6) (1->2,8) (1->3,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,3) (1->2,4) (2->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,5) (1->2,3) (2->3,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->4,2) (0->6,6) (1->5,7) (2->5,8) (3->5,9) (3->4,7) (4->6,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->2,1) (0->4,5) (1->6,9) (2->3,9) (3->4,4) (4->6,8) (4->5,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->2,5) (0->4,10) (0->3,1) (0->1,6) (1->4,5) (1->2,2) (1->7,5) (2->8,9) (2->4,7) (4->9,5) (5->9,3) (5->6,4) (7->9,3) (8->9,4) (9->10,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,8) (2->3,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (1->5,8) (1->2,10) (2->4,6) (4->5,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->6,7) (0->2,8) (1->5,2) (3->4,6) (5->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,7) (1->3,2) (2->4,1) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,1) (0->1,8) (0->5,7) (1->7,10) (1->6,8) (2->4,10) (2->6,1) (2->7,6) (3->4,10) (4->5,6) (5->6,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->4,8) (1->5,6) (1->2,5) (2->6,7) (3->6,2) (4->5,6) (5->6,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->15,4) (0->10,5) (0->16,4) (0->6,3) (0->8,1) (0->9,2) (0->13,4) (0->5,6) (0->2,1) (1->14,8) (1->11,10) (1->15,3) (1->2,8) (1->17,10) (1->3,4) (1->6,6) (1->16,1) (1->12,6) (2->7,2) (2->16,4) (2->11,2) (2->9,5) (2->13,10) (2->17,6) (2->12,7) (2->5,5) (2->3,3) (3->6,4) (3->12,5) (3->14,1) (3->9,4) (3->15,8) (3->17,1) (3->8,1) (3->7,4) (3->10,3) (4->10,8) (4->5,4) (4->9,3) (4->16,6) (4->8,8) (4->11,3) (4->6,1) (5->6,7) (6->11,1) (6->9,8) (6->7,10) (6->12,1) (6->17,4) (7->15,2) (7->14,1) (7->10,5) (7->16,8) (7->9,2) (8->15,1) (8->13,9) (9->17,10) (9->16,9) (9->15,10) (9->12,5) (9->13,7) (10->12,3) (10->17,4) (11->13,10) (11->12,8) (11->16,1) (11->17,10) (11->15,7) (12->17,10) (12->14,2) (12->15,6) (13->16,4) (14->16,2) (15->16,3) (15->17,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->1,6) (0->8,5) (0->3,1) (1->2,1) (1->4,10) (2->6,10) (2->5,6) (3->5,8) (3->4,7) (4->5,1) (4->7,5) (5->6,6) (7->8,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->6,6) (0->1,9) (1->5,1) (1->2,4) (2->3,4) (3->4,7) (3->5,2) (4->6,4) (5->7,8) (5->8,9) (6->7,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->2,9) (0->13,5) (0->12,10) (0->3,7) (0->6,1) (0->8,2) (1->13,5) (1->10,1) (1->9,6) (1->5,2) (1->3,5) (1->7,6) (2->6,8) (2->9,2) (2->11,5) (2->10,1) (2->14,4) (2->3,7) (3->9,7) (3->14,1) (3->12,9) (3->11,9) (4->11,5) (4->9,7) (4->5,8) (4->10,1) (4->6,4) (5->10,3) (5->9,1) (5->6,8) (5->14,5) (6->9,7) (6->13,9) (6->11,3) (7->13,9) (7->14,4) (7->11,4) (7->8,2) (7->10,6) (7->9,10) (8->9,4) (8->10,2) (8->11,4) (9->11,8) (9->14,3) (10->12,6) (10->13,9) (10->11,10) (13->14,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,10) (1->2,3) (1->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->3,10) (0->6,3) (0->8,2) (1->4,5) (1->5,5) (1->9,5) (1->8,9) (2->8,8) (2->4,2) (3->9,5) (4->5,8) (4->14,8) (5->10,8) (5->14,6) (6->12,8) (6->8,8) (6->14,4) (8->11,4) (9->13,3) (10->11,7) (11->12,6) (13->14,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->6,6) (0->1,1) (1->3,2) (1->6,8) (2->5,3) (2->4,3) (3->6,3) (5->6,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (1->2,10) (2->4,10) (4->5,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,5) (0->1,10) (1->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,8) (0->6,6) (0->3,5) (1->5,2) (1->6,8) (3->6,6) (4->5,5) (5->6,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,5) (1->6,2) (1->5,8) (2->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->11,9) (0->7,5) (0->13,3) (0->2,6) (0->10,7) (0->6,3) (0->5,10) (1->13,7) (2->4,1) (2->8,9) (2->5,8) (2->13,7) (2->3,4) (2->7,7) (3->6,6) (3->12,9) (3->13,3) (3->4,8) (3->5,10) (4->6,1) (4->5,5) (4->13,5) (4->7,9) (5->9,3) (5->11,2) (5->7,3) (6->13,10) (6->9,3) (7->12,8) (7->10,9) (8->9,4) (8->10,2) (9->13,2) (10->12,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,4) (1->2,7) (1->3,5) (3->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,4) (1->3,9) (2->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,4) (0->3,7) (2->4,10) (2->3,8) (3->4,9) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->5,9) (0->2,4) (0->1,10) (1->2,2) (1->4,1) (1->3,9) (2->3,10) (3->6,9) (4->6,7) (5->6,3) (6->7,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->4,9) (0->12,2) (0->3,5) (0->14,1) (0->8,6) (1->12,4) (1->11,1) (1->7,6) (1->9,7) (1->16,9) (2->16,4) (2->7,5) (2->13,7) (2->10,6) (3->4,9) (3->6,6) (3->17,6) (4->14,3) (4->6,10) (5->12,9) (5->9,4) (5->17,4) (6->8,6) (6->12,2) (6->17,8) (7->12,10) (8->14,3) (8->11,3) (8->13,2) (9->18,9) (9->17,6) (10->17,6) (10->16,1) (11->12,3) (12->16,1) (12->18,3) (13->15,9) (13->18,5) (13->17,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->4,4) (0->6,6) (1->5,4) (1->7,8) (1->3,7) (2->4,3) (2->3,4) (3->4,6) (3->5,6) (4->5,6) (4->7,6) (5->7,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,7) (1->3,9) (2->3,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->2,3) (0->1,8) (1->3,1) (1->6,3) (2->7,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,9) (0->3,5) (3->4,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,10) (0->1,10) (1->2,4) (2->3,3) (2->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,6) (0->1,8) (1->2,9) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,8) (1->2,8) (2->4,1) (3->5,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 35, and the edges are: (0->34,8) (0->10,4) (0->32,5) (0->5,2) (0->30,6) (0->29,9) (0->33,10) (1->18,8) (1->26,4) (1->10,7) (1->20,4) (1->14,1) (1->23,2) (1->8,4) (2->35,9) (2->22,1) (2->27,5) (2->28,8) (2->18,5) (2->6,8) (3->5,2) (3->15,7) (3->18,2) (3->20,10) (3->7,8) (3->28,3) (4->12,2) (4->23,2) (4->9,10) (4->33,9) (4->17,7) (5->32,4) (6->11,9) (6->23,8) (6->14,7) (7->26,8) (7->19,3) (7->28,2) (7->25,10) (7->21,9) (7->31,3) (7->12,6) (8->33,3) (8->28,6) (8->13,10) (9->28,10) (9->26,4) (10->22,3) (10->23,7) (10->30,5) (10->11,9) (10->18,1) (10->17,6) (11->31,9) (11->22,6) (11->14,3) (12->32,5) (12->35,3) (12->16,2) (12->13,3) (12->25,7) (13->35,6) (13->32,5) (13->28,7) (14->24,10) (14->34,3) (14->30,7) (14->33,4) (14->32,6) (15->17,9) (15->30,2) (15->22,3) (15->31,9) (15->29,10) (15->20,10) (15->21,6) (16->19,6) (16->29,3) (16->24,2) (17->27,1) (17->21,3) (17->25,1) (19->35,4) (19->26,9) (20->26,1) (20->30,1) (20->24,3) (21->22,9) (21->32,1) (21->34,5) (21->35,3) (22->28,6) (22->29,6) (22->33,3) (23->26,5) (25->29,8) (25->28,4) (25->30,6) (26->28,2) (26->30,10) (26->33,3) (26->34,1) (27->33,2) (28->33,7) (29->35,10) (30->31,8) (31->34,5) (32->33,9) (34->35,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 30, and the edges are: (0->11,4) (0->27,2) (0->4,6) (0->20,1) (1->9,4) (1->4,6) (1->17,5) (1->15,3) (1->8,8) (1->29,8) (1->19,5) (2->7,2) (2->4,3) (2->20,7) (2->15,10) (2->16,8) (2->3,5) (3->30,7) (3->8,5) (3->23,8) (3->5,2) (3->16,8) (3->15,6) (4->7,7) (4->28,5) (4->13,10) (4->8,3) (4->23,3) (4->26,6) (5->20,2) (5->17,8) (5->23,8) (5->28,4) (6->18,9) (6->13,5) (6->26,5) (6->10,7) (6->14,6) (7->28,6) (7->14,9) (7->13,9) (7->27,3) (8->26,8) (8->19,7) (8->27,10) (8->24,4) (8->10,10) (8->17,10) (8->22,1) (9->12,2) (10->19,8) (10->20,1) (10->15,10) (10->29,9) (10->27,4) (11->22,1) (11->19,2) (12->21,6) (12->18,1) (13->19,3) (14->20,4) (14->23,10) (14->24,8) (14->17,5) (15->25,1) (15->19,7) (15->18,2) (15->20,9) (16->24,3) (16->25,9) (16->17,2) (17->19,4) (17->28,1) (17->18,3) (17->27,4) (18->19,5) (19->25,2) (20->24,1) (20->28,6) (22->23,9) (24->29,1) (24->27,7) (25->30,5) (26->28,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 22, and the edges are: (0->21,8) (0->1,7) (0->16,9) (1->11,6) (1->15,9) (1->5,3) (1->9,6) (1->8,6) (1->19,1) (2->6,10) (3->9,3) (3->13,3) (4->14,5) (4->18,3) (4->10,9) (4->15,2) (4->12,2) (4->8,10) (4->13,8) (4->6,8) (5->13,3) (5->22,3) (6->14,9) (6->12,5) (6->13,3) (7->12,7) (7->13,1) (7->14,5) (7->11,3) (8->11,4) (8->21,3) (9->21,1) (9->12,9) (9->14,8) (10->16,8) (11->18,10) (11->21,10) (12->20,3) (12->15,3) (12->18,5) (13->21,9) (15->16,4) (16->22,3) (18->20,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 20, and the edges are: (0->15,4) (0->17,10) (1->6,1) (1->17,9) (1->20,4) (1->11,5) (1->7,3) (2->9,6) (2->17,2) (2->7,3) (2->3,1) (2->20,8) (3->17,4) (3->20,8) (3->15,7) (3->13,7) (4->16,6) (5->9,5) (5->17,8) (5->11,9) (6->12,10) (6->14,8) (6->17,7) (6->11,4) (6->16,6) (8->15,10) (8->20,2) (8->12,2) (8->9,1) (8->16,4) (11->18,9) (12->20,10) (13->19,2) (13->15,1) (14->17,2) (15->16,6) (17->19,6) (17->20,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 20, and the edges are: (0->3,6) (0->12,4) (0->19,10) (1->11,6) (1->13,8) (1->9,10) (1->15,3) (1->12,1) (1->6,6) (2->12,4) (3->14,1) (4->6,4) (4->9,10) (4->19,5) (5->20,4) (6->11,3) (7->18,3) (7->14,10) (7->11,9) (7->10,3) (7->9,9) (8->12,6) (8->11,10) (8->17,1) (9->10,10) (9->11,9) (11->18,2) (11->20,10) (12->16,8) (13->17,6) (13->20,5) (14->18,9) (14->19,1) (15->17,8) (15->19,10) (15->18,4) (16->20,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 24, and the edges are: (0->21,6) (0->16,4) (0->8,10) (0->19,4) (0->24,10) (1->9,3) (1->12,8) (1->14,7) (1->2,6) (1->20,10) (2->18,1) (2->23,3) (2->16,1) (2->13,9) (3->19,6) (3->18,8) (3->22,10) (4->11,7) (4->5,2) (4->10,8) (5->21,4) (5->13,7) (5->20,8) (5->24,4) (6->7,7) (6->18,4) (7->8,10) (7->11,8) (7->14,8) (7->23,4) (8->21,5) (8->19,9) (8->9,1) (9->22,5) (9->24,9) (10->17,8) (10->20,3) (10->11,9) (10->14,3) (11->15,7) (11->13,6) (12->18,1) (12->24,4) (14->19,9) (15->22,7) (15->20,2) (16->19,10) (16->22,9) (17->21,7) (17->23,6) (17->24,8) (19->24,4) (20->24,1) (21->23,9) (22->23,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 30, and the edges are: (0->20,3) (0->18,1) (0->11,3) (1->17,8) (1->9,7) (1->25,5) (2->16,7) (3->24,10) (3->11,6) (4->10,4) (4->30,1) (4->13,10) (5->9,4) (5->17,6) (5->27,1) (5->25,10) (6->13,9) (6->28,9) (6->11,4) (6->12,4) (6->8,4) (6->20,2) (6->15,10) (6->17,6) (6->29,3) (7->28,5) (7->9,5) (8->14,2) (8->16,5) (8->29,6) (9->13,10) (9->28,7) (9->30,1) (10->29,6) (10->15,5) (10->27,4) (11->25,4) (12->25,7) (13->21,10) (13->28,7) (14->15,4) (14->30,7) (14->21,8) (14->16,9) (15->30,4) (16->26,9) (17->26,6) (17->24,5) (18->21,6) (19->27,8) (19->30,9) (19->25,6) (19->20,2) (19->21,4) (19->26,3) (20->29,7) (20->24,3) (20->30,9) (21->25,9) (21->26,6) (21->27,6) (22->28,10) (22->26,10) (23->25,8) (23->28,5) (24->27,10) (24->30,2) (26->27,2) (27->28,9) (28->30,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 57, and the edges are: (0->47,9) (0->18,5) (0->44,5) (0->21,9) (0->5,8) (0->42,2) (0->25,2) (0->6,6) (1->3,3) (1->19,5) (1->10,6) (2->55,4) (2->41,2) (2->26,3) (3->16,3) (3->20,2) (4->17,8) (4->49,10) (4->32,1) (4->38,2) (4->20,10) (4->26,1) (4->54,3) (5->27,9) (5->39,6) (5->18,10) (5->50,9) (5->28,4) (5->53,8) (6->11,2) (6->22,9) (6->38,9) (6->31,10) (6->23,5) (7->51,9) (7->53,9) (7->31,7) (8->38,8) (8->53,9) (8->18,5) (8->34,7) (8->49,10) (8->52,6) (8->41,10) (8->30,2) (9->41,3) (9->45,9) (10->49,8) (10->46,7) (10->12,7) (10->15,10) (10->11,7) (10->52,1) (10->35,10) (10->26,7) (11->37,3) (11->16,6) (11->44,2) (11->46,2) (11->33,10) (11->19,6) (11->56,5) (12->23,4) (12->55,9) (12->33,6) (12->44,9) (12->56,9) (12->34,9) (12->17,1) (12->54,10) (12->22,7) (13->31,5) (13->57,8) (14->38,5) (15->45,5) (15->26,8) (15->35,9) (15->51,6) (15->39,2) (16->32,3) (16->38,6) (16->25,10) (16->28,6) (16->34,3) (16->42,1) (16->51,7) (16->54,9) (17->44,4) (17->31,5) (17->41,5) (17->33,10) (17->27,8) (17->35,6) (17->39,10) (17->24,2) (18->31,2) (18->45,5) (18->25,2) (18->26,10) (18->22,1) (18->56,9) (18->37,5) (19->29,3) (19->53,5) (19->40,2) (19->30,1) (20->54,8) (20->52,1) (20->34,9) (22->46,4) (22->24,2) (22->28,2) (23->49,1) (23->32,5) (23->48,4) (23->35,3) (23->47,6) (23->53,5) (24->37,1) (24->38,4) (24->43,4) (24->50,1) (24->35,9) (25->36,6) (25->55,5) (25->46,4) (26->31,4) (26->54,3) (26->40,10) (26->47,9) (27->39,4) (27->53,2) (27->32,5) (27->42,6) (28->51,8) (28->34,6) (29->57,5) (30->31,6) (30->55,3) (30->45,6) (30->38,2) (32->54,7) (32->52,2) (32->46,9) (33->55,1) (33->52,10) (34->42,5) (34->50,10) (34->55,1) (34->36,6) (34->46,1) (34->53,10) (34->43,3) (34->35,8) (34->51,3) (35->50,2) (35->44,3) (35->55,5) (36->48,6) (37->40,5) (37->49,2) (37->55,2) (37->41,7) (37->48,4) (38->42,9) (38->39,2) (38->55,10) (39->50,3) (39->43,2) (39->42,10) (39->40,7) (40->43,2) (40->52,3) (40->47,5) (40->46,2) (41->45,8) (41->56,2) (41->50,10) (41->44,6) (42->46,7) (42->43,9) (43->56,9) (43->44,6) (43->55,4) (43->49,10) (45->51,5) (46->52,1) (47->57,7) (47->50,6) (48->49,10) (48->55,3) (49->55,2) (50->51,3) (52->53,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 47, and the edges are: (0->11,6) (0->45,10) (0->15,8) (0->4,7) (0->33,2) (0->28,7) (1->10,10) (1->40,7) (1->4,1) (1->8,10) (2->28,6) (2->36,2) (2->6,6) (3->20,3) (3->39,1) (3->40,4) (3->14,9) (3->35,2) (3->22,2) (4->8,9) (4->47,8) (4->22,9) (4->30,2) (5->45,8) (6->28,2) (7->20,4) (7->31,8) (7->43,3) (9->34,8) (9->11,2) (10->25,5) (10->21,3) (11->20,10) (11->22,3) (11->33,4) (12->40,3) (12->24,10) (12->22,7) (12->35,8) (12->18,3) (12->46,10) (12->39,3) (12->20,1) (13->32,5) (13->36,7) (13->18,4) (13->45,3) (13->40,7) (13->43,3) (14->37,5) (14->24,7) (14->44,10) (14->15,1) (14->22,10) (14->25,9) (14->28,7) (14->19,5) (14->23,1) (15->37,5) (15->17,3) (15->25,5) (16->45,3) (16->18,10) (16->24,2) (16->35,2) (16->30,7) (17->27,2) (17->41,4) (17->25,4) (17->18,1) (18->21,4) (18->39,2) (18->31,5) (18->46,4) (19->21,3) (20->28,5) (20->23,10) (20->39,1) (20->34,6) (20->41,6) (21->23,10) (21->36,2) (21->31,1) (22->41,6) (22->24,8) (22->43,1) (23->38,8) (23->32,1) (24->45,4) (25->31,4) (25->47,4) (26->40,6) (26->32,10) (27->45,2) (27->31,1) (27->30,1) (27->34,4) (27->33,1) (28->30,4) (28->37,8) (31->32,2) (31->36,3) (31->38,7) (32->34,6) (33->34,2) (33->38,9) (33->47,2) (34->45,3) (34->40,10) (37->43,6) (37->42,4) (37->39,10) (38->41,10) (42->44,5) (46->47,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 21, and the edges are: (0->16,4) (0->11,5) (0->3,1) (0->10,7) (0->13,2) (0->8,4) (0->12,10) (1->15,3) (1->9,8) (2->6,8) (2->3,6) (2->12,6) (2->16,4) (2->20,8) (3->4,5) (3->13,2) (3->6,6) (3->14,3) (4->12,8) (4->20,10) (4->17,9) (5->16,1) (5->21,3) (5->19,8) (5->13,3) (6->8,3) (6->15,4) (7->9,10) (7->10,6) (7->16,6) (9->16,9) (9->10,9) (10->18,9) (10->16,7) (10->13,10) (11->16,4) (11->17,7) (12->20,4) (13->18,6) (14->16,4) (15->17,1) (15->16,4) (16->19,8) (16->21,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 52, and the edges are: (0->33,9) (0->30,3) (0->15,3) (0->18,1) (0->20,10) (1->5,6) (1->24,10) (1->17,10) (1->39,10) (1->41,2) (1->11,4) (1->25,1) (1->3,6) (1->28,6) (2->14,3) (2->37,2) (2->41,8) (2->36,2) (2->6,6) (2->13,3) (2->27,1) (2->47,4) (3->32,4) (3->44,1) (3->41,9) (3->18,4) (4->39,7) (4->51,5) (4->45,2) (4->17,9) (5->34,3) (5->41,8) (5->27,8) (5->11,10) (6->16,6) (6->11,2) (6->29,10) (6->20,5) (6->19,10) (6->37,1) (6->48,5) (6->38,4) (7->46,4) (7->35,6) (7->52,8) (7->50,2) (7->30,5) (8->14,7) (8->24,5) (8->51,3) (8->20,1) (9->19,2) (9->41,6) (10->47,9) (10->42,9) (10->45,4) (10->23,2) (10->34,5) (10->31,1) (10->50,5) (11->32,3) (11->46,5) (12->52,3) (12->28,4) (12->18,4) (12->35,5) (13->32,7) (13->43,2) (13->17,3) (13->50,2) (13->15,8) (14->30,10) (14->36,3) (14->47,2) (14->16,5) (14->44,3) (14->37,9) (14->50,7) (14->46,5) (15->32,8) (15->42,4) (15->17,4) (15->24,4) (16->22,10) (17->29,1) (17->41,8) (17->32,3) (17->27,3) (17->24,4) (17->30,4) (18->37,10) (18->20,1) (18->41,8) (18->31,3) (19->36,1) (19->47,6) (19->40,8) (19->35,7) (19->23,5) (19->44,5) (19->41,4) (19->26,5) (20->44,4) (20->48,4) (20->46,6) (21->30,8) (22->52,7) (23->34,6) (23->26,10) (23->37,5) (23->48,9) (24->31,9) (25->38,10) (25->47,3) (25->42,9) (26->37,8) (26->47,10) (26->46,6) (27->50,10) (27->49,1) (27->34,9) (27->35,8) (27->52,4) (28->41,5) (28->43,10) (28->52,6) (28->31,8) (29->37,9) (29->38,2) (29->35,10) (29->49,5) (30->47,10) (30->31,5) (31->36,1) (31->42,7) (31->32,6) (32->42,2) (32->50,6) (32->41,8) (34->36,2) (34->47,2) (36->42,2) (37->46,4) (38->52,10) (38->41,1) (39->41,1) (39->40,10) (39->47,3) (39->51,5) (39->48,6) (40->51,5) (42->45,1) (42->47,8) (42->50,2) (43->48,4) (43->50,2) (44->49,2) (45->50,10) (48->49,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 43, and the edges are: (0->11,3) (0->13,4) (1->18,4) (1->32,6) (1->43,2) (1->41,9) (1->13,4) (1->10,3) (1->7,4) (1->23,10) (2->39,3) (2->7,3) (2->33,8) (3->35,8) (3->6,9) (3->12,9) (4->10,4) (4->17,10) (5->25,2) (6->40,3) (7->20,8) (7->9,3) (7->19,3) (7->10,5) (8->18,1) (8->34,2) (8->16,5) (9->15,3) (9->24,1) (9->11,1) (9->29,6) (10->34,5) (11->25,3) (11->41,1) (11->12,1) (11->40,3) (11->32,10) (12->39,5) (12->33,10) (12->29,8) (13->28,8) (13->15,5) (13->25,7) (13->21,2) (14->20,7) (14->39,4) (15->34,9) (15->19,1) (15->18,7) (15->32,10) (15->30,2) (15->29,4) (16->40,4) (16->18,3) (16->43,4) (16->28,1) (16->32,4) (17->24,7) (17->27,3) (18->31,9) (18->23,8) (18->33,8) (18->40,4) (18->25,9) (18->36,7) (19->30,4) (19->43,5) (19->28,8) (19->35,8) (21->26,9) (21->42,6) (22->26,1) (22->24,2) (22->33,3) (22->30,9) (22->41,5) (23->43,5) (24->39,6) (25->27,8) (25->28,9) (25->39,6) (26->37,9) (26->30,8) (26->35,9) (27->39,2) (27->37,4) (28->39,9) (28->31,8) (29->35,2) (29->34,9) (30->42,2) (31->42,5) (31->37,1) (31->34,1) (41->42,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 42, and the edges are: (0->10,3) (0->9,7) (0->40,7) (1->11,9) (1->22,4) (1->35,5) (1->9,9) (2->37,2) (2->32,4) (2->5,2) (3->6,5) (3->24,9) (3->37,3) (3->14,4) (4->15,2) (4->22,6) (4->31,9) (5->20,10) (5->22,2) (5->35,2) (5->29,9) (5->38,10) (5->25,1) (6->41,8) (6->8,9) (6->7,6) (6->11,9) (6->36,3) (6->35,6) (7->9,4) (7->37,10) (8->16,2) (9->33,6) (9->26,2) (10->26,4) (10->18,5) (10->27,8) (10->32,5) (10->42,6) (10->14,7) (10->23,6) (11->34,3) (11->35,6) (11->40,5) (11->23,8) (12->41,4) (12->30,1) (12->38,8) (12->24,10) (12->17,1) (13->41,4) (13->20,4) (13->29,7) (14->18,9) (14->15,9) (14->41,10) (15->24,2) (15->39,4) (15->33,7) (15->29,5) (15->25,5) (16->25,7) (16->29,3) (16->31,7) (16->26,4) (16->22,10) (17->39,8) (17->27,5) (17->25,7) (17->38,8) (18->34,9) (19->31,2) (20->36,3) (20->40,10) (20->25,3) (21->32,5) (21->40,8) (21->28,5) (22->35,8) (22->23,8) (23->36,6) (23->32,7) (23->38,3) (23->37,2) (24->26,10) (25->38,9) (26->29,5) (26->38,5) (26->30,7) (26->41,5) (26->33,1) (26->37,9) (27->42,7) (27->32,10) (28->41,10) (28->40,9) (29->37,1) (29->38,4) (30->38,10) (30->34,9) (30->36,8) (30->39,6) (30->33,7) (32->34,2) (33->35,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 54, and the edges are: (0->13,2) (0->34,7) (0->37,8) (1->26,4) (1->14,6) (1->29,5) (1->48,1) (1->2,5) (1->53,10) (1->28,3) (1->11,8) (1->8,9) (1->27,8) (1->13,3) (2->44,10) (2->19,3) (2->9,8) (2->21,4) (2->16,4) (2->23,4) (3->37,6) (3->9,1) (3->10,3) (4->29,9) (4->54,7) (4->8,6) (4->39,2) (4->52,3) (4->19,10) (5->37,10) (5->20,10) (5->9,3) (6->38,3) (6->23,10) (6->41,5) (7->45,5) (7->22,8) (7->20,4) (7->12,6) (7->53,6) (7->35,3) (8->36,9) (8->50,9) (8->14,7) (8->19,9) (8->44,2) (8->26,8) (9->23,10) (9->28,4) (10->26,1) (10->27,5) (10->15,2) (10->20,6) (10->41,10) (10->13,1) (11->23,1) (12->23,10) (12->52,6) (12->29,9) (12->16,6) (13->43,1) (13->51,10) (14->38,1) (14->46,5) (14->15,6) (14->37,8) (14->40,3) (15->48,10) (15->32,2) (15->17,1) (16->25,4) (16->51,8) (16->45,10) (16->47,5) (16->19,5) (16->30,10) (16->39,10) (16->17,10) (16->36,5) (16->18,1) (16->35,8) (18->26,8) (18->48,6) (19->29,9) (19->21,10) (20->32,5) (21->28,4) (22->46,1) (22->51,3) (22->28,4) (22->35,6) (23->50,9) (23->43,5) (23->34,9) (23->31,9) (24->37,8) (24->30,9) (24->40,1) (24->33,7) (24->39,1) (24->48,8) (25->39,8) (25->28,2) (25->36,9) (25->42,8) (26->45,10) (26->52,10) (26->40,1) (27->38,4) (27->44,9) (27->42,5) (28->40,6) (28->39,4) (29->52,8) (29->44,4) (29->42,9) (30->33,5) (30->36,6) (30->35,10) (30->31,8) (30->50,3) (30->38,7) (30->40,8) (31->41,8) (31->45,7) (31->51,7) (32->33,7) (33->44,9) (33->52,1) (33->39,5) (33->34,7) (34->35,10) (35->46,3) (35->48,5) (37->40,1) (37->47,8) (37->42,9) (38->50,7) (39->53,5) (40->43,9) (41->48,4) (41->50,9) (41->47,10) (41->51,6) (41->43,2) (42->50,10) (43->52,8) (44->45,9) (45->52,6) (46->53,9) (49->53,10) (50->51,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 59, and the edges are: (0->6,10) (0->13,9) (0->18,1) (0->14,7) (0->50,7) (2->55,6) (2->57,9) (2->53,10) (2->49,10) (2->30,10) (2->22,6) (3->42,3) (3->36,4) (3->31,1) (3->39,8) (3->34,4) (3->33,6) (3->30,5) (3->16,9) (3->14,6) (3->21,4) (4->22,10) (4->21,1) (4->57,3) (4->28,5) (5->21,2) (5->52,2) (5->44,6) (6->15,5) (6->18,6) (7->27,2) (7->51,9) (7->49,8) (7->40,1) (8->28,1) (8->31,1) (8->57,10) (8->40,5) (8->10,9) (8->9,10) (9->43,8) (9->11,7) (10->45,8) (10->31,9) (10->41,3) (10->44,6) (11->49,4) (11->37,6) (11->48,10) (11->23,3) (12->27,8) (12->28,3) (12->51,7) (12->26,6) (12->24,1) (13->35,5) (13->16,1) (13->59,7) (13->41,3) (13->40,8) (14->29,5) (14->31,1) (14->36,7) (14->46,10) (15->57,3) (15->51,6) (16->32,1) (16->22,9) (17->45,9) (17->21,2) (17->44,5) (17->52,2) (18->43,6) (19->47,10) (19->38,4) (20->37,6) (20->23,9) (20->26,4) (21->29,8) (22->41,3) (22->52,2) (22->46,4) (22->45,7) (23->28,9) (23->58,10) (23->57,2) (24->34,7) (25->34,8) (25->48,10) (26->44,9) (26->40,6) (27->38,2) (27->51,10) (27->48,4) (28->48,1) (29->58,5) (29->46,5) (29->35,4) (31->43,9) (36->51,4) (36->54,10) (37->46,8) (38->54,9) (38->46,1) (38->45,5) (38->57,3) (39->42,4) (39->59,5) (39->47,1) (39->51,10) (41->58,1) (41->48,2) (44->55,8) (45->46,7) (46->48,1) (46->51,2) (50->53,10) (50->57,1) (52->59,2) (56->58,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 68, and the edges are: (0->33,4) (0->50,1) (0->32,1) (0->37,8) (1->35,10) (1->65,9) (1->38,10) (1->30,2) (1->54,7) (2->39,9) (2->62,2) (2->36,3) (2->34,6) (2->9,10) (2->58,1) (3->54,7) (3->61,1) (3->22,2) (3->26,4) (3->65,6) (3->67,2) (3->15,2) (4->54,3) (4->15,3) (4->65,2) (5->13,2) (5->43,6) (5->17,3) (5->61,4) (6->30,8) (6->17,10) (6->26,7) (6->13,10) (7->34,2) (7->8,2) (8->46,6) (8->53,7) (8->29,3) (8->48,2) (8->42,10) (8->36,1) (8->51,3) (9->21,6) (9->51,10) (10->64,1) (10->66,10) (10->52,4) (10->57,10) (10->36,7) (10->56,1) (11->41,6) (11->12,9) (11->51,4) (11->33,7) (12->59,6) (12->47,10) (13->30,10) (13->31,7) (13->60,5) (13->59,10) (14->60,2) (14->50,3) (14->46,8) (16->21,7) (16->62,2) (17->37,1) (17->36,7) (17->40,3) (17->59,1) (18->52,10) (18->67,1) (18->21,2) (19->65,10) (19->59,10) (20->66,5) (21->26,2) (21->66,2) (21->46,7) (21->30,2) (21->34,6) (21->50,3) (23->39,6) (23->54,2) (23->48,8) (23->60,10) (23->40,7) (23->49,9) (24->58,7) (24->28,2) (24->26,3) (24->35,2) (25->53,6) (25->41,10) (25->47,3) (26->51,6) (26->39,5) (27->30,9) (27->41,6) (27->53,10) (28->60,6) (29->63,7) (29->59,3) (29->49,1) (31->35,8) (31->66,1) (31->54,8) (31->44,4) (31->51,5) (32->53,5) (32->50,4) (32->33,5) (32->36,6) (33->47,1) (33->49,5) (33->65,10) (34->41,3) (34->66,1) (34->37,8) (35->36,10) (35->54,9) (36->55,2) (37->56,1) (37->46,10) (37->57,6) (38->50,10) (38->45,6) (38->65,8) (38->40,2) (38->68,1) (39->60,8) (40->62,5) (41->59,5) (41->62,9) (41->43,6) (42->67,4) (43->57,4) (43->54,9) (43->56,4) (45->56,9) (45->66,4) (46->52,5) (47->50,9) (47->68,5) (50->57,5) (50->67,4) (50->61,10) (50->62,6) (51->57,8) (57->66,5) (58->68,10) (58->64,1) (59->65,5) (61->67,10) (64->67,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 72, and the edges are: (0->24,1) (0->14,2) (0->64,3) (0->67,7) (1->11,4) (1->66,1) (1->69,3) (1->40,3) (1->68,9) (1->12,7) (1->26,8) (2->3,9) (2->6,1) (3->16,8) (3->21,1) (3->68,9) (3->18,9) (4->23,4) (4->18,4) (4->28,9) (4->61,2) (4->42,8) (5->31,6) (5->30,7) (5->60,3) (5->49,6) (6->61,1) (6->49,1) (6->66,9) (6->35,9) (6->52,4) (6->59,4) (6->67,1) (7->10,2) (7->65,3) (7->46,4) (8->16,8) (8->66,2) (8->55,6) (8->27,1) (8->24,10) (9->52,2) (9->47,3) (9->33,9) (9->65,3) (10->56,5) (10->59,2) (10->58,2) (10->31,9) (10->50,1) (10->42,2) (11->30,5) (11->67,7) (11->18,4) (12->14,8) (12->17,7) (12->16,1) (12->57,1) (12->58,4) (13->36,1) (13->33,9) (13->24,4) (13->25,7) (14->22,1) (14->44,6) (14->55,9) (14->43,6) (14->62,4) (14->58,4) (16->19,5) (16->55,3) (16->51,3) (16->37,3) (16->26,5) (16->53,10) (17->69,10) (17->62,8) (17->27,5) (17->72,4) (18->65,1) (18->37,9) (18->69,8) (18->70,5) (19->21,4) (19->70,8) (19->47,5) (20->57,5) (20->53,2) (20->52,9) (20->48,4) (21->25,3) (21->69,5) (21->44,7) (22->61,2) (22->37,6) (22->49,10) (22->36,1) (23->68,6) (23->37,9) (23->26,9) (23->66,7) (23->28,5) (24->53,9) (24->44,4) (24->33,10) (24->45,3) (25->58,1) (25->31,9) (25->53,8) (26->63,5) (27->60,5) (27->62,7) (27->51,5) (28->63,4) (28->32,9) (28->35,7) (28->71,9) (29->49,4) (29->33,6) (29->52,9) (30->36,6) (31->65,6) (31->53,6) (32->45,8) (32->37,3) (32->35,4) (34->65,3) (34->69,8) (35->65,5) (35->67,2) (35->51,7) (35->47,3) (35->39,8) (35->52,4) (36->54,8) (36->51,10) (36->41,10) (36->61,5) (37->53,4) (37->43,5) (37->66,4) (38->63,9) (38->57,10) (38->68,6) (39->40,3) (39->52,10) (39->61,3) (40->62,6) (40->49,1) (42->72,5) (43->72,5) (43->58,2) (43->64,9) (44->59,3) (44->54,6) (45->66,3) (45->51,8) (46->52,2) (47->56,9) (47->72,1) (47->48,7) (47->62,5) (50->59,5) (50->71,3) (51->55,3) (51->70,8) (52->54,9) (52->61,6) (52->69,9) (52->67,9) (53->58,4) (53->71,2) (53->56,1) (54->62,2) (54->68,6) (55->58,7) (56->64,7) (57->69,7) (59->61,3) (59->65,7) (60->66,9) (61->65,5) (62->71,4) (64->66,9) (65->70,2) (66->67,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 69, and the edges are: (0->20,3) (0->31,10) (0->39,4) (0->51,5) (0->2,8) (0->59,1) (1->13,2) (1->64,3) (1->12,4) (1->45,7) (1->68,3) (1->34,9) (1->18,7) (1->60,2) (1->38,3) (2->37,6) (2->33,3) (2->35,9) (2->13,6) (2->31,3) (3->64,6) (3->7,3) (3->58,1) (3->30,5) (3->61,10) (3->57,9) (4->7,10) (4->68,2) (4->42,1) (4->26,2) (4->30,6) (5->39,7) (5->68,1) (5->66,7) (5->11,2) (5->17,8) (6->52,1) (6->61,8) (6->65,9) (6->69,4) (6->47,7) (7->41,4) (7->12,6) (7->67,10) (8->36,4) (8->13,2) (8->10,4) (8->59,3) (8->67,5) (8->49,3) (9->69,8) (9->14,3) (9->64,1) (10->62,4) (10->24,1) (10->63,7) (10->67,8) (10->57,10) (10->38,6) (11->69,7) (11->46,2) (11->31,7) (11->41,2) (12->56,4) (12->16,5) (12->47,3) (12->60,2) (12->69,7) (12->15,1) (12->31,6) (12->43,3) (12->28,2) (13->31,3) (13->35,4) (13->46,3) (13->30,1) (14->17,4) (14->64,2) (15->30,3) (15->32,9) (16->59,6) (16->18,10) (16->31,7) (16->57,7) (16->55,3) (16->58,6) (16->65,5) (17->60,10) (17->69,7) (17->43,2) (17->40,1) (17->46,8) (17->50,3) (17->58,2) (17->65,6) (19->63,5) (19->60,6) (19->34,5) (19->65,4) (19->55,5) (20->50,8) (20->28,6) (20->43,2) (20->41,8) (20->60,2) (20->54,7) (20->53,1) (21->68,1) (21->28,7) (21->60,1) (22->51,5) (22->69,8) (23->48,6) (23->53,4) (23->30,7) (23->49,7) (23->38,7) (24->29,3) (24->44,4) (25->43,5) (25->45,8) (26->56,3) (27->37,8) (27->28,7) (27->64,10) (27->38,4) (28->60,5) (28->58,8) (28->65,1) (28->49,7) (28->29,2) (29->63,5) (29->38,1) (30->66,4) (30->46,4) (30->60,1) (30->67,10) (31->59,4) (31->62,7) (31->43,1) (32->49,7) (32->47,10) (35->56,8) (35->43,5) (36->58,7) (36->48,2) (36->37,4) (36->46,1) (37->39,4) (38->54,9) (39->66,3) (39->48,10) (39->69,4) (40->46,1) (40->68,6) (40->54,8) (40->41,9) (41->45,5) (42->45,8) (42->69,10) (42->44,6) (42->62,7) (43->49,2) (43->68,5) (43->53,10) (43->51,3) (44->68,3) (44->52,3) (45->53,1) (45->50,10) (46->63,9) (47->61,8) (48->61,7) (50->69,1) (51->69,4) (51->67,4) (52->63,5) (52->61,10) (55->67,7) (55->63,3) (56->63,9) (56->61,4) (57->66,1) (57->69,10) (59->69,2) (65->69,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 75, and the edges are: (0->56,9) (0->68,10) (0->26,2) (0->1,4) (0->36,10) (1->7,4) (1->61,7) (1->27,9) (1->43,9) (1->63,1) (1->49,1) (1->52,9) (2->45,7) (2->23,1) (2->34,10) (2->22,6) (2->41,9) (3->35,5) (3->43,8) (4->62,3) (4->42,4) (4->27,8) (4->12,5) (5->48,7) (5->50,3) (5->47,10) (5->22,5) (6->46,10) (6->12,9) (6->26,4) (6->17,8) (6->51,7) (6->72,1) (6->36,9) (6->44,2) (7->21,8) (7->46,6) (7->8,1) (8->69,1) (8->13,9) (8->33,4) (8->25,5) (8->37,7) (9->47,7) (9->46,7) (9->27,8) (9->15,9) (9->29,7) (10->41,3) (10->67,2) (11->59,4) (11->70,4) (11->40,7) (11->37,4) (12->27,10) (12->72,8) (12->32,5) (13->66,4) (13->54,4) (13->37,2) (13->56,4) (13->38,1) (14->71,6) (14->45,5) (14->29,6) (14->57,9) (14->43,1) (14->55,1) (14->60,1) (14->34,7) (15->36,5) (15->51,5) (16->37,6) (16->28,10) (16->74,6) (16->25,8) (16->58,8) (16->23,4) (17->53,2) (17->58,2) (17->30,2) (18->27,9) (18->63,10) (18->32,6) (18->36,10) (19->56,3) (19->26,2) (19->59,6) (19->49,3) (20->32,1) (20->21,8) (20->59,8) (21->62,3) (21->50,1) (21->69,7) (21->22,6) (21->55,8) (22->60,6) (22->25,8) (23->65,10) (23->68,9) (24->43,4) (24->37,6) (25->60,1) (25->34,7) (25->26,6) (25->32,6) (25->54,7) (25->53,1) (26->30,4) (26->49,10) (27->58,1) (27->44,10) (27->48,1) (27->30,10) (27->39,7) (28->69,4) (29->32,10) (29->36,6) (30->60,1) (30->61,6) (30->69,10) (30->49,1) (31->51,1) (32->61,10) (32->39,4) (33->37,4) (33->52,2) (35->58,7) (35->37,3) (35->42,6) (35->41,4) (35->73,3) (35->40,7) (35->69,3) (36->60,7) (36->64,4) (37->47,10) (37->75,7) (37->40,8) (38->70,2) (40->64,3) (40->45,9) (40->54,8) (40->60,9) (42->44,6) (43->58,3) (43->51,6) (43->60,6) (43->68,4) (43->75,3) (43->57,1) (45->48,7) (45->75,9) (46->58,6) (46->55,8) (47->50,1) (47->56,9) (49->53,10) (51->62,8) (51->66,7) (51->63,8) (52->61,7) (52->58,8) (53->69,5) (54->69,2) (55->65,4) (56->59,10) (56->66,6) (57->68,2) (58->74,5) (61->75,1) (63->69,1) (64->67,1) (64->69,5) (65->73,3) (65->68,7) (68->72,9) (69->70,1) (69->71,6) (71->74,5) (72->73,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 71, and the edges are: (0->20,5) (0->16,4) (0->26,8) (1->4,6) (1->8,8) (1->70,4) (1->63,4) (1->49,9) (2->17,6) (2->56,4) (2->3,5) (2->7,6) (2->18,4) (2->25,3) (2->21,6) (2->32,10) (2->69,4) (3->16,8) (3->37,9) (3->45,10) (3->4,9) (3->14,7) (3->10,10) (3->29,8) (4->43,9) (4->5,1) (4->56,4) (4->63,4) (4->66,10) (4->29,10) (5->32,1) (5->6,2) (6->18,7) (6->17,8) (6->52,8) (6->38,1) (6->20,3) (6->36,4) (6->13,10) (7->40,9) (7->64,2) (7->44,4) (7->19,9) (8->10,7) (8->55,2) (8->66,3) (8->50,6) (9->58,2) (9->14,9) (9->65,4) (10->60,6) (10->56,3) (10->67,5) (10->11,4) (10->34,3) (10->64,5) (11->52,7) (11->18,3) (11->57,1) (11->40,5) (11->27,1) (11->20,7) (11->28,5) (11->37,1) (12->49,9) (12->67,10) (12->71,5) (12->63,2) (13->43,10) (13->63,7) (13->45,7) (13->71,4) (13->56,5) (14->59,6) (14->41,2) (15->68,3) (15->16,3) (16->68,1) (16->18,8) (16->37,2) (16->24,5) (17->49,4) (17->42,8) (17->19,5) (17->45,1) (17->29,1) (18->32,7) (19->27,9) (19->61,10) (19->38,3) (19->56,9) (19->26,10) (19->51,8) (19->50,8) (19->24,9) (19->30,7) (19->39,1) (20->60,6) (20->69,8) (20->43,5) (21->58,4) (21->43,9) (22->58,3) (22->44,4) (22->69,7) (23->29,5) (23->67,4) (24->59,2) (24->40,1) (24->29,10) (25->54,3) (25->36,1) (25->37,7) (26->58,8) (26->70,6) (27->31,6) (27->34,10) (27->43,9) (27->53,2) (28->32,8) (28->68,6) (29->69,3) (29->40,2) (29->31,6) (30->35,8) (30->68,9) (30->34,7) (31->70,9) (31->64,4) (31->34,9) (31->36,3) (31->32,6) (32->61,1) (32->40,2) (32->47,10) (32->41,6) (32->68,2) (33->43,1) (34->60,10) (34->37,1) (35->71,9) (35->49,6) (36->46,9) (37->65,7) (37->57,2) (37->62,9) (37->54,1) (38->51,3) (38->47,6) (38->67,8) (38->65,10) (39->49,8) (39->48,2) (39->60,10) (39->64,1) (40->42,10) (40->61,7) (40->59,1) (40->44,9) (40->68,3) (41->45,6) (41->46,5) (41->56,1) (42->47,7) (42->71,1) (44->70,6) (46->68,1) (46->71,7) (50->52,2) (50->58,10) (53->54,2) (54->61,8) (54->57,6) (55->63,5) (55->69,10) (56->69,5) (57->58,5) (58->60,8) (59->71,10) (62->64,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 98, and the edges are: (0->33,3) (0->76,7) (1->16,9) (1->78,1) (1->11,1) (2->41,4) (2->53,2) (2->52,10) (3->33,9) (3->37,10) (3->94,10) (4->42,7) (4->46,10) (4->72,2) (5->68,10) (5->42,5) (5->76,10) (5->48,6) (6->37,9) (6->88,8) (6->95,5) (7->28,10) (7->18,3) (7->43,1) (7->98,3) (7->13,8) (7->60,7) (8->63,3) (8->16,9) (8->21,6) (8->56,5) (8->67,2) (9->36,5) (9->42,7) (9->33,4) (9->23,2) (10->42,9) (10->67,6) (10->98,7) (10->77,5) (10->90,7) (10->17,5) (10->60,1) (11->94,1) (11->52,7) (11->23,3) (11->96,5) (11->12,6) (12->82,10) (12->19,5) (12->60,10) (13->87,1) (13->20,7) (13->43,7) (13->50,2) (13->37,3) (14->50,4) (14->96,1) (14->67,3) (14->82,1) (15->48,8) (15->61,10) (16->84,8) (16->24,3) (16->49,2) (16->38,3) (16->25,8) (17->65,4) (17->73,8) (17->83,10) (18->87,8) (18->91,3) (18->65,10) (18->44,10) (18->52,8) (18->64,1) (19->55,9) (19->43,5) (19->62,2) (19->98,8) (19->61,8) (20->62,10) (20->51,3) (20->84,2) (20->45,1) (20->69,4) (21->68,8) (21->59,3) (21->56,6) (22->50,3) (22->51,6) (22->56,5) (22->91,7) (22->79,3) (22->53,10) (23->54,6) (24->25,4) (24->88,9) (24->35,6) (24->57,5) (24->96,8) (24->41,5) (24->33,8) (24->61,4) (24->34,2) (25->37,3) (25->61,3) (25->64,3) (25->92,6) (25->30,3) (25->48,1) (26->70,10) (26->39,9) (26->41,9) (26->47,3) (26->33,8) (26->98,7) (26->45,10) (27->30,6) (27->45,9) (27->55,9) (27->94,6) (27->66,10) (28->30,5) (28->42,9) (29->41,4) (30->70,10) (30->91,2) (30->88,5) (30->57,10) (31->77,5) (31->36,3) (32->86,9) (32->73,5) (32->49,3) (32->46,1) (33->65,2) (33->89,3) (34->96,1) (34->90,9) (34->97,2) (34->84,5) (34->94,9) (34->80,4) (35->52,1) (35->90,6) (36->73,5) (37->41,7) (37->74,2) (37->39,3) (37->58,6) (38->93,1) (38->89,7) (38->43,4) (38->40,1) (38->68,8) (39->54,4) (39->60,1) (39->45,5) (39->65,2) (39->50,10) (39->89,8) (39->52,7) (41->46,2) (41->63,9) (42->97,8) (42->84,6) (43->90,2) (43->82,10) (43->98,8) (45->49,7) (45->48,2) (46->94,7) (46->47,8) (47->67,9) (47->48,5) (48->87,6) (48->72,2) (48->59,5) (48->51,1) (50->85,8) (51->74,10) (52->55,2) (52->87,10) (52->93,9) (53->97,6) (53->70,10) (53->86,8) (53->98,10) (53->65,10) (53->84,1) (54->78,8) (55->66,6) (55->79,2) (56->62,7) (56->93,4) (56->94,1) (57->82,5) (57->75,10) (57->77,4) (57->72,5) (58->64,2) (58->77,7) (58->93,2) (58->80,4) (58->89,1) (59->72,7) (61->85,10) (62->98,9) (62->91,7) (63->82,10) (64->74,6) (64->83,1) (67->82,10) (67->77,5) (67->91,8) (69->84,10) (69->77,4) (69->89,2) (69->76,4) (70->78,6) (70->87,9) (71->77,7) (73->88,4) (73->90,8) (73->85,5) (74->83,7) (74->76,10) (75->86,6) (75->88,2) (76->84,2) (76->89,9) (77->98,7) (77->79,3) (77->85,6) (78->91,3) (79->94,1) (80->98,2) (81->95,8) (82->90,2) (82->85,5) (83->86,3) (84->97,1) (84->95,2) (85->95,8) (86->90,4) (89->90,10) (90->94,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 80, and the edges are: (0->7,5) (0->2,4) (0->64,7) (0->16,2) (1->67,8) (2->12,8) (2->78,4) (2->15,8) (3->34,9) (3->9,3) (3->73,7) (3->78,7) (4->16,5) (4->31,1) (4->53,3) (4->74,6) (5->19,5) (5->67,7) (5->12,1) (6->24,9) (6->65,10) (6->19,7) (7->47,10) (7->54,5) (7->61,9) (7->44,7) (8->50,1) (8->18,10) (8->49,6) (8->68,1) (8->45,7) (8->70,5) (8->38,4) (9->14,4) (9->80,5) (9->38,8) (9->64,6) (9->58,7) (10->68,6) (10->57,3) (10->23,7) (10->80,1) (11->30,4) (12->62,4) (12->65,1) (12->46,1) (12->28,3) (13->50,10) (13->72,5) (13->63,1) (14->62,5) (14->19,10) (14->44,3) (14->64,6) (14->24,3) (15->24,2) (15->51,8) (15->38,2) (15->30,10) (15->56,5) (15->62,2) (16->42,1) (16->49,5) (16->20,5) (16->44,3) (17->30,1) (17->18,9) (17->21,8) (17->49,5) (18->27,10) (19->29,8) (19->27,1) (19->62,1) (20->60,10) (20->53,8) (20->29,8) (20->43,2) (21->47,10) (21->61,4) (21->44,3) (22->67,6) (22->30,9) (22->31,2) (22->54,4) (22->36,1) (22->57,9) (23->62,2) (23->74,1) (23->73,6) (23->49,10) (23->51,10) (24->61,9) (24->59,7) (24->69,4) (24->46,10) (25->57,8) (25->55,5) (25->48,3) (26->72,4) (26->58,3) (26->49,8) (26->34,10) (26->48,1) (26->36,9) (27->64,1) (27->52,2) (27->55,1) (28->76,6) (29->31,7) (29->50,3) (29->76,10) (30->64,3) (30->73,7) (30->72,6) (30->39,5) (30->38,8) (31->36,3) (31->46,3) (31->40,1) (32->58,7) (32->59,6) (32->69,6) (33->58,3) (33->48,4) (33->59,8) (34->74,9) (35->80,3) (35->40,7) (35->63,8) (36->37,1) (36->54,8) (36->38,9) (37->73,6) (37->41,3) (38->63,3) (38->74,3) (38->67,6) (39->64,4) (39->53,9) (40->68,10) (40->49,4) (40->64,7) (40->52,4) (41->53,7) (41->49,4) (41->70,8) (42->56,2) (42->63,3) (43->65,2) (44->51,5) (44->65,1) (44->78,10) (44->76,5) (45->50,2) (46->59,1) (46->48,7) (46->72,1) (47->77,2) (47->56,8) (47->68,1) (48->62,4) (48->49,4) (48->51,8) (49->58,4) (49->60,4) (50->57,1) (50->78,8) (51->70,8) (51->65,4) (52->60,3) (52->73,1) (52->65,5) (54->57,3) (56->66,1) (57->70,10) (58->63,5) (58->64,9) (58->61,10) (60->69,7) (60->80,1) (60->65,9) (61->76,4) (63->80,4) (64->72,8) (64->70,5) (65->73,3) (65->79,7) (70->80,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 84, and the edges are: (0->60,1) (0->21,3) (1->82,8) (1->15,9) (1->66,9) (1->61,1) (1->22,1) (1->23,8) (1->47,5) (2->45,9) (2->77,6) (2->78,7) (2->58,1) (2->6,7) (3->69,2) (3->68,9) (3->76,7) (3->84,7) (3->23,5) (3->9,8) (3->52,6) (3->21,7) (4->64,4) (5->26,10) (5->20,4) (5->6,6) (5->40,2) (5->30,5) (6->35,8) (6->76,1) (6->22,4) (6->20,6) (6->70,3) (6->78,9) (6->42,1) (6->82,6) (6->52,4) (7->13,8) (7->80,7) (7->18,1) (7->73,9) (7->74,8) (8->81,3) (8->14,9) (8->64,4) (8->15,6) (8->74,8) (8->26,4) (9->24,2) (9->66,9) (10->18,6) (10->75,5) (10->46,2) (10->73,8) (10->50,1) (11->18,8) (11->65,2) (11->33,5) (12->28,6) (12->25,1) (13->18,1) (13->30,9) (13->56,9) (13->60,5) (13->21,7) (13->42,9) (13->19,3) (13->25,7) (14->69,9) (14->54,7) (14->84,4) (15->73,8) (15->72,7) (15->81,8) (15->41,3) (16->59,10) (16->18,2) (16->62,3) (17->30,8) (17->19,8) (18->23,5) (18->75,9) (18->45,5) (18->32,10) (18->34,6) (19->42,1) (19->61,10) (19->56,2) (20->35,8) (20->46,5) (20->73,2) (20->56,9) (21->33,8) (22->61,3) (23->79,3) (23->43,4) (23->77,7) (24->69,10) (24->48,8) (24->79,1) (25->67,8) (25->80,4) (26->77,6) (26->37,2) (26->39,9) (27->40,8) (27->61,5) (27->30,10) (27->37,7) (27->41,2) (27->38,2) (27->80,3) (28->53,9) (28->59,8) (28->38,10) (28->60,5) (29->83,1) (29->68,3) (29->34,1) (30->32,2) (30->35,2) (30->33,6) (31->36,6) (31->32,1) (31->49,6) (31->47,6) (32->59,8) (32->81,1) (32->65,3) (32->38,1) (33->42,6) (33->56,5) (33->52,4) (34->43,1) (34->52,5) (34->78,3) (34->58,3) (34->54,3) (35->82,7) (35->77,5) (35->64,7) (36->80,7) (37->56,7) (37->75,5) (37->80,1) (37->83,10) (38->64,1) (38->75,2) (39->74,6) (39->82,7) (40->43,5) (40->52,7) (40->65,1) (41->75,1) (42->78,1) (42->71,8) (42->80,1) (43->60,3) (43->68,10) (43->75,5) (43->52,10) (44->78,8) (44->53,1) (44->61,5) (44->81,2) (45->57,10) (45->60,4) (45->58,4) (46->50,8) (46->59,2) (46->71,9) (46->52,4) (47->58,4) (48->83,9) (49->59,1) (49->68,6) (49->74,10) (49->80,2) (50->65,5) (50->71,9) (51->52,10) (51->56,1) (51->76,8) (51->61,10) (52->56,5) (53->65,1) (53->83,4) (53->62,3) (53->84,2) (53->57,6) (54->75,5) (55->61,7) (56->69,10) (57->60,1) (57->73,1) (57->61,9) (58->75,4) (60->68,3) (60->84,6) (61->78,2) (62->79,3) (63->77,7) (63->68,3) (64->73,2) (66->81,4) (67->78,4) (67->76,7) (67->81,8) (68->83,1) (68->73,9) (70->77,3) (71->83,6) (72->74,5) (72->76,3) (73->82,7) (73->80,8) (74->82,6) (75->80,9) (75->82,3) (77->80,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 91, and the edges are: (0->64,2) (0->28,6) (0->52,5) (1->14,6) (1->30,3) (1->58,6) (1->41,7) (1->21,2) (1->52,4) (2->72,9) (2->35,10) (2->42,3) (2->50,9) (3->20,1) (3->56,1) (3->5,10) (3->78,1) (3->31,1) (3->14,10) (3->59,4) (3->58,4) (4->54,9) (4->57,9) (4->29,4) (4->6,10) (5->13,8) (5->21,2) (5->75,3) (5->27,2) (5->6,2) (5->18,2) (5->7,4) (5->85,9) (5->70,1) (5->47,10) (6->75,8) (6->10,9) (6->23,4) (6->54,8) (6->28,2) (6->71,10) (6->20,1) (7->78,8) (7->85,3) (7->9,3) (7->88,7) (7->67,7) (8->83,1) (8->67,5) (8->61,7) (8->27,3) (8->53,10) (8->14,4) (8->37,3) (9->43,6) (9->89,10) (9->80,9) (9->48,4) (9->65,10) (9->27,8) (9->35,10) (10->83,9) (10->40,5) (10->21,7) (10->66,7) (10->89,9) (10->34,1) (10->63,2) (11->49,3) (11->68,4) (11->63,4) (11->16,6) (11->91,3) (11->87,7) (12->21,8) (12->76,6) (12->18,2) (12->82,9) (12->77,3) (13->68,4) (13->62,9) (13->59,1) (14->25,4) (14->18,5) (14->19,9) (14->69,1) (14->23,5) (14->84,1) (14->29,3) (14->59,6) (15->50,7) (15->16,1) (15->56,10) (15->60,6) (15->68,3) (15->79,1) (15->51,5) (15->49,4) (15->34,7) (16->42,1) (16->63,4) (16->80,5) (16->79,7) (16->33,4) (16->44,5) (16->20,1) (17->81,6) (17->58,9) (17->19,5) (18->53,3) (18->50,6) (18->42,8) (18->69,10) (18->34,2) (18->19,1) (18->48,2) (18->29,6) (19->83,9) (19->84,5) (19->52,9) (19->73,5) (19->85,6) (19->38,6) (19->34,7) (20->40,4) (20->78,5) (20->71,1) (21->25,6) (21->61,6) (22->47,7) (22->82,10) (22->61,7) (22->74,9) (23->90,7) (23->81,9) (23->38,4) (24->40,4) (24->50,4) (24->26,9) (24->53,4) (24->67,4) (24->42,7) (25->49,7) (25->45,8) (25->43,6) (25->63,3) (25->60,2) (26->45,2) (26->80,7) (26->48,4) (26->83,4) (26->76,7) (27->79,1) (27->44,5) (27->86,5) (27->41,2) (28->40,7) (28->71,3) (28->72,8) (29->69,6) (29->63,7) (29->74,4) (29->77,4) (29->33,3) (29->75,3) (30->52,5) (31->91,3) (31->86,1) (31->51,4) (31->33,8) (32->49,8) (32->47,6) (32->54,3) (33->79,3) (33->65,6) (33->66,5) (33->56,7) (33->76,10) (34->69,2) (34->84,5) (34->86,5) (34->48,2) (34->64,9) (35->69,3) (36->81,9) (36->77,8) (36->43,5) (37->75,7) (38->67,6) (38->89,3) (38->71,6) (39->57,9) (40->48,5) (40->81,10) (42->78,8) (43->66,8) (43->82,5) (43->87,9) (43->45,4) (43->74,5) (43->56,4) (43->79,2) (43->86,6) (44->90,4) (45->85,5) (45->73,3) (45->48,10) (45->70,9) (46->78,10) (46->47,3) (46->53,1) (46->71,2) (48->88,3) (48->76,6) (49->79,1) (49->77,10) (49->68,8) (50->61,6) (50->67,8) (50->87,4) (51->55,8) (51->64,9) (52->63,4) (53->73,2) (53->62,2) (54->66,4) (54->64,6) (55->90,7) (55->71,1) (55->78,2) (56->65,7) (58->80,6) (58->63,1) (59->79,5) (60->64,8) (60->74,10) (61->73,6) (61->86,3) (62->69,5) (64->65,7) (64->73,3) (65->66,3) (66->91,6) (67->81,5) (67->71,1) (70->88,5) (70->90,5) (71->76,8) (72->86,3) (72->82,6) (73->85,10) (75->78,2) (75->81,7) (76->85,8) (76->86,7) (77->88,4) (78->90,4) (79->84,1) (81->84,6) (81->85,5) (84->89,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 81, and the edges are: (0->41,2) (0->72,1) (0->46,8) (0->52,9) (0->43,10) (1->43,10) (1->79,2) (1->69,6) (1->51,10) (2->77,7) (2->65,4) (2->17,3) (3->48,5) (3->70,1) (3->22,4) (3->28,2) (3->5,10) (3->36,6) (3->16,6) (4->9,3) (4->58,3) (4->42,10) (4->56,10) (4->61,7) (4->68,3) (4->18,5) (5->79,10) (5->58,8) (5->50,2) (5->53,8) (5->48,10) (5->70,10) (6->20,6) (7->53,1) (7->74,5) (7->39,1) (7->52,10) (7->58,7) (7->33,5) (8->77,7) (8->79,4) (8->58,10) (8->19,9) (8->45,4) (8->66,10) (8->16,9) (8->80,3) (9->26,5) (9->61,6) (9->56,4) (9->30,9) (10->75,6) (10->61,1) (10->39,3) (10->25,8) (11->47,10) (11->18,7) (11->73,3) (11->81,2) (11->40,4) (11->71,4) (12->37,4) (12->23,9) (13->23,1) (13->68,1) (13->63,4) (13->19,4) (13->16,2) (13->48,8) (13->79,7) (14->63,4) (14->30,10) (14->38,4) (14->40,2) (14->72,8) (14->55,2) (14->20,2) (14->25,7) (15->33,4) (15->73,4) (15->49,7) (16->45,1) (16->57,5) (16->80,9) (16->50,6) (16->74,3) (17->42,1) (17->27,7) (17->63,10) (17->28,10) (18->70,8) (18->64,5) (18->65,9) (18->22,7) (18->63,6) (18->72,6) (19->36,7) (19->70,1) (19->35,4) (19->23,8) (19->53,9) (19->20,8) (20->30,10) (20->77,2) (20->62,1) (20->38,3) (21->41,2) (21->25,3) (21->30,8) (21->26,8) (22->42,5) (22->52,7) (23->73,5) (24->60,7) (24->58,7) (25->48,4) (25->34,2) (25->73,7) (25->64,5) (25->61,3) (25->50,6) (25->74,5) (26->47,9) (26->42,2) (27->55,7) (27->52,7) (27->51,10) (27->42,3) (27->50,8) (28->69,2) (29->68,8) (29->38,10) (29->66,9) (30->36,2) (30->68,10) (30->40,1) (30->45,7) (31->32,4) (31->40,9) (31->37,9) (31->81,10) (31->42,10) (32->39,10) (32->78,5) (33->71,9) (34->39,3) (34->53,3) (34->57,2) (34->41,1) (34->37,10) (34->78,4) (35->60,6) (35->74,5) (35->42,3) (35->46,1) (35->47,1) (36->60,10) (36->46,4) (36->58,8) (36->48,1) (36->38,5) (37->81,4) (37->40,10) (37->64,7) (38->64,9) (38->50,7) (38->78,2) (38->74,3) (39->79,2) (39->77,6) (39->54,6) (40->46,7) (40->81,9) (41->72,8) (42->73,6) (42->65,3) (42->45,4) (42->50,4) (42->55,2) (43->76,5) (43->77,8) (43->49,1) (45->58,6) (45->59,10) (45->76,4) (46->80,10) (46->50,6) (46->53,4) (47->66,9) (47->68,4) (47->80,1) (48->57,4) (48->68,5) (48->56,2) (50->64,3) (50->68,7) (50->77,3) (50->78,6) (50->71,4) (51->76,7) (51->71,8) (52->60,5) (52->64,10) (52->63,8) (53->73,7) (53->80,5) (54->60,1) (54->61,3) (54->65,4) (55->67,7) (55->71,1) (56->62,1) (57->66,7) (57->73,3) (58->66,10) (59->80,1) (60->62,4) (60->66,3) (60->74,10) (61->71,8) (62->73,2) (63->75,8) (63->72,3) (63->76,6) (65->79,10) (68->74,8) (68->71,6) (68->75,5) (69->76,7) (73->80,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 82, and the edges are: (0->14,6) (0->18,7) (0->4,9) (0->55,9) (0->5,5) (1->66,8) (1->55,8) (1->46,6) (1->45,8) (1->24,10) (1->12,7) (2->12,10) (2->14,1) (2->10,3) (2->27,3) (2->60,10) (2->26,1) (3->76,5) (3->68,5) (3->15,5) (3->38,7) (3->74,4) (4->26,5) (4->15,6) (4->77,5) (4->41,9) (4->11,2) (4->35,10) (5->74,9) (5->63,8) (5->76,5) (6->76,7) (6->12,3) (6->14,4) (6->13,1) (7->78,3) (8->37,8) (8->29,2) (8->81,2) (9->73,8) (9->21,2) (9->53,9) (9->46,6) (9->42,2) (10->47,10) (10->27,5) (11->35,6) (11->21,7) (11->17,10) (11->48,6) (11->19,9) (12->14,10) (12->29,6) (12->77,1) (12->45,1) (12->76,6) (12->66,8) (13->24,8) (13->51,9) (13->65,8) (14->74,7) (14->58,1) (14->35,10) (15->50,1) (16->29,10) (16->40,5) (16->34,5) (16->61,3) (16->19,7) (17->22,4) (17->65,3) (17->78,6) (17->43,5) (17->50,3) (17->38,6) (17->46,8) (18->41,5) (18->72,7) (19->22,1) (19->39,7) (19->58,6) (19->21,4) (19->29,6) (19->53,9) (20->52,10) (20->29,7) (20->23,3) (20->38,5) (20->33,3) (20->75,9) (20->21,8) (21->54,2) (21->72,1) (21->63,7) (21->48,10) (22->29,2) (22->58,5) (22->44,5) (22->27,5) (22->42,5) (24->47,6) (24->40,2) (24->28,7) (24->48,10) (24->43,7) (25->59,4) (25->71,1) (25->33,3) (25->58,3) (26->40,5) (26->33,2) (26->77,3) (27->28,1) (27->48,6) (27->46,5) (27->82,8) (28->57,4) (28->30,9) (28->31,3) (28->68,7) (28->81,3) (28->49,4) (28->67,4) (29->31,8) (29->73,4) (29->57,2) (29->40,1) (29->42,7) (29->61,10) (30->72,6) (30->45,4) (31->65,5) (31->52,6) (31->56,6) (31->43,4) (31->46,8) (32->41,3) (32->45,7) (33->39,6) (34->48,10) (34->36,4) (34->50,3) (35->63,10) (35->80,1) (35->44,6) (35->69,3) (35->78,10) (35->42,2) (36->61,3) (36->39,2) (36->41,5) (36->56,3) (37->74,8) (37->64,8) (37->50,10) (37->41,2) (37->46,10) (37->51,6) (38->76,1) (38->63,2) (39->64,1) (39->51,4) (40->74,10) (40->72,6) (40->69,6) (41->62,9) (43->62,6) (43->60,2) (44->45,1) (45->66,4) (45->59,2) (45->68,10) (46->82,10) (47->65,1) (48->60,1) (50->67,1) (50->74,1) (50->56,9) (52->82,9) (52->64,5) (53->54,9) (53->70,8) (53->64,5) (54->78,7) (54->60,8) (54->79,9) (55->65,1) (57->82,1) (58->76,8) (59->70,8) (60->62,4) (61->80,7) (61->70,8) (61->67,2) (63->64,4) (63->80,7) (64->77,2) (64->68,6) (70->71,3) (74->77,7) (77->82,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,4) (0->3,6) (0->1,8) (1->6,2) (3->6,8) (4->6,2) (5->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->17,2) (0->12,2) (0->3,6) (1->11,3) (1->5,10) (1->3,3) (2->10,3) (2->6,6) (2->8,4) (2->12,6) (2->7,9) (3->18,3) (3->10,10) (3->12,2) (3->9,5) (4->14,9) (4->16,7) (4->13,3) (4->9,5) (5->7,4) (5->9,4) (6->18,4) (7->9,7) (7->10,7) (7->18,2) (8->17,3) (8->11,8) (8->16,10) (9->17,6) (9->14,5) (10->17,3) (10->14,8) (10->12,2) (11->19,2) (11->18,8) (11->12,8) (12->14,2) (12->18,3) (12->13,8) (12->15,5) (13->19,3) (13->14,2) (13->16,10) (14->17,10) (14->15,8) (14->19,4) (15->17,1) (15->19,5) (15->16,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->4,2) (1->2,1) (2->3,1) (3->4,7) (3->5,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (1->14,4) (1->12,7) (1->5,4) (1->9,5) (2->13,7) (3->13,8) (4->5,1) (5->13,6) (9->10,6) (10->11,1) (10->13,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->3,5) (0->8,9) (0->6,4) (0->5,6) (0->4,2) (1->9,6) (1->5,9) (2->8,8) (3->4,4) (4->7,9) (4->6,6) (5->9,2) (5->8,1) (5->7,10) (6->9,9) (7->9,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->2,2) (0->5,5) (1->2,10) (1->5,3) (2->6,3) (2->3,7) (4->7,6) (5->7,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,8) (1->2,10) (2->3,6) (2->5,10) (3->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (1->3,8) (1->9,1) (1->10,3) (1->14,4) (1->6,9) (2->13,10) (2->7,10) (2->14,3) (2->5,3) (3->15,7) (3->4,7) (3->9,4) (4->12,6) (4->13,3) (4->9,4) (5->13,5) (5->12,5) (5->6,10) (5->11,7) (6->13,4) (6->14,2) (7->14,2) (7->13,1) (7->10,2) (8->14,4) (9->15,10) (12->14,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->7,5) (0->6,7) (1->6,3) (1->8,9) (2->6,2) (2->3,3) (2->7,5) (4->7,7) (4->9,8) (5->9,10) (6->8,2) (7->9,3) (8->9,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,2) (0->2,1) (1->4,10) (1->7,9) (2->7,7) (3->7,2) (3->6,5) (4->7,7) (5->7,1) (6->7,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,7) (2->4,2) (2->7,3) (3->4,2) (4->5,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->17,10) (0->10,2) (0->15,3) (0->1,6) (0->4,7) (0->8,3) (0->5,6) (0->9,4) (0->13,3) (1->8,7) (1->4,7) (1->9,1) (1->15,2) (2->10,2) (2->4,6) (2->14,5) (2->3,3) (2->7,9) (2->18,6) (2->8,9) (3->14,8) (3->12,3) (3->5,8) (3->9,9) (3->17,2) (3->4,9) (3->7,2) (4->18,2) (4->6,8) (4->15,3) (4->9,2) (4->17,4) (4->13,10) (5->18,2) (5->16,2) (5->10,4) (5->15,1) (5->12,8) (6->8,5) (6->10,5) (6->18,1) (6->15,7) (8->16,4) (8->15,3) (8->18,3) (8->13,5) (9->18,10) (9->12,9) (9->16,7) (10->13,6) (10->15,10) (10->12,4) (10->11,10) (11->17,9) (11->13,6) (11->18,5) (13->14,10) (14->16,10) (15->17,5) (16->18,3) (17->18,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->7,10) (0->8,2) (0->17,8) (1->5,10) (1->3,10) (1->8,9) (2->7,6) (2->12,2) (3->17,10) (3->14,1) (3->8,3) (4->11,8) (5->8,8) (5->9,8) (6->17,1) (6->7,8) (7->8,10) (7->14,1) (8->10,10) (10->17,8) (10->16,10) (12->16,3) (13->15,9) (13->16,4) (15->16,8) (16->17,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->6,10) (0->19,3) (0->7,4) (1->18,8) (1->7,1) (1->13,10) (1->6,1) (1->4,6) (2->6,6) (2->11,2) (2->16,2) (2->4,2) (2->10,3) (3->6,10) (3->18,9) (3->17,7) (4->5,4) (4->8,3) (4->15,5) (4->16,2) (4->14,2) (4->7,9) (4->18,10) (4->12,9) (4->17,4) (5->18,1) (5->6,9) (5->8,6) (5->19,8) (6->7,10) (6->13,7) (6->8,9) (6->9,9) (7->8,6) (7->19,2) (7->11,7) (7->16,8) (7->14,7) (8->12,9) (8->15,10) (8->9,8) (8->17,10) (8->13,8) (9->19,5) (9->14,4) (9->11,8) (10->15,8) (10->13,5) (11->14,6) (11->12,9) (11->16,4) (12->16,6) (13->19,1) (13->14,2) (15->18,1) (16->17,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,5) (0->5,5) (0->8,6) (1->2,3) (2->5,4) (2->4,7) (3->5,9) (4->6,7) (5->7,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->3,7) (2->3,9) (3->6,6) (4->9,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->6,7) (0->5,1) (0->11,4) (0->7,8) (0->9,8) (0->3,5) (0->15,7) (0->1,4) (1->3,9) (1->15,9) (1->10,3) (1->12,8) (1->2,2) (2->15,3) (2->9,8) (2->7,9) (2->11,1) (2->4,2) (2->6,9) (3->12,6) (3->15,2) (4->6,3) (4->11,2) (4->9,2) (4->10,1) (4->5,9) (5->10,4) (6->12,10) (7->12,8) (7->15,1) (7->11,5) (8->13,7) (8->11,7) (8->9,10) (9->15,10) (9->10,2) (10->13,5) (10->15,5) (11->14,10) (12->14,6) (12->13,5) (13->14,8) (13->15,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->14,1) (0->3,1) (1->14,1) (2->3,4) (2->13,1) (2->7,8) (2->14,1) (2->5,7) (2->6,2) (3->6,7) (3->12,10) (3->9,2) (3->13,1) (3->5,8) (4->8,2) (5->13,4) (5->9,5) (5->12,6) (6->10,10) (6->14,3) (7->9,2) (8->14,2) (8->10,3) (9->11,7) (9->13,3) (9->14,9) (12->14,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->7,5) (0->13,3) (0->12,6) (0->1,2) (0->15,8) (0->14,5) (0->10,9) (1->6,8) (1->14,3) (1->2,3) (1->4,7) (2->16,9) (2->11,9) (2->17,5) (2->5,3) (2->10,8) (2->4,5) (3->8,10) (3->10,4) (3->4,2) (4->7,10) (4->10,5) (4->13,3) (4->8,9) (5->7,7) (5->15,6) (5->8,9) (5->17,9) (5->12,4) (5->16,7) (5->14,3) (6->14,5) (6->11,6) (6->8,8) (6->17,6) (6->9,4) (7->13,9) (7->14,2) (7->9,6) (8->13,4) (8->12,4) (8->16,9) (9->17,1) (9->16,4) (10->15,4) (10->13,4) (10->14,10) (12->16,3) (13->17,9) (13->16,1) (14->16,8) (15->17,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,4) (0->6,8) (2->5,8) (2->3,10) (3->6,8) (6->7,2) (6->8,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,5) (0->1,10) (0->6,7) (1->4,4) (1->3,3) (2->4,4) (3->6,5) (3->4,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->9,5) (0->5,4) (1->2,7) (1->7,1) (2->5,10) (2->4,2) (2->6,7) (2->8,10) (2->9,3) (3->7,1) (3->8,1) (3->4,7) (4->7,8) (5->9,7) (6->9,9) (6->7,6) (7->9,10) (8->9,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->4,7) (0->1,2) (1->2,8) (2->7,7) (2->5,8) (3->4,3) (3->5,4) (4->7,10) (6->8,5) (7->8,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (1->15,2) (1->16,1) (2->3,4) (3->12,8) (3->5,7) (4->14,10) (5->13,10) (6->9,9) (6->15,1) (7->8,4) (9->12,8) (10->12,5) (11->16,4) (13->15,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,8) (1->2,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,5) (0->6,3) (1->2,9) (2->3,9) (2->6,6) (4->6,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->7,10) (0->12,8) (0->8,10) (1->15,6) (1->2,8) (2->15,2) (2->11,4) (3->12,10) (4->16,10) (4->6,1) (5->7,7) (7->15,4) (7->13,4) (9->16,8) (12->16,1) (12->15,10) (15->16,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->7,2) (0->3,10) (0->4,7) (2->5,2) (2->6,7) (2->3,9) (3->7,2) (3->4,3) (3->8,10) (4->8,7) (4->6,3) (4->7,8) (5->11,6) (6->11,1) (9->11,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->15,1) (0->14,6) (1->11,2) (1->9,8) (1->12,5) (1->7,6) (1->16,5) (2->8,4) (2->9,4) (2->14,2) (2->4,6) (2->15,4) (3->13,5) (3->6,3) (3->4,9) (4->12,1) (4->17,10) (4->5,9) (4->9,3) (4->19,4) (4->8,2) (4->6,1) (5->16,5) (5->10,4) (5->17,3) (5->14,5) (5->7,8) (6->17,6) (6->11,1) (6->18,6) (7->12,1) (7->10,10) (7->11,1) (8->13,6) (8->11,7) (8->16,8) (9->19,10) (9->15,1) (9->16,5) (10->13,3) (10->19,1) (10->15,8) (11->17,5) (12->17,10) (12->18,5) (13->16,9) (14->16,9) (14->19,8) (15->19,7) (16->19,6) (16->18,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->9,2) (0->5,7) (0->2,2) (0->1,1) (0->8,9) (1->5,9) (1->3,5) (2->5,4) (2->3,1) (3->7,1) (3->4,6) (4->9,9) (4->6,7) (5->6,9) (5->8,4) (6->7,7) (7->9,8) (8->9,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->1,1) (0->5,2) (0->13,5) (0->10,6) (1->6,8) (1->7,3) (2->9,3) (2->3,4) (2->6,8) (2->4,2) (3->4,7) (3->8,9) (3->15,3) (3->9,3) (3->10,3) (4->9,4) (4->10,2) (4->8,4) (4->7,2) (4->17,2) (5->12,2) (6->12,4) (6->17,7) (6->7,9) (6->9,3) (7->9,10) (7->11,8) (7->14,7) (8->16,8) (9->13,10) (10->16,2) (10->15,1) (12->15,1) (13->14,6) (13->16,5) (14->15,7) (14->16,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->4,3) (0->8,3) (0->13,4) (1->12,6) (1->14,2) (1->2,2) (1->11,10) (1->3,5) (1->7,5) (2->7,1) (2->12,7) (3->4,4) (3->7,7) (4->6,4) (4->12,4) (4->9,1) (5->14,4) (5->6,7) (5->15,9) (6->15,5) (6->14,3) (6->9,10) (7->13,3) (7->8,9) (9->10,4) (11->14,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,9) (1->5,5) (1->3,2) (2->5,9) (3->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->6,4) (1->6,6) (2->7,4) (3->4,2) (4->5,10) (5->7,10) (6->8,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->9,3) (0->10,6) (1->6,8) (1->3,10) (1->2,3) (1->8,1) (1->10,10) (1->9,8) (2->3,8) (2->9,9) (3->6,4) (3->5,1) (3->8,7) (3->4,8) (4->6,3) (4->5,6) (5->6,2) (5->10,2) (5->7,6) (5->9,7) (6->8,1) (9->10,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->5,4) (1->6,5) (1->5,10) (1->7,6) (2->6,4) (3->4,6) (5->7,10) (6->7,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->13,4) (0->10,1) (0->11,9) (1->15,7) (1->17,7) (1->2,9) (1->14,6) (1->16,8) (3->6,6) (4->5,3) (4->10,8) (5->14,3) (5->10,9) (5->7,7) (5->15,1) (5->16,7) (5->8,2) (6->17,2) (6->10,5) (7->13,9) (7->15,2) (8->11,2) (9->14,6) (11->17,4) (11->15,9) (13->15,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->3,2) (0->7,3) (0->10,7) (1->12,8) (1->4,2) (1->14,3) (1->8,6) (1->2,1) (2->4,2) (2->12,6) (2->7,6) (3->6,4) (4->10,2) (4->5,6) (4->12,3) (4->7,8) (5->6,8) (5->13,2) (5->11,6) (6->9,1) (6->7,7) (7->14,6) (7->12,7) (8->12,1) (9->13,1) (10->13,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->9,8) (0->6,7) (0->5,6) (0->10,4) (2->6,3) (2->10,1) (3->6,1) (3->9,9) (3->4,1) (3->10,4) (4->10,5) (5->8,10) (6->11,5) (6->7,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->2,8) (2->3,1) (4->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->5,6) (0->3,9) (1->5,4) (2->6,8) (3->6,6) (3->7,3) (4->5,4) (4->6,8) (5->7,10) (6->8,2) (6->7,2) (7->8,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->5,2) (0->11,9) (0->8,8) (0->1,7) (1->2,9) (2->8,3) (2->5,10) (2->3,2) (2->12,1) (3->4,5) (4->12,1) (4->7,2) (5->8,6) (5->9,6) (5->11,5) (5->6,3) (6->11,6) (6->10,3) (6->9,9) (6->7,8) (7->8,10) (7->11,2) (8->11,4) (8->9,10) (9->10,2) (9->12,10) (10->12,3) (11->12,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,3) (1->2,2) (2->3,10) (3->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->7,1) (0->3,3) (1->4,8) (1->2,5) (1->10,3) (2->8,2) (2->11,3) (2->12,10) (3->5,6) (3->4,5) (3->11,6) (4->7,2) (4->12,1) (4->11,3) (4->6,9) (5->6,8) (5->11,8) (5->7,8) (5->10,2) (6->8,5) (6->11,6) (9->11,3) (9->12,10) (10->11,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,4) (1->3,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->15,7) (0->2,8) (1->10,1) (1->9,7) (1->5,3) (1->6,8) (1->12,1) (2->5,3) (2->3,2) (2->7,2) (3->10,9) (3->15,2) (3->12,6) (4->7,5) (4->15,8) (4->14,1) (5->11,6) (5->7,6) (5->6,6) (5->12,10) (5->10,3) (6->15,9) (6->8,2) (6->9,5) (6->7,10) (7->10,10) (7->12,8) (7->14,4) (7->9,4) (8->15,8) (9->11,4) (9->14,5) (11->12,10) (11->13,3) (12->15,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,9) (1->5,10) (3->6,4) (3->8,1) (3->4,10) (4->5,6) (5->8,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (1->2,6) (2->3,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,2) (2->4,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->2,9) (1->2,9) (1->5,1) (2->4,2) (2->5,5) (3->6,7) (3->4,5) (5->6,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (1->2,10) (2->6,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->9,3) (0->8,9) (1->7,6) (1->9,2) (1->13,1) (2->10,9) (2->12,10) (2->11,9) (2->7,9) (3->6,2) (3->9,6) (3->13,6) (3->11,4) (3->10,1) (4->11,3) (4->10,2) (4->9,2) (4->7,6) (4->5,2) (5->6,5) (5->9,4) (5->12,6) (6->11,10) (6->13,6) (6->7,6) (6->8,3) (7->12,10) (7->8,1) (9->11,3) (10->11,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->1,8) (0->7,2) (1->6,7) (2->7,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->1,5) (0->11,10) (0->4,7) (0->7,7) (1->10,1) (1->5,10) (1->9,10) (1->8,3) (2->10,1) (2->9,10) (2->12,3) (2->7,3) (3->10,10) (3->6,2) (3->12,1) (3->8,1) (4->5,10) (4->7,10) (4->8,9) (5->10,3) (5->12,8) (6->7,8) (6->11,5) (6->10,4) (7->9,6) (8->11,8) (8->12,9) (9->10,2) (10->11,8) (11->12,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,5) (1->3,4) (2->3,4) (3->4,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->6,8) (1->6,9) (1->2,5) (2->3,9) (3->7,2) (6->10,2) (7->8,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->3,3) (0->4,7) (0->13,1) (0->5,2) (0->6,3) (0->12,9) (0->9,5) (1->6,6) (1->13,2) (1->9,1) (1->2,9) (1->5,4) (1->10,9) (2->5,4) (2->3,3) (2->12,10) (2->6,10) (3->13,1) (3->11,5) (3->7,3) (3->5,5) (3->4,4) (3->6,10) (4->11,3) (5->7,6) (5->9,7) (5->11,4) (6->9,3) (6->11,8) (6->8,2) (6->13,7) (7->10,3) (8->9,1) (9->11,2) (9->13,2) (11->13,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->6,4) (0->3,5) (1->3,6) (3->6,2) (4->6,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->1,2) (1->5,3) (1->7,10) (2->4,1) (2->8,7) (4->8,8) (5->9,1) (6->7,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->8,5) (0->5,5) (0->12,8) (0->4,9) (1->9,1) (1->13,5) (1->7,5) (2->10,4) (2->3,3) (3->12,5) (3->4,1) (3->11,4) (4->6,9) (4->5,4) (5->7,7) (5->11,9) (5->13,10) (6->12,5) (6->9,3) (7->9,7) (7->12,3) (8->13,3) (8->12,1) (9->10,8) (9->11,9) (10->11,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->15,4) (0->14,10) (0->10,4) (1->3,6) (1->8,7) (3->16,8) (3->15,2) (3->12,9) (4->9,4) (4->6,7) (5->16,3) (5->10,3) (6->15,9) (6->11,2) (7->9,7) (8->12,5) (8->10,9) (9->12,9) (10->11,10) (11->16,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->7,4) (2->8,3) (2->4,5) (3->10,1) (3->6,8) (3->5,2) (3->7,10) (4->6,7) (4->9,5) (5->7,10) (5->8,5) (6->9,8) (7->9,9) (8->9,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->5,4) (0->2,2) (1->9,6) (1->2,10) (2->10,3) (2->9,7) (2->6,2) (2->3,8) (3->9,6) (4->8,8) (5->7,7) (6->9,2) (8->10,9) (9->10,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->5,2) (0->14,8) (1->5,3) (1->6,3) (2->10,2) (3->13,7) (3->6,7) (3->5,9) (4->10,7) (4->9,7) (5->11,7) (5->7,3) (5->8,6) (6->8,3) (7->12,9) (11->13,5) (12->13,3) (12->14,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,7) (1->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,4) (2->3,9) (3->4,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->2,9) (0->11,7) (0->12,1) (0->8,4) (0->7,6) (0->14,7) (0->9,3) (1->9,4) (1->8,1) (1->2,8) (2->6,5) (2->13,2) (2->11,5) (3->12,9) (3->10,5) (3->8,1) (4->8,10) (5->10,8) (5->9,1) (5->13,2) (5->15,5) (6->10,7) (6->9,2) (6->15,4) (6->11,4) (6->8,10) (7->8,1) (8->14,9) (8->10,8) (8->15,2) (8->9,8) (9->11,4) (9->12,10) (10->12,8) (10->11,6) (11->13,6) (12->15,1) (13->15,9) (13->14,9) (14->15,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->10,2) (0->7,8) (0->8,7) (0->5,10) (0->3,2) (1->5,9) (1->9,3) (2->10,8) (2->4,3) (2->5,2) (2->8,1) (3->7,1) (3->4,1) (4->11,6) (4->9,10) (5->8,6) (5->7,3) (7->10,2) (7->11,5) (9->11,6) (9->10,10) (10->11,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->8,6) (0->12,4) (0->1,3) (0->11,1) (0->3,9) (0->4,4) (0->14,4) (1->6,7) (1->8,4) (1->13,4) (1->2,3) (1->10,10) (2->16,1) (2->11,10) (2->12,4) (2->4,10) (2->5,4) (2->3,10) (2->13,6) (3->7,4) (3->8,9) (3->14,4) (3->4,8) (3->6,4) (4->13,5) (4->9,4) (4->12,10) (5->9,9) (5->11,7) (5->16,6) (5->8,9) (5->15,3) (6->14,6) (6->15,5) (6->10,2) (7->13,4) (7->11,3) (7->10,7) (8->9,5) (8->11,2) (8->15,6) (8->16,3) (9->13,10) (9->14,5) (9->10,8) (10->16,7) (10->13,3) (10->14,7) (10->11,6) (10->15,4) (11->15,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->7,10) (0->3,10) (1->11,5) (1->6,2) (1->8,1) (1->4,10) (2->6,6) (4->10,10) (4->8,10) (4->5,6) (5->9,5) (7->9,10) (7->12,9) (8->11,7) (9->10,7) (10->11,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->8,3) (0->5,5) (0->4,4) (0->1,5) (1->6,8) (3->4,10) (4->8,1) (8->10,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->2,7) (0->8,3) (1->5,10) (1->7,10) (1->11,9) (1->10,5) (1->6,5) (2->5,2) (2->10,8) (2->13,2) (3->8,7) (3->10,4) (4->11,7) (4->10,6) (5->8,4) (5->9,2) (6->10,7) (6->9,9) (7->12,9) (7->9,8) (8->9,1) (9->12,9) (9->10,4) (10->12,6) (11->13,4) (11->12,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->12,9) (0->3,4) (1->9,10) (1->4,6) (2->6,7) (2->7,1) (2->5,4) (3->7,7) (4->8,7) (6->7,6) (6->10,3) (7->8,2) (8->11,6) (8->10,7) (9->12,9) (9->10,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->13,2) (0->19,6) (0->10,8) (0->16,7) (0->7,5) (1->5,4) (1->8,4) (1->9,5) (1->19,4) (1->15,5) (1->11,10) (1->13,3) (2->19,4) (2->10,7) (2->8,4) (2->6,6) (3->10,2) (3->14,2) (3->5,8) (4->11,5) (4->12,2) (4->5,5) (4->7,4) (5->17,3) (5->15,2) (5->19,5) (5->6,7) (5->16,6) (6->19,2) (6->14,10) (6->13,9) (6->15,7) (6->10,9) (7->11,6) (7->18,5) (8->10,1) (8->17,9) (8->15,4) (8->9,4) (8->12,8) (8->11,7) (9->18,1) (10->18,4) (10->17,10) (10->13,8) (10->14,7) (10->12,3) (11->14,5) (11->12,2) (12->15,8) (13->19,5) (13->18,9) (13->14,10) (14->18,2) (15->19,5) (16->18,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->9,7) (0->5,5) (0->12,8) (0->16,5) (1->17,2) (1->6,10) (2->14,10) (2->12,9) (2->13,9) (2->6,1) (2->5,10) (3->5,5) (3->8,5) (3->6,2) (4->12,7) (4->17,7) (4->9,10) (5->16,6) (5->9,5) (6->12,3) (6->7,3) (6->9,10) (7->17,5) (7->15,5) (7->13,9) (7->12,6) (8->13,5) (8->15,10) (8->11,9) (9->10,7) (10->14,3) (10->15,4) (10->11,9) (11->17,6) (12->13,2) (12->14,2) (13->14,4) (14->16,3) (16->17,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->3,3) (1->4,10) (2->5,10) (3->9,7) (3->8,4) (4->7,1) (4->5,1) (7->8,7) (8->9,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 13, and the edges are: (0->1,1) (0->13,5) (0->8,6) (0->2,8) (1->5,8) (1->3,9) (2->11,5) (2->5,3) (2->6,1) (4->10,8) (5->11,3) (6->10,3) (6->8,8) (7->8,10) (8->10,9) (9->10,1) (9->13,3) (10->12,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->4,6) (0->10,10) (0->8,6) (0->9,3) (1->12,10) (1->9,2) (1->3,5) (2->12,3) (2->14,9) (3->7,2) (3->11,10) (4->9,8) (4->8,5) (4->5,1) (5->14,1) (6->8,3) (6->7,3) (9->14,6) (9->11,8) (10->13,4) (12->13,5) (12->14,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,3) (1->2,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->1,4) (0->3,6) (0->13,6) (0->2,8) (0->10,7) (0->7,9) (0->8,7) (1->11,7) (1->9,5) (1->8,10) (2->13,3) (2->7,10) (2->3,7) (2->16,6) (2->10,1) (2->4,5) (2->15,9) (3->4,2) (3->10,10) (3->7,4) (4->5,3) (4->13,9) (4->8,5) (4->14,9) (4->11,4) (4->12,8) (5->7,8) (5->11,3) (6->8,8) (6->16,6) (6->9,4) (6->11,4) (7->12,10) (7->10,4) (7->15,8) (7->14,10) (7->8,7) (8->10,7) (8->14,7) (8->15,3) (8->12,8) (9->16,8) (9->14,10) (10->12,9) (10->11,2) (10->13,5) (11->13,5) (12->13,7) (13->15,7) (14->15,10) (14->16,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->11,10) (1->2,3) (2->7,5) (2->4,7) (3->9,10) (4->5,4) (4->8,3) (8->9,1) (8->10,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->9,5) (0->2,9) (0->14,10) (0->6,10) (0->3,8) (0->11,6) (1->14,5) (1->15,7) (1->13,10) (1->2,4) (2->4,5) (2->17,6) (2->13,9) (2->8,4) (2->15,10) (3->12,7) (3->14,1) (4->12,10) (4->9,5) (5->13,9) (5->6,9) (5->12,1) (6->8,6) (6->9,1) (7->17,8) (7->10,3) (7->9,1) (7->14,7) (8->13,5) (8->12,1) (8->15,9) (9->11,10) (9->16,8) (9->13,10) (9->17,3) (10->14,4) (12->15,2) (13->17,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (1->8,7) (1->7,8) (2->3,5) (2->4,9) (4->8,3) (4->9,4) (5->7,2) (7->9,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,9) (1->2,8) (2->3,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->3,3) (1->6,1) (1->2,5) (1->3,2) (1->9,9) (2->10,4) (3->6,3) (4->5,3) (4->8,7) (4->6,2) (5->10,9) (7->11,9) (8->10,7) (10->11,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,4) (0->7,4) (0->1,2) (1->6,8) (1->5,1) (2->7,1) (3->5,6) (3->4,9) (4->6,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->4,10) (0->9,10) (0->7,10) (1->10,3) (2->7,2) (2->8,5) (3->9,2) (4->5,8) (4->11,1) (4->8,9) (6->8,8) (7->11,9) (7->8,9) (7->10,9) (8->11,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (3->6,5) (4->6,2) (5->7,5) (6->7,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->15,3) (0->16,4) (0->4,6) (1->3,4) (1->6,1) (1->10,8) (1->14,4) (2->10,2) (2->6,6) (3->11,6) (3->10,6) (3->9,9) (3->12,1) (3->8,2) (3->7,8) (4->12,5) (4->11,3) (5->12,4) (5->6,10) (5->11,10) (5->16,5) (5->10,2) (6->16,8) (7->12,3) (7->15,3) (7->10,7) (8->15,3) (10->12,6) (11->15,1) (13->15,10) (13->16,5) (14->15,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->2,7) (0->6,8) (0->9,1) (1->9,10) (1->4,10) (2->14,4) (3->14,6) (3->5,10) (4->9,9) (5->13,6) (5->7,8) (6->12,8) (6->7,10) (7->14,5) (7->10,5) (8->12,9) (9->11,5) (11->14,10) (12->14,9) (12->13,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->3,7) (0->2,1) (2->5,7) (2->3,9) (3->4,8) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->4,2) (0->8,7) (0->19,6) (0->3,10) (0->9,5) (0->15,10) (0->17,6) (0->12,4) (1->6,2) (1->19,2) (1->4,10) (1->16,6) (1->15,9) (1->13,3) (1->14,7) (1->18,2) (1->17,9) (2->9,9) (2->18,8) (2->13,8) (2->17,7) (3->17,7) (3->18,10) (3->6,3) (3->4,4) (3->5,1) (3->7,7) (3->9,2) (4->17,10) (4->11,2) (4->6,8) (4->7,9) (4->8,3) (5->13,4) (5->16,10) (5->11,4) (5->14,5) (5->15,6) (5->10,3) (6->9,8) (6->15,8) (6->18,1) (6->7,6) (7->9,3) (7->17,10) (7->8,1) (7->15,3) (7->10,3) (8->11,10) (8->14,7) (8->15,6) (9->12,10) (10->19,6) (10->18,4) (10->15,1) (11->18,6) (12->16,4) (12->17,10) (13->16,9) (13->17,1) (14->19,3) (14->17,8) (16->18,9) (16->17,7) (16->19,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,6) (2->3,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->13,2) (0->15,1) (0->9,1) (0->6,6) (0->8,7) (0->1,7) (1->13,5) (1->12,7) (1->15,3) (1->10,9) (1->2,5) (2->4,5) (2->6,2) (2->10,3) (2->13,10) (2->7,4) (2->8,3) (3->13,2) (3->17,9) (3->8,3) (3->15,9) (3->7,9) (4->9,7) (4->10,2) (4->5,3) (4->12,4) (4->14,5) (5->9,5) (5->10,1) (5->15,7) (6->16,8) (6->8,8) (6->9,7) (9->15,10) (10->15,5) (11->16,5) (12->15,7) (12->17,6) (13->15,1) (14->15,7) (15->16,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->10,7) (2->3,2) (3->8,8) (3->7,10) (4->7,1) (4->9,7) (6->10,7) (6->9,8) (7->10,3) (8->9,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->9,2) (0->2,7) (0->7,9) (1->4,10) (1->8,4) (1->5,3) (2->5,7) (2->4,8) (2->8,3) (2->6,4) (3->6,3) (4->9,3) (6->9,5) (6->7,2) (6->10,5) (6->8,7) (9->10,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (2->5,3) (3->7,7) (4->6,1) (5->6,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->8,6) (0->10,3) (0->6,6) (0->11,9) (0->3,7) (0->17,3) (0->1,3) (0->9,8) (1->14,5) (1->17,6) (1->2,2) (1->6,8) (1->8,4) (1->9,7) (1->16,4) (1->13,7) (2->4,1) (2->16,2) (2->9,10) (2->12,8) (3->7,6) (3->15,9) (3->11,4) (3->6,9) (3->12,7) (4->7,9) (4->6,8) (4->14,3) (4->5,7) (4->11,3) (5->12,6) (5->13,5) (5->7,9) (6->12,5) (6->9,8) (6->17,1) (6->16,9) (6->7,9) (7->8,2) (7->14,4) (7->9,9) (7->13,4) (7->12,8) (7->11,5) (8->11,2) (9->15,5) (9->16,8) (9->11,1) (10->12,5) (10->16,3) (13->14,5) (14->15,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (1->2,4) (3->4,2) (4->6,1) (6->8,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->10,2) (0->7,7) (0->6,9) (1->3,8) (1->4,1) (2->7,2) (3->7,4) (3->8,8) (3->11,4) (4->7,4) (7->10,7) (10->11,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->5,1) (0->7,4) (0->3,9) (0->2,8) (1->6,8) (1->3,5) (1->4,10) (2->3,6) (3->6,2) (3->8,3) (3->4,2) (5->8,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,3) (0->3,1) (1->3,4) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,2) (0->2,8) (1->2,10) (2->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->12,4) (0->8,9) (0->11,2) (0->6,3) (0->7,7) (1->13,1) (1->2,7) (1->3,10) (1->11,2) (1->15,9) (2->7,3) (2->14,10) (2->4,3) (3->13,6) (3->5,10) (3->14,9) (4->13,1) (4->5,5) (5->14,8) (5->13,6) (5->7,9) (6->14,1) (6->15,8) (6->7,3) (6->10,9) (7->9,4) (8->13,6) (8->15,8) (11->12,7) (11->14,10) (13->14,6) (14->15,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->5,9) (1->5,2) (2->3,4) (3->4,2) (4->5,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,2) (2->3,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->2,3) (1->3,3) (3->7,8) (3->11,9) (4->7,8) (7->9,7) (8->11,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->11,4) (0->3,10) (0->9,8) (0->7,7) (1->7,1) (1->6,10) (1->5,4) (2->3,9) (2->5,4) (2->10,2) (3->4,7) (3->10,7) (3->5,7) (4->5,5) (5->9,1) (5->10,1) (6->8,3) (6->9,10) (7->10,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->3,5) (0->6,5) (1->2,2) (2->3,2) (3->6,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->3,7) (0->11,3) (0->17,7) (0->7,6) (0->1,1) (0->4,1) (0->16,6) (0->12,9) (1->7,6) (1->12,9) (1->13,2) (1->3,7) (2->13,5) (2->5,7) (2->7,8) (2->16,4) (2->3,4) (2->15,9) (2->17,4) (2->4,10) (2->12,1) (3->7,8) (3->8,9) (3->14,5) (3->10,8) (3->15,8) (3->17,3) (4->12,4) (4->7,6) (4->15,8) (5->15,9) (5->14,9) (5->6,6) (6->15,7) (6->14,10) (6->9,2) (6->13,4) (7->13,1) (7->10,2) (7->15,5) (8->16,5) (8->14,5) (9->16,9) (9->12,1) (9->13,10) (9->10,9) (9->14,10) (10->17,8) (10->12,2) (10->13,4) (10->14,6) (11->12,1) (12->14,4) (12->17,5) (12->13,8) (13->16,4) (13->15,8) (15->16,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->4,6) (0->9,3) (0->14,4) (1->10,8) (1->6,6) (1->7,10) (1->12,2) (1->9,3) (1->18,4) (1->5,4) (1->16,1) (2->5,8) (2->16,8) (3->11,7) (3->14,8) (3->19,8) (3->13,2) (3->16,3) (3->10,1) (4->17,10) (4->19,8) (4->15,8) (4->11,8) (4->12,4) (5->15,1) (5->14,10) (5->9,6) (5->13,3) (6->7,5) (6->14,4) (6->15,8) (6->9,10) (7->14,3) (7->19,4) (7->13,3) (8->18,4) (8->16,8) (8->11,5) (8->12,5) (8->15,6) (9->19,10) (10->15,3) (10->13,5) (10->17,8) (11->15,9) (11->13,7) (12->19,4) (12->17,3) (13->15,7) (14->19,5) (15->18,4) (17->19,4) (18->19,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->8,2) (0->10,8) (0->2,7) (0->3,7) (0->5,5) (0->11,9) (0->4,7) (1->8,10) (1->10,1) (2->8,6) (2->5,6) (3->11,6) (3->10,5) (3->4,10) (4->7,3) (5->6,4) (5->8,3) (6->10,4) (6->12,7) (7->8,2) (8->9,7) (8->12,1) (9->11,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,9) (0->4,10) (1->2,8) (2->5,7) (3->5,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->11,1) (0->13,9) (0->14,1) (0->2,6) (0->3,8) (0->15,4) (1->10,7) (1->5,7) (1->4,5) (1->7,9) (2->4,6) (2->12,1) (2->15,1) (2->11,9) (3->10,7) (3->12,5) (3->11,9) (4->11,2) (4->13,2) (4->15,1) (4->6,9) (5->14,1) (5->11,2) (5->15,6) (5->6,1) (6->14,8) (6->10,3) (6->13,6) (6->12,6) (6->15,4) (7->12,2) (7->13,2) (7->9,5) (8->11,2) (8->15,5) (9->10,7) (9->15,9) (9->12,10) (10->11,7) (11->14,9) (11->15,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->5,5) (1->6,10) (2->4,2) (4->5,1) (6->8,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->1,4) (0->5,4) (0->7,2) (0->4,4) (0->6,8) (1->7,7) (1->6,1) (2->8,1) (2->4,2) (2->7,6) (3->10,5) (4->5,6) (4->8,8) (5->9,2) (7->8,2) (8->9,1) (8->10,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->2,3) (0->3,4) (0->7,3) (0->11,8) (0->14,3) (0->15,8) (0->1,2) (0->13,10) (0->4,3) (0->9,9) (1->14,7) (1->3,5) (1->16,2) (1->12,7) (1->8,7) (1->2,10) (2->6,4) (2->7,6) (2->15,1) (2->9,9) (3->4,4) (3->5,7) (3->14,5) (4->16,6) (4->8,5) (4->13,9) (4->10,6) (5->7,9) (5->11,5) (5->14,10) (5->12,4) (5->16,6) (6->15,6) (6->13,8) (6->17,10) (6->10,9) (7->10,6) (7->8,3) (7->12,6) (7->14,7) (8->9,3) (8->17,3) (8->12,3) (8->11,3) (9->11,2) (9->14,8) (10->14,5) (10->13,5) (10->12,5) (11->17,6) (11->12,8) (11->14,9) (12->14,4) (13->16,9) (13->17,4) (14->16,6) (15->17,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->13,6) (0->1,7) (0->18,4) (1->2,3) (1->6,6) (1->3,3) (1->5,9) (1->14,4) (1->13,1) (1->8,5) (1->12,6) (2->6,5) (2->17,2) (2->14,3) (3->13,10) (3->4,3) (3->17,4) (3->11,2) (3->16,6) (4->14,8) (4->10,1) (4->11,4) (4->17,1) (4->15,3) (5->7,2) (5->12,5) (5->8,6) (5->18,4) (6->15,2) (6->7,10) (6->18,4) (6->13,4) (7->8,3) (7->9,3) (7->14,9) (8->18,9) (8->17,2) (9->17,10) (9->11,3) (10->18,9) (10->14,3) (10->11,2) (11->18,4) (12->18,5) (12->14,1) (12->15,4) (12->16,9) (13->15,7) (14->18,7) (14->15,7) (15->16,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 15, and the edges are: (0->4,2) (0->15,4) (0->8,2) (0->11,8) (0->2,7) (0->12,7) (1->12,3) (1->4,3) (1->15,3) (1->7,6) (2->7,7) (2->12,7) (2->8,1) (2->4,5) (3->8,10) (3->11,6) (3->14,10) (3->4,6) (4->11,9) (4->5,5) (4->6,7) (4->14,8) (5->10,2) (5->12,6) (5->13,3) (5->7,9) (5->9,2) (6->7,1) (6->12,8) (6->14,1) (7->15,2) (7->12,9) (7->14,9) (9->12,7) (10->11,9) (11->14,1) (12->13,4) (12->14,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->8,4) (1->4,3) (1->12,3) (2->7,3) (3->7,9) (3->5,4) (3->14,1) (4->13,5) (4->8,4) (6->10,7) (6->7,4) (6->12,6) (9->12,8) (9->13,3) (9->11,3) (10->11,2) (13->14,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->10,8) (0->1,2) (0->6,2) (0->2,4) (0->14,1) (0->4,2) (0->17,9) (1->3,10) (1->13,3) (1->16,2) (2->6,7) (2->17,1) (2->7,4) (3->5,2) (3->9,2) (3->13,4) (3->11,5) (3->12,9) (4->10,4) (4->16,7) (4->6,8) (4->8,4) (5->6,6) (6->14,6) (6->7,5) (6->11,3) (6->10,8) (6->8,5) (7->11,10) (7->10,4) (7->8,6) (7->13,1) (7->9,7) (8->13,4) (8->11,6) (8->15,8) (9->14,6) (9->13,9) (9->15,6) (10->15,10) (10->16,4) (11->13,10) (11->12,6) (11->14,3) (12->16,3) (12->13,6) (13->15,7) (13->17,4) (14->17,3) (15->17,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,5) (2->3,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->17,5) (1->14,3) (2->4,3) (2->18,7) (2->12,8) (2->9,9) (3->9,3) (4->16,1) (4->15,3) (5->10,4) (6->15,9) (6->17,10) (7->13,7) (9->13,2) (10->18,7) (11->14,5) (13->19,1) (15->18,6) (16->18,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->16,6) (0->1,9) (0->6,2) (0->11,3) (0->4,4) (0->3,1) (0->2,9) (0->10,6) (1->6,5) (1->8,5) (1->10,9) (1->12,7) (1->13,3) (1->9,2) (1->3,3) (1->7,7) (2->6,6) (2->13,10) (2->17,4) (3->7,2) (3->5,1) (3->6,4) (3->10,2) (3->16,10) (3->12,2) (3->14,3) (4->12,6) (4->8,3) (5->14,8) (5->7,8) (5->12,7) (5->8,10) (6->7,6) (6->9,5) (7->16,5) (7->13,6) (7->11,10) (7->10,1) (8->15,7) (8->13,4) (9->11,2) (9->15,2) (10->14,4) (10->11,10) (11->13,8) (12->17,9) (12->13,7) (13->14,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->6,2) (0->1,10) (0->8,7) (0->11,9) (0->5,10) (1->4,8) (1->6,4) (2->12,8) (2->9,5) (3->9,7) (3->7,5) (5->8,10) (6->9,2) (6->11,10) (8->15,4) (9->15,7) (9->10,7) (11->13,9) (12->16,5) (13->16,7) (15->16,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,3) (0->1,1) (0->2,9) (1->5,5) (1->7,7) (1->2,9) (1->8,2) (1->6,6) (2->5,4) (2->3,7) (3->4,8) (4->8,6) (5->8,4) (5->6,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->4,8) (2->4,8) (4->5,1) (5->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->8,1) (1->8,5) (1->5,4) (2->6,4) (4->5,1) (5->6,4) (5->8,8) (5->9,3) (5->7,3) (7->9,6) (7->8,8) (8->9,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->12,10) (0->2,1) (0->5,10) (0->10,2) (0->4,1) (1->13,2) (1->4,6) (1->5,4) (2->13,9) (2->10,3) (2->11,10) (2->12,8) (2->9,3) (3->4,7) (3->13,5) (4->14,9) (4->8,1) (4->13,9) (5->11,5) (5->7,10) (5->14,5) (5->12,4) (6->10,3) (6->9,5) (7->12,3) (7->13,5) (8->9,9) (8->11,1) (8->13,6) (8->10,5) (9->10,6) (9->11,6) (9->14,9) (9->13,4) (10->12,8) (12->14,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,1) (1->2,6) (2->4,3) (2->7,8) (2->5,10) (3->5,4) (3->6,2) (4->6,3) (4->5,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->10,5) (0->16,6) (0->6,1) (0->7,8) (0->5,4) (0->4,2) (0->9,1) (0->13,5) (1->7,2) (1->3,3) (1->15,10) (1->9,1) (1->11,6) (1->13,4) (1->16,10) (1->10,9) (2->5,1) (2->12,4) (2->9,7) (3->11,3) (3->7,1) (3->4,10) (3->14,3) (4->11,4) (4->8,4) (5->12,10) (5->15,8) (5->9,2) (6->7,6) (6->16,7) (6->12,2) (6->15,6) (6->8,6) (7->8,10) (7->13,2) (7->10,5) (7->14,7) (7->15,5) (8->12,8) (8->16,3) (9->12,5) (9->10,4) (9->14,9) (10->14,5) (10->17,10) (10->16,10) (10->11,8) (10->13,9) (11->14,9) (11->13,1) (12->15,4) (12->13,1) (12->17,3) (13->15,3) (13->14,2) (13->16,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->6,3) (0->4,10) (0->7,9) (1->6,1) (1->5,10) (1->4,6) (1->7,5) (2->5,8) (3->7,3) (3->8,4) (5->8,2) (5->9,3) (8->9,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (1->8,6) (1->7,4) (1->2,5) (3->8,5) (4->9,10) (4->6,9) (4->8,1) (5->10,1) (5->9,7) (6->7,5) (8->9,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->5,5) (0->4,7) (0->3,1) (0->9,7) (1->16,10) (1->10,6) (1->8,8) (1->5,6) (1->17,4) (1->9,2) (2->8,5) (2->6,5) (2->16,1) (2->17,2) (2->3,8) (3->5,9) (3->9,7) (3->15,8) (3->4,4) (4->9,2) (4->17,6) (4->10,3) (4->11,1) (4->15,3) (4->8,5) (4->13,6) (5->6,3) (5->18,8) (5->10,10) (5->9,3) (5->8,9) (5->16,10) (5->11,1) (6->10,6) (6->8,4) (6->16,9) (6->15,1) (6->12,10) (7->15,2) (7->8,2) (7->9,1) (8->10,2) (8->17,3) (8->12,5) (8->15,6) (9->15,5) (9->10,10) (9->18,8) (9->11,1) (10->17,3) (10->11,3) (10->15,8) (10->18,3) (11->12,4) (11->14,6) (11->13,10) (11->15,9) (12->13,2) (12->16,10) (12->15,2) (12->17,4) (13->16,8) (13->18,9) (14->17,8) (14->15,1) (15->17,5) (15->16,2) (16->17,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->11,4) (0->6,10) (0->3,4) (1->3,6) (1->16,4) (1->11,5) (2->6,2) (2->3,10) (3->4,8) (3->17,9) (3->6,3) (4->13,9) (5->7,3) (6->12,10) (7->13,4) (7->15,9) (8->14,9) (8->17,7) (8->15,2) (9->14,7) (12->16,7) (12->15,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,9) (0->3,9) (0->5,4) (2->4,4) (3->4,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->6,8) (1->7,6) (1->6,2) (2->3,5) (3->7,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->8,7) (0->2,4) (1->3,1) (1->5,10) (1->2,1) (2->5,5) (4->7,7) (4->6,7) (5->6,3) (6->8,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,4) (1->4,7) (2->3,9) (2->4,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,4) (1->3,1) (1->2,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,7) (1->3,10) (1->2,5) (1->4,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->3,7) (0->4,10) (0->9,2) (0->6,9) (1->3,8) (1->6,7) (1->7,4) (2->8,5) (2->7,7) (3->9,2) (3->4,5) (4->5,6) (4->10,10) (4->9,2) (5->7,10) (5->6,7) (6->8,8) (7->9,10) (7->8,3) (8->9,10) (8->10,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (1->3,2) (2->4,9) (3->4,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->9,2) (0->2,8) (1->8,4) (1->2,7) (1->7,2) (2->6,6) (2->9,5) (2->5,9) (3->7,1) (3->6,6) (4->9,9) (4->10,1) (6->7,8) (7->10,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->3,10) (1->2,7) (3->7,4) (3->6,8) (3->4,3) (4->6,1) (6->7,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (1->5,6) (1->6,3) (2->7,5) (2->8,8) (3->9,8) (3->8,8) (5->8,7) (7->9,2) (8->9,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->3,1) (0->6,8) (0->2,10) (0->1,9) (1->6,3) (1->5,4) (2->8,2) (2->5,9) (2->6,9) (3->7,7) (3->5,2) (3->4,3) (4->6,7) (5->8,1) (5->7,9) (6->8,7) (6->7,6) (7->9,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (1->3,10) (3->4,6) (4->5,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,1) (0->3,5) (0->2,8) (0->7,3) (1->7,1) (2->6,2) (2->4,10) (3->6,3) (4->5,6) (4->7,3) (6->7,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->15,5) (0->12,4) (0->9,1) (0->6,8) (1->6,1) (1->11,5) (1->4,9) (1->15,2) (1->14,4) (1->8,8) (1->5,9) (2->10,1) (3->11,10) (3->7,5) (4->10,4) (4->6,7) (4->9,3) (5->14,2) (6->15,10) (6->12,10) (6->9,7) (6->14,1) (7->10,5) (7->13,4) (9->16,9) (9->11,6) (10->12,7) (11->15,3) (12->14,1) (13->16,10) (13->15,6) (15->16,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,8) (1->5,7) (2->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->8,1) (0->1,2) (0->4,5) (1->9,7) (2->5,8) (3->7,6) (3->5,2) (4->8,3) (5->9,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (0->16,1) (0->2,9) (0->8,9) (0->6,10) (1->6,6) (1->3,10) (1->17,10) (2->9,9) (2->3,1) (2->7,5) (3->5,8) (4->8,9) (4->15,10) (4->7,3) (5->12,9) (6->7,8) (6->10,1) (7->8,1) (8->12,6) (9->15,6) (10->12,10) (10->11,10) (11->13,3) (12->13,7) (12->17,1) (13->16,1) (13->15,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,2) (0->2,1) (1->4,3) (1->6,7) (1->2,7) (2->3,5) (3->6,1) (3->5,4) (4->6,10) (5->6,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,9) (1->2,2) (1->4,8) (2->7,5) (3->6,1) (4->6,5) (4->5,1) (5->7,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->10,5) (0->3,1) (0->9,4) (0->2,7) (0->14,2) (0->8,4) (0->6,4) (1->14,5) (1->7,6) (1->16,6) (2->15,4) (2->19,6) (2->8,5) (2->10,3) (3->10,7) (3->19,3) (3->17,1) (3->13,7) (3->11,5) (4->17,2) (4->16,1) (4->8,6) (4->14,4) (4->5,7) (4->9,8) (4->11,9) (5->10,9) (5->7,10) (5->11,7) (6->7,7) (6->10,5) (6->12,5) (6->17,4) (7->16,3) (7->12,7) (7->17,5) (7->13,9) (8->18,7) (8->11,4) (8->15,2) (9->10,3) (10->16,5) (11->14,10) (11->12,10) (12->13,4) (12->14,8) (12->19,1) (12->17,3) (12->16,7) (13->14,3) (15->17,7) (15->19,1) (16->19,1) (17->19,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->1,2) (0->3,8) (1->4,9) (2->3,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->5,6) (0->16,7) (0->6,10) (0->7,8) (0->2,7) (0->18,8) (1->2,2) (1->3,5) (1->18,3) (2->10,8) (2->7,5) (3->16,8) (3->11,5) (3->4,8) (4->15,9) (4->5,9) (4->17,2) (5->19,2) (5->10,9) (5->13,4) (6->9,9) (6->7,3) (6->18,6) (6->17,2) (7->16,4) (7->8,5) (7->9,8) (8->15,9) (8->11,6) (8->9,8) (8->18,2) (9->16,7) (9->18,5) (12->15,8) (12->19,6) (13->18,3) (14->15,5) (14->18,2) (15->16,8) (16->18,9) (17->19,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->15,10) (1->5,9) (2->5,5) (2->15,6) (2->12,1) (3->15,3) (3->7,4) (3->5,7) (3->4,10) (4->17,1) (4->13,8) (4->6,5) (5->6,10) (5->12,8) (5->15,2) (6->7,10) (6->18,10) (7->12,3) (9->13,4) (14->18,1) (15->17,5) (15->18,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (2->5,9) (3->5,8) (5->6,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->13,6) (0->16,10) (0->3,5) (0->11,6) (1->9,2) (1->16,3) (1->6,10) (2->6,9) (2->15,8) (2->9,6) (2->14,3) (3->15,10) (3->10,8) (3->18,6) (4->17,5) (4->11,8) (4->15,10) (4->10,10) (4->9,6) (4->5,5) (5->12,10) (6->16,3) (6->7,10) (7->15,2) (7->10,8) (7->11,3) (8->10,4) (8->11,4) (8->9,6) (9->10,3) (9->11,10) (9->15,4) (9->18,5) (9->12,5) (10->15,6) (10->12,5) (10->13,9) (11->17,6) (11->14,1) (12->13,4) (12->16,2) (12->14,1) (13->15,6) (16->18,8) (17->18,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (1->5,8) (1->2,9) (2->6,8) (2->4,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,10) (0->2,3) (2->4,7) (2->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (1->4,1) (3->10,9) (4->7,1) (5->6,4) (6->11,8) (6->8,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->1,3) (0->5,2) (1->2,6) (2->3,10) (3->4,7) (3->5,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->9,3) (0->3,4) (0->11,8) (0->5,10) (1->3,1) (1->9,10) (1->8,3) (2->4,2) (2->11,6) (2->5,9) (3->11,3) (3->7,3) (3->10,5) (3->4,3) (4->11,8) (4->8,4) (4->9,6) (5->7,2) (7->8,9) (9->10,4) (9->11,2) (10->11,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->1,5) (1->10,4) (1->5,10) (1->9,5) (2->6,1) (3->9,10) (4->9,8) (4->10,8) (4->7,1) (6->10,3) (6->8,6) (7->11,3) (9->11,6) (10->11,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 16, and the edges are: (0->15,5) (0->3,6) (0->13,1) (0->14,8) (0->5,6) (0->1,8) (1->7,1) (1->4,3) (1->8,7) (1->6,6) (1->11,6) (1->10,2) (1->13,4) (1->14,1) (2->6,4) (2->10,4) (2->13,1) (2->7,9) (3->9,1) (3->16,1) (3->7,2) (3->13,1) (3->8,9) (3->10,1) (4->12,4) (4->6,2) (4->11,8) (4->15,8) (4->9,1) (5->10,3) (5->16,4) (5->14,3) (5->9,5) (6->9,8) (6->7,5) (6->16,8) (6->14,10) (7->11,1) (7->13,8) (7->12,10) (7->9,4) (7->8,10) (8->9,1) (8->15,4) (9->16,8) (9->11,5) (11->13,5) (11->12,1) (11->16,9) (13->15,4) (13->16,4) (14->16,1) (15->16,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->3,7) (3->5,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->3,2) (0->4,2) (1->3,2) (1->6,2) (2->3,3) (3->4,8) (4->7,6) (4->5,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->5,3) (0->1,10) (1->2,10) (1->5,9) (1->3,7) (2->3,5) (3->6,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->4,2) (0->7,5) (2->3,2) (2->8,5) (3->6,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 18, and the edges are: (0->6,1) (0->3,2) (0->12,9) (0->14,7) (1->9,5) (1->14,8) (1->8,8) (1->11,4) (1->16,8) (1->2,6) (1->10,3) (2->13,4) (2->8,6) (2->5,8) (2->16,10) (2->14,2) (2->18,3) (3->18,7) (3->4,10) (3->7,3) (3->15,2) (4->14,7) (4->5,10) (4->6,10) (4->12,4) (4->8,3) (4->16,5) (4->11,4) (4->17,2) (5->10,4) (5->15,6) (5->9,8) (5->8,5) (5->18,6) (6->14,8) (7->11,4) (7->18,6) (7->15,4) (8->16,3) (8->12,7) (8->11,5) (8->14,7) (8->10,9) (9->15,1) (9->11,4) (9->16,10) (9->17,5) (9->18,4) (9->12,9) (10->12,9) (10->15,8) (11->18,6) (11->14,1) (12->17,9) (12->14,4) (13->17,9) (13->16,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,10) (2->3,4) (3->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->12,9) (0->11,10) (1->6,6) (1->8,1) (1->9,10) (2->5,1) (2->11,5) (2->7,7) (2->10,2) (3->5,5) (3->6,5) (3->4,7) (3->11,5) (3->7,2) (4->10,1) (4->12,6) (4->5,2) (5->7,8) (5->11,9) (5->9,8) (7->11,5) (8->12,3) (9->10,9) (11->12,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (1->4,6) (2->3,6) (2->6,7) (3->6,7) (3->4,9) (6->7,5) (6->8,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->2,2) (1->9,8) (1->8,4) (1->6,10) (3->8,9) (4->6,2) (5->6,5) (6->9,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->6,5) (1->2,5) (2->3,7) (3->6,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->14,8) (0->13,2) (0->9,6) (0->18,1) (0->12,10) (0->15,2) (0->10,3) (0->19,10) (1->5,10) (1->18,10) (1->12,3) (2->15,8) (2->4,5) (2->14,2) (3->12,3) (3->17,2) (3->4,7) (4->16,8) (4->12,9) (5->12,1) (5->14,2) (5->15,7) (6->19,3) (6->17,1) (6->11,3) (6->8,10) (7->15,8) (7->9,4) (7->18,4) (7->10,1) (8->18,8) (8->19,8) (8->17,2) (8->15,9) (8->9,8) (9->19,10) (9->17,7) (9->10,10) (10->19,4) (12->19,2) (12->13,5) (13->15,8) (13->17,1) (14->17,9) (14->18,3) (15->19,5) (16->19,4) (16->18,2) (17->19,4) (18->19,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->2,2) (2->3,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 12, and the edges are: (0->3,10) (0->11,3) (1->9,5) (2->12,4) (3->5,4) (5->7,10) (7->12,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->2,4) (1->5,7) (1->4,2) (2->5,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,7) (1->2,9) (2->4,2) (3->4,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->4,5) (1->4,5) (2->3,3) (2->7,5) (4->7,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (0->1,2) (1->4,6) (1->3,6) (1->2,3) (2->6,1) (3->6,2) (4->5,6) (5->6,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->2,10) (0->1,5) (2->3,4) (3->4,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 7, and the edges are: (0->1,1) (0->7,7) (0->2,6) (2->6,6) (2->4,5) (3->4,5) (5->6,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (0->1,3) (0->8,8) (1->2,9) (2->6,2) (2->7,5) (2->5,10) (3->8,5) (3->7,5) (4->7,3) (5->8,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 8, and the edges are: (1->8,2) (1->7,6) (4->5,5) (5->7,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 10, and the edges are: (0->1,6) (0->2,5) (1->10,2) (2->3,7) (3->4,8) (5->8,6) (6->9,10) (6->8,4) (8->10,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,9) (1->2,1) (2->4,4) (2->3,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->1,6) (0->9,6) (0->10,6) (0->11,3) (0->4,9) (0->13,3) (1->3,3) (1->6,10) (1->7,5) (1->12,3) (1->8,2) (2->5,10) (2->8,8) (3->10,8) (3->14,2) (3->12,2) (4->5,1) (4->14,5) (4->6,2) (4->8,7) (5->10,8) (5->14,5) (5->13,8) (6->10,9) (6->11,5) (6->12,8) (6->7,8) (6->13,4) (7->10,4) (7->8,2) (8->11,1) (8->10,6) (9->12,8) (9->14,9) (10->11,1) (10->12,2) (11->14,4) (11->13,1) (11->12,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 17, and the edges are: (1->15,9) (1->17,6) (2->11,6) (2->8,6) (2->3,7) (3->11,4) (4->11,10) (4->7,9) (4->8,10) (5->15,9) (6->9,8) (6->15,4) (6->12,2) (6->8,9) (8->9,6) (8->16,10) (9->17,10) (9->11,5) (9->10,7) (14->17,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,2) (0->2,9) (1->2,6) (2->3,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->4,2) (1->2,5) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->3,7) (0->2,3) (0->1,2) (2->4,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 3, and the edges are: (0->1,5) (1->2,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 4, and the edges are: (0->3,3) (0->2,7) (1->4,10) (2->4,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 14, and the edges are: (0->14,8) (0->10,4) (0->2,1) (0->12,8) (0->1,4) (1->6,6) (1->13,4) (1->2,6) (1->11,2) (1->3,3) (2->13,6) (2->10,3) (2->7,4) (3->11,9) (3->4,7) (3->6,7) (3->12,7) (4->13,2) (4->8,4) (4->14,3) (4->6,5) (4->11,3) (5->9,7) (5->14,7) (5->13,7) (6->7,9) (6->12,10) (6->14,8) (7->11,5) (8->12,8) (8->11,10) (9->11,1) (10->12,7) (10->14,6) (10->11,10) (10->13,5) (11->12,1) (12->13,3) (12->14,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->4,9) (0->8,6) (0->3,4) (1->6,7) (1->5,9) (1->8,1) (1->2,9) (2->11,8) (2->3,9) (2->9,5) (2->7,8) (3->4,9) (3->5,2) (3->8,8) (3->10,3) (4->10,1) (4->8,6) (4->7,8) (5->8,5) (5->11,2) (6->9,9) (7->9,4) (7->8,3) (7->10,2) (8->9,8) (9->10,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 11, and the edges are: (0->1,5) (1->4,5) (1->9,3) (1->6,3) (1->8,10) (2->9,6) (3->4,2) (3->11,3) (3->10,5) (4->10,9) (5->7,10) (6->7,4) (6->11,1) (7->9,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 5, and the edges are: (0->4,6) (0->5,1) (1->3,6) (2->4,4) (4->5,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 6, and the edges are: (1->3,2) (2->4,3) (2->6,6) (3->6,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 9, and the edges are: (0->7,3) (0->1,3) (0->8,6) (1->2,9) (2->7,4) (2->3,5) (2->9,8) (4->6,9) (5->6,2) (5->8,8) (6->9,9) (6->8,2) (8->9,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 19, and the edges are: (0->12,5) (0->9,8) (0->16,5) (0->1,5) (0->4,2) (0->11,2) (0->19,3) (0->5,3) (1->19,4) (1->2,10) (1->18,4) (1->16,7) (1->10,4) (1->15,6) (2->15,1) (2->8,7) (2->12,1) (2->13,9) (2->18,2) (3->15,10) (3->13,6) (3->12,9) (3->17,10) (4->14,1) (4->5,6) (4->13,3) (4->11,3) (4->7,2) (4->15,10) (4->18,10) (5->15,10) (5->7,9) (5->17,7) (5->19,7) (5->11,8) (6->18,8) (7->14,5) (7->19,5) (7->13,7) (7->16,2) (8->16,7) (8->19,6) (8->13,5) (8->14,4) (8->18,5) (10->19,1) (10->14,6) (10->17,1) (10->11,2) (11->13,8) (12->17,6) (13->15,10) (13->17,9) (14->16,1) (14->18,6) (15->16,2) (15->19,1) (17->19,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 26, and the edges are: (0->25,6) (0->5,3) (1->26,5) (1->9,6) (1->23,2) (2->13,6) (2->4,4) (2->21,6) (2->3,3) (2->8,8) (2->16,1) (2->10,4) (2->7,3) (3->9,7) (3->12,3) (3->13,5) (4->8,8) (5->19,6) (5->15,6) (5->17,4) (5->13,3) (6->14,7) (6->22,5) (6->12,6) (6->26,9) (7->14,9) (7->26,2) (7->13,6) (7->23,7) (7->10,6) (8->19,4) (8->13,4) (9->24,2) (9->13,8) (9->10,4) (10->18,7) (10->14,6) (11->22,2) (12->14,5) (12->26,10) (12->25,1) (12->21,10) (13->26,1) (13->19,4) (14->24,7) (14->22,3) (14->17,9) (16->20,1) (17->22,4) (17->26,3) (18->20,6) (18->19,1) (19->25,8) (21->23,7) (22->24,10) (23->26,6) (23->25,6) (25->26,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 35, and the edges are: (0->24,9) (0->35,2) (0->27,5) (0->7,3) (0->12,3) (1->32,8) (1->28,1) (1->11,6) (2->16,5) (2->21,1) (2->5,9) (3->12,7) (3->17,3) (3->31,6) (4->13,3) (4->8,6) (4->7,5) (4->26,2) (5->24,2) (5->20,7) (5->33,4) (5->14,7) (6->19,3) (6->23,3) (7->31,3) (7->20,8) (7->30,3) (7->22,2) (7->21,6) (7->27,10) (7->8,9) (8->14,1) (8->15,9) (8->32,7) (9->26,9) (9->21,10) (10->25,6) (10->19,2) (10->33,7) (10->32,4) (10->14,1) (10->12,8) (10->15,1) (11->21,9) (11->31,7) (11->27,3) (12->14,6) (13->29,8) (13->34,9) (13->23,7) (13->31,10) (14->19,8) (14->15,2) (14->33,1) (15->34,9) (15->21,4) (15->30,6) (16->31,6) (16->32,4) (17->18,2) (18->22,5) (18->35,1) (19->28,7) (19->29,1) (20->34,1) (21->23,5) (21->35,9) (21->30,4) (21->32,1) (23->31,6) (23->26,7) (25->31,10) (25->27,9) (26->35,8) (26->28,6) (26->29,6) (27->28,7) (28->34,1) (28->29,4) (32->33,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 30, and the edges are: (0->14,9) (0->6,7) (0->30,2) (0->3,6) (0->11,6) (0->8,1) (0->28,4) (1->4,3) (1->14,5) (1->10,10) (1->3,7) (2->10,8) (2->15,10) (3->11,6) (3->6,8) (3->7,7) (3->10,4) (3->20,3) (3->28,6) (3->27,3) (4->13,5) (4->23,6) (4->25,3) (4->27,7) (4->19,1) (5->25,10) (5->23,3) (5->29,1) (5->6,8) (6->24,7) (6->12,4) (6->17,9) (6->18,5) (6->11,6) (7->24,3) (7->12,3) (7->9,1) (7->17,6) (8->19,7) (8->30,3) (8->25,6) (8->24,7) (8->11,2) (9->25,1) (9->10,7) (9->27,9) (10->28,4) (10->17,10) (10->29,7) (10->30,2) (11->22,4) (11->24,4) (12->25,1) (13->19,3) (13->23,3) (14->16,6) (14->25,8) (14->15,7) (15->20,8) (15->27,7) (15->22,3) (16->21,9) (16->25,5) (16->27,3) (17->21,10) (18->24,4) (19->25,10) (19->24,3) (20->25,5) (20->22,10) (20->27,10) (21->26,1) (21->23,5) (22->26,9) (22->25,2) (23->24,6) (24->25,10) (24->29,6) (24->26,4) (25->26,2) (25->29,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 24, and the edges are: (0->13,4) (0->3,6) (0->19,2) (0->21,6) (0->24,5) (0->17,3) (1->8,8) (1->18,5) (1->4,1) (1->5,2) (1->6,2) (2->14,1) (2->18,6) (2->4,10) (3->4,3) (3->15,5) (3->20,3) (4->15,4) (4->13,1) (4->10,7) (4->21,9) (4->19,3) (4->17,8) (5->16,1) (6->14,10) (6->9,7) (7->12,4) (7->19,7) (7->24,9) (8->9,7) (8->12,8) (9->17,8) (9->14,3) (10->12,6) (10->14,4) (10->16,7) (11->14,6) (11->23,1) (12->20,2) (14->15,7) (15->20,9) (15->23,8) (15->24,2) (16->24,2) (16->19,9) (17->24,10) (18->24,8) (19->23,4) (19->21,7) (23->24,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 37, and the edges are: (0->14,1) (0->34,8) (0->8,2) (0->24,9) (0->32,10) (0->12,7) (0->30,2) (0->16,4) (0->20,7) (1->8,5) (1->4,2) (1->30,9) (1->28,4) (1->22,1) (2->12,5) (2->11,6) (2->23,8) (2->35,8) (2->32,2) (2->36,6) (2->14,6) (3->4,10) (3->18,6) (3->7,1) (3->28,6) (3->31,5) (3->35,2) (3->25,1) (3->15,6) (4->23,1) (4->36,5) (4->9,10) (4->29,6) (4->16,6) (4->8,10) (4->32,5) (5->8,10) (5->9,4) (5->37,2) (5->26,2) (5->36,6) (6->30,10) (6->21,7) (6->23,6) (6->26,7) (6->33,3) (7->20,7) (7->35,8) (7->15,6) (7->31,5) (7->27,6) (7->23,10) (8->33,3) (9->11,5) (9->29,8) (9->14,6) (9->21,1) (9->30,9) (9->10,4) (10->25,10) (10->18,1) (11->30,3) (11->20,10) (11->15,3) (11->29,9) (11->26,1) (12->19,7) (12->34,6) (12->14,4) (12->26,9) (12->25,5) (12->37,2) (12->18,4) (12->30,7) (12->20,1) (13->14,8) (13->25,4) (13->23,7) (13->30,9) (14->24,8) (14->20,10) (14->16,10) (14->19,2) (15->37,9) (15->22,4) (15->29,9) (15->23,10) (15->30,4) (15->33,8) (16->17,8) (16->34,10) (16->36,4) (17->29,8) (17->36,6) (17->24,5) (18->33,6) (18->31,9) (18->22,7) (19->27,6) (19->29,4) (19->22,2) (19->24,6) (20->28,2) (20->24,5) (20->32,3) (20->36,1) (21->32,10) (21->31,9) (21->30,9) (21->35,7) (21->25,5) (22->28,6) (22->37,7) (22->35,7) (22->26,8) (23->32,3) (23->36,4) (23->25,8) (23->31,5) (23->27,7) (24->35,7) (24->36,4) (24->26,6) (24->33,8) (25->30,6) (26->37,6) (26->30,4) (26->32,5) (26->31,8) (27->36,6) (27->35,1) (28->32,4) (28->33,4) (29->31,1) (29->36,9) (30->35,5) (31->36,2) (31->33,8) (32->35,5) (32->33,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 24, and the edges are: (0->11,9) (0->18,3) (0->2,3) (0->19,9) (1->13,5) (1->12,3) (2->7,4) (2->4,6) (2->5,1) (2->24,4) (2->19,5) (2->3,8) (3->17,9) (3->12,7) (3->14,5) (4->22,6) (4->16,1) (4->12,7) (5->13,10) (5->8,3) (6->18,6) (6->15,6) (6->23,7) (7->17,1) (7->9,3) (8->23,7) (8->14,6) (8->24,4) (9->12,3) (10->17,6) (11->14,4) (11->17,10) (11->21,9) (13->17,6) (14->19,3) (14->17,5) (14->15,5) (15->18,1) (16->17,6) (17->23,7) (17->20,2) (17->18,4) (18->19,3) (19->20,3) (19->23,9) (20->23,1) (21->22,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 26, and the edges are: (0->25,6) (0->8,2) (0->1,5) (0->14,4) (0->23,8) (1->5,5) (1->8,10) (1->26,10) (1->12,5) (1->10,8) (1->13,9) (2->13,7) (2->25,5) (2->5,2) (3->18,5) (3->23,4) (3->4,1) (3->12,4) (3->17,1) (3->21,9) (3->11,6) (3->8,4) (4->14,4) (4->6,5) (4->18,8) (5->9,1) (5->21,8) (5->14,1) (5->17,6) (6->18,4) (6->16,5) (6->15,3) (6->10,4) (7->26,1) (7->19,4) (7->24,5) (8->12,3) (8->25,6) (8->26,4) (8->16,3) (9->13,2) (10->20,5) (10->24,5) (11->13,10) (11->26,10) (12->22,3) (13->18,5) (13->14,8) (13->26,10) (13->16,2) (14->16,5) (14->22,8) (14->23,1) (15->21,10) (15->16,7) (15->18,8) (16->20,2) (18->24,7) (20->25,9) (21->24,8) (21->26,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 32, and the edges are: (0->18,3) (0->9,8) (0->23,6) (1->11,9) (1->13,6) (1->24,4) (1->8,3) (2->7,2) (2->16,2) (2->11,3) (2->3,6) (2->19,4) (3->6,8) (3->12,2) (3->25,9) (3->19,7) (3->9,9) (3->24,5) (4->9,5) (4->27,5) (4->7,5) (4->21,5) (4->10,10) (4->29,2) (4->17,3) (5->10,1) (5->20,4) (5->30,8) (6->25,5) (6->28,6) (6->15,4) (6->14,2) (6->12,8) (7->24,5) (7->8,6) (7->30,5) (7->27,3) (7->18,8) (7->10,3) (8->12,6) (8->24,2) (8->29,3) (9->11,3) (9->13,6) (9->23,5) (9->32,9) (9->25,10) (10->31,9) (10->12,7) (11->27,1) (11->24,7) (11->28,2) (12->19,9) (12->29,10) (12->30,7) (13->28,2) (13->17,3) (13->25,5) (14->23,5) (15->31,5) (15->32,1) (16->20,7) (16->30,1) (16->28,3) (16->21,3) (17->25,3) (17->21,1) (18->19,9) (18->23,3) (19->31,10) (19->23,4) (20->28,6) (21->27,2) (24->30,9) (25->30,7) (25->26,3) (26->30,10) (28->29,9) (28->30,2) (29->32,8) (30->32,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 25, and the edges are: (0->21,5) (0->1,3) (1->18,7) (1->24,3) (1->11,3) (2->24,4) (2->22,8) (2->5,3) (3->15,6) (3->5,1) (3->12,8) (4->16,5) (4->24,7) (4->12,3) (4->7,10) (4->19,8) (5->23,6) (6->17,7) (6->13,2) (7->25,3) (7->20,7) (9->22,8) (9->10,10) (9->13,8) (9->18,9) (11->24,9) (11->19,6) (12->23,6) (12->21,7) (12->22,4) (13->24,10) (13->21,10) (13->14,2) (13->25,6) (14->18,4) (16->20,5) (20->22,5) (23->24,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 35, and the edges are: (0->15,6) (0->26,6) (0->9,8) (0->7,7) (1->21,5) (1->34,5) (1->28,5) (2->11,7) (2->19,10) (2->24,3) (2->14,1) (3->7,3) (3->26,7) (3->31,1) (3->4,5) (3->12,8) (3->25,2) (4->15,10) (4->7,9) (5->6,3) (5->18,8) (6->34,7) (6->12,6) (6->22,10) (7->30,6) (7->29,7) (7->25,4) (8->24,4) (8->23,9) (8->16,7) (8->21,10) (9->16,6) (9->29,10) (9->30,2) (10->18,4) (10->11,8) (10->22,7) (11->32,1) (11->28,5) (11->18,9) (11->23,3) (12->33,8) (12->27,8) (12->17,1) (12->28,7) (13->29,1) (13->32,5) (13->28,1) (13->14,4) (14->32,9) (15->34,7) (15->20,2) (15->21,7) (15->23,9) (15->26,2) (15->18,5) (16->28,10) (16->29,3) (16->31,4) (16->27,3) (17->27,2) (17->20,5) (18->29,5) (18->25,9) (18->34,5) (19->21,10) (20->30,7) (20->28,7) (23->25,6) (23->31,3) (24->32,6) (24->27,4) (24->26,1) (25->34,1) (25->32,5) (26->28,10) (29->34,6) (31->34,6) (32->33,1) (32->34,3) (33->35,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 20, and the edges are: (0->17,5) (1->10,10) (2->3,7) (3->19,1) (3->17,9) (3->9,4) (3->6,2) (3->5,2) (4->16,2) (5->10,2) (5->18,5) (6->10,6) (6->8,5) (7->8,10) (8->17,10) (8->13,6) (8->19,7) (9->20,9) (9->19,6) (10->16,8) (11->12,2) (13->20,6) (15->20,6) (16->18,10) (17->19,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 37, and the edges are: (0->21,9) (0->22,8) (0->36,2) (0->7,9) (0->5,8) (0->12,9) (0->31,4) (0->34,8) (0->10,7) (1->28,1) (1->10,3) (1->16,1) (1->11,9) (1->17,6) (1->6,5) (2->18,9) (2->24,3) (2->3,9) (2->20,7) (2->13,8) (3->30,7) (3->4,7) (3->5,1) (3->24,9) (4->37,1) (4->18,10) (4->33,5) (4->11,7) (4->9,9) (5->8,9) (5->31,6) (5->27,7) (5->14,5) (6->34,2) (6->21,4) (6->20,6) (6->9,8) (6->7,3) (7->15,2) (7->22,3) (8->15,5) (8->9,4) (9->12,6) (9->21,8) (9->14,8) (9->32,7) (10->32,3) (10->12,7) (10->35,1) (10->23,1) (10->15,9) (10->11,8) (10->24,6) (11->27,8) (11->35,6) (11->13,6) (11->16,5) (11->15,2) (12->20,9) (12->19,8) (12->26,1) (13->14,4) (13->23,10) (13->25,3) (13->29,2) (14->34,10) (14->20,2) (14->18,8) (14->16,1) (15->22,3) (16->18,9) (17->33,6) (17->37,1) (17->25,9) (17->23,8) (18->23,10) (18->32,8) (19->36,1) (19->21,6) (19->33,2) (19->25,1) (20->22,10) (20->35,1) (20->29,7) (22->29,9) (23->34,3) (23->28,6) (24->34,1) (25->29,2) (26->30,8) (26->37,7) (27->36,10) (27->32,10) (28->36,2) (31->36,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 33, and the edges are: (0->8,4) (0->31,9) (0->22,1) (0->1,8) (0->15,10) (0->27,8) (1->15,2) (1->23,2) (1->26,10) (1->27,5) (1->4,7) (1->13,7) (1->5,9) (2->9,6) (2->16,10) (2->20,4) (2->3,6) (3->8,8) (3->5,8) (3->30,9) (3->11,2) (3->14,4) (3->33,7) (3->12,3) (4->10,9) (4->8,4) (4->23,2) (4->5,2) (4->19,6) (5->20,8) (5->23,5) (5->22,9) (5->10,9) (5->25,2) (5->12,1) (5->17,2) (5->7,1) (5->18,2) (5->14,4) (6->33,8) (6->8,9) (7->31,6) (7->29,6) (7->8,3) (7->18,4) (7->21,7) (8->16,1) (8->21,9) (8->31,2) (8->12,7) (8->15,8) (9->24,7) (9->29,6) (9->32,5) (9->14,3) (9->17,8) (9->25,2) (10->18,2) (10->22,3) (10->33,7) (11->27,9) (11->28,8) (11->31,3) (11->13,2) (11->16,1) (11->33,1) (11->32,3) (11->21,3) (11->26,7) (12->26,4) (12->24,7) (12->22,2) (12->13,10) (13->29,2) (13->15,6) (13->28,9) (13->32,3) (14->31,3) (14->25,4) (14->27,7) (14->33,9) (15->20,1) (15->24,9) (15->18,1) (15->26,8) (15->25,6) (16->28,2) (17->23,2) (17->20,8) (19->29,2) (20->31,5) (20->32,2) (21->22,4) (21->23,1) (21->26,3) (23->26,8) (23->24,10) (24->27,7) (24->33,1) (28->29,1) (29->30,7) (30->33,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 30, and the edges are: (0->30,5) (0->7,8) (0->24,10) (1->14,8) (1->3,9) (2->11,5) (2->28,6) (2->14,6) (2->15,1) (2->10,7) (3->22,3) (3->19,3) (3->29,8) (3->10,5) (3->24,8) (4->13,2) (4->15,1) (4->18,2) (4->21,7) (5->22,3) (5->19,4) (5->26,4) (5->23,6) (5->8,5) (5->24,5) (6->9,2) (6->29,8) (7->8,5) (7->15,1) (7->26,5) (8->14,8) (8->13,6) (8->21,6) (8->17,10) (8->11,5) (9->17,7) (9->28,5) (9->10,1) (9->23,8) (9->18,2) (10->24,1) (10->30,1) (10->16,3) (11->15,7) (11->27,10) (12->18,8) (12->24,1) (12->25,6) (14->28,4) (14->26,10) (15->19,7) (15->20,6) (15->16,10) (16->30,3) (16->27,7) (16->21,6) (16->22,6) (16->26,2) (16->18,3) (17->27,2) (17->24,9) (17->23,6) (18->19,1) (18->24,1) (20->22,1) (22->29,6) (22->26,2) (23->28,1) (25->27,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 23, and the edges are: (0->12,9) (0->4,3) (0->19,8) (2->7,2) (2->15,1) (2->11,6) (3->11,9) (3->15,10) (3->12,6) (4->5,6) (4->15,3) (4->21,3) (4->8,4) (5->12,3) (5->15,2) (6->16,1) (6->7,6) (6->21,3) (7->23,8) (7->22,10) (7->9,8) (8->21,5) (9->11,1) (9->17,8) (10->22,4) (10->14,6) (11->14,9) (11->20,10) (11->21,5) (12->18,1) (12->17,6) (13->23,8) (14->18,4) (14->20,10) (14->19,10) (15->22,8) (17->22,2) (18->19,8) (19->23,4) (19->21,9) (21->22,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 51, and the edges are: (0->21,1) (0->31,6) (0->30,4) (0->44,7) (0->47,6) (1->22,9) (1->3,7) (1->5,3) (1->39,4) (1->21,4) (1->14,3) (2->39,4) (2->17,2) (2->16,4) (3->26,4) (3->16,10) (4->8,1) (4->29,7) (4->10,7) (4->48,8) (5->20,7) (5->18,2) (5->16,7) (5->7,7) (5->48,10) (5->19,5) (5->26,8) (5->17,8) (5->36,6) (6->40,1) (6->23,5) (6->27,2) (6->37,2) (7->43,9) (7->51,2) (7->26,1) (7->31,1) (8->15,4) (8->26,9) (8->32,1) (8->29,10) (8->11,5) (9->20,6) (9->14,7) (10->15,10) (10->27,4) (10->51,9) (10->32,1) (10->40,5) (10->38,2) (11->39,1) (11->31,4) (11->50,10) (11->51,9) (12->21,7) (12->31,6) (12->37,6) (12->32,3) (12->22,4) (12->34,1) (13->38,3) (13->14,1) (13->28,6) (13->27,7) (13->26,9) (13->35,10) (13->22,6) (14->44,9) (14->15,3) (14->27,1) (14->28,7) (14->48,5) (14->31,1) (15->18,5) (15->30,1) (16->46,4) (16->21,6) (16->31,9) (16->26,9) (16->37,5) (17->18,2) (17->26,9) (18->41,5) (18->40,1) (19->51,4) (19->23,5) (19->31,3) (19->21,8) (19->39,10) (20->38,5) (20->43,6) (21->30,1) (21->24,4) (21->25,10) (22->27,3) (22->42,8) (22->34,3) (22->41,2) (23->42,5) (23->51,3) (23->35,4) (23->33,9) (24->50,8) (25->38,4) (25->36,9) (25->44,10) (26->27,1) (26->35,6) (26->42,8) (27->42,9) (27->43,1) (28->41,4) (29->48,9) (29->32,4) (30->44,1) (32->38,8) (33->51,9) (33->38,3) (34->36,3) (34->46,9) (35->39,1) (35->41,6) (35->47,10) (36->37,4) (36->39,9) (36->50,1) (37->43,4) (38->41,5) (40->50,3) (41->45,3) (41->42,1) (41->50,1) (42->43,9) (44->48,3) (46->49,6) (46->51,7) (49->50,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 55, and the edges are: (0->43,4) (0->37,3) (0->53,4) (0->34,3) (1->33,7) (1->53,5) (1->19,6) (1->35,2) (1->3,1) (1->18,9) (2->44,3) (2->15,1) (2->24,3) (2->55,4) (3->48,5) (3->29,4) (3->30,5) (3->31,8) (3->33,3) (3->11,6) (3->17,10) (4->27,7) (4->12,2) (4->41,10) (4->11,8) (4->47,6) (4->48,6) (5->53,5) (5->30,9) (5->42,8) (5->17,2) (6->14,7) (6->40,3) (6->11,8) (6->8,7) (7->38,4) (7->15,1) (8->55,10) (8->19,8) (9->52,4) (9->31,1) (9->37,1) (10->51,7) (10->55,7) (11->23,7) (11->19,3) (11->15,2) (11->41,5) (12->18,1) (12->20,10) (12->32,6) (12->15,4) (12->51,1) (12->31,1) (12->50,5) (13->29,9) (13->52,3) (13->36,3) (13->45,9) (13->40,1) (14->34,6) (14->43,4) (14->33,2) (14->21,4) (15->50,1) (15->40,9) (15->21,8) (16->46,7) (16->51,4) (16->23,3) (17->34,4) (17->44,9) (17->33,1) (17->21,1) (18->27,3) (18->23,6) (18->31,10) (18->42,8) (18->39,3) (18->34,9) (18->37,8) (18->46,7) (19->25,8) (19->44,7) (19->36,7) (19->28,2) (19->32,5) (20->49,10) (20->23,2) (20->36,3) (21->44,10) (21->27,8) (21->24,3) (21->53,5) (21->29,3) (21->34,10) (21->43,9) (22->40,8) (22->29,7) (22->41,9) (22->28,5) (23->29,7) (23->51,2) (23->55,3) (23->40,4) (23->37,5) (23->27,10) (24->38,2) (25->50,4) (25->39,4) (25->53,2) (25->36,5) (26->44,9) (26->46,4) (27->53,7) (27->43,7) (27->38,7) (27->30,3) (28->31,7) (28->45,5) (28->52,6) (28->46,5) (29->41,6) (29->42,8) (29->35,5) (29->54,9) (29->52,10) (29->33,6) (30->38,1) (30->47,5) (30->46,1) (30->39,1) (31->39,2) (31->32,8) (31->34,10) (32->53,8) (32->34,7) (33->42,7) (33->36,9) (33->34,8) (34->45,4) (34->54,4) (34->36,1) (34->47,3) (34->44,9) (35->40,10) (36->53,3) (36->55,9) (36->40,1) (37->49,8) (38->39,2) (38->53,9) (39->45,5) (39->42,7) (39->44,8) (40->43,8) (40->47,10) (41->53,5) (41->55,2) (42->50,4) (42->45,8) (43->49,6) (43->46,7) (43->55,2) (43->48,10) (44->55,6) (45->54,8) (46->48,3) (47->49,3) (47->51,2) (48->55,10) (49->53,6) (52->53,9) (54->55,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 43, and the edges are: (0->36,4) (1->3,5) (1->33,4) (1->12,5) (1->38,8) (2->21,8) (2->42,5) (3->24,2) (3->11,3) (3->15,6) (3->21,6) (3->13,5) (4->19,7) (4->16,10) (4->38,7) (5->18,7) (5->26,6) (7->26,6) (7->38,8) (8->35,5) (9->15,3) (10->38,3) (10->11,1) (11->15,7) (11->25,10) (11->17,4) (11->14,9) (11->21,6) (12->16,8) (12->38,1) (12->20,9) (12->41,6) (13->15,4) (13->19,5) (14->24,1) (15->21,3) (15->20,1) (16->40,1) (16->32,6) (17->36,6) (17->37,3) (17->38,5) (18->37,8) (18->39,8) (18->41,5) (19->32,5) (20->30,10) (20->23,3) (21->23,7) (21->40,5) (21->41,10) (21->37,2) (21->30,6) (22->34,8) (23->34,6) (23->37,7) (23->33,9) (24->30,2) (25->31,1) (27->40,4) (28->36,7) (30->37,7) (31->38,1) (32->38,6) (32->42,5) (34->43,10) (38->39,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 48, and the edges are: (0->36,2) (1->40,4) (1->4,2) (1->39,6) (1->23,9) (2->31,1) (2->22,4) (2->29,8) (2->43,2) (2->33,7) (2->15,8) (2->23,7) (2->28,7) (2->26,1) (3->16,8) (3->13,2) (3->40,6) (3->25,6) (3->17,1) (4->24,10) (4->28,7) (4->35,1) (4->43,8) (4->23,2) (4->14,8) (5->42,7) (5->41,4) (5->13,5) (5->23,9) (5->28,2) (5->48,8) (5->38,8) (5->27,4) (6->35,10) (6->28,8) (6->48,9) (7->15,7) (7->38,3) (8->33,10) (8->29,2) (8->19,5) (8->43,2) (9->22,5) (9->14,8) (10->48,1) (10->25,6) (10->13,7) (10->47,1) (10->41,4) (10->26,8) (10->15,7) (10->28,1) (11->38,10) (11->12,5) (11->32,4) (11->30,4) (11->33,7) (11->45,6) (12->40,1) (12->37,4) (12->17,6) (13->32,3) (13->46,9) (13->20,9) (13->35,5) (13->14,6) (14->26,1) (14->40,10) (14->37,4) (14->38,6) (15->47,10) (15->38,3) (15->19,9) (16->43,10) (16->31,3) (17->21,8) (18->25,10) (18->32,5) (19->35,4) (19->33,3) (19->37,2) (19->21,1) (19->32,10) (19->40,9) (19->39,10) (20->31,2) (21->46,6) (21->45,7) (21->42,7) (21->35,5) (22->42,1) (22->45,9) (23->35,2) (23->43,5) (23->44,10) (23->32,2) (24->34,5) (24->40,1) (25->41,1) (25->38,6) (25->40,7) (25->36,10) (26->43,8) (27->29,5) (27->44,5) (28->37,10) (28->31,3) (28->29,10) (29->39,7) (29->48,1) (29->36,4) (31->39,8) (31->42,8) (31->47,2) (31->46,2) (32->46,7) (32->39,9) (33->40,5) (33->35,10) (33->48,9) (33->43,9) (34->46,1) (35->41,3) (36->46,8) (39->42,4) (41->44,3) (45->48,10) (46->47,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 77, and the edges are: (0->44,10) (1->61,7) (1->24,9) (1->39,4) (1->33,10) (2->45,7) (2->18,9) (2->3,3) (2->32,7) (2->68,2) (3->8,6) (3->67,1) (4->8,9) (4->26,9) (4->22,2) (4->58,8) (5->21,5) (5->43,2) (5->71,2) (5->77,6) (5->15,4) (5->58,5) (6->10,2) (6->76,1) (6->30,6) (6->13,10) (6->20,4) (6->55,6) (7->21,2) (7->74,10) (7->67,8) (7->64,3) (7->58,4) (7->22,3) (7->73,6) (7->30,4) (8->64,3) (8->71,9) (9->65,8) (9->12,6) (9->28,2) (10->55,8) (10->51,1) (10->53,2) (11->30,10) (11->73,10) (11->41,8) (11->66,2) (11->75,8) (12->29,4) (12->45,4) (13->42,2) (13->15,1) (13->74,4) (13->54,2) (13->71,9) (13->20,6) (13->39,3) (13->40,8) (13->27,10) (14->75,9) (14->71,10) (14->35,7) (14->33,9) (14->31,10) (14->72,2) (14->23,7) (14->44,5) (15->30,9) (15->21,1) (15->25,9) (15->61,2) (15->51,5) (16->54,2) (16->36,8) (16->18,5) (16->21,8) (16->46,4) (16->68,2) (16->17,5) (17->67,5) (17->55,1) (17->25,9) (18->34,2) (18->65,6) (18->75,1) (18->50,10) (18->70,5) (18->58,8) (18->41,10) (19->70,7) (19->52,9) (19->49,10) (19->39,10) (19->23,10) (20->75,10) (20->56,2) (21->30,4) (22->38,9) (22->62,1) (22->73,5) (22->56,2) (23->31,6) (23->30,7) (23->55,1) (23->29,8) (23->28,2) (23->26,5) (24->72,2) (24->55,8) (24->34,1) (25->33,4) (25->46,3) (25->56,4) (25->70,3) (25->31,7) (26->62,3) (26->76,6) (26->55,4) (26->33,7) (27->55,10) (27->41,7) (27->50,4) (28->67,9) (28->65,6) (28->53,1) (29->41,5) (29->59,5) (29->36,9) (29->34,8) (30->48,2) (30->62,9) (31->36,3) (31->66,7) (31->59,10) (32->51,2) (32->40,5) (32->50,1) (33->56,3) (33->58,3) (34->73,7) (35->59,5) (35->60,6) (36->58,6) (36->63,8) (36->68,10) (37->59,8) (37->66,4) (38->69,2) (38->68,5) (39->60,9) (40->70,3) (40->69,1) (40->52,10) (41->44,9) (42->53,1) (42->55,4) (42->50,7) (43->61,2) (43->63,10) (43->62,3) (43->58,4) (43->52,10) (45->54,6) (46->49,9) (46->72,6) (47->58,2) (47->51,10) (47->49,9) (47->70,3) (47->50,5) (48->60,5) (48->75,1) (49->68,5) (49->69,5) (52->54,7) (53->54,6) (54->68,4) (54->71,10) (55->71,8) (55->59,8) (56->71,2) (56->57,4) (57->69,6) (57->62,6) (58->75,5) (59->75,6) (60->68,9) (63->73,9) (65->72,7) (66->74,8) (68->74,7) (71->76,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 77, and the edges are: (0->31,4) (0->55,6) (0->40,5) (0->60,5) (1->37,4) (1->52,8) (1->38,8) (1->15,3) (1->10,8) (1->44,6) (2->50,3) (2->39,8) (2->44,8) (3->68,9) (3->50,5) (3->5,4) (3->32,10) (3->41,7) (3->12,9) (3->44,6) (4->17,8) (4->33,3) (4->59,10) (4->21,7) (4->75,2) (5->6,9) (5->73,4) (6->16,4) (7->21,4) (7->18,5) (7->68,10) (8->20,3) (8->33,6) (8->75,7) (8->27,7) (8->60,4) (8->64,1) (9->13,5) (9->38,2) (10->52,5) (10->18,4) (10->15,7) (10->19,10) (11->62,4) (11->48,3) (11->23,1) (12->75,7) (12->24,4) (13->74,6) (13->40,6) (13->29,2) (14->44,1) (14->57,2) (16->56,5) (17->62,6) (17->34,9) (18->75,9) (18->52,6) (18->72,9) (18->48,1) (19->55,5) (19->52,1) (19->37,1) (19->46,4) (19->27,7) (19->30,10) (19->49,5) (19->51,3) (20->48,2) (20->71,1) (21->61,3) (22->71,8) (22->30,2) (22->66,7) (22->69,3) (23->26,5) (23->66,4) (24->32,4) (24->28,6) (25->58,6) (26->37,9) (26->54,3) (26->39,10) (27->28,5) (27->50,7) (27->65,10) (27->32,1) (27->29,2) (27->43,6) (28->60,6) (29->32,2) (29->46,10) (29->41,9) (30->66,4) (31->52,10) (32->41,1) (32->57,3) (33->47,2) (33->37,8) (34->51,2) (34->50,2) (35->45,3) (36->51,4) (36->54,8) (37->38,1) (37->75,1) (37->69,9) (37->39,3) (38->44,1) (39->60,7) (41->55,6) (41->65,6) (41->58,7) (42->61,8) (42->53,3) (43->74,4) (43->66,5) (44->66,3) (45->64,9) (45->52,3) (46->74,7) (46->56,3) (47->72,2) (47->59,2) (49->64,1) (49->70,3) (49->65,4) (49->66,4) (50->55,1) (51->62,7) (51->72,5) (52->75,6) (52->72,7) (53->58,7) (53->69,6) (54->72,7) (55->61,7) (55->66,8) (56->60,6) (57->68,10) (59->65,8) (59->69,8) (61->65,9) (62->73,5) (63->64,3) (64->66,9) (65->66,1) (66->73,5) (67->74,7) (69->76,10) (72->74,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 63, and the edges are: (0->44,8) (0->1,10) (1->55,10) (1->25,5) (1->39,2) (1->45,6) (1->33,7) (2->21,3) (2->51,7) (2->31,5) (3->51,6) (3->43,5) (3->42,8) (4->22,2) (4->50,9) (5->39,3) (5->42,8) (5->52,5) (5->33,8) (6->60,9) (6->32,10) (6->43,10) (6->56,9) (6->50,4) (7->43,7) (7->39,9) (9->61,10) (9->12,1) (9->40,1) (10->53,2) (10->56,7) (10->39,9) (10->46,9) (11->61,5) (11->20,1) (11->40,8) (11->14,6) (12->40,10) (12->55,9) (12->15,5) (13->45,1) (13->46,4) (13->24,3) (13->57,3) (13->52,10) (14->22,9) (14->44,5) (14->54,5) (15->30,10) (15->56,1) (15->23,10) (15->35,8) (15->49,10) (16->49,5) (16->60,10) (16->58,9) (17->23,9) (17->30,2) (18->42,5) (18->28,6) (19->25,6) (19->50,7) (19->47,9) (19->26,2) (20->37,9) (20->33,10) (20->61,7) (20->54,9) (21->55,8) (21->45,3) (21->46,10) (22->60,3) (22->39,10) (22->51,9) (22->30,10) (23->51,7) (23->56,4) (23->24,10) (23->43,9) (24->32,3) (24->51,3) (25->42,9) (25->60,1) (25->40,9) (26->38,7) (26->41,4) (26->35,4) (27->57,9) (27->34,1) (29->34,6) (29->60,8) (29->61,10) (29->52,4) (30->46,8) (30->45,6) (30->38,9) (31->50,3) (31->49,8) (31->42,10) (32->63,8) (32->44,2) (33->41,7) (34->46,1) (35->63,3) (36->39,10) (37->46,5) (37->57,1) (38->40,5) (38->48,4) (38->55,7) (39->52,2) (39->46,6) (39->61,9) (39->51,10) (40->55,8) (41->43,2) (42->58,2) (42->63,5) (42->45,3) (43->63,7) (43->54,6) (44->62,1) (45->63,5) (45->56,4) (45->51,6) (49->61,5) (52->57,7) (55->62,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 67, and the edges are: (0->35,10) (0->50,7) (0->18,5) (1->65,6) (1->20,6) (2->32,4) (2->25,2) (2->66,6) (2->44,2) (2->30,1) (2->52,3) (2->54,6) (3->18,1) (3->24,8) (3->62,7) (3->44,6) (4->49,2) (4->51,10) (4->34,1) (4->42,8) (5->57,3) (5->14,6) (5->48,7) (6->46,6) (6->35,3) (7->13,9) (8->11,5) (8->24,10) (9->48,8) (9->52,7) (9->33,8) (9->20,4) (9->34,6) (10->26,9) (10->15,4) (10->32,7) (10->30,1) (10->56,8) (11->37,10) (11->57,7) (11->61,2) (11->20,4) (11->51,10) (11->65,9) (13->33,8) (13->35,10) (13->14,9) (14->47,2) (15->27,4) (16->32,2) (16->39,9) (18->19,7) (18->67,7) (18->26,3) (18->59,5) (18->46,2) (18->60,5) (19->22,5) (21->63,9) (21->38,6) (21->64,1) (21->55,3) (21->53,7) (21->40,3) (22->40,10) (22->32,3) (23->29,1) (23->60,2) (24->46,5) (24->27,4) (25->47,6) (26->65,10) (28->29,8) (28->56,4) (29->33,6) (29->45,3) (29->32,7) (30->61,6) (31->55,10) (31->51,7) (31->67,10) (31->49,8) (32->45,4) (32->42,4) (33->42,1) (33->62,5) (34->42,1) (36->66,5) (36->55,6) (36->39,8) (36->50,1) (36->59,6) (37->65,9) (37->44,7) (38->43,10) (39->47,7) (39->41,6) (39->62,8) (41->45,7) (43->61,6) (44->64,4) (45->64,7) (47->51,2) (47->48,9) (47->58,1) (47->59,9) (48->58,4) (48->56,8) (49->53,4) (51->54,6) (51->61,2) (53->59,10) (54->66,2) (54->61,10) (55->60,1) (59->63,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 67, and the edges are: (0->24,6) (0->48,6) (0->45,9) (0->12,4) (0->47,10) (1->31,1) (1->21,1) (1->6,5) (1->12,8) (1->33,2) (1->58,1) (1->50,3) (1->13,9) (2->62,3) (2->66,1) (3->53,4) (3->26,3) (3->16,3) (3->17,3) (3->48,5) (3->36,5) (4->25,7) (4->48,9) (4->55,10) (4->30,6) (5->8,4) (5->18,4) (5->23,3) (6->19,1) (6->21,10) (7->10,5) (8->28,3) (8->15,10) (8->61,8) (8->41,10) (8->46,10) (8->33,3) (8->25,5) (9->37,5) (9->34,5) (9->67,8) (9->55,4) (9->21,9) (10->52,1) (10->22,2) (10->27,10) (10->48,5) (10->29,6) (10->24,5) (10->42,6) (11->36,9) (11->26,6) (12->57,10) (12->21,2) (12->51,9) (13->51,9) (13->54,3) (13->57,8) (14->38,4) (14->43,3) (14->67,10) (15->16,4) (15->29,8) (15->34,9) (15->42,9) (15->38,5) (15->21,4) (16->17,10) (16->65,7) (17->29,6) (17->52,10) (17->22,3) (18->33,2) (19->65,4) (19->30,8) (19->60,3) (19->32,5) (20->21,1) (20->38,3) (20->65,2) (20->63,5) (20->61,4) (20->55,10) (22->30,4) (22->55,2) (22->60,10) (22->48,6) (22->28,1) (22->44,2) (22->23,8) (23->59,5) (23->37,1) (24->32,4) (24->54,10) (24->60,9) (24->59,10) (25->60,10) (25->31,4) (25->35,9) (26->34,3) (26->63,1) (27->53,1) (27->34,2) (27->58,9) (28->35,5) (29->45,9) (29->61,5) (30->55,6) (31->36,5) (31->45,6) (31->62,9) (32->44,7) (32->60,10) (32->43,5) (33->57,1) (33->65,10) (33->47,6) (34->59,2) (34->53,9) (35->45,8) (35->39,3) (35->61,1) (35->42,8) (35->63,9) (36->59,1) (37->46,3) (38->64,9) (38->54,2) (40->43,5) (40->49,8) (40->51,4) (42->50,7) (43->60,7) (43->54,8) (45->49,8) (45->52,2) (46->47,3) (47->62,2) (53->57,4) (54->64,1) (54->59,6) (55->61,4) (55->59,7) (55->57,2) (56->64,5) (57->63,6) (58->60,3) (60->63,3) (61->64,7) (62->67,2) (64->67,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 69, and the edges are: (0->22,6) (0->65,9) (0->7,1) (0->38,2) (1->11,10) (1->2,3) (1->9,1) (2->61,9) (2->36,7) (2->34,4) (3->17,5) (3->55,3) (3->36,4) (4->16,10) (4->51,1) (4->9,1) (4->31,9) (4->46,1) (4->11,9) (4->47,8) (5->38,4) (5->69,4) (5->8,3) (6->14,7) (6->34,1) (6->29,5) (7->28,4) (7->12,2) (7->13,4) (8->59,5) (8->37,10) (8->13,2) (9->37,7) (9->13,9) (9->60,4) (9->28,2) (9->47,1) (9->50,5) (10->19,9) (10->51,8) (10->56,3) (10->26,5) (10->18,2) (10->28,9) (11->54,5) (11->46,8) (12->53,7) (12->24,7) (13->65,7) (13->35,3) (13->40,10) (13->22,7) (14->21,5) (14->28,10) (15->39,6) (15->28,6) (15->18,8) (15->54,6) (17->66,10) (17->39,9) (17->57,5) (17->20,4) (18->63,6) (19->35,10) (20->39,2) (20->28,1) (20->38,7) (20->43,9) (21->61,2) (21->44,9) (22->25,9) (22->50,10) (22->42,7) (22->52,2) (23->47,6) (23->37,1) (24->32,2) (25->36,5) (25->46,4) (25->68,6) (25->34,7) (28->32,7) (28->29,1) (29->50,10) (29->44,5) (29->43,2) (30->64,7) (30->53,3) (31->46,4) (33->41,2) (33->67,5) (33->38,5) (34->52,2) (35->40,8) (37->62,10) (37->57,6) (38->48,9) (38->58,2) (43->63,6) (45->55,8) (46->55,4) (46->59,10) (47->59,6) (49->67,5) (49->54,5) (50->62,2) (53->67,1) (54->62,3) (56->63,10) (57->68,2) (61->65,10) (62->68,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 76, and the edges are: (0->19,9) (0->44,5) (0->51,3) (0->32,2) (0->31,5) (1->5,7) (1->47,7) (1->52,1) (2->67,1) (3->22,5) (3->52,8) (3->56,1) (3->75,3) (3->43,8) (3->61,10) (4->49,9) (4->15,4) (5->20,6) (5->60,7) (5->40,7) (5->12,4) (6->58,1) (6->11,3) (6->44,3) (6->22,2) (6->7,3) (6->23,7) (7->21,9) (7->25,1) (7->33,6) (8->54,2) (8->46,6) (8->25,6) (8->11,3) (8->44,4) (8->70,7) (9->54,3) (9->26,1) (10->64,6) (10->46,3) (10->18,5) (10->76,8) (11->74,9) (11->30,2) (11->72,2) (11->54,3) (12->70,4) (13->71,10) (13->59,3) (13->45,4) (13->63,4) (14->64,8) (14->66,5) (14->18,2) (14->45,2) (14->73,9) (15->42,1) (15->45,5) (15->30,3) (15->18,1) (15->54,9) (15->35,1) (16->20,5) (16->57,10) (16->29,6) (16->50,7) (17->39,9) (18->25,4) (18->57,1) (18->56,3) (18->74,3) (18->28,6) (18->36,9) (18->41,6) (18->54,1) (19->56,2) (20->56,8) (20->35,6) (21->53,9) (21->45,1) (21->60,7) (21->41,9) (21->59,8) (22->42,8) (22->67,2) (23->25,6) (23->50,7) (24->61,6) (24->63,5) (24->66,5) (24->58,9) (24->70,9) (25->71,8) (25->73,1) (25->63,2) (25->45,1) (26->56,1) (26->35,6) (26->39,4) (28->34,3) (29->65,6) (29->74,9) (30->75,7) (30->54,8) (30->44,4) (31->50,3) (31->42,5) (32->50,2) (32->57,1) (33->64,10) (33->48,9) (34->76,8) (34->54,2) (35->55,7) (35->59,4) (36->39,2) (38->42,10) (38->39,8) (38->46,7) (39->42,10) (39->75,9) (40->46,9) (40->53,4) (41->52,3) (41->57,2) (41->63,4) (42->70,5) (42->51,7) (42->68,10) (44->69,5) (44->65,4) (46->55,3) (46->63,2) (46->47,4) (48->54,6) (50->59,10) (50->62,9) (50->66,1) (53->66,1) (53->72,2) (55->63,6) (56->61,8) (58->72,9) (58->67,1) (59->76,7) (59->64,5) (61->71,9) (62->67,8) (62->65,4) (62->63,1) (63->66,8) (64->76,5) (71->76,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 65, and the edges are: (0->1,6) (1->19,1) (1->13,8) (1->49,4) (2->32,8) (2->61,4) (2->40,5) (2->25,5) (2->35,8) (2->17,1) (3->11,7) (3->17,10) (3->21,9) (3->28,3) (3->9,6) (3->48,8) (3->44,8) (4->63,5) (4->42,5) (4->26,9) (4->8,8) (4->28,2) (4->52,9) (5->8,3) (5->50,5) (5->20,9) (5->43,5) (5->45,9) (6->61,4) (6->30,8) (6->13,8) (8->62,10) (8->45,8) (8->26,7) (9->20,7) (9->59,5) (9->53,1) (9->60,3) (9->52,5) (9->35,4) (9->42,9) (9->61,4) (10->12,7) (11->59,10) (11->46,1) (11->29,3) (12->59,1) (12->19,8) (13->38,2) (14->60,5) (14->56,2) (14->58,3) (14->29,5) (14->18,8) (15->24,10) (15->37,3) (16->32,1) (16->51,6) (16->64,3) (17->28,9) (17->58,4) (17->33,2) (17->59,2) (17->50,8) (18->33,2) (18->43,4) (18->27,5) (19->45,6) (19->24,7) (19->37,2) (20->45,7) (21->56,2) (21->63,8) (22->49,8) (22->51,6) (22->38,6) (23->59,8) (23->30,1) (23->34,4) (24->55,10) (24->42,10) (25->56,6) (25->57,8) (25->30,6) (26->48,2) (26->55,9) (27->65,3) (27->42,6) (27->28,5) (28->64,9) (28->31,2) (30->54,1) (30->63,5) (30->41,1) (31->37,10) (31->44,9) (32->43,1) (33->45,10) (34->58,1) (34->57,8) (34->55,6) (35->42,6) (36->60,9) (36->58,10) (37->48,10) (37->38,5) (38->51,3) (38->61,10) (38->48,5) (39->51,10) (41->48,4) (42->64,3) (43->45,10) (46->48,6) (47->53,7) (48->52,7) (48->60,2) (48->54,10) (49->63,9) (49->53,6) (54->62,8) (59->61,9) (60->65,2) (60->64,6) (62->65,9).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 92, and the edges are: (0->32,4) (0->7,5) (0->92,6) (0->63,5) (1->48,7) (1->11,6) (1->56,1) (1->51,2) (1->83,5) (2->43,8) (2->49,7) (2->84,5) (2->87,6) (2->79,6) (3->10,3) (3->52,9) (3->22,8) (3->83,3) (3->58,5) (4->27,9) (4->56,6) (4->24,7) (4->18,9) (4->90,10) (4->35,3) (4->37,10) (4->85,5) (5->38,2) (5->53,6) (5->28,9) (5->80,2) (5->36,9) (5->91,3) (5->67,6) (6->21,7) (6->13,9) (6->81,4) (6->18,4) (7->30,7) (7->36,9) (7->62,8) (7->21,5) (7->9,9) (7->75,2) (8->67,4) (8->71,8) (8->24,10) (9->68,10) (9->50,4) (9->37,7) (9->32,7) (9->18,4) (9->57,8) (10->56,10) (10->13,2) (10->41,4) (10->69,1) (10->37,3) (10->21,1) (11->39,4) (11->65,8) (11->15,1) (12->58,4) (12->64,3) (12->42,3) (13->26,9) (13->65,7) (13->57,1) (13->34,2) (13->74,7) (15->32,10) (15->26,5) (15->86,8) (15->24,6) (15->36,6) (16->89,7) (16->82,10) (16->21,7) (16->25,10) (16->23,10) (17->47,6) (18->78,2) (18->40,4) (18->34,7) (18->88,7) (19->91,1) (19->90,3) (19->35,9) (19->24,7) (20->28,4) (20->44,8) (20->57,5) (21->83,3) (21->67,4) (22->70,2) (22->55,8) (23->74,2) (23->66,4) (23->64,6) (23->28,7) (23->43,9) (24->70,1) (24->77,3) (24->92,6) (25->45,7) (25->53,10) (25->78,2) (25->83,4) (26->61,1) (26->68,8) (26->55,5) (26->59,3) (26->39,2) (27->69,7) (27->76,8) (27->92,3) (27->88,7) (28->92,9) (28->85,5) (28->76,2) (28->72,10) (28->69,9) (29->45,1) (29->79,5) (30->73,6) (30->81,6) (31->32,9) (31->82,9) (31->64,9) (32->61,8) (32->82,1) (32->78,6) (32->58,10) (32->76,7) (33->37,1) (33->79,7) (34->70,3) (34->44,10) (34->48,4) (34->74,6) (35->81,7) (36->39,8) (36->82,9) (36->91,8) (36->78,8) (36->89,6) (37->78,4) (37->52,7) (38->69,5) (38->87,7) (38->92,6) (39->47,10) (40->49,2) (40->63,1) (41->47,7) (41->42,4) (42->60,7) (44->47,9) (45->63,2) (45->66,8) (45->48,4) (46->47,9) (46->54,10) (46->72,3) (46->58,10) (46->48,6) (47->68,4) (47->48,10) (48->59,2) (48->52,9) (48->73,10) (49->62,9) (49->87,5) (50->76,6) (50->70,9) (50->52,6) (50->69,2) (52->79,7) (52->77,4) (52->81,9) (52->72,10) (53->76,1) (53->83,4) (53->62,2) (53->80,8) (54->58,2) (54->82,1) (55->73,9) (55->77,5) (56->84,2) (56->87,4) (57->73,9) (57->78,4) (57->74,8) (58->81,10) (58->83,6) (59->80,3) (59->82,2) (60->73,4) (60->91,2) (61->63,8) (62->86,4) (62->75,9) (63->88,10) (63->64,7) (63->72,6) (65->69,5) (66->82,10) (66->73,5) (66->89,3) (67->77,8) (68->90,1) (68->79,10) (69->83,10) (70->75,6) (72->78,10) (75->78,5) (78->91,2) (79->84,4) (87->88,9) (88->90,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 89, and the edges are: (0->4,3) (0->28,3) (0->59,5) (1->40,5) (1->8,3) (2->74,7) (2->28,7) (3->6,6) (3->27,1) (3->87,8) (4->79,9) (5->24,8) (6->55,4) (6->24,1) (6->85,6) (6->37,2) (7->81,9) (7->39,6) (7->83,4) (8->61,5) (9->88,3) (9->33,6) (9->73,2) (9->37,7) (9->54,7) (10->25,8) (10->60,7) (10->33,9) (10->89,8) (11->65,1) (12->40,4) (12->81,10) (12->64,8) (12->75,7) (12->60,6) (13->52,2) (13->17,5) (13->26,1) (13->49,3) (13->43,3) (14->54,9) (14->32,1) (14->37,4) (14->88,6) (14->55,5) (16->52,4) (16->86,4) (16->75,3) (16->89,3) (17->41,7) (17->72,5) (17->26,10) (17->28,7) (18->29,1) (19->22,7) (19->61,5) (19->65,9) (19->45,3) (19->21,6) (20->67,6) (20->43,9) (20->37,6) (20->82,4) (20->62,9) (21->49,8) (21->56,2) (21->29,10) (22->43,9) (22->47,2) (22->36,6) (22->51,3) (23->41,10) (23->60,6) (24->26,7) (26->65,10) (26->41,6) (26->32,8) (26->67,1) (26->48,5) (27->50,10) (27->65,1) (28->41,5) (29->69,5) (29->32,10) (31->71,8) (32->42,4) (32->80,1) (32->45,8) (34->73,2) (35->69,6) (35->76,9) (35->43,9) (36->61,2) (37->80,8) (37->52,6) (37->81,10) (39->83,10) (39->68,6) (40->80,9) (42->64,4) (42->84,4) (42->73,9) (42->67,7) (42->43,6) (43->88,4) (43->57,8) (44->56,9) (44->73,1) (46->49,9) (47->63,4) (47->50,10) (47->51,9) (47->71,10) (48->84,4) (49->55,10) (50->81,1) (50->54,8) (50->82,2) (51->71,2) (51->61,7) (51->88,3) (52->57,10) (53->77,3) (53->67,1) (54->73,9) (54->61,6) (55->58,3) (56->80,4) (56->61,10) (57->81,9) (57->82,4) (57->77,7) (57->59,8) (57->74,2) (58->86,9) (59->88,4) (59->63,1) (60->70,4) (61->75,8) (61->63,9) (62->69,2) (63->74,8) (64->75,5) (66->72,10) (69->74,3) (71->82,6) (83->88,8).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 96, and the edges are: (0->39,9) (0->57,2) (0->35,10) (0->3,1) (1->3,2) (1->11,1) (1->48,1) (1->50,4) (1->4,3) (1->64,5) (2->66,7) (2->77,5) (2->91,2) (2->52,3) (2->35,8) (2->11,7) (2->43,3) (3->29,5) (3->44,6) (3->59,6) (3->49,9) (4->57,4) (4->48,4) (4->5,6) (4->51,6) (4->8,8) (5->71,8) (5->55,8) (5->46,2) (5->13,8) (5->60,8) (5->53,7) (6->96,4) (6->67,1) (6->94,9) (6->21,10) (6->37,8) (6->31,5) (6->49,10) (6->23,3) (6->66,5) (7->64,3) (7->20,10) (7->72,1) (7->41,3) (7->38,3) (8->28,9) (8->59,4) (8->60,2) (8->35,10) (8->67,5) (8->29,3) (8->86,5) (8->21,2) (9->45,9) (9->11,1) (9->86,3) (10->63,7) (10->61,4) (10->68,2) (10->37,2) (10->96,2) (11->79,2) (11->78,3) (11->44,1) (11->59,2) (12->46,3) (12->82,9) (12->71,1) (12->37,7) (12->92,7) (12->64,5) (13->89,2) (13->16,8) (13->51,9) (14->79,1) (14->74,6) (14->27,10) (14->68,8) (14->15,8) (14->66,6) (14->21,2) (15->70,1) (15->62,7) (15->93,7) (15->23,10) (15->92,9) (15->19,4) (16->38,8) (16->57,5) (16->93,2) (16->74,6) (16->71,9) (16->44,6) (16->25,7) (16->41,1) (16->29,9) (17->83,8) (17->52,9) (17->32,4) (17->80,3) (17->72,10) (18->59,9) (18->66,2) (18->94,7) (18->37,2) (19->92,4) (19->55,9) (19->87,1) (19->79,9) (20->40,1) (20->54,6) (20->90,9) (20->67,5) (20->81,7) (21->70,5) (21->24,7) (21->31,3) (22->66,8) (22->23,3) (22->94,6) (22->41,8) (23->39,8) (23->44,8) (23->68,3) (24->95,7) (24->75,9) (24->54,1) (25->31,9) (25->79,1) (25->80,10) (25->62,4) (25->28,9) (25->35,8) (25->46,4) (26->56,10) (26->57,3) (26->89,8) (26->34,8) (26->74,8) (26->51,4) (26->39,3) (27->58,3) (28->51,5) (28->71,8) (28->95,1) (28->74,5) (28->90,8) (28->50,9) (28->86,5) (29->81,4) (29->47,9) (29->65,7) (30->76,10) (30->69,10) (30->41,6) (30->81,4) (30->31,5) (31->95,3) (31->62,2) (32->94,2) (32->93,7) (32->50,3) (33->58,6) (33->49,5) (34->40,2) (34->85,5) (34->35,6) (34->81,7) (35->69,9) (35->83,2) (36->86,6) (36->42,3) (36->75,10) (37->49,5) (37->73,6) (37->81,10) (37->76,7) (37->90,10) (38->71,4) (38->54,4) (39->93,8) (39->89,5) (39->91,3) (39->43,2) (39->52,10) (39->40,9) (39->46,10) (40->86,6) (40->53,1) (40->80,4) (40->76,2) (41->59,2) (41->82,8) (41->89,6) (41->72,5) (41->51,1) (42->72,10) (42->64,4) (42->87,2) (42->93,4) (42->78,7) (43->69,8) (43->83,6) (45->68,7) (45->80,1) (46->88,9) (46->62,9) (46->96,5) (46->68,2) (46->77,8) (47->91,10) (47->63,10) (48->95,8) (48->96,1) (48->50,3) (48->52,5) (48->85,2) (48->92,6) (48->55,8) (49->89,6) (50->95,2) (50->66,8) (51->86,4) (52->75,4) (52->94,5) (53->66,8) (54->64,6) (56->84,4) (56->70,10) (56->58,1) (57->73,6) (58->79,5) (58->94,9) (58->88,6) (59->81,4) (59->70,7) (60->70,4) (60->90,5) (61->85,4) (61->82,4) (62->80,1) (63->87,1) (63->70,5) (63->93,5) (63->81,3) (63->71,4) (64->83,4) (64->79,8) (65->94,2) (65->72,4) (67->71,1) (67->87,8) (67->86,8) (68->80,4) (68->75,6) (68->88,1) (69->72,2) (69->71,8) (70->85,5) (70->76,5) (72->88,7) (73->95,8) (73->76,10) (73->83,2) (73->85,3) (74->90,1) (76->87,8) (78->95,7) (78->91,6) (78->94,3) (78->86,5) (78->90,5) (80->81,4) (84->95,9) (87->95,9) (90->91,9) (91->93,8) (92->94,3).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 83, and the edges are: (0->26,8) (0->10,10) (0->49,1) (0->57,5) (0->78,8) (1->80,4) (1->9,6) (1->19,6) (1->66,3) (1->15,8) (1->30,3) (1->76,1) (2->41,5) (3->43,10) (3->76,2) (4->18,4) (4->22,8) (4->74,4) (4->8,5) (6->20,2) (6->77,2) (6->78,1) (7->33,7) (7->18,1) (8->81,8) (8->69,10) (8->20,3) (9->43,8) (9->24,8) (10->49,2) (10->21,6) (10->39,6) (10->57,7) (11->57,9) (11->35,7) (11->69,5) (11->16,6) (12->50,8) (12->51,10) (13->55,5) (14->26,4) (15->72,7) (15->79,6) (15->76,1) (16->63,5) (16->21,8) (17->77,2) (18->42,9) (18->30,8) (19->81,9) (19->64,9) (20->43,5) (22->69,5) (24->55,9) (25->59,10) (25->50,9) (26->63,6) (26->31,9) (26->64,1) (26->33,3) (27->37,8) (27->61,6) (28->44,10) (29->50,10) (29->38,1) (30->39,9) (30->58,4) (32->56,2) (32->61,9) (33->73,6) (33->34,3) (34->67,1) (35->39,3) (35->45,8) (35->42,2) (35->50,5) (35->70,6) (35->65,6) (37->80,3) (38->53,1) (38->50,4) (38->76,5) (39->41,5) (39->56,9) (40->46,4) (41->76,3) (43->78,1) (43->71,9) (43->81,10) (44->68,4) (44->62,9) (45->53,8) (45->73,7) (45->62,3) (47->78,9) (47->83,5) (50->69,3) (51->59,9) (52->76,9) (52->66,6) (54->60,1) (56->68,6) (57->69,7) (57->59,7) (57->61,2) (57->82,8) (58->67,6) (60->74,1) (61->71,2) (62->66,5) (62->77,10) (62->72,5) (63->78,3) (63->80,6) (65->71,2) (66->71,4) (67->83,6) (68->72,9) (69->76,9) (73->78,1) (76->80,6) (76->79,4) (78->81,7) (80->82,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 94, and the edges are: (0->14,10) (0->92,2) (0->23,5) (0->12,9) (0->82,6) (0->33,2) (0->19,9) (0->18,9) (0->90,1) (0->88,8) (1->77,7) (1->49,1) (1->58,9) (1->92,2) (1->74,3) (1->81,8) (1->43,6) (2->63,10) (2->26,6) (2->93,1) (2->65,4) (2->94,1) (3->50,1) (3->63,6) (3->79,2) (3->32,3) (3->26,5) (4->88,5) (4->20,3) (4->77,4) (4->82,1) (4->32,7) (5->53,6) (5->46,9) (5->59,8) (5->26,10) (5->34,8) (6->10,2) (6->46,10) (6->7,2) (6->35,1) (6->11,3) (7->12,3) (7->44,4) (7->30,7) (7->41,10) (8->47,9) (8->92,10) (8->15,3) (8->13,3) (8->59,2) (8->55,9) (8->80,1) (8->23,5) (8->73,3) (9->83,7) (9->13,10) (9->57,7) (9->68,1) (9->11,9) (10->58,9) (10->30,4) (10->49,2) (10->66,7) (10->89,3) (11->38,2) (11->83,6) (11->80,3) (11->19,6) (11->43,5) (11->51,10) (11->93,5) (11->28,10) (12->23,1) (12->30,9) (12->79,3) (12->26,5) (12->57,5) (12->45,1) (13->79,2) (13->32,7) (13->58,1) (13->49,2) (14->56,1) (14->44,4) (14->23,1) (14->89,7) (14->85,9) (14->77,6) (14->33,6) (14->86,8) (14->41,8) (14->92,8) (15->32,9) (15->33,8) (15->44,4) (15->83,8) (16->93,7) (16->20,2) (16->75,7) (16->52,4) (17->20,4) (17->53,7) (17->57,8) (18->49,3) (18->27,9) (18->31,4) (18->38,5) (18->70,7) (19->34,10) (19->50,10) (19->88,7) (19->21,7) (19->33,2) (20->59,8) (20->86,3) (20->91,6) (20->34,10) (20->40,3) (20->25,10) (20->68,9) (20->24,10) (20->36,5) (21->61,1) (21->90,7) (21->94,5) (21->58,10) (22->32,10) (22->69,3) (22->33,8) (22->60,4) (22->31,4) (23->72,3) (23->54,5) (23->88,3) (24->94,1) (24->76,7) (24->33,5) (25->65,1) (25->33,9) (25->90,2) (25->69,1) (25->60,4) (25->68,2) (25->37,4) (25->38,2) (25->26,10) (26->92,10) (26->76,2) (26->75,8) (27->45,3) (27->93,4) (27->43,5) (27->64,4) (28->46,10) (28->58,9) (28->38,6) (28->86,10) (28->48,7) (28->32,6) (29->49,5) (29->67,3) (29->87,10) (29->31,10) (30->80,6) (30->37,5) (30->81,10) (31->61,2) (31->71,2) (32->86,8) (32->85,5) (32->61,1) (32->57,2) (32->77,5) (32->38,2) (32->43,9) (32->62,3) (32->52,6) (32->94,7) (32->82,10) (33->77,8) (33->83,8) (33->69,5) (33->52,7) (34->90,1) (34->54,7) (34->78,8) (35->94,7) (35->69,4) (35->85,4) (35->84,2) (36->57,2) (36->84,9) (36->91,7) (36->76,3) (37->73,6) (37->72,10) (37->90,4) (37->89,4) (37->68,1) (38->51,4) (38->80,1) (38->43,10) (38->87,4) (38->75,8) (38->65,2) (39->69,3) (39->53,2) (39->76,10) (40->72,4) (40->51,4) (40->92,7) (40->44,10) (41->58,1) (42->83,1) (42->72,3) (42->61,6) (43->83,9) (44->76,9) (44->50,2) (44->55,5) (44->77,10) (45->53,5) (45->84,8) (46->78,10) (46->91,9) (46->80,6) (46->55,7) (46->66,3) (47->88,8) (47->56,1) (47->75,4) (47->62,1) (49->92,10) (49->54,4) (50->78,3) (50->58,2) (50->74,9) (50->62,5) (51->62,9) (51->94,3) (51->64,7) (51->59,5) (51->67,3) (52->64,5) (52->57,1) (53->85,5) (53->87,1) (53->82,1) (54->73,7) (55->61,2) (55->70,3) (55->57,2) (55->73,2) (56->70,8) (56->86,5) (57->92,2) (57->85,1) (57->58,6) (57->65,10) (57->68,9) (58->70,7) (58->76,10) (58->85,1) (58->90,7) (59->82,6) (59->85,6) (59->78,8) (60->78,5) (60->85,5) (62->67,3) (62->94,10) (62->75,7) (62->66,6) (62->70,3) (63->65,1) (64->88,2) (65->79,1) (66->75,10) (66->84,8) (66->76,6) (67->84,5) (67->71,10) (68->86,9) (69->90,5) (69->77,3) (70->71,7) (70->81,6) (70->73,2) (71->91,7) (71->73,7) (71->93,9) (76->81,4) (76->92,6) (77->89,5) (77->81,9) (80->85,2) (80->90,9) (85->87,8) (89->93,9) (92->93,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 86, and the edges are: (0->70,2) (0->80,1) (0->43,4) (0->72,8) (1->44,6) (1->82,10) (1->59,5) (1->70,1) (1->10,9) (1->21,2) (1->62,5) (1->61,3) (2->4,1) (2->25,5) (3->84,7) (3->33,6) (3->36,7) (3->25,3) (3->55,9) (3->85,8) (3->16,6) (4->73,3) (4->27,1) (4->24,8) (4->68,10) (5->52,7) (5->81,1) (6->46,4) (6->50,2) (6->20,10) (6->59,7) (6->22,10) (6->51,4) (6->19,6) (6->73,6) (6->21,4) (7->13,7) (7->30,9) (7->62,10) (8->76,5) (8->27,3) (8->26,4) (8->71,6) (9->66,5) (10->15,4) (10->66,6) (10->20,6) (10->42,9) (10->60,4) (11->21,3) (11->78,9) (11->19,7) (11->25,6) (12->62,9) (12->76,10) (13->49,1) (13->37,9) (13->65,2) (14->42,7) (14->29,6) (14->68,3) (14->69,10) (14->31,6) (14->43,3) (15->55,3) (15->77,2) (15->75,6) (15->86,3) (16->22,1) (16->59,3) (16->38,2) (16->78,6) (17->80,3) (17->34,9) (17->62,10) (18->25,3) (18->86,3) (18->30,6) (18->43,9) (18->20,9) (19->78,2) (19->85,3) (19->62,10) (19->31,9) (19->64,4) (19->63,6) (21->54,6) (21->55,5) (21->44,2) (21->40,6) (22->55,7) (22->78,7) (22->67,8) (23->29,1) (23->33,9) (23->47,2) (23->25,10) (24->68,4) (25->33,10) (25->79,8) (25->66,5) (25->81,9) (25->69,4) (25->28,2) (25->52,3) (25->32,8) (26->85,3) (26->35,4) (26->39,10) (27->56,1) (27->35,6) (27->80,1) (28->39,5) (28->80,4) (29->61,5) (29->72,9) (29->85,5) (30->70,3) (30->53,3) (30->38,9) (31->82,1) (31->34,2) (31->71,1) (32->60,6) (33->52,6) (33->51,2) (33->72,3) (34->85,1) (34->63,1) (35->62,6) (35->77,6) (36->64,3) (36->72,3) (36->50,7) (36->62,1) (36->55,4) (37->67,3) (37->71,3) (38->80,2) (38->41,5) (38->54,6) (38->64,3) (39->68,1) (41->47,1) (41->63,7) (42->53,4) (43->44,8) (44->81,1) (44->60,7) (44->79,10) (45->77,7) (45->76,9) (46->81,3) (46->75,1) (47->70,9) (47->54,7) (48->85,3) (49->56,4) (49->84,3) (51->63,9) (51->79,5) (51->55,9) (52->84,5) (52->74,5) (52->83,8) (54->65,1) (54->59,7) (54->82,3) (55->72,10) (55->66,1) (56->64,7) (56->65,10) (57->67,4) (57->70,1) (57->80,3) (59->73,1) (60->61,1) (61->75,1) (61->69,2) (62->80,1) (62->77,7) (63->82,10) (63->79,3) (64->78,10) (65->79,4) (65->71,9) (65->67,5) (67->77,10) (69->77,9) (71->73,1) (71->79,3) (73->78,5) (74->83,9) (77->82,6) (80->85,10).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 87, and the edges are: (0->85,3) (0->8,9) (0->73,1) (0->82,6) (1->76,8) (1->4,2) (2->11,7) (2->17,4) (3->73,1) (3->76,6) (3->17,7) (4->35,4) (4->33,6) (4->5,7) (4->85,3) (5->37,7) (6->35,6) (6->82,1) (6->7,7) (6->40,5) (6->87,8) (6->12,5) (7->79,3) (7->27,9) (8->44,4) (8->31,3) (8->78,6) (9->26,9) (9->53,6) (9->83,8) (9->28,3) (9->59,6) (10->29,10) (10->74,7) (11->20,5) (11->25,1) (11->50,3) (12->22,8) (12->63,5) (13->87,1) (13->23,3) (13->22,9) (14->79,4) (14->17,2) (14->58,9) (14->32,6) (15->54,3) (15->64,4) (15->61,1) (15->71,6) (16->40,5) (16->45,5) (16->68,2) (16->34,5) (16->42,3) (16->81,2) (16->51,7) (16->63,7) (17->30,7) (17->34,5) (17->65,5) (17->55,1) (18->29,8) (18->68,10) (18->77,8) (18->76,10) (18->70,7) (19->22,1) (19->80,8) (19->58,3) (21->42,4) (22->84,7) (22->61,9) (22->53,10) (22->72,6) (23->58,6) (23->25,7) (23->79,5) (24->77,8) (24->48,5) (24->30,9) (24->56,4) (24->40,9) (25->67,3) (25->29,6) (25->27,10) (26->56,7) (26->73,9) (26->77,4) (26->33,8) (27->58,4) (27->73,4) (28->35,9) (28->74,8) (29->34,8) (29->39,3) (29->42,1) (29->51,9) (30->37,6) (30->51,8) (31->72,8) (31->61,7) (32->64,4) (33->85,4) (33->66,8) (33->67,2) (34->55,9) (34->60,1) (34->43,1) (35->66,4) (35->84,1) (35->69,9) (35->86,3) (35->80,7) (36->55,6) (37->55,3) (37->58,5) (37->70,4) (37->57,3) (38->39,4) (40->59,3) (40->53,9) (40->63,7) (41->86,5) (41->74,5) (42->63,6) (42->47,8) (43->72,3) (43->50,5) (43->70,1) (43->67,1) (44->60,3) (45->48,7) (45->79,7) (46->66,7) (47->51,4) (47->66,8) (48->54,7) (48->67,5) (49->56,1) (50->78,7) (50->62,10) (51->58,4) (52->65,7) (52->62,2) (54->78,10) (54->79,1) (55->79,10) (56->78,4) (56->62,3) (58->68,10) (58->71,1) (59->61,4) (60->87,8) (60->67,9) (62->81,1) (63->81,2) (63->83,2) (64->83,10) (65->69,5) (65->75,2) (66->82,2) (66->87,4) (68->82,7) (69->78,6) (70->78,3) (75->76,5) (75->80,8) (76->83,8) (78->87,3) (78->81,8) (79->81,9) (80->85,5).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 92, and the edges are: (0->84,9) (0->81,2) (0->39,4) (1->9,5) (1->15,8) (1->20,7) (1->59,3) (1->76,1) (1->6,4) (1->8,4) (2->86,1) (2->76,9) (2->8,2) (3->65,5) (3->26,10) (3->54,8) (3->34,3) (3->50,2) (4->89,10) (4->14,1) (5->23,7) (5->18,7) (5->22,9) (5->45,10) (5->91,1) (6->11,8) (6->24,8) (6->34,10) (7->83,5) (7->67,1) (7->26,3) (8->91,7) (8->9,9) (9->17,1) (9->84,10) (9->63,5) (9->39,1) (9->25,1) (10->77,1) (10->25,1) (10->15,10) (10->21,2) (11->32,4) (11->81,7) (12->69,6) (12->37,3) (12->17,2) (13->63,6) (13->47,2) (13->53,5) (13->90,5) (13->69,5) (13->18,3) (14->69,8) (14->88,4) (14->46,6) (14->26,7) (15->34,8) (15->85,1) (15->72,1) (15->30,10) (16->53,1) (16->89,9) (16->91,7) (16->41,10) (16->19,2) (16->64,10) (17->55,5) (17->25,2) (17->29,10) (17->59,2) (17->79,4) (17->21,4) (18->45,7) (18->46,4) (19->73,1) (19->69,7) (19->55,10) (19->61,8) (20->75,2) (20->22,6) (20->84,5) (21->53,2) (23->42,1) (23->33,9) (24->33,10) (24->53,7) (24->88,5) (24->26,3) (25->81,10) (25->35,6) (26->80,8) (26->74,6) (26->71,8) (26->72,6) (27->34,9) (27->54,8) (27->80,8) (28->68,2) (29->61,2) (29->47,9) (30->80,6) (31->89,6) (31->55,4) (31->58,4) (31->75,1) (31->70,4) (31->76,5) (31->73,7) (32->35,6) (32->67,2) (32->61,8) (33->65,9) (33->66,4) (33->77,8) (33->44,5) (34->35,3) (34->43,7) (34->50,1) (35->43,6) (36->44,10) (36->55,9) (36->78,7) (36->74,1) (37->43,1) (37->45,5) (37->69,9) (37->54,1) (37->53,7) (38->86,2) (38->83,1) (38->65,2) (38->59,3) (38->78,5) (39->60,5) (39->62,2) (40->59,9) (40->81,9) (40->87,1) (40->48,5) (41->85,4) (42->77,9) (42->59,3) (42->54,8) (43->72,9) (44->76,9) (44->72,8) (45->50,4) (45->82,10) (45->79,4) (46->86,9) (46->65,10) (46->82,6) (47->78,10) (47->92,1) (47->62,9) (48->69,5) (48->65,6) (49->68,6) (49->85,3) (50->51,4) (50->64,10) (51->67,4) (52->58,3) (52->53,7) (53->83,1) (55->64,6) (56->66,2) (58->83,8) (59->66,5) (62->91,2) (66->78,8) (66->76,9) (66->79,6) (68->83,10) (73->75,3) (80->83,7) (84->91,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 83, and the edges are: (0->28,7) (0->19,2) (0->3,9) (0->25,1) (1->32,7) (1->17,5) (1->37,10) (1->11,1) (2->59,4) (2->57,7) (2->52,5) (2->13,5) (2->17,7) (2->73,3) (3->22,6) (3->49,8) (3->36,9) (3->37,6) (3->63,7) (4->69,7) (4->40,7) (4->46,7) (4->63,9) (4->7,3) (4->67,2) (4->45,3) (5->68,1) (5->59,8) (5->37,10) (6->58,9) (6->20,1) (6->28,2) (6->80,2) (7->18,3) (7->27,8) (8->36,8) (8->37,10) (8->40,6) (8->38,8) (8->48,8) (9->82,10) (9->27,3) (10->60,1) (10->73,10) (10->69,5) (10->20,9) (11->18,2) (11->28,4) (11->59,1) (11->68,10) (12->81,1) (12->34,6) (12->48,2) (12->21,5) (12->32,7) (13->56,2) (13->37,2) (13->61,10) (13->82,5) (13->52,4) (14->53,6) (14->75,2) (14->83,3) (14->34,8) (14->31,5) (15->54,5) (15->59,10) (15->78,7) (15->77,7) (16->52,3) (16->25,7) (16->54,5) (16->17,4) (16->38,7) (17->41,2) (17->44,10) (17->66,9) (17->20,4) (17->35,10) (17->65,7) (18->21,2) (18->62,3) (18->32,5) (18->37,5) (18->44,7) (18->72,3) (18->30,8) (19->67,2) (19->26,2) (20->64,9) (20->82,10) (20->37,8) (20->56,7) (20->74,9) (21->74,7) (21->45,9) (21->52,3) (21->80,10) (21->23,3) (22->65,2) (22->41,8) (22->48,4) (22->43,6) (22->52,4) (23->78,8) (23->82,1) (23->38,4) (23->43,3) (24->63,7) (24->57,1) (24->64,4) (24->31,1) (25->28,5) (25->57,2) (25->26,8) (25->45,8) (26->36,5) (26->52,1) (26->45,6) (26->77,4) (26->83,8) (27->42,8) (27->64,7) (27->40,8) (27->66,5) (27->56,4) (28->75,5) (28->65,9) (28->51,2) (29->41,2) (29->77,8) (29->47,8) (30->73,5) (30->43,8) (30->82,7) (30->55,10) (30->31,8) (31->62,4) (31->63,8) (32->58,8) (32->55,9) (32->62,7) (32->52,8) (33->46,10) (33->59,1) (33->55,9) (33->52,7) (34->46,7) (34->63,6) (34->80,7) (34->78,5) (34->62,8) (34->64,1) (34->48,10) (35->73,6) (35->44,10) (36->55,8) (36->49,10) (36->38,9) (36->59,8) (36->54,1) (37->64,8) (37->49,6) (37->62,10) (37->71,5) (37->59,5) (38->55,10) (39->49,3) (39->78,2) (39->80,8) (40->43,6) (41->73,7) (41->67,10) (41->62,1) (42->79,8) (42->73,7) (42->78,1) (42->71,10) (43->80,4) (44->61,9) (44->76,1) (44->57,6) (46->78,1) (47->57,6) (47->62,2) (47->75,2) (48->57,3) (49->57,7) (52->66,2) (52->69,6) (52->53,1) (54->55,9) (54->70,3) (55->70,6) (55->60,8) (57->62,1) (59->79,10) (59->71,7) (60->64,9) (60->75,2) (60->63,8) (60->70,3) (61->78,9) (64->80,8) (64->72,2) (65->72,5) (66->75,10) (66->78,1) (70->78,10) (70->77,5) (71->79,8) (72->80,3) (77->83,7) (78->82,4).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 89, and the edges are: (0->43,7) (0->72,9) (0->9,2) (0->17,10) (0->75,7) (0->25,6) (1->54,4) (1->78,9) (1->66,4) (1->89,8) (1->60,5) (1->61,9) (2->9,2) (2->56,6) (2->13,2) (2->53,6) (2->38,5) (3->88,10) (3->80,6) (3->44,6) (3->25,5) (4->72,3) (4->51,7) (4->28,5) (4->65,3) (4->16,9) (4->86,6) (4->48,2) (5->30,5) (5->66,5) (5->40,6) (5->53,10) (5->64,10) (6->53,7) (6->78,6) (6->36,1) (6->70,5) (6->71,6) (7->59,4) (7->54,5) (7->32,10) (7->60,10) (7->10,3) (7->64,5) (8->75,6) (8->84,5) (8->31,3) (8->60,4) (8->26,7) (9->64,3) (9->76,4) (9->54,6) (9->59,10) (9->32,4) (9->86,4) (9->28,10) (10->45,9) (10->18,4) (10->17,9) (10->62,4) (11->15,6) (11->67,5) (11->58,4) (11->29,6) (12->52,3) (12->20,8) (12->37,1) (13->15,3) (13->28,8) (13->18,4) (13->57,3) (13->32,8) (13->20,6) (14->87,7) (14->45,9) (14->79,8) (14->71,9) (15->17,7) (15->46,3) (15->64,9) (15->87,9) (16->85,6) (16->75,3) (16->82,4) (16->51,7) (16->24,7) (17->55,5) (17->29,8) (17->23,4) (17->85,7) (17->60,2) (17->76,6) (18->45,6) (18->76,4) (18->44,3) (19->68,10) (19->51,7) (19->32,10) (20->56,5) (20->40,5) (20->28,2) (20->43,8) (21->89,1) (21->25,1) (21->35,10) (21->86,9) (21->57,1) (22->47,4) (22->80,2) (22->70,5) (22->43,4) (22->72,10) (22->77,10) (22->76,4) (22->48,8) (22->28,2) (22->61,9) (22->88,10) (23->25,1) (23->64,1) (23->88,9) (23->73,4) (23->75,9) (23->66,2) (24->85,9) (24->79,4) (25->57,2) (25->88,5) (25->68,2) (25->32,7) (26->28,6) (26->89,9) (26->75,3) (26->67,8) (27->44,5) (27->30,7) (27->48,4) (27->81,8) (27->83,8) (27->67,8) (28->77,2) (28->54,7) (28->55,2) (28->64,1) (28->60,10) (28->72,4) (28->47,2) (29->87,9) (29->53,4) (29->52,6) (29->55,2) (29->30,3) (30->42,1) (30->85,6) (31->89,4) (31->35,8) (32->65,8) (32->44,7) (32->57,7) (32->56,4) (33->36,3) (33->44,2) (34->69,2) (34->66,8) (35->83,10) (35->52,2) (36->80,7) (36->63,10) (37->56,9) (37->71,8) (37->54,9) (37->59,9) (38->60,7) (38->82,9) (38->67,6) (38->55,3) (38->70,2) (38->49,4) (39->71,2) (39->44,6) (39->53,8) (40->61,3) (40->73,9) (40->74,1) (41->52,3) (41->45,3) (41->75,9) (41->85,7) (41->56,10) (42->55,10) (42->87,2) (43->52,3) (43->55,2) (43->72,4) (43->58,8) (44->74,10) (45->77,2) (45->46,9) (45->66,4) (45->58,3) (45->74,7) (45->67,8) (45->65,3) (45->76,1) (46->61,6) (47->87,7) (47->57,7) (47->54,10) (47->61,10) (48->87,2) (48->66,6) (49->74,9) (49->72,3) (50->54,10) (51->53,5) (51->83,6) (52->81,3) (52->68,6) (52->59,5) (53->83,10) (53->63,10) (53->85,10) (53->60,7) (53->67,2) (55->74,7) (55->60,4) (55->58,6) (57->81,2) (57->84,10) (57->87,3) (58->72,6) (59->70,7) (59->81,3) (60->87,6) (61->87,5) (61->71,4) (62->83,9) (63->87,2) (63->77,3) (63->76,1) (63->72,8) (64->85,6) (64->74,2) (64->72,3) (65->88,7) (66->77,3) (67->77,6) (68->83,3) (68->85,5) (68->77,9) (68->69,7) (68->88,1) (69->83,10) (69->78,10) (70->82,10) (71->89,3) (71->76,7) (72->86,4) (74->79,10) (75->81,5) (76->79,8) (76->80,6) (77->88,5) (77->81,3) (80->81,3) (81->83,7) (85->88,2).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 91, and the edges are: (0->58,5) (0->43,6) (0->74,6) (1->39,9) (1->85,1) (1->89,7) (1->5,1) (1->10,4) (1->65,7) (1->59,2) (2->86,1) (2->85,5) (2->27,9) (2->77,10) (2->34,1) (3->48,9) (3->75,6) (3->67,9) (3->50,5) (3->24,6) (3->86,6) (4->35,6) (4->76,1) (4->12,10) (4->79,1) (4->84,3) (4->15,2) (4->39,6) (5->16,10) (5->8,4) (5->91,5) (5->69,6) (6->31,2) (6->61,6) (6->83,2) (6->91,5) (7->52,7) (7->34,10) (7->19,1) (7->70,2) (7->75,7) (7->59,5) (7->31,6) (7->28,9) (7->32,6) (8->22,9) (8->60,6) (8->41,3) (8->16,9) (9->11,8) (9->29,2) (9->49,8) (10->17,1) (10->56,7) (10->72,5) (10->43,8) (11->32,10) (11->13,1) (11->76,6) (11->59,4) (11->55,7) (11->21,7) (11->58,5) (12->68,8) (12->71,2) (12->54,10) (12->64,8) (12->91,3) (13->40,6) (13->48,7) (15->68,8) (15->21,9) (15->48,10) (15->80,2) (16->21,10) (16->39,4) (16->17,3) (17->66,10) (17->18,9) (17->37,9) (18->27,5) (18->56,9) (18->26,8) (19->55,5) (19->34,5) (19->24,4) (19->20,2) (19->88,8) (19->22,10) (20->44,9) (20->56,5) (20->35,3) (20->23,9) (21->87,10) (21->40,10) (21->70,6) (22->90,7) (22->72,7) (22->91,9) (22->84,10) (22->83,7) (22->62,3) (23->40,10) (23->27,5) (23->39,5) (23->71,4) (23->38,6) (23->72,9) (24->29,1) (24->84,3) (24->32,9) (25->61,5) (25->31,10) (25->70,3) (26->88,6) (26->56,4) (26->84,9) (26->41,3) (27->81,5) (27->57,2) (27->76,10) (28->37,8) (28->54,9) (28->42,8) (28->84,4) (29->70,2) (29->75,10) (29->32,6) (30->90,9) (30->32,10) (31->81,4) (31->59,4) (31->86,8) (32->45,5) (32->59,6) (32->49,1) (33->74,5) (34->55,2) (34->75,6) (34->80,2) (34->47,8) (34->40,4) (35->76,10) (36->77,9) (36->91,3) (37->53,6) (38->89,5) (39->46,4) (39->44,4) (40->89,10) (41->68,2) (41->50,2) (41->52,4) (42->77,3) (43->76,3) (43->52,5) (43->65,2) (43->82,8) (43->58,2) (44->78,9) (44->67,7) (46->51,9) (47->53,8) (47->63,2) (48->49,2) (49->78,6) (49->65,4) (49->61,8) (50->61,4) (50->70,2) (50->74,7) (51->74,2) (51->82,3) (52->89,6) (52->76,3) (52->87,3) (53->89,8) (53->88,8) (54->61,3) (54->74,9) (55->69,4) (55->79,4) (57->77,6) (57->83,5) (57->70,2) (58->61,10) (59->66,3) (59->91,10) (60->91,5) (61->68,9) (63->64,6) (63->89,10) (65->79,2) (66->68,7) (69->80,5) (72->91,4) (74->90,8) (78->87,8) (82->89,5) (82->91,7) (87->91,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 80, and the edges are: (0->19,4) (0->32,2) (0->11,9) (0->42,4) (1->15,4) (1->32,4) (1->59,2) (1->40,7) (1->39,9) (2->3,3) (2->63,1) (2->78,7) (2->26,3) (2->66,6) (2->44,9) (2->42,4) (3->24,9) (3->19,2) (3->58,5) (3->76,9) (3->57,4) (4->68,6) (4->21,7) (4->47,5) (4->53,3) (4->34,1) (4->9,4) (4->12,6) (5->68,8) (6->78,3) (7->41,4) (7->55,9) (7->32,9) (7->73,6) (7->50,3) (7->52,5) (7->66,2) (8->31,1) (9->71,6) (9->29,2) (10->52,2) (10->15,1) (11->22,3) (11->57,5) (11->49,6) (11->33,2) (11->47,9) (11->21,6) (12->61,2) (12->63,8) (12->48,9) (12->39,7) (13->21,1) (13->34,4) (13->62,7) (13->37,10) (13->19,4) (13->65,9) (14->24,3) (14->25,3) (15->34,2) (15->20,2) (15->55,1) (15->37,2) (16->49,7) (17->29,6) (17->59,2) (17->67,4) (17->23,1) (18->73,2) (18->59,9) (18->60,8) (18->47,9) (18->64,9) (18->57,10) (18->62,8) (19->20,2) (20->40,9) (20->62,4) (20->49,6) (21->73,10) (21->72,7) (21->35,2) (22->40,3) (22->35,6) (22->26,3) (22->75,10) (22->33,5) (22->30,4) (23->59,7) (23->50,6) (23->34,5) (24->44,1) (24->59,5) (25->46,7) (25->53,4) (25->78,1) (25->41,7) (26->80,4) (27->36,1) (27->43,8) (27->46,5) (27->75,3) (27->67,2) (27->52,9) (28->51,4) (29->74,4) (29->60,3) (30->45,7) (30->69,2) (31->35,9) (31->79,3) (31->59,6) (31->46,2) (31->69,7) (32->54,2) (32->69,6) (33->58,5) (33->78,9) (33->41,7) (33->70,4) (33->60,8) (33->50,4) (34->78,1) (34->67,7) (34->68,8) (35->40,7) (35->60,1) (36->57,7) (36->54,4) (37->62,4) (37->40,10) (38->73,1) (38->66,1) (38->42,5) (38->65,4) (39->64,2) (39->77,5) (40->67,2) (40->52,7) (42->65,9) (43->53,7) (43->71,10) (43->73,9) (43->68,4) (44->57,3) (44->61,7) (44->51,8) (44->77,9) (45->73,9) (45->53,9) (45->65,10) (46->77,4) (46->80,8) (47->72,10) (47->52,6) (47->53,5) (48->64,10) (49->73,5) (50->57,8) (54->69,10) (56->65,9) (56->80,7) (59->71,6) (60->65,7) (61->63,8) (63->68,8) (63->76,8) (66->79,9) (66->70,1) (70->74,3) (72->77,7).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 97, and the edges are: (0->37,3) (0->12,3) (0->23,9) (0->72,2) (0->55,1) (1->45,3) (1->74,5) (1->19,7) (1->52,5) (1->13,7) (2->77,8) (2->85,2) (2->55,3) (2->14,3) (2->97,4) (2->26,2) (2->11,5) (2->76,7) (2->24,3) (2->58,5) (2->91,5) (2->10,3) (2->68,9) (2->45,6) (2->82,7) (2->62,4) (3->37,3) (3->96,5) (3->5,8) (3->35,1) (3->53,8) (3->87,6) (3->43,4) (4->41,5) (4->67,1) (4->71,10) (4->51,1) (4->93,3) (4->70,3) (4->64,9) (4->25,10) (5->43,4) (5->81,3) (5->74,5) (5->86,1) (5->88,7) (5->97,10) (6->10,7) (6->50,8) (6->41,1) (6->68,8) (6->83,5) (7->96,7) (7->50,3) (7->92,4) (7->97,2) (7->65,1) (7->18,5) (8->50,3) (8->55,4) (8->86,5) (8->22,4) (8->21,7) (8->32,8) (8->14,1) (8->49,4) (8->54,6) (9->50,6) (9->93,2) (10->81,8) (10->14,10) (10->91,2) (10->36,1) (11->23,2) (11->97,2) (11->14,2) (11->33,4) (12->38,3) (12->79,9) (12->13,8) (12->55,10) (12->74,8) (12->20,10) (12->31,4) (13->35,3) (13->69,8) (13->74,7) (13->85,7) (13->92,1) (13->78,7) (14->33,9) (14->75,10) (14->37,4) (14->16,3) (14->48,1) (14->60,1) (14->70,3) (14->39,1) (15->94,4) (15->27,3) (15->34,1) (15->72,5) (17->19,2) (17->57,4) (17->56,3) (17->22,8) (17->29,1) (17->83,6) (17->38,2) (17->55,2) (18->31,10) (19->74,9) (19->71,2) (19->96,1) (19->49,8) (19->78,10) (20->52,7) (20->82,1) (20->64,5) (20->51,4) (20->89,1) (20->49,4) (20->60,9) (21->26,1) (21->47,8) (21->82,7) (22->49,8) (22->30,4) (22->60,10) (22->87,8) (23->38,7) (23->89,5) (23->62,6) (23->28,7) (23->40,6) (23->47,3) (24->75,1) (24->59,2) (24->97,7) (24->55,2) (24->66,2) (25->57,1) (25->36,10) (25->38,4) (25->28,7) (25->90,6) (26->66,4) (26->76,5) (26->34,2) (26->96,10) (27->59,6) (27->57,10) (27->33,9) (28->47,7) (28->69,7) (28->72,2) (28->42,3) (28->31,4) (29->37,1) (29->92,8) (30->45,6) (30->73,7) (31->42,2) (31->45,4) (31->77,6) (31->84,8) (31->68,7) (32->63,4) (32->60,1) (32->57,7) (32->49,2) (32->89,6) (33->35,9) (33->85,3) (33->89,5) (33->74,3) (33->42,1) (33->59,2) (34->50,7) (34->97,10) (34->80,8) (36->56,7) (36->80,4) (36->58,7) (37->65,9) (37->57,5) (37->68,4) (37->92,10) (37->80,7) (38->66,1) (38->76,5) (39->90,7) (39->50,10) (39->49,5) (39->65,10) (40->91,5) (40->79,3) (40->65,7) (40->62,5) (41->94,10) (41->72,3) (41->92,1) (41->78,4) (41->46,8) (42->49,6) (42->85,8) (43->62,7) (45->75,8) (45->79,6) (45->55,9) (45->63,6) (47->55,8) (47->78,7) (48->55,9) (48->77,7) (48->69,7) (49->52,3) (50->69,9) (50->89,2) (51->96,5) (51->62,9) (51->59,2) (51->71,8) (52->91,9) (52->65,7) (53->92,6) (53->97,3) (53->88,2) (53->84,9) (53->65,7) (54->75,8) (54->87,5) (54->83,9) (55->82,2) (55->56,5) (55->85,1) (55->58,3) (56->63,8) (56->75,3) (56->58,4) (56->67,4) (57->97,9) (57->85,1) (57->96,2) (57->71,10) (58->96,9) (58->90,5) (58->83,5) (59->74,6) (59->91,5) (59->62,10) (59->60,8) (59->95,9) (60->74,8) (60->91,5) (62->95,2) (62->85,1) (62->94,6) (62->82,3) (63->65,8) (63->85,10) (64->70,9) (65->96,2) (66->92,1) (67->85,7) (67->77,6) (67->87,6) (68->77,3) (69->76,2) (70->94,7) (71->72,1) (71->88,6) (73->81,1) (73->87,3) (73->88,5) (74->76,1) (74->86,2) (76->96,10) (78->90,1) (80->91,4) (80->97,4) (80->82,8) (80->88,1) (81->97,5) (82->93,9) (86->89,8) (87->90,6) (96->97,6).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"},
{"graph": " The nodes are numbered from 0 to 92, and the edges are: (0->39,6) (0->13,4) (0->47,3) (0->76,6) (0->57,3) (0->81,8) (0->40,8) (0->79,4) (1->12,6) (1->50,5) (1->3,5) (1->82,7) (1->42,10) (2->82,1) (2->74,9) (2->3,3) (2->24,8) (2->79,9) (2->23,2) (3->9,1) (3->62,2) (3->20,1) (3->47,3) (3->46,9) (3->31,2) (3->59,10) (4->7,7) (4->74,9) (4->25,7) (4->73,5) (4->67,6) (4->91,9) (5->7,3) (5->33,10) (5->28,9) (5->23,10) (5->71,10) (5->43,6) (5->84,10) (6->36,7) (6->30,6) (6->42,5) (6->79,3) (6->40,1) (6->45,4) (6->85,8) (7->73,9) (7->52,5) (7->61,6) (7->11,4) (8->72,9) (8->87,8) (8->83,9) (8->16,10) (8->73,8) (9->23,6) (9->85,3) (9->59,6) (9->18,1) (9->49,3) (10->14,1) (10->78,8) (10->38,6) (10->20,3) (10->80,5) (10->84,2) (10->66,6) (10->71,5) (10->87,5) (11->54,3) (11->28,3) (11->85,7) (11->71,7) (12->81,1) (12->68,3) (12->46,6) (12->61,7) (12->80,5) (13->78,1) (13->29,10) (13->84,3) (14->80,10) (14->86,8) (14->21,4) (14->50,8) (14->89,7) (15->25,7) (15->49,9) (15->59,2) (15->63,4) (15->38,3) (15->81,2) (15->48,1) (16->76,8) (16->84,7) (16->66,2) (16->59,9) (16->49,2) (17->40,1) (17->43,10) (17->87,10) (17->65,4) (18->82,8) (18->70,5) (18->80,10) (18->52,6) (18->74,9) (18->88,1) (19->46,1) (20->69,6) (20->66,9) (21->37,6) (21->72,3) (21->60,4) (21->57,4) (22->43,10) (22->28,6) (22->53,5) (23->64,8) (23->43,2) (23->53,4) (23->75,1) (23->34,10) (24->76,3) (24->32,10) (24->73,10) (25->58,9) (25->63,4) (25->42,6) (25->69,2) (25->33,5) (25->52,9) (25->48,10) (25->75,4) (26->27,8) (26->36,8) (27->39,2) (27->33,7) (27->67,6) (27->92,3) (28->88,2) (28->77,10) (28->58,8) (28->32,6) (29->75,10) (29->54,5) (29->31,7) (29->85,9) (29->74,8) (30->74,7) (30->38,6) (30->52,3) (31->73,7) (31->51,3) (31->53,6) (31->34,7) (32->64,4) (32->53,4) (32->57,4) (33->78,10) (33->38,2) (33->83,4) (34->35,10) (34->42,4) (34->76,7) (35->71,10) (35->89,8) (36->62,2) (36->70,5) (36->52,5) (36->78,10) (36->37,6) (36->59,5) (37->46,3) (37->70,4) (38->40,10) (38->49,9) (39->77,2) (39->88,8) (39->64,5) (39->40,2) (40->58,8) (40->54,6) (41->47,5) (41->44,3) (41->51,5) (42->87,4) (42->92,2) (42->48,2) (42->60,10) (44->63,3) (45->61,9) (45->51,7) (45->46,8) (45->55,4) (45->90,9) (45->83,3) (46->61,8) (46->60,10) (46->73,9) (47->74,3) (47->89,8) (48->86,6) (48->77,7) (48->76,9) (48->78,5) (49->89,8) (49->55,2) (49->92,3) (49->91,7) (50->60,4) (50->77,3) (50->84,3) (51->70,8) (52->74,3) (53->89,7) (53->71,3) (53->61,1) (53->73,4) (53->65,3) (54->56,7) (54->89,1) (55->74,8) (55->78,1) (55->82,10) (56->88,2) (56->92,3) (56->61,6) (57->87,4) (57->88,7) (57->64,7) (58->90,6) (59->81,6) (59->71,7) (59->92,5) (59->79,1) (60->70,6) (60->85,2) (62->88,5) (62->83,10) (62->92,2) (63->65,9) (64->92,9) (64->89,6) (65->66,1) (66->73,1) (67->83,8) (70->74,6) (70->88,6) (71->84,2) (71->86,1) (71->78,1) (74->79,6) (74->80,3) (74->82,5) (74->91,9) (74->84,10) (76->91,9) (76->78,4) (76->86,4) (77->91,3) (78->90,6) (80->86,10) (80->89,2) (81->87,10) (83->91,1).", "graph_code": "\nimport re\nimport networkx as nx\n\n# Regular expression to extract edges with weights\npattern = r'\\((\\d+)->(\\d+),(\\d+)\\)'\nmatches = re.findall(pattern, text)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n\n", "graph_type": "weighted_directed_graph"}
]