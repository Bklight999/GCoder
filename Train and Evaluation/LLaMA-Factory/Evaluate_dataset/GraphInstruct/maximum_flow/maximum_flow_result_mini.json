{"0": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 3, 1), (2, 1, 8), (2, 8, 4), (2, 5, 0),\n    (3, 13, 6),\n    (1, 11, 1), (1, 12, 7), (1, 10, 0), (1, 2, 0),\n    (8, 4, 9), (8, 11, 3),\n    (13, 10, 3), (13, 9, 8), (13, 4, 1),\n    (11, 9, 4), (11, 10, 0),\n    (12, 8, 5),\n    (5, 3, 1), (5, 6, 8), (5, 2, 4), (5, 0, 0),\n    (6, 0, 5), (6, 13, 2), (6, 3, 3), (6, 9, 0),\n    (0, 7, 7), (0, 5, 5), (0, 6, 0),\n    (10, 1, 2), (10, 11, 8), (10, 13, 3),\n    (9, 6, 10), (9, 4, 3), (9, 12, 7), (9, 11, 0),\n    (7, 4, 4), (7, 11, 9), (7, 6, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 10\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "1": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 8, 7), (11, 12, 1), (11, 5, 9), (11, 4, 5), (11, 1, 2), (11, 13, 2), (11, 9, 9),\n    (8, 5, 6), (8, 7, 9), (8, 1, 8), (8, 13, 2), (8, 9, 5),\n    (12, 10, 2), (12, 13, 7), (12, 11, 9), (12, 8, 7), (12, 9, 0), (12, 3, 0), (12, 5, 0), (12, 7, 0),\n    (5, 3, 3), (5, 12, 3), (5, 8, 0),\n    (4, 1, 6), (4, 13, 8), (4, 8, 9), (4, 12, 4), (4, 5, 2),\n    (1, 6, 5), (1, 9, 9), (1, 8, 5), (1, 12, 10), (1, 3, 3), (1, 7, 8), (1, 10, 10),\n    (13, 9, 3), (13, 8, 5), (13, 3, 9),\n    (9, 2, 7), (9, 0, 6), (9, 12, 6), (9, 5, 7), (9, 7, 1), (9, 13, 0),\n    (7, 10, 7), (7, 1, 7), (7, 11, 3), (7, 2, 5), (7, 0, 6), (7, 12, 6), (7, 5, 1), (7, 3, 7), (7, 8, 0),\n    (10, 13, 10), (10, 9, 9), (10, 11, 2), (10, 2, 6), (10, 8, 9), (10, 12, 1),\n    (3, 4, 3), (3, 10, 1), (3, 9, 5), (3, 11, 5), (3, 8, 9), (3, 0, 7), (3, 12, 10), (3, 13, 0),\n    (6, 11, 9), (6, 0, 2), (6, 12, 7), (6, 4, 6), (6, 10, 5), (6, 1, 10),\n    (2, 8, 7), (2, 0, 4), (2, 12, 7), (2, 5, 7), (2, 7, 4), (2, 1, 3), (2, 6, 5),\n    (0, 12, 9), (0, 10, 9), (0, 13, 1), (0, 8, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(13, 12)\nprint(max_flow)\n```"}, "2": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (5, 0, 2), (5, 11, 9), (5, 3, 0),\n    (0, 11, 6), (0, 1, 9), (0, 6, 10), (0, 5, 0),\n    (11, 1, 4), (11, 3, 2),\n    (1, 7, 5), (1, 2, 7),\n    (6, 2, 9), (6, 9, 2), (6, 3, 8), (6, 0, 0),\n    (3, 8, 2), (3, 2, 10), (3, 4, 8), (3, 5, 1), (3, 1, 8),\n    (9, 11, 7), (9, 4, 5),\n    (4, 1, 2), (4, 2, 1),\n    (2, 3, 1), (2, 6, 6), (2, 7, 8),\n    (10, 2, 9), (10, 0, 7),\n    (7, 9, 7),\n    (8, 2, 5), (8, 11, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 6\nmax_flow = g.edmonds_karp(3, 6)\nprint(max_flow)\n```"}, "3": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 6, 6), (0, 3, 8), (0, 1, 0),\n    (6, 1, 7),\n    (3, 6, 10), (3, 1, 9), (3, 4, 5), (3, 7, 7), (3, 0, 0),\n    (1, 3, 2), (1, 0, 10), (1, 8, 0),\n    (4, 2, 7),\n    (7, 8, 3), (7, 2, 10), (7, 4, 6),\n    (8, 1, 6), (8, 5, 1), (8, 7, 0),\n    (5, 0, 10), (5, 1, 3), (5, 7, 5),\n    (2, 7, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "4": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 1, 8), (3, 2, 2), (3, 6, 6), (3, 5, 0), (3, 7, 0),\n    (1, 3, 6), (1, 5, 0),\n    (2, 4, 2), (2, 0, 8),\n    (6, 3, 6), (6, 4, 1), (6, 0, 7),\n    (4, 6, 9), (4, 5, 7),\n    (0, 7, 9), (0, 4, 2), (0, 6, 0),\n    (5, 1, 5), (5, 2, 10), (5, 0, 3), (5, 6, 4), (5, 3, 2), (5, 4, 0),\n    (7, 3, 10), (7, 1, 1), (7, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 4 to node 3\nmax_flow = g.edmonds_karp(4, 3)\nprint(max_flow)\n```"}, "5": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 11, 2), (1, 0, 3), (1, 9, 8), (1, 2, 0),\n    (11, 8, 9),\n    (0, 10, 7), (0, 6, 0), (0, 1, 0),\n    (9, 5, 7), (9, 2, 9), (9, 1, 3),\n    (8, 2, 1), (8, 11, 6),\n    (10, 7, 10), (10, 0, 2), (10, 8, 5),\n    (5, 1, 2),\n    (2, 1, 6), (2, 8, 3), (2, 6, 6), (2, 9, 1), (2, 4, 10), (2, 10, 5),\n    (7, 2, 3), (7, 8, 6), (7, 9, 2),\n    (6, 5, 2), (6, 3, 6), (6, 11, 5), (6, 0, 10), (6, 8, 4), (6, 4, 0),\n    (4, 2, 3), (4, 6, 6),\n    (3, 6, 2), (3, 7, 4), (3, 5, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "6": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (6, 2, 5), (6, 8, 7),\n    (2, 4, 9), (2, 9, 7), (2, 1, 3),\n    (8, 2, 5), (8, 7, 1),\n    (4, 3, 7), (4, 1, 1), (4, 2, 5),\n    (9, 3, 8), (9, 6, 8), (9, 11, 7), (9, 4, 2),\n    (1, 7, 7), (1, 8, 6),\n    (7, 0, 1), (7, 1, 3), (7, 2, 5), (7, 5, 8), (7, 11, 0),\n    (0, 4, 7), (0, 9, 2), (0, 5, 2), (0, 7, 6), (0, 10, 9),\n    (5, 0, 3), (5, 2, 5), (5, 3, 0),\n    (10, 11, 3),\n    (3, 5, 4), (3, 9, 0),\n    (11, 3, 2), (11, 7, 10), (11, 9, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 9 to node 0\nmax_flow = g.edmonds_karp(9, 0)\nprint(max_flow)\n```"}, "7": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Ensure reverse capacity exists\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\n\nedges = [\n    (10, 2, 4), (10, 13, 7), (10, 4, 2), (10, 12, 4), (10, 6, 7),\n    (2, 13, 8), (2, 5, 1), (2, 4, 10), (2, 11, 10), (2, 0, 6), (2, 6, 7),\n    (13, 6, 3),\n    (4, 1, 7), (4, 12, 9), (4, 11, 2), (4, 7, 4), (4, 3, 10), (4, 10, 10),\n    (12, 8, 1), (12, 6, 2), (12, 3, 6), (12, 10, 9), (12, 2, 10), (12, 4, 5), (12, 1, 10), (12, 5, 0),\n    (6, 2, 7), (6, 13, 8), (6, 5, 9), (6, 11, 6), (6, 8, 4),\n    (5, 1, 2), (5, 12, 5), (5, 7, 7), (5, 3, 9),\n    (11, 8, 6), (11, 6, 9), (11, 13, 5), (11, 5, 3), (11, 4, 9), (11, 12, 10),\n    (0, 10, 2), (0, 9, 7),\n    (1, 0, 5), (1, 3, 2), (1, 10, 2), (1, 4, 7), (1, 5, 0),\n    (7, 0, 9), (7, 3, 7), (7, 10, 5), (7, 8, 5), (7, 9, 1), (7, 5, 0), (7, 4, 0),\n    (3, 10, 10), (3, 13, 1), (3, 4, 7), (3, 11, 10),\n    (8, 9, 1), (8, 6, 1), (8, 10, 6), (8, 5, 2), (8, 11, 2),\n    (9, 0, 1), (9, 6, 5), (9, 10, 5), (9, 2, 2), (9, 5, 8), (9, 12, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "8": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (14, 2, 1), (14, 9, 5), (14, 0, 7), (14, 13, 2), (14, 1, 9),\n    (2, 11, 8), (2, 7, 6),\n    (9, 10, 8),\n    (0, 6, 9), (0, 8, 1), (0, 9, 6), (0, 7, 0), (0, 4, 0), (0, 11, 0), (0, 14, 0),\n    (13, 4, 7), (13, 14, 8), (13, 7, 7), (13, 3, 0),\n    (1, 14, 6), (1, 11, 3), (1, 6, 6),\n    (11, 0, 6), (11, 13, 1), (11, 6, 6), (11, 1, 4), (11, 14, 3), (11, 2, 0),\n    (7, 0, 9), (7, 3, 6), (7, 2, 5),\n    (10, 2, 1), (10, 11, 5), (10, 8, 3),\n    (6, 1, 9), (6, 7, 1), (6, 10, 1),\n    (8, 7, 2), (8, 9, 10), (8, 10, 6),\n    (4, 6, 6), (4, 7, 6), (4, 0, 2), (4, 3, 0),\n    (3, 6, 9), (3, 13, 4), (3, 4, 8), (3, 7, 0),\n    (12, 6, 1), (12, 9, 6),\n    (5, 10, 10), (5, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 7 to node 0\nmax_flow = g.edmonds_karp(7, 0)\nprint(max_flow)\n```"}, "9": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 6, 2), (5, 3, 3), (5, 14, 2),\n    (6, 3, 5), (6, 9, 8), (6, 14, 7), (6, 7, 10), (6, 5, 0), (6, 8, 0),\n    (3, 2, 7), (3, 8, 7), (3, 5, 0),\n    (14, 5, 8), (14, 6, 4),\n    (9, 14, 8), (9, 6, 6), (9, 10, 8), (9, 7, 0),\n    (7, 6, 2), (7, 2, 3), (7, 8, 2), (7, 10, 3), (7, 9, 8), (7, 11, 5), (7, 4, 2), (7, 13, 0),\n    (2, 13, 9), (2, 4, 3), (2, 3, 0),\n    (8, 0, 9), (8, 12, 10), (8, 13, 7), (8, 6, 10), (8, 2, 4), (8, 1, 5), (8, 3, 0),\n    (10, 12, 8), (10, 13, 5), (10, 14, 10), (10, 5, 8),\n    (11, 0, 3), (11, 14, 9), (11, 7, 7), (11, 5, 8), (11, 2, 8), (11, 3, 2),\n    (4, 2, 10), (4, 1, 8), (4, 8, 6), (4, 0, 4), (4, 13, 10),\n    (13, 7, 3), (13, 2, 2), (13, 1, 10), (13, 12, 2),\n    (1, 11, 4), (1, 0, 5), (1, 13, 6), (1, 14, 6), (1, 4, 9), (1, 7, 9),\n    (12, 6, 8), (12, 2, 6), (12, 8, 4), (12, 11, 8),\n    (0, 12, 4), (0, 14, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(14, 9)\nprint(max_flow)\n```"}, "10": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 3, 4), (2, 7, 9),\n    (3, 5, 9), (3, 2, 0),\n    (7, 4, 9), (7, 2, 5),\n    (5, 6, 5), (5, 4, 6), (5, 3, 0), (5, 0, 0),\n    (4, 0, 9), (4, 7, 0),\n    (6, 3, 3), (6, 5, 0), (6, 0, 0),\n    (0, 6, 4), (0, 2, 8), (0, 5, 4), (0, 4, 0),\n    (1, 3, 4), (1, 4, 9), (1, 2, 5), (1, 5, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "11": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 3, 10), (1, 10, 3), (1, 5, 3), (1, 9, 0),\n    (3, 8, 8), (3, 1, 1), (3, 7, 0),\n    (10, 6, 1), (10, 1, 2), (10, 9, 4), (10, 7, 7), (10, 11, 0),\n    (5, 2, 1), (5, 1, 7), (5, 0, 9),\n    (8, 10, 9), (8, 11, 5), (8, 6, 6), (8, 1, 1), (8, 3, 0),\n    (6, 8, 2), (6, 5, 1), (6, 10, 0), (6, 4, 0),\n    (9, 10, 6), (9, 1, 8), (9, 11, 0),\n    (7, 10, 7), (7, 2, 3), (7, 4, 9), (7, 11, 1), (7, 1, 3), (7, 3, 8), (7, 9, 9),\n    (2, 1, 3), (2, 3, 8), (2, 0, 7), (2, 10, 1),\n    (0, 4, 9), (0, 1, 2), (0, 3, 3), (0, 8, 4),\n    (11, 9, 6), (11, 7, 7), (11, 10, 1), (11, 4, 6),\n    (4, 11, 9), (4, 6, 9), (4, 1, 1), (4, 9, 10), (4, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 6)\nprint(max_flow)\n```"}, "12": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 4, 2), (3, 2, 8), (3, 8, 8), (3, 0, 8), (3, 12, 9), (3, 6, 0),\n    (4, 2, 9), (4, 8, 9), (4, 0, 2), (4, 12, 1), (4, 11, 9), (4, 3, 7), (4, 10, 0),\n    (2, 8, 10), (2, 5, 9), (2, 9, 5), (2, 1, 4), (2, 3, 2),\n    (8, 0, 9), (8, 9, 4), (8, 12, 8), (8, 3, 1), (8, 4, 10), (8, 5, 0),\n    (0, 7, 8), (0, 5, 8), (0, 12, 7), (0, 10, 3), (0, 4, 0), (0, 8, 0), (0, 11, 0), (0, 3, 0),\n    (12, 10, 4), (12, 2, 3), (12, 8, 4), (12, 7, 9), (12, 9, 3),\n    (11, 2, 6), (11, 0, 4), (11, 9, 5), (11, 10, 5), (11, 1, 1), (11, 6, 0),\n    (5, 9, 10), (5, 1, 8), (5, 4, 5), (5, 6, 8), (5, 8, 7), (5, 7, 1), (5, 10, 0),\n    (9, 10, 1), (9, 1, 5), (9, 4, 10), (9, 2, 1), (9, 8, 5),\n    (1, 11, 9), (1, 3, 6), (1, 4, 9), (1, 6, 10), (1, 5, 10),\n    (7, 9, 5), (7, 1, 3), (7, 3, 6), (7, 6, 4),\n    (10, 4, 8), (10, 6, 8), (10, 0, 2), (10, 5, 3),\n    (6, 5, 3), (6, 12, 8), (6, 1, 5), (6, 11, 10), (6, 3, 5), (6, 2, 7), (6, 10, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 0)\nprint(max_flow)\n```"}, "13": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 0, 2), (5, 9, 4), (5, 3, 10), (5, 12, 3),\n    (0, 9, 10), (0, 3, 2), (0, 11, 2), (0, 8, 3), (0, 6, 5), (0, 7, 9), (0, 12, 0),\n    (9, 12, 8), (9, 8, 5), (9, 6, 3), (9, 10, 4), (9, 5, 9), (9, 1, 10), (9, 0, 8),\n    (3, 12, 10), (3, 8, 4), (3, 7, 5), (3, 4, 6), (3, 9, 5),\n    (12, 8, 2), (12, 13, 7), (12, 0, 2), (12, 9, 10),\n    (11, 6, 8), (11, 5, 9), (11, 0, 1), (11, 9, 7),\n    (8, 7, 5), (8, 4, 4), (8, 12, 1), (8, 9, 0),\n    (6, 10, 9), (6, 2, 9), (6, 11, 10), (6, 0, 0), (6, 9, 0), (6, 1, 0),\n    (7, 0, 10), (7, 2, 5),\n    (10, 5, 7), (10, 7, 1), (10, 0, 9), (10, 2, 4), (10, 4, 6), (10, 9, 10), (10, 3, 8), (10, 6, 9), (10, 13, 0),\n    (1, 2, 9), (1, 6, 2), (1, 5, 7), (1, 7, 7), (1, 9, 0),\n    (4, 8, 2), (4, 10, 9), (4, 13, 2),\n    (13, 7, 7), (13, 0, 8), (13, 4, 2), (13, 8, 10), (13, 10, 5), (13, 12, 0),\n    (2, 4, 5), (2, 9, 6), (2, 12, 3), (2, 11, 8), (2, 8, 6), (2, 13, 4), (2, 7, 10), (2, 1, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 10)\nprint(max_flow)\n```"}, "14": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 6, 5), (3, 14, 3), (3, 9, 1), (3, 2, 0),\n    (6, 0, 7), (6, 4, 1), (6, 8, 9), (6, 11, 5), (6, 5, 10), (6, 3, 5),\n    (14, 13, 5), (14, 0, 6), (14, 2, 4), (14, 5, 4), (14, 7, 9),\n    (9, 4, 7), (9, 10, 4), (9, 8, 10), (9, 2, 6), (9, 11, 8), (9, 6, 6), (9, 12, 1),\n    (0, 4, 5), (0, 10, 5), (0, 8, 3), (0, 2, 4), (0, 7, 6), (0, 12, 5), (0, 9, 4), (0, 13, 3),\n    (4, 5, 2), (4, 13, 10),\n    (8, 5, 3), (8, 7, 10), (8, 3, 10), (8, 6, 9), (8, 13, 2),\n    (11, 3, 1), (11, 6, 3), (11, 4, 3), (11, 8, 10), (11, 2, 0), (11, 9, 0),\n    (5, 7, 2), (5, 3, 4), (5, 6, 9), (5, 13, 10), (5, 8, 6), (5, 2, 10),\n    (13, 4, 10), (13, 11, 6), (13, 7, 3), (13, 3, 2), (13, 14, 7),\n    (2, 11, 2), (2, 3, 2), (2, 9, 4),\n    (7, 3, 2), (7, 6, 8), (7, 12, 1), (7, 14, 5), (7, 8, 2),\n    (10, 5, 5), (10, 6, 10), (10, 9, 9),\n    (12, 14, 8), (12, 1, 1), (12, 9, 2), (12, 13, 2), (12, 4, 9), (12, 5, 7), (12, 7, 1),\n    (1, 0, 2), (1, 3, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 11\nmax_flow = g.edmonds_karp(2, 11)\nprint(max_flow)\n```"}, "15": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\ng.add_edge(0, 6, 7)\ng.add_edge(0, 3, 2)\ng.add_edge(6, 7, 1)\ng.add_edge(6, 2, 3)\ng.add_edge(6, 3, 1)\ng.add_edge(6, 1, 7)\ng.add_edge(6, 0, 7)\ng.add_edge(6, 4, 6)\ng.add_edge(3, 0, 2)\ng.add_edge(3, 2, 7)\ng.add_edge(7, 6, 0)\ng.add_edge(7, 5, 0)\ng.add_edge(2, 1, 4)\ng.add_edge(2, 6, 3)\ng.add_edge(2, 5, 1)\ng.add_edge(1, 5, 9)\ng.add_edge(1, 2, 10)\ng.add_edge(1, 3, 4)\ng.add_edge(1, 6, 0)\ng.add_edge(4, 6, 7)\ng.add_edge(4, 2, 6)\ng.add_edge(4, 3, 2)\ng.add_edge(5, 2, 3)\ng.add_edge(5, 1, 7)\ng.add_edge(5, 0, 5)\ng.add_edge(5, 4, 9)\ng.add_edge(5, 7, 2)\n\n# Calculate maximum flow from node 0 to node 7\nmax_flow = g.edmonds_karp(0, 7)\nprint(max_flow)\n```"}, "16": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 2, 1), (1, 0, 2), (1, 3, 2), (1, 8, 5),\n    (2, 0, 8), (2, 9, 6), (2, 6, 2), (2, 4, 6), (2, 7, 6), (2, 5, 10), (2, 1, 0),\n    (0, 9, 2), (0, 4, 2), (0, 5, 8), (0, 1, 0),\n    (3, 6, 9), (3, 1, 8), (3, 5, 5), (3, 10, 8), (3, 9, 0),\n    (8, 0, 7), (8, 6, 9), (8, 7, 9), (8, 1, 0),\n    (9, 3, 3), (9, 8, 6), (9, 1, 3), (9, 2, 1), (9, 0, 0),\n    (6, 8, 3), (6, 1, 9), (6, 2, 6), (6, 3, 2),\n    (4, 8, 6), (4, 10, 1), (4, 0, 10), (4, 9, 4), (4, 6, 5), (4, 2, 0),\n    (7, 10, 8), (7, 0, 3), (7, 3, 10), (7, 4, 6), (7, 8, 0),\n    (5, 8, 9), (5, 1, 7),\n    (10, 2, 10), (10, 4, 8), (10, 3, 0), (10, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 10)\nprint(max_flow)\n```"}, "17": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(5, 6, 8)\ng.add_edge(5, 1, 3)\ng.add_edge(1, 2, 6)\ng.add_edge(2, 6, 8)\ng.add_edge(2, 4, 3)\ng.add_edge(7, 0, 9)\ng.add_edge(7, 3, 3)\ng.add_edge(0, 3, 9)\ng.add_edge(0, 1, 8)\ng.add_edge(3, 0, 0)\ng.add_edge(4, 6, 1)\n\nsource = 0\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "18": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge for residual graph\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 0, 6), (2, 8, 1), (2, 1, 7), (2, 7, 0),\n    (0, 8, 2), (0, 2, 0),\n    (8, 7, 6), (8, 1, 1), (8, 9, 9), (8, 0, 9), (8, 5, 0), (8, 2, 0),\n    (1, 5, 5), (1, 2, 6), (1, 0, 1), (1, 3, 0),\n    (7, 3, 5), (7, 2, 6),\n    (9, 7, 5), (9, 8, 0),\n    (5, 0, 6), (5, 8, 9), (5, 4, 8), (5, 1, 0),\n    (3, 1, 3), (3, 7, 2),\n    (6, 5, 4), (6, 2, 9), (6, 8, 5), (6, 7, 1), (6, 3, 2), (6, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "19": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 7, 4), (1, 6, 10), (1, 3, 4),\n    (7, 5, 7),\n    (6, 0, 8), (6, 8, 1),\n    (3, 8, 0),\n    (8, 3, 8), (8, 0, 6), (8, 6, 0),\n    (4, 2, 10), (4, 6, 2), (4, 0, 6), (4, 5, 3),\n    (2, 1, 2), (2, 4, 1), (2, 9, 1),\n    (9, 7, 1), (9, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 3)\nprint(max_flow)\n```"}, "20": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\ng.add_edge(1, 7, 7)\ng.add_edge(7, 0, 9)\ng.add_edge(0, 6, 10)\ng.add_edge(4, 0, 3)\ng.add_edge(6, 3, 5)\ng.add_edge(6, 4, 7)\ng.add_edge(6, 0, 0)\ng.add_edge(3, 4, 5)\ng.add_edge(3, 6, 0)\ng.add_edge(5, 7, 5)\ng.add_edge(2, 1, 8)\ng.add_edge(2, 0, 8)\ng.add_edge(2, 6, 3)\ng.add_edge(2, 3, 6)\n\n# Calculate maximum flow from node 0 to node 3\nmax_flow = g.edmonds_karp(0, 3)\nprint(max_flow)\n```"}, "21": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 1, 1), (2, 6, 2), (2, 7, 8), (2, 12, 10), (2, 11, 7),\n    (1, 10, 4), (1, 6, 3), (1, 7, 9), (1, 8, 6), (1, 5, 5), (1, 0, 0),\n    (6, 13, 5), (6, 2, 2), (6, 10, 6),\n    (7, 3, 2), (7, 12, 4), (7, 11, 6), (7, 0, 6), (7, 9, 10), (7, 1, 7),\n    (12, 6, 9), (12, 13, 2),\n    (11, 6, 5), (11, 12, 9),\n    (10, 13, 1), (10, 5, 8),\n    (8, 11, 5), (8, 2, 2), (8, 0, 3), (8, 3, 6), (8, 1, 0),\n    (5, 11, 2), (5, 7, 4), (5, 13, 7), (5, 8, 10),\n    (13, 4, 6), (13, 11, 6), (13, 6, 1),\n    (3, 11, 2), (3, 7, 0), (3, 8, 0),\n    (0, 1, 7), (0, 7, 5), (0, 5, 2), (0, 11, 6), (0, 2, 8),\n    (9, 1, 5), (9, 10, 9), (9, 7, 3), (9, 12, 4),\n    (4, 10, 7), (4, 8, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 0\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "22": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 8, 9), (7, 0, 2),\n    (0, 1, 10), (0, 3, 3),\n    (1, 8, 10), (1, 0, 0), (1, 5, 0),\n    (3, 5, 8), (3, 0, 0),\n    (4, 0, 8), (4, 5, 9), (4, 1, 7),\n    (5, 1, 9), (5, 0, 2), (5, 3, 0),\n    (2, 6, 7), (2, 7, 10), (2, 8, 7), (2, 4, 9), (2, 0, 4),\n    (6, 7, 8), (6, 4, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 1)\nprint(max_flow)\n```"}, "23": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (0, 11, 4), (0, 3, 2), (0, 2, 9), (0, 9, 0),\n    (11, 3, 6), (11, 2, 10), (11, 5, 6), (11, 0, 10), (11, 7, 3), (11, 9, 0), (11, 1, 0),\n    (3, 2, 7), (3, 10, 9), (3, 9, 0),\n    (2, 8, 4), (2, 0, 6), (2, 7, 1), (2, 11, 5), (2, 9, 2), (2, 4, 1), (2, 6, 1), (2, 3, 8),\n    (5, 4, 3), (5, 1, 3), (5, 6, 3), (5, 3, 8), (5, 2, 9), (5, 8, 10),\n    (7, 2, 9), (7, 5, 8),\n    (10, 2, 6), (10, 8, 6),\n    (8, 5, 1), (8, 0, 6), (8, 10, 9), (8, 6, 7),\n    (9, 3, 7), (9, 0, 4), (9, 10, 7), (9, 11, 8),\n    (4, 5, 5), (4, 10, 1), (4, 7, 3), (4, 9, 4),\n    (6, 3, 8), (6, 9, 1), (6, 4, 3), (6, 1, 2), (6, 2, 0),\n    (1, 6, 10), (1, 8, 2), (1, 0, 4), (1, 10, 5), (1, 7, 1), (1, 11, 1), (1, 9, 7), (1, 4, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 9 to node 11\nmax_flow = g.edmonds_karp(9, 11)\nprint(max_flow)\n```"}, "24": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 5, 6), (0, 1, 6), (0, 10, 5), (0, 4, 3),\n    (5, 7, 5), (5, 2, 6),\n    (1, 10, 1), (1, 4, 8), (1, 12, 5), (1, 2, 5),\n    (10, 5, 7), (10, 12, 1), (10, 7, 2), (10, 8, 2), (10, 2, 0),\n    (4, 2, 2),\n    (7, 8, 5), (7, 2, 2), (7, 1, 10), (7, 10, 2), (7, 5, 8), (7, 12, 1), (7, 9, 6),\n    (2, 1, 6), (2, 10, 6), (2, 4, 6), (2, 3, 8),\n    (12, 9, 1), (12, 1, 1), (12, 10, 4), (12, 6, 3), (12, 3, 4),\n    (8, 6, 10), (8, 0, 10), (8, 11, 6), (8, 9, 7), (8, 7, 8),\n    (11, 5, 7), (11, 12, 10), (11, 7, 3), (11, 8, 1), (11, 1, 1), (11, 10, 7), (11, 4, 4), (11, 3, 2), (11, 0, 2),\n    (3, 0, 9), (3, 8, 8), (3, 6, 4),\n    (9, 8, 4), (9, 6, 5), (9, 3, 1), (9, 0, 8), (9, 5, 7), (9, 12, 10), (9, 7, 0),\n    (6, 11, 9), (6, 12, 8), (6, 10, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 9)\nprint(max_flow)\n```"}, "25": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 3, 8), (2, 4, 4), (2, 1, 0),\n    (3, 4, 6), (3, 6, 7), (3, 7, 8), (3, 1, 0),\n    (4, 6, 1), (4, 5, 5), (4, 7, 2), (4, 2, 0),\n    (6, 0, 8), (6, 7, 8), (6, 3, 0), (6, 4, 0),\n    (7, 3, 5), (7, 5, 1),\n    (5, 0, 4), (5, 2, 10), (5, 6, 9), (5, 1, 0), (5, 4, 0),\n    (0, 1, 9), (0, 3, 5), (0, 5, 0), (0, 6, 0),\n    (1, 2, 2), (1, 3, 8), (1, 5, 3), (1, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 0)\nprint(max_flow)\n```"}, "26": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 7, 1), (4, 6, 8), (4, 5, 7),\n    (7, 2, 8), (7, 5, 5), (7, 4, 1),\n    (6, 3, 9), (6, 4, 2),\n    (5, 4, 2), (5, 0, 7), (5, 7, 6), (5, 6, 5),\n    (2, 6, 9), (2, 3, 10), (2, 7, 8),\n    (3, 0, 4), (3, 6, 1),\n    (0, 6, 6),\n    (1, 4, 5), (1, 0, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 2)\nprint(max_flow)\n```"}, "27": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 1, 3), (5, 4, 6), (5, 7, 3), (5, 6, 2),\n    (1, 4, 9), (1, 2, 8), (1, 7, 6),\n    (4, 6, 5), (4, 0, 0),\n    (7, 6, 8), (7, 0, 1), (7, 3, 4), (7, 4, 8), (7, 2, 8),\n    (6, 2, 5), (6, 8, 8), (6, 7, 8), (6, 4, 0),\n    (2, 7, 3), (2, 5, 10), (2, 1, 5), (2, 3, 6), (2, 6, 0),\n    (0, 4, 3), (0, 7, 4),\n    (3, 2, 6), (3, 8, 9), (3, 7, 4), (3, 0, 3),\n    (8, 5, 9), (8, 1, 1), (8, 0, 3), (8, 3, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 2)\nprint(max_flow)\n```"}, "28": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 7, 10), (8, 10, 7), (8, 6, 5), (8, 4, 5), (8, 9, 3), (8, 2, 0),\n    (7, 5, 4), (7, 4, 6), (7, 9, 10),\n    (10, 5, 2), (10, 6, 3), (10, 9, 6), (10, 2, 0), (10, 8, 0),\n    (6, 8, 3), (6, 7, 9), (6, 0, 1),\n    (4, 9, 7), (4, 1, 9), (4, 0, 1),\n    (9, 8, 10), (9, 7, 6), (9, 5, 1), (9, 6, 6), (9, 4, 1),\n    (0, 6, 7), (0, 4, 7), (0, 9, 9), (0, 8, 8), (0, 5, 9), (0, 3, 8),\n    (1, 0, 4),\n    (2, 10, 4), (2, 5, 1), (2, 8, 9),\n    (3, 9, 1), (3, 1, 1), (3, 7, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 10)\nprint(max_flow)\n```"}, "29": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (0, 1, 6), (0, 2, 9),\n    (1, 2, 4), (1, 7, 2),\n    (2, 3, 10), (2, 10, 1), (2, 1, 7), (2, 5, 0),\n    (7, 4, 9), (7, 1, 6), (7, 9, 6), (7, 3, 7),\n    (3, 7, 10), (3, 4, 9), (3, 2, 4), (3, 8, 0),\n    (10, 8, 9), (10, 4, 4),\n    (4, 10, 8), (4, 6, 6), (4, 9, 5), (4, 8, 7), (4, 7, 0),\n    (9, 8, 10), (9, 5, 1), (9, 4, 4), (9, 6, 8), (9, 7, 0),\n    (6, 9, 1), (6, 8, 7), (6, 7, 1), (6, 5, 1), (6, 4, 7), (6, 10, 5), (6, 1, 1),\n    (8, 1, 4), (8, 3, 7), (8, 4, 0),\n    (5, 4, 8), (5, 0, 9), (5, 2, 5), (5, 9, 0), (5, 6, 0),\n    (11, 7, 7), (11, 5, 10), (11, 1, 4), (11, 6, 1), (11, 2, 7), (11, 9, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 7 to node 3\nmax_flow = g.edmonds_karp(7, 3)\nprint(max_flow)\n```"}, "30": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 9, 3), (5, 2, 7), (5, 7, 1), (5, 6, 5),\n    (9, 2, 2), (9, 3, 9), (9, 0, 5), (9, 4, 6),\n    (2, 6, 8), (2, 3, 9), (2, 4, 3),\n    (7, 3, 10), (7, 1, 7), (7, 4, 1), (7, 9, 2),\n    (6, 5, 5), (6, 7, 6),\n    (3, 0, 2), (3, 4, 3), (3, 9, 2), (3, 2, 1),\n    (0, 1, 4), (0, 4, 1), (0, 9, 10), (0, 7, 2),\n    (4, 8, 6), (4, 2, 5), (4, 1, 4), (4, 3, 0),\n    (1, 4, 1), (1, 5, 9), (1, 2, 7), (1, 7, 2), (1, 6, 1), (1, 3, 1),\n    (8, 9, 8), (8, 2, 2), (8, 7, 8), (8, 6, 5), (8, 0, 6), (8, 1, 2), (8, 5, 1), (8, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 8)\nprint(max_flow)\n```"}, "31": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 6, 1), (5, 8, 3), (5, 9, 2), (5, 4, 8), (5, 1, 0), (5, 7, 0), (5, 3, 0),\n    (6, 9, 10), (6, 4, 7), (6, 1, 8), (6, 2, 0),\n    (8, 7, 5), (8, 3, 5), (8, 2, 7), (8, 9, 5), (8, 4, 5), (8, 5, 7), (8, 1, 1),\n    (9, 4, 6), (9, 5, 8), (9, 1, 2), (9, 7, 5), (9, 2, 6), (9, 0, 1),\n    (4, 5, 9), (4, 1, 6), (4, 6, 4), (4, 7, 4), (4, 2, 7), (4, 9, 1),\n    (1, 6, 3), (1, 7, 5), (1, 3, 10), (1, 2, 3), (1, 9, 1), (1, 4, 3), (1, 5, 6),\n    (7, 2, 5), (7, 0, 4), (7, 5, 5), (7, 6, 7), (7, 8, 7), (7, 9, 0),\n    (3, 5, 9), (3, 1, 1), (3, 6, 6), (3, 7, 4), (3, 0, 0),\n    (2, 6, 7), (2, 9, 0),\n    (0, 9, 7), (0, 6, 4), (0, 3, 7), (0, 2, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 5)\nprint(max_flow)\n```"}, "32": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the given graph\nedges = [\n    (0, 6, 2), (0, 14, 4), (0, 4, 8), (0, 12, 0), (0, 11, 0),\n    (6, 10, 5), (6, 8, 7), (6, 7, 10), (6, 12, 10), (6, 9, 4), (6, 2, 0),\n    (14, 7, 3),\n    (4, 7, 8), (4, 5, 7), (4, 12, 3), (4, 11, 9), (4, 9, 3), (4, 1, 5), (4, 3, 5), (4, 6, 6), (4, 2, 9), (4, 0, 0), (4, 13, 0),\n    (10, 9, 2), (10, 14, 10),\n    (8, 6, 2), (8, 10, 4), (8, 2, 6),\n    (7, 5, 4), (7, 9, 10), (7, 6, 1), (7, 14, 3), (7, 2, 2), (7, 13, 2), (7, 12, 0),\n    (12, 0, 3), (12, 11, 4), (12, 1, 3), (12, 2, 8), (12, 13, 10), (12, 7, 8),\n    (9, 10, 4), (9, 2, 10), (9, 4, 9), (9, 13, 9), (9, 7, 5), (9, 5, 8), (9, 6, 0),\n    (5, 0, 2), (5, 14, 3), (5, 10, 8), (5, 4, 1), (5, 7, 0),\n    (11, 1, 5), (11, 2, 3), (11, 13, 2), (11, 0, 10), (11, 12, 0),\n    (1, 14, 9), (1, 4, 1), (1, 13, 2), (1, 11, 10), (1, 12, 0),\n    (3, 6, 4), (3, 14, 6), (3, 10, 5), (3, 2, 6), (3, 4, 5), (3, 8, 4), (3, 1, 1), (3, 13, 0),\n    (2, 13, 4), (2, 12, 10), (2, 6, 4), (2, 14, 1), (2, 10, 8),\n    (13, 7, 5), (13, 9, 1), (13, 1, 3), (13, 3, 1), (13, 6, 5), (13, 10, 1), (13, 2, 1), (13, 4, 7), (13, 12, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 12 to node 4\nmax_flow = g.edmonds_karp(12, 4)\nprint(max_flow)\n```"}, "33": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 6, 7), (10, 3, 4), (10, 5, 10), (10, 2, 4), (10, 7, 1), (10, 8, 3),\n    (6, 3, 3), (6, 4, 9), (6, 0, 0),\n    (3, 4, 8), (3, 8, 9), (3, 1, 1), (3, 0, 0), (3, 6, 0),\n    (5, 8, 1), (5, 10, 7), (5, 6, 3), (5, 0, 0),\n    (2, 9, 6), (2, 5, 4), (2, 0, 5),\n    (7, 10, 7), (7, 0, 9), (7, 2, 5), (7, 8, 0),\n    (8, 10, 10), (8, 1, 10), (8, 5, 4), (8, 4, 1), (8, 7, 8), (8, 3, 0),\n    (4, 3, 5),\n    (1, 5, 8), (1, 10, 7), (1, 6, 5),\n    (9, 5, 1), (9, 0, 3), (9, 6, 8),\n    (0, 2, 1), (0, 6, 8), (0, 3, 4), (0, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 7)\nprint(max_flow)\n```"}, "34": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\n\nedges = [\n    (7, 2, 2), (7, 0, 10), (7, 12, 7), (7, 5, 3), (7, 9, 5), (7, 11, 3),\n    (2, 0, 4), (2, 3, 9), (2, 5, 9), (2, 9, 10), (2, 4, 3), (2, 7, 3),\n    (0, 3, 7), (0, 12, 2), (0, 5, 5), (0, 4, 7), (0, 7, 4), (0, 1, 10), (0, 2, 0),\n    (12, 11, 4), (12, 6, 2), (12, 4, 2), (12, 2, 3), (12, 0, 1), (12, 3, 0),\n    (5, 9, 5), (5, 6, 9), (5, 4, 9), (5, 2, 9), (5, 13, 9), (5, 10, 1), (5, 0, 0), (5, 7, 0),\n    (9, 11, 9), (9, 7, 8), (9, 2, 3), (9, 3, 4),\n    (11, 1, 10), (11, 2, 3), (11, 0, 7), (11, 3, 4), (11, 13, 1), (11, 8, 9), (11, 9, 7), (11, 12, 0),\n    (3, 12, 8), (3, 6, 5), (3, 1, 1), (3, 2, 0),\n    (4, 1, 1), (4, 2, 9), (4, 0, 5), (4, 12, 6), (4, 9, 6),\n    (1, 0, 5), (1, 12, 7), (1, 9, 3), (1, 11, 9), (1, 4, 4), (1, 7, 4),\n    (6, 4, 3), (6, 7, 10), (6, 1, 9), (6, 12, 2), (6, 8, 7), (6, 11, 2), (6, 3, 0), (6, 5, 0), (6, 13, 0),\n    (13, 5, 5), (13, 9, 9), (13, 6, 8), (13, 3, 7), (13, 12, 8), (13, 11, 0),\n    (10, 8, 6), (10, 5, 3), (10, 9, 5), (10, 11, 7), (10, 2, 5), (10, 0, 2),\n    (8, 5, 8), (8, 11, 9), (8, 6, 9), (8, 7, 8), (8, 3, 5), (8, 10, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "35": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 7, 7), (4, 5, 9), (4, 1, 4), (4, 0, 0),\n    (7, 5, 7), (7, 3, 6),\n    (5, 0, 3), (5, 2, 8), (5, 3, 6),\n    (1, 0, 1), (1, 4, 8), (1, 2, 9), (1, 5, 7),\n    (3, 6, 7), (3, 5, 8),\n    (0, 4, 6), (0, 6, 7), (0, 7, 5), (0, 5, 1), (0, 1, 9),\n    (2, 6, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 4)\nprint(max_flow)\n```"}, "36": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 12, 5), (4, 6, 5),\n    (12, 6, 5), (12, 1, 2), (12, 9, 4), (12, 5, 10), (12, 3, 3), (12, 7, 8), (12, 10, 0), (12, 8, 0),\n    (6, 0, 0), (6, 13, 0), (6, 12, 0),\n    (1, 9, 10), (1, 10, 3), (1, 13, 1), (1, 2, 0),\n    (9, 11, 10), (9, 7, 7), (9, 1, 10),\n    (5, 2, 6), (5, 0, 10), (5, 8, 1), (5, 1, 10),\n    (3, 14, 7), (3, 8, 6), (3, 13, 5), (3, 12, 9), (3, 1, 7),\n    (7, 2, 10), (7, 10, 3),\n    (14, 7, 5), (14, 13, 1), (14, 0, 1), (14, 3, 2), (14, 2, 0),\n    (13, 6, 7), (13, 1, 4), (13, 10, 7), (13, 0, 3), (13, 7, 7), (13, 2, 0), (13, 14, 0), (13, 3, 0),\n    (0, 14, 7), (0, 13, 1), (0, 12, 1), (0, 6, 1), (0, 2, 0),\n    (2, 0, 2), (2, 14, 10), (2, 8, 7), (2, 13, 3), (2, 1, 6), (2, 9, 2), (2, 7, 0),\n    (10, 3, 10), (10, 7, 6), (10, 12, 6), (10, 1, 5), (10, 9, 7),\n    (8, 12, 10), (8, 1, 7), (8, 9, 6), (8, 5, 9), (8, 0, 4), (8, 11, 5), (8, 3, 6), (8, 14, 1), (8, 2, 0),\n    (11, 8, 10), (11, 9, 6), (11, 5, 3), (11, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 6\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "37": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 8, 2), (10, 5, 7), (10, 0, 1), (10, 3, 0),\n    (8, 5, 2), (8, 1, 6), (8, 4, 4), (8, 3, 0), (8, 10, 0),\n    (0, 5, 10), (0, 1, 3), (0, 10, 0),\n    (1, 4, 9), (1, 9, 6), (1, 7, 6), (1, 8, 0), (1, 6, 0), (1, 0, 0),\n    (4, 3, 1), (4, 8, 6), (4, 1, 4),\n    (9, 8, 10), (9, 5, 3), (9, 10, 4),\n    (3, 7, 1), (3, 8, 1), (3, 2, 2), (3, 10, 9),\n    (7, 5, 10), (7, 2, 9), (7, 6, 10), (7, 3, 0),\n    (2, 6, 7), (2, 4, 6), (2, 3, 0),\n    (6, 1, 4), (6, 7, 5), (6, 8, 2), (6, 5, 6), (6, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 1)\nprint(max_flow)\n```"}, "38": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (8, 0, 2), (8, 5, 8), (8, 4, 9), (8, 3, 1),\n    (0, 7, 9), (0, 8, 0), (0, 2, 0),\n    (5, 3, 6), (5, 7, 4), (5, 8, 7),\n    (4, 2, 3), (4, 8, 0),\n    (3, 6, 6), (3, 1, 4), (3, 2, 7), (3, 0, 1), (3, 5, 4), (3, 4, 8), (3, 8, 0),\n    (7, 1, 9), (7, 0, 0),\n    (2, 0, 1), (2, 8, 7), (2, 4, 0),\n    (6, 8, 1), (6, 0, 6),\n    (1, 2, 10), (1, 3, 6), (1, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 5\nmax_flow = g.edmonds_karp(8, 5)\nprint(max_flow)\n```"}, "39": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 3, 6), (0, 4, 8), (0, 1, 5), (0, 2, 1),\n    (3, 9, 1), (3, 11, 9), (3, 1, 5), (3, 0, 2), (3, 4, 0),\n    (4, 1, 4), (4, 2, 5), (4, 3, 9), (4, 8, 0), (4, 7, 0),\n    (1, 2, 7), (1, 10, 10), (1, 6, 9), (1, 8, 7), (1, 5, 0), (1, 11, 0), (1, 4, 0), (1, 3, 0),\n    (2, 6, 3), (2, 9, 1), (2, 5, 5), (2, 11, 5), (2, 8, 4),\n    (9, 11, 9), (9, 2, 9), (9, 10, 9), (9, 3, 5), (9, 6, 2),\n    (11, 8, 4), (11, 1, 5), (11, 2, 7), (11, 10, 2), (11, 3, 6), (11, 5, 0), (11, 6, 0),\n    (10, 9, 8), (10, 8, 8), (10, 1, 9), (10, 5, 0), (10, 7, 0),\n    (6, 5, 4), (6, 11, 7), (6, 2, 1), (6, 7, 2), (6, 10, 3), (6, 3, 3),\n    (8, 4, 1), (8, 1, 2), (8, 3, 7), (8, 5, 0),\n    (5, 11, 3), (5, 8, 3), (5, 1, 4), (5, 7, 10), (5, 10, 7),\n    (7, 10, 2), (7, 6, 1), (7, 5, 8), (7, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 1)\nprint(max_flow)\n```"}, "40": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 8, 1), (4, 2, 3),\n    (8, 10, 3), (8, 13, 1), (8, 5, 4), (8, 7, 9), (8, 11, 3), (8, 12, 0),\n    (2, 10, 3), (2, 6, 10), (2, 1, 1), (2, 11, 2), (2, 9, 4), (2, 4, 5),\n    (10, 13, 8), (10, 5, 8), (10, 1, 3), (10, 9, 4), (10, 4, 4), (10, 0, 6),\n    (13, 7, 1), (13, 12, 7), (13, 8, 9), (13, 0, 6), (13, 10, 4), (13, 3, 1),\n    (5, 9, 2), (5, 13, 4),\n    (7, 12, 9), (7, 11, 3), (7, 10, 2), (7, 5, 8), (7, 1, 9),\n    (11, 0, 10), (11, 2, 3), (11, 10, 3), (11, 3, 6), (11, 13, 4), (11, 5, 7), (11, 1, 10), (11, 12, 5), (11, 8, 0),\n    (6, 7, 9), (6, 11, 4), (6, 8, 4), (6, 10, 10), (6, 13, 4),\n    (1, 7, 9), (1, 11, 7), (1, 9, 6), (1, 8, 7), (1, 13, 1), (1, 5, 9),\n    (9, 2, 10), (9, 13, 2), (9, 1, 3), (9, 12, 6), (9, 11, 7),\n    (0, 5, 3), (0, 7, 3), (0, 9, 6), (0, 4, 4),\n    (12, 11, 4), (12, 8, 10), (12, 2, 7), (12, 13, 2), (12, 1, 9), (12, 7, 9),\n    (3, 1, 3), (3, 12, 3), (3, 9, 10), (3, 4, 4), (3, 2, 6), (3, 11, 0), (3, 13, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 3)\nprint(max_flow)\n```"}, "41": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 9, 8), (7, 4, 1), (7, 11, 0),\n    (9, 5, 10), (9, 0, 5), (9, 3, 3), (9, 11, 2),\n    (4, 7, 7), (4, 2, 6), (4, 8, 9), (4, 10, 5), (4, 11, 0),\n    (5, 0, 6), (5, 11, 9), (5, 6, 0),\n    (0, 5, 4),\n    (3, 1, 5), (3, 11, 7), (3, 5, 8), (3, 10, 3), (3, 4, 10), (3, 6, 0), (3, 9, 0),\n    (11, 9, 5), (11, 4, 1), (11, 7, 2), (11, 6, 7), (11, 8, 6), (11, 5, 0),\n    (2, 1, 3), (2, 0, 9), (2, 4, 1),\n    (10, 0, 4), (10, 2, 2), (10, 6, 5), (10, 1, 8), (10, 9, 9),\n    (1, 5, 3), (1, 2, 8), (1, 3, 0),\n    (6, 3, 1), (6, 5, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 1)\nprint(max_flow)\n```"}, "42": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 8, 1), (11, 9, 8), (11, 5, 5),\n    (8, 10, 9), (8, 1, 5), (8, 7, 9), (8, 6, 5), (8, 11, 8), (8, 4, 10), (8, 3, 1), (8, 12, 10), (8, 9, 0),\n    (9, 8, 1), (9, 0, 0),\n    (5, 0, 3), (5, 3, 8), (5, 12, 8), (5, 8, 4), (5, 9, 5), (5, 7, 10), (5, 6, 5),\n    (10, 11, 7), (10, 4, 2), (10, 6, 0), (10, 8, 0), (10, 3, 0),\n    (1, 7, 10), (1, 5, 5), (1, 2, 5), (1, 11, 3), (1, 4, 7), (1, 8, 8), (1, 10, 3),\n    (7, 4, 7), (7, 3, 9), (7, 8, 7), (7, 1, 9), (7, 9, 1), (7, 0, 0),\n    (6, 5, 4), (6, 2, 9), (6, 10, 4), (6, 7, 5), (6, 0, 0),\n    (4, 7, 10), (4, 2, 8), (4, 0, 3),\n    (3, 12, 1), (3, 10, 4), (3, 9, 2), (3, 7, 1),\n    (12, 8, 4), (12, 1, 5), (12, 9, 2), (12, 3, 5),\n    (0, 9, 2), (0, 7, 7), (0, 6, 1),\n    (2, 11, 5), (2, 4, 9), (2, 3, 9), (2, 12, 5), (2, 1, 6), (2, 6, 2), (2, 5, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 10)\nprint(max_flow)\n```"}, "43": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges with capacities\nedges = [\n    (11, 1, 6), (11, 12, 10), (11, 6, 10), (11, 8, 5), (11, 10, 0),\n    (11, 0, 0), (11, 5, 0), (11, 9, 0), (11, 4, 0), (11, 7, 0), (11, 2, 0),\n    (1, 4, 1), (1, 9, 5), (1, 11, 8), (1, 5, 8), (1, 10, 0), (1, 12, 0),\n    (12, 6, 6), (12, 9, 9), (12, 3, 2), (12, 10, 1), (12, 1, 3), (12, 4, 2),\n    (12, 7, 7), (12, 8, 0),\n    (6, 9, 4),\n    (8, 10, 6), (8, 0, 1), (8, 5, 7), (8, 12, 9), (8, 9, 8),\n    (4, 7, 4), (4, 12, 5), (4, 6, 5), (4, 3, 5), (4, 2, 5), (4, 11, 6),\n    (4, 0, 1), (4, 5, 6),\n    (9, 3, 6), (9, 8, 10), (9, 2, 8), (9, 11, 2), (9, 0, 9), (9, 5, 7),\n    (9, 4, 9), (9, 12, 6),\n    (5, 1, 2), (5, 4, 2), (5, 3, 6), (5, 8, 3), (5, 10, 5), (5, 11, 9), (5, 0, 4),\n    (3, 8, 6), (3, 2, 2), (3, 10, 9), (3, 1, 3), (3, 12, 10), (3, 6, 5), (3, 9, 7),\n    (10, 11, 2), (10, 5, 8), (10, 1, 8), (10, 12, 7), (10, 9, 4), (10, 8, 0),\n    (7, 12, 5), (7, 6, 9), (7, 11, 4), (7, 0, 10), (7, 1, 9),\n    (0, 12, 8), (0, 6, 10), (0, 2, 1), (0, 11, 7), (0, 8, 0),\n    (2, 10, 9), (2, 11, 6), (2, 4, 5), (2, 12, 4), (2, 6, 1), (2, 8, 10), (2, 9, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 11\nmax_flow = g.edmonds_karp(8, 11)\nprint(max_flow)\n```"}, "44": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 7, 6), (5, 3, 3), (5, 2, 10), (5, 6, 1), (5, 1, 1),\n    (7, 3, 7), (7, 2, 8), (7, 6, 10), (7, 1, 4),\n    (3, 2, 7), (3, 7, 3),\n    (2, 6, 3), (2, 1, 8),\n    (6, 5, 5), (6, 0, 6), (6, 2, 9), (6, 7, 0),\n    (1, 7, 8), (1, 3, 9), (1, 6, 1),\n    (0, 4, 1), (0, 2, 8),\n    (4, 2, 8), (4, 7, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 5)\nprint(max_flow)\n```"}, "45": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, capacity):\n        self.graph[u][v] = capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 6, 6), (5, 2, 0),\n    (6, 7, 4), (6, 5, 9),\n    (7, 1, 6), (7, 5, 4), (7, 2, 4), (7, 6, 0),\n    (0, 4, 1),\n    (4, 3, 5), (4, 1, 8), (4, 2, 0),\n    (3, 1, 3), (3, 0, 10), (3, 6, 7),\n    (1, 5, 3), (1, 3, 9), (1, 7, 5), (1, 2, 0), (1, 4, 0),\n    (2, 1, 2), (2, 4, 7), (2, 5, 1)\n]\n\nfor u, v, capacity in edges:\n    g.add_edge(u, v, capacity)\n\nsource = 2\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "46": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (13, 7, 2), (13, 1, 10),\n    (7, 3, 9), (7, 12, 7), (7, 0, 8), (7, 2, 4),\n    (1, 2, 4), (1, 13, 6), (1, 10, 3),\n    (3, 4, 9), (3, 2, 7), (3, 5, 9),\n    (12, 9, 2), (12, 7, 0),\n    (0, 1, 9), (0, 8, 10), (0, 10, 5), (0, 4, 8),\n    (2, 7, 6), (2, 1, 8), (2, 10, 0),\n    (10, 2, 5), (10, 9, 4), (10, 5, 10),\n    (9, 8, 8), (9, 5, 10), (9, 6, 4), (9, 10, 0), (9, 12, 0),\n    (8, 12, 9), (8, 1, 9),\n    (5, 3, 7), (5, 0, 5), (5, 9, 6), (5, 10, 0),\n    (6, 11, 6), (6, 1, 2), (6, 2, 5), (6, 9, 3),\n    (11, 7, 8), (11, 10, 1),\n    (4, 0, 6), (4, 2, 9), (4, 8, 6), (4, 7, 1), (4, 10, 3), (4, 12, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 10 to node 9\nmax_flow = g.edmonds_karp(10, 9)\nprint(max_flow)\n```"}, "47": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 7, 9), (6, 8, 9), (6, 11, 0),\n    (7, 2, 3),\n    (8, 6, 7), (8, 4, 2),\n    (4, 10, 5), (4, 6, 6), (4, 2, 1), (4, 8, 0),\n    (9, 7, 4),\n    (1, 11, 1), (1, 2, 5),\n    (11, 6, 6), (11, 7, 10), (11, 1, 4),\n    (3, 4, 9), (3, 7, 9),\n    (0, 5, 1), (0, 4, 6), (0, 10, 4), (0, 3, 2),\n    (5, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 4)\nprint(max_flow)\n```"}, "48": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 7, 10), (5, 3, 7), (5, 9, 2), (5, 1, 9), (5, 10, 9), (5, 0, 2), (5, 8, 10),\n    (7, 9, 3), (7, 4, 4), (7, 5, 1), (7, 1, 0), (7, 8, 0), (7, 3, 0), (7, 0, 0),\n    (3, 9, 6), (3, 1, 7), (3, 4, 9), (3, 2, 10), (3, 7, 7),\n    (9, 1, 2), (9, 10, 9), (9, 8, 4), (9, 5, 1), (9, 7, 2), (9, 3, 6),\n    (1, 10, 3), (1, 0, 3), (1, 7, 8), (1, 3, 2), (1, 9, 0),\n    (10, 0, 1), (10, 8, 8), (10, 1, 7), (10, 9, 0),\n    (0, 8, 7), (0, 7, 1), (0, 1, 1), (0, 6, 8), (0, 4, 5), (0, 10, 10),\n    (8, 7, 5), (8, 6, 3), (8, 10, 6), (8, 9, 0),\n    (4, 3, 3), (4, 6, 8),\n    (2, 5, 1), (2, 9, 7), (2, 10, 8),\n    (6, 10, 5), (6, 0, 8), (6, 9, 10), (6, 1, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 7)\nprint(max_flow)\n```"}, "49": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 8, 4), (3, 1, 7), (3, 0, 6),\n    (8, 0, 9), (8, 9, 7),\n    (1, 4, 6),\n    (0, 5, 4), (0, 8, 0),\n    (9, 0, 3), (9, 8, 0), (9, 2, 0),\n    (4, 3, 10), (4, 2, 10), (4, 5, 2), (4, 1, 9),\n    (5, 8, 5), (5, 2, 10), (5, 0, 0),\n    (6, 8, 10), (6, 1, 9),\n    (2, 5, 4), (2, 9, 2),\n    (7, 4, 4), (7, 9, 6), (7, 3, 10), (7, 6, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 9\nmax_flow = g.edmonds_karp(8, 9)\nprint(max_flow)\n```"}, "50": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 0, 1), (2, 10, 10), (2, 5, 6), (2, 12, 1), (2, 4, 6), (2, 14, 10), (2, 6, 6),\n    (0, 10, 4), (0, 11, 10), (0, 8, 9), (0, 2, 3), (0, 5, 0),\n    (10, 8, 8), (10, 5, 9), (10, 4, 3), (10, 7, 9), (10, 14, 8), (10, 2, 7), (10, 13, 9), (10, 0, 2), (10, 1, 3),\n    (5, 2, 9), (5, 0, 9),\n    (12, 2, 8), (12, 8, 1),\n    (4, 14, 7), (4, 13, 8), (4, 3, 10), (4, 8, 9), (4, 5, 6), (4, 10, 0), (4, 11, 0),\n    (14, 13, 8), (14, 0, 2), (14, 10, 2),\n    (6, 2, 3), (6, 3, 3), (6, 5, 3),\n    (11, 4, 9), (11, 0, 0),\n    (8, 12, 4), (8, 9, 3), (8, 6, 3), (8, 2, 1), (8, 13, 2), (8, 10, 5), (8, 0, 0),\n    (7, 9, 3), (7, 14, 7), (7, 0, 2), (7, 11, 6), (7, 10, 0), (7, 3, 0),\n    (13, 4, 5), (13, 2, 3),\n    (1, 5, 7), (1, 4, 8), (1, 14, 7), (1, 6, 1),\n    (3, 7, 9), (3, 9, 1), (3, 6, 8), (3, 4, 0),\n    (9, 0, 10), (9, 8, 1), (9, 5, 4), (9, 7, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 7\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "51": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(3, 7, 6)\ng.add_edge(3, 1, 4)\ng.add_edge(3, 0, 8)\ng.add_edge(3, 6, 7)\ng.add_edge(1, 0, 2)\ng.add_edge(1, 6, 2)\ng.add_edge(1, 3, 3)\ng.add_edge(1, 5, 2)\ng.add_edge(1, 4, 6)\ng.add_edge(1, 2, 7)\ng.add_edge(1, 7, 8)\ng.add_edge(0, 1, 3)\ng.add_edge(0, 3, 0)\ng.add_edge(6, 1, 2)\ng.add_edge(6, 0, 7)\ng.add_edge(6, 3, 0)\ng.add_edge(5, 2, 4)\ng.add_edge(5, 0, 3)\ng.add_edge(5, 6, 6)\ng.add_edge(5, 3, 9)\ng.add_edge(5, 1, 0)\ng.add_edge(4, 2, 7)\ng.add_edge(4, 3, 10)\ng.add_edge(2, 6, 5)\ng.add_edge(2, 5, 4)\ng.add_edge(2, 4, 7)\ng.add_edge(2, 1, 0)\n\nmax_flow = g.edmonds_karp(3, 2)\nprint(max_flow)\n```"}, "52": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 2, 3), (8, 1, 4), (2, 8, 5), (1, 5, 1), (1, 4, 6), (1, 8, 8),\n    (5, 6, 1), (4, 0, 6), (4, 7, 0), (3, 5, 10), (3, 4, 6), (3, 2, 3),\n    (3, 6, 0), (3, 0, 0), (6, 5, 2), (6, 8, 7), (6, 2, 7), (6, 3, 9),\n    (6, 7, 0), (0, 4, 8), (0, 3, 3), (7, 6, 5), (7, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "53": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (5, 3, 3), (5, 2, 9), (5, 8, 7), (5, 6, 2), (5, 11, 6), (5, 10, 0), (5, 12, 0),\n    (3, 6, 4), (3, 0, 9),\n    (2, 4, 6), (2, 1, 1), (2, 6, 9), (2, 5, 7),\n    (8, 3, 2), (8, 9, 10), (8, 2, 2), (8, 4, 3),\n    (6, 0, 1), (6, 3, 9), (6, 9, 8), (6, 12, 7), (6, 8, 8),\n    (11, 3, 1), (11, 10, 6), (11, 9, 3), (11, 5, 0),\n    (0, 3, 1), (0, 10, 3), (0, 12, 9), (0, 8, 9), (0, 6, 9),\n    (4, 9, 6), (4, 2, 6),\n    (1, 6, 2), (1, 5, 3), (1, 12, 1),\n    (9, 7, 9), (9, 0, 10), (9, 5, 9),\n    (12, 4, 3), (12, 1, 9), (12, 7, 9), (12, 5, 10), (12, 3, 8), (12, 0, 0),\n    (10, 9, 4), (10, 2, 8), (10, 12, 6), (10, 1, 1), (10, 6, 9), (10, 5, 1), (10, 3, 9), (10, 0, 0),\n    (7, 5, 10), (7, 9, 7), (7, 12, 8), (7, 4, 9), (7, 8, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 0 to node 11\nmax_flow = g.edmonds_karp(0, 11)\nprint(max_flow)\n```"}, "54": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 4, 6), (0, 3, 6), (0, 9, 1), (0, 7, 1), (0, 1, 2), (0, 5, 7), (0, 6, 6),\n    (4, 5, 6), (4, 6, 2), (4, 8, 10),\n    (3, 7, 2), (3, 5, 2), (3, 8, 0),\n    (9, 7, 1), (9, 5, 4), (9, 0, 7), (9, 3, 3), (9, 8, 0),\n    (7, 5, 1), (7, 0, 2), (7, 4, 3),\n    (1, 5, 3), (1, 2, 2), (1, 3, 6), (1, 0, 0),\n    (5, 6, 7), (5, 3, 2), (5, 9, 6), (5, 7, 3), (5, 1, 9), (5, 4, 0),\n    (6, 2, 10), (6, 9, 7), (6, 7, 9),\n    (8, 4, 8), (8, 3, 9), (8, 9, 10), (8, 7, 9), (8, 6, 9),\n    (2, 5, 4), (2, 6, 9), (2, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "55": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 5, 7), (0, 4, 6), (0, 2, 9), (0, 8, 2), (0, 1, 0),\n    (5, 3, 7),\n    (4, 1, 7),\n    (2, 10, 3), (2, 7, 6), (2, 9, 0), (2, 0, 0),\n    (8, 9, 8), (8, 10, 1),\n    (3, 0, 2), (3, 9, 1), (3, 2, 1),\n    (1, 0, 7), (1, 9, 0),\n    (10, 4, 5),\n    (7, 5, 5), (7, 6, 6), (7, 9, 5), (7, 2, 8),\n    (9, 2, 3), (9, 1, 4), (9, 8, 3), (9, 5, 5), (9, 6, 8),\n    (6, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 7)\nprint(max_flow)\n```"}, "56": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge for residual graph\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 10, 9), (10, 0, 8), (10, 4, 3), (10, 7, 0),\n    (0, 1, 1), (0, 2, 6), (0, 7, 0), (0, 10, 0),\n    (4, 7, 7), (4, 10, 2), (4, 5, 2), (4, 8, 6),\n    (1, 6, 3), (1, 2, 5), (1, 8, 8), (1, 4, 6), (1, 5, 0), (1, 0, 0),\n    (6, 8, 8), (6, 4, 6), (6, 1, 3),\n    (2, 5, 4), (2, 8, 6), (2, 4, 8), (2, 1, 7), (2, 10, 8), (2, 6, 5), (2, 0, 0),\n    (8, 10, 6), (8, 4, 0), (8, 1, 0), (8, 2, 0),\n    (5, 1, 4), (5, 4, 0),\n    (7, 10, 9), (7, 0, 1), (7, 9, 8), (7, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 4 to node 8\nmax_flow = g.edmonds_karp(4, 8)\nprint(max_flow)\n```"}, "57": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the provided graph\nedges = [\n    (14, 0, 10), (14, 6, 8), (14, 2, 0),\n    (0, 13, 1), (0, 10, 9), (0, 7, 5), (0, 9, 0), (0, 14, 0),\n    (6, 4, 10), (6, 11, 5), (6, 3, 8), (6, 5, 10), (6, 7, 7), (6, 8, 6), (6, 0, 10), (6, 13, 7),\n    (13, 6, 10),\n    (10, 8, 0), (10, 7, 0), (10, 0, 0),\n    (7, 8, 7), (7, 10, 7), (7, 3, 6), (7, 5, 1),\n    (4, 8, 6), (4, 5, 0),\n    (11, 9, 6), (11, 2, 6), (11, 5, 0), (11, 1, 0),\n    (3, 7, 5), (3, 8, 5), (3, 5, 0),\n    (5, 1, 2), (5, 4, 2), (5, 11, 7), (5, 3, 8),\n    (8, 2, 10), (8, 10, 7), (8, 14, 4), (8, 4, 0), (8, 3, 0),\n    (2, 14, 10), (2, 3, 5), (2, 6, 5), (2, 11, 0),\n    (9, 14, 7), (9, 0, 7), (9, 11, 0),\n    (1, 11, 1), (1, 5, 0),\n    (12, 14, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 10\nmax_flow = g.edmonds_karp(5, 10)\nprint(max_flow)\n```"}, "58": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 3, 7), (6, 2, 4), (6, 5, 7), (6, 0, 10),\n    (3, 0, 7), (3, 6, 5),\n    (2, 0, 1), (2, 1, 9), (2, 6, 4),\n    (5, 0, 1), (5, 6, 3), (5, 7, 8),\n    (0, 1, 1), (0, 4, 9), (0, 3, 0),\n    (1, 4, 3), (1, 7, 7), (1, 2, 2), (1, 5, 4), (1, 0, 0),\n    (7, 3, 7), (7, 5, 1), (7, 0, 9), (7, 6, 6), (7, 1, 0),\n    (4, 3, 5), (4, 0, 6), (4, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 7\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "59": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 2, 9),\n    (2, 3, 1),\n    (2, 5, 3),\n    (2, 7, 0),\n    (3, 7, 2),\n    (3, 4, 1),\n    (3, 1, 5),\n    (3, 2, 0),\n    (5, 2, 7),\n    (5, 7, 8),\n    (5, 0, 10),\n    (4, 2, 5),\n    (4, 1, 5),\n    (4, 6, 3),\n    (4, 3, 5),\n    (4, 7, 1),\n    (1, 6, 7),\n    (1, 3, 7),\n    (1, 0, 10),\n    (6, 3, 10),\n    (6, 2, 9),\n    (6, 1, 5),\n    (7, 0, 5),\n    (7, 4, 2),\n    (7, 2, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 4\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "60": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 7, 2), (0, 4, 0),\n    (7, 5, 2), (7, 6, 2), (7, 1, 9), (7, 0, 0),\n    (5, 0, 4), (5, 8, 1), (5, 2, 1),\n    (6, 4, 10),\n    (1, 8, 1),\n    (8, 2, 6),\n    (2, 6, 4), (2, 7, 1), (2, 0, 8),\n    (4, 0, 10), (4, 6, 0),\n    (3, 1, 3), (3, 7, 9), (3, 5, 2), (3, 4, 2), (3, 0, 7), (3, 6, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 7)\nprint(max_flow)\n```"}, "61": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 10, 5), (3, 4, 0), (3, 12, 0),\n    (10, 11, 6), (10, 3, 0),\n    (11, 7, 4), (11, 3, 4), (11, 9, 7), (11, 12, 4),\n    (5, 12, 2), (5, 10, 3), (5, 3, 5),\n    (12, 4, 4), (12, 6, 1), (12, 3, 5), (12, 7, 0),\n    (4, 7, 4), (4, 3, 2),\n    (9, 7, 4), (9, 13, 8), (9, 6, 10),\n    (7, 12, 5), (7, 4, 0),\n    (0, 10, 6),\n    (2, 11, 1), (2, 0, 5),\n    (1, 9, 2),\n    (8, 6, 6), (8, 5, 7), (8, 2, 9), (8, 1, 8), (8, 4, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 10)\nprint(max_flow)\n```"}, "62": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(2, 3, 3)\ng.add_edge(2, 5, 9)\ng.add_edge(2, 1, 5)\ng.add_edge(3, 1, 4)\ng.add_edge(3, 2, 0)\ng.add_edge(1, 0, 5)\ng.add_edge(1, 2, 0)\ng.add_edge(1, 3, 0)\ng.add_edge(0, 2, 2)\ng.add_edge(0, 7, 5)\ng.add_edge(6, 7, 8)\ng.add_edge(6, 1, 2)\ng.add_edge(7, 4, 5)\ng.add_edge(7, 1, 6)\ng.add_edge(7, 0, 6)\ng.add_edge(7, 2, 1)\n\nmax_flow = g.edmonds_karp(2, 1)\nprint(max_flow)\n```"}, "63": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 12, 10), (7, 2, 9), (7, 8, 2), (7, 9, 4), (7, 5, 3), (7, 4, 6), (7, 11, 0),\n    (12, 2, 3), (12, 8, 7), (12, 5, 9), (12, 10, 9), (12, 4, 3), (12, 0, 1), (12, 6, 9),\n    (2, 8, 10), (2, 3, 2), (2, 9, 1), (2, 10, 2), (2, 4, 1), (2, 1, 7), (2, 0, 0),\n    (8, 9, 1), (8, 5, 7), (8, 0, 2), (8, 11, 10), (8, 1, 2), (8, 12, 0),\n    (9, 10, 6), (9, 7, 9), (9, 1, 4), (9, 0, 0), (9, 2, 0), (9, 3, 0), (9, 8, 0), (9, 5, 0), (9, 4, 0), (9, 6, 0),\n    (5, 4, 3), (5, 0, 7), (5, 7, 6), (5, 11, 4), (5, 12, 7), (5, 8, 4), (5, 9, 3),\n    (4, 0, 7), (4, 6, 2), (4, 11, 10), (4, 2, 8), (4, 9, 5), (4, 5, 10), (4, 1, 0),\n    (10, 4, 5), (10, 0, 2), (10, 6, 2), (10, 2, 7), (10, 8, 9), (10, 9, 5), (10, 5, 1), (10, 12, 0),\n    (0, 11, 8), (0, 12, 5), (0, 2, 7), (0, 9, 5), (0, 10, 2),\n    (6, 12, 6), (6, 2, 3), (6, 9, 3), (6, 5, 4), (6, 10, 5), (6, 3, 0),\n    (3, 9, 7), (3, 5, 5), (3, 6, 3), (3, 12, 8), (3, 11, 0), (3, 2, 0),\n    (1, 10, 1), (1, 4, 3), (1, 7, 8), (1, 11, 9), (1, 12, 4), (1, 2, 0),\n    (11, 12, 9), (11, 3, 8), (11, 7, 5), (11, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 9)\nprint(max_flow)\n```"}, "64": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 9, 1), (0, 8, 3), (0, 6, 5), (0, 3, 6), (0, 4, 8), (0, 1, 0),\n    (8, 10, 3), (8, 0, 4), (8, 4, 0),\n    (6, 2, 7),\n    (3, 10, 8), (3, 5, 9), (3, 6, 3), (3, 0, 0),\n    (4, 1, 5), (4, 8, 4),\n    (10, 7, 6), (10, 1, 4), (10, 8, 1), (10, 6, 3),\n    (2, 0, 6), (2, 7, 2), (2, 6, 8),\n    (5, 3, 0),\n    (1, 8, 7), (1, 10, 7), (1, 2, 3), (1, 4, 10), (1, 0, 4),\n    (7, 9, 4), (7, 6, 8), (7, 0, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "65": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 1, 7), (10, 3, 9), (10, 5, 4), (10, 2, 2), (10, 9, 5), (10, 6, 9),\n    (1, 9, 2), (1, 0, 1), (1, 10, 7), (1, 8, 0),\n    (3, 5, 7), (3, 2, 9), (3, 9, 5), (3, 6, 8), (3, 8, 5), (3, 0, 0),\n    (5, 6, 1), (5, 4, 6), (5, 8, 7),\n    (2, 7, 8), (2, 0, 9),\n    (9, 5, 9),\n    (6, 0, 6), (6, 7, 0),\n    (0, 3, 5), (0, 4, 10), (0, 6, 0),\n    (8, 0, 5), (8, 1, 4), (8, 3, 9), (8, 2, 4),\n    (4, 8, 1), (4, 0, 9), (4, 10, 6),\n    (7, 6, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 1)\nprint(max_flow)\n```"}, "66": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 10, 10), (11, 5, 4), (11, 2, 9),\n    (10, 0, 9), (10, 5, 0),\n    (5, 12, 1), (5, 10, 9), (5, 3, 0), (5, 1, 0),\n    (2, 11, 6), (2, 1, 10), (2, 13, 7),\n    (0, 13, 10), (0, 4, 7), (0, 7, 6), (0, 10, 7), (0, 1, 6), (0, 12, 10),\n    (12, 13, 8), (12, 4, 8), (12, 5, 0), (12, 1, 0), (12, 0, 0),\n    (1, 12, 3), (1, 5, 3), (1, 3, 0),\n    (13, 4, 2), (13, 11, 5), (13, 7, 3), (13, 14, 7), (13, 8, 5), (13, 6, 5), (13, 0, 0), (13, 12, 0),\n    (7, 5, 7), (7, 0, 3), (7, 3, 2), (7, 14, 2), (7, 8, 1), (7, 9, 3), (7, 6, 3), (7, 11, 7), (7, 13, 0),\n    (3, 4, 9), (3, 5, 7), (3, 1, 9),\n    (14, 6, 3), (14, 4, 6), (14, 11, 8), (14, 13, 0),\n    (8, 6, 8), (8, 7, 6), (8, 14, 10), (8, 13, 0),\n    (9, 2, 6), (9, 10, 7), (9, 1, 5), (9, 12, 1), (9, 0, 3),\n    (6, 4, 6), (6, 7, 8), (6, 1, 6), (6, 13, 0), (6, 14, 0),\n    (4, 0, 10), (4, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 7)\nprint(max_flow)\n```"}, "67": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 2, 6), (9, 4, 4), (9, 8, 0),\n    (2, 11, 6), (2, 9, 2), (2, 1, 6), (2, 10, 4), (2, 0, 0),\n    (4, 8, 5), (4, 11, 7), (4, 3, 5), (4, 1, 0), (4, 7, 0),\n    (11, 3, 9), (11, 2, 8), (11, 4, 4), (11, 8, 1), (11, 5, 7),\n    (1, 2, 9), (1, 4, 9), (1, 7, 3), (1, 3, 2),\n    (10, 6, 1), (10, 8, 1), (10, 0, 5), (10, 5, 4),\n    (8, 0, 1), (8, 9, 9), (8, 1, 1), (8, 10, 7), (8, 4, 8),\n    (3, 7, 7), (3, 1, 0),\n    (7, 5, 4), (7, 3, 4), (7, 4, 2), (7, 1, 0),\n    (5, 11, 10), (5, 1, 6), (5, 4, 5), (5, 6, 3), (5, 0, 1), (5, 7, 0),\n    (6, 0, 3), (6, 11, 3), (6, 9, 2), (6, 1, 3), (6, 10, 5), (6, 5, 0),\n    (0, 5, 7), (0, 9, 5), (0, 1, 1), (0, 2, 10), (0, 7, 9), (0, 8, 0), (0, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 2)\nprint(max_flow)\n```"}, "68": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 7, 7), (3, 2, 10), (3, 0, 5), (3, 14, 0),\n    (7, 8, 10), (7, 0, 5),\n    (2, 1, 8), (2, 5, 5), (2, 4, 9), (2, 3, 0),\n    (0, 13, 3), (0, 4, 10), (0, 14, 3), (0, 10, 1),\n    (8, 0, 7), (8, 3, 10), (8, 2, 9), (8, 6, 1),\n    (1, 11, 4), (1, 0, 3), (1, 14, 1), (1, 2, 0),\n    (5, 13, 6),\n    (4, 9, 9), (4, 5, 7),\n    (13, 12, 7),\n    (14, 3, 1), (14, 10, 0),\n    (10, 14, 9), (10, 6, 0),\n    (12, 4, 7), (12, 2, 5), (12, 10, 2),\n    (9, 12, 10), (9, 11, 10), (9, 4, 7),\n    (11, 3, 7), (11, 9, 5), (11, 12, 8), (11, 8, 8), (11, 1, 0),\n    (6, 10, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 6\nsink = 11\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "69": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 1, 9), (2, 14, 10), (2, 3, 7), (2, 7, 5), (2, 13, 4), (2, 5, 10),\n    (2, 0, 7), (2, 10, 0), (2, 12, 0), (2, 11, 0), (2, 4, 0),\n    (1, 11, 4), (1, 14, 8), (1, 10, 4), (1, 4, 8), (1, 9, 10), (1, 6, 8),\n    (1, 0, 8), (1, 2, 3), (1, 7, 0),\n    (14, 10, 4), (14, 12, 9), (14, 6, 10),\n    (3, 8, 3), (3, 13, 6), (3, 12, 5), (3, 5, 3), (3, 6, 10), (3, 0, 7),\n    (7, 6, 1), (7, 2, 6), (7, 1, 5), (7, 11, 5), (7, 14, 2), (7, 12, 0), (7, 4, 0),\n    (13, 6, 1), (13, 11, 8), (13, 14, 10), (13, 3, 8),\n    (5, 6, 7), (5, 11, 6), (5, 9, 7), (5, 8, 6), (5, 12, 9),\n    (0, 12, 3),\n    (11, 13, 9), (11, 2, 10), (11, 12, 0),\n    (10, 8, 2), (10, 2, 4), (10, 14, 2),\n    (4, 7, 7), (4, 12, 7), (4, 6, 6), (4, 0, 10), (4, 2, 8), (4, 14, 4), (4, 10, 1),\n    (9, 12, 2), (9, 6, 1), (9, 1, 1), (9, 10, 2), (9, 4, 10), (9, 5, 0),\n    (6, 10, 4), (6, 4, 4), (6, 7, 1), (6, 14, 0),\n    (12, 5, 4), (12, 2, 1), (12, 11, 3), (12, 14, 4), (12, 10, 8), (12, 4, 8), (12, 7, 1),\n    (8, 12, 8), (8, 0, 9), (8, 9, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(14, 1)\nprint(max_flow)\n```"}, "70": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 3, 9), (5, 8, 5),\n    (3, 8, 6), (3, 0, 3), (3, 2, 8), (3, 9, 7), (3, 6, 8),\n    (8, 6, 9), (8, 3, 6),\n    (0, 6, 1), (0, 7, 1), (0, 3, 9),\n    (2, 5, 6), (2, 1, 2),\n    (9, 5, 7), (9, 0, 8), (9, 2, 7),\n    (1, 2, 1), (1, 5, 9),\n    (4, 7, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "71": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 5, 5), (10, 11, 10), (10, 1, 4), (10, 8, 9), (10, 6, 5), (10, 7, 8),\n    (5, 11, 7), (5, 6, 5), (5, 3, 3), (5, 7, 6), (5, 10, 9), (5, 8, 0),\n    (11, 2, 6), (11, 7, 6), (11, 5, 7),\n    (1, 9, 5), (1, 0, 7), (1, 6, 3), (1, 3, 8), (1, 10, 4), (1, 11, 2), (1, 8, 0),\n    (8, 0, 6), (8, 2, 4), (8, 3, 3), (8, 5, 1), (8, 1, 6), (8, 9, 6),\n    (6, 3, 8), (6, 5, 5), (6, 9, 1), (6, 0, 6), (6, 2, 3),\n    (7, 10, 4), (7, 5, 9), (7, 11, 4), (7, 1, 8), (7, 8, 8), (7, 0, 4), (7, 3, 10),\n    (3, 11, 1), (3, 1, 8), (3, 9, 1), (3, 0, 1), (3, 4, 9), (3, 6, 0), (3, 8, 0), (3, 5, 0),\n    (2, 6, 2), (2, 4, 5), (2, 8, 5),\n    (9, 2, 9), (9, 6, 3), (9, 3, 2), (9, 10, 2), (9, 1, 8),\n    (0, 2, 2), (0, 7, 2), (0, 11, 3), (0, 8, 5),\n    (4, 5, 7), (4, 11, 2), (4, 1, 6), (4, 0, 1), (4, 6, 8), (4, 2, 0), (4, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 4)\nprint(max_flow)\n```"}, "72": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 0, 6), (8, 4, 2), (8, 1, 4), (8, 10, 1), (8, 3, 6), (8, 6, 6),\n    (0, 4, 7), (0, 5, 8), (0, 7, 8), (0, 8, 6), (0, 1, 0),\n    (4, 5, 2), (4, 9, 2), (4, 1, 3), (4, 3, 3), (4, 6, 8), (4, 8, 7),\n    (1, 10, 10), (1, 2, 6), (1, 6, 10), (1, 8, 2), (1, 0, 6), (1, 7, 2),\n    (10, 2, 8), (10, 8, 6), (10, 0, 7), (10, 9, 2), (10, 7, 6),\n    (3, 7, 8),\n    (6, 4, 5), (6, 5, 4), (6, 9, 4), (6, 10, 8),\n    (5, 7, 7), (5, 1, 1), (5, 2, 10), (5, 3, 4), (5, 4, 6),\n    (7, 1, 9), (7, 2, 7), (7, 6, 10), (7, 0, 4), (7, 5, 8), (7, 3, 0),\n    (9, 7, 9), (9, 1, 2), (9, 2, 2), (9, 3, 10), (9, 6, 9), (9, 4, 9),\n    (2, 3, 7), (2, 6, 5), (2, 5, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 0)\nprint(max_flow)\n```"}, "73": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        while queue:\n            u = queue.popleft()\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 2, 4), (4, 7, 9), (4, 5, 1), (4, 1, 7),\n    (2, 0, 4), (2, 7, 6), (2, 6, 5), (2, 3, 8),\n    (7, 1, 8), (7, 3, 10), (7, 0, 5),\n    (5, 0, 10),\n    (1, 3, 6), (1, 0, 8), (1, 5, 5), (1, 6, 0),\n    (0, 7, 9), (0, 5, 8), (0, 4, 6), (0, 6, 7), (0, 3, 9), (0, 2, 0), (0, 1, 0),\n    (6, 2, 9), (6, 1, 7),\n    (3, 5, 3), (3, 1, 9), (3, 6, 2), (3, 2, 0), (3, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 3)\nprint(max_flow)\n```"}, "74": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (13, 7, 9), (13, 5, 4), (7, 3, 4), (7, 6, 6), (7, 2, 7),\n    (5, 1, 2), (3, 1, 8), (6, 5, 5), (2, 7, 7), (2, 5, 4),\n    (2, 14, 8), (1, 0, 5), (1, 9, 9), (1, 6, 6), (14, 10, 9),\n    (14, 12, 3), (14, 11, 4), (14, 9, 4), (14, 6, 10), (14, 2, 0),\n    (12, 3, 3), (0, 10, 3), (0, 7, 6), (9, 13, 8), (11, 2, 2),\n    (11, 5, 4), (10, 2, 4), (10, 11, 4), (10, 8, 7), (10, 14, 7),\n    (8, 2, 9), (8, 3, 7), (8, 9, 5), (8, 10, 0), (4, 12, 2),\n    (4, 10, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 8)\nprint(max_flow)\n```"}, "75": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge for residual graph\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 0, 6), (7, 2, 8), (7, 5, 0),\n    (0, 7, 3), (0, 3, 2), (0, 1, 7), (0, 5, 0),\n    (2, 3, 3), (2, 6, 4), (2, 0, 10), (2, 5, 8), (2, 7, 0), (2, 4, 0),\n    (3, 2, 7), (3, 5, 0), (3, 0, 0),\n    (1, 5, 5), (1, 7, 5), (1, 4, 9), (1, 0, 0),\n    (6, 0, 4), (6, 5, 4), (6, 2, 3), (6, 4, 0),\n    (5, 7, 5), (5, 4, 5), (5, 3, 1), (5, 0, 6),\n    (4, 6, 9), (4, 1, 2), (4, 2, 4), (4, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 2)\nprint(max_flow)\n```"}, "76": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (6, 12, 5), (6, 3, 9), (6, 4, 6), (6, 8, 4),\n    (12, 2, 5), (12, 13, 1), (12, 5, 2), (12, 9, 6), (12, 10, 0),\n    (3, 2, 2), (3, 5, 1), (3, 7, 4),\n    (4, 10, 1), (4, 12, 7),\n    (8, 3, 9),\n    (2, 11, 1), (2, 10, 8), (2, 3, 0),\n    (13, 4, 6), (13, 11, 3), (13, 0, 7),\n    (5, 1, 3), (5, 3, 0),\n    (9, 10, 5), (9, 3, 5), (9, 11, 0), (9, 1, 0), (9, 12, 0),\n    (10, 12, 7), (10, 11, 5), (10, 2, 0),\n    (11, 9, 8), (11, 2, 0),\n    (0, 12, 7),\n    (1, 11, 6), (1, 9, 7), (1, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 9\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "77": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 6, 5), (3, 2, 10), (3, 10, 0),\n    (6, 1, 10), (6, 4, 3), (6, 3, 0),\n    (2, 10, 4), (2, 11, 3), (2, 8, 3), (2, 3, 0),\n    (1, 2, 5), (1, 6, 7), (1, 8, 5), (1, 9, 9),\n    (4, 3, 9), (4, 9, 8), (4, 1, 2), (4, 2, 10),\n    (10, 3, 10), (10, 8, 6),\n    (11, 2, 4), (11, 7, 3),\n    (8, 5, 1), (8, 10, 0), (8, 2, 0), (8, 1, 0), (8, 7, 0),\n    (7, 10, 3), (7, 6, 8), (7, 8, 2), (7, 11, 0),\n    (9, 1, 6), (9, 0, 1), (9, 10, 7), (9, 3, 5), (9, 11, 4),\n    (5, 0, 8), (5, 3, 5), (5, 8, 2),\n    (0, 3, 8), (0, 9, 10), (0, 1, 4), (0, 7, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 10 to node 8\nmax_flow = g.edmonds_karp(10, 8)\nprint(max_flow)\n```"}, "78": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 4, 8), (3, 11, 7), (3, 0, 6), (3, 6, 7), (3, 1, 0),\n    (4, 11, 7), (4, 0, 1), (4, 12, 9), (4, 6, 9),\n    (11, 5, 6), (11, 0, 2), (11, 3, 9),\n    (0, 2, 4), (0, 3, 5), (0, 4, 8), (0, 11, 1), (0, 7, 8), (0, 5, 7),\n    (6, 3, 6), (6, 9, 1), (6, 4, 5), (6, 10, 5), (6, 0, 8), (6, 12, 7), (6, 7, 0),\n    (12, 8, 2), (12, 3, 5), (12, 4, 3), (12, 1, 8), (12, 0, 4), (12, 2, 4), (12, 9, 0),\n    (5, 1, 1), (5, 10, 2), (5, 0, 0),\n    (2, 10, 9), (2, 7, 3), (2, 1, 8), (2, 0, 10),\n    (7, 1, 1), (7, 2, 5), (7, 6, 10), (7, 9, 2), (7, 11, 8),\n    (9, 5, 9), (9, 12, 10), (9, 6, 2), (9, 1, 0),\n    (10, 11, 1), (10, 0, 5), (10, 8, 2), (10, 6, 6), (10, 9, 8), (10, 4, 2), (10, 2, 0), (10, 5, 0),\n    (1, 0, 5), (1, 3, 2), (1, 9, 6), (1, 11, 9), (1, 7, 9), (1, 2, 0),\n    (8, 6, 3), (8, 9, 5), (8, 4, 5), (8, 10, 3), (8, 5, 4), (8, 12, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 10\nmax_flow = g.edmonds_karp(2, 10)\nprint(max_flow)\n```"}, "79": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 6, 1), (7, 10, 5), (7, 0, 8), (7, 2, 0),\n    (10, 4, 8), (10, 0, 1),\n    (0, 7, 1), (0, 2, 1), (0, 11, 0),\n    (4, 8, 5),\n    (2, 9, 8), (2, 7, 6),\n    (1, 11, 4), (1, 8, 6),\n    (11, 4, 2), (11, 0, 4), (11, 9, 0),\n    (8, 2, 2),\n    (3, 9, 2), (3, 10, 6),\n    (9, 11, 10), (9, 2, 10),\n    (5, 7, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 7)\nprint(max_flow)\n```"}, "80": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 6, 3), (4, 5, 8), (4, 1, 7), (4, 7, 0),\n    (6, 3, 1), (6, 2, 7), (6, 7, 0),\n    (5, 1, 3), (5, 4, 3), (5, 7, 0), (5, 2, 0),\n    (1, 7, 5), (1, 5, 7),\n    (3, 4, 9), (3, 6, 6),\n    (2, 0, 10), (2, 5, 10), (2, 1, 3), (2, 7, 0), (2, 6, 0),\n    (7, 6, 1), (7, 5, 10), (7, 1, 10), (7, 2, 2), (7, 4, 8),\n    (0, 5, 3), (0, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "81": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 4, 5), (4, 5, 3), (4, 6, 3), (4, 7, 8),\n    (5, 2, 5), (5, 9, 1), (5, 8, 8), (6, 1, 7), (6, 8, 0),\n    (7, 3, 9), (7, 1, 1), (8, 5, 7), (8, 6, 8), (8, 7, 3),\n    (8, 2, 5), (8, 9, 5), (2, 8, 10), (2, 3, 10), (2, 4, 8),\n    (9, 0, 1), (9, 8, 3), (9, 1, 7), (9, 3, 0), (9, 5, 0),\n    (1, 6, 10), (1, 9, 2), (1, 8, 1), (3, 5, 8), (3, 9, 5),\n    (3, 0, 7), (3, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 9)\nprint(max_flow)\n```"}, "82": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (5, 6, 4), (5, 10, 4), (5, 9, 2), (5, 2, 7), (5, 4, 2), (5, 7, 7), (5, 1, 0),\n    (6, 9, 2), (6, 8, 5), (6, 1, 9),\n    (10, 9, 8), (10, 8, 9),\n    (9, 3, 3), (9, 11, 8), (9, 8, 7),\n    (2, 7, 9), (2, 5, 1), (2, 1, 9), (2, 10, 8),\n    (4, 7, 5), (4, 11, 7), (4, 2, 8), (4, 1, 0), (4, 5, 0),\n    (7, 9, 7), (7, 2, 5),\n    (8, 6, 5), (8, 7, 7),\n    (1, 10, 10), (1, 9, 5), (1, 4, 3), (1, 8, 7), (1, 5, 10), (1, 3, 0),\n    (3, 8, 7), (3, 12, 6), (3, 0, 8), (3, 1, 6), (3, 9, 8),\n    (11, 0, 6), (11, 1, 5), (11, 10, 8), (11, 2, 2), (11, 4, 7), (11, 7, 9), (11, 9, 0),\n    (12, 6, 8), (12, 9, 9), (12, 7, 8), (12, 8, 5),\n    (0, 1, 1), (0, 9, 9), (0, 8, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 4\nmax_flow = g.edmonds_karp(3, 4)\nprint(max_flow)\n```"}, "83": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 7, 2), (9, 11, 9), (9, 6, 3),\n    (7, 11, 8),\n    (11, 8, 2), (11, 10, 4), (11, 1, 5),\n    (6, 7, 10), (6, 11, 6),\n    (8, 2, 9), (8, 3, 2), (8, 11, 0), (8, 10, 0),\n    (10, 8, 3), (10, 11, 0),\n    (1, 0, 10), (1, 11, 0),\n    (0, 6, 9), (0, 4, 7), (0, 1, 5),\n    (4, 3, 1), (4, 0, 0),\n    (3, 11, 9), (3, 8, 8), (3, 9, 7), (3, 4, 0),\n    (2, 8, 0),\n    (5, 0, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 11 to node 2\nmax_flow = g.edmonds_karp(11, 2)\nprint(max_flow)\n```"}, "84": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (10, 5, 3), (10, 7, 3), (10, 6, 6),\n    (5, 8, 3), (5, 1, 9), (5, 6, 1),\n    (7, 9, 1), (7, 6, 0),\n    (6, 9, 8), (6, 2, 1), (6, 8, 2), (6, 0, 10), (6, 7, 7),\n    (8, 3, 7), (8, 4, 10), (8, 6, 2), (8, 5, 9), (8, 0, 0),\n    (1, 0, 4), (1, 9, 4), (1, 5, 9), (1, 8, 9), (1, 3, 9),\n    (9, 3, 4), (9, 4, 5), (9, 0, 7), (9, 7, 5), (9, 6, 0),\n    (2, 3, 6), (2, 1, 2), (2, 0, 3), (2, 6, 0),\n    (0, 7, 6), (0, 2, 1), (0, 8, 8), (0, 4, 6), (0, 6, 0),\n    (3, 1, 3), (3, 4, 2), (3, 2, 2), (3, 5, 6), (3, 8, 7), (3, 9, 0),\n    (4, 7, 8), (4, 9, 8), (4, 8, 10), (4, 3, 5), (4, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 4\nmax_flow = g.edmonds_karp(6, 4)\nprint(max_flow)\n```"}, "85": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 5, 8), (3, 1, 1), (3, 7, 5), (3, 2, 0),\n    (5, 1, 4), (5, 4, 10), (5, 7, 8), (5, 6, 0),\n    (1, 5, 0), (1, 7, 0), (1, 3, 0),\n    (7, 6, 6), (7, 1, 9), (7, 5, 0), (7, 3, 0),\n    (4, 5, 6), (4, 6, 6),\n    (6, 2, 4), (6, 0, 1), (6, 5, 3), (6, 4, 0),\n    (2, 3, 7), (2, 5, 9), (2, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "86": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 2, 2),\n    (2, 5, 3),\n    (2, 3, 2),\n    (2, 7, 0),\n    (5, 3, 2),\n    (5, 1, 6),\n    (5, 2, 4),\n    (5, 4, 0),\n    (5, 0, 0),\n    (3, 7, 9),\n    (3, 2, 2),\n    (3, 4, 2),\n    (3, 5, 3),\n    (1, 7, 9),\n    (1, 3, 3),\n    (7, 2, 9),\n    (7, 0, 1),\n    (7, 4, 2),\n    (7, 6, 3),\n    (7, 3, 0),\n    (4, 5, 7),\n    (4, 0, 1),\n    (4, 3, 0),\n    (4, 7, 0),\n    (0, 6, 4),\n    (0, 5, 8),\n    (0, 7, 7),\n    (0, 2, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 5)\nprint(max_flow)\n```"}, "87": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 9, 8), (8, 0, 5), (8, 3, 3), (8, 4, 0),\n    (9, 7, 7), (9, 3, 8), (9, 1, 4), (9, 4, 0),\n    (0, 3, 5), (0, 2, 6), (0, 7, 8), (0, 8, 0),\n    (3, 6, 6), (3, 1, 3), (3, 5, 5), (3, 9, 2), (3, 7, 4), (3, 8, 0),\n    (7, 3, 9), (7, 5, 5), (7, 9, 9), (7, 2, 6), (7, 6, 0),\n    (1, 5, 3), (1, 0, 7), (1, 3, 5), (1, 6, 0),\n    (2, 7, 2), (2, 0, 10), (2, 3, 6), (2, 6, 7), (2, 8, 5), (2, 5, 5),\n    (6, 1, 5), (6, 4, 1), (6, 9, 7), (6, 7, 2), (6, 0, 8),\n    (5, 9, 7), (5, 2, 10), (5, 8, 4), (5, 1, 8), (5, 4, 0), (5, 7, 0), (5, 3, 0),\n    (4, 9, 9), (4, 6, 5), (4, 8, 9), (4, 5, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 5)\nprint(max_flow)\n```"}, "88": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 7, 1), (1, 2, 4), (1, 8, 6), (1, 3, 0),\n    (7, 5, 7), (7, 0, 0),\n    (2, 4, 10), (2, 5, 9), (2, 1, 0), (2, 6, 0),\n    (8, 3, 10), (8, 0, 7), (8, 6, 8), (8, 2, 9),\n    (5, 2, 9), (5, 3, 4), (5, 0, 3), (5, 7, 0),\n    (4, 7, 6), (4, 6, 1), (4, 5, 5), (4, 0, 1),\n    (3, 1, 6), (3, 6, 8), (3, 0, 0),\n    (0, 7, 2), (0, 3, 7),\n    (6, 5, 8), (6, 2, 5), (6, 8, 4), (6, 1, 6), (6, 4, 10), (6, 7, 4), (6, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 2)\nprint(max_flow)\n```"}, "89": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 3, 3), (7, 2, 2),\n    (3, 4, 6), (3, 8, 3), (3, 1, 7), (3, 6, 2), (3, 0, 5), (3, 5, 0),\n    (2, 4, 3),\n    (4, 7, 10), (4, 1, 1), (4, 0, 1),\n    (8, 1, 7), (8, 5, 9),\n    (1, 5, 1),\n    (6, 5, 3), (6, 0, 4), (6, 8, 1), (6, 3, 0),\n    (0, 2, 4), (0, 4, 8), (0, 7, 6), (0, 1, 1),\n    (5, 3, 2), (5, 2, 9), (5, 4, 1), (5, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 6)\nprint(max_flow)\n```"}, "90": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 10, 1), (3, 11, 3), (3, 12, 5), (3, 7, 0),\n    (10, 5, 1), (10, 4, 1), (10, 11, 4), (10, 7, 3), (10, 13, 6), (10, 8, 1), (10, 1, 1), (10, 3, 0),\n    (11, 6, 10), (11, 12, 7), (11, 7, 5), (11, 13, 7), (11, 8, 1), (11, 1, 7), (11, 3, 0), (11, 10, 0), (11, 9, 0),\n    (12, 13, 7), (12, 3, 4), (12, 5, 3), (12, 9, 4),\n    (5, 6, 5), (5, 10, 9),\n    (4, 2, 8), (4, 7, 4), (4, 13, 6), (4, 8, 2),\n    (7, 13, 1), (7, 3, 5), (7, 8, 5), (7, 1, 3),\n    (13, 5, 2), (13, 11, 1), (13, 7, 0),\n    (8, 10, 7), (8, 11, 4), (8, 13, 4), (8, 7, 0),\n    (1, 10, 4), (1, 6, 3), (1, 12, 7), (1, 8, 4), (1, 7, 0),\n    (6, 12, 3), (6, 0, 7), (6, 4, 4), (6, 2, 9), (6, 9, 6), (6, 11, 2), (6, 1, 0),\n    (9, 11, 7), (9, 8, 7), (9, 2, 6), (9, 12, 0),\n    (0, 7, 6), (0, 3, 9), (0, 8, 2), (0, 1, 4), (0, 4, 1), (0, 2, 2), (0, 11, 2),\n    (2, 13, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 11)\nprint(max_flow)\n```"}, "91": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 4, 4), (2, 1, 1), (2, 7, 9), (2, 0, 0),\n    (4, 0, 1), (4, 6, 7), (4, 2, 7),\n    (1, 8, 7), (1, 4, 4), (1, 5, 0), (1, 2, 0),\n    (0, 8, 4), (0, 2, 10), (0, 3, 0),\n    (6, 0, 2),\n    (8, 3, 8),\n    (3, 5, 8), (3, 0, 2), (3, 4, 1),\n    (5, 1, 10), (5, 7, 7), (5, 8, 7), (5, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "92": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 7, 8), (4, 5, 0), (4, 1, 0), (4, 10, 0),\n    (7, 5, 1), (7, 1, 1), (7, 8, 6), (7, 3, 2),\n    (5, 2, 2), (5, 4, 3), (5, 8, 7), (5, 7, 2),\n    (1, 4, 9), (1, 10, 2), (1, 7, 6), (1, 9, 1), (1, 6, 0),\n    (8, 0, 4), (8, 7, 0),\n    (3, 0, 9), (3, 7, 0),\n    (0, 10, 2), (0, 6, 6), (0, 8, 0), (0, 3, 0),\n    (10, 7, 3), (10, 9, 7), (10, 5, 10), (10, 2, 9), (10, 4, 4), (10, 0, 0),\n    (6, 9, 9), (6, 1, 7), (6, 3, 6), (6, 0, 0),\n    (9, 5, 2), (9, 2, 4), (9, 1, 6), (9, 8, 8), (9, 7, 8),\n    (2, 7, 4), (2, 9, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 4)\nprint(max_flow)\n```"}, "93": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (0, 7, 9), (0, 3, 9), (0, 5, 10), (0, 1, 4), (0, 4, 1),\n    (7, 3, 8), (7, 1, 1), (7, 0, 9),\n    (3, 5, 9), (3, 1, 10), (3, 0, 3),\n    (5, 6, 5), (5, 1, 1), (5, 4, 7), (5, 0, 7), (5, 3, 7),\n    (1, 6, 8), (1, 3, 0),\n    (4, 0, 10), (4, 7, 6), (4, 3, 1), (4, 5, 10), (4, 6, 6),\n    (6, 5, 10), (6, 1, 0), (6, 4, 0),\n    (2, 1, 3), (2, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 6\nmax_flow = g.edmonds_karp(3, 6)\nprint(max_flow)\n```"}, "94": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 9, 5), (2, 10, 7), (2, 5, 8), (2, 4, 0),\n    (9, 4, 9), (9, 6, 5), (9, 8, 3),\n    (10, 1, 10), (10, 5, 4), (10, 3, 1), (10, 4, 6), (10, 8, 1), (10, 2, 0),\n    (5, 7, 2), (5, 6, 4),\n    (4, 6, 2), (4, 2, 3), (4, 0, 8), (4, 9, 0),\n    (6, 0, 1), (6, 9, 9),\n    (8, 10, 2), (8, 0, 6), (8, 7, 3), (8, 9, 0), (8, 1, 0),\n    (1, 2, 9), (1, 7, 6), (1, 8, 5), (1, 10, 0),\n    (3, 6, 8), (3, 8, 3), (3, 9, 6),\n    (7, 1, 3), (7, 5, 2), (7, 0, 9),\n    (0, 7, 3), (0, 8, 4), (0, 6, 0), (0, 4, 0),\n    (11, 10, 4), (11, 7, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 8\nmax_flow = g.edmonds_karp(6, 8)\nprint(max_flow)\n```"}, "95": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 6, 2), (2, 9, 9), (2, 3, 8),\n    (6, 2, 3),\n    (9, 1, 4), (9, 2, 4), (9, 0, 6),\n    (3, 7, 9), (3, 9, 5), (3, 5, 4), (3, 2, 0),\n    (0, 2, 4), (0, 7, 2), (0, 9, 0),\n    (7, 1, 2), (7, 5, 1), (7, 0, 0),\n    (5, 4, 9), (5, 3, 0), (5, 7, 0),\n    (4, 2, 7), (4, 5, 0),\n    (8, 9, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 4)\nprint(max_flow)\n```"}, "96": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 10, 7), (4, 1, 5), (10, 7, 1), (10, 1, 8), (10, 6, 6), (10, 4, 4),\n    (1, 6, 7), (1, 10, 9), (1, 8, 2), (7, 1, 6), (7, 4, 7), (7, 0, 2), (7, 3, 4), (7, 5, 0),\n    (6, 4, 1), (6, 10, 5), (6, 7, 7), (6, 8, 6), (6, 1, 7), (8, 6, 8), (8, 4, 8), (8, 10, 9),\n    (8, 0, 2), (8, 3, 4), (8, 9, 7), (8, 5, 0), (0, 3, 5), (0, 9, 10), (0, 1, 3), (0, 6, 2),\n    (0, 2, 10), (0, 10, 10), (0, 5, 0), (0, 7, 0), (0, 8, 0), (3, 9, 6), (3, 7, 2), (3, 8, 3),\n    (3, 2, 6), (3, 0, 3), (3, 5, 0), (9, 8, 3), (9, 1, 5), (9, 10, 1), (2, 8, 3), (2, 1, 9),\n    (2, 5, 6), (5, 0, 6), (5, 3, 4), (5, 7, 2), (5, 8, 9), (5, 6, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 0)\nprint(max_flow)\n```"}, "97": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 1, 9), (2, 6, 8), (2, 4, 2), (2, 0, 0),\n    (1, 6, 2), (1, 0, 1),\n    (6, 2, 9), (6, 0, 5), (6, 3, 0),\n    (4, 1, 5),\n    (0, 1, 8), (0, 6, 2), (0, 3, 10), (0, 2, 8),\n    (3, 0, 6), (3, 6, 7),\n    (8, 0, 7),\n    (5, 6, 4), (5, 1, 7),\n    (7, 1, 5), (7, 3, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 2\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "98": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 4, 6), (10, 7, 1), (10, 3, 9), (10, 11, 8), (10, 0, 4), (10, 12, 0),\n    (4, 6, 7), (4, 7, 7), (4, 1, 8), (4, 3, 6), (4, 12, 0), (4, 9, 0),\n    (7, 2, 4), (7, 8, 5), (7, 12, 7), (7, 1, 0), (7, 10, 0), (7, 4, 0), (7, 11, 0),\n    (3, 9, 3), (3, 5, 5),\n    (11, 0, 8), (11, 6, 7), (11, 13, 6), (11, 7, 8), (11, 5, 3), (11, 10, 0),\n    (0, 6, 6), (0, 2, 2), (0, 12, 3), (0, 3, 4), (0, 11, 6),\n    (6, 8, 6), (6, 0, 3),\n    (1, 4, 9), (1, 8, 9), (1, 7, 10), (1, 12, 0),\n    (2, 0, 9), (2, 10, 7), (2, 4, 7), (2, 6, 6),\n    (8, 9, 8), (8, 12, 3), (8, 7, 8), (8, 5, 8), (8, 10, 6), (8, 4, 6), (8, 13, 6), (8, 2, 10),\n    (12, 7, 1), (12, 1, 2), (12, 10, 4), (12, 4, 8), (12, 9, 5),\n    (9, 4, 3), (9, 12, 0),\n    (5, 11, 1), (5, 4, 7), (5, 8, 9), (5, 9, 3),\n    (13, 12, 8), (13, 5, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 7)\nprint(max_flow)\n```"}, "99": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 6, 6), (3, 4, 5), (3, 8, 1), (3, 2, 10), (3, 9, 0),\n    (6, 4, 9), (6, 9, 10), (6, 8, 2),\n    (4, 8, 6), (4, 5, 3), (4, 7, 0),\n    (8, 0, 2), (8, 5, 8), (8, 2, 10), (8, 1, 3), (8, 6, 5), (8, 4, 10),\n    (2, 3, 2), (2, 1, 2), (2, 9, 9), (2, 7, 0), (2, 8, 0), (2, 0, 0),\n    (9, 7, 1), (9, 5, 8), (9, 3, 9), (9, 6, 10), (9, 4, 4),\n    (5, 6, 1), (5, 7, 5), (5, 0, 9), (5, 4, 0),\n    (0, 5, 5), (0, 2, 3), (0, 1, 1), (0, 8, 2),\n    (1, 4, 3), (1, 9, 6), (1, 7, 5), (1, 3, 1),\n    (7, 2, 10), (7, 4, 7), (7, 9, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 2)\nprint(max_flow)\n```"}, "100": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 9, 1), (1, 6, 8), (1, 7, 6), (1, 3, 5), (1, 4, 9), (1, 0, 0),\n    (9, 6, 10), (9, 8, 7), (9, 5, 10), (9, 3, 8), (9, 2, 6),\n    (6, 1, 2), (6, 0, 8), (6, 9, 10),\n    (7, 5, 2), (7, 1, 0), (7, 3, 0),\n    (3, 2, 5), (3, 7, 7), (3, 5, 2), (3, 8, 0), (3, 1, 0),\n    (4, 0, 7), (4, 5, 2),\n    (8, 3, 6), (8, 4, 3), (8, 0, 0), (8, 5, 0),\n    (5, 3, 1), (5, 7, 5), (5, 8, 2), (5, 0, 0), (5, 4, 0),\n    (2, 0, 1), (2, 7, 9), (2, 3, 7),\n    (0, 8, 3), (0, 5, 7), (0, 4, 5), (0, 1, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 0 to node 7\nmax_flow = g.edmonds_karp(0, 7)\nprint(max_flow)\n```"}, "101": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 1, 4), (0, 7, 10),\n    (1, 2, 9), (1, 0, 0), (1, 4, 0),\n    (7, 0, 10), (7, 4, 1),\n    (2, 6, 7), (2, 3, 7),\n    (4, 5, 6), (4, 1, 4), (4, 6, 2), (4, 3, 2), (4, 0, 9), (4, 7, 0),\n    (5, 3, 4), (5, 2, 10), (5, 4, 5),\n    (3, 2, 3), (3, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 1)\nprint(max_flow)\n```"}, "102": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # If not visited and capacity left\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the given graph\nedges = [\n    (6, 2, 7), (6, 12, 10), (6, 11, 9), (6, 14, 9), (6, 7, 10), (6, 0, 4), (6, 8, 2),\n    (2, 12, 10), (2, 4, 9), (2, 11, 10), (2, 14, 2), (2, 9, 6), (2, 7, 9),\n    (12, 11, 6), (12, 10, 5), (12, 8, 4),\n    (11, 9, 6), (11, 6, 5),\n    (14, 9, 6), (14, 10, 2), (14, 7, 7), (14, 13, 9), (14, 6, 6),\n    (7, 8, 10), (7, 4, 1), (7, 9, 5),\n    (0, 3, 4), (0, 11, 9), (0, 14, 8),\n    (8, 12, 5), (8, 14, 3), (8, 1, 7), (8, 7, 8), (8, 13, 4),\n    (4, 2, 7), (4, 3, 2),\n    (9, 10, 2), (9, 7, 10), (9, 6, 1), (9, 3, 9), (9, 4, 3), (9, 14, 9),\n    (10, 0, 6), (10, 8, 8), (10, 3, 6), (10, 4, 10),\n    (13, 5, 1), (13, 6, 10), (13, 2, 6), (13, 12, 2), (13, 4, 5), (13, 10, 10), (13, 7, 6), (13, 8, 0),\n    (3, 11, 4), (3, 14, 6), (3, 9, 10), (3, 13, 10), (3, 6, 8),\n    (1, 7, 4), (1, 13, 10), (1, 0, 4), (1, 2, 9), (1, 3, 9), (1, 4, 2), (1, 14, 3),\n    (5, 0, 9), (5, 8, 5), (5, 2, 4), (5, 12, 1), (5, 3, 1), (5, 4, 5), (5, 14, 5), (5, 9, 10), (5, 13, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 5\nmax_flow = g.edmonds_karp(8, 5)\nprint(max_flow)\n```"}, "103": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 2, 8), (11, 9, 8), (11, 10, 1), (11, 0, 7), (11, 6, 1), (11, 1, 0),\n    (2, 10, 2), (2, 3, 10), (2, 12, 5), (2, 6, 3), (2, 11, 4),\n    (9, 8, 2), (9, 5, 9), (9, 6, 7), (9, 1, 9),\n    (10, 0, 6), (10, 11, 3), (10, 9, 3), (10, 3, 0), (10, 2, 0),\n    (0, 6, 10), (0, 1, 4), (0, 4, 7), (0, 3, 3),\n    (6, 2, 4), (6, 4, 7), (6, 7, 4), (6, 8, 3), (6, 12, 6), (6, 5, 1), (6, 0, 0),\n    (3, 12, 4), (3, 1, 2), (3, 11, 3), (3, 10, 10), (3, 8, 10), (3, 0, 0), (3, 4, 0),\n    (12, 1, 6), (12, 9, 6), (12, 4, 4), (12, 8, 8),\n    (8, 12, 7), (8, 5, 6), (8, 1, 2), (8, 11, 10), (8, 9, 2), (8, 4, 9), (8, 7, 5),\n    (5, 8, 1),\n    (1, 11, 9), (1, 2, 8), (1, 9, 8), (1, 0, 0),\n    (4, 7, 9), (4, 3, 8), (4, 0, 1), (4, 1, 8), (4, 2, 9),\n    (7, 11, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 10)\nprint(max_flow)\n```"}, "104": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 8, 9), (3, 2, 5), (3, 4, 9),\n    (8, 7, 6), (8, 2, 4), (8, 6, 5), (8, 3, 3), (8, 0, 0),\n    (2, 5, 6), (2, 6, 1), (2, 8, 0),\n    (4, 0, 0), (4, 7, 0), (4, 3, 0), (4, 5, 0),\n    (7, 1, 8), (7, 4, 8), (7, 8, 0),\n    (5, 3, 7), (5, 1, 6), (5, 4, 3), (5, 2, 0),\n    (1, 3, 10),\n    (0, 4, 6), (0, 6, 10), (0, 8, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 4)\nprint(max_flow)\n```"}, "105": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 3, 10), (1, 9, 8),\n    (3, 0, 7), (3, 4, 3), (3, 6, 4), (3, 2, 0),\n    (9, 2, 3), (9, 8, 6),\n    (0, 4, 6),\n    (4, 2, 10), (4, 0, 0),\n    (6, 0, 1), (6, 7, 6),\n    (2, 3, 10), (2, 5, 5), (2, 4, 0),\n    (7, 2, 1), (7, 4, 2),\n    (5, 2, 10), (5, 6, 6), (5, 1, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 3)\nprint(max_flow)\n```"}, "106": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    queue.append(v)\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 9, 2), (6, 0, 5), (6, 7, 7), (6, 8, 3), (6, 3, 5),\n    (9, 0, 5), (9, 6, 7), (9, 3, 0),\n    (0, 4, 2), (0, 2, 10),\n    (7, 1, 9), (7, 10, 9), (7, 9, 8), (7, 6, 0),\n    (8, 1, 2), (8, 6, 8), (8, 5, 6), (8, 9, 2), (8, 7, 7),\n    (3, 6, 2), (3, 9, 2), (3, 4, 10), (3, 11, 1),\n    (4, 11, 2), (4, 3, 0),\n    (2, 8, 6), (2, 3, 1),\n    (1, 5, 4), (1, 0, 8), (1, 8, 8), (1, 3, 4),\n    (10, 6, 2), (10, 11, 4), (10, 8, 5), (10, 7, 0),\n    (5, 0, 10), (5, 2, 7), (5, 7, 10), (5, 8, 6), (5, 10, 5),\n    (11, 7, 9), (11, 1, 9), (11, 5, 2), (11, 4, 4), (11, 3, 0), (11, 10, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 11)\nprint(max_flow)\n```"}, "107": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 12, 2), (8, 10, 10), (8, 1, 0),\n    (12, 6, 8), (12, 11, 8),\n    (10, 1, 7), (10, 3, 7), (10, 9, 7), (10, 4, 0), (10, 8, 0),\n    (6, 11, 3),\n    (11, 5, 5), (11, 1, 4), (11, 0, 4), (11, 3, 6), (11, 6, 5), (11, 4, 2),\n    (1, 2, 1), (1, 12, 4), (1, 7, 3), (1, 8, 10), (1, 11, 0), (1, 5, 0),\n    (3, 10, 7), (3, 11, 6), (3, 5, 1),\n    (9, 6, 10), (9, 0, 4),\n    (5, 1, 9), (5, 2, 9), (5, 3, 0),\n    (2, 5, 4), (2, 0, 7),\n    (0, 3, 1),\n    (4, 10, 10), (4, 8, 7), (4, 3, 5), (4, 6, 3), (4, 11, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 10)\nprint(max_flow)\n```"}, "108": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 7, 5), (3, 2, 8), (3, 5, 0),\n    (7, 4, 2), (7, 1, 5),\n    (2, 0, 9), (2, 3, 10), (2, 5, 5), (2, 7, 9),\n    (4, 0, 8),\n    (1, 0, 8), (1, 5, 2),\n    (0, 7, 6),\n    (5, 2, 9), (5, 3, 2), (5, 4, 7), (5, 1, 0),\n    (6, 4, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "109": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (5, 0, 5), (5, 2, 8),\n    (0, 3, 6), (0, 6, 3), (0, 5, 3),\n    (2, 3, 6), (2, 6, 10), (2, 5, 0),\n    (3, 6, 8), (3, 4, 8), (3, 0, 0),\n    (6, 4, 10), (6, 0, 0), (6, 3, 0), (6, 2, 0),\n    (4, 2, 9), (4, 3, 5), (4, 5, 8),\n    (7, 0, 4), (7, 1, 8), (7, 2, 6), (7, 3, 1), (7, 6, 9),\n    (1, 3, 2), (1, 5, 5), (1, 7, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 0 to node 6\nmax_flow = g.edmonds_karp(0, 6)\nprint(max_flow)\n```"}, "110": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 8, 3), (10, 9, 1), (10, 3, 6), (10, 7, 5),\n    (8, 9, 6), (8, 4, 1), (8, 7, 8),\n    (9, 3, 5), (9, 4, 6), (9, 7, 2),\n    (3, 4, 7), (3, 7, 1), (3, 6, 3),\n    (7, 2, 8), (7, 0, 2), (7, 9, 5), (7, 4, 7),\n    (4, 7, 8), (4, 2, 4), (4, 5, 4), (4, 8, 10), (4, 6, 4), (4, 0, 0),\n    (6, 1, 10), (6, 2, 1), (6, 0, 3), (6, 4, 0),\n    (2, 8, 9), (2, 9, 4), (2, 1, 6), (2, 7, 10), (2, 4, 0),\n    (0, 4, 10),\n    (5, 8, 8), (5, 6, 10), (5, 4, 0), (5, 1, 0),\n    (1, 5, 5), (1, 9, 10), (1, 2, 0), (1, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 5)\nprint(max_flow)\n```"}, "111": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (12, 1, 4), (1, 4, 7), (1, 6, 10), (1, 7, 9),\n    (4, 0, 3), (4, 2, 3), (6, 0, 10), (6, 7, 5),\n    (6, 12, 1), (6, 4, 6), (7, 3, 9), (7, 13, 9),\n    (7, 1, 0), (11, 2, 2), (11, 8, 8), (11, 9, 7),\n    (11, 1, 2), (11, 10, 0), (2, 9, 3), (2, 1, 10),\n    (8, 7, 6), (8, 2, 9), (8, 10, 1), (8, 3, 0),\n    (9, 0, 8), (9, 1, 3), (10, 6, 3), (10, 12, 8),\n    (10, 11, 2), (10, 8, 0), (10, 5, 0), (0, 2, 4),\n    (0, 6, 3), (13, 5, 2), (13, 9, 1), (13, 7, 0),\n    (5, 6, 4), (5, 9, 2), (5, 10, 6), (5, 13, 0),\n    (3, 8, 7), (3, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 11)\nprint(max_flow)\n```"}, "112": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 11, 7), (2, 9, 6),\n    (11, 5, 5), (11, 0, 6), (11, 2, 0),\n    (9, 8, 8), (9, 2, 5), (9, 11, 3),\n    (5, 3, 2), (5, 2, 1), (5, 7, 7), (5, 4, 5), (5, 11, 0),\n    (0, 11, 8), (0, 9, 1), (0, 1, 1),\n    (8, 2, 9),\n    (7, 0, 7), (7, 6, 9), (7, 5, 0), (7, 1, 0),\n    (1, 6, 9), (1, 7, 6), (1, 0, 0),\n    (4, 11, 10), (4, 0, 1), (4, 6, 10),\n    (10, 5, 4), (10, 6, 6), (10, 2, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 7)\nprint(max_flow)\n```"}, "113": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 4, 2), (8, 6, 6), (8, 0, 6), (8, 3, 3),\n    (4, 6, 5), (4, 5, 7), (4, 8, 0), (4, 1, 0),\n    (6, 1, 1), (6, 9, 1), (6, 8, 0),\n    (0, 2, 6), (0, 6, 8), (0, 8, 0),\n    (3, 8, 4),\n    (5, 1, 10), (5, 3, 3), (5, 2, 0),\n    (1, 9, 7), (1, 5, 4), (1, 7, 5), (1, 4, 7), (1, 6, 4), (1, 2, 0),\n    (9, 7, 3), (9, 2, 5), (9, 0, 9), (9, 1, 5), (9, 6, 0),\n    (2, 0, 7), (2, 1, 1), (2, 5, 10), (2, 7, 5),\n    (7, 6, 10), (7, 1, 4), (7, 5, 6), (7, 8, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 4)\nprint(max_flow)\n```"}, "114": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 0, 4), (6, 1, 9), (6, 4, 9), (6, 7, 6), (6, 3, 10),\n    (0, 1, 7), (0, 7, 6), (0, 6, 4), (0, 4, 0),\n    (1, 4, 8), (1, 3, 9), (1, 2, 5), (1, 6, 6),\n    (4, 5, 8), (4, 0, 5), (4, 6, 0),\n    (7, 3, 1), (7, 2, 7), (7, 6, 9), (7, 0, 7), (7, 1, 5), (7, 4, 2), (7, 5, 0),\n    (3, 1, 3), (3, 4, 3), (3, 7, 8), (3, 6, 0),\n    (2, 5, 10), (2, 1, 4), (2, 7, 2), (2, 3, 6),\n    (5, 6, 10), (5, 0, 4), (5, 1, 7), (5, 7, 2), (5, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 7)\nprint(max_flow)\n```"}, "115": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (13, 6, 3), (13, 9, 5), (13, 4, 4),\n    (6, 2, 1), (6, 13, 4), (6, 11, 0),\n    (9, 12, 4), (9, 2, 10), (9, 13, 1), (9, 0, 5),\n    (2, 11, 8),\n    (12, 6, 8), (12, 0, 1), (12, 3, 5),\n    (0, 9, 10), (0, 6, 2),\n    (11, 4, 10), (11, 6, 9), (11, 2, 4),\n    (3, 12, 5), (3, 10, 1), (3, 1, 1), (3, 13, 4), (3, 6, 4),\n    (10, 12, 1), (10, 2, 3), (10, 11, 5),\n    (1, 0, 7),\n    (5, 1, 9), (5, 6, 2), (5, 9, 10), (5, 2, 2),\n    (8, 9, 5), (8, 11, 4), (8, 10, 4),\n    (7, 13, 8), (7, 12, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 0\nmax_flow = g.edmonds_karp(2, 0)\nprint(max_flow)\n```"}, "116": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (12, 0, 3), (12, 10, 5), (12, 11, 9), (12, 6, 7),\n    (0, 10, 3), (0, 7, 8), (0, 6, 5), (0, 12, 8), (0, 5, 4), (0, 2, 4), (0, 8, 7), (0, 1, 0),\n    (10, 7, 10), (10, 6, 6), (10, 12, 5), (10, 4, 3), (10, 3, 1), (10, 2, 3), (10, 0, 8),\n    (11, 1, 3),\n    (6, 12, 6), (6, 4, 1), (6, 3, 4),\n    (7, 12, 7), (7, 2, 1), (7, 1, 9),\n    (5, 3, 5), (5, 0, 1), (5, 11, 5), (5, 6, 1),\n    (2, 0, 8), (2, 10, 9), (2, 11, 1), (2, 7, 6), (2, 6, 10), (2, 9, 4), (2, 12, 10), (2, 4, 3), (2, 3, 1),\n    (8, 0, 10), (8, 11, 3), (8, 6, 6), (8, 9, 2), (8, 4, 8), (8, 2, 7),\n    (4, 1, 6), (4, 10, 5), (4, 11, 3), (4, 6, 8), (4, 9, 4), (4, 12, 10),\n    (3, 0, 2), (3, 1, 4), (3, 10, 7), (3, 6, 8), (3, 4, 10),\n    (1, 11, 6), (1, 5, 10), (1, 3, 6), (1, 2, 3), (1, 0, 4), (1, 4, 0),\n    (9, 3, 4), (9, 1, 4), (9, 10, 6), (9, 11, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 8)\nprint(max_flow)\n```"}, "117": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 4, 2), (6, 8, 2), (6, 2, 3), (6, 3, 1), (6, 1, 1), (6, 0, 5),\n    (4, 0, 2), (4, 5, 2),\n    (8, 2, 5), (8, 3, 8), (8, 0, 7), (8, 6, 4),\n    (2, 9, 4), (2, 3, 8), (2, 7, 5), (2, 5, 2), (2, 6, 0),\n    (3, 7, 2), (3, 8, 7), (3, 9, 10),\n    (1, 2, 7), (1, 9, 1), (1, 3, 5),\n    (0, 6, 2), (0, 5, 4), (0, 1, 8), (0, 4, 0),\n    (5, 8, 10), (5, 2, 5), (5, 1, 10), (5, 4, 0),\n    (9, 1, 8), (9, 7, 4), (9, 0, 8),\n    (7, 6, 5), (7, 2, 6), (7, 1, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 7)\nprint(max_flow)\n```"}, "118": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the provided graph\nedges = [\n    (7, 0, 10), (7, 1, 9), (7, 12, 9), (7, 9, 5), (7, 10, 9),\n    (0, 9, 6), (0, 4, 4), (0, 10, 10), (0, 1, 0),\n    (1, 11, 6), (1, 6, 9), (1, 4, 9), (1, 10, 1), (1, 7, 1), (1, 0, 9), (1, 3, 6), (1, 5, 7),\n    (12, 9, 8), (12, 8, 8), (12, 2, 4), (12, 11, 6), (12, 10, 9), (12, 1, 8), (12, 6, 0), (12, 4, 0), (12, 7, 0),\n    (9, 6, 1), (9, 4, 5), (9, 7, 1), (9, 0, 6),\n    (10, 7, 8), (10, 0, 5), (10, 1, 10), (10, 12, 10), (10, 9, 2), (10, 8, 1), (10, 2, 5),\n    (4, 10, 2), (4, 7, 2), (4, 0, 9), (4, 12, 9), (4, 9, 2), (4, 8, 1), (4, 2, 6), (4, 1, 0),\n    (11, 6, 5), (11, 4, 10), (11, 7, 8), (11, 0, 9), (11, 3, 2), (11, 1, 3), (11, 12, 8), (11, 8, 4), (11, 2, 4),\n    (6, 3, 4), (6, 5, 7), (6, 1, 10), (6, 12, 6), (6, 9, 8), (6, 8, 6),\n    (3, 5, 3), (3, 1, 9), (3, 12, 4), (3, 10, 1),\n    (5, 12, 2), (5, 7, 5),\n    (8, 11, 1), (8, 4, 7), (8, 0, 1), (8, 5, 5), (8, 1, 10), (8, 9, 5), (8, 6, 0), (8, 10, 0), (8, 12, 0), (8, 2, 0),\n    (2, 11, 7), (2, 6, 10), (2, 4, 4), (2, 10, 10), (2, 3, 3), (2, 9, 3), (2, 8, 10), (2, 12, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 8\nmax_flow = g.edmonds_karp(1, 8)\nprint(max_flow)\n```"}, "119": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 6, 1), (3, 1, 8), (6, 5, 4), (1, 8, 10), (1, 5, 3),\n    (5, 2, 3), (5, 0, 10), (8, 0, 3), (2, 8, 1), (2, 1, 9),\n    (2, 7, 9), (2, 5, 0), (7, 4, 7), (7, 1, 7), (0, 7, 2),\n    (4, 7, 6), (4, 6, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 2)\nprint(max_flow)\n```"}, "120": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (11, 6, 10), (11, 8, 10), (11, 1, 6),\n    (6, 10, 6), (6, 11, 6),\n    (8, 7, 7), (8, 3, 9), (8, 5, 7),\n    (1, 4, 10), (1, 0, 7),\n    (10, 2, 4),\n    (7, 1, 5), (7, 11, 1),\n    (5, 12, 3), (5, 6, 9),\n    (4, 3, 4),\n    (0, 9, 9), (0, 12, 6), (0, 3, 4), (0, 10, 2), (0, 4, 4), (0, 6, 2),\n    (2, 9, 9), (2, 3, 3),\n    (9, 12, 3), (9, 0, 4),\n    (12, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 11\nmax_flow = g.edmonds_karp(6, 11)\nprint(max_flow)\n```"}, "121": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (12, 8, 6), (12, 4, 6), (12, 11, 4), (12, 9, 8), (12, 3, 8),\n    (12, 0, 5), (12, 5, 7), (12, 7, 0), (12, 13, 0),\n    (8, 4, 1),\n    (4, 6, 5), (4, 3, 8), (4, 8, 8), (4, 2, 0),\n    (11, 10, 5), (11, 5, 2), (11, 13, 10), (11, 3, 0),\n    (9, 10, 7), (9, 5, 8), (9, 2, 8), (9, 7, 0), (9, 0, 0),\n    (3, 10, 8), (3, 11, 5), (3, 1, 8), (3, 4, 0),\n    (0, 6, 5), (0, 9, 7), (0, 1, 0),\n    (5, 12, 5), (5, 9, 7), (5, 2, 0), (5, 11, 0),\n    (6, 1, 8), (6, 0, 1), (6, 8, 3), (6, 2, 0),\n    (10, 2, 7), (10, 11, 3),\n    (13, 12, 7), (13, 8, 1), (13, 11, 4), (13, 6, 5),\n    (2, 4, 10), (2, 6, 7), (2, 10, 1), (2, 5, 8), (2, 7, 10),\n    (1, 0, 3), (1, 8, 3), (1, 4, 8), (1, 6, 0),\n    (7, 2, 6), (7, 9, 4), (7, 12, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 5\nmax_flow = g.edmonds_karp(2, 5)\nprint(max_flow)\n```"}, "122": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 4, 1), (5, 1, 5), (5, 7, 4), (5, 3, 6), (5, 2, 4), (5, 6, 1),\n    (4, 1, 8), (4, 7, 10), (4, 3, 4), (4, 5, 1),\n    (1, 3, 9), (1, 0, 4), (1, 6, 10), (1, 5, 1),\n    (7, 0, 10), (7, 6, 10), (7, 5, 7), (7, 1, 7), (7, 4, 0),\n    (3, 0, 8), (3, 6, 10), (3, 2, 0),\n    (2, 5, 10), (2, 1, 1), (2, 3, 10), (2, 6, 0),\n    (6, 1, 4), (6, 7, 4), (6, 3, 5), (6, 2, 10),\n    (0, 6, 2), (0, 5, 1), (0, 1, 4), (0, 2, 8), (0, 7, 0), (0, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 0)\nprint(max_flow)\n```"}, "123": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(4, 7, 8)\ng.add_edge(7, 1, 3)\ng.add_edge(7, 2, 3)\ng.add_edge(1, 7, 5)\ng.add_edge(1, 0, 0)\ng.add_edge(2, 6, 3)\ng.add_edge(2, 1, 5)\ng.add_edge(0, 1, 7)\ng.add_edge(6, 1, 1)\ng.add_edge(6, 2, 3)\ng.add_edge(6, 4, 1)\ng.add_edge(5, 3, 5)\ng.add_edge(5, 7, 6)\ng.add_edge(3, 4, 8)\ng.add_edge(3, 6, 10)\ng.add_edge(3, 7, 5)\ng.add_edge(3, 1, 1)\n\nmax_flow = g.edmonds_karp(0, 1)\nprint(max_flow)\n```"}, "124": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 13, 6), (7, 6, 8), (7, 4, 0),\n    (13, 3, 10), (13, 12, 5), (13, 7, 0),\n    (3, 0, 1), (3, 9, 1),\n    (12, 10, 5), (12, 13, 0),\n    (10, 0, 5), (10, 4, 4), (10, 12, 0),\n    (0, 6, 6), (0, 11, 5), (0, 8, 8), (0, 5, 6),\n    (4, 7, 3),\n    (11, 13, 2), (11, 0, 1), (11, 2, 7),\n    (8, 12, 5),\n    (5, 1, 2), (5, 6, 3), (5, 10, 4), (5, 13, 9),\n    (9, 1, 6), (9, 4, 10),\n    (1, 0, 10),\n    (2, 12, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 10)\nprint(max_flow)\n```"}, "125": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 4, 9), (8, 2, 0), (8, 5, 0),\n    (4, 0, 5), (4, 7, 0),\n    (0, 1, 3), (0, 4, 0),\n    (1, 3, 8), (1, 0, 0),\n    (3, 2, 3), (3, 4, 9), (3, 1, 2), (3, 7, 0),\n    (2, 5, 1), (2, 7, 6), (2, 8, 1), (2, 0, 3), (2, 3, 0),\n    (5, 8, 4), (5, 1, 9), (5, 2, 1),\n    (7, 4, 4), (7, 3, 1),\n    (6, 3, 3), (6, 2, 2), (6, 4, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 8)\nprint(max_flow)\n```"}, "126": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(5, 4, 7)\ng.add_edge(5, 3, 8)\ng.add_edge(5, 7, 7)\ng.add_edge(5, 1, 8)\ng.add_edge(4, 5, 0)\ng.add_edge(4, 7, 0)\ng.add_edge(3, 2, 4)\ng.add_edge(3, 0, 8)\ng.add_edge(3, 1, 4)\ng.add_edge(3, 5, 4)\ng.add_edge(7, 4, 10)\ng.add_edge(7, 5, 0)\ng.add_edge(7, 6, 0)\ng.add_edge(2, 0, 10)\ng.add_edge(2, 6, 2)\ng.add_edge(2, 3, 0)\ng.add_edge(6, 0, 9)\ng.add_edge(6, 7, 6)\ng.add_edge(6, 2, 0)\n\nmax_flow = g.edmonds_karp(5, 4)\nprint(max_flow)\n```"}, "127": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 9, 3), (1, 8, 5), (1, 10, 9), (1, 3, 9), (1, 11, 2),\n    (9, 8, 10), (9, 0, 5), (9, 3, 6), (9, 2, 10), (9, 5, 4), (9, 12, 0), (9, 10, 0),\n    (8, 12, 8), (8, 10, 6), (8, 0, 9), (8, 11, 10), (8, 7, 7), (8, 9, 9),\n    (10, 6, 2), (10, 2, 1), (10, 11, 8), (10, 9, 5), (10, 12, 0),\n    (11, 8, 10), (11, 10, 8), (11, 3, 4),\n    (0, 6, 7), (0, 3, 4), (0, 1, 4), (0, 7, 2), (0, 13, 8), (0, 12, 6), (0, 9, 0),\n    (2, 11, 2), (2, 7, 1), (2, 9, 9), (2, 8, 8), (2, 3, 8), (2, 10, 0),\n    (5, 11, 9), (5, 7, 6), (5, 13, 3), (5, 12, 8), (5, 3, 2), (5, 9, 0), (5, 6, 0),\n    (12, 10, 10), (12, 9, 5), (12, 8, 10),\n    (7, 9, 6), (7, 4, 1), (7, 12, 3), (7, 10, 2), (7, 0, 10), (7, 2, 3), (7, 5, 8), (7, 1, 7), (7, 8, 0),\n    (6, 5, 3), (6, 10, 0),\n    (4, 10, 6), (4, 6, 3), (4, 2, 10), (4, 5, 1), (4, 13, 7),\n    (13, 8, 5), (13, 0, 8), (13, 6, 4), (13, 5, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 12 to node 7\nmax_flow = g.edmonds_karp(12, 7)\nprint(max_flow)\n```"}, "128": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 8, 9), (2, 3, 3), (2, 10, 8),\n    (8, 6, 4),\n    (10, 9, 6),\n    (6, 9, 2),\n    (9, 6, 5), (9, 8, 7), (9, 5, 9),\n    (11, 5, 1), (11, 0, 3), (11, 12, 4), (11, 2, 1),\n    (5, 3, 2), (5, 0, 8), (5, 2, 8), (5, 11, 8), (5, 9, 0),\n    (0, 1, 10), (0, 8, 4), (0, 5, 0),\n    (12, 6, 9), (12, 11, 5), (12, 4, 10), (12, 7, 2),\n    (1, 4, 3), (1, 7, 10),\n    (4, 12, 2), (4, 11, 4),\n    (7, 1, 9), (7, 2, 3), (7, 8, 5), (7, 5, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 0)\nprint(max_flow)\n```"}, "129": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (12, 11, 9), (12, 3, 10), (12, 9, 3), (12, 1, 8),\n    (11, 4, 8), (11, 0, 2), (11, 7, 9),\n    (3, 6, 1), (3, 9, 2), (3, 1, 5), (3, 0, 2), (3, 12, 8),\n    (9, 10, 3), (9, 12, 1), (9, 8, 3), (9, 11, 9), (9, 6, 10),\n    (1, 5, 5), (1, 3, 7),\n    (4, 0, 4), (4, 7, 9), (4, 11, 1), (4, 6, 1), (4, 1, 4), (4, 5, 10),\n    (0, 7, 10), (0, 12, 5), (0, 3, 3),\n    (7, 2, 2), (7, 3, 6), (7, 4, 0),\n    (6, 4, 8), (6, 0, 4), (6, 12, 7),\n    (10, 7, 3), (10, 11, 9), (10, 3, 3), (10, 6, 3), (10, 1, 4), (10, 5, 3), (10, 4, 5),\n    (8, 12, 8),\n    (5, 0, 7), (5, 10, 5), (5, 12, 1), (5, 6, 5), (5, 1, 4),\n    (2, 3, 8), (2, 6, 6), (2, 4, 7), (2, 12, 4), (2, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 2\nmax_flow = g.edmonds_karp(6, 2)\nprint(max_flow)\n```"}, "130": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (13, 10, 9), (13, 12, 7), (13, 8, 1),\n    (10, 7, 7),\n    (12, 6, 10), (12, 13, 5), (12, 10, 2),\n    (8, 3, 9), (8, 13, 6), (8, 0, 4), (8, 2, 6), (8, 7, 8), (8, 11, 7), (8, 4, 0),\n    (6, 9, 6), (6, 12, 9),\n    (3, 10, 7),\n    (0, 8, 10),\n    (2, 7, 8), (2, 13, 6),\n    (11, 4, 9), (11, 13, 8), (11, 2, 8), (11, 6, 3), (11, 1, 5), (11, 8, 0),\n    (9, 8, 4), (9, 3, 7),\n    (14, 1, 9), (14, 7, 7),\n    (1, 5, 7), (1, 14, 2), (1, 11, 0),\n    (5, 10, 8), (5, 3, 2), (5, 1, 0),\n    (4, 8, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "131": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\ng.add_edge(6, 2, 7)\ng.add_edge(6, 9, 2)\ng.add_edge(6, 0, 1)\ng.add_edge(6, 1, 6)\ng.add_edge(2, 5, 3)\ng.add_edge(2, 3, 9)\ng.add_edge(9, 8, 6)\ng.add_edge(9, 6, 0)\ng.add_edge(0, 7, 6)\ng.add_edge(1, 6, 8)\ng.add_edge(1, 3, 4)\ng.add_edge(5, 1, 5)\ng.add_edge(5, 2, 1)\ng.add_edge(8, 9, 0)\ng.add_edge(4, 8, 8)\n\n# Calculate maximum flow from node 6 to node 8\nmax_flow = g.edmonds_karp(6, 8)\nprint(max_flow)\n```"}, "132": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 10, 10), (10, 6, 1), (10, 5, 10), (10, 3, 6),\n    (6, 1, 5), (6, 11, 7), (6, 8, 4), (6, 10, 9), (6, 9, 5), (6, 0, 0),\n    (3, 8, 4), (3, 9, 2), (3, 2, 7),\n    (2, 3, 8), (2, 8, 4), (2, 10, 3), (2, 0, 4),\n    (8, 9, 6), (8, 0, 5), (8, 6, 4),\n    (0, 6, 10), (0, 5, 10), (0, 2, 4), (0, 3, 6), (0, 11, 6), (0, 8, 5), (0, 7, 3), (0, 1, 0),\n    (9, 5, 7), (9, 7, 6), (9, 10, 5),\n    (11, 0, 6), (11, 1, 6),\n    (7, 5, 10), (7, 4, 9), (7, 2, 6), (7, 3, 2), (7, 1, 10), (7, 11, 3),\n    (1, 0, 6), (1, 5, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 10\nmax_flow = g.edmonds_karp(1, 10)\nprint(max_flow)\n```"}, "133": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 3, 5), (1, 7, 4), (1, 2, 2), (1, 0, 8), (1, 5, 6),\n    (3, 5, 4), (3, 4, 4),\n    (7, 0, 4), (7, 6, 2), (7, 4, 4),\n    (2, 1, 5), (2, 3, 10), (2, 7, 8), (2, 0, 0),\n    (0, 4, 7), (0, 1, 1), (0, 7, 8), (0, 2, 7), (0, 5, 0),\n    (5, 0, 2),\n    (4, 3, 1), (4, 7, 9), (4, 0, 5),\n    (6, 4, 5), (6, 3, 8), (6, 2, 7), (6, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 1)\nprint(max_flow)\n```"}, "134": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 6, 4), (4, 8, 3), (4, 1, 6), (4, 5, 0), (4, 3, 0),\n    (6, 2, 2), (6, 8, 7), (6, 7, 10),\n    (8, 7, 3), (8, 5, 8), (8, 6, 0),\n    (1, 0, 4), (1, 4, 4), (1, 6, 10), (1, 7, 0),\n    (2, 5, 5), (2, 8, 9), (2, 7, 1), (2, 3, 5), (2, 6, 0),\n    (7, 3, 2), (7, 8, 4), (7, 1, 7), (7, 6, 0),\n    (5, 3, 7), (5, 0, 5), (5, 4, 1), (5, 2, 0), (5, 8, 0),\n    (0, 6, 8), (0, 2, 7), (0, 7, 6), (0, 3, 8),\n    (3, 0, 9), (3, 4, 6), (3, 6, 6), (3, 2, 2), (3, 8, 6), (3, 7, 7), (3, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 4)\nprint(max_flow)\n```"}, "135": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 2, 2), (5, 8, 2), (5, 0, 7), (5, 6, 2), (5, 10, 1), (5, 7, 1), (5, 1, 0),\n    (2, 8, 3), (2, 4, 4), (2, 0, 9),\n    (8, 6, 9), (8, 9, 9), (8, 1, 8),\n    (0, 10, 8), (0, 9, 10), (0, 3, 3), (0, 1, 6), (0, 2, 8), (0, 8, 10),\n    (6, 2, 8), (6, 8, 6),\n    (10, 3, 4), (10, 7, 3), (10, 1, 6), (10, 5, 7), (10, 4, 0),\n    (7, 6, 9), (7, 10, 4), (7, 9, 0),\n    (4, 0, 2), (4, 6, 4), (4, 10, 8), (4, 8, 5), (4, 9, 0),\n    (9, 7, 8), (9, 2, 1), (9, 4, 6), (9, 0, 8), (9, 6, 6),\n    (1, 5, 1), (1, 2, 3), (1, 0, 0),\n    (3, 9, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 9\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "136": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 4, 8), (5, 0, 5), (5, 2, 2), (5, 7, 4), (5, 3, 10), (5, 6, 1), (5, 8, 6),\n    (4, 0, 8), (4, 2, 2), (4, 8, 7),\n    (0, 7, 5), (0, 3, 1), (0, 6, 1),\n    (2, 6, 6), (2, 4, 1),\n    (7, 3, 8), (7, 6, 4), (7, 8, 6), (7, 4, 8),\n    (3, 6, 5), (3, 8, 2), (3, 4, 2), (3, 2, 8),\n    (6, 8, 5), (6, 5, 5), (6, 0, 6), (6, 1, 9), (6, 2, 1), (6, 7, 0), (6, 3, 0),\n    (8, 7, 9), (8, 3, 3),\n    (1, 2, 3), (1, 8, 5), (1, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 5)\nprint(max_flow)\n```"}, "137": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 2, 2), (6, 1, 1), (6, 0, 9),\n    (2, 7, 2), (2, 4, 2), (2, 0, 0), (2, 3, 0),\n    (0, 3, 10), (0, 2, 8), (0, 5, 10), (0, 1, 4), (0, 4, 6),\n    (7, 4, 1), (7, 6, 4), (7, 3, 5), (7, 2, 8),\n    (4, 0, 10), (4, 2, 8), (4, 1, 8),\n    (3, 2, 3), (3, 5, 6), (3, 7, 5), (3, 4, 7), (3, 6, 9), (3, 0, 0),\n    (5, 4, 2), (5, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 2)\nprint(max_flow)\n```"}, "138": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 9, 2), (3, 4, 5), (4, 8, 1), (4, 1, 0),\n    (8, 5, 8), (8, 10, 0), (8, 4, 0), (1, 0, 7),\n    (1, 9, 8), (1, 4, 9), (1, 7, 5), (1, 10, 0),\n    (0, 4, 1), (0, 3, 6), (0, 1, 10), (7, 0, 4),\n    (7, 10, 4), (7, 4, 8), (10, 8, 9), (10, 1, 8),\n    (5, 4, 8), (5, 6, 10), (5, 3, 7), (5, 0, 2),\n    (2, 5, 9), (2, 4, 1), (2, 8, 6), (2, 6, 6),\n    (2, 3, 9), (2, 1, 1), (6, 3, 9), (6, 1, 4),\n    (6, 0, 8), (6, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 8)\nprint(max_flow)\n```"}, "139": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 7, 8), (4, 6, 4), (4, 1, 7), (4, 10, 7), (4, 2, 7), (4, 8, 1),\n    (7, 11, 3), (7, 5, 5), (7, 10, 6), (7, 3, 4), (7, 8, 9), (7, 4, 7), (7, 0, 6),\n    (6, 11, 6), (6, 7, 2),\n    (1, 11, 2), (1, 10, 10), (1, 2, 3), (1, 3, 8), (1, 8, 1), (1, 4, 6), (1, 9, 6), (1, 6, 8), (1, 0, 0),\n    (10, 3, 2), (10, 11, 8), (10, 5, 4), (10, 0, 0),\n    (2, 8, 5), (2, 0, 6), (2, 6, 1), (2, 10, 6),\n    (8, 4, 5), (8, 6, 6), (8, 11, 4), (8, 10, 2), (8, 2, 4), (8, 3, 1),\n    (11, 5, 8), (11, 2, 2), (11, 4, 4), (11, 1, 2), (11, 0, 0), (11, 10, 0),\n    (5, 6, 3), (5, 7, 0), (5, 11, 0), (5, 10, 0),\n    (3, 7, 1), (3, 2, 1),\n    (0, 7, 5), (0, 1, 3), (0, 11, 3), (0, 10, 7),\n    (9, 6, 7), (9, 1, 3), (9, 10, 1), (9, 4, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 0 to node 5\nmax_flow = g.edmonds_karp(0, 5)\nprint(max_flow)\n```"}, "140": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 13, 5), (9, 5, 5), (9, 10, 3),\n    (13, 5, 9), (13, 4, 1), (13, 1, 6), (13, 9, 4), (13, 12, 0),\n    (5, 7, 1), (5, 12, 10),\n    (10, 12, 9), (10, 4, 4),\n    (4, 8, 2), (4, 3, 4), (4, 0, 3), (4, 5, 8), (4, 6, 0),\n    (1, 13, 4), (1, 8, 6), (1, 2, 3), (1, 10, 10), (1, 3, 8), (1, 6, 0),\n    (7, 1, 8), (7, 0, 3),\n    (12, 6, 6), (12, 13, 7), (12, 5, 7), (12, 2, 5),\n    (0, 10, 1), (0, 1, 1),\n    (8, 3, 8), (8, 4, 0), (8, 1, 0),\n    (2, 0, 5),\n    (3, 9, 1), (3, 13, 10), (3, 5, 8), (3, 2, 5),\n    (6, 13, 2), (6, 4, 10), (6, 1, 6), (6, 11, 8), (6, 12, 0),\n    (11, 6, 9), (11, 4, 4), (11, 2, 6), (11, 10, 10), (11, 3, 3), (11, 1, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 8)\nprint(max_flow)\n```"}, "141": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 3, 8), (5, 6, 1), (5, 2, 1), (5, 8, 7),\n    (3, 0, 7), (3, 8, 5), (3, 7, 8), (3, 5, 0),\n    (6, 8, 4), (6, 5, 10),\n    (2, 5, 9), (2, 7, 8), (2, 4, 7), (2, 0, 6), (2, 6, 7), (2, 8, 0), (2, 1, 0),\n    (8, 4, 7), (8, 3, 1), (8, 2, 3), (8, 6, 0), (8, 5, 0),\n    (0, 6, 7), (0, 2, 4), (0, 1, 9), (0, 5, 2), (0, 4, 1), (0, 3, 0),\n    (7, 4, 9), (7, 3, 2), (7, 0, 3), (7, 2, 8),\n    (4, 1, 4), (4, 8, 0),\n    (1, 5, 8), (1, 3, 3), (1, 2, 2), (1, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 7)\nprint(max_flow)\n```"}, "142": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (5, 3, 6), (5, 2, 6), (5, 8, 4),\n    (3, 2, 6), (3, 0, 2), (3, 8, 10), (3, 6, 9), (3, 4, 2), (3, 5, 0),\n    (2, 0, 2), (2, 8, 10), (2, 6, 10), (2, 4, 4), (2, 1, 7), (2, 3, 3), (2, 5, 0),\n    (8, 5, 6), (8, 4, 2), (8, 3, 10), (8, 0, 7), (8, 7, 10),\n    (6, 2, 5), (6, 7, 2), (6, 8, 4),\n    (4, 1, 2), (4, 3, 5),\n    (1, 6, 10), (1, 4, 1), (1, 2, 0), (1, 7, 0),\n    (7, 8, 4), (7, 5, 7), (7, 1, 3), (7, 2, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 1\nmax_flow = g.edmonds_karp(5, 1)\nprint(max_flow)\n```"}, "143": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (11, 1, 2), (11, 6, 7), (11, 8, 1), (11, 5, 0),\n    (1, 3, 4), (1, 8, 2), (1, 4, 4), (1, 11, 0),\n    (6, 13, 2), (6, 8, 4), (6, 2, 10), (6, 11, 3),\n    (3, 1, 3), (3, 9, 0),\n    (4, 1, 8), (4, 3, 6), (4, 13, 6), (4, 12, 0),\n    (13, 8, 8), (13, 4, 7), (13, 12, 0),\n    (2, 6, 2), (2, 7, 6), (2, 3, 7),\n    (7, 13, 3), (7, 9, 10),\n    (9, 5, 1), (9, 2, 3), (9, 0, 4), (9, 7, 2), (9, 3, 5), (9, 8, 9), (9, 12, 0),\n    (5, 0, 4), (5, 11, 6), (5, 6, 3), (5, 13, 3), (5, 8, 10), (5, 10, 2), (5, 12, 0),\n    (0, 10, 6), (0, 5, 6), (0, 2, 6),\n    (10, 11, 9), (10, 6, 3),\n    (12, 5, 3), (12, 4, 8), (12, 0, 7), (12, 13, 7), (12, 9, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 12 to node 4\nmax_flow = g.edmonds_karp(12, 4)\nprint(max_flow)\n```"}, "144": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 3, 4), (1, 5, 9), (1, 7, 7), (1, 6, 5), (1, 4, 0), (1, 2, 0),\n    (3, 4, 4), (3, 7, 1), (3, 0, 5), (3, 1, 6),\n    (5, 2, 6), (5, 0, 10), (5, 1, 6), (5, 3, 10), (5, 4, 1),\n    (7, 2, 5), (7, 6, 3), (7, 0, 5), (7, 1, 1), (7, 3, 3), (7, 4, 1),\n    (6, 1, 3), (6, 3, 9), (6, 4, 3), (6, 7, 0),\n    (4, 7, 6), (4, 6, 2), (4, 0, 7), (4, 1, 4), (4, 3, 0),\n    (0, 3, 7), (0, 4, 6), (0, 2, 1),\n    (2, 6, 7), (2, 1, 2), (2, 0, 0), (2, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 1)\nprint(max_flow)\n```"}, "145": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 5, 7), (6, 7, 3),\n    (5, 3, 4), (5, 1, 10), (5, 6, 6), (5, 7, 0),\n    (7, 5, 9), (7, 6, 0),\n    (3, 8, 10), (3, 1, 2),\n    (1, 0, 4), (1, 11, 7), (1, 2, 9),\n    (8, 0, 8), (8, 9, 9), (8, 5, 6), (8, 7, 9),\n    (0, 1, 3), (0, 3, 8),\n    (11, 10, 5),\n    (2, 1, 10), (2, 5, 2), (2, 7, 2), (2, 4, 2), (2, 0, 2),\n    (9, 11, 1),\n    (10, 0, 3), (10, 2, 7),\n    (4, 0, 2), (4, 1, 3), (4, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 5)\nprint(max_flow)\n```"}, "146": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (10, 2, 5), (10, 3, 8), (10, 8, 4), (10, 6, 1), (10, 1, 4),\n    (2, 7, 5), (2, 8, 2), (2, 0, 4), (2, 4, 3), (2, 1, 6), (2, 10, 5),\n    (3, 9, 10), (3, 0, 3), (3, 6, 5),\n    (8, 0, 7), (8, 10, 1), (8, 3, 9), (8, 7, 2), (8, 6, 0),\n    (6, 10, 1), (6, 5, 2), (6, 9, 5), (6, 8, 5), (6, 4, 9), (6, 1, 0),\n    (1, 10, 7), (1, 5, 3), (1, 0, 5), (1, 6, 9),\n    (7, 0, 0), (7, 2, 0), (7, 8, 0),\n    (0, 4, 10), (0, 6, 10), (0, 1, 5), (0, 5, 5), (0, 9, 10), (0, 7, 9), (0, 8, 0),\n    (4, 6, 3), (4, 5, 8), (4, 3, 7), (4, 0, 3),\n    (9, 8, 1), (9, 6, 5), (9, 1, 7),\n    (5, 9, 4), (5, 6, 1), (5, 1, 1),\n    (11, 1, 9), (11, 5, 2), (11, 7, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 7\nmax_flow = g.edmonds_karp(1, 7)\nprint(max_flow)\n```"}, "147": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 10, 7), (4, 6, 9), (4, 8, 5), (4, 3, 10), (4, 2, 2),\n    (10, 4, 5), (10, 5, 4), (10, 2, 0),\n    (6, 4, 3), (6, 5, 5), (6, 2, 0),\n    (8, 6, 1),\n    (3, 9, 2), (3, 5, 6), (3, 4, 0),\n    (2, 9, 10), (2, 0, 6), (2, 10, 1), (2, 7, 5), (2, 6, 9),\n    (5, 6, 7), (5, 3, 7), (5, 4, 10), (5, 9, 7), (5, 10, 0),\n    (9, 5, 2), (9, 6, 9), (9, 8, 1), (9, 3, 3), (9, 2, 7), (9, 0, 0), (9, 7, 0),\n    (0, 10, 9), (0, 9, 9), (0, 2, 0),\n    (7, 8, 10), (7, 3, 2), (7, 2, 2), (7, 9, 5), (7, 5, 8),\n    (1, 6, 9), (1, 3, 7), (1, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 9\nmax_flow = g.edmonds_karp(2, 9)\nprint(max_flow)\n```"}, "148": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 5, 1), (4, 6, 0),\n    (5, 3, 9), (5, 2, 2), (5, 6, 8), (5, 8, 2), (5, 7, 0),\n    (3, 7, 6),\n    (6, 8, 1), (6, 4, 4), (6, 5, 0),\n    (8, 7, 3), (8, 3, 9),\n    (7, 5, 6), (7, 3, 0),\n    (0, 5, 9), (0, 7, 10),\n    (1, 2, 9), (1, 0, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 4)\nprint(max_flow)\n```"}, "149": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 0, 4), (3, 1, 9), (3, 2, 3), (3, 7, 4), (3, 5, 0),\n    (0, 5, 7), (0, 7, 0), (0, 3, 0), (0, 4, 0),\n    (1, 6, 3),\n    (2, 5, 6), (2, 3, 2), (2, 1, 2), (2, 4, 8),\n    (7, 0, 5), (7, 1, 4), (7, 6, 5), (7, 5, 0),\n    (5, 7, 6), (5, 3, 10), (5, 0, 1), (5, 1, 6),\n    (6, 1, 9),\n    (4, 6, 10), (4, 5, 10), (4, 7, 6), (4, 0, 1), (4, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 0\nmax_flow = g.edmonds_karp(5, 0)\nprint(max_flow)\n```"}, "150": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\n\nedges = [\n    (13, 6, 1), (13, 1, 10), (13, 10, 10), (13, 8, 8), (13, 3, 8), (13, 0, 5),\n    (6, 1, 9), (6, 8, 4), (6, 3, 6), (6, 14, 10), (6, 12, 3), (6, 0, 8), (6, 7, 9), (6, 9, 5),\n    (1, 12, 4), (1, 0, 7), (1, 13, 9), (1, 2, 2), (1, 6, 0),\n    (10, 14, 7), (10, 13, 2), (10, 1, 8),\n    (8, 3, 7), (8, 14, 7), (8, 5, 6), (8, 2, 4), (8, 1, 2), (8, 11, 5), (8, 9, 0),\n    (3, 0, 2), (3, 8, 9),\n    (0, 4, 8), (0, 13, 7), (0, 2, 4), (0, 10, 3), (0, 3, 4), (0, 9, 0),\n    (14, 12, 4), (14, 4, 10), (14, 13, 9), (14, 6, 2), (14, 1, 5), (14, 10, 1), (14, 11, 6),\n    (12, 13, 1), (12, 2, 10), (12, 10, 9), (12, 11, 5), (12, 8, 2), (12, 9, 0), (12, 6, 0), (12, 1, 0),\n    (7, 6, 10), (7, 10, 2), (7, 3, 1), (7, 14, 7),\n    (9, 6, 10), (9, 11, 9), (9, 8, 7), (9, 12, 4), (9, 0, 9), (9, 4, 8),\n    (2, 8, 10), (2, 14, 2), (2, 0, 9), (2, 5, 4), (2, 12, 0), (2, 4, 0), (2, 1, 0),\n    (5, 10, 1), (5, 13, 10),\n    (11, 14, 9), (11, 4, 10), (11, 9, 8), (11, 6, 6), (11, 10, 6),\n    (4, 7, 9), (4, 9, 1), (4, 5, 5), (4, 2, 6), (4, 14, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 2)\nprint(max_flow)\n```"}, "151": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 9, 4), (2, 3, 0),\n    (9, 2, 8), (9, 7, 2),\n    (7, 3, 8), (7, 9, 1), (7, 4, 7), (7, 11, 6), (7, 10, 3), (7, 2, 5),\n    (3, 4, 4), (3, 2, 10), (3, 5, 0),\n    (4, 0, 6), (4, 10, 8), (4, 3, 3), (4, 9, 6),\n    (11, 7, 6),\n    (10, 4, 1), (10, 1, 8), (10, 5, 0), (10, 7, 0),\n    (0, 3, 2),\n    (1, 10, 1), (1, 2, 10),\n    (8, 2, 8), (8, 3, 8), (8, 4, 8),\n    (5, 10, 3), (5, 3, 5),\n    (6, 0, 1), (6, 1, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 10\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "152": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 5, 5), (1, 9, 9), (1, 0, 4),\n    (5, 9, 6), (5, 3, 1),\n    (9, 8, 6), (9, 2, 7),\n    (0, 8, 1), (0, 4, 9), (0, 2, 10), (0, 6, 10),\n    (3, 5, 2), (3, 8, 6), (3, 4, 9),\n    (8, 4, 2), (8, 2, 10), (8, 9, 0),\n    (2, 5, 3), (2, 6, 5), (2, 8, 3), (2, 4, 2), (2, 9, 0),\n    (4, 9, 8), (4, 0, 10), (4, 1, 5),\n    (6, 4, 4), (6, 7, 3),\n    (7, 3, 9), (7, 5, 4), (7, 8, 6), (7, 2, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 2)\nprint(max_flow)\n```"}, "153": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the provided graph\nedges = [\n    (8, 7, 10), (8, 11, 6), (8, 10, 2), (8, 4, 1), (8, 5, 10), (8, 13, 0),\n    (7, 11, 6), (7, 3, 1), (7, 12, 10), (7, 10, 10), (7, 4, 4), (7, 13, 0),\n    (11, 6, 10), (11, 1, 8), (11, 2, 1), (11, 4, 2), (11, 0, 5), (11, 5, 5), (11, 14, 9), (11, 7, 8), (11, 13, 0), (11, 8, 0),\n    (10, 9, 3), (10, 3, 10), (10, 12, 10), (10, 13, 6), (10, 1, 4),\n    (4, 5, 7), (4, 14, 1), (4, 8, 4), (4, 7, 5), (4, 11, 5), (4, 6, 8),\n    (5, 8, 4), (5, 3, 10), (5, 6, 7), (5, 9, 8), (5, 4, 1), (5, 13, 0),\n    (3, 10, 10),\n    (12, 13, 2), (12, 2, 3), (12, 9, 8), (12, 0, 4), (12, 7, 6),\n    (6, 13, 4), (6, 10, 1), (6, 0, 10), (6, 3, 6), (6, 5, 0), (6, 11, 0),\n    (1, 2, 1), (1, 9, 2), (1, 0, 1), (1, 8, 4), (1, 3, 9), (1, 13, 7),\n    (2, 4, 7), (2, 5, 8), (2, 14, 8), (2, 8, 9), (2, 11, 5),\n    (0, 14, 5), (0, 7, 1), (0, 3, 8), (0, 11, 0), (0, 6, 0), (0, 12, 0), (0, 1, 0),\n    (14, 13, 10), (14, 1, 1), (14, 9, 5),\n    (9, 12, 7), (9, 13, 1), (9, 1, 10), (9, 5, 0),\n    (13, 5, 8), (13, 8, 3), (13, 7, 7), (13, 11, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 13 to node 0\nmax_flow = g.edmonds_karp(13, 0)\nprint(max_flow)\n```"}, "154": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 0, 10), (10, 8, 0),\n    (0, 10, 8), (0, 9, 8),\n    (9, 0, 3), (9, 3, 0),\n    (7, 2, 1), (7, 1, 1), (7, 3, 8),\n    (2, 6, 10), (2, 7, 0),\n    (1, 3, 1),\n    (3, 9, 7), (3, 7, 0),\n    (6, 8, 7), (6, 2, 0),\n    (5, 2, 9), (5, 8, 5),\n    (8, 10, 6), (8, 4, 10), (8, 1, 5), (8, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 10)\nprint(max_flow)\n```"}, "155": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u].items():\n                if v not in visited and capacity > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 10, 1), (11, 9, 10), (11, 0, 0),\n    (10, 5, 2), (10, 2, 2), (10, 11, 1), (10, 8, 0),\n    (5, 2, 4), (5, 11, 6),\n    (2, 9, 2), (2, 1, 3),\n    (1, 11, 5),\n    (7, 6, 8), (7, 0, 5),\n    (6, 5, 4), (6, 0, 1), (6, 4, 10),\n    (0, 8, 4), (0, 9, 8), (0, 11, 1), (0, 1, 9), (0, 6, 4), (0, 5, 8), (0, 2, 9),\n    (4, 9, 9), (4, 7, 10), (4, 6, 9), (4, 3, 5),\n    (8, 11, 9), (8, 1, 9), (8, 10, 3), (8, 2, 6), (8, 0, 0),\n    (3, 8, 2), (3, 11, 8), (3, 6, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 10)\nprint(max_flow)\n```"}, "156": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v]  # Ensure v is in the graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity.get((u, v), 0) > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] = self.capacity.get((v, u), 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 7, 10), (8, 1, 0),\n    (7, 5, 7), (7, 3, 2), (7, 1, 3), (7, 6, 10), (7, 8, 0), (7, 4, 0),\n    (5, 13, 6), (5, 14, 8), (5, 12, 8), (5, 8, 8), (5, 7, 0), (5, 4, 0),\n    (3, 7, 3), (3, 9, 1), (3, 13, 1), (3, 4, 9), (3, 11, 8),\n    (1, 8, 3), (1, 9, 3), (1, 14, 5),\n    (13, 12, 1), (13, 7, 7), (13, 0, 3),\n    (14, 10, 10), (14, 7, 8), (14, 1, 0), (14, 5, 0),\n    (9, 4, 4), (9, 6, 8), (9, 1, 0),\n    (4, 6, 8), (4, 7, 10), (4, 5, 2), (4, 9, 3), (4, 12, 7), (4, 10, 8),\n    (11, 5, 3),\n    (0, 13, 10), (0, 14, 4), (0, 12, 6), (0, 11, 7), (0, 3, 5), (0, 2, 1), (0, 8, 4), (0, 9, 4),\n    (10, 3, 5), (10, 6, 2),\n    (2, 9, 8), (2, 4, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 14)\nprint(max_flow)\n```"}, "157": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 4, 9), (9, 0, 1), (9, 1, 8), (9, 10, 6), (9, 3, 1), (9, 14, 0), (9, 8, 0),\n    (4, 12, 5), (4, 11, 8), (4, 6, 2),\n    (0, 12, 1), (0, 8, 4), (0, 2, 9),\n    (12, 7, 4),\n    (6, 3, 5), (6, 0, 4), (6, 13, 7),\n    (8, 10, 3), (8, 9, 6), (8, 2, 5), (8, 14, 0),\n    (2, 8, 5),\n    (7, 11, 4), (7, 6, 1), (7, 4, 8), (7, 2, 2),\n    (13, 5, 9), (13, 2, 9), (13, 0, 7),\n    (14, 9, 3), (14, 4, 10), (14, 8, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 14 to node 9\nmax_flow = g.edmonds_karp(14, 9)\nprint(max_flow)\n```"}, "158": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, s, t):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(s, t, parent):\n            path_flow = float('Inf')\n            v = t\n\n            while v != s:\n                u = parent[v]\n                path_flow = min(path_flow, self.graph[u][v])\n                v = u\n\n            v = t\n            while v != s:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] += path_flow\n                v = u\n\n            max_flow += path_flow\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 11, 3), (2, 13, 1), (2, 10, 9),\n    (11, 1, 4), (11, 14, 5),\n    (13, 0, 7), (13, 6, 10), (13, 4, 2), (13, 9, 4), (13, 12, 0), (13, 1, 0),\n    (10, 12, 4), (10, 6, 6), (10, 1, 3),\n    (1, 4, 3), (1, 12, 8), (1, 14, 7), (1, 9, 3), (1, 11, 8), (1, 13, 5), (1, 0, 10), (1, 10, 0),\n    (14, 9, 6), (14, 7, 3), (14, 1, 1), (14, 2, 8),\n    (0, 2, 1), (0, 12, 3), (0, 3, 3),\n    (6, 5, 5), (6, 3, 2), (6, 14, 2), (6, 9, 10), (6, 11, 3), (6, 13, 8), (6, 10, 0),\n    (4, 14, 6), (4, 9, 2), (4, 11, 7), (4, 0, 4), (4, 1, 3),\n    (9, 7, 2), (9, 5, 2), (9, 14, 1),\n    (12, 3, 6), (12, 11, 6), (12, 13, 9), (12, 6, 9), (12, 10, 0),\n    (3, 9, 5), (3, 7, 9), (3, 6, 2), (3, 1, 6), (3, 12, 8),\n    (7, 8, 6), (7, 6, 8), (7, 1, 5),\n    (5, 4, 4), (5, 14, 1), (5, 13, 9),\n    (8, 2, 2), (8, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 13)\nprint(max_flow)\n```"}, "159": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 10, 6), (9, 8, 6), (9, 2, 6), (9, 0, 7),\n    (10, 1, 9), (10, 0, 1), (10, 3, 6), (10, 4, 5), (10, 9, 1), (10, 7, 0),\n    (8, 2, 1), (8, 1, 4), (8, 0, 4), (8, 7, 5),\n    (2, 0, 6), (2, 7, 1),\n    (0, 9, 7), (0, 5, 2), (0, 10, 3), (0, 2, 7), (0, 1, 2),\n    (1, 3, 4), (1, 7, 10), (1, 9, 2), (1, 5, 6), (1, 8, 4), (1, 2, 5), (1, 10, 0),\n    (3, 4, 4), (3, 6, 10), (3, 5, 5), (3, 2, 1), (3, 1, 6), (3, 10, 0),\n    (4, 7, 9), (4, 9, 10), (4, 5, 1), (4, 8, 3), (4, 0, 6),\n    (7, 9, 1), (7, 5, 4), (7, 10, 10), (7, 8, 6),\n    (5, 10, 2), (5, 8, 5), (5, 0, 1), (5, 6, 2), (5, 7, 0),\n    (6, 9, 1), (6, 10, 6), (6, 7, 3), (6, 5, 0), (6, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 6)\nprint(max_flow)\n```"}, "160": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 3, 5), (0, 1, 3), (0, 2, 4), (0, 5, 10),\n    (3, 7, 2), (3, 4, 4), (3, 1, 4), (3, 2, 8), (3, 5, 7),\n    (1, 2, 4), (1, 7, 5), (1, 4, 7), (1, 5, 0), (1, 3, 0),\n    (2, 0, 1), (2, 3, 10), (2, 7, 2), (2, 1, 4),\n    (5, 3, 10), (5, 7, 10), (5, 1, 6),\n    (7, 2, 5), (7, 5, 7),\n    (4, 0, 6), (4, 8, 4), (4, 7, 8), (4, 6, 10), (4, 3, 0), (4, 1, 0),\n    (8, 7, 7), (8, 6, 4), (8, 1, 4), (8, 2, 9), (8, 4, 0),\n    (6, 4, 0), (6, 8, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 6\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "161": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 4, 6), (8, 9, 0), (4, 3, 8), (4, 8, 0),\n    (3, 10, 9), (3, 5, 4), (3, 6, 1), (3, 8, 4), (3, 4, 0),\n    (10, 5, 5), (5, 6, 7), (5, 8, 2), (5, 2, 1), (5, 0, 7), (5, 3, 6),\n    (6, 7, 9), (2, 10, 9), (2, 6, 5), (2, 5, 0),\n    (7, 4, 4), (0, 10, 3), (0, 9, 3), (0, 4, 7),\n    (9, 6, 3), (9, 8, 10), (1, 4, 4), (1, 0, 8), (1, 3, 3), (1, 6, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 2)\nprint(max_flow)\n```"}, "162": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 11, 1), (2, 0, 8), (2, 4, 1), (2, 8, 4), (2, 7, 0),\n    (11, 3, 8), (11, 5, 6), (11, 8, 3),\n    (0, 1, 6), (0, 7, 5), (0, 5, 4), (0, 11, 7),\n    (4, 2, 7), (4, 7, 10), (4, 10, 9),\n    (8, 3, 6), (8, 10, 5), (8, 6, 8), (8, 7, 0), (8, 2, 0),\n    (3, 1, 5), (3, 7, 4), (3, 4, 4),\n    (5, 6, 9), (5, 7, 8),\n    (1, 7, 8), (1, 4, 8), (1, 8, 2), (1, 9, 2), (1, 3, 3),\n    (7, 8, 4), (7, 2, 6), (7, 5, 0),\n    (10, 6, 9), (10, 8, 2), (10, 2, 6), (10, 11, 9), (10, 1, 3),\n    (6, 4, 7), (6, 2, 2), (6, 10, 3), (6, 5, 0), (6, 8, 0),\n    (9, 8, 7), (9, 2, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 6\nmax_flow = g.edmonds_karp(5, 6)\nprint(max_flow)\n```"}, "163": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 6, 3), (2, 5, 2), (2, 10, 8), (2, 9, 9), (2, 0, 10),\n    (6, 10, 4), (6, 4, 7), (6, 1, 1), (6, 11, 4), (6, 8, 3),\n    (5, 9, 2), (5, 4, 7), (5, 8, 4),\n    (10, 9, 6), (10, 0, 4), (10, 4, 10), (10, 7, 7),\n    (9, 0, 8), (9, 6, 3),\n    (0, 4, 7), (0, 3, 3), (0, 7, 3), (0, 1, 8), (0, 11, 5), (0, 5, 1), (0, 9, 1), (0, 8, 0),\n    (4, 11, 2), (4, 8, 5), (4, 5, 6),\n    (1, 2, 3), (1, 11, 10), (1, 4, 10),\n    (11, 8, 9), (11, 7, 6), (11, 1, 3), (11, 2, 2),\n    (8, 0, 8), (8, 1, 1), (8, 4, 0),\n    (7, 2, 9), (7, 6, 5), (7, 5, 2), (7, 10, 3), (7, 9, 5),\n    (3, 2, 6), (3, 11, 9), (3, 6, 1), (3, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 4 to node 3\nmax_flow = g.edmonds_karp(4, 3)\nprint(max_flow)\n```"}, "164": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 8, 2), (8, 5, 4), (8, 2, 5), (8, 1, 5), (8, 7, 6),\n    (5, 4, 6), (5, 6, 6), (5, 2, 5), (5, 1, 9), (5, 3, 7), (5, 7, 4), (5, 8, 7),\n    (2, 3, 2), (2, 4, 8),\n    (7, 5, 8), (7, 4, 10), (7, 3, 1),\n    (3, 5, 10), (3, 6, 10), (3, 1, 1), (3, 2, 0),\n    (6, 8, 4), (6, 5, 4), (6, 4, 2), (6, 3, 0),\n    (4, 6, 9), (4, 2, 2), (4, 3, 4), (4, 0, 5), (4, 8, 6),\n    (0, 8, 8), (0, 2, 7), (0, 1, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 6\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "165": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 5, 4), (4, 1, 9), (4, 7, 6), (4, 8, 0), (4, 3, 0),\n    (5, 6, 7), (5, 8, 10), (5, 7, 2),\n    (1, 8, 1), (1, 0, 8),\n    (7, 3, 6), (7, 4, 4), (7, 0, 6), (7, 5, 3), (7, 6, 9),\n    (6, 1, 2), (6, 8, 9), (6, 0, 3), (6, 5, 6), (6, 2, 5), (6, 9, 8),\n    (8, 3, 10), (8, 4, 2), (8, 2, 7), (8, 1, 9), (8, 6, 0),\n    (0, 9, 5), (0, 6, 9), (0, 1, 9), (0, 7, 3),\n    (3, 4, 9), (3, 0, 4), (3, 5, 7), (3, 9, 5), (3, 6, 3), (3, 1, 3), (3, 8, 0),\n    (9, 0, 9),\n    (2, 9, 3), (2, 0, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 7)\nprint(max_flow)\n```"}, "166": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (13, 7, 6), (13, 1, 6), (13, 8, 7), (13, 4, 2), (13, 6, 6),\n    (7, 11, 4), (7, 9, 5), (7, 3, 9), (7, 13, 1), (7, 6, 0),\n    (1, 13, 1), (1, 6, 0),\n    (8, 2, 7), (8, 6, 9), (8, 7, 2), (8, 11, 8), (8, 13, 0),\n    (4, 13, 7), (4, 10, 2), (4, 11, 6), (4, 9, 5), (4, 12, 3), (4, 2, 1), (4, 3, 0),\n    (6, 5, 8), (6, 7, 1), (6, 1, 4),\n    (11, 8, 6), (11, 2, 3), (11, 7, 8),\n    (9, 1, 4), (9, 0, 5), (9, 2, 7), (9, 6, 2),\n    (3, 4, 7), (3, 10, 10), (3, 7, 9), (3, 5, 0),\n    (10, 11, 6), (10, 2, 7), (10, 4, 9),\n    (12, 5, 7), (12, 8, 6), (12, 3, 4),\n    (5, 3, 4), (5, 6, 3),\n    (0, 2, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 8)\nprint(max_flow)\n```"}, "167": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 6, 7), (9, 11, 8), (9, 5, 0),\n    (6, 8, 6), (6, 9, 0), (6, 7, 0),\n    (11, 7, 8), (11, 3, 0),\n    (8, 6, 0), (8, 0, 0), (8, 4, 0),\n    (7, 3, 7), (7, 6, 9), (7, 11, 0),\n    (4, 6, 1), (4, 3, 4), (4, 5, 1), (4, 8, 1), (4, 1, 0),\n    (3, 5, 8), (3, 11, 5),\n    (5, 9, 8), (5, 1, 4), (5, 3, 0),\n    (1, 6, 4), (1, 0, 2), (1, 3, 6), (1, 4, 3), (1, 5, 0),\n    (0, 11, 5), (0, 8, 8), (0, 1, 3), (0, 6, 4),\n    (2, 5, 8), (2, 8, 9),\n    (10, 4, 6), (10, 0, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 8\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "168": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 12, 9), (4, 8, 5), (4, 13, 1), (4, 11, 2), (4, 10, 0),\n    (12, 8, 7), (12, 5, 2), (12, 13, 1), (12, 11, 4),\n    (8, 7, 2), (8, 1, 4), (8, 13, 9), (8, 12, 6), (8, 10, 0),\n    (13, 8, 10), (13, 2, 9), (13, 5, 4), (13, 9, 7), (13, 3, 1),\n    (13, 10, 10), (13, 0, 2), (13, 7, 0), (13, 4, 0),\n    (11, 12, 7), (11, 2, 3), (11, 5, 8), (11, 0, 2), (11, 13, 8),\n    (11, 7, 0), (11, 4, 0),\n    (5, 9, 6), (5, 3, 9), (5, 10, 3), (5, 0, 4), (5, 1, 2),\n    (5, 13, 2), (5, 8, 9),\n    (7, 1, 2), (7, 13, 4), (7, 11, 2), (7, 3, 3), (7, 10, 10),\n    (1, 7, 4), (1, 0, 1),\n    (2, 3, 3), (2, 6, 1), (2, 10, 5), (2, 7, 8), (2, 13, 0),\n    (2, 11, 0), (2, 0, 0),\n    (9, 3, 1), (9, 6, 5), (9, 7, 10), (9, 4, 2), (9, 12, 3),\n    (9, 13, 0),\n    (3, 7, 10), (3, 1, 7), (3, 13, 3), (3, 11, 2), (3, 4, 9),\n    (3, 12, 10),\n    (10, 1, 9), (10, 4, 3), (10, 8, 2), (10, 7, 0),\n    (0, 1, 9), (0, 2, 2), (0, 3, 6), (0, 11, 0),\n    (6, 7, 5), (6, 2, 4), (6, 5, 9), (6, 9, 7), (6, 3, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 2)\nprint(max_flow)\n```"}, "169": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 1, 1), (9, 4, 10), (9, 8, 7),\n    (1, 6, 4), (1, 5, 4), (1, 8, 6), (1, 7, 1), (1, 3, 3), (1, 9, 0),\n    (4, 8, 4), (4, 0, 6), (4, 2, 4), (4, 6, 6),\n    (8, 3, 8), (8, 1, 2), (8, 0, 9), (8, 2, 7), (8, 5, 4),\n    (6, 0, 6),\n    (5, 8, 4), (5, 3, 5), (5, 4, 8),\n    (7, 6, 9), (7, 9, 5), (7, 1, 0),\n    (3, 2, 4), (3, 5, 7), (3, 8, 8),\n    (0, 2, 5), (0, 6, 5), (0, 8, 1), (0, 9, 5), (0, 3, 3), (0, 1, 3),\n    (2, 0, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 7)\nprint(max_flow)\n```"}, "170": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 9, 10), (4, 0, 1), (4, 5, 2), (4, 6, 4), (4, 3, 7), (4, 2, 0),\n    (9, 0, 10), (9, 5, 10), (9, 6, 8), (9, 7, 7), (9, 4, 10), (9, 2, 0),\n    (0, 8, 3), (0, 1, 8), (0, 4, 9), (0, 9, 1), (0, 5, 0),\n    (5, 2, 6), (5, 4, 10), (5, 0, 6),\n    (6, 4, 10), (6, 8, 1),\n    (3, 9, 2), (3, 6, 2),\n    (7, 9, 2),\n    (8, 3, 5), (8, 7, 9), (8, 1, 10), (8, 9, 6),\n    (1, 8, 2), (1, 2, 3),\n    (2, 1, 1), (2, 4, 5), (2, 9, 9), (2, 8, 1), (2, 3, 1), (2, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 4)\nprint(max_flow)\n```"}, "171": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 6, 1), (1, 9, 6), (1, 11, 6),\n    (6, 0, 6), (6, 2, 4), (6, 4, 5),\n    (9, 3, 5), (9, 1, 3), (9, 6, 3),\n    (11, 3, 7),\n    (0, 3, 1), (0, 9, 6), (0, 10, 2), (0, 6, 0),\n    (2, 6, 8), (2, 10, 2), (2, 8, 0),\n    (4, 8, 7), (4, 2, 7),\n    (3, 6, 1),\n    (10, 8, 0), (10, 7, 0), (10, 2, 0), (10, 0, 0),\n    (8, 7, 1), (8, 2, 7), (8, 10, 4),\n    (5, 0, 9), (5, 7, 8), (5, 11, 5), (5, 6, 5),\n    (7, 4, 6), (7, 10, 2), (7, 8, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 10\nmax_flow = g.edmonds_karp(8, 10)\nprint(max_flow)\n```"}, "172": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 5, 7), (0, 7, 3), (0, 11, 10), (0, 6, 1), (0, 2, 7), (0, 4, 0),\n    (5, 3, 7), (5, 10, 6), (5, 9, 2), (5, 2, 7), (5, 1, 3), (5, 0, 5),\n    (7, 6, 3), (7, 8, 6), (7, 9, 2), (7, 4, 0),\n    (11, 10, 7),\n    (6, 1, 10), (6, 8, 9), (6, 3, 6), (6, 10, 2), (6, 4, 7), (6, 0, 0),\n    (2, 1, 6), (2, 4, 9), (2, 9, 3),\n    (3, 7, 6), (3, 11, 9), (3, 6, 3), (3, 1, 2), (3, 8, 5), (3, 4, 0), (3, 5, 0),\n    (10, 9, 1), (10, 11, 9), (10, 6, 1), (10, 2, 4), (10, 1, 9), (10, 8, 4),\n    (9, 7, 7), (9, 2, 10), (9, 0, 9), (9, 3, 7), (9, 10, 9),\n    (1, 8, 2), (1, 10, 4), (1, 11, 2), (1, 2, 4),\n    (8, 0, 1), (8, 4, 5), (8, 9, 7), (8, 7, 0), (8, 3, 0), (8, 1, 0), (8, 6, 0), (8, 10, 0),\n    (4, 7, 6), (4, 2, 5), (4, 8, 8), (4, 0, 2), (4, 3, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 8)\nprint(max_flow)\n```"}, "173": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the given graph\nedges = [\n    (5, 10, 6), (5, 9, 10), (5, 6, 7), (5, 4, 4), (5, 13, 0),\n    (10, 8, 10), (10, 1, 2), (10, 5, 7), (10, 11, 2), (10, 3, 9), (10, 13, 0),\n    (9, 6, 5), (9, 13, 6), (9, 1, 10), (9, 5, 0), (9, 7, 0),\n    (6, 1, 10), (6, 5, 10), (6, 3, 8),\n    (4, 13, 7), (4, 8, 10), (4, 11, 6), (4, 12, 10), (4, 0, 5), (4, 6, 10),\n    (8, 5, 6), (8, 12, 3), (8, 6, 3), (8, 4, 9),\n    (1, 5, 2), (1, 11, 6), (1, 3, 4), (1, 0, 6), (1, 13, 9),\n    (11, 2, 3), (11, 10, 4), (11, 6, 8), (11, 8, 6), (11, 1, 7),\n    (3, 12, 9), (3, 10, 4), (3, 0, 3), (3, 6, 4), (3, 4, 2), (3, 7, 10), (3, 1, 5), (3, 5, 7), (3, 11, 6),\n    (13, 5, 5), (13, 11, 1), (13, 10, 8),\n    (12, 2, 4), (12, 10, 8), (12, 4, 3), (12, 8, 6), (12, 5, 7), (12, 11, 9), (12, 3, 6),\n    (0, 4, 8), (0, 13, 5), (0, 8, 10), (0, 7, 7), (0, 12, 4),\n    (2, 6, 6), (2, 4, 1), (2, 1, 4), (2, 5, 6),\n    (7, 1, 8), (7, 5, 8), (7, 11, 9), (7, 9, 2), (7, 0, 6), (7, 6, 8), (7, 13, 1), (7, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 13 to node 9\nmax_flow = g.edmonds_karp(13, 9)\nprint(max_flow)\n```"}, "174": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 2, 1), (7, 1, 9), (7, 5, 9), (7, 0, 8), (7, 4, 0),\n    (2, 8, 6), (2, 0, 1), (2, 7, 10), (2, 3, 2),\n    (5, 0, 10), (5, 8, 9), (5, 1, 8), (5, 3, 0),\n    (0, 7, 10), (0, 5, 0),\n    (8, 1, 3), (8, 4, 2), (8, 3, 2),\n    (3, 5, 1), (3, 4, 1), (3, 8, 0),\n    (4, 3, 10), (4, 8, 3), (4, 7, 7),\n    (6, 0, 10), (6, 7, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 0)\nprint(max_flow)\n```"}, "175": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (6, 7, 1), (7, 3, 5), (7, 8, 1), (7, 5, 4), (7, 0, 1),\n    (7, 1, 3), (7, 9, 9), (3, 8, 6), (3, 5, 7), (3, 0, 3),\n    (3, 9, 4), (3, 10, 3), (8, 0, 8), (8, 2, 10), (8, 11, 5),\n    (8, 9, 6), (8, 7, 1), (8, 3, 0), (5, 2, 10), (5, 11, 8),\n    (5, 10, 6), (5, 8, 1), (0, 2, 7), (0, 9, 9), (0, 10, 7),\n    (0, 3, 6), (1, 7, 4), (1, 12, 2), (1, 8, 4), (1, 2, 0),\n    (9, 4, 3), (9, 6, 10), (2, 0, 2), (2, 1, 3), (2, 8, 0),\n    (11, 9, 3), (11, 10, 5), (11, 4, 1), (11, 1, 2), (10, 0, 8),\n    (10, 2, 5), (10, 9, 4), (10, 7, 3), (4, 1, 3), (12, 6, 8),\n    (12, 8, 2), (12, 9, 1), (12, 1, 0), (14, 3, 9), (14, 13, 7),\n    (13, 4, 2), (13, 12, 8), (13, 6, 8), (13, 0, 1), (13, 2, 3),\n    (13, 11, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 12\nmax_flow = g.edmonds_karp(3, 12)\nprint(max_flow)\n```"}, "176": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the provided graph\nedges = [\n    (9, 8, 7), (9, 14, 7), (9, 11, 8), (9, 12, 4), (9, 5, 0), (9, 7, 0), (9, 6, 0), (9, 1, 0),\n    (8, 14, 9), (8, 13, 9), (8, 5, 1), (8, 11, 0),\n    (14, 11, 2), (14, 5, 4), (14, 0, 9), (14, 6, 6), (14, 2, 0),\n    (11, 2, 10), (11, 3, 8), (11, 9, 4), (11, 8, 9), (11, 13, 6), (11, 4, 9),\n    (12, 9, 2), (12, 8, 1), (12, 14, 2), (12, 4, 2), (12, 11, 3), (12, 0, 2), (12, 2, 0),\n    (13, 10, 6), (13, 11, 0),\n    (5, 6, 2), (5, 3, 8), (5, 9, 10), (5, 4, 10), (5, 8, 0), (5, 14, 0), (5, 7, 0),\n    (0, 12, 5), (0, 2, 2), (0, 3, 7), (0, 8, 1),\n    (6, 7, 3), (6, 9, 1), (6, 14, 8),\n    (2, 14, 8), (2, 4, 3), (2, 0, 2), (2, 12, 3), (2, 11, 0),\n    (3, 14, 10), (3, 4, 1), (3, 11, 7),\n    (4, 2, 8), (4, 7, 7), (4, 3, 2), (4, 14, 1), (4, 11, 0),\n    (10, 6, 9), (10, 1, 3), (10, 3, 10), (10, 14, 3), (10, 13, 10),\n    (7, 9, 5), (7, 8, 10), (7, 4, 8), (7, 5, 7), (7, 6, 0),\n    (1, 9, 9), (1, 8, 9), (1, 14, 5), (1, 6, 3), (1, 2, 5), (1, 10, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 11 to node 9\nmax_flow = g.edmonds_karp(11, 9)\nprint(max_flow)\n```"}, "177": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 3, 8), (4, 5, 5), (4, 2, 9), (4, 6, 7), (4, 1, 0),\n    (3, 2, 10), (3, 6, 7), (3, 1, 3), (3, 0, 5),\n    (5, 7, 4), (5, 2, 6), (5, 6, 5), (5, 3, 2), (5, 4, 0),\n    (2, 3, 4), (2, 7, 3), (2, 1, 0),\n    (6, 0, 9), (6, 7, 9), (6, 1, 0),\n    (1, 4, 4), (1, 2, 8), (1, 6, 9),\n    (0, 4, 7), (0, 2, 8), (0, 1, 3),\n    (7, 6, 4), (7, 2, 0), (7, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 7)\nprint(max_flow)\n```"}, "178": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 5, 8), (6, 7, 3), (6, 2, 1), (6, 1, 9),\n    (5, 4, 4), (5, 8, 9), (5, 6, 0),\n    (7, 1, 8), (7, 8, 6),\n    (2, 1, 8), (2, 6, 9), (2, 7, 5),\n    (4, 5, 0),\n    (8, 3, 1), (8, 2, 5),\n    (3, 7, 9), (3, 6, 10),\n    (0, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 4)\nprint(max_flow)\n```"}, "179": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (8, 10, 7), (8, 4, 3), (8, 5, 2), (8, 1, 0),\n    (10, 6, 1), (10, 12, 2), (10, 5, 10),\n    (4, 6, 6), (4, 11, 5), (4, 1, 0),\n    (5, 1, 5), (5, 9, 2), (5, 12, 4), (5, 8, 0), (5, 11, 0),\n    (6, 8, 6),\n    (12, 8, 5), (12, 9, 2), (12, 2, 10), (12, 0, 5), (12, 11, 0),\n    (11, 7, 4), (11, 3, 7), (11, 0, 10), (11, 12, 1), (11, 5, 5), (11, 10, 2), (11, 4, 0),\n    (1, 9, 6), (1, 4, 3), (1, 8, 1),\n    (9, 7, 5), (9, 2, 7), (9, 8, 8), (9, 1, 0), (9, 5, 0), (9, 0, 0), (9, 12, 0),\n    (7, 0, 9), (7, 12, 1), (7, 8, 7), (7, 1, 5), (7, 11, 10),\n    (2, 3, 10), (2, 12, 4), (2, 1, 3), (2, 9, 1),\n    (0, 4, 6), (0, 5, 3), (0, 8, 10), (0, 10, 2), (0, 9, 1), (0, 2, 5), (0, 11, 0),\n    (3, 0, 6), (3, 12, 6), (3, 4, 2), (3, 1, 1), (3, 11, 2), (3, 7, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 9\nmax_flow = g.edmonds_karp(1, 9)\nprint(max_flow)\n```"}, "180": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (11, 4, 3), (11, 6, 1), (11, 10, 9), (11, 9, 0),\n    (4, 10, 6), (4, 8, 9),\n    (6, 10, 9),\n    (10, 2, 2), (10, 0, 1), (10, 8, 6), (10, 3, 4), (10, 11, 0),\n    (8, 3, 8),\n    (2, 11, 2),\n    (0, 11, 5), (0, 5, 7), (0, 10, 0),\n    (3, 4, 2), (3, 5, 10), (3, 6, 1),\n    (5, 9, 9),\n    (9, 5, 1), (9, 11, 7),\n    (7, 2, 3), (7, 11, 7),\n    (1, 4, 4), (1, 6, 2), (1, 3, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 0\nmax_flow = g.edmonds_karp(5, 0)\nprint(max_flow)\n```"}, "181": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 11, 7), (8, 4, 0), (8, 5, 0), (8, 1, 0),\n    (11, 5, 6), (11, 3, 9), (11, 8, 0), (11, 0, 0),\n    (5, 3, 9), (5, 8, 2), (5, 6, 6), (5, 9, 0),\n    (3, 0, 1), (3, 4, 0),\n    (4, 3, 5), (4, 10, 3), (4, 8, 1),\n    (10, 9, 3), (10, 4, 0),\n    (0, 11, 9), (0, 1, 9), (0, 3, 5),\n    (9, 2, 2), (9, 5, 5), (9, 10, 0),\n    (2, 3, 6), (2, 10, 9), (2, 1, 2), (2, 9, 0),\n    (1, 6, 10), (1, 5, 7), (1, 7, 6), (1, 8, 1), (1, 4, 6), (1, 2, 0),\n    (6, 4, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 11)\nprint(max_flow)\n```"}, "182": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 1, 3), (3, 4, 6), (1, 6, 5), (1, 0, 1), (1, 5, 2), (1, 9, 10),\n    (4, 7, 6), (4, 2, 5), (4, 8, 8), (4, 1, 7), (6, 5, 2), (6, 4, 9),\n    (6, 1, 0), (0, 6, 2), (5, 9, 5), (5, 3, 1), (5, 0, 6), (5, 1, 0),\n    (5, 6, 0), (9, 7, 8), (9, 0, 6), (9, 8, 8), (7, 0, 7), (7, 9, 7),\n    (7, 1, 2), (2, 1, 6), (2, 7, 7), (8, 0, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 5)\nprint(max_flow)\n```"}, "183": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 1, 5), (9, 13, 8), (9, 3, 0),\n    (1, 3, 8), (1, 13, 2),\n    (13, 5, 2), (13, 8, 9), (13, 2, 1), (13, 1, 0), (13, 9, 0),\n    (3, 9, 7), (3, 14, 6), (3, 8, 2), (3, 1, 0),\n    (5, 12, 9), (5, 11, 8), (5, 8, 6), (5, 6, 7), (5, 3, 10), (5, 13, 6), (5, 2, 0),\n    (8, 6, 8),\n    (2, 5, 5), (2, 14, 0), (2, 13, 0),\n    (10, 14, 7), (10, 6, 5), (10, 3, 3),\n    (14, 1, 10), (14, 2, 3), (14, 9, 2), (14, 10, 8), (14, 3, 0),\n    (6, 3, 10), (6, 13, 10), (6, 9, 2),\n    (12, 11, 9), (12, 6, 5), (12, 3, 3), (12, 7, 9), (12, 14, 10), (12, 5, 0),\n    (11, 8, 3), (11, 3, 6), (11, 5, 3), (11, 10, 8),\n    (7, 9, 5),\n    (0, 3, 1), (0, 2, 8),\n    (4, 9, 7), (4, 1, 9), (4, 0, 8), (4, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 12\nmax_flow = g.edmonds_karp(1, 12)\nprint(max_flow)\n```"}, "184": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 8, 10), (6, 4, 6),\n    (8, 5, 3), (8, 11, 3), (8, 1, 6), (8, 3, 3),\n    (4, 0, 2), (4, 8, 9), (4, 5, 2), (4, 9, 10),\n    (5, 1, 4), (5, 4, 3), (5, 8, 0), (5, 10, 0), (5, 0, 0), (5, 2, 0),\n    (11, 9, 10), (11, 1, 4), (11, 6, 1), (11, 8, 5),\n    (1, 3, 2), (1, 10, 6), (1, 8, 0),\n    (3, 0, 6), (3, 2, 8), (3, 11, 2), (3, 7, 1), (3, 8, 0), (3, 1, 0), (3, 10, 0),\n    (0, 2, 8), (0, 5, 5), (0, 11, 3), (0, 9, 9), (0, 3, 5), (0, 4, 0),\n    (9, 4, 6), (9, 6, 2), (9, 11, 0),\n    (10, 5, 1), (10, 11, 10), (10, 9, 9), (10, 3, 4), (10, 1, 0),\n    (2, 5, 9), (2, 7, 4), (2, 10, 10), (2, 8, 4), (2, 3, 0), (2, 0, 0),\n    (7, 8, 7), (7, 9, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 5)\nprint(max_flow)\n```"}, "185": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 9, 10), (8, 1, 8), (8, 6, 9), (8, 0, 1), (8, 3, 9), (8, 5, 0),\n    (9, 1, 1), (9, 3, 0), (9, 8, 0), (9, 5, 0), (9, 2, 0), (9, 6, 0),\n    (1, 2, 1), (1, 0, 9), (1, 3, 10), (1, 8, 4),\n    (6, 2, 8), (6, 4, 3), (6, 9, 3), (6, 5, 8),\n    (0, 8, 2),\n    (3, 8, 9), (3, 9, 10), (3, 5, 9), (3, 1, 4),\n    (2, 0, 6), (2, 9, 2), (2, 6, 10), (2, 5, 0),\n    (4, 3, 8), (4, 6, 1), (4, 2, 1),\n    (5, 1, 9), (5, 2, 7), (5, 4, 5), (5, 3, 8), (5, 8, 4), (5, 9, 1),\n    (7, 4, 4), (7, 3, 7), (7, 8, 3), (7, 1, 5), (7, 2, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "186": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 2, 8), (0, 5, 5), (0, 3, 0),\n    (2, 3, 10), (2, 5, 10),\n    (5, 0, 8), (5, 4, 1), (5, 8, 7), (5, 7, 9), (5, 3, 8), (5, 2, 0),\n    (3, 5, 9), (3, 0, 10), (3, 4, 6), (3, 8, 1), (3, 6, 6), (3, 2, 0),\n    (4, 7, 6), (4, 3, 5), (4, 1, 5),\n    (8, 2, 5), (8, 6, 1),\n    (1, 4, 5), (1, 8, 5), (1, 6, 1), (1, 5, 4),\n    (6, 8, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 0)\nprint(max_flow)\n```"}, "187": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 5, 4), (5, 3, 3), (5, 8, 5), (5, 7, 3),\n    (3, 8, 7), (3, 5, 2), (8, 2, 2), (8, 3, 0),\n    (7, 8, 2), (10, 3, 8), (1, 3, 1), (9, 8, 6),\n    (9, 7, 1), (2, 0, 8), (2, 4, 3), (2, 8, 0),\n    (11, 4, 2), (11, 12, 5), (6, 2, 4), (6, 0, 8), (6, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 2\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "188": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (6, 10, 7), (10, 9, 2), (10, 6, 5), (9, 12, 7), (9, 2, 7), (9, 13, 3),\n    (9, 6, 8), (9, 5, 4), (9, 8, 4), (9, 10, 7), (9, 0, 10), (9, 14, 0),\n    (5, 7, 6), (5, 8, 10), (5, 4, 4), (5, 14, 2), (5, 9, 1), (5, 3, 6),\n    (5, 1, 1), (5, 12, 0), (7, 8, 3), (7, 9, 8), (7, 12, 2), (7, 13, 5),\n    (7, 6, 4), (7, 5, 7), (7, 2, 0), (7, 0, 0), (7, 1, 0), (7, 11, 0),\n    (8, 4, 6), (8, 14, 6), (8, 3, 8), (8, 2, 6), (4, 14, 7), (4, 12, 5),\n    (4, 2, 7), (4, 13, 3), (4, 0, 10), (4, 8, 0), (14, 9, 9), (14, 12, 7),\n    (14, 2, 7), (14, 13, 8), (14, 6, 4), (14, 10, 7), (14, 4, 9), (14, 8, 0),\n    (3, 1, 3), (3, 2, 5), (3, 11, 7), (3, 13, 6), (3, 5, 3), (3, 10, 8),\n    (3, 0, 6), (3, 9, 2), (3, 8, 0), (1, 13, 9), (1, 5, 5), (1, 7, 1),\n    (1, 4, 10), (1, 14, 10), (1, 9, 1), (1, 3, 6), (12, 11, 7), (12, 13, 3),\n    (12, 5, 8), (12, 8, 2), (12, 10, 3), (12, 0, 8), (12, 4, 0), (13, 6, 7),\n    (13, 5, 6), (13, 4, 7), (13, 14, 5), (13, 9, 1), (13, 3, 2), (13, 1, 8),\n    (13, 2, 5), (2, 11, 5), (2, 6, 4), (2, 7, 3), (2, 8, 3), (2, 4, 6),\n    (0, 1, 10), (0, 2, 1), (0, 13, 1), (0, 7, 1), (0, 4, 0), (11, 5, 1),\n    (11, 7, 8), (11, 10, 3), (11, 3, 2), (11, 12, 9), (11, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 7\nmax_flow = g.edmonds_karp(8, 7)\nprint(max_flow)\n```"}, "189": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 3, 6), (1, 2, 0), (1, 7, 0),\n    (3, 2, 2), (3, 7, 7), (3, 5, 0),\n    (2, 8, 2), (2, 1, 4), (2, 6, 5),\n    (7, 6, 3), (7, 1, 7), (7, 5, 0), (7, 3, 0),\n    (8, 9, 6), (8, 5, 8), (8, 2, 0),\n    (0, 6, 1),\n    (4, 8, 1),\n    (9, 8, 2), (9, 0, 4), (9, 4, 6),\n    (5, 7, 1), (5, 3, 6), (5, 8, 0),\n    (10, 5, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 1\nmax_flow = g.edmonds_karp(2, 1)\nprint(max_flow)\n```"}, "190": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u].items():\n                if v not in visited and capacity > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 2, 2), (1, 8, 10), (2, 9, 8), (8, 6, 4), (8, 0, 9), (8, 5, 8),\n    (9, 3, 4), (9, 2, 3), (9, 5, 4), (9, 8, 2), (0, 10, 4), (0, 4, 7),\n    (5, 0, 1), (5, 1, 8), (7, 8, 4), (7, 3, 2), (4, 5, 4), (4, 7, 3),\n    (4, 2, 9), (4, 0, 0), (10, 1, 4), (10, 9, 5), (10, 6, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 0\nsink = 4\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "191": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 3, 1), (4, 5, 2), (4, 0, 9), (4, 7, 0), (4, 2, 0),\n    (3, 1, 5), (3, 2, 7), (3, 0, 2), (3, 6, 1), (3, 4, 2),\n    (5, 2, 9), (5, 6, 2), (5, 4, 3), (5, 3, 7), (5, 1, 8), (5, 7, 9), (5, 0, 0),\n    (0, 6, 5), (0, 3, 4), (0, 1, 10), (0, 7, 8), (0, 5, 5),\n    (1, 2, 2), (1, 3, 2),\n    (2, 6, 10), (2, 4, 2), (2, 3, 7), (2, 7, 2),\n    (6, 3, 1), (6, 0, 4),\n    (7, 2, 10), (7, 0, 8), (7, 4, 7), (7, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 4\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "192": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 0, 6), (0, 9, 2), (0, 8, 8), (0, 2, 8), (0, 12, 0),\n    (9, 4, 7), (9, 12, 7), (9, 0, 0), (8, 5, 6), (8, 1, 5),\n    (8, 2, 1), (8, 12, 0), (8, 0, 0), (4, 13, 4), (4, 2, 10),\n    (4, 7, 5), (4, 8, 9), (4, 10, 7), (4, 1, 10), (4, 9, 0),\n    (4, 3, 0), (12, 2, 5), (12, 0, 4), (12, 11, 10), (12, 8, 2),\n    (12, 1, 4), (5, 3, 4), (5, 0, 4), (5, 8, 5), (1, 12, 7),\n    (6, 8, 5), (6, 10, 7), (10, 4, 8), (10, 12, 5), (10, 3, 8),\n    (3, 2, 10), (3, 5, 9), (3, 4, 10), (11, 13, 10), (11, 12, 0),\n    (13, 12, 3), (13, 2, 4), (13, 0, 6), (13, 6, 7), (13, 1, 9),\n    (13, 11, 0), (13, 4, 0), (13, 7, 0), (7, 13, 8), (7, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 12 to node 13\nmax_flow = g.edmonds_karp(12, 13)\nprint(max_flow)\n```"}, "193": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 1, 6), (6, 10, 1), (6, 0, 8),\n    (1, 10, 7), (1, 6, 7), (1, 3, 7),\n    (10, 2, 2), (10, 5, 2),\n    (0, 3, 2), (0, 1, 1),\n    (3, 10, 3), (3, 0, 5), (3, 9, 6), (3, 6, 4),\n    (2, 4, 6), (2, 6, 2), (2, 3, 7),\n    (5, 8, 8), (5, 6, 8), (5, 3, 7), (5, 2, 3), (5, 4, 0),\n    (9, 10, 1),\n    (4, 5, 10), (4, 0, 1), (4, 7, 0),\n    (7, 4, 8), (7, 6, 7), (7, 3, 3),\n    (8, 9, 2), (8, 7, 1), (8, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 8\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "194": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 8, 8), (2, 0, 10), (8, 5, 10), (8, 2, 9),\n    (0, 4, 5), (0, 7, 5), (0, 8, 2), (0, 5, 6), (0, 2, 0),\n    (5, 2, 4), (4, 8, 1), (4, 6, 1), (4, 1, 6), (4, 0, 5), (4, 3, 2),\n    (7, 8, 8), (7, 1, 5), (7, 0, 0), (3, 8, 1), (3, 6, 4), (3, 2, 10),\n    (6, 5, 8), (6, 2, 10), (6, 4, 9), (6, 1, 0),\n    (1, 2, 5), (1, 7, 5), (1, 8, 9), (1, 6, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 4)\nprint(max_flow)\n```"}, "195": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 5, 6),\n    (5, 7, 1), (5, 11, 6), (5, 6, 6), (5, 1, 4),\n    (7, 6, 7),\n    (11, 12, 6), (11, 6, 3), (11, 8, 1), (11, 3, 10), (11, 1, 5), (11, 2, 4), (11, 9, 5), (11, 0, 3), (11, 5, 0),\n    (6, 3, 4), (6, 5, 10), (6, 7, 9),\n    (1, 7, 7), (1, 2, 6), (1, 8, 6), (1, 3, 5),\n    (10, 8, 6), (10, 9, 4), (10, 3, 0),\n    (8, 10, 5), (8, 6, 2), (8, 11, 0),\n    (9, 0, 8), (9, 11, 0), (9, 10, 0),\n    (12, 2, 9), (12, 4, 4), (12, 11, 2),\n    (3, 0, 10), (3, 10, 5), (3, 6, 4), (3, 8, 2),\n    (2, 4, 1), (2, 7, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 9)\nprint(max_flow)\n```"}, "196": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (12, 4, 4), (12, 9, 5), (12, 7, 4), (12, 1, 9),\n    (4, 9, 5),\n    (9, 11, 9), (9, 7, 8), (9, 6, 5), (9, 1, 8), (9, 2, 2), (9, 10, 6), (9, 4, 3), (9, 0, 0),\n    (7, 1, 4), (7, 2, 10), (7, 0, 2), (7, 13, 5), (7, 8, 6), (7, 11, 2),\n    (1, 3, 1), (1, 6, 7), (1, 7, 0),\n    (11, 6, 10), (11, 2, 1), (11, 0, 2), (11, 12, 6), (11, 13, 8), (11, 14, 9), (11, 9, 9),\n    (6, 1, 1), (6, 2, 6), (6, 4, 4), (6, 9, 2), (6, 5, 10), (6, 11, 0),\n    (2, 0, 10), (2, 12, 2), (2, 13, 3), (2, 11, 8), (2, 7, 8), (2, 6, 2),\n    (10, 14, 9), (10, 11, 7), (10, 5, 4), (10, 6, 10), (10, 0, 5),\n    (0, 9, 7), (0, 7, 2),\n    (13, 14, 4), (13, 9, 6), (13, 11, 3), (13, 5, 10), (13, 6, 2), (13, 12, 5), (13, 3, 3),\n    (8, 12, 5), (8, 3, 10), (8, 9, 10),\n    (3, 5, 7), (3, 1, 3), (3, 10, 1),\n    (5, 1, 2), (5, 2, 9), (5, 0, 5), (5, 10, 1), (5, 12, 10), (5, 9, 3), (5, 11, 1), (5, 7, 4),\n    (14, 8, 9), (14, 6, 5), (14, 0, 4), (14, 3, 5), (14, 13, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 6)\nprint(max_flow)\n```"}, "197": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 1, 4), (6, 4, 6),\n    (1, 11, 3), (1, 5, 2), (1, 9, 9), (1, 6, 3), (1, 10, 8), (1, 2, 0),\n    (4, 7, 1), (4, 8, 1), (4, 9, 0),\n    (11, 2, 1), (11, 0, 6), (11, 1, 4),\n    (9, 10, 2), (9, 4, 8), (9, 1, 0),\n    (10, 2, 9), (10, 8, 0),\n    (7, 8, 9),\n    (8, 4, 1), (8, 5, 9), (8, 10, 5), (8, 7, 7),\n    (3, 1, 4),\n    (2, 1, 4), (2, 5, 7), (2, 10, 0),\n    (0, 10, 2), (0, 7, 2), (0, 2, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 4)\nprint(max_flow)\n```"}, "198": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 5, 3), (3, 0, 4), (3, 2, 0),\n    (5, 8, 6), (5, 2, 1),\n    (0, 1, 10), (0, 3, 0),\n    (8, 9, 4), (8, 5, 2),\n    (2, 9, 6), (2, 3, 5), (2, 6, 2),\n    (1, 2, 2), (1, 5, 3), (1, 6, 2), (1, 0, 0),\n    (6, 4, 9), (6, 2, 7),\n    (4, 8, 2),\n    (7, 9, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "199": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (11, 2, 3), (11, 12, 0),\n    (2, 10, 10), (2, 11, 3), (2, 0, 8), (2, 8, 8), (2, 5, 9), (2, 4, 8), (2, 12, 0),\n    (10, 5, 6), (10, 1, 1), (10, 12, 0),\n    (0, 5, 7), (0, 12, 0),\n    (8, 5, 6), (8, 4, 9), (8, 10, 8), (8, 9, 2), (8, 6, 8), (8, 11, 9), (8, 0, 3), (8, 12, 0), (8, 2, 0), (8, 7, 0), (8, 3, 0),\n    (5, 1, 10), (5, 2, 3), (5, 9, 4), (5, 6, 8), (5, 11, 9), (5, 0, 10),\n    (4, 10, 5), (4, 9, 10), (4, 6, 10), (4, 11, 2), (4, 7, 9), (4, 12, 5), (4, 0, 10),\n    (7, 12, 6), (7, 0, 6), (7, 8, 4), (7, 10, 5), (7, 9, 10), (7, 11, 6), (7, 4, 0),\n    (12, 0, 4), (12, 8, 7), (12, 4, 7), (12, 2, 6), (12, 10, 10), (12, 6, 3), (12, 11, 4),\n    (9, 6, 4), (9, 12, 10), (9, 0, 6), (9, 8, 2), (9, 10, 2), (9, 4, 0),\n    (6, 11, 6), (6, 7, 1), (6, 0, 8), (6, 5, 9),\n    (1, 2, 2), (1, 10, 10), (1, 6, 9), (1, 11, 9), (1, 12, 9), (1, 3, 9), (1, 5, 0),\n    (3, 8, 4), (3, 5, 3), (3, 1, 5), (3, 2, 8), (3, 11, 8), (3, 12, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 12 to node 8\nmax_flow = g.edmonds_karp(12, 8)\nprint(max_flow)\n```"}, "200": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (7, 9, 3), (7, 12, 1), (7, 6, 5), (7, 4, 10), (7, 1, 6),\n    (9, 3, 7), (9, 8, 8), (9, 12, 6), (9, 10, 2), (9, 7, 3),\n    (12, 6, 4), (12, 1, 9), (12, 3, 5), (12, 8, 0),\n    (6, 1, 10), (6, 10, 9), (6, 11, 8), (6, 3, 6), (6, 8, 8), (6, 0, 9), (6, 7, 0),\n    (4, 1, 5), (4, 10, 8), (4, 7, 9), (4, 11, 2), (4, 8, 4),\n    (1, 10, 7), (1, 5, 5), (1, 3, 9), (1, 12, 9), (1, 4, 10), (1, 2, 10), (1, 7, 0),\n    (3, 8, 1), (3, 0, 3), (3, 6, 4), (3, 1, 2), (3, 10, 10), (3, 9, 8), (3, 5, 9),\n    (8, 12, 3), (8, 6, 3), (8, 4, 1), (8, 7, 8), (8, 11, 8), (8, 9, 9),\n    (10, 9, 5), (10, 5, 1), (10, 8, 4), (10, 0, 10), (10, 12, 10), (10, 4, 1), (10, 2, 7), (10, 1, 7),\n    (11, 9, 1), (11, 12, 3), (11, 6, 5), (11, 4, 3), (11, 1, 5), (11, 10, 1),\n    (0, 4, 3), (0, 10, 2), (0, 7, 5), (0, 9, 4), (0, 5, 0), (0, 6, 0), (0, 3, 0), (0, 2, 0),\n    (5, 0, 10), (5, 4, 6), (5, 7, 4), (5, 9, 6), (5, 1, 0),\n    (2, 10, 10), (2, 11, 7), (2, 0, 8), (2, 12, 2), (2, 4, 5), (2, 1, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 4 to node 0\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "201": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 8, 7), (3, 7, 8), (3, 6, 4),\n    (8, 6, 2), (8, 1, 6),\n    (7, 6, 6), (7, 1, 9), (7, 4, 2), (7, 5, 1),\n    (6, 4, 6), (6, 7, 9),\n    (1, 5, 7), (1, 6, 7), (1, 7, 0),\n    (4, 8, 1),\n    (5, 6, 7), (5, 3, 4), (5, 8, 7), (5, 7, 0), (5, 1, 0),\n    (2, 7, 9), (2, 4, 7),\n    (0, 4, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "202": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 8, 2), (9, 2, 6), (9, 0, 4), (9, 10, 9),\n    (8, 10, 1), (8, 4, 6),\n    (2, 3, 7), (2, 4, 2), (2, 7, 5),\n    (10, 7, 6), (10, 3, 7), (10, 5, 8), (10, 8, 0),\n    (4, 8, 10), (4, 2, 7), (4, 0, 8), (4, 1, 8),\n    (3, 8, 3),\n    (7, 9, 9), (7, 1, 2), (7, 4, 9), (7, 2, 0), (7, 10, 0),\n    (5, 7, 2), (5, 9, 7), (5, 2, 8), (5, 3, 2),\n    (1, 4, 10), (1, 2, 2),\n    (6, 1, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 7)\nprint(max_flow)\n```"}, "203": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Ensure reverse edge exists\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 5, 9), (11, 7, 5), (11, 0, 10), (11, 12, 0),\n    (5, 10, 3), (5, 12, 4), (5, 1, 1), (5, 11, 0),\n    (7, 11, 1),\n    (0, 6, 4), (0, 12, 6),\n    (10, 1, 7), (10, 5, 7), (10, 0, 7), (10, 2, 5), (10, 3, 0), (10, 9, 0),\n    (12, 11, 6), (12, 4, 9), (12, 0, 8), (12, 3, 3),\n    (1, 7, 10), (1, 2, 2), (1, 12, 9), (1, 5, 0),\n    (6, 12, 1), (6, 7, 1),\n    (4, 7, 6),\n    (2, 4, 9), (2, 1, 6), (2, 9, 1), (2, 5, 9),\n    (9, 10, 1), (9, 12, 4), (9, 8, 8), (9, 2, 0),\n    (3, 10, 8), (3, 12, 0),\n    (8, 2, 5), (8, 10, 1), (8, 4, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 10)\nprint(max_flow)\n```"}, "204": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    queue.append(v)\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 9, 9), (8, 1, 9), (8, 7, 7), (8, 3, 5), (8, 0, 7), (8, 5, 6), (8, 2, 0),\n    (9, 7, 10), (9, 2, 10), (9, 3, 8), (9, 0, 8), (9, 5, 1), (9, 6, 7), (9, 8, 3),\n    (1, 2, 3), (1, 3, 9), (1, 6, 2), (1, 9, 10),\n    (7, 3, 6), (7, 0, 9), (7, 6, 4), (7, 4, 3), (7, 8, 1), (7, 9, 9), (7, 1, 2), (7, 2, 0),\n    (3, 6, 1), (3, 8, 5), (3, 9, 9), (3, 7, 2), (3, 2, 3), (3, 4, 0),\n    (0, 9, 10), (0, 1, 7), (0, 2, 8), (0, 3, 4),\n    (5, 8, 6), (5, 9, 5), (5, 2, 0),\n    (2, 5, 4), (2, 4, 7), (2, 8, 8), (2, 7, 2),\n    (6, 4, 1), (6, 7, 10), (6, 2, 10), (6, 3, 3), (6, 0, 3), (6, 5, 8),\n    (4, 8, 8), (4, 9, 6), (4, 2, 8), (4, 3, 10), (4, 0, 8), (4, 5, 9), (4, 6, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 3)\nprint(max_flow)\n```"}, "205": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 9, 1), (10, 5, 2), (10, 6, 7), (10, 12, 5), (10, 0, 2),\n    (9, 4, 1), (9, 6, 4), (9, 2, 3),\n    (5, 13, 10), (5, 3, 5), (5, 10, 10), (5, 2, 5), (5, 9, 6), (5, 7, 8),\n    (12, 3, 6), (12, 10, 3), (12, 2, 3),\n    (0, 11, 9), (0, 13, 10), (0, 8, 1), (0, 10, 0),\n    (4, 7, 5), (4, 5, 6), (4, 2, 7),\n    (2, 3, 7),\n    (13, 2, 7), (13, 4, 10),\n    (3, 7, 6), (3, 5, 6), (3, 13, 2),\n    (7, 8, 2), (7, 3, 5), (7, 1, 9), (7, 2, 5), (7, 9, 2),\n    (11, 5, 3), (11, 1, 0), (11, 0, 0),\n    (8, 12, 5), (8, 0, 6), (8, 9, 1), (8, 7, 3),\n    (1, 11, 10), (1, 12, 4), (1, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 11)\nprint(max_flow)\n```"}, "206": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges with capacities\nedges = [\n    (2, 10, 9), (2, 13, 5), (2, 3, 6), (2, 0, 10), (2, 1, 10),\n    (10, 7, 2), (10, 6, 1), (10, 1, 1),\n    (13, 8, 2), (13, 6, 1), (13, 2, 10), (13, 10, 5),\n    (3, 12, 2), (3, 4, 8), (3, 13, 8),\n    (0, 12, 8), (0, 5, 6), (0, 8, 2), (0, 6, 4), (0, 10, 4), (0, 3, 5), (0, 7, 0),\n    (1, 3, 10), (1, 12, 10), (1, 5, 5), (1, 9, 1), (1, 10, 0),\n    (7, 4, 7), (7, 11, 1), (7, 10, 5), (7, 0, 8),\n    (6, 9, 5), (6, 1, 10), (6, 2, 4), (6, 13, 5), (6, 8, 6), (6, 10, 0),\n    (8, 13, 6), (8, 0, 2), (8, 7, 5), (8, 6, 0), (8, 5, 0),\n    (12, 6, 10), (12, 9, 9),\n    (5, 8, 2), (5, 6, 4), (5, 9, 9), (5, 1, 2), (5, 2, 10), (5, 7, 6),\n    (9, 4, 6), (9, 3, 10), (9, 8, 3),\n    (11, 10, 2), (11, 12, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 10 to node 8\nmax_flow = g.edmonds_karp(10, 8)\nprint(max_flow)\n```"}, "207": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 7, 3), (8, 0, 7), (8, 6, 9), (8, 1, 1), (8, 2, 0),\n    (7, 3, 4), (7, 0, 6), (7, 2, 4), (7, 9, 3), (7, 4, 0),\n    (0, 5, 2), (0, 6, 6), (0, 8, 2), (0, 7, 4), (0, 3, 2), (0, 1, 0), (0, 9, 0),\n    (6, 9, 4), (6, 5, 7), (6, 2, 0),\n    (1, 2, 1), (1, 4, 9), (1, 8, 4), (1, 7, 3), (1, 0, 5), (1, 6, 5),\n    (3, 2, 7), (3, 4, 9),\n    (2, 8, 5), (2, 3, 8), (2, 6, 9), (2, 1, 1),\n    (9, 8, 7), (9, 0, 7), (9, 6, 2), (9, 1, 1), (9, 2, 2),\n    (5, 2, 4), (5, 7, 10), (5, 3, 3),\n    (4, 7, 6), (4, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 0)\nprint(max_flow)\n```"}, "208": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 7, 9), (1, 11, 6), (1, 4, 0),\n    (7, 9, 5), (7, 0, 5), (7, 1, 0),\n    (11, 0, 5), (11, 13, 8), (11, 8, 2), (11, 9, 2),\n    (9, 11, 10), (9, 4, 5), (9, 0, 5), (9, 6, 10), (9, 8, 2), (9, 12, 6), (9, 7, 0),\n    (0, 1, 5),\n    (13, 8, 1),\n    (8, 11, 7), (8, 2, 1),\n    (4, 13, 9), (4, 6, 5), (4, 1, 8), (4, 10, 2), (4, 3, 8),\n    (6, 4, 8), (6, 3, 0),\n    (12, 5, 3), (12, 11, 2), (12, 3, 10), (12, 0, 1), (12, 13, 1), (12, 9, 0),\n    (5, 10, 5), (5, 6, 6), (5, 1, 10), (5, 12, 0),\n    (10, 3, 2), (10, 4, 8), (10, 0, 8), (10, 1, 5), (10, 5, 3), (10, 9, 3),\n    (3, 4, 2), (3, 6, 3),\n    (14, 5, 4), (14, 9, 4), (14, 11, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 3 to node 5\nmax_flow = g.edmonds_karp(3, 5)\nprint(max_flow)\n```"}, "209": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 6, 3), (7, 3, 3), (7, 1, 9), (7, 2, 5), (7, 5, 7),\n    (6, 1, 8), (6, 2, 4), (6, 0, 8), (6, 7, 6), (6, 4, 0),\n    (3, 1, 7), (3, 2, 3), (3, 5, 4), (3, 4, 7), (3, 7, 2),\n    (1, 0, 1), (1, 4, 3), (1, 3, 0),\n    (2, 5, 7), (2, 4, 8), (2, 3, 9),\n    (5, 4, 3), (5, 2, 9),\n    (0, 4, 5), (0, 6, 6), (0, 3, 7), (0, 1, 3), (0, 2, 6),\n    (4, 6, 7), (4, 0, 1), (4, 5, 0), (4, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 6)\nprint(max_flow)\n```"}, "210": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 0, 5), (4, 6, 7), (4, 1, 2), (4, 7, 0),\n    (6, 4, 4), (6, 7, 10),\n    (1, 4, 6), (1, 2, 4),\n    (7, 0, 10), (7, 6, 10), (7, 4, 5),\n    (2, 7, 7), (2, 8, 3), (2, 3, 8), (2, 1, 0),\n    (8, 5, 4), (8, 1, 4), (8, 2, 0),\n    (5, 3, 2), (5, 1, 9), (5, 4, 9),\n    (3, 7, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 8\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "211": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (13, 10, 2), (13, 2, 6), (13, 14, 6),\n    (10, 0, 6), (10, 3, 4), (10, 8, 10), (10, 14, 5), (10, 2, 0), (10, 12, 0), (10, 7, 0),\n    (2, 1, 9), (2, 11, 7), (2, 8, 8), (2, 10, 7), (2, 5, 4),\n    (14, 1, 9), (14, 3, 9), (14, 7, 7),\n    (0, 9, 6),\n    (3, 7, 7), (3, 5, 0),\n    (8, 4, 3), (8, 2, 5), (8, 12, 7), (8, 3, 6), (8, 11, 0),\n    (1, 4, 6),\n    (11, 8, 9), (11, 5, 6),\n    (5, 4, 2), (5, 3, 8), (5, 14, 9), (5, 11, 0),\n    (7, 9, 4), (7, 14, 1), (7, 10, 4), (7, 3, 0),\n    (9, 1, 9), (9, 7, 9),\n    (4, 9, 10),\n    (12, 9, 3), (12, 14, 2), (12, 10, 7), (12, 8, 0),\n    (6, 14, 3), (6, 4, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 11 to node 10\nmax_flow = g.edmonds_karp(11, 10)\nprint(max_flow)\n```"}, "212": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (14, 6, 10), (14, 5, 6), (6, 1, 7), (6, 10, 5), (6, 12, 1), (6, 9, 6),\n    (1, 11, 1), (1, 2, 0), (10, 13, 4), (10, 9, 5), (10, 4, 1), (12, 14, 1),\n    (12, 7, 7), (9, 6, 9), (9, 13, 6), (9, 5, 10), (4, 2, 8), (4, 8, 6),\n    (2, 1, 3), (8, 12, 6), (8, 3, 7), (8, 9, 7), (8, 7, 4), (3, 6, 8),\n    (3, 1, 4), (3, 7, 7), (7, 14, 7), (7, 6, 1), (7, 0, 10), (7, 2, 7),\n    (11, 2, 10), (11, 13, 3), (11, 5, 5), (11, 3, 6), (11, 1, 1), (13, 3, 1),\n    (13, 9, 9), (13, 6, 5), (13, 11, 0), (0, 7, 2), (0, 13, 4), (0, 9, 6),\n    (0, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 9)\nprint(max_flow)\n```"}, "213": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Ensure reverse capacity exists\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 2, 5), (1, 8, 9), (1, 11, 7),\n    (2, 5, 5), (2, 4, 3), (2, 0, 8), (2, 1, 6), (2, 6, 6),\n    (8, 1, 2), (8, 2, 6), (8, 3, 6), (8, 9, 0),\n    (11, 6, 2), (11, 3, 7), (11, 4, 3),\n    (5, 3, 9), (5, 4, 0), (5, 2, 0), (5, 10, 0),\n    (4, 8, 1), (4, 0, 5), (4, 11, 4), (4, 6, 3), (4, 2, 9), (4, 5, 2), (4, 9, 0),\n    (0, 11, 5), (0, 7, 2), (0, 1, 8), (0, 9, 10), (0, 8, 3),\n    (6, 10, 4), (6, 3, 8), (6, 7, 2), (6, 9, 0),\n    (3, 5, 9), (3, 2, 8), (3, 9, 9), (3, 8, 0),\n    (10, 3, 1), (10, 5, 4), (10, 8, 10), (10, 0, 3), (10, 11, 9), (10, 7, 9), (10, 9, 7), (10, 6, 0),\n    (7, 2, 7), (7, 10, 3), (7, 9, 0),\n    (9, 3, 7), (9, 4, 7), (9, 8, 3), (9, 0, 10), (9, 7, 10), (9, 6, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 5)\nprint(max_flow)\n```"}, "214": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # If not visited and capacity left\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\ng.add_edge(5, 6, 2)\ng.add_edge(5, 4, 2)\ng.add_edge(5, 0, 0)\ng.add_edge(6, 5, 3)\ng.add_edge(4, 2, 7)\ng.add_edge(4, 3, 5)\ng.add_edge(4, 1, 4)\ng.add_edge(4, 5, 5)\ng.add_edge(4, 0, 9)\ng.add_edge(2, 0, 9)\ng.add_edge(2, 7, 10)\ng.add_edge(3, 0, 0)\ng.add_edge(3, 4, 0)\ng.add_edge(0, 3, 4)\ng.add_edge(0, 5, 5)\ng.add_edge(0, 2, 0)\ng.add_edge(7, 5, 10)\n\n# Calculate maximum flow from node 2 to node 3\nmax_flow = g.edmonds_karp(2, 3)\nprint(max_flow)\n```"}, "215": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 8, 3), (4, 7, 5), (4, 5, 9), (4, 9, 3), (4, 1, 7),\n    (8, 5, 7), (8, 9, 2), (8, 1, 7), (8, 6, 9),\n    (7, 9, 6), (7, 2, 4), (7, 6, 5),\n    (5, 4, 8), (5, 3, 7), (5, 2, 0),\n    (9, 2, 6), (9, 6, 1), (9, 7, 1),\n    (1, 3, 7), (1, 2, 2), (1, 4, 0),\n    (6, 7, 7), (6, 0, 4),\n    (2, 6, 8), (2, 0, 10), (2, 5, 10),\n    (3, 0, 5), (3, 5, 3), (3, 2, 8), (3, 1, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 3\nmax_flow = g.edmonds_karp(2, 3)\nprint(max_flow)\n```"}, "216": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 2, 4), (9, 7, 1), (9, 5, 10), (9, 0, 7), (9, 1, 0),\n    (2, 3, 7), (2, 1, 5), (2, 7, 7), (2, 9, 0),\n    (7, 8, 2), (7, 9, 5), (7, 3, 10),\n    (5, 0, 7), (5, 8, 3),\n    (0, 9, 5),\n    (3, 6, 3), (3, 4, 4), (3, 2, 0), (3, 7, 0),\n    (1, 5, 4), (1, 0, 7), (1, 4, 7), (1, 9, 7),\n    (6, 8, 9), (6, 2, 4), (6, 3, 7), (6, 5, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 3\nmax_flow = g.edmonds_karp(1, 3)\nprint(max_flow)\n```"}, "217": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 6, 8), (6, 11, 5), (6, 10, 7), (11, 10, 3), (11, 12, 6),\n    (11, 1, 5), (11, 13, 8), (10, 8, 1), (13, 9, 3), (13, 8, 0),\n    (9, 2, 6), (9, 1, 6), (9, 14, 1), (9, 13, 0), (2, 8, 9),\n    (1, 9, 3), (14, 10, 3), (14, 7, 5), (14, 8, 0), (14, 9, 0),\n    (8, 13, 8), (8, 14, 10), (8, 0, 5), (0, 11, 9), (12, 0, 1),\n    (12, 5, 9), (3, 5, 5), (3, 12, 9), (5, 0, 3), (4, 8, 3),\n    (4, 2, 2), (4, 1, 1), (4, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 14)\nprint(max_flow)\n```"}, "218": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 6, 8), (1, 0, 2), (1, 9, 7), (1, 4, 2), (1, 7, 0),\n    (6, 5, 1), (6, 2, 3), (6, 7, 10), (6, 1, 10),\n    (0, 5, 1), (0, 10, 8), (0, 7, 7), (0, 1, 0),\n    (9, 8, 1), (9, 0, 3), (9, 3, 9), (9, 7, 0),\n    (4, 8, 9), (4, 1, 8), (4, 6, 8), (4, 9, 1), (4, 2, 7), (4, 7, 0), (4, 5, 0),\n    (5, 2, 2), (5, 4, 8), (5, 6, 7), (5, 11, 8), (5, 7, 0),\n    (2, 10, 1), (2, 1, 10), (2, 0, 8), (2, 5, 8), (2, 12, 0),\n    (7, 4, 1), (7, 12, 9), (7, 1, 9), (7, 6, 10), (7, 11, 10), (7, 9, 5), (7, 5, 1),\n    (10, 4, 4), (10, 8, 7), (10, 6, 4), (10, 11, 8), (10, 9, 4), (10, 5, 4), (10, 2, 2), (10, 12, 0), (10, 0, 0),\n    (8, 1, 2), (8, 7, 10), (8, 12, 8), (8, 4, 0), (8, 9, 0), (8, 10, 0), (8, 3, 0),\n    (3, 9, 9), (3, 10, 1), (3, 7, 6), (3, 4, 3), (3, 8, 3), (3, 0, 3), (3, 11, 0),\n    (11, 9, 5), (11, 5, 6), (11, 10, 3), (11, 3, 6), (11, 7, 0),\n    (12, 8, 1), (12, 1, 3), (12, 6, 6), (12, 11, 2), (12, 2, 1), (12, 10, 2), (12, 7, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 8)\nprint(max_flow)\n```"}, "219": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (13, 1, 7), (13, 10, 9), (13, 8, 9), (13, 12, 4), (13, 11, 0), (13, 2, 0), (13, 5, 0),\n    (1, 7, 3), (1, 5, 1), (1, 2, 7), (1, 11, 0), (1, 4, 0),\n    (10, 0, 1), (10, 13, 10), (10, 1, 3), (10, 11, 4), (10, 6, 4), (10, 7, 6), (10, 8, 0), (10, 2, 0),\n    (8, 6, 2), (8, 10, 5), (8, 2, 3), (8, 9, 0), (8, 12, 0),\n    (12, 13, 2), (12, 3, 9), (12, 8, 9), (12, 4, 0),\n    (7, 9, 2), (7, 12, 2),\n    (5, 2, 1), (5, 13, 4), (5, 3, 7), (5, 7, 5), (5, 4, 3), (5, 1, 0), (5, 6, 0),\n    (2, 8, 2), (2, 12, 3), (2, 13, 7), (2, 10, 2), (2, 11, 0), (2, 1, 0),\n    (0, 12, 6), (0, 13, 4), (0, 3, 8), (0, 6, 2), (0, 7, 3), (0, 10, 5), (0, 9, 8),\n    (11, 4, 9), (11, 9, 2), (11, 2, 5), (11, 13, 8), (11, 1, 2),\n    (6, 5, 1), (6, 2, 2), (6, 8, 5), (6, 11, 9), (6, 4, 0),\n    (3, 6, 10), (3, 12, 10), (3, 1, 4), (3, 11, 10),\n    (9, 8, 3), (9, 7, 1), (9, 4, 1), (9, 11, 0),\n    (4, 9, 10), (4, 12, 10), (4, 1, 6), (4, 11, 4), (4, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 13)\nprint(max_flow)\n```"}, "220": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 2, 1),\n    (2, 11, 5), (2, 5, 7), (2, 4, 2), (2, 6, 6), (2, 8, 0),\n    (11, 10, 2), (11, 5, 2), (11, 3, 10), (11, 13, 7), (11, 6, 8), (11, 2, 5),\n    (5, 3, 8), (5, 13, 1), (5, 2, 6),\n    (4, 6, 9), (4, 7, 8), (4, 12, 1), (4, 2, 0),\n    (6, 9, 5), (6, 12, 5), (6, 2, 0), (6, 3, 0),\n    (3, 6, 6), (3, 5, 5), (3, 0, 0),\n    (13, 3, 3),\n    (8, 2, 2), (8, 0, 6),\n    (0, 3, 7), (0, 8, 0),\n    (7, 12, 2), (7, 10, 4), (7, 1, 9), (7, 4, 0),\n    (12, 4, 3), (12, 7, 5), (12, 6, 0),\n    (9, 5, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 12)\nprint(max_flow)\n```"}, "221": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 8, 2), (4, 5, 4), (4, 9, 1),\n    (8, 5, 10), (8, 12, 10), (8, 7, 4),\n    (5, 11, 7), (5, 14, 5), (5, 1, 1), (5, 2, 2),\n    (9, 8, 9), (9, 1, 6), (9, 3, 9), (9, 2, 5), (9, 12, 7),\n    (12, 14, 9), (12, 7, 10), (12, 9, 8), (12, 6, 6), (12, 0, 1),\n    (7, 4, 8), (7, 6, 8), (7, 12, 3),\n    (11, 12, 6), (11, 14, 7), (11, 8, 9), (11, 6, 7), (11, 0, 2), (11, 1, 0),\n    (14, 7, 7), (14, 1, 10), (14, 13, 1), (14, 2, 2), (14, 6, 1), (14, 12, 6), (14, 10, 2), (14, 11, 0),\n    (1, 11, 3), (1, 10, 1),\n    (2, 10, 3), (2, 14, 9), (2, 7, 6), (2, 1, 9), (2, 13, 7), (2, 0, 0),\n    (3, 2, 6), (3, 11, 4), (3, 12, 9), (3, 10, 3), (3, 1, 3),\n    (6, 0, 6), (6, 10, 4), (6, 14, 8), (6, 4, 9), (6, 8, 3), (6, 3, 10), (6, 13, 5),\n    (0, 7, 6), (0, 13, 2), (0, 2, 8), (0, 6, 3), (0, 11, 0),\n    (10, 7, 9), (10, 9, 7), (10, 4, 5), (10, 8, 6), (10, 1, 7), (10, 13, 8), (10, 2, 3), (10, 6, 7), (10, 0, 7), (10, 12, 9),\n    (13, 2, 5), (13, 6, 8), (13, 0, 6), (13, 12, 4), (13, 10, 3), (13, 14, 1), (13, 9, 7), (13, 4, 2), (13, 8, 1), (13, 3, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 2)\nprint(max_flow)\n```"}, "222": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 2, 5), (4, 8, 6), (4, 5, 7), (4, 7, 0),\n    (2, 3, 2), (2, 0, 7), (2, 1, 0), (2, 6, 0), (2, 4, 0),\n    (8, 7, 4), (8, 4, 9), (8, 3, 0),\n    (3, 1, 5), (3, 2, 10), (3, 8, 1), (3, 7, 3), (3, 6, 5), (3, 5, 10),\n    (0, 2, 8), (0, 7, 2), (0, 5, 2), (0, 3, 6),\n    (7, 6, 5), (7, 4, 2), (7, 1, 8), (7, 8, 2), (7, 3, 0),\n    (1, 2, 7), (1, 3, 7),\n    (6, 1, 6), (6, 2, 6), (6, 3, 0), (6, 7, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 2)\nprint(max_flow)\n```"}, "223": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 7, 3), (3, 11, 1), (3, 9, 4), (3, 0, 5), (3, 6, 2),\n    (7, 11, 4), (7, 0, 1), (7, 5, 9), (7, 8, 2), (7, 10, 10), (7, 4, 0), (7, 3, 0), (7, 6, 0),\n    (11, 0, 2), (11, 4, 5), (11, 7, 6), (11, 10, 0),\n    (9, 2, 8), (9, 10, 8), (9, 3, 8),\n    (0, 6, 6), (0, 9, 10), (0, 10, 0),\n    (6, 3, 1), (6, 7, 7), (6, 11, 9), (6, 2, 4), (6, 1, 5), (6, 4, 9), (6, 0, 0),\n    (5, 8, 6), (5, 3, 8), (5, 1, 6),\n    (8, 11, 6), (8, 9, 1), (8, 1, 7), (8, 4, 7), (8, 5, 3),\n    (10, 7, 1), (10, 11, 8), (10, 9, 4), (10, 0, 8), (10, 4, 10), (10, 5, 6),\n    (4, 6, 9), (4, 7, 10), (4, 10, 0), (4, 11, 0),\n    (2, 6, 6), (2, 3, 4),\n    (1, 10, 4), (1, 3, 1), (1, 11, 9), (1, 2, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 10 to node 7\nmax_flow = g.edmonds_karp(10, 7)\nprint(max_flow)\n```"}, "224": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (1, 3, 2), (1, 7, 9), (1, 9, 9), (1, 0, 6), (1, 13, 2), (1, 11, 5),\n    (3, 4, 5), (3, 2, 9), (3, 7, 1), (3, 9, 8), (3, 0, 3), (3, 12, 4), (3, 13, 6),\n    (7, 0, 2), (7, 11, 7), (7, 10, 5), (7, 5, 2),\n    (9, 6, 9), (9, 0, 9), (9, 12, 2), (9, 3, 8), (9, 5, 4), (9, 11, 0), (9, 13, 0),\n    (0, 1, 6), (0, 3, 5), (0, 4, 10), (0, 10, 9), (0, 9, 9),\n    (13, 11, 7), (13, 4, 3), (13, 10, 10), (13, 2, 4), (13, 9, 9), (13, 0, 2), (13, 12, 1), (13, 8, 0),\n    (11, 1, 6), (11, 4, 2), (11, 10, 1), (11, 5, 7), (11, 9, 8), (11, 0, 3),\n    (4, 8, 7), (4, 6, 3), (4, 1, 2),\n    (2, 9, 5), (2, 6, 4), (2, 10, 10),\n    (12, 13, 9), (12, 11, 1), (12, 4, 6), (12, 8, 7), (12, 7, 4), (12, 9, 6), (12, 0, 4), (12, 10, 0),\n    (10, 8, 1), (10, 0, 8), (10, 12, 8), (10, 11, 7),\n    (5, 9, 8), (5, 6, 2), (5, 12, 9), (5, 1, 10),\n    (6, 5, 7), (6, 2, 4), (6, 7, 7),\n    (8, 7, 10), (8, 13, 7), (8, 4, 1), (8, 10, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 9)\nprint(max_flow)\n```"}, "225": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 0, 3), (9, 5, 3),\n    (0, 5, 7), (0, 6, 9), (0, 8, 6), (0, 13, 2), (0, 4, 0), (0, 7, 0), (0, 3, 0), (0, 10, 0),\n    (5, 6, 6), (5, 13, 3), (5, 12, 9), (5, 7, 3),\n    (6, 12, 8), (6, 7, 1), (6, 2, 6), (6, 3, 3), (6, 5, 6), (6, 11, 0),\n    (8, 13, 6), (8, 12, 10),\n    (13, 12, 1), (13, 4, 7), (13, 0, 6), (13, 9, 3), (13, 1, 10), (13, 8, 4),\n    (12, 4, 9), (12, 5, 9), (12, 10, 10),\n    (7, 0, 7), (7, 6, 0),\n    (11, 6, 4), (11, 2, 6), (11, 4, 0),\n    (2, 11, 9), (2, 10, 9), (2, 1, 6), (2, 7, 5),\n    (3, 6, 3), (3, 12, 10), (3, 7, 3), (3, 0, 10),\n    (10, 8, 10), (10, 12, 4), (10, 0, 3), (10, 2, 7), (10, 3, 8), (10, 9, 6),\n    (1, 6, 5), (1, 13, 5), (1, 7, 8), (1, 9, 5), (1, 11, 4),\n    (4, 0, 7), (4, 11, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "226": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 4, 9), (8, 7, 10), (8, 6, 4), (8, 2, 1),\n    (4, 7, 7), (4, 13, 3), (4, 6, 5), (4, 3, 4), (4, 11, 2), (4, 12, 4),\n    (7, 10, 3), (7, 1, 5), (7, 6, 10), (7, 2, 5), (7, 12, 1), (7, 9, 9),\n    (6, 3, 2), (6, 11, 7), (6, 2, 10), (6, 7, 10), (6, 10, 2), (6, 13, 5),\n    (2, 12, 5), (2, 4, 8), (2, 1, 1), (2, 6, 8), (2, 3, 6), (2, 5, 3), (2, 11, 0),\n    (13, 6, 10), (13, 5, 5), (13, 8, 9), (13, 9, 2), (13, 7, 4), (13, 10, 10), (13, 12, 0),\n    (3, 11, 8), (3, 12, 8), (3, 9, 2), (3, 4, 5),\n    (11, 2, 2), (11, 12, 1),\n    (12, 9, 5), (12, 4, 8), (12, 7, 10), (12, 13, 8), (12, 1, 10), (12, 8, 3), (12, 11, 0), (12, 2, 0),\n    (10, 1, 4), (10, 0, 6), (10, 11, 6), (10, 2, 7), (10, 9, 10), (10, 4, 7),\n    (1, 3, 7), (1, 7, 9), (1, 13, 7),\n    (9, 10, 10), (9, 5, 10), (9, 12, 9),\n    (5, 8, 7), (5, 9, 6), (5, 7, 7), (5, 6, 9),\n    (0, 8, 1), (0, 7, 3), (0, 10, 5), (0, 1, 9), (0, 3, 7), (0, 5, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 13)\nprint(max_flow)\n```"}, "227": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 1, 10), (4, 7, 1),\n    (1, 3, 8), (1, 2, 10), (1, 9, 4), (1, 8, 9), (1, 10, 0),\n    (7, 3, 2), (7, 0, 8), (7, 4, 7), (7, 8, 6),\n    (3, 9, 9), (3, 8, 8), (3, 10, 8), (3, 5, 6), (3, 7, 10), (3, 1, 0),\n    (2, 10, 9), (2, 5, 7), (2, 7, 5),\n    (8, 10, 5), (8, 1, 2),\n    (0, 9, 1),\n    (10, 1, 9), (10, 2, 2), (10, 4, 5), (10, 8, 4),\n    (6, 3, 3), (6, 2, 10), (6, 9, 1), (6, 5, 0),\n    (5, 6, 7), (5, 10, 3), (5, 2, 0), (5, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 6)\nprint(max_flow)\n```"}, "228": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(0, 3, 6)\ng.add_edge(0, 7, 6)\ng.add_edge(1, 3, 3)\ng.add_edge(1, 4, 3)\ng.add_edge(2, 1, 4)\ng.add_edge(4, 2, 4)\ng.add_edge(4, 6, 4)\ng.add_edge(4, 7, 2)\ng.add_edge(5, 3, 5)\ng.add_edge(7, 0, 6)\ng.add_edge(7, 4, 8)\n\nmax_flow = g.edmonds_karp(0, 7)\nprint(max_flow)\n```"}, "229": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u].items():\n                if v not in visited and capacity > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 2, 2), (6, 1, 10), (6, 3, 5),\n    (2, 1, 4), (2, 6, 8),\n    (1, 6, 7), (1, 0, 5),\n    (3, 12, 1), (3, 9, 8), (3, 7, 5), (3, 6, 0),\n    (0, 1, 1), (0, 6, 9),\n    (12, 2, 1), (12, 10, 7),\n    (9, 11, 2), (9, 3, 0),\n    (7, 3, 3),\n    (5, 12, 5),\n    (8, 10, 7),\n    (11, 3, 9), (11, 12, 1), (11, 10, 9), (11, 9, 6),\n    (13, 1, 8), (13, 4, 1), (13, 0, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 11)\nprint(max_flow)\n```"}, "230": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 1, 4), (8, 0, 1), (8, 10, 1),\n    (1, 3, 8), (1, 4, 2), (1, 2, 2), (1, 7, 9),\n    (0, 4, 8), (0, 6, 6), (0, 10, 4), (0, 7, 9), (0, 8, 8), (0, 3, 9),\n    (10, 5, 7), (10, 3, 9), (10, 4, 9),\n    (3, 9, 4), (3, 6, 9), (3, 10, 3), (3, 7, 5), (3, 1, 5),\n    (4, 10, 3), (4, 8, 4), (4, 1, 8), (4, 3, 7), (4, 0, 9),\n    (2, 8, 9), (2, 9, 7), (2, 6, 0),\n    (7, 1, 7), (7, 10, 4),\n    (6, 2, 4),\n    (5, 0, 7), (5, 4, 4), (5, 9, 3), (5, 6, 8), (5, 2, 8),\n    (9, 7, 5), (9, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 2)\nprint(max_flow)\n```"}, "231": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        while queue:\n            u = queue.popleft()\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n            max_flow += path_flow\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 5, 1), (6, 11, 8), (6, 0, 0),\n    (5, 9, 4), (5, 3, 10), (5, 2, 1), (5, 6, 0),\n    (11, 2, 1),\n    (9, 3, 9),\n    (3, 0, 6), (3, 5, 7), (3, 9, 0),\n    (2, 10, 10), (2, 13, 9), (2, 6, 6), (2, 0, 6),\n    (0, 10, 8), (0, 3, 4), (0, 6, 3),\n    (10, 12, 4), (10, 9, 4), (10, 3, 2), (10, 6, 2),\n    (7, 8, 3),\n    (8, 11, 4), (8, 0, 5), (8, 7, 10),\n    (13, 2, 4),\n    (4, 12, 1), (4, 9, 1), (4, 0, 7), (4, 10, 8),\n    (1, 8, 2), (1, 5, 10), (1, 12, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 5)\nprint(max_flow)\n```"}, "232": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 8, 9), (2, 13, 8), (2, 5, 1), (2, 10, 7), (2, 1, 0),\n    (8, 13, 10), (8, 2, 7), (8, 6, 0),\n    (13, 9, 2), (13, 12, 6), (13, 6, 5), (13, 3, 5),\n    (5, 3, 5), (5, 2, 2), (5, 11, 4), (5, 13, 2), (5, 10, 0),\n    (10, 5, 5), (10, 6, 2),\n    (9, 0, 1),\n    (12, 0, 6), (12, 1, 1),\n    (6, 8, 6), (6, 11, 4), (6, 9, 10), (6, 4, 3), (6, 10, 0),\n    (3, 7, 5), (3, 6, 3),\n    (11, 3, 3), (11, 1, 6), (11, 5, 0),\n    (0, 11, 2), (0, 5, 8),\n    (1, 2, 6), (1, 11, 0),\n    (7, 9, 8), (7, 12, 10),\n    (4, 3, 5), (4, 0, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 10 to node 2\nmax_flow = g.edmonds_karp(10, 2)\nprint(max_flow)\n```"}, "233": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v]  # Ensure the node is in the graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity.get((u, v), 0) > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] = self.capacity.get((v, u), 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 3, 10), (7, 2, 6), (3, 0, 6), (3, 2, 3), (3, 10, 2), (3, 4, 0),\n    (2, 12, 4), (2, 10, 8), (2, 8, 5), (2, 9, 10), (2, 0, 10),\n    (0, 1, 6), (10, 4, 1), (10, 3, 7), (10, 1, 1),\n    (12, 8, 6), (12, 9, 9),\n    (8, 4, 1), (8, 5, 6),\n    (9, 10, 6), (9, 11, 3),\n    (1, 4, 6), (1, 6, 3), (1, 10, 0),\n    (4, 7, 9), (4, 3, 8), (4, 6, 2), (4, 5, 8), (4, 12, 2), (4, 10, 0), (4, 1, 0),\n    (11, 7, 6), (11, 6, 5), (11, 1, 7), (11, 0, 1), (11, 12, 9), (11, 8, 2),\n    (6, 2, 5), (6, 7, 9),\n    (5, 4, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 3)\nprint(max_flow)\n```"}, "234": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 12, 1), (10, 3, 5), (10, 6, 8), (10, 8, 1), (10, 5, 7),\n    (12, 0, 9), (12, 2, 5), (12, 1, 6), (12, 9, 8), (12, 3, 9), (12, 11, 2), (12, 5, 2),\n    (3, 11, 8), (3, 5, 4), (3, 12, 1), (3, 1, 7),\n    (6, 8, 5), (6, 5, 9), (6, 2, 7), (6, 11, 8),\n    (8, 4, 3), (8, 0, 7), (8, 2, 5), (8, 3, 10), (8, 11, 7), (8, 7, 8), (8, 5, 0), (8, 10, 0),\n    (5, 10, 1), (5, 0, 7), (5, 7, 7), (5, 8, 6),\n    (0, 2, 6), (0, 11, 10), (0, 5, 5),\n    (2, 1, 6), (2, 9, 6), (2, 4, 5), (2, 5, 3), (2, 10, 3), (2, 0, 0),\n    (1, 11, 10), (1, 7, 1), (1, 6, 4), (1, 8, 4), (1, 4, 8), (1, 0, 1), (1, 2, 3),\n    (9, 3, 2), (9, 11, 9), (9, 7, 3), (9, 6, 10), (9, 0, 8), (9, 1, 5), (9, 2, 0),\n    (11, 6, 3), (11, 8, 4), (11, 10, 4), (11, 12, 3), (11, 1, 4), (11, 9, 8), (11, 0, 0),\n    (4, 10, 10), (4, 12, 9), (4, 2, 10), (4, 9, 5), (4, 8, 5),\n    (7, 5, 3), (7, 10, 10), (7, 9, 5), (7, 8, 0), (7, 1, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "235": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the given graph\nedges = [\n    (0, 1, 7), (0, 6, 10), (0, 5, 1), (0, 3, 1), (0, 12, 0), (0, 11, 0), (0, 2, 0),\n    (1, 2, 9), (1, 3, 2), (1, 0, 3), (1, 4, 2), (1, 12, 5), (1, 9, 10), (1, 11, 5),\n    (6, 4, 2), (6, 9, 5),\n    (5, 0, 5), (5, 7, 10),\n    (3, 0, 2), (3, 4, 9), (3, 12, 7), (3, 7, 3), (3, 5, 9),\n    (2, 5, 3), (2, 0, 10), (2, 8, 6), (2, 10, 10), (2, 9, 7), (2, 11, 5), (2, 1, 2),\n    (4, 9, 1), (4, 5, 8),\n    (12, 1, 6), (12, 2, 10), (12, 0, 2), (12, 4, 4), (12, 8, 3),\n    (9, 2, 3), (9, 7, 10), (9, 3, 2), (9, 4, 6), (9, 8, 7),\n    (11, 6, 1), (11, 7, 8), (11, 3, 4), (11, 0, 1), (11, 8, 1), (11, 10, 0),\n    (7, 0, 2), (7, 10, 4), (7, 6, 1),\n    (8, 10, 5), (8, 12, 5),\n    (10, 9, 3), (10, 11, 7), (10, 2, 4), (10, 5, 7), (10, 3, 7), (10, 4, 5), (10, 8, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 0\nmax_flow = g.edmonds_karp(8, 0)\nprint(max_flow)\n```"}, "236": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(2, 5, 9)\ng.add_edge(2, 4, 9)\ng.add_edge(2, 8, 7)\ng.add_edge(5, 2, 5)\ng.add_edge(5, 0, 1)\ng.add_edge(5, 9, 2)\ng.add_edge(5, 6, 1)\ng.add_edge(4, 7, 9)\ng.add_edge(0, 4, 10)\ng.add_edge(9, 8, 8)\ng.add_edge(9, 3, 7)\ng.add_edge(9, 10, 8)\ng.add_edge(6, 1, 5)\ng.add_edge(3, 0, 5)\ng.add_edge(10, 3, 9)\ng.add_edge(10, 0, 8)\ng.add_edge(10, 9, 0)\ng.add_edge(1, 7, 3)\ng.add_edge(1, 9, 10)\ng.add_edge(1, 5, 9)\n\nsource = 9\nsink = 10\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "237": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u].items():\n                if v not in visited and capacity > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 4, 8), (9, 0, 9), (9, 11, 2), (9, 14, 1), (9, 8, 2), (9, 6, 0), (9, 3, 0), (9, 12, 0), (9, 13, 0), (9, 5, 0),\n    (4, 14, 10), (4, 6, 6), (4, 5, 3), (4, 7, 4), (4, 10, 0), (4, 8, 0), (4, 9, 0),\n    (0, 12, 5), (0, 3, 9), (0, 6, 1),\n    (11, 14, 2),\n    (14, 12, 1), (14, 6, 9),\n    (8, 5, 8), (8, 7, 3), (8, 4, 9), (8, 13, 9), (8, 11, 8), (8, 2, 0), (8, 9, 0),\n    (6, 9, 2), (6, 14, 5), (6, 12, 6), (6, 10, 0),\n    (5, 9, 8), (5, 12, 0),\n    (7, 1, 6), (7, 13, 4), (7, 11, 3), (7, 14, 4),\n    (12, 3, 5), (12, 5, 3), (12, 1, 2), (12, 9, 1), (12, 6, 0),\n    (3, 7, 5), (3, 1, 1), (3, 9, 2), (3, 0, 10), (3, 11, 8),\n    (13, 11, 10), (13, 14, 8), (13, 9, 8), (13, 2, 4),\n    (2, 13, 7), (2, 0, 7), (2, 8, 8), (2, 12, 9), (2, 5, 7), (2, 10, 0), (2, 1, 0),\n    (1, 2, 6), (1, 3, 7), (1, 6, 7), (1, 10, 0),\n    (10, 1, 3), (10, 2, 8), (10, 4, 3), (10, 6, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 4)\nprint(max_flow)\n```"}, "238": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (0, 12, 7), (0, 3, 1), (0, 11, 2), (0, 8, 5),\n    (12, 4, 6),\n    (3, 1, 2), (3, 0, 9), (3, 10, 3),\n    (11, 5, 1), (11, 4, 5), (11, 7, 6),\n    (8, 4, 3), (8, 9, 1), (8, 11, 5),\n    (4, 7, 7), (4, 11, 3), (4, 13, 9), (4, 10, 2),\n    (1, 6, 1), (1, 12, 2), (1, 10, 10), (1, 7, 0),\n    (10, 3, 7), (10, 2, 9), (10, 13, 8), (10, 12, 6),\n    (5, 7, 6), (5, 9, 7), (5, 6, 5), (5, 8, 3), (5, 0, 10), (5, 12, 2), (5, 10, 7), (5, 11, 0),\n    (7, 1, 6), (7, 13, 10), (7, 11, 0),\n    (9, 13, 1), (9, 5, 4), (9, 7, 9),\n    (13, 10, 6), (13, 7, 10), (13, 3, 5), (13, 9, 10), (13, 2, 7), (13, 4, 0),\n    (2, 6, 6), (2, 5, 7), (2, 3, 10), (2, 11, 3), (2, 13, 0),\n    (6, 4, 9), (6, 11, 5), (6, 5, 0), (6, 1, 0), (6, 2, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 11 to node 6\nmax_flow = g.edmonds_karp(11, 6)\nprint(max_flow)\n```"}, "239": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 8, 10), (0, 9, 10), (0, 6, 10), (0, 10, 2), (0, 1, 0), (0, 3, 0), (0, 7, 0), (0, 5, 0),\n    (8, 7, 6), (8, 3, 1),\n    (9, 1, 3), (9, 5, 9), (9, 4, 1), (9, 8, 7), (9, 2, 3), (9, 0, 0), (9, 10, 0),\n    (6, 10, 10), (6, 0, 7), (6, 4, 1),\n    (10, 0, 7), (10, 4, 7), (10, 8, 3), (10, 9, 2), (10, 6, 5), (10, 3, 0),\n    (7, 2, 9), (7, 1, 8), (7, 3, 9), (7, 5, 10), (7, 6, 5), (7, 0, 2), (7, 8, 8),\n    (3, 10, 7), (3, 0, 5), (3, 4, 8), (3, 2, 2), (3, 1, 5),\n    (1, 3, 5), (1, 0, 1), (1, 2, 10),\n    (5, 6, 10), (5, 0, 5), (5, 7, 0),\n    (4, 8, 1), (4, 7, 8), (4, 9, 8), (4, 0, 10), (4, 2, 0), (4, 3, 0),\n    (2, 1, 6), (2, 3, 6), (2, 4, 6), (2, 8, 1), (2, 7, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 9)\nprint(max_flow)\n```"}, "240": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(4, 5, 10)\ng.add_edge(4, 2, 3)\ng.add_edge(4, 6, 1)\ng.add_edge(5, 6, 9)\ng.add_edge(5, 4, 0)\ng.add_edge(2, 6, 7)\ng.add_edge(2, 1, 4)\ng.add_edge(2, 7, 4)\ng.add_edge(2, 0, 4)\ng.add_edge(2, 4, 0)\ng.add_edge(6, 1, 7)\ng.add_edge(6, 3, 1)\ng.add_edge(6, 4, 0)\ng.add_edge(6, 5, 0)\ng.add_edge(6, 2, 0)\ng.add_edge(1, 4, 4)\ng.add_edge(7, 4, 1)\ng.add_edge(0, 1, 5)\ng.add_edge(0, 3, 1)\ng.add_edge(3, 5, 1)\n\nmax_flow = g.edmonds_karp(4, 6)\nprint(max_flow)\n```"}, "241": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (6, 12, 4), (6, 10, 2), (6, 0, 9), (6, 4, 0), (6, 3, 0), (6, 7, 0),\n    (12, 11, 10), (12, 6, 1), (12, 1, 0),\n    (10, 1, 2), (10, 2, 7), (10, 4, 8), (10, 5, 9),\n    (0, 3, 7), (0, 12, 1), (0, 9, 10), (0, 5, 10), (0, 11, 7),\n    (11, 10, 7), (11, 1, 5), (11, 4, 7), (11, 0, 2), (11, 8, 10), (11, 3, 10), (11, 5, 4), (11, 12, 0),\n    (1, 4, 2), (1, 12, 4), (1, 11, 1),\n    (2, 0, 5), (2, 7, 1), (2, 8, 5), (2, 3, 7), (2, 11, 4), (2, 1, 2), (2, 10, 0),\n    (4, 3, 2), (4, 6, 5), (4, 10, 3), (4, 1, 6),\n    (5, 10, 10), (5, 2, 10), (5, 7, 5), (5, 8, 10), (5, 12, 1), (5, 9, 3), (5, 11, 0),\n    (3, 6, 6), (3, 9, 9), (3, 5, 7), (3, 0, 3), (3, 8, 8), (3, 4, 0), (3, 2, 0), (3, 11, 0),\n    (9, 10, 4), (9, 1, 3), (9, 0, 2),\n    (8, 12, 4), (8, 2, 3),\n    (7, 6, 6), (7, 9, 6), (7, 10, 6), (7, 2, 6), (7, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 4 to node 6\nmax_flow = g.edmonds_karp(4, 6)\nprint(max_flow)\n```"}, "242": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (8, 11, 3), (11, 1, 5), (11, 8, 0), (1, 11, 8),\n    (3, 7, 3), (3, 0, 2), (3, 11, 7), (7, 2, 8),\n    (7, 5, 4), (7, 4, 1), (0, 8, 1), (0, 3, 9),\n    (2, 11, 10), (2, 9, 9), (2, 7, 2), (5, 11, 8),\n    (5, 8, 10), (5, 6, 8), (4, 1, 2), (4, 6, 6),\n    (6, 8, 3), (6, 7, 4), (6, 10, 9), (10, 6, 4),\n    (10, 5, 7), (9, 1, 1), (9, 5, 4), (9, 8, 5), (9, 4, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 1\nmax_flow = g.edmonds_karp(8, 1)\nprint(max_flow)\n```"}, "243": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 11, 9), (8, 3, 6), (8, 12, 3), (8, 7, 0),\n    (11, 1, 5), (11, 12, 7), (11, 14, 9), (11, 5, 7), (11, 0, 8), (11, 4, 0), (11, 6, 0), (11, 8, 0),\n    (3, 1, 7), (3, 12, 8), (3, 6, 10), (3, 8, 10), (3, 9, 10), (3, 4, 9),\n    (12, 14, 3), (12, 8, 3), (12, 13, 8), (12, 5, 5), (12, 10, 3),\n    (1, 14, 5), (1, 4, 4), (1, 2, 2), (1, 11, 8),\n    (14, 7, 6), (14, 0, 8), (14, 3, 2), (14, 1, 7),\n    (5, 4, 4), (5, 10, 8), (5, 12, 7),\n    (0, 1, 7), (0, 12, 6), (0, 14, 7), (0, 8, 7),\n    (6, 7, 7), (6, 8, 9), (6, 13, 3), (6, 11, 7), (6, 3, 10), (6, 4, 0), (6, 2, 0),\n    (9, 4, 6), (9, 10, 9),\n    (4, 2, 3), (4, 11, 3), (4, 12, 4), (4, 6, 8), (4, 5, 5), (4, 9, 1), (4, 1, 0),\n    (13, 0, 8), (13, 1, 3), (13, 10, 3), (13, 12, 9),\n    (10, 8, 10), (10, 13, 7), (10, 4, 1), (10, 2, 1), (10, 11, 5), (10, 3, 9),\n    (2, 1, 9), (2, 12, 9), (2, 6, 10), (2, 8, 2), (2, 9, 10),\n    (7, 8, 9), (7, 9, 2), (7, 4, 8), (7, 0, 9), (7, 2, 9), (7, 14, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 11)\nprint(max_flow)\n```"}, "244": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity initially\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(5, 2, 2)\ng.add_edge(5, 4, 2)\ng.add_edge(2, 5, 1)\ng.add_edge(2, 8, 8)\ng.add_edge(4, 5, 6)\ng.add_edge(4, 7, 6)\ng.add_edge(4, 3, 7)\ng.add_edge(4, 0, 8)\ng.add_edge(8, 3, 6)\ng.add_edge(8, 4, 7)\ng.add_edge(8, 2, 0)\ng.add_edge(0, 3, 10)\ng.add_edge(0, 6, 8)\ng.add_edge(1, 3, 5)\ng.add_edge(1, 4, 9)\n\nmax_flow = g.edmonds_karp(5, 8)\nprint(max_flow)\n```"}, "245": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 3, 1), (5, 2, 5), (5, 11, 9), (5, 0, 8), (5, 8, 10), (5, 13, 0),\n    (3, 7, 6), (3, 4, 1),\n    (2, 12, 4), (2, 10, 10), (2, 9, 9), (2, 3, 4),\n    (11, 0, 1), (11, 8, 5), (11, 4, 2), (11, 12, 1),\n    (0, 7, 10), (0, 13, 4),\n    (8, 1, 9), (8, 0, 9), (8, 5, 0),\n    (7, 1, 9), (7, 13, 6), (7, 0, 0),\n    (4, 12, 4), (4, 10, 6), (4, 1, 9),\n    (12, 11, 10), (12, 9, 3), (12, 1, 9), (12, 5, 9), (12, 4, 2), (12, 13, 9), (12, 6, 7), (12, 2, 7),\n    (10, 7, 6), (10, 6, 10), (10, 2, 9), (10, 12, 1),\n    (9, 8, 9), (9, 1, 1), (9, 5, 5), (9, 4, 2), (9, 6, 1), (9, 10, 2),\n    (13, 0, 7), (13, 7, 4), (13, 5, 2),\n    (1, 13, 5), (1, 6, 6), (1, 10, 3), (1, 7, 0), (1, 8, 0),\n    (6, 10, 1), (6, 0, 6), (6, 9, 9), (6, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 13\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "246": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 4, 2), (10, 0, 9), (10, 9, 10), (10, 8, 0),\n    (4, 3, 10), (4, 6, 7), (4, 10, 10), (4, 12, 0),\n    (0, 5, 5), (0, 11, 5), (0, 8, 0), (0, 10, 0),\n    (9, 2, 7), (9, 12, 3),\n    (3, 1, 1), (3, 4, 6), (3, 7, 10), (3, 5, 3),\n    (6, 11, 1), (6, 1, 9), (6, 4, 9), (6, 5, 1),\n    (5, 8, 6), (5, 2, 7), (5, 1, 0),\n    (11, 10, 3), (11, 4, 9), (11, 2, 2), (11, 12, 9), (11, 6, 10), (11, 1, 0), (11, 0, 0),\n    (2, 3, 9),\n    (12, 1, 10), (12, 4, 1),\n    (1, 12, 10), (1, 5, 10), (1, 3, 6), (1, 11, 7),\n    (7, 3, 5),\n    (8, 10, 7), (8, 4, 9), (8, 0, 2), (8, 3, 10), (8, 5, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 11)\nprint(max_flow)\n```"}, "247": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # reverse edge with 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 7, 1), (4, 5, 1), (4, 0, 10),\n    (7, 5, 5), (7, 1, 7), (7, 4, 0),\n    (5, 6, 10), (5, 1, 2), (5, 4, 6),\n    (0, 1, 9), (0, 2, 4), (0, 8, 9), (0, 5, 6), (0, 6, 4),\n    (1, 7, 3), (1, 5, 0), (1, 8, 0),\n    (6, 4, 1), (6, 8, 5), (6, 5, 0),\n    (2, 0, 2), (2, 1, 5),\n    (8, 1, 7), (8, 4, 3), (8, 6, 0),\n    (3, 7, 4), (3, 0, 2), (3, 1, 8), (3, 4, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "248": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 9, 4), (2, 5, 1), (2, 1, 3),\n    (9, 4, 3), (9, 7, 2), (9, 8, 1), (9, 2, 3), (9, 1, 0),\n    (5, 2, 9), (5, 9, 6), (5, 7, 5), (5, 6, 1), (5, 8, 7),\n    (1, 9, 7), (1, 6, 5), (1, 2, 0),\n    (4, 6, 5), (4, 8, 7), (4, 5, 6), (4, 1, 8), (4, 2, 7), (4, 9, 10),\n    (7, 0, 2), (7, 5, 6), (7, 1, 6), (7, 9, 3), (7, 6, 0),\n    (8, 1, 6), (8, 2, 3), (8, 6, 6), (8, 3, 2), (8, 0, 6), (8, 9, 0), (8, 5, 0), (8, 4, 0),\n    (6, 1, 7), (6, 7, 2),\n    (3, 0, 9), (3, 2, 4), (3, 9, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 8)\nprint(max_flow)\n```"}, "249": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (1, 0, 2), (1, 7, 5), (1, 9, 6),\n    (0, 9, 3), (0, 8, 9), (0, 1, 6), (0, 2, 6), (0, 6, 7),\n    (7, 6, 1), (7, 4, 4), (7, 1, 0),\n    (2, 0, 7), (2, 10, 0),\n    (6, 9, 6), (6, 8, 4), (6, 2, 7), (6, 0, 0), (6, 7, 0),\n    (4, 10, 2), (4, 7, 0),\n    (10, 5, 10), (10, 2, 8), (10, 4, 0),\n    (3, 6, 6), (3, 0, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 1 to node 6\nmax_flow = g.edmonds_karp(1, 6)\nprint(max_flow)\n```"}, "250": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse edge has 0 capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 1, 10), (1, 3, 4), (1, 6, 8), (3, 4, 3), (3, 6, 3), (3, 1, 0),\n    (6, 5, 10), (6, 2, 8), (6, 7, 5), (6, 1, 4), (6, 4, 1), (6, 0, 4),\n    (4, 0, 7), (4, 6, 4), (4, 5, 8), (4, 1, 3), (4, 3, 0),\n    (5, 6, 0), (5, 7, 0), (5, 4, 0),\n    (2, 1, 5), (2, 6, 6),\n    (7, 3, 2), (7, 0, 7), (7, 5, 5), (7, 2, 2), (7, 6, 0),\n    (0, 2, 9), (0, 8, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 5)\nprint(max_flow)\n```"}, "251": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 7, 6), (0, 1, 8), (0, 3, 4), (0, 5, 6), (0, 2, 0),\n    (7, 4, 6), (1, 6, 4), (3, 4, 3), (3, 2, 0), (3, 0, 0),\n    (5, 6, 9), (4, 2, 9), (6, 2, 10), (6, 1, 6), (6, 5, 0),\n    (2, 0, 7), (2, 4, 5), (2, 3, 3), (2, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 3\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "252": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # If not visited and has capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 8, 7), (4, 2, 1), (4, 7, 10), (4, 9, 6), (4, 6, 0),\n    (8, 0, 6), (8, 6, 1), (8, 4, 5),\n    (2, 7, 6), (2, 3, 3), (2, 1, 9), (2, 5, 1), (2, 6, 0), (2, 4, 0), (2, 0, 0),\n    (7, 9, 9), (7, 3, 9), (7, 1, 5), (7, 5, 6), (7, 2, 2), (7, 4, 0),\n    (9, 3, 8), (9, 2, 7), (9, 7, 10),\n    (0, 2, 10), (0, 3, 3), (0, 6, 3), (0, 8, 4),\n    (6, 4, 4), (6, 8, 9), (6, 0, 3), (6, 2, 2), (6, 3, 4),\n    (3, 1, 2), (3, 8, 5), (3, 0, 10), (3, 6, 0),\n    (1, 0, 9), (1, 3, 9), (1, 2, 0), (1, 7, 0),\n    (5, 2, 9), (5, 3, 5), (5, 6, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 1\nmax_flow = g.edmonds_karp(6, 1)\nprint(max_flow)\n```"}, "253": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 9, 9), (4, 10, 4), (4, 3, 3), (4, 0, 3),\n    (9, 6, 6), (9, 12, 7),\n    (10, 0, 2),\n    (3, 0, 5), (3, 8, 10), (3, 12, 3),\n    (0, 8, 2), (0, 12, 9), (0, 2, 7),\n    (6, 4, 6), (6, 8, 8), (6, 10, 9), (6, 7, 6), (6, 5, 3),\n    (12, 2, 1), (12, 9, 6), (12, 7, 4), (12, 1, 5), (12, 4, 10), (12, 0, 0),\n    (8, 12, 4), (8, 3, 10),\n    (2, 9, 4), (2, 3, 7), (2, 8, 5), (2, 12, 5),\n    (7, 5, 4), (7, 6, 9), (7, 4, 2), (7, 11, 3), (7, 2, 5),\n    (1, 3, 5), (1, 12, 0),\n    (11, 5, 3),\n    (5, 3, 9), (5, 6, 7), (5, 4, 3), (5, 8, 7), (5, 10, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 1)\nprint(max_flow)\n```"}, "254": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 5, 10), (0, 1, 5),\n    (5, 7, 10), (5, 3, 1), (5, 6, 1), (5, 2, 10),\n    (1, 7, 1),\n    (7, 6, 9), (7, 2, 1), (7, 1, 4),\n    (3, 6, 6), (3, 4, 7), (3, 5, 0),\n    (6, 5, 8), (6, 7, 4), (6, 3, 1),\n    (2, 0, 9),\n    (4, 0, 1), (4, 2, 2), (4, 5, 9), (4, 1, 6), (4, 6, 5), (4, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 4)\nprint(max_flow)\n```"}, "255": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 0, 1), (7, 4, 8), (7, 3, 0), (7, 5, 0),\n    (0, 4, 9), (0, 7, 4), (0, 3, 0),\n    (4, 2, 3), (4, 7, 8), (4, 0, 2),\n    (2, 3, 1), (2, 1, 8), (2, 6, 6),\n    (1, 3, 8),\n    (3, 7, 9), (3, 1, 8), (3, 0, 3), (3, 2, 2),\n    (6, 5, 2), (6, 2, 0),\n    (5, 2, 2), (5, 3, 6), (5, 7, 8), (5, 1, 8), (5, 6, 6), (5, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 7)\nprint(max_flow)\n```"}, "256": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 4, 3), (8, 7, 5),\n    (4, 0, 6), (4, 2, 4), (4, 8, 5),\n    (7, 1, 9), (7, 3, 1),\n    (0, 7, 3), (0, 4, 7),\n    (2, 3, 4), (2, 6, 1), (2, 4, 10),\n    (1, 2, 8), (1, 3, 2), (1, 6, 5), (1, 0, 7), (1, 7, 0),\n    (3, 5, 5), (3, 7, 2),\n    (6, 8, 6), (6, 0, 10), (6, 1, 1), (6, 2, 10), (6, 5, 10),\n    (5, 6, 4), (5, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 6)\nprint(max_flow)\n```"}, "257": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (11, 9, 10), (11, 8, 2), (9, 0, 4), (9, 2, 6), (9, 11, 8),\n    (8, 10, 10), (8, 4, 9), (8, 7, 4), (8, 2, 0), (8, 11, 0),\n    (0, 5, 1), (2, 9, 6), (2, 8, 4), (2, 10, 8), (2, 0, 4), (2, 4, 7),\n    (10, 0, 6), (4, 5, 5), (7, 4, 7), (7, 11, 4),\n    (6, 8, 2), (6, 0, 3), (6, 3, 9), (3, 4, 2), (3, 7, 6),\n    (5, 3, 4), (12, 10, 5), (12, 4, 7), (1, 0, 3), (1, 2, 4), (1, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 8\nmax_flow = g.edmonds_karp(2, 8)\nprint(max_flow)\n```"}, "258": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (8, 7, 7), (8, 10, 2), (8, 6, 0),\n    (7, 4, 6), (7, 8, 7), (7, 1, 7), (7, 2, 2), (7, 11, 0),\n    (10, 6, 3), (10, 8, 10), (10, 1, 3), (10, 5, 10), (10, 4, 2), (10, 0, 6),\n    (4, 8, 1), (4, 11, 8), (4, 5, 3), (4, 6, 0),\n    (1, 11, 5), (1, 2, 7), (1, 7, 6), (1, 0, 6), (1, 12, 10), (1, 6, 3), (1, 8, 5),\n    (2, 0, 10), (2, 12, 8), (2, 10, 6), (2, 6, 5), (2, 1, 0), (2, 7, 0), (2, 5, 0),\n    (6, 8, 3), (6, 1, 6), (6, 11, 10), (6, 2, 7), (6, 4, 3),\n    (5, 3, 9), (5, 8, 4), (5, 2, 9), (5, 7, 10), (5, 4, 0),\n    (0, 6, 5), (0, 7, 5), (0, 4, 4),\n    (11, 7, 4), (11, 4, 4), (11, 0, 6), (11, 3, 7), (11, 8, 2), (11, 6, 0),\n    (12, 9, 2), (12, 3, 3), (12, 8, 6), (12, 2, 4), (12, 7, 1), (12, 1, 0),\n    (3, 6, 2), (3, 8, 7), (3, 1, 4), (3, 7, 7), (3, 5, 8), (3, 4, 5), (3, 12, 2), (3, 9, 5), (3, 11, 0),\n    (9, 1, 2), (9, 2, 3), (9, 7, 6), (9, 5, 3), (9, 4, 3), (9, 0, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 6 to node 2\nmax_flow = g.edmonds_karp(6, 2)\nprint(max_flow)\n```"}, "259": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 9, 1), (3, 10, 2), (3, 14, 7), (3, 4, 8), (3, 8, 10), (3, 1, 4), (3, 0, 7), (3, 12, 3), (3, 11, 5), (3, 2, 4),\n    (9, 10, 10), (9, 7, 8), (9, 14, 1), (9, 5, 9), (9, 1, 6), (9, 2, 10),\n    (10, 14, 6), (10, 2, 3), (10, 9, 7), (10, 7, 0), (10, 1, 0), (10, 8, 0), (10, 11, 0), (10, 13, 0),\n    (14, 4, 10), (14, 8, 3), (14, 1, 9), (14, 0, 5), (14, 2, 6), (14, 9, 2), (14, 10, 5), (14, 7, 8), (14, 12, 0),\n    (4, 8, 5), (4, 1, 2), (4, 12, 2), (4, 9, 1), (4, 7, 9),\n    (8, 0, 3), (8, 12, 8), (8, 13, 4), (8, 11, 3), (8, 2, 1), (8, 6, 3), (8, 9, 2), (8, 10, 8), (8, 7, 0),\n    (1, 12, 4), (1, 2, 1), (1, 9, 4), (1, 10, 10), (1, 14, 6), (1, 5, 7), (1, 8, 10), (1, 0, 0),\n    (0, 6, 10), (0, 9, 9), (0, 7, 5), (0, 4, 8), (0, 1, 1), (0, 2, 0),\n    (12, 6, 6), (12, 7, 9), (12, 14, 10), (12, 1, 8), (12, 5, 0),\n    (11, 2, 9), (11, 9, 2), (11, 10, 1), (11, 14, 9), (11, 5, 1), (11, 8, 9), (11, 1, 4), (11, 12, 6),\n    (2, 6, 4), (2, 9, 2), (2, 10, 5), (2, 0, 10), (2, 12, 10),\n    (7, 5, 4), (7, 8, 3), (7, 0, 4), (7, 6, 8), (7, 10, 4), (7, 9, 0),\n    (5, 12, 10), (5, 11, 4), (5, 2, 9), (5, 6, 4), (5, 9, 0),\n    (13, 3, 9), (13, 10, 10), (13, 7, 5), (13, 5, 4), (13, 6, 0),\n    (6, 4, 9), (6, 5, 7), (6, 8, 5), (6, 13, 10), (6, 11, 7), (6, 2, 2), (6, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 10)\nprint(max_flow)\n```"}, "260": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 6, 2), (3, 11, 4), (3, 1, 4), (3, 9, 8), (3, 8, 4), (3, 10, 1),\n    (3, 14, 10), (3, 2, 1), (3, 12, 0), (6, 11, 2), (6, 5, 8), (6, 13, 1),\n    (6, 7, 9), (6, 14, 8), (6, 2, 5), (11, 5, 10), (11, 4, 3), (11, 9, 2),\n    (11, 13, 7), (11, 10, 9), (11, 2, 6), (11, 3, 2), (1, 5, 8), (1, 9, 8),\n    (1, 13, 9), (1, 12, 8), (1, 6, 2), (9, 8, 10), (9, 10, 4), (9, 14, 4),\n    (9, 0, 7), (9, 6, 5), (8, 10, 5), (8, 4, 9), (8, 9, 2), (8, 7, 0),\n    (8, 3, 0), (8, 5, 0), (10, 2, 10), (10, 3, 7), (10, 5, 5), (10, 9, 6),\n    (10, 8, 7), (10, 12, 7), (10, 4, 0), (14, 11, 3), (14, 5, 10), (14, 9, 8),\n    (14, 12, 2), (14, 10, 4), (2, 3, 9), (2, 10, 3), (2, 14, 5), (5, 9, 5),\n    (5, 8, 6), (5, 14, 10), (5, 3, 9), (5, 11, 3), (5, 12, 0), (5, 10, 0),\n    (13, 12, 9), (13, 7, 7), (13, 14, 9), (13, 2, 8), (13, 11, 6), (13, 1, 8),\n    (13, 4, 0), (13, 0, 0), (7, 14, 7), (7, 3, 1), (7, 8, 10), (7, 13, 0),\n    (4, 13, 4), (4, 12, 5), (4, 10, 10), (4, 0, 6), (12, 14, 1), (12, 2, 7),\n    (12, 3, 5), (12, 5, 7), (12, 4, 1), (12, 13, 5), (0, 9, 4), (0, 13, 7),\n    (0, 4, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 8)\nprint(max_flow)\n```"}, "261": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\n\nedges = [\n    (9, 7, 1), (9, 11, 10), (9, 5, 4), (9, 3, 4), (9, 12, 9), (9, 2, 4), (9, 6, 8),\n    (7, 5, 2), (7, 12, 1), (7, 4, 8), (7, 13, 3), (7, 6, 5),\n    (11, 12, 1), (11, 2, 3), (11, 4, 3), (11, 13, 7), (11, 6, 8),\n    (5, 3, 9), (5, 13, 9), (5, 6, 3), (5, 7, 0), (5, 2, 0),\n    (3, 8, 9), (3, 2, 4), (3, 4, 7), (3, 0, 5), (3, 10, 3), (3, 5, 0),\n    (12, 6, 8), (12, 9, 6), (12, 7, 1), (12, 11, 0),\n    (2, 6, 7), (2, 5, 7), (2, 8, 4), (2, 11, 0),\n    (6, 0, 6), (6, 10, 5), (6, 2, 10), (6, 13, 10), (6, 11, 0), (6, 12, 0), (6, 4, 0),\n    (4, 6, 8), (4, 7, 7), (4, 8, 3), (4, 11, 0),\n    (13, 11, 2), (13, 10, 8), (13, 6, 0),\n    (8, 1, 2), (8, 2, 8), (8, 0, 4),\n    (0, 10, 6), (0, 8, 9), (0, 1, 10), (0, 6, 0),\n    (10, 8, 2), (10, 1, 3), (10, 9, 7), (10, 13, 0), (10, 6, 0), (10, 0, 0), (10, 3, 0),\n    (1, 4, 10), (1, 13, 1), (1, 11, 4), (1, 12, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 10)\nprint(max_flow)\n```"}, "262": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 7, 3), (7, 1, 3), (7, 0, 3), (1, 5, 8), (1, 4, 3), (1, 6, 9), \n    (1, 8, 7), (1, 7, 4), (0, 1, 9), (0, 3, 7), (0, 4, 0), (0, 8, 0), \n    (0, 7, 0), (8, 0, 4), (8, 1, 3), (8, 5, 1), (8, 4, 9), (8, 6, 7), \n    (5, 6, 9), (4, 0, 1), (4, 1, 0), (3, 5, 3), (2, 5, 9), (2, 8, 9), \n    (2, 3, 1), (11, 10, 2), (11, 7, 6), (11, 1, 8), (10, 2, 8), (10, 7, 9), \n    (9, 10, 7), (9, 4, 8), (9, 3, 1), (9, 0, 3), (9, 2, 7), (9, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 0)\nprint(max_flow)\n```"}, "263": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges with capacities\nedges = [\n    (7, 5, 3), (7, 2, 8), (7, 9, 3), (7, 6, 1), (7, 4, 10), (7, 3, 2), (7, 14, 0),\n    (5, 2, 9), (5, 14, 7), (5, 8, 9), (5, 6, 7), (5, 10, 4), (5, 4, 7), (5, 11, 8), (5, 7, 2),\n    (2, 12, 1), (2, 9, 6), (2, 4, 6), (2, 0, 4), (2, 7, 3), (2, 14, 0),\n    (9, 8, 8), (9, 1, 10), (9, 0, 7), (9, 7, 1), (9, 5, 4), (9, 12, 8), (9, 11, 0), (9, 2, 0),\n    (6, 13, 2), (6, 0, 8), (6, 9, 3), (6, 14, 5), (6, 3, 0),\n    (4, 11, 1), (4, 7, 2), (4, 14, 6), (4, 8, 2), (4, 6, 4), (4, 13, 1),\n    (3, 11, 1), (3, 12, 3), (3, 14, 9), (3, 8, 6), (3, 6, 6), (3, 10, 3),\n    (14, 8, 10), (14, 3, 10), (14, 11, 3), (14, 7, 8), (14, 2, 2), (14, 12, 3),\n    (8, 10, 6), (8, 13, 2), (8, 7, 1), (8, 9, 1), (8, 14, 0),\n    (10, 13, 7), (10, 4, 8), (10, 11, 9), (10, 0, 4), (10, 7, 4), (10, 5, 2), (10, 2, 2), (10, 12, 2), (10, 9, 8), (10, 8, 0),\n    (11, 0, 8), (11, 9, 10), (11, 8, 9), (11, 6, 4), (11, 3, 1), (11, 14, 0),\n    (12, 9, 10), (12, 1, 10), (12, 10, 6), (12, 13, 10), (12, 2, 5), (12, 14, 0), (12, 3, 0),\n    (0, 7, 1), (0, 5, 6), (0, 2, 8), (0, 14, 2), (0, 6, 10), (0, 10, 2),\n    (1, 13, 9), (1, 4, 6), (1, 3, 10), (1, 11, 2), (1, 6, 1),\n    (13, 4, 6), (13, 3, 5), (13, 0, 5), (13, 5, 6), (13, 12, 8), (13, 9, 9), (13, 14, 9), (13, 6, 9), (13, 1, 3), (13, 8, 0), (13, 10, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 14 to node 12\nmax_flow = g.edmonds_karp(14, 12)\nprint(max_flow)\n```"}, "264": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (6, 5, 5), (6, 1, 1), (6, 0, 1), (6, 4, 0),\n    (5, 1, 5), (5, 0, 4), (5, 9, 0),\n    (1, 4, 10), (1, 5, 6), (1, 8, 7), (1, 9, 0),\n    (0, 10, 8), (0, 1, 9), (0, 3, 5), (0, 9, 0), (0, 5, 0), (0, 2, 0), (0, 6, 0),\n    (4, 2, 4), (4, 1, 6), (4, 3, 6), (4, 6, 10),\n    (8, 1, 5), (8, 9, 10), (8, 5, 1),\n    (10, 8, 3), (10, 2, 4), (10, 6, 6), (10, 4, 6),\n    (3, 0, 7), (3, 4, 3), (3, 7, 3), (3, 9, 0),\n    (2, 3, 10), (2, 0, 4), (2, 4, 1), (2, 10, 8), (2, 8, 10),\n    (7, 2, 3), (7, 9, 9), (7, 3, 8), (7, 6, 6), (7, 4, 9),\n    (9, 3, 4), (9, 0, 7), (9, 5, 4), (9, 8, 9), (9, 1, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 0)\nprint(max_flow)\n```"}, "265": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 1, 10), (1, 6, 7), (6, 2, 2), (6, 8, 1), (6, 9, 3), (6, 5, 0),\n    (0, 1, 10), (0, 6, 8), (0, 8, 10), (0, 4, 6),\n    (8, 7, 4), (8, 4, 9), (8, 0, 1), (8, 6, 6),\n    (2, 5, 8), (2, 4, 4),\n    (9, 4, 6), (9, 5, 8),\n    (7, 3, 10), (7, 8, 0),\n    (3, 6, 6), (3, 5, 8), (3, 1, 4),\n    (5, 9, 6), (5, 3, 1), (5, 6, 9), (5, 2, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 7)\nprint(max_flow)\n```"}, "266": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\n\n# Add edges based on the provided graph\nedges = [\n    (8, 4, 4), (8, 14, 5), (8, 5, 6), (8, 9, 10), (8, 11, 7), (8, 12, 9), (8, 2, 1), (8, 7, 0),\n    (4, 14, 7), (4, 9, 10), (4, 1, 7), (4, 7, 0), (4, 3, 0),\n    (14, 1, 4), (14, 11, 4), (14, 6, 6), (14, 7, 7), (14, 12, 5), (14, 13, 4), (14, 2, 0), (14, 8, 0), (14, 4, 0),\n    (5, 9, 2), (5, 0, 10), (5, 1, 2), (5, 6, 1), (5, 2, 3), (5, 3, 4), (5, 4, 5), (5, 14, 9),\n    (9, 0, 1), (9, 1, 8), (9, 11, 4), (9, 7, 4), (9, 12, 7), (9, 2, 6), (9, 8, 1), (9, 4, 10), (9, 13, 10), (9, 5, 7),\n    (11, 4, 3), (11, 14, 5),\n    (12, 3, 8), (12, 1, 1),\n    (2, 3, 10), (2, 13, 7), (2, 14, 1), (2, 1, 5), (2, 10, 7), (2, 12, 1), (2, 7, 0),\n    (1, 12, 2), (1, 3, 2), (1, 4, 10), (1, 13, 3),\n    (6, 12, 1), (6, 2, 7), (6, 8, 6), (6, 14, 7), (6, 0, 7), (6, 1, 8), (6, 11, 1),\n    (7, 12, 6), (7, 2, 2), (7, 8, 1), (7, 3, 2), (7, 4, 1), (7, 9, 6), (7, 1, 8), (7, 13, 0),\n    (13, 7, 4),\n    (0, 11, 4), (0, 8, 9), (0, 4, 7), (0, 13, 5),\n    (3, 4, 5), (3, 1, 9), (3, 10, 2), (3, 7, 8), (3, 12, 6),\n    (10, 12, 4), (10, 2, 7), (10, 3, 7), (10, 4, 9), (10, 13, 2), (10, 0, 7), (10, 1, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 13 to node 14\nmax_flow = g.edmonds_karp(13, 14)\nprint(max_flow)\n```"}, "267": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 8, 2), (9, 0, 10), (9, 7, 5), (9, 10, 1), (9, 5, 5), (9, 2, 0),\n    (8, 0, 9), (8, 5, 7), (8, 4, 6), (8, 3, 6), (8, 2, 0), (8, 6, 0), (8, 9, 0), (8, 10, 0),\n    (0, 5, 4), (0, 2, 10), (0, 6, 1), (0, 1, 2),\n    (7, 10, 8), (7, 5, 2), (7, 6, 3), (7, 9, 1), (7, 3, 8),\n    (10, 1, 2), (10, 4, 10), (10, 9, 10), (10, 8, 8), (10, 0, 5), (10, 3, 0), (10, 6, 0), (10, 7, 0),\n    (4, 0, 3), (4, 1, 7),\n    (3, 7, 9), (3, 10, 1), (3, 5, 3), (3, 2, 8), (3, 6, 4), (3, 1, 7), (3, 4, 3),\n    (2, 1, 7), (2, 9, 5), (2, 8, 3), (2, 5, 2), (2, 0, 0),\n    (6, 3, 1), (6, 8, 1), (6, 0, 6), (6, 7, 5), (6, 10, 9), (6, 5, 2), (6, 2, 9), (6, 1, 0),\n    (1, 4, 4), (1, 3, 6), (1, 2, 5), (1, 6, 3), (1, 0, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 0 to node 8\nmax_flow = g.edmonds_karp(0, 8)\nprint(max_flow)\n```"}, "268": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 6, 5), (5, 0, 9), (5, 7, 7), (5, 3, 3), (5, 4, 6),\n    (6, 0, 8), (6, 1, 8), (6, 2, 1), (6, 7, 0),\n    (0, 7, 9), (0, 1, 7), (0, 2, 6), (0, 4, 4),\n    (7, 4, 4), (7, 6, 5), (7, 0, 0),\n    (3, 1, 1), (3, 2, 3), (3, 4, 9), (3, 5, 10), (3, 6, 9), (3, 0, 10),\n    (4, 0, 4), (4, 1, 10), (4, 2, 8), (4, 7, 0),\n    (1, 2, 7), (1, 7, 6), (1, 3, 2), (1, 0, 0), (1, 6, 0),\n    (2, 0, 8), (2, 7, 4), (2, 3, 1), (2, 1, 0), (2, 4, 0), (2, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 2)\nprint(max_flow)\n```"}, "269": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (12, 3, 7), (12, 0, 3),\n    (3, 2, 1), (3, 11, 3), (3, 12, 0),\n    (0, 4, 5), (0, 2, 3), (0, 12, 0),\n    (2, 4, 4), (2, 3, 0), (2, 0, 0),\n    (11, 12, 7), (11, 10, 7),\n    (4, 10, 2), (4, 3, 3), (4, 7, 1),\n    (10, 0, 3),\n    (6, 3, 6), (6, 4, 3),\n    (5, 12, 9),\n    (1, 11, 5), (1, 12, 9),\n    (9, 0, 10),\n    (8, 11, 7), (8, 0, 3), (8, 7, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 2)\nprint(max_flow)\n```"}, "270": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 4, 9), (0, 2, 5), (0, 3, 5), (0, 1, 9),\n    (4, 2, 2), (4, 3, 1), (4, 7, 1), (4, 5, 3), (4, 0, 0),\n    (2, 0, 8),\n    (3, 5, 7), (3, 1, 6), (3, 6, 3), (3, 4, 5), (3, 0, 0),\n    (1, 0, 8), (1, 2, 3), (1, 3, 6),\n    (7, 1, 3), (7, 6, 8), (7, 0, 4), (7, 4, 1),\n    (5, 1, 8), (5, 0, 1), (5, 4, 1), (5, 3, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 5)\nprint(max_flow)\n```"}, "271": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (0, 6, 7), (0, 8, 8), (0, 1, 1), (0, 7, 9),\n    (6, 1, 7), (6, 5, 2), (6, 11, 9),\n    (8, 4, 1), (8, 1, 2), (8, 5, 5), (8, 11, 7),\n    (1, 5, 7), (1, 11, 4), (1, 6, 9),\n    (7, 12, 5), (7, 4, 1),\n    (5, 11, 7), (5, 6, 0), (5, 1, 0), (5, 3, 0),\n    (11, 6, 9), (11, 12, 1), (11, 3, 10), (11, 5, 6),\n    (4, 2, 10), (4, 1, 10), (4, 0, 2), (4, 6, 9), (4, 8, 3), (4, 12, 10), (4, 3, 3),\n    (12, 4, 3), (12, 6, 7),\n    (10, 6, 10), (10, 8, 6), (10, 12, 7), (10, 2, 9), (10, 7, 3),\n    (2, 1, 8), (2, 5, 9), (2, 11, 1), (2, 10, 1), (2, 3, 4), (2, 4, 5),\n    (3, 4, 7), (3, 1, 2), (3, 5, 5), (3, 11, 2), (3, 10, 2),\n    (9, 3, 10), (9, 4, 5), (9, 11, 10), (9, 12, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 5)\nprint(max_flow)\n```"}, "272": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 3, 10), (5, 2, 1), (5, 10, 9), (5, 7, 10), (5, 4, 8),\n    (3, 6, 2), (3, 10, 9),\n    (2, 4, 7), (2, 0, 4), (2, 1, 3),\n    (10, 5, 2), (10, 1, 3), (10, 9, 0),\n    (7, 4, 10), (7, 5, 3), (7, 9, 10), (7, 1, 4),\n    (4, 8, 5), (4, 7, 2),\n    (6, 7, 7), (6, 9, 6), (6, 3, 10),\n    (0, 3, 7), (0, 8, 9), (0, 2, 4), (0, 10, 2), (0, 7, 3), (0, 9, 4),\n    (1, 7, 1), (1, 4, 3), (1, 9, 8),\n    (9, 0, 4), (9, 8, 6), (9, 1, 5), (9, 2, 2), (9, 10, 10), (9, 7, 1),\n    (8, 6, 3), (8, 10, 4), (8, 7, 5), (8, 4, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 5)\nprint(max_flow)\n```"}, "273": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    queue.append(v)\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 9, 8), (10, 3, 6), (3, 9, 1), (2, 3, 6), (2, 6, 2),\n    (6, 1, 1), (6, 3, 8), (1, 11, 10), (1, 10, 5), (1, 2, 9),\n    (1, 5, 5), (1, 8, 0), (5, 0, 7), (0, 11, 1), (11, 7, 6),\n    (11, 1, 10), (7, 1, 3), (8, 1, 4), (8, 3, 4), (4, 10, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 1\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "274": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(2, 1, 9)\ng.add_edge(2, 7, 3)\ng.add_edge(2, 0, 4)\ng.add_edge(2, 8, 4)\ng.add_edge(1, 6, 3)\ng.add_edge(1, 3, 3)\ng.add_edge(1, 8, 0)\ng.add_edge(0, 7, 6)\ng.add_edge(8, 1, 10)\ng.add_edge(6, 9, 10)\ng.add_edge(6, 1, 0)\ng.add_edge(9, 5, 10)\ng.add_edge(9, 6, 1)\ng.add_edge(9, 8, 7)\ng.add_edge(4, 2, 8)\ng.add_edge(5, 2, 10)\ng.add_edge(5, 4, 5)\n\nmax_flow = g.edmonds_karp(8, 9)\nprint(max_flow)\n```"}, "275": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                self.graph[v][u] = self.graph[v].get(u, 0) + path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (11, 1, 6), (11, 0, 0), (11, 8, 0),\n    (1, 4, 8), (1, 9, 5), (1, 6, 9), (1, 11, 0), (1, 8, 0), (1, 3, 0),\n    (4, 5, 2), (4, 10, 1), (4, 8, 9),\n    (9, 3, 4), (9, 0, 4), (9, 4, 1), (9, 7, 0),\n    (6, 5, 7), (6, 13, 7), (6, 3, 1), (6, 8, 6), (6, 7, 6), (6, 4, 7),\n    (0, 10, 2), (0, 11, 10),\n    (10, 0, 4), (10, 7, 3), (10, 4, 6),\n    (7, 9, 6), (7, 13, 2), (7, 10, 0),\n    (8, 12, 9), (8, 4, 3), (8, 6, 3), (8, 1, 4), (8, 11, 10),\n    (12, 9, 3), (12, 5, 6),\n    (5, 0, 7), (5, 8, 2),\n    (13, 11, 1), (13, 8, 10), (13, 4, 1),\n    (3, 1, 5), (3, 10, 2), (3, 9, 0),\n    (2, 12, 4), (2, 4, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 1)\nprint(max_flow)\n```"}, "276": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (12, 10, 1), (12, 5, 5), (12, 1, 5),\n    (10, 3, 5), (10, 11, 2), (10, 1, 9), (10, 6, 4),\n    (5, 4, 8), (5, 1, 6), (5, 2, 7), (5, 12, 2), (5, 8, 0),\n    (1, 2, 1), (1, 9, 6), (1, 5, 8), (1, 4, 10),\n    (3, 7, 7), (3, 11, 6), (3, 1, 5), (3, 9, 9), (3, 10, 1),\n    (11, 1, 2), (11, 2, 2), (11, 10, 5), (11, 7, 2), (11, 4, 8),\n    (6, 11, 7), (6, 1, 4),\n    (4, 1, 7), (4, 8, 3), (4, 3, 5), (4, 7, 6),\n    (2, 12, 6), (2, 6, 7), (2, 9, 3),\n    (9, 5, 8), (9, 7, 10), (9, 1, 7), (9, 8, 2),\n    (8, 9, 6), (8, 5, 6),\n    (7, 0, 3), (7, 12, 8), (7, 8, 7), (7, 10, 3),\n    (0, 2, 3), (0, 10, 9), (0, 3, 6), (0, 11, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 9\nmax_flow = g.edmonds_karp(8, 9)\nprint(max_flow)\n```"}, "277": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 5, 9), (3, 7, 1), (3, 9, 1), (3, 10, 3),\n    (5, 7, 10), (5, 11, 6), (5, 6, 8), (5, 13, 7), (5, 1, 8), (5, 12, 4),\n    (7, 8, 1), (7, 13, 6), (7, 1, 6), (7, 4, 5),\n    (9, 6, 9), (9, 8, 7), (9, 3, 7), (9, 7, 2), (9, 4, 0),\n    (10, 4, 4), (10, 7, 2), (10, 11, 8), (10, 9, 8),\n    (11, 6, 7), (11, 2, 7), (11, 13, 8), (11, 12, 5), (11, 4, 1), (11, 5, 4), (11, 7, 5),\n    (6, 13, 4), (6, 1, 1), (6, 10, 10), (6, 0, 7), (6, 5, 8), (6, 9, 9),\n    (13, 12, 7), (13, 4, 3), (13, 9, 5), (13, 6, 6), (13, 8, 10), (13, 7, 0), (13, 5, 0),\n    (1, 12, 2), (1, 5, 10), (1, 7, 10), (1, 6, 2),\n    (12, 4, 10), (12, 7, 6), (12, 11, 9), (12, 13, 4), (12, 1, 4),\n    (8, 13, 6), (8, 10, 10), (8, 5, 5), (8, 11, 10), (8, 7, 0), (8, 9, 0),\n    (4, 3, 7), (4, 9, 6), (4, 2, 8), (4, 13, 3), (4, 7, 0),\n    (0, 7, 9), (0, 13, 1), (0, 10, 7),\n    (2, 1, 3), (2, 4, 8), (2, 0, 7), (2, 9, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 8)\nprint(max_flow)\n```"}, "278": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (10, 4, 9), (10, 1, 3), (10, 3, 9), (10, 6, 0),\n    (4, 8, 6), (4, 14, 5), (4, 5, 0),\n    (1, 3, 3), (1, 8, 8), (1, 9, 10), (1, 5, 3),\n    (3, 11, 8), (3, 13, 1), (3, 9, 7), (3, 7, 9), (3, 14, 3), (3, 6, 2), (3, 10, 0), (3, 2, 0),\n    (8, 13, 1), (8, 9, 10), (8, 10, 10), (8, 7, 5), (8, 1, 8), (8, 5, 0), (8, 4, 0),\n    (14, 4, 6), (14, 6, 10), (14, 0, 7), (14, 2, 7), (14, 10, 10),\n    (9, 0, 7), (9, 2, 1), (9, 10, 10), (9, 7, 5), (9, 5, 6), (9, 1, 1), (9, 3, 9), (9, 8, 0),\n    (5, 6, 3), (5, 8, 2), (5, 4, 8),\n    (11, 9, 6), (11, 0, 8), (11, 2, 3), (11, 10, 6), (11, 7, 7), (11, 14, 4), (11, 1, 6), (11, 12, 8), (11, 3, 9),\n    (13, 8, 1),\n    (7, 12, 10), (7, 11, 2), (7, 8, 1), (7, 9, 1), (7, 6, 0), (7, 3, 0),\n    (6, 10, 5), (6, 7, 1), (6, 14, 10), (6, 5, 3), (6, 1, 3),\n    (12, 3, 2), (12, 13, 6), (12, 9, 10), (12, 10, 1), (12, 7, 1), (12, 5, 8), (12, 0, 0),\n    (0, 12, 6), (0, 6, 4), (0, 8, 5), (0, 14, 0),\n    (2, 10, 4), (2, 4, 5), (2, 5, 1), (2, 1, 10), (2, 12, 7), (2, 3, 10), (2, 8, 1), (2, 0, 9), (2, 14, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 5 to node 7\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "279": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:  # Check for available capacity\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 2, 1), (9, 5, 3), (9, 0, 2), (9, 1, 10),\n    (2, 3, 10), (2, 5, 6), (2, 1, 9), (2, 9, 0), (2, 8, 0),\n    (5, 1, 5), (5, 8, 6), (5, 9, 7), (5, 3, 2),\n    (0, 1, 4), (0, 9, 1), (0, 4, 8),\n    (1, 3, 9), (1, 0, 3), (1, 9, 0),\n    (3, 5, 5), (3, 2, 1), (3, 1, 0),\n    (8, 6, 3), (8, 2, 6), (8, 7, 10), (8, 3, 6), (8, 1, 7), (8, 5, 0), (8, 4, 0),\n    (4, 1, 6), (4, 8, 1), (4, 6, 5), (4, 0, 0),\n    (6, 3, 7), (6, 5, 7), (6, 0, 10), (6, 8, 4), (6, 4, 0),\n    (7, 4, 7), (7, 0, 8), (7, 8, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 9 to node 2\nmax_flow = g.edmonds_karp(9, 2)\nprint(max_flow)\n```"}, "280": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 7, 2), (5, 4, 7), (5, 8, 1), (5, 1, 3),\n    (7, 3, 10), (7, 8, 7), (7, 9, 7), (7, 5, 0),\n    (4, 6, 3), (4, 8, 3), (4, 5, 5), (4, 9, 4),\n    (8, 5, 1), (8, 0, 8), (8, 2, 9), (8, 4, 9),\n    (8, 6, 7), (8, 3, 5), (8, 7, 0), (8, 9, 0),\n    (1, 3, 7), (1, 5, 0),\n    (3, 8, 5), (3, 1, 9), (3, 5, 7), (3, 6, 4),\n    (9, 6, 10), (9, 3, 10), (9, 8, 9), (9, 1, 10),\n    (9, 5, 10), (9, 2, 7), (9, 4, 0),\n    (6, 1, 4),\n    (0, 7, 2), (0, 6, 9), (0, 8, 4), (0, 1, 5), (0, 5, 3),\n    (2, 7, 8), (2, 6, 2), (2, 3, 3), (2, 1, 10), (2, 5, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 8)\nprint(max_flow)\n```"}, "281": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (3, 1, 5), (3, 9, 4), (3, 8, 2), (3, 4, 0),\n    (1, 9, 3), (1, 2, 1), (1, 3, 5),\n    (9, 8, 2), (9, 5, 5), (9, 10, 3), (9, 3, 7), (9, 11, 0),\n    (8, 5, 10), (8, 9, 7),\n    (2, 3, 3), (2, 1, 7), (2, 6, 9), (2, 10, 2), (2, 7, 0),\n    (5, 3, 9), (5, 6, 7), (5, 9, 1), (5, 11, 0), (5, 7, 0),\n    (10, 4, 1), (10, 6, 4), (10, 0, 7),\n    (7, 8, 5), (7, 5, 3), (7, 10, 6), (7, 2, 10), (7, 4, 2), (7, 11, 0),\n    (4, 3, 5), (4, 7, 3), (4, 9, 3), (4, 8, 10), (4, 10, 8), (4, 11, 0),\n    (6, 5, 10), (6, 7, 8), (6, 10, 0), (6, 2, 0),\n    (0, 8, 9),\n    (11, 4, 8), (11, 7, 2), (11, 9, 7), (11, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 6)\nprint(max_flow)\n```"}, "282": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 11, 6), (8, 6, 1), (11, 8, 5), (6, 1, 5), (6, 8, 0),\n    (1, 4, 7), (1, 6, 10), (1, 3, 2), (4, 6, 9), (4, 10, 6),\n    (4, 0, 5), (4, 9, 2), (4, 1, 0), (10, 9, 3), (10, 5, 2),\n    (10, 11, 5), (10, 4, 0), (0, 1, 7), (9, 5, 2), (9, 0, 1),\n    (5, 1, 7), (5, 10, 1), (5, 8, 3), (5, 7, 2), (2, 7, 5),\n    (2, 6, 10), (2, 4, 8), (7, 5, 5), (7, 11, 5), (7, 10, 1),\n    (7, 4, 3), (3, 0, 9), (3, 8, 2), (3, 2, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 5)\nprint(max_flow)\n```"}, "283": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u].items():\n                if v not in visited and capacity > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(0, 6, 5)\ng.add_edge(0, 3, 8)\ng.add_edge(3, 5, 10)\ng.add_edge(3, 4, 1)\ng.add_edge(5, 3, 4)\ng.add_edge(5, 2, 7)\ng.add_edge(1, 2, 7)\ng.add_edge(1, 7, 0)\ng.add_edge(2, 5, 4)\ng.add_edge(2, 0, 10)\ng.add_edge(2, 4, 8)\ng.add_edge(2, 1, 0)\ng.add_edge(7, 6, 3)\ng.add_edge(7, 1, 3)\n\nsource = 7\nsink = 5\nmax_flow = g.edmonds_karp(source, sink)\nprint(max_flow)\n```"}, "284": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 10, 6), (7, 5, 9), (7, 3, 6), (7, 4, 10), (7, 2, 0), (7, 8, 0), (7, 6, 0),\n    (10, 5, 6), (10, 0, 1), (10, 7, 4), (10, 9, 0), (10, 11, 0), (10, 6, 0),\n    (5, 2, 8), (5, 9, 8), (5, 8, 2), (5, 11, 10), (5, 0, 7), (5, 6, 9),\n    (3, 8, 2), (3, 7, 7), (3, 10, 10), (3, 6, 6), (3, 5, 6),\n    (4, 0, 8), (4, 7, 7), (4, 5, 5), (4, 9, 5), (4, 8, 5), (4, 2, 0), (4, 6, 0),\n    (0, 5, 6), (0, 9, 2), (0, 8, 2),\n    (2, 9, 7), (2, 4, 8), (2, 7, 6), (2, 5, 10), (2, 3, 10),\n    (9, 8, 7), (9, 10, 2), (9, 6, 5), (9, 2, 2), (9, 5, 0), (9, 11, 0),\n    (8, 7, 10), (8, 5, 10), (8, 9, 0), (8, 0, 0),\n    (11, 10, 2), (11, 6, 6), (11, 9, 5), (11, 5, 0),\n    (6, 9, 5), (6, 4, 1), (6, 7, 6), (6, 10, 1), (6, 5, 0),\n    (1, 11, 10), (1, 10, 4), (1, 6, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "285": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (3, 10, 3), (3, 6, 2),\n    (10, 13, 2), (10, 2, 4), (10, 9, 4), (10, 5, 5),\n    (6, 7, 10), (6, 3, 4), (6, 10, 8), (6, 2, 0),\n    (13, 6, 2), (13, 14, 10), (13, 8, 8), (13, 11, 2),\n    (13, 9, 5), (13, 3, 4), (13, 1, 10), (13, 10, 0),\n    (13, 12, 0), (2, 6, 10), (2, 10, 2), (2, 1, 3), (2, 11, 0),\n    (9, 11, 9), (5, 3, 6), (5, 13, 6), (5, 4, 6), (5, 6, 4),\n    (5, 7, 1), (5, 14, 4), (7, 12, 9), (7, 4, 3), (7, 6, 8),\n    (14, 12, 8), (14, 8, 4), (14, 10, 8), (14, 1, 8),\n    (8, 9, 3), (8, 3, 9), (8, 13, 3), (8, 0, 6),\n    (11, 9, 5), (11, 2, 8), (1, 11, 9),\n    (4, 7, 5), (4, 9, 5), (4, 5, 4), (4, 1, 1),\n    (12, 11, 10), (12, 3, 8), (12, 10, 3), (12, 13, 9), (12, 7, 0),\n    (0, 5, 7), (0, 4, 7), (0, 12, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 11 to node 13\nmax_flow = g.edmonds_karp(11, 13)\nprint(max_flow)\n```"}, "286": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 3, 4), (9, 8, 4), (9, 2, 6),\n    (3, 1, 5), (3, 6, 5), (3, 4, 3), (3, 5, 4), (3, 9, 7),\n    (8, 0, 4), (8, 7, 1), (8, 9, 10),\n    (2, 4, 7), (2, 3, 2), (2, 8, 6), (2, 0, 1),\n    (1, 9, 6), (1, 3, 3), (1, 5, 0),\n    (6, 7, 3), (6, 5, 6), (6, 3, 0),\n    (4, 9, 8), (4, 3, 2), (4, 0, 2),\n    (5, 1, 7), (5, 0, 8), (5, 7, 3), (5, 4, 1), (5, 3, 0), (5, 6, 0),\n    (0, 7, 10), (0, 4, 5), (0, 5, 6), (0, 3, 7), (0, 8, 1),\n    (7, 4, 2), (7, 9, 10), (7, 3, 3), (7, 2, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 1)\nprint(max_flow)\n```"}, "287": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity to 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (2, 4, 8), (2, 1, 5), (2, 5, 8), (2, 6, 6),\n    (4, 2, 6), (4, 8, 0),\n    (1, 9, 9), (1, 3, 5), (1, 2, 10), (1, 0, 9),\n    (5, 6, 4), (5, 3, 9), (5, 8, 3),\n    (6, 0, 6), (6, 8, 1), (6, 7, 3), (6, 5, 7), (6, 3, 0),\n    (9, 5, 1), (9, 2, 9), (9, 0, 7), (9, 1, 6), (9, 8, 0),\n    (3, 0, 1), (3, 8, 3), (3, 1, 5), (3, 5, 6), (3, 6, 4),\n    (0, 7, 10), (0, 3, 3), (0, 1, 0), (0, 6, 0), (0, 9, 0),\n    (8, 7, 9), (8, 9, 1), (8, 5, 4), (8, 4, 9), (8, 3, 0),\n    (7, 5, 7), (7, 6, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 0)\nprint(max_flow)\n```"}, "288": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (5, 11, 1), (5, 10, 10), (5, 6, 3), (5, 1, 1), (5, 12, 0),\n    (11, 7, 10), (11, 0, 7), (11, 1, 9),\n    (10, 9, 3), (10, 8, 6), (10, 4, 1), (10, 12, 2), (10, 1, 1), (10, 3, 1), (10, 5, 6), (10, 2, 3),\n    (6, 12, 5), (6, 0, 8), (6, 3, 10), (6, 5, 3), (6, 2, 6), (6, 11, 1), (6, 7, 7), (6, 9, 0),\n    (1, 2, 3), (1, 10, 9), (1, 4, 7), (1, 0, 3),\n    (7, 12, 6), (7, 0, 1),\n    (0, 1, 10), (0, 3, 8), (0, 2, 3), (0, 8, 6), (0, 12, 3),\n    (9, 8, 4), (9, 4, 8), (9, 12, 5), (9, 1, 8), (9, 10, 5), (9, 6, 2),\n    (8, 0, 2), (8, 9, 0),\n    (4, 2, 2), (4, 10, 3), (4, 7, 2), (4, 9, 0),\n    (12, 0, 1), (12, 5, 8), (12, 2, 10), (12, 11, 1), (12, 10, 8), (12, 6, 2), (12, 8, 5), (12, 4, 2), (12, 9, 0),\n    (3, 2, 6), (3, 11, 4), (3, 4, 10), (3, 12, 1),\n    (2, 11, 6), (2, 7, 2), (2, 9, 1), (2, 8, 4), (2, 4, 6), (2, 0, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 5)\nprint(max_flow)\n```"}, "289": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (9, 6, 5), (9, 10, 9), (9, 4, 6), (9, 5, 1),\n    (6, 8, 8), (6, 13, 10), (6, 7, 0),\n    (10, 0, 4), (10, 2, 9), (10, 13, 3), (10, 12, 4), (10, 1, 3), (10, 7, 1),\n    (4, 12, 2), (4, 1, 3), (4, 3, 10), (4, 6, 3), (4, 11, 8),\n    (5, 12, 3),\n    (8, 5, 5), (8, 7, 2), (8, 10, 9), (8, 11, 9), (8, 14, 0), (8, 2, 0), (8, 6, 0),\n    (13, 12, 10), (13, 14, 7),\n    (0, 12, 9), (0, 11, 3),\n    (2, 8, 4), (2, 5, 2), (2, 12, 0), (2, 11, 0),\n    (12, 1, 8), (12, 10, 9), (12, 14, 10), (12, 2, 7), (12, 13, 3), (12, 0, 0),\n    (1, 14, 4),\n    (7, 6, 6), (7, 10, 2), (7, 4, 1), (7, 14, 7), (7, 11, 0),\n    (3, 6, 5), (3, 4, 5), (3, 7, 3),\n    (11, 5, 8), (11, 2, 5), (11, 13, 3), (11, 7, 3), (11, 0, 0),\n    (14, 2, 9), (14, 6, 3), (14, 8, 7), (14, 5, 7), (14, 12, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 8)\nprint(max_flow)\n```"}, "290": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (10, 3, 10), (10, 4, 7), (10, 5, 7), (10, 11, 2),\n    (3, 8, 4), (3, 6, 8), (3, 2, 0),\n    (4, 9, 3),\n    (5, 0, 10), (5, 3, 1), (5, 4, 5),\n    (11, 2, 3),\n    (8, 13, 9), (8, 2, 2), (8, 3, 7), (8, 4, 10),\n    (6, 0, 4), (6, 2, 3), (6, 8, 3), (6, 3, 0),\n    (9, 8, 2), (9, 12, 5), (9, 5, 9), (9, 11, 4), (9, 1, 9),\n    (0, 2, 4), (0, 7, 2), (0, 1, 0), (0, 6, 0),\n    (2, 3, 4), (2, 11, 2), (2, 1, 4),\n    (1, 3, 5), (1, 5, 9), (1, 13, 8), (1, 0, 9), (1, 2, 0),\n    (13, 10, 7), (13, 6, 5),\n    (7, 10, 1), (7, 9, 7), (7, 3, 7), (7, 4, 5), (7, 12, 5),\n    (12, 6, 2), (12, 13, 6), (12, 2, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 0)\nprint(max_flow)\n```"}, "291": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (9, 5, 8), (9, 2, 10), (9, 0, 9), (9, 6, 6), (9, 4, 4), (9, 8, 0),\n    (5, 7, 10), (5, 1, 10), (5, 8, 9), (5, 3, 4),\n    (2, 6, 10), (2, 4, 6), (2, 7, 8), (2, 3, 2), (2, 9, 6), (2, 8, 0),\n    (0, 8, 9), (0, 9, 7), (0, 5, 8), (0, 2, 5), (0, 6, 0), (0, 1, 0),\n    (6, 7, 8), (6, 5, 2), (6, 0, 10), (6, 2, 0),\n    (4, 7, 5), (4, 9, 8), (4, 2, 3), (4, 6, 10), (4, 8, 0),\n    (7, 3, 7), (7, 5, 7), (7, 2, 4), (7, 4, 6),\n    (1, 8, 5), (1, 0, 1), (1, 5, 0),\n    (8, 9, 6), (8, 2, 10), (8, 4, 4),\n    (3, 2, 9), (3, 6, 10), (3, 7, 1), (3, 8, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 8 to node 0\nmax_flow = g.edmonds_karp(8, 0)\nprint(max_flow)\n```"}, "292": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse path for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Reverse capacity is initially 0\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 0, 10), (8, 9, 9), (8, 6, 2), (8, 2, 0),\n    (0, 11, 6), (0, 3, 6), (0, 8, 0),\n    (9, 11, 1),\n    (6, 5, 5), (6, 8, 8), (6, 9, 1), (6, 3, 4), (6, 2, 0),\n    (11, 4, 8),\n    (3, 5, 8), (3, 4, 3), (3, 12, 6), (3, 11, 9), (3, 6, 0), (3, 0, 0),\n    (5, 12, 2), (5, 0, 10), (5, 11, 4), (5, 6, 0), (5, 10, 0), (5, 3, 0),\n    (4, 9, 2), (4, 3, 5), (4, 2, 0),\n    (12, 0, 9), (12, 10, 7), (12, 4, 10), (12, 2, 2), (12, 3, 0),\n    (1, 2, 2),\n    (2, 12, 5), (2, 8, 1), (2, 6, 9), (2, 4, 8),\n    (10, 5, 9), (10, 11, 1), (10, 12, 0),\n    (7, 5, 7), (7, 4, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 5)\nprint(max_flow)\n```"}, "293": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (4, 7, 1), (4, 10, 0), (7, 3, 4), (3, 0, 2), (3, 5, 8), (3, 1, 6), \n    (3, 9, 1), (3, 11, 9), (3, 13, 4), (0, 2, 2), (0, 11, 10), (2, 0, 4), \n    (11, 3, 3), (11, 12, 7), (1, 12, 4), (1, 3, 5), (9, 1, 7), (9, 10, 3), \n    (13, 6, 1), (13, 0, 7), (13, 5, 10), (13, 10, 2), (13, 12, 7), (13, 9, 2), \n    (10, 13, 7), (10, 3, 6), (10, 4, 3), (10, 9, 0), (6, 5, 2), (6, 10, 2), \n    (6, 8, 2), (6, 11, 6), (8, 11, 1), (8, 13, 1), (8, 3, 4), (8, 0, 9), (8, 5, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 4)\nprint(max_flow)\n```"}, "294": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (7, 2, 1), (7, 6, 1), (7, 9, 4),\n    (2, 10, 8), (2, 7, 5),\n    (6, 1, 9), (6, 9, 5), (6, 10, 0), (6, 7, 0),\n    (9, 2, 7), (9, 6, 7), (9, 4, 5), (9, 7, 0),\n    (10, 0, 3), (10, 6, 10), (10, 4, 1), (10, 1, 6), (10, 11, 2), (10, 2, 0),\n    (1, 8, 3), (1, 5, 6), (1, 4, 1),\n    (4, 9, 3), (4, 2, 9), (4, 10, 10), (4, 6, 6), (4, 5, 10),\n    (11, 6, 1), (11, 1, 1), (11, 9, 8), (11, 7, 6),\n    (8, 0, 9), (8, 4, 1), (8, 1, 6), (8, 9, 2), (8, 11, 7), (8, 2, 1),\n    (5, 4, 6), (5, 7, 8), (5, 8, 7), (5, 10, 1), (5, 0, 5), (5, 6, 1),\n    (0, 3, 5), (0, 4, 8), (0, 9, 3), (0, 2, 2), (0, 8, 2),\n    (3, 7, 2), (3, 11, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 6\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "295": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(dict)\n\n    def add_edge(self, u, v, w):\n        self.graph[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.graph[u][v] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == t:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.graph[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.graph[u][v] -= path_flow\n                if v not in self.graph or u not in self.graph[v]:\n                    self.graph[v][u] = 0\n                self.graph[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (7, 8, 9), (7, 10, 9), (7, 1, 9), (7, 9, 2), (7, 2, 2),\n    (8, 7, 3),\n    (10, 9, 7), (10, 2, 5), (10, 5, 1), (10, 0, 10), (10, 7, 0),\n    (1, 6, 5), (1, 9, 7), (1, 2, 5), (1, 7, 10), (1, 8, 5),\n    (9, 3, 8), (9, 0, 10), (9, 6, 3), (9, 7, 0), (9, 10, 0),\n    (2, 0, 4), (2, 1, 10), (2, 6, 6),\n    (5, 3, 10), (5, 7, 6), (5, 8, 4), (5, 10, 9), (5, 1, 8), (5, 9, 9),\n    (0, 6, 6), (0, 7, 10),\n    (6, 9, 9), (6, 2, 9), (6, 0, 9),\n    (3, 6, 4), (3, 9, 4), (3, 5, 9),\n    (4, 5, 3), (4, 7, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 3)\nprint(max_flow)\n```"}, "296": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (4, 11, 3), (4, 6, 6), (11, 10, 4), (11, 7, 10), (11, 2, 8),\n    (6, 3, 9), (6, 9, 0), (10, 8, 5), (10, 7, 4), (7, 6, 6),\n    (7, 11, 8), (2, 9, 2), (3, 11, 2), (3, 9, 10), (1, 11, 6),\n    (1, 4, 1), (8, 7, 4), (8, 11, 8), (9, 6, 9), (5, 0, 1),\n    (5, 9, 10), (0, 7, 7), (0, 10, 2), (0, 5, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 9 to node 6\nmax_flow = g.edmonds_karp(9, 6)\nprint(max_flow)\n```"}, "297": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = self.capacity.get((u, v), 0) + w\n        self.capacity[(v, u)] = self.capacity.get((v, u), 0)  # Initialize reverse capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\ng.add_edge(3, 8, 1)\ng.add_edge(8, 1, 9)\ng.add_edge(8, 0, 10)\ng.add_edge(8, 9, 2)\ng.add_edge(8, 3, 9)\ng.add_edge(5, 9, 3)\ng.add_edge(5, 3, 0)\ng.add_edge(1, 0, 7)\ng.add_edge(0, 7, 6)\ng.add_edge(9, 4, 5)\ng.add_edge(9, 8, 0)\ng.add_edge(9, 5, 0)\ng.add_edge(7, 3, 7)\ng.add_edge(4, 9, 1)\ng.add_edge(2, 6, 10)\ng.add_edge(2, 9, 5)\ng.add_edge(2, 3, 4)\ng.add_edge(2, 7, 3)\ng.add_edge(6, 9, 10)\n\nmax_flow = g.edmonds_karp(8, 9)\nprint(max_flow)\n```"}, "298": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph()\nedges = [\n    (2, 9, 4), (2, 4, 1), (2, 5, 8),\n    (9, 10, 1), (9, 6, 10),\n    (4, 5, 10), (4, 0, 9), (4, 3, 3), (4, 1, 10), (4, 9, 8), (4, 8, 8), (4, 6, 0),\n    (5, 0, 9), (5, 1, 8), (5, 9, 6), (5, 10, 1),\n    (10, 0, 3), (10, 6, 2), (10, 9, 4),\n    (6, 8, 3), (6, 4, 5), (6, 10, 6), (6, 5, 5), (6, 7, 1), (6, 9, 0),\n    (0, 3, 4), (0, 9, 7), (0, 8, 6), (0, 10, 10),\n    (3, 9, 3), (3, 8, 6), (3, 10, 4),\n    (1, 9, 7), (1, 4, 7), (1, 5, 8), (1, 0, 2), (1, 3, 1), (1, 7, 1),\n    (8, 10, 5), (8, 5, 6), (8, 0, 2), (8, 3, 2), (8, 2, 9), (8, 9, 3), (8, 6, 0), (8, 4, 0), (8, 7, 0),\n    (7, 1, 9), (7, 2, 3), (7, 8, 10), (7, 4, 10), (7, 10, 5), (7, 6, 0)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 9 to node 8\nmax_flow = g.edmonds_karp(9, 8)\nprint(max_flow)\n```"}, "299": {"mini": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)  # Add reverse edge for residual graph\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0  # Initialize reverse edge capacity\n\n    def bfs(self, source, sink, parent):\n        visited = set()\n        queue = deque([source])\n        visited.add(source)\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if v not in visited and self.capacity[(u, v)] > 0:\n                    visited.add(v)\n                    parent[v] = u\n                    if v == sink:\n                        return True\n                    queue.append(v)\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = {}\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph()\nedges = [\n    (8, 6, 7), (8, 2, 2), (8, 10, 0),\n    (6, 2, 9), (6, 4, 2), (6, 8, 0),\n    (2, 9, 9), (2, 0, 8), (2, 10, 0), (2, 8, 0), (2, 6, 0),\n    (4, 2, 2), (4, 8, 6), (4, 7, 5), (4, 5, 6), (4, 10, 8), (4, 6, 0),\n    (9, 5, 5), (9, 4, 9), (9, 2, 2), (9, 1, 7), (9, 10, 0),\n    (0, 7, 3), (0, 1, 3), (0, 9, 4), (0, 6, 5), (0, 2, 0),\n    (7, 1, 1), (7, 3, 9), (7, 5, 1), (7, 10, 5), (7, 4, 10), (7, 0, 10),\n    (1, 5, 5), (1, 6, 4), (1, 10, 0), (1, 3, 0), (1, 9, 0), (1, 0, 0), (1, 7, 0),\n    (3, 5, 8), (3, 10, 3), (3, 6, 7), (3, 7, 10), (3, 1, 6),\n    (5, 10, 8), (5, 1, 8), (5, 3, 0), (5, 4, 0), (5, 9, 0),\n    (10, 2, 1), (10, 8, 10), (10, 1, 5), (10, 3, 9), (10, 9, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 1)\nprint(max_flow)\n```"}}