[{"id": 0, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(2, 3, weight=1)\nG.add_edge(2, 1, weight=8)\nG.add_edge(2, 8, weight=4)\nG.add_edge(2, 5, weight=0)\nG.add_edge(3, 13, weight=6)\nG.add_edge(1, 11, weight=1)\nG.add_edge(1, 12, weight=7)\nG.add_edge(1, 10, weight=0)\nG.add_edge(1, 2, weight=0)\nG.add_edge(8, 4, weight=9)\nG.add_edge(8, 11, weight=3)\nG.add_edge(13, 10, weight=3)\nG.add_edge(13, 9, weight=8)\nG.add_edge(13, 4, weight=1)\nG.add_edge(11, 9, weight=4)\nG.add_edge(11, 10, weight=0)\nG.add_edge(12, 8, weight=5)\nG.add_edge(5, 3, weight=1)\nG.add_edge(5, 6, weight=8)\nG.add_edge(5, 2, weight=4)\nG.add_edge(5, 0, weight=0)\nG.add_edge(6, 0, weight=5)\nG.add_edge(6, 13, weight=2)\nG.add_edge(6, 3, weight=3)\nG.add_edge(6, 9, weight=0)\nG.add_edge(0, 7, weight=7)\nG.add_edge(0, 5, weight=5)\nG.add_edge(0, 6, weight=0)\nG.add_edge(10, 1, weight=2)\nG.add_edge(10, 11, weight=8)\nG.add_edge(10, 13, weight=3)\nG.add_edge(9, 6, weight=10)\nG.add_edge(9, 4, weight=3)\nG.add_edge(9, 12, weight=7)\nG.add_edge(9, 11, weight=0)\nG.add_edge(7, 4, weight=4)\nG.add_edge(7, 11, weight=9)\nG.add_edge(7, 6, weight=2)\n\n# Calculate the maximum flow from node 10 to node 1\nmax_flow = nx.maximum_flow(G, 10, 1)\n\n# Print the maximum flow value\nprint(max_flow[0])\n```"}, {"id": 1, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 8, 7), (11, 12, 1), (11, 5, 9), (11, 4, 5), (11, 1, 2), (11, 13, 2), (11, 9, 9),\n    (8, 5, 6), (8, 7, 9), (8, 1, 8), (8, 13, 2), (8, 9, 5),\n    (12, 10, 2), (12, 13, 7), (12, 11, 9), (12, 8, 7), (12, 9, 0), (12, 3, 0), (12, 5, 0), (12, 7, 0),\n    (5, 3, 3), (5, 12, 3), (5, 8, 0),\n    (4, 1, 6), (4, 13, 8), (4, 8, 9), (4, 12, 4), (4, 5, 2),\n    (1, 6, 5), (1, 9, 9), (1, 8, 5), (1, 12, 10), (1, 3, 3), (1, 7, 8), (1, 10, 10),\n    (13, 9, 3), (13, 8, 5), (13, 3, 9),\n    (9, 2, 7), (9, 0, 6), (9, 12, 6), (9, 5, 7), (9, 7, 1), (9, 13, 0),\n    (7, 10, 7), (7, 1, 7), (7, 11, 3), (7, 2, 5), (7, 0, 6), (7, 12, 6), (7, 5, 1), (7, 3, 7), (7, 8, 0),\n    (10, 13, 10), (10, 9, 9), (10, 11, 2), (10, 2, 6), (10, 8, 9), (10, 12, 1),\n    (3, 4, 3), (3, 10, 1), (3, 9, 5), (3, 11, 5), (3, 8, 9), (3, 0, 7), (3, 12, 10), (3, 13, 0),\n    (6, 11, 9), (6, 0, 2), (6, 12, 7), (6, 4, 6), (6, 10, 5), (6, 1, 10),\n    (2, 8, 7), (2, 0, 4), (2, 12, 7), (2, 5, 7), (2, 7, 4), (2, 1, 3), (2, 6, 5),\n    (0, 12, 9), (0, 10, 9), (0, 13, 1), (0, 8, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 13 to node 12\nmax_flow = nx.maximum_flow(G, 13, 12)[0]\n\nprint(\"Maximum flow from node 13 to node 12:\", max_flow)\n```"}, {"id": 2, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(5, 0, weight=2)\nG.add_edge(5, 11, weight=9)\nG.add_edge(5, 3, weight=0)\nG.add_edge(0, 11, weight=6)\nG.add_edge(0, 1, weight=9)\nG.add_edge(0, 6, weight=10)\nG.add_edge(0, 5, weight=0)\nG.add_edge(11, 1, weight=4)\nG.add_edge(11, 3, weight=2)\nG.add_edge(1, 7, weight=5)\nG.add_edge(1, 2, weight=7)\nG.add_edge(6, 2, weight=9)\nG.add_edge(6, 9, weight=2)\nG.add_edge(6, 3, weight=8)\nG.add_edge(6, 0, weight=0)\nG.add_edge(3, 8, weight=2)\nG.add_edge(3, 2, weight=10)\nG.add_edge(3, 4, weight=8)\nG.add_edge(3, 5, weight=1)\nG.add_edge(3, 1, weight=8)\nG.add_edge(9, 11, weight=7)\nG.add_edge(9, 4, weight=5)\nG.add_edge(4, 1, weight=2)\nG.add_edge(4, 2, weight=1)\nG.add_edge(2, 3, weight=1)\nG.add_edge(2, 6, weight=6)\nG.add_edge(2, 7, weight=8)\nG.add_edge(10, 2, weight=9)\nG.add_edge(10, 0, weight=7)\nG.add_edge(7, 9, weight=7)\nG.add_edge(8, 2, weight=5)\nG.add_edge(8, 11, weight=6)\n\n# Calculate the maximum flow from node 3 to node 6\nmax_flow = nx.maximum_flow_value(G, 3, 6)\n\nprint(\"Maximum flow from node 3 to node 6:\", max_flow)\n```"}, {"id": 3, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 6, capacity=6)\nG.add_edge(0, 3, capacity=8)\nG.add_edge(0, 1, capacity=0)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(3, 6, capacity=10)\nG.add_edge(3, 1, capacity=9)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(3, 7, capacity=7)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(1, 3, capacity=2)\nG.add_edge(1, 0, capacity=10)\nG.add_edge(1, 8, capacity=0)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(7, 8, capacity=3)\nG.add_edge(7, 2, capacity=10)\nG.add_edge(7, 4, capacity=6)\nG.add_edge(8, 1, capacity=6)\nG.add_edge(8, 5, capacity=1)\nG.add_edge(8, 7, capacity=0)\nG.add_edge(5, 0, capacity=10)\nG.add_edge(5, 1, capacity=3)\nG.add_edge(5, 7, capacity=5)\nG.add_edge(2, 7, capacity=4)\n\n# Calculate the maximum flow from node 2 to node 3\nmax_flow = nx.maximum_flow_value(G, 2, 3)\n\nprint(max_flow)\n```"}, {"id": 4, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 1, capacity=8)\nG.add_edge(3, 2, capacity=2)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(3, 7, capacity=0)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(6, 3, capacity=6)\nG.add_edge(6, 4, capacity=1)\nG.add_edge(6, 0, capacity=7)\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 5, capacity=7)\nG.add_edge(0, 7, capacity=9)\nG.add_edge(0, 4, capacity=2)\nG.add_edge(0, 6, capacity=0)\nG.add_edge(5, 1, capacity=5)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 0, capacity=3)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(7, 3, capacity=10)\nG.add_edge(7, 1, capacity=1)\nG.add_edge(7, 0, capacity=10)\n\n# Calculate the maximum flow from node 4 to node 3\nmax_flow = nx.maximum_flow(G, 4, 3)[0]\n\nprint(max_flow)\n```"}, {"id": 5, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (1, 11, 2), (1, 0, 3), (1, 9, 8), (1, 2, 0),\n    (11, 8, 9),\n    (0, 10, 7), (0, 6, 0), (0, 1, 0),\n    (9, 5, 7), (9, 2, 9), (9, 1, 3),\n    (8, 2, 1), (8, 11, 6),\n    (10, 7, 10), (10, 0, 2), (10, 8, 5),\n    (5, 1, 2),\n    (2, 1, 6), (2, 8, 3), (2, 6, 6), (2, 9, 1), (2, 4, 10), (2, 10, 5),\n    (7, 2, 3), (7, 8, 6), (7, 9, 2),\n    (6, 5, 2), (6, 3, 6), (6, 11, 5), (6, 0, 10), (6, 8, 4), (6, 4, 0),\n    (4, 2, 3), (4, 6, 6),\n    (3, 6, 2), (3, 7, 4), (3, 5, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 0\nmax_flow = nx.maximum_flow(G, 4, 0)[0]\n\nprint(\"Maximum flow from node 4 to node 0:\", max_flow)\n```"}, {"id": 6, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 8, capacity=7)\nG.add_edge(2, 4, capacity=9)\nG.add_edge(2, 9, capacity=7)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 7, capacity=1)\nG.add_edge(4, 3, capacity=7)\nG.add_edge(4, 1, capacity=1)\nG.add_edge(4, 2, capacity=5)\nG.add_edge(9, 3, capacity=8)\nG.add_edge(9, 6, capacity=8)\nG.add_edge(9, 11, capacity=7)\nG.add_edge(9, 4, capacity=2)\nG.add_edge(1, 7, capacity=7)\nG.add_edge(1, 8, capacity=6)\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 2, capacity=5)\nG.add_edge(7, 5, capacity=8)\nG.add_edge(7, 11, capacity=0)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 9, capacity=2)\nG.add_edge(0, 5, capacity=2)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(0, 10, capacity=9)\nG.add_edge(5, 0, capacity=3)\nG.add_edge(5, 2, capacity=5)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(10, 11, capacity=3)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 9, capacity=0)\n\n# Calculate the maximum flow from node 9 to node 0\nmax_flow = nx.maximum_flow(G, 9, 0)[0]\n\nprint(\"Maximum flow from node 9 to node 0:\", max_flow)\n```"}, {"id": 7, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 2, 4), (10, 13, 7), (10, 4, 2), (10, 12, 4), (10, 6, 7),\n    (2, 13, 8), (2, 5, 1), (2, 4, 10), (2, 11, 10), (2, 0, 6), (2, 6, 7),\n    (13, 6, 3),\n    (4, 1, 7), (4, 12, 9), (4, 11, 2), (4, 7, 4), (4, 3, 10), (4, 10, 10),\n    (12, 8, 1), (12, 6, 2), (12, 3, 6), (12, 10, 9), (12, 2, 10), (12, 4, 5), (12, 1, 10), (12, 5, 0),\n    (6, 2, 7), (6, 13, 8), (6, 5, 9), (6, 11, 6), (6, 8, 4),\n    (5, 1, 2), (5, 12, 5), (5, 7, 7), (5, 3, 9),\n    (11, 8, 6), (11, 6, 9), (11, 13, 5), (11, 5, 3), (11, 4, 9), (11, 12, 10),\n    (0, 10, 2), (0, 9, 7),\n    (1, 0, 5), (1, 3, 2), (1, 10, 2), (1, 4, 7), (1, 5, 0),\n    (7, 0, 9), (7, 3, 7), (7, 10, 5), (7, 8, 5), (7, 9, 1), (7, 5, 0), (7, 4, 0),\n    (3, 10, 10), (3, 13, 1), (3, 4, 7), (3, 11, 10),\n    (8, 9, 1), (8, 6, 1), (8, 10, 6), (8, 5, 2), (8, 11, 2)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow_value(G, 5, 7)\n\nprint(\"Maximum flow from node 5 to node 7:\", max_flow)\n```"}, {"id": 8, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(14, 2, weight=1)\nG.add_edge(14, 9, weight=5)\nG.add_edge(14, 0, weight=7)\nG.add_edge(14, 13, weight=2)\nG.add_edge(14, 1, weight=9)\nG.add_edge(2, 11, weight=8)\nG.add_edge(2, 7, weight=6)\nG.add_edge(9, 10, weight=8)\nG.add_edge(0, 6, weight=9)\nG.add_edge(0, 8, weight=1)\nG.add_edge(0, 9, weight=6)\nG.add_edge(0, 7, weight=0)\nG.add_edge(0, 4, weight=0)\nG.add_edge(0, 11, weight=0)\nG.add_edge(0, 14, weight=0)\nG.add_edge(13, 4, weight=7)\nG.add_edge(13, 14, weight=8)\nG.add_edge(13, 7, weight=7)\nG.add_edge(13, 3, weight=0)\nG.add_edge(1, 14, weight=6)\nG.add_edge(1, 11, weight=3)\nG.add_edge(1, 6, weight=6)\nG.add_edge(11, 0, weight=6)\nG.add_edge(11, 13, weight=1)\nG.add_edge(11, 6, weight=6)\nG.add_edge(11, 1, weight=4)\nG.add_edge(11, 14, weight=3)\nG.add_edge(11, 2, weight=0)\nG.add_edge(7, 0, weight=9)\nG.add_edge(7, 3, weight=6)\nG.add_edge(7, 2, weight=5)\nG.add_edge(10, 2, weight=1)\nG.add_edge(10, 11, weight=5)\nG.add_edge(10, 8, weight=3)\nG.add_edge(6, 1, weight=9)\nG.add_edge(6, 7, weight=1)\nG.add_edge(6, 10, weight=1)\nG.add_edge(8, 7, weight=2)\nG.add_edge(8, 9, weight=10)\nG.add_edge(8, 10, weight=6)\nG.add_edge(4, 6, weight=6)\nG.add_edge(4, 7, weight=6)\nG.add_edge(4, 0, weight=2)\nG.add_edge(4, 3, weight=0)\nG.add_edge(3, 6, weight=9)\nG.add_edge(3, 13, weight=4)\nG.add_edge(3, 4, weight=8)\nG.add_edge(3, 7, weight=0)\nG.add_edge(12, 6, weight=1)\nG.add_edge(12, 9, weight=6)\nG.add_edge(5, 10, weight=10)\nG.add_edge(5, 1, weight=3)\n\n# Calculate the maximum flow from node 7 to node 0\nmax_flow = nx.maximum_flow_value(G, 7, 0)\n\nprint(\"Maximum flow from node 7 to node 0:\", max_flow)\n```"}, {"id": 9, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 6, 2), (5, 3, 3), (5, 14, 2),\n    (6, 3, 5), (6, 9, 8), (6, 14, 7), (6, 7, 10), (6, 5, 0), (6, 8, 0),\n    (3, 2, 7), (3, 8, 7), (3, 5, 0),\n    (14, 5, 8), (14, 6, 4),\n    (9, 14, 8), (9, 6, 6), (9, 10, 8), (9, 7, 0),\n    (7, 6, 2), (7, 2, 3), (7, 8, 2), (7, 10, 3), (7, 9, 8), (7, 11, 5), (7, 4, 2), (7, 13, 0),\n    (2, 13, 9), (2, 4, 3), (2, 3, 0),\n    (8, 0, 9), (8, 12, 10), (8, 13, 7), (8, 6, 10), (8, 2, 4), (8, 1, 5), (8, 3, 0),\n    (10, 12, 8), (10, 13, 5), (10, 14, 10), (10, 5, 8),\n    (11, 0, 3), (11, 14, 9), (11, 7, 7), (11, 5, 8), (11, 2, 8), (11, 3, 2),\n    (4, 2, 10), (4, 1, 8), (4, 8, 6), (4, 0, 4), (4, 13, 10),\n    (13, 7, 3), (13, 2, 2), (13, 1, 10), (13, 12, 2),\n    (1, 11, 4), (1, 0, 5), (1, 13, 6), (1, 14, 6), (1, 4, 9), (1, 7, 9),\n    (12, 6, 8), (12, 2, 6), (12, 8, 4), (12, 11, 8),\n    (0, 12, 4), (0, 14, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 14 to node 9\nmax_flow = nx.maximum_flow(G, 14, 9)[0]\n\nprint(max_flow)\n```"}, {"id": 10, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 3, capacity=4)\nG.add_edge(2, 7, capacity=9)\nG.add_edge(3, 5, capacity=9)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(7, 4, capacity=9)\nG.add_edge(7, 2, capacity=5)\nG.add_edge(5, 6, capacity=5)\nG.add_edge(5, 4, capacity=6)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(5, 0, capacity=0)\nG.add_edge(4, 0, capacity=9)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(6, 3, capacity=3)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(0, 6, capacity=4)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 5, capacity=4)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(1, 4, capacity=9)\nG.add_edge(1, 2, capacity=5)\nG.add_edge(1, 5, capacity=7)\n\n# Calculate the maximum flow from node 2 to node 6\nmax_flow = nx.maximum_flow(G, 2, 6)[0]\n\nprint(\"Maximum flow from node 2 to node 6:\", max_flow)\n```"}, {"id": 11, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 3, capacity=10)\nG.add_edge(1, 10, capacity=3)\nG.add_edge(1, 5, capacity=3)\nG.add_edge(1, 9, capacity=0)\nG.add_edge(3, 8, capacity=8)\nG.add_edge(3, 1, capacity=1)\nG.add_edge(3, 7, capacity=0)\nG.add_edge(10, 6, capacity=1)\nG.add_edge(10, 1, capacity=2)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 7, capacity=7)\nG.add_edge(10, 11, capacity=0)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(5, 1, capacity=7)\nG.add_edge(5, 0, capacity=9)\nG.add_edge(8, 10, capacity=9)\nG.add_edge(8, 11, capacity=5)\nG.add_edge(8, 6, capacity=6)\nG.add_edge(8, 1, capacity=1)\nG.add_edge(8, 3, capacity=0)\nG.add_edge(6, 8, capacity=2)\nG.add_edge(6, 5, capacity=1)\nG.add_edge(6, 10, capacity=0)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(9, 10, capacity=6)\nG.add_edge(9, 1, capacity=8)\nG.add_edge(9, 11, capacity=0)\nG.add_edge(7, 10, capacity=7)\nG.add_edge(7, 2, capacity=3)\nG.add_edge(7, 4, capacity=9)\nG.add_edge(7, 11, capacity=1)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 3, capacity=8)\nG.add_edge(7, 9, capacity=9)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(2, 0, capacity=7)\nG.add_edge(2, 10, capacity=1)\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 1, capacity=2)\nG.add_edge(0, 3, capacity=3)\nG.add_edge(0, 8, capacity=4)\nG.add_edge(11, 9, capacity=6)\nG.add_edge(11, 7, capacity=7)\nG.add_edge(11, 10, capacity=1)\nG.add_edge(11, 4, capacity=6)\nG.add_edge(4, 11, capacity=9)\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 1, capacity=1)\nG.add_edge(4, 9, capacity=10)\nG.add_edge(4, 7, capacity=0)\n\n# Calculate the maximum flow from node 11 to node 6\nmax_flow = nx.maximum_flow(G, 11, 6)[0]\n\nprint(max_flow)\n```"}, {"id": 12, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 4, 2), (3, 2, 8), (3, 8, 8), (3, 0, 8), (3, 12, 9), (3, 6, 0),\n    (4, 2, 9), (4, 8, 9), (4, 0, 2), (4, 12, 1), (4, 11, 9), (4, 3, 7), (4, 10, 0),\n    (2, 8, 10), (2, 5, 9), (2, 9, 5), (2, 1, 4), (2, 3, 2),\n    (8, 0, 9), (8, 9, 4), (8, 12, 8), (8, 3, 1), (8, 4, 10), (8, 5, 0),\n    (0, 7, 8), (0, 5, 8), (0, 12, 7), (0, 10, 3), (0, 4, 0), (0, 8, 0), (0, 11, 0), (0, 3, 0),\n    (12, 10, 4), (12, 2, 3), (12, 8, 4), (12, 7, 9), (12, 9, 3),\n    (11, 2, 6), (11, 0, 4), (11, 9, 5), (11, 10, 5), (11, 1, 1), (11, 6, 0),\n    (5, 9, 10), (5, 1, 8), (5, 4, 5), (5, 6, 8), (5, 8, 7), (5, 7, 1), (5, 10, 0),\n    (9, 10, 1), (9, 1, 5), (9, 4, 10), (9, 2, 1), (9, 8, 5),\n    (1, 11, 9), (1, 3, 6), (1, 4, 9), (1, 6, 10), (1, 5, 10),\n    (7, 9, 5), (7, 1, 3), (7, 3, 6), (7, 6, 4),\n    (10, 4, 8), (10, 6, 8), (10, 0, 2), (10, 5, 3),\n    (6, 5, 3), (6, 12, 8), (6, 1, 5), (6, 11, 10), (6, 3, 5), (6, 2, 7), (6, 10, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 0\nmax_flow = nx.maximum_flow(G, 10, 0)[0]\n\nprint(\"Maximum flow from node 10 to node 0:\", max_flow)\n```"}, {"id": 13, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 0, 2), (5, 9, 4), (5, 3, 10), (5, 12, 3),\n    (0, 9, 10), (0, 3, 2), (0, 11, 2), (0, 8, 3), (0, 6, 5), (0, 7, 9), (0, 12, 0),\n    (9, 12, 8), (9, 8, 5), (9, 6, 3), (9, 10, 4), (9, 5, 9), (9, 1, 10), (9, 0, 8),\n    (3, 12, 10), (3, 8, 4), (3, 7, 5), (3, 4, 6), (3, 9, 5),\n    (12, 8, 2), (12, 13, 7), (12, 0, 2), (12, 9, 10),\n    (11, 6, 8), (11, 5, 9), (11, 0, 1), (11, 9, 7),\n    (8, 7, 5), (8, 4, 4), (8, 12, 1), (8, 9, 0),\n    (6, 10, 9), (6, 2, 9), (6, 11, 10), (6, 0, 0), (6, 9, 0), (6, 1, 0),\n    (7, 0, 10), (7, 2, 5),\n    (10, 5, 7), (10, 7, 1), (10, 0, 9), (10, 2, 4), (10, 4, 6), (10, 9, 10), (10, 3, 8), (10, 6, 9), (10, 13, 0),\n    (1, 2, 9), (1, 6, 2), (1, 5, 7), (1, 7, 7), (1, 9, 0),\n    (4, 8, 2), (4, 10, 9), (4, 13, 2),\n    (13, 7, 7), (13, 0, 8), (13, 4, 2), (13, 8, 10), (13, 10, 5), (13, 12, 0),\n    (2, 4, 5), (2, 9, 6), (2, 12, 3), (2, 11, 8), (2, 8, 6), (2, 13, 4), (2, 7, 10), (2, 1, 8)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 12 to node 10\nmax_flow = nx.maximum_flow_value(G, 12, 10)\n\nprint(\"Maximum flow from node 12 to node 10:\", max_flow)\n```"}, {"id": 14, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 6, 5), (3, 14, 3), (3, 9, 1), (3, 2, 0),\n    (6, 0, 7), (6, 4, 1), (6, 8, 9), (6, 11, 5), (6, 5, 10), (6, 3, 5),\n    (14, 13, 5), (14, 0, 6), (14, 2, 4), (14, 5, 4), (14, 7, 9),\n    (9, 4, 7), (9, 10, 4), (9, 8, 10), (9, 2, 6), (9, 11, 8), (9, 6, 6), (9, 12, 1),\n    (0, 4, 5), (0, 10, 5), (0, 8, 3), (0, 2, 4), (0, 7, 6), (0, 12, 5), (0, 9, 4), (0, 13, 3),\n    (4, 5, 2), (4, 13, 10),\n    (8, 5, 3), (8, 7, 10), (8, 3, 10), (8, 6, 9), (8, 13, 2),\n    (11, 3, 1), (11, 6, 3), (11, 4, 3), (11, 8, 10), (11, 2, 0), (11, 9, 0),\n    (5, 7, 2), (5, 3, 4), (5, 6, 9), (5, 13, 10), (5, 8, 6), (5, 2, 10),\n    (13, 4, 10), (13, 11, 6), (13, 7, 3), (13, 3, 2), (13, 14, 7),\n    (2, 11, 2), (2, 3, 2), (2, 9, 4),\n    (7, 3, 2), (7, 6, 8), (7, 12, 1), (7, 14, 5), (7, 8, 2),\n    (10, 5, 5), (10, 6, 10), (10, 9, 9),\n    (12, 14, 8), (12, 1, 1), (12, 9, 2), (12, 13, 2), (12, 4, 9), (12, 5, 7), (12, 7, 1),\n    (1, 0, 2), (1, 3, 3)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 2 to node 11\nmax_flow = nx.maximum_flow_value(G, 2, 11)\n\nprint(\"Maximum flow from node 2 to node 11:\", max_flow)\n```"}, {"id": 15, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 6, capacity=7)\nG.add_edge(0, 3, capacity=2)\nG.add_edge(6, 7, capacity=1)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(6, 3, capacity=1)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(6, 0, capacity=7)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 6, capacity=3)\nG.add_edge(2, 5, capacity=1)\nG.add_edge(1, 5, capacity=9)\nG.add_edge(1, 2, capacity=10)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(1, 6, capacity=0)\nG.add_edge(4, 6, capacity=7)\nG.add_edge(4, 2, capacity=6)\nG.add_edge(4, 3, capacity=2)\nG.add_edge(5, 2, capacity=3)\nG.add_edge(5, 1, capacity=7)\nG.add_edge(5, 0, capacity=5)\nG.add_edge(5, 4, capacity=9)\nG.add_edge(5, 7, capacity=2)\n\n# Calculate the maximum flow from node 0 to node 7\nmax_flow = nx.maximum_flow(G, 0, 7)[0]\n\nprint(\"Maximum flow from node 0 to node 7:\", max_flow)\n```"}, {"id": 16, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (1, 2, 1), (1, 0, 2), (1, 3, 2), (1, 8, 5),\n    (2, 0, 8), (2, 9, 6), (2, 6, 2), (2, 4, 6), (2, 7, 6), (2, 5, 10), (2, 1, 0),\n    (0, 9, 2), (0, 4, 2), (0, 5, 8), (0, 1, 0),\n    (3, 6, 9), (3, 1, 8), (3, 5, 5), (3, 10, 8), (3, 9, 0),\n    (8, 0, 7), (8, 6, 9), (8, 7, 9), (8, 1, 0),\n    (9, 3, 3), (9, 8, 6), (9, 1, 3), (9, 2, 1), (9, 0, 0),\n    (6, 8, 3), (6, 1, 9), (6, 2, 6), (6, 3, 2),\n    (4, 8, 6), (4, 10, 1), (4, 0, 10), (4, 9, 4), (4, 6, 5), (4, 2, 0),\n    (7, 10, 8), (7, 0, 3), (7, 3, 10), (7, 4, 6), (7, 8, 0),\n    (5, 8, 9), (5, 1, 7),\n    (10, 2, 10), (10, 4, 8), (10, 3, 0), (10, 7, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 1 to node 10\nmax_flow = nx.maximum_flow(G, 1, 10)[0]\n\nprint(\"Maximum flow from node 1 to node 10:\", max_flow)\n```"}, {"id": 17, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 6, capacity=8)\nG.add_edge(5, 1, capacity=3)\nG.add_edge(1, 2, capacity=6)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(2, 4, capacity=3)\nG.add_edge(7, 0, capacity=9)\nG.add_edge(7, 3, capacity=3)\nG.add_edge(0, 3, capacity=9)\nG.add_edge(0, 1, capacity=8)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(4, 6, capacity=1)\n\n# Calculate the maximum flow from node 0 to node 3\nmax_flow = nx.maximum_flow_value(G, 0, 3)\n\nprint(\"Maximum flow from node 0 to node 3:\", max_flow)\n```"}, {"id": 18, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 0, capacity=6)\nG.add_edge(2, 8, capacity=1)\nG.add_edge(2, 1, capacity=7)\nG.add_edge(2, 7, capacity=0)\nG.add_edge(0, 8, capacity=2)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(8, 7, capacity=6)\nG.add_edge(8, 1, capacity=1)\nG.add_edge(8, 9, capacity=9)\nG.add_edge(8, 0, capacity=9)\nG.add_edge(8, 5, capacity=0)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 2, capacity=6)\nG.add_edge(1, 0, capacity=1)\nG.add_edge(1, 3, capacity=0)\nG.add_edge(7, 3, capacity=5)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(9, 7, capacity=5)\nG.add_edge(9, 8, capacity=0)\nG.add_edge(5, 0, capacity=6)\nG.add_edge(5, 8, capacity=9)\nG.add_edge(5, 4, capacity=8)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 7, capacity=2)\nG.add_edge(6, 5, capacity=4)\nG.add_edge(6, 2, capacity=9)\nG.add_edge(6, 8, capacity=5)\nG.add_edge(6, 7, capacity=1)\nG.add_edge(6, 3, capacity=2)\nG.add_edge(6, 1, capacity=6)\n\n# Calculate the maximum flow from node 3 to node 9\nmax_flow = nx.maximum_flow_value(G, 3, 9)\n\nprint(\"Maximum flow from node 3 to node 9:\", max_flow)\n```"}, {"id": 19, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 7, capacity=4)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(6, 0, capacity=8)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(3, 8, capacity=0)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(8, 0, capacity=6)\nG.add_edge(8, 6, capacity=0)\nG.add_edge(4, 2, capacity=10)\nG.add_edge(4, 6, capacity=2)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 5, capacity=3)\nG.add_edge(2, 1, capacity=2)\nG.add_edge(2, 4, capacity=1)\nG.add_edge(2, 9, capacity=1)\nG.add_edge(9, 7, capacity=1)\nG.add_edge(9, 5, capacity=2)\n\n# Calculate the maximum flow from node 6 to node 3\nmax_flow = nx.maximum_flow(G, 6, 3)[0]\n\nprint(\"Maximum flow from node 6 to node 3:\", max_flow)\n```"}, {"id": 20, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 7, capacity=7)\nG.add_edge(7, 0, capacity=9)\nG.add_edge(0, 6, capacity=10)\nG.add_edge(4, 0, capacity=3)\nG.add_edge(6, 3, capacity=5)\nG.add_edge(6, 4, capacity=7)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(3, 6, capacity=0)\nG.add_edge(5, 7, capacity=5)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(2, 6, capacity=3)\nG.add_edge(2, 3, capacity=6)\n\n# Calculate the maximum flow from node 2 to node 3\nmax_flow = nx.maximum_flow(G, 2, 3)[0]\n\nprint(\"Maximum flow from node 2 to node 3:\", max_flow)\n```"}, {"id": 21, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (2, 1, 1), (2, 6, 2), (2, 7, 8), (2, 12, 10), (2, 11, 7),\n    (1, 10, 4), (1, 6, 3), (1, 7, 9), (1, 8, 6), (1, 5, 5), (1, 0, 0),\n    (6, 13, 5), (6, 2, 2), (6, 10, 6),\n    (7, 3, 2), (7, 12, 4), (7, 11, 6), (7, 0, 6), (7, 9, 10), (7, 1, 7),\n    (12, 6, 9), (12, 13, 2),\n    (11, 6, 5), (11, 12, 9),\n    (10, 13, 1), (10, 5, 8),\n    (8, 11, 5), (8, 2, 2), (8, 0, 3), (8, 3, 6), (8, 1, 0),\n    (5, 11, 2), (5, 7, 4), (5, 13, 7), (5, 8, 10),\n    (13, 4, 6), (13, 11, 6), (13, 6, 1),\n    (3, 11, 2), (3, 7, 0), (3, 8, 0),\n    (0, 1, 7), (0, 7, 5), (0, 5, 2), (0, 11, 6), (0, 2, 8),\n    (9, 1, 5), (9, 10, 9), (9, 7, 3), (9, 12, 4),\n    (4, 10, 7), (4, 8, 2)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 3\nmax_flow = nx.maximum_flow_value(G, 0, 3)\n\nprint(\"Maximum flow from node 0 to node 3:\", max_flow)\n```"}, {"id": 22, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 8, capacity=9)\nG.add_edge(7, 0, capacity=2)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(0, 3, capacity=3)\nG.add_edge(1, 8, capacity=10)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(4, 5, capacity=9)\nG.add_edge(4, 1, capacity=7)\nG.add_edge(5, 1, capacity=9)\nG.add_edge(5, 0, capacity=2)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(2, 6, capacity=7)\nG.add_edge(2, 7, capacity=10)\nG.add_edge(2, 8, capacity=7)\nG.add_edge(2, 4, capacity=9)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(6, 7, capacity=8)\nG.add_edge(6, 4, capacity=9)\n\n# Calculate the maximum flow from node 0 to node 1\nmax_flow = nx.maximum_flow_value(G, 0, 1)\n\nprint(\"Maximum flow from node 0 to node 1:\", max_flow)\n```"}, {"id": 23, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 11, 4), (0, 3, 2), (0, 2, 9), (0, 9, 0),\n    (11, 3, 6), (11, 2, 10), (11, 5, 6), (11, 0, 10), (11, 7, 3), (11, 9, 0), (11, 1, 0),\n    (3, 2, 7), (3, 10, 9), (3, 9, 0),\n    (2, 8, 4), (2, 0, 6), (2, 7, 1), (2, 11, 5), (2, 9, 2), (2, 4, 1), (2, 6, 1), (2, 3, 8),\n    (5, 4, 3), (5, 1, 3), (5, 6, 3), (5, 3, 8), (5, 2, 9), (5, 8, 10),\n    (7, 2, 9), (7, 5, 8),\n    (10, 2, 6), (10, 8, 6),\n    (8, 5, 1), (8, 0, 6), (8, 10, 9), (8, 6, 7),\n    (9, 3, 7), (9, 0, 4), (9, 10, 7), (9, 11, 8),\n    (4, 5, 5), (4, 10, 1), (4, 7, 3), (4, 9, 4),\n    (6, 3, 8), (6, 9, 1), (6, 4, 3), (6, 1, 2), (6, 2, 0),\n    (1, 6, 10), (1, 8, 2), (1, 0, 4), (1, 10, 5), (1, 7, 1), (1, 11, 1), (1, 9, 7), (1, 4, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 11\nmax_flow = nx.maximum_flow_value(G, 9, 11)\n\nprint(\"Maximum flow from node 9 to node 11:\", max_flow)\n```"}, {"id": 24, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 5, 6), (0, 1, 6), (0, 10, 5), (0, 4, 3),\n    (5, 7, 5), (5, 2, 6),\n    (1, 10, 1), (1, 4, 8), (1, 12, 5), (1, 2, 5),\n    (10, 5, 7), (10, 12, 1), (10, 7, 2), (10, 8, 2), (10, 2, 0),\n    (4, 2, 2),\n    (7, 8, 5), (7, 2, 2), (7, 1, 10), (7, 10, 2), (7, 5, 8), (7, 12, 1), (7, 9, 6),\n    (2, 1, 6), (2, 10, 6), (2, 4, 6), (2, 3, 8),\n    (12, 9, 1), (12, 1, 1), (12, 10, 4), (12, 6, 3), (12, 3, 4),\n    (8, 6, 10), (8, 0, 10), (8, 11, 6), (8, 9, 7), (8, 7, 8),\n    (11, 5, 7), (11, 12, 10), (11, 7, 3), (11, 8, 1), (11, 1, 1), (11, 10, 7), (11, 4, 4), (11, 3, 2), (11, 0, 2),\n    (3, 0, 9), (3, 8, 8), (3, 6, 4),\n    (9, 8, 4), (9, 6, 5), (9, 3, 1), (9, 0, 8), (9, 5, 7), (9, 12, 10), (9, 7, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 9\nmax_flow = nx.maximum_flow_value(G, 4, 9)\n\nprint(\"Maximum flow from node 4 to node 9:\", max_flow)\n```"}, {"id": 25, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 3, capacity=8)\nG.add_edge(2, 4, capacity=4)\nG.add_edge(2, 1, capacity=0)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(3, 7, capacity=8)\nG.add_edge(3, 1, capacity=0)\nG.add_edge(4, 6, capacity=1)\nG.add_edge(4, 5, capacity=5)\nG.add_edge(4, 7, capacity=2)\nG.add_edge(4, 2, capacity=0)\nG.add_edge(6, 0, capacity=8)\nG.add_edge(6, 7, capacity=8)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(7, 3, capacity=5)\nG.add_edge(7, 5, capacity=1)\nG.add_edge(5, 0, capacity=4)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 3, capacity=5)\nG.add_edge(0, 5, capacity=0)\nG.add_edge(0, 6, capacity=0)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 5, capacity=3)\nG.add_edge(1, 0, capacity=10)\n\n# Calculate the maximum flow from node 1 to node 0\nmax_flow = nx.maximum_flow(G, 1, 0)[0]\n\nprint(\"Maximum flow from node 1 to node 0:\", max_flow)\n```"}, {"id": 26, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 6, capacity=8)\nG.add_edge(4, 5, capacity=7)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(7, 5, capacity=5)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(6, 4, capacity=2)\nG.add_edge(5, 4, capacity=2)\nG.add_edge(5, 0, capacity=7)\nG.add_edge(5, 7, capacity=6)\nG.add_edge(5, 6, capacity=5)\nG.add_edge(2, 6, capacity=9)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 7, capacity=8)\nG.add_edge(3, 0, capacity=4)\nG.add_edge(3, 6, capacity=1)\nG.add_edge(0, 6, capacity=6)\nG.add_edge(1, 4, capacity=5)\nG.add_edge(1, 0, capacity=2)\n\n# Calculate the maximum flow from node 1 to node 2\nmax_flow = nx.maximum_flow(G, 1, 2)[0]\n\nprint(\"Maximum flow from node 1 to node 2:\", max_flow)\n```"}, {"id": 27, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 1, capacity=3)\nG.add_edge(5, 4, capacity=6)\nG.add_edge(5, 7, capacity=3)\nG.add_edge(5, 6, capacity=2)\nG.add_edge(1, 4, capacity=9)\nG.add_edge(1, 2, capacity=8)\nG.add_edge(1, 7, capacity=6)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 3, capacity=4)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 8, capacity=8)\nG.add_edge(6, 7, capacity=8)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(2, 7, capacity=3)\nG.add_edge(2, 5, capacity=10)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 6, capacity=0)\nG.add_edge(0, 4, capacity=3)\nG.add_edge(0, 7, capacity=4)\nG.add_edge(3, 2, capacity=6)\nG.add_edge(3, 8, capacity=9)\nG.add_edge(3, 7, capacity=4)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(8, 5, capacity=9)\nG.add_edge(8, 1, capacity=1)\nG.add_edge(8, 0, capacity=3)\nG.add_edge(8, 3, capacity=6)\n\n# Calculate the maximum flow from node 0 to node 2\nmax_flow = nx.maximum_flow(G, 0, 2)[0]\n\nprint(\"Maximum flow from node 0 to node 2:\", max_flow)\n```"}, {"id": 28, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 10, capacity=4)\nG.add_edge(2, 5, capacity=1)\nG.add_edge(2, 8, capacity=9)\n\nG.add_edge(8, 7, capacity=10)\nG.add_edge(8, 10, capacity=7)\nG.add_edge(8, 6, capacity=5)\nG.add_edge(8, 4, capacity=5)\nG.add_edge(8, 9, capacity=3)\nG.add_edge(8, 2, capacity=0)\n\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 4, capacity=6)\nG.add_edge(7, 9, capacity=10)\n\nG.add_edge(10, 5, capacity=2)\nG.add_edge(10, 6, capacity=3)\nG.add_edge(10, 9, capacity=6)\nG.add_edge(10, 2, capacity=0)\nG.add_edge(10, 8, capacity=0)\n\nG.add_edge(6, 8, capacity=3)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(6, 0, capacity=1)\n\nG.add_edge(4, 9, capacity=7)\nG.add_edge(4, 1, capacity=9)\nG.add_edge(4, 0, capacity=1)\n\nG.add_edge(9, 8, capacity=10)\nG.add_edge(9, 7, capacity=6)\nG.add_edge(9, 5, capacity=1)\nG.add_edge(9, 6, capacity=6)\nG.add_edge(9, 4, capacity=1)\n\nG.add_edge(0, 6, capacity=7)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 9, capacity=9)\nG.add_edge(0, 8, capacity=8)\nG.add_edge(0, 5, capacity=9)\nG.add_edge(0, 3, capacity=8)\n\nG.add_edge(1, 0, capacity=4)\n\n# Calculate the maximum flow from node 2 to node 10\nmax_flow = nx.maximum_flow_value(G, 2, 10)\nprint(max_flow)\n```"}, {"id": 29, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (0, 1, 6), (0, 2, 9), (1, 2, 4), (1, 7, 2), (2, 3, 10), (2, 10, 1), (2, 1, 7), (2, 5, 0),\n    (7, 4, 9), (7, 1, 6), (7, 9, 6), (7, 3, 7), (3, 7, 10), (3, 4, 9), (3, 2, 4), (3, 8, 0),\n    (10, 8, 9), (10, 4, 4), (4, 10, 8), (4, 6, 6), (4, 9, 5), (4, 8, 7), (4, 7, 0),\n    (9, 8, 10), (9, 5, 1), (9, 4, 4), (9, 6, 8), (9, 7, 0), (6, 9, 1), (6, 8, 7), (6, 7, 1),\n    (6, 5, 1), (6, 4, 7), (6, 10, 5), (6, 1, 1), (8, 1, 4), (8, 3, 7), (8, 4, 0),\n    (5, 4, 8), (5, 0, 9), (5, 2, 5), (5, 9, 0), (5, 6, 0), (11, 7, 7), (11, 5, 10), (11, 1, 4),\n    (11, 6, 1), (11, 2, 7), (11, 9, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 3\nmax_flow = nx.maximum_flow(G, 7, 3)[0]\n\nprint(\"Maximum flow from node 7 to node 3:\", max_flow)\n```"}, {"id": 30, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(5, 9, weight=3)\nG.add_edge(5, 2, weight=7)\nG.add_edge(5, 7, weight=1)\nG.add_edge(5, 6, weight=5)\nG.add_edge(9, 2, weight=2)\nG.add_edge(9, 3, weight=9)\nG.add_edge(9, 0, weight=5)\nG.add_edge(9, 4, weight=6)\nG.add_edge(2, 6, weight=8)\nG.add_edge(2, 3, weight=9)\nG.add_edge(2, 4, weight=3)\nG.add_edge(7, 3, weight=10)\nG.add_edge(7, 1, weight=7)\nG.add_edge(7, 4, weight=1)\nG.add_edge(7, 9, weight=2)\nG.add_edge(6, 5, weight=5)\nG.add_edge(6, 7, weight=6)\nG.add_edge(3, 0, weight=2)\nG.add_edge(3, 4, weight=3)\nG.add_edge(3, 9, weight=2)\nG.add_edge(3, 2, weight=1)\nG.add_edge(0, 1, weight=4)\nG.add_edge(0, 4, weight=1)\nG.add_edge(0, 9, weight=10)\nG.add_edge(0, 7, weight=2)\nG.add_edge(4, 8, weight=6)\nG.add_edge(4, 2, weight=5)\nG.add_edge(4, 1, weight=4)\nG.add_edge(4, 3, weight=0)\nG.add_edge(1, 4, weight=1)\nG.add_edge(1, 5, weight=9)\nG.add_edge(1, 2, weight=7)\nG.add_edge(1, 7, weight=2)\nG.add_edge(1, 6, weight=1)\nG.add_edge(1, 3, weight=1)\nG.add_edge(8, 9, weight=8)\nG.add_edge(8, 2, weight=2)\nG.add_edge(8, 7, weight=8)\nG.add_edge(8, 6, weight=5)\nG.add_edge(8, 0, weight=6)\nG.add_edge(8, 1, weight=2)\nG.add_edge(8, 5, weight=1)\nG.add_edge(8, 4, weight=0)\n\n# Calculate the maximum flow from node 2 to node 8\nmax_flow = nx.maximum_flow(G, 2, 8)[0]\n\nprint(\"Maximum flow from node 2 to node 8:\", max_flow)\n```"}, {"id": 31, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 6, 1), (5, 8, 3), (5, 9, 2), (5, 4, 8), (5, 1, 0), (5, 7, 0), (5, 3, 0),\n    (6, 9, 10), (6, 4, 7), (6, 1, 8), (6, 2, 0),\n    (8, 7, 5), (8, 3, 5), (8, 2, 7), (8, 9, 5), (8, 4, 5), (8, 5, 7), (8, 1, 1),\n    (9, 4, 6), (9, 5, 8), (9, 1, 2), (9, 7, 5), (9, 2, 6), (9, 0, 1),\n    (4, 5, 9), (4, 1, 6), (4, 6, 4), (4, 7, 4), (4, 2, 7), (4, 9, 1),\n    (1, 6, 3), (1, 7, 5), (1, 3, 10), (1, 2, 3), (1, 9, 1), (1, 4, 3), (1, 5, 6),\n    (7, 2, 5), (7, 0, 4), (7, 5, 5), (7, 6, 7), (7, 8, 7), (7, 9, 0),\n    (3, 5, 9), (3, 1, 1), (3, 6, 6), (3, 7, 4), (3, 0, 0),\n    (2, 6, 7), (2, 9, 0),\n    (0, 9, 7), (0, 6, 4), (0, 3, 7), (0, 2, 2)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 5\nmax_flow = nx.maximum_flow(G, 9, 5)[0]\n\nprint(\"Maximum flow from node 9 to node 5:\", max_flow)\n```"}, {"id": 32, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 6, 2), (0, 14, 4), (0, 4, 8), (0, 12, 0), (0, 11, 0),\n    (6, 10, 5), (6, 8, 7), (6, 7, 10), (6, 12, 10), (6, 9, 4), (6, 2, 0),\n    (14, 7, 3),\n    (4, 7, 8), (4, 5, 7), (4, 12, 3), (4, 11, 9), (4, 9, 3), (4, 1, 5), (4, 3, 5), (4, 6, 6), (4, 2, 9), (4, 0, 0), (4, 13, 0),\n    (10, 9, 2), (10, 14, 10),\n    (8, 6, 2), (8, 10, 4), (8, 2, 6),\n    (7, 5, 4), (7, 9, 10), (7, 6, 1), (7, 14, 3), (7, 2, 2), (7, 13, 2), (7, 12, 0),\n    (12, 0, 3), (12, 11, 4), (12, 1, 3), (12, 2, 8), (12, 13, 10), (12, 7, 8),\n    (9, 10, 4), (9, 2, 10), (9, 4, 9), (9, 13, 9), (9, 7, 5), (9, 5, 8), (9, 6, 0),\n    (5, 0, 2), (5, 14, 3), (5, 10, 8), (5, 4, 1), (5, 7, 0),\n    (11, 1, 5), (11, 2, 3), (11, 13, 2), (11, 0, 10), (11, 12, 0),\n    (1, 14, 9), (1, 4, 1), (1, 13, 2), (1, 11, 10), (1, 12, 0),\n    (3, 6, 4), (3, 14, 6), (3, 10, 5), (3, 2, 6), (3, 4, 5), (3, 8, 4), (3, 1, 1), (3, 13, 0),\n    (2, 13, 4), (2, 12, 10), (2, 6, 4), (2, 14, 1), (2, 10, 8)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 12 to node 4\nmax_flow = nx.maximum_flow_value(G, 12, 4)\n\nprint(\"Maximum flow from node 12 to node 4:\", max_flow)\n```"}, {"id": 33, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 6, 7), (10, 3, 4), (10, 5, 10), (10, 2, 4), (10, 7, 1), (10, 8, 3),\n    (6, 3, 3), (6, 4, 9), (6, 0, 0),\n    (3, 4, 8), (3, 8, 9), (3, 1, 1), (3, 0, 0), (3, 6, 0),\n    (5, 8, 1), (5, 10, 7), (5, 6, 3), (5, 0, 0),\n    (2, 9, 6), (2, 5, 4), (2, 0, 5),\n    (7, 10, 7), (7, 0, 9), (7, 2, 5), (7, 8, 0),\n    (8, 10, 10), (8, 1, 10), (8, 5, 4), (8, 4, 1), (8, 7, 8), (8, 3, 0),\n    (4, 3, 5),\n    (1, 5, 8), (1, 10, 7), (1, 6, 5),\n    (9, 5, 1), (9, 0, 3), (9, 6, 8),\n    (0, 2, 1), (0, 6, 8), (0, 3, 4), (0, 5, 6)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 7\nmax_flow = nx.maximum_flow_value(G, 0, 7)\n\nprint(\"Maximum flow from node 0 to node 7:\", max_flow)\n```"}, {"id": 34, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 2, 2), (7, 0, 10), (7, 12, 7), (7, 5, 3), (7, 9, 5), (7, 11, 3),\n    (2, 0, 4), (2, 3, 9), (2, 5, 9), (2, 9, 10), (2, 4, 3), (2, 7, 3),\n    (0, 3, 7), (0, 12, 2), (0, 5, 5), (0, 4, 7), (0, 7, 4), (0, 1, 10), (0, 2, 0),\n    (12, 11, 4), (12, 6, 2), (12, 4, 2), (12, 2, 3), (12, 0, 1), (12, 3, 0),\n    (5, 9, 5), (5, 6, 9), (5, 4, 9), (5, 2, 9), (5, 13, 9), (5, 10, 1), (5, 0, 0), (5, 7, 0),\n    (9, 11, 9), (9, 7, 8), (9, 2, 3), (9, 3, 4),\n    (11, 1, 10), (11, 2, 3), (11, 0, 7), (11, 3, 4), (11, 13, 1), (11, 8, 9), (11, 9, 7), (11, 12, 0),\n    (3, 12, 8), (3, 6, 5), (3, 1, 1), (3, 2, 0),\n    (4, 1, 1), (4, 2, 9), (4, 0, 5), (4, 12, 6), (4, 9, 6),\n    (1, 0, 5), (1, 12, 7), (1, 9, 3), (1, 11, 9), (1, 4, 4), (1, 7, 4),\n    (6, 4, 3), (6, 7, 10), (6, 1, 9), (6, 12, 2), (6, 8, 7), (6, 11, 2), (6, 3, 0), (6, 5, 0), (6, 13, 0),\n    (13, 5, 5), (13, 9, 9), (13, 6, 8), (13, 3, 7), (13, 12, 8), (13, 11, 0),\n    (10, 8, 6), (10, 5, 3), (10, 9, 5), (10, 11, 7), (10, 2, 5), (10, 0, 2),\n    (8, 5, 8), (8, 11, 9), (8, 6, 9), (8, 7, 8), (8, 3, 5), (8, 10, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 6\nmax_flow = nx.maximum_flow_value(G, 2, 6)\n\nprint(\"Maximum flow from node 2 to node 6:\", max_flow)\n```"}, {"id": 35, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=7)\nG.add_edge(4, 5, capacity=9)\nG.add_edge(4, 1, capacity=4)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(7, 3, capacity=6)\nG.add_edge(5, 0, capacity=3)\nG.add_edge(5, 2, capacity=8)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(1, 0, capacity=1)\nG.add_edge(1, 4, capacity=8)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(1, 5, capacity=7)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(0, 6, capacity=7)\nG.add_edge(0, 7, capacity=5)\nG.add_edge(0, 5, capacity=1)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(2, 6, capacity=1)\n\n# Calculate the maximum flow from node 3 to node 4\nmax_flow = nx.maximum_flow(G, 3, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 36, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 12, 5), (4, 6, 5),\n    (12, 6, 5), (12, 1, 2), (12, 9, 4), (12, 5, 10), (12, 3, 3), (12, 7, 8), (12, 10, 0), (12, 8, 0),\n    (6, 0, 0), (6, 13, 0), (6, 12, 0),\n    (1, 9, 10), (1, 10, 3), (1, 13, 1), (1, 2, 0),\n    (9, 11, 10), (9, 7, 7), (9, 1, 10),\n    (5, 2, 6), (5, 0, 10), (5, 8, 1), (5, 1, 10),\n    (3, 14, 7), (3, 8, 6), (3, 13, 5), (3, 12, 9), (3, 1, 7),\n    (7, 2, 10), (7, 10, 3),\n    (14, 7, 5), (14, 13, 1), (14, 0, 1), (14, 3, 2), (14, 2, 0),\n    (13, 6, 7), (13, 1, 4), (13, 10, 7), (13, 0, 3), (13, 7, 7), (13, 2, 0), (13, 14, 0), (13, 3, 0),\n    (0, 14, 7), (0, 13, 1), (0, 12, 1), (0, 6, 1), (0, 2, 0),\n    (2, 0, 2), (2, 14, 10), (2, 8, 7), (2, 13, 3), (2, 1, 6), (2, 9, 2), (2, 7, 0),\n    (10, 3, 10), (10, 7, 6), (10, 12, 6), (10, 1, 5), (10, 9, 7),\n    (8, 12, 10), (8, 1, 7), (8, 9, 6), (8, 5, 9), (8, 0, 4), (8, 11, 5), (8, 3, 6), (8, 14, 1), (8, 2, 0),\n    (11, 8, 10), (11, 9, 6), (11, 5, 3), (11, 0, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 6\nmax_flow = nx.maximum_flow_value(G, 7, 6)\n\nprint(max_flow)\n```"}, {"id": 37, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 8, 2), (10, 5, 7), (10, 0, 1), (10, 3, 0),\n    (8, 5, 2), (8, 1, 6), (8, 4, 4), (8, 3, 0), (8, 10, 0),\n    (0, 5, 10), (0, 1, 3), (0, 10, 0),\n    (1, 4, 9), (1, 9, 6), (1, 7, 6), (1, 8, 0), (1, 6, 0), (1, 0, 0),\n    (4, 3, 1), (4, 8, 6), (4, 1, 4),\n    (9, 8, 10), (9, 5, 3), (9, 10, 4),\n    (3, 7, 1), (3, 8, 1), (3, 2, 2), (3, 10, 9),\n    (7, 5, 10), (7, 2, 9), (7, 6, 10), (7, 3, 0),\n    (2, 6, 7), (2, 4, 6), (2, 3, 0),\n    (6, 1, 4), (6, 7, 5), (6, 8, 2), (6, 5, 6), (6, 2, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 1\nmax_flow = nx.maximum_flow(G, 3, 1)[0]\n\nprint(\"Maximum flow from node 3 to node 1:\", max_flow)\n```"}, {"id": 38, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 0, capacity=2)\nG.add_edge(8, 5, capacity=8)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 3, capacity=1)\nG.add_edge(0, 7, capacity=9)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 7, capacity=4)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(4, 2, capacity=3)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(3, 0, capacity=1)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 4, capacity=8)\nG.add_edge(3, 8, capacity=0)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 0, capacity=0)\nG.add_edge(2, 0, capacity=1)\nG.add_edge(2, 8, capacity=7)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(6, 0, capacity=6)\nG.add_edge(1, 2, capacity=10)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(1, 7, capacity=0)\n\n# Calculate the maximum flow from node 8 to node 5\nmax_flow = nx.maximum_flow(G, 8, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 39, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 3, 6), (0, 4, 8), (0, 1, 5), (0, 2, 1),\n    (3, 9, 1), (3, 11, 9), (3, 1, 5), (3, 0, 2), (3, 4, 0),\n    (4, 1, 4), (4, 2, 5), (4, 3, 9), (4, 8, 0), (4, 7, 0),\n    (1, 2, 7), (1, 10, 10), (1, 6, 9), (1, 8, 7), (1, 5, 0), (1, 11, 0), (1, 4, 0), (1, 3, 0),\n    (2, 6, 3), (2, 9, 1), (2, 5, 5), (2, 11, 5), (2, 8, 4),\n    (9, 11, 9), (9, 2, 9), (9, 10, 9), (9, 3, 5), (9, 6, 2),\n    (11, 8, 4), (11, 1, 5), (11, 2, 7), (11, 10, 2), (11, 3, 6), (11, 5, 0), (11, 6, 0),\n    (10, 9, 8), (10, 8, 8), (10, 1, 9), (10, 5, 0), (10, 7, 0),\n    (6, 5, 4), (6, 11, 7), (6, 2, 1), (6, 7, 2), (6, 10, 3), (6, 3, 3),\n    (8, 4, 1), (8, 1, 2), (8, 3, 7), (8, 5, 0),\n    (5, 11, 3), (5, 8, 3), (5, 1, 4), (5, 7, 10), (5, 10, 7),\n    (7, 10, 2), (7, 6, 1), (7, 5, 8), (7, 4, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 1\nmax_flow = nx.maximum_flow(G, 5, 1)[0]\n\nprint(\"Maximum flow from node 5 to node 1:\", max_flow)\n```"}, {"id": 40, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 8, 1), (4, 2, 3),\n    (8, 10, 3), (8, 13, 1), (8, 5, 4), (8, 7, 9), (8, 11, 3), (8, 12, 0),\n    (2, 10, 3), (2, 6, 10), (2, 1, 1), (2, 11, 2), (2, 9, 4), (2, 4, 5),\n    (10, 13, 8), (10, 5, 8), (10, 1, 3), (10, 9, 4), (10, 4, 4), (10, 0, 6),\n    (13, 7, 1), (13, 12, 7), (13, 8, 9), (13, 0, 6), (13, 10, 4), (13, 3, 1),\n    (5, 9, 2), (5, 13, 4),\n    (7, 12, 9), (7, 11, 3), (7, 10, 2), (7, 5, 8), (7, 1, 9),\n    (11, 0, 10), (11, 2, 3), (11, 10, 3), (11, 3, 6), (11, 13, 4), (11, 5, 7), (11, 1, 10), (11, 12, 5), (11, 8, 0),\n    (6, 7, 9), (6, 11, 4), (6, 8, 4), (6, 10, 10), (6, 13, 4),\n    (1, 7, 9), (1, 11, 7), (1, 9, 6), (1, 8, 7), (1, 13, 1), (1, 5, 9),\n    (9, 2, 10), (9, 13, 2), (9, 1, 3), (9, 12, 6), (9, 11, 7),\n    (0, 5, 3), (0, 7, 3), (0, 9, 6), (0, 4, 4),\n    (12, 11, 4), (12, 8, 10), (12, 2, 7), (12, 13, 2), (12, 1, 9), (12, 7, 9),\n    (3, 1, 3), (3, 12, 3), (3, 9, 10), (3, 4, 4), (3, 2, 6), (3, 11, 0), (3, 13, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 12 to node 3\nmax_flow = nx.maximum_flow_value(G, 12, 3)\n\nprint(\"Maximum flow from node 12 to node 3:\", max_flow)\n```"}, {"id": 41, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(7, 9, weight=8)\nG.add_edge(7, 4, weight=1)\nG.add_edge(7, 11, weight=0)\nG.add_edge(9, 5, weight=10)\nG.add_edge(9, 0, weight=5)\nG.add_edge(9, 3, weight=3)\nG.add_edge(9, 11, weight=2)\nG.add_edge(4, 7, weight=7)\nG.add_edge(4, 2, weight=6)\nG.add_edge(4, 8, weight=9)\nG.add_edge(4, 10, weight=5)\nG.add_edge(4, 11, weight=0)\nG.add_edge(5, 0, weight=6)\nG.add_edge(5, 11, weight=9)\nG.add_edge(5, 6, weight=0)\nG.add_edge(0, 5, weight=4)\nG.add_edge(3, 1, weight=5)\nG.add_edge(3, 11, weight=7)\nG.add_edge(3, 5, weight=8)\nG.add_edge(3, 10, weight=3)\nG.add_edge(3, 4, weight=10)\nG.add_edge(3, 6, weight=0)\nG.add_edge(3, 9, weight=0)\nG.add_edge(11, 9, weight=5)\nG.add_edge(11, 4, weight=1)\nG.add_edge(11, 7, weight=2)\nG.add_edge(11, 6, weight=7)\nG.add_edge(11, 8, weight=6)\nG.add_edge(11, 5, weight=0)\nG.add_edge(2, 1, weight=3)\nG.add_edge(2, 0, weight=9)\nG.add_edge(2, 4, weight=1)\nG.add_edge(10, 0, weight=4)\nG.add_edge(10, 2, weight=2)\nG.add_edge(10, 6, weight=5)\nG.add_edge(10, 1, weight=8)\nG.add_edge(10, 9, weight=9)\nG.add_edge(1, 5, weight=3)\nG.add_edge(1, 2, weight=8)\nG.add_edge(1, 3, weight=0)\nG.add_edge(6, 3, weight=1)\nG.add_edge(6, 5, weight=8)\n\n# Calculate the maximum flow from node 6 to node 1\nmax_flow = nx.maximum_flow_value(G, 6, 1)\n\nprint(\"Maximum flow from node 6 to node 1:\", max_flow)\n```"}, {"id": 42, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 8, 1), (11, 9, 8), (11, 5, 5),\n    (8, 10, 9), (8, 1, 5), (8, 7, 9), (8, 6, 5), (8, 11, 8), (8, 4, 10), (8, 3, 1), (8, 12, 10), (8, 9, 0),\n    (9, 8, 1), (9, 0, 0),\n    (5, 0, 3), (5, 3, 8), (5, 12, 8), (5, 8, 4), (5, 9, 5), (5, 7, 10), (5, 6, 5),\n    (10, 11, 7), (10, 4, 2), (10, 6, 0), (10, 8, 0), (10, 3, 0),\n    (1, 7, 10), (1, 5, 5), (1, 2, 5), (1, 11, 3), (1, 4, 7), (1, 8, 8), (1, 10, 3),\n    (7, 4, 7), (7, 3, 9), (7, 8, 7), (7, 1, 9), (7, 9, 1), (7, 0, 0),\n    (6, 5, 4), (6, 2, 9), (6, 10, 4), (6, 7, 5), (6, 0, 0),\n    (4, 7, 10), (4, 2, 8), (4, 0, 3),\n    (3, 12, 1), (3, 10, 4), (3, 9, 2), (3, 7, 1),\n    (12, 8, 4), (12, 1, 5), (12, 9, 2), (12, 3, 5),\n    (0, 9, 2), (0, 7, 7), (0, 6, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 10\nmax_flow = nx.maximum_flow_value(G, 0, 10)\n\nprint(\"Maximum flow from node 0 to node 10:\", max_flow)\n```"}, {"id": 43, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 1, 6), (11, 12, 10), (11, 6, 10), (11, 8, 5), (11, 10, 0), (11, 0, 0), (11, 5, 0), (11, 9, 0), (11, 4, 0), (11, 7, 0), (11, 2, 0),\n    (1, 4, 1), (1, 9, 5), (1, 11, 8), (1, 5, 8), (1, 10, 0), (1, 12, 0),\n    (12, 6, 6), (12, 9, 9), (12, 3, 2), (12, 10, 1), (12, 1, 3), (12, 4, 2), (12, 7, 7), (12, 8, 0),\n    (6, 9, 4),\n    (8, 10, 6), (8, 0, 1), (8, 5, 7), (8, 12, 9), (8, 9, 8),\n    (4, 7, 4), (4, 12, 5), (4, 6, 5), (4, 3, 5), (4, 2, 5), (4, 11, 6), (4, 0, 1), (4, 5, 6),\n    (9, 3, 6), (9, 8, 10), (9, 2, 8), (9, 11, 2), (9, 0, 9), (9, 5, 7), (9, 4, 9), (9, 12, 6),\n    (5, 1, 2), (5, 4, 2), (5, 3, 6), (5, 8, 3), (5, 10, 5), (5, 11, 9), (5, 0, 4),\n    (3, 8, 6), (3, 2, 2), (3, 10, 9), (3, 1, 3), (3, 12, 10), (3, 6, 5), (3, 9, 7),\n    (10, 11, 2), (10, 5, 8), (10, 1, 8), (10, 12, 7), (10, 9, 4), (10, 8, 0),\n    (7, 12, 5), (7, 6, 9), (7, 11, 4), (7, 0, 10), (7, 1, 9),\n    (0, 12, 8), (0, 6, 10), (0, 2, 1), (0, 11, 7), (0, 8, 0),\n    (2, 10, 9), (2, 11, 6), (2, 4, 5), (2, 12, 4), (2, 6, 1), (2, 8, 10), (2, 9, 0)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 8 to node 11\nmax_flow = nx.maximum_flow_value(G, 8, 11)\nprint(max_flow)\n```"}, {"id": 44, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 7, capacity=6)\nG.add_edge(5, 3, capacity=3)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(5, 1, capacity=1)\nG.add_edge(7, 3, capacity=7)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(7, 6, capacity=10)\nG.add_edge(7, 1, capacity=4)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(3, 7, capacity=3)\nG.add_edge(2, 6, capacity=3)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(6, 5, capacity=5)\nG.add_edge(6, 0, capacity=6)\nG.add_edge(6, 2, capacity=9)\nG.add_edge(6, 7, capacity=0)\nG.add_edge(1, 7, capacity=8)\nG.add_edge(1, 3, capacity=9)\nG.add_edge(1, 6, capacity=1)\nG.add_edge(0, 4, capacity=1)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(4, 2, capacity=8)\nG.add_edge(4, 7, capacity=9)\n\n# Calculate the maximum flow from node 7 to node 5\nmax_flow = nx.maximum_flow(G, 7, 5)[0]\n\nprint(\"Maximum flow from node 7 to node 5:\", max_flow)\n```"}, {"id": 45, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(6, 7, capacity=4)\nG.add_edge(6, 5, capacity=9)\nG.add_edge(7, 1, capacity=6)\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 2, capacity=4)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(0, 4, capacity=1)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(4, 2, capacity=0)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 0, capacity=10)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(1, 5, capacity=3)\nG.add_edge(1, 3, capacity=9)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(1, 4, capacity=0)\nG.add_edge(2, 1, capacity=2)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(2, 5, capacity=1)\n\n# Calculate the maximum flow from node 2 to node 1\nmax_flow = nx.maximum_flow_value(G, 2, 1)\n\nprint(\"Maximum flow from node 2 to node 1:\", max_flow)\n```"}, {"id": 46, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(13, 7, capacity=2)\nG.add_edge(13, 1, capacity=10)\nG.add_edge(7, 3, capacity=9)\nG.add_edge(7, 12, capacity=7)\nG.add_edge(7, 0, capacity=8)\nG.add_edge(7, 2, capacity=4)\nG.add_edge(1, 2, capacity=4)\nG.add_edge(1, 13, capacity=6)\nG.add_edge(1, 10, capacity=3)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(3, 5, capacity=9)\nG.add_edge(12, 9, capacity=2)\nG.add_edge(12, 7, capacity=0)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 8, capacity=10)\nG.add_edge(0, 10, capacity=5)\nG.add_edge(0, 4, capacity=8)\nG.add_edge(2, 7, capacity=6)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(2, 10, capacity=0)\nG.add_edge(10, 2, capacity=5)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 5, capacity=10)\nG.add_edge(9, 8, capacity=8)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(9, 6, capacity=4)\nG.add_edge(9, 10, capacity=0)\nG.add_edge(9, 12, capacity=0)\nG.add_edge(8, 12, capacity=9)\nG.add_edge(8, 1, capacity=9)\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 0, capacity=5)\nG.add_edge(5, 9, capacity=6)\nG.add_edge(5, 10, capacity=0)\nG.add_edge(6, 11, capacity=6)\nG.add_edge(6, 1, capacity=2)\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 9, capacity=3)\nG.add_edge(11, 7, capacity=8)\nG.add_edge(11, 10, capacity=1)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 2, capacity=9)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 10, capacity=3)\nG.add_edge(4, 12, capacity=9)\n\n# Calculate the maximum flow from node 10 to node 9\nmax_flow = nx.maximum_flow(G, 10, 9)[0]\n\nprint(\"Maximum flow from node 10 to node 9:\", max_flow)\n```"}, {"id": 47, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 7, capacity=9)\nG.add_edge(6, 8, capacity=9)\nG.add_edge(6, 11, capacity=0)\nG.add_edge(7, 2, capacity=3)\nG.add_edge(8, 6, capacity=7)\nG.add_edge(8, 4, capacity=2)\nG.add_edge(4, 10, capacity=5)\nG.add_edge(4, 6, capacity=6)\nG.add_edge(4, 2, capacity=1)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(9, 7, capacity=4)\nG.add_edge(1, 11, capacity=1)\nG.add_edge(1, 2, capacity=5)\nG.add_edge(11, 6, capacity=6)\nG.add_edge(11, 7, capacity=10)\nG.add_edge(11, 1, capacity=4)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(3, 7, capacity=9)\nG.add_edge(0, 5, capacity=1)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(0, 10, capacity=4)\nG.add_edge(0, 3, capacity=2)\nG.add_edge(5, 1, capacity=6)\n\n# Calculate the maximum flow from node 11 to node 4\nmax_flow = nx.maximum_flow(G, 11, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 48, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 7, 10), (5, 3, 7), (5, 9, 2), (5, 1, 9), (5, 10, 9), (5, 0, 2), (5, 8, 10),\n    (7, 9, 3), (7, 4, 4), (7, 5, 1), (7, 1, 0), (7, 8, 0), (7, 3, 0), (7, 0, 0),\n    (3, 9, 6), (3, 1, 7), (3, 4, 9), (3, 2, 10), (3, 7, 7),\n    (9, 1, 2), (9, 10, 9), (9, 8, 4), (9, 5, 1), (9, 7, 2), (9, 3, 6),\n    (1, 10, 3), (1, 0, 3), (1, 7, 8), (1, 3, 2), (1, 9, 0),\n    (10, 0, 1), (10, 8, 8), (10, 1, 7), (10, 9, 0),\n    (0, 8, 7), (0, 7, 1), (0, 1, 1), (0, 6, 8), (0, 4, 5), (0, 10, 10),\n    (8, 7, 5), (8, 6, 3), (8, 10, 6), (8, 9, 0),\n    (4, 3, 3), (4, 6, 8),\n    (2, 5, 1), (2, 9, 7), (2, 10, 8),\n    (6, 10, 5), (6, 0, 8), (6, 9, 10), (6, 1, 9)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 7\nmax_flow = nx.maximum_flow(G, 9, 7)[0]\n\nprint(\"Maximum flow from node 9 to node 7:\", max_flow)\n```"}, {"id": 49, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 8, capacity=4)\nG.add_edge(3, 1, capacity=7)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(8, 0, capacity=9)\nG.add_edge(8, 9, capacity=7)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(0, 5, capacity=4)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(9, 0, capacity=3)\nG.add_edge(9, 8, capacity=0)\nG.add_edge(9, 2, capacity=0)\nG.add_edge(4, 3, capacity=10)\nG.add_edge(4, 2, capacity=10)\nG.add_edge(4, 5, capacity=2)\nG.add_edge(4, 1, capacity=9)\nG.add_edge(5, 8, capacity=5)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 0, capacity=0)\nG.add_edge(6, 8, capacity=10)\nG.add_edge(6, 1, capacity=9)\nG.add_edge(2, 5, capacity=4)\nG.add_edge(2, 9, capacity=2)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(7, 9, capacity=6)\nG.add_edge(7, 3, capacity=10)\nG.add_edge(7, 6, capacity=1)\n\n# Calculate the maximum flow from node 8 to node 9\nmax_flow = nx.maximum_flow_value(G, 8, 9)\n\nprint(\"Maximum flow from node 8 to node 9:\", max_flow)\n```"}, {"id": 50, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 0, 1), (2, 10, 10), (2, 5, 6), (2, 12, 1), (2, 4, 6), (2, 14, 10), (2, 6, 6),\n    (0, 10, 4), (0, 11, 10), (0, 8, 9), (0, 2, 3), (0, 5, 0),\n    (10, 8, 8), (10, 5, 9), (10, 4, 3), (10, 7, 9), (10, 14, 8), (10, 2, 7), (10, 13, 9), (10, 0, 2), (10, 1, 3),\n    (5, 2, 9), (5, 0, 9),\n    (12, 2, 8), (12, 8, 1),\n    (4, 14, 7), (4, 13, 8), (4, 3, 10), (4, 8, 9), (4, 5, 6), (4, 10, 0), (4, 11, 0),\n    (14, 13, 8), (14, 0, 2), (14, 10, 2),\n    (6, 2, 3), (6, 3, 3), (6, 5, 3),\n    (11, 4, 9), (11, 0, 0),\n    (8, 12, 4), (8, 9, 3), (8, 6, 3), (8, 2, 1), (8, 13, 2), (8, 10, 5), (8, 0, 0),\n    (7, 9, 3), (7, 14, 7), (7, 0, 2), (7, 11, 6), (7, 10, 0), (7, 3, 0),\n    (13, 4, 5), (13, 2, 3),\n    (1, 5, 7), (1, 4, 8), (1, 14, 7), (1, 6, 1),\n    (3, 7, 9), (3, 9, 1), (3, 6, 8), (3, 4, 0),\n    (9, 0, 10), (9, 8, 1), (9, 5, 4), (9, 7, 6)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow(G, 5, 7)[0]\n\nprint(\"Maximum flow from node 5 to node 7:\", max_flow)\n```"}, {"id": 51, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 7, capacity=6)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 0, capacity=8)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(1, 0, capacity=2)\nG.add_edge(1, 6, capacity=2)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 5, capacity=2)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 2, capacity=7)\nG.add_edge(1, 7, capacity=8)\nG.add_edge(0, 1, capacity=3)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(6, 1, capacity=2)\nG.add_edge(6, 0, capacity=7)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(5, 2, capacity=4)\nG.add_edge(5, 0, capacity=3)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 3, capacity=9)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 3, capacity=10)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 5, capacity=4)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(2, 1, capacity=0)\n\n# Calculate the maximum flow from node 3 to node 2\nmax_flow = nx.maximum_flow(G, 3, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 52, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 2, capacity=3)\nG.add_edge(8, 1, capacity=4)\nG.add_edge(2, 8, capacity=5)\nG.add_edge(1, 5, capacity=1)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 8, capacity=8)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(3, 5, capacity=10)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 2, capacity=3)\nG.add_edge(3, 6, capacity=0)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(6, 5, capacity=2)\nG.add_edge(6, 8, capacity=7)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(6, 7, capacity=0)\nG.add_edge(0, 4, capacity=8)\nG.add_edge(0, 3, capacity=3)\nG.add_edge(7, 6, capacity=5)\nG.add_edge(7, 4, capacity=5)\n\n# Calculate the maximum flow from node 7 to node 3\nmax_flow = nx.maximum_flow(G, 7, 3)[0]\n\nprint(max_flow)\n```"}, {"id": 53, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 3, 3), (5, 2, 9), (5, 8, 7), (5, 6, 2), (5, 11, 6), (5, 10, 0), (5, 12, 0),\n    (3, 6, 4), (3, 0, 9),\n    (2, 4, 6), (2, 1, 1), (2, 6, 9), (2, 5, 7),\n    (8, 3, 2), (8, 9, 10), (8, 2, 2), (8, 4, 3),\n    (6, 0, 1), (6, 3, 9), (6, 9, 8), (6, 12, 7), (6, 8, 8),\n    (11, 3, 1), (11, 10, 6), (11, 9, 3), (11, 5, 0),\n    (0, 3, 1), (0, 10, 3), (0, 12, 9), (0, 8, 9), (0, 6, 9),\n    (4, 9, 6), (4, 2, 6),\n    (1, 6, 2), (1, 5, 3), (1, 12, 1),\n    (9, 7, 9), (9, 0, 10), (9, 5, 9),\n    (12, 4, 3), (12, 1, 9), (12, 7, 9), (12, 5, 10), (12, 3, 8), (12, 0, 0),\n    (10, 9, 4), (10, 2, 8), (10, 12, 6), (10, 1, 1), (10, 6, 9), (10, 5, 1), (10, 3, 9), (10, 0, 0),\n    (7, 5, 10), (7, 9, 7), (7, 12, 8), (7, 4, 9), (7, 8, 9)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 0 to node 11\nmax_flow = nx.maximum_flow_value(G, 0, 11)\n\nprint(\"Maximum flow from node 0 to node 11:\", max_flow)\n```"}, {"id": 54, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 4, 6), (0, 3, 6), (0, 9, 1), (0, 7, 1), (0, 1, 2), (0, 5, 7), (0, 6, 6),\n    (4, 5, 6), (4, 6, 2), (4, 8, 10),\n    (3, 7, 2), (3, 5, 2), (3, 8, 0),\n    (9, 7, 1), (9, 5, 4), (9, 0, 7), (9, 3, 3), (9, 8, 0),\n    (7, 5, 1), (7, 0, 2), (7, 4, 3),\n    (1, 5, 3), (1, 2, 2), (1, 3, 6), (1, 0, 0),\n    (5, 6, 7), (5, 3, 2), (5, 9, 6), (5, 7, 3), (5, 1, 9), (5, 4, 0),\n    (6, 2, 10), (6, 9, 7), (6, 7, 9),\n    (8, 4, 8), (8, 3, 9), (8, 9, 10), (8, 7, 9), (8, 6, 9),\n    (2, 5, 4), (2, 6, 9), (2, 0, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 8 to node 1\nmax_flow = nx.maximum_flow(G, 8, 1)[0]\n\nprint(\"Maximum flow from node 8 to node 1:\", max_flow)\n```"}, {"id": 55, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nG.add_edge(0, 5, weight=7)\nG.add_edge(0, 4, weight=6)\nG.add_edge(0, 2, weight=9)\nG.add_edge(0, 8, weight=2)\nG.add_edge(0, 1, weight=0)\nG.add_edge(5, 3, weight=7)\nG.add_edge(4, 1, weight=7)\nG.add_edge(2, 10, weight=3)\nG.add_edge(2, 7, weight=6)\nG.add_edge(2, 9, weight=0)\nG.add_edge(2, 0, weight=0)\nG.add_edge(8, 9, weight=8)\nG.add_edge(8, 10, weight=1)\nG.add_edge(3, 0, weight=2)\nG.add_edge(3, 9, weight=1)\nG.add_edge(3, 2, weight=1)\nG.add_edge(1, 0, weight=7)\nG.add_edge(1, 9, weight=0)\nG.add_edge(10, 4, weight=5)\nG.add_edge(7, 5, weight=5)\nG.add_edge(7, 6, weight=6)\nG.add_edge(7, 9, weight=5)\nG.add_edge(7, 2, weight=8)\nG.add_edge(9, 2, weight=3)\nG.add_edge(9, 1, weight=4)\nG.add_edge(9, 8, weight=3)\nG.add_edge(9, 5, weight=5)\nG.add_edge(9, 6, weight=8)\nG.add_edge(6, 3, weight=9)\n\n# Calculate the maximum flow from node 8 to node 7\nmax_flow = nx.maximum_flow(G, 8, 7)[0]\n\nprint(max_flow)\n```"}, {"id": 56, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 10, capacity=9)\nG.add_edge(10, 0, capacity=8)\nG.add_edge(10, 4, capacity=3)\nG.add_edge(10, 7, capacity=0)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(0, 2, capacity=6)\nG.add_edge(0, 7, capacity=0)\nG.add_edge(0, 10, capacity=0)\nG.add_edge(4, 7, capacity=7)\nG.add_edge(4, 10, capacity=2)\nG.add_edge(4, 5, capacity=2)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(1, 6, capacity=3)\nG.add_edge(1, 2, capacity=5)\nG.add_edge(1, 8, capacity=8)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(6, 8, capacity=8)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(6, 1, capacity=3)\nG.add_edge(2, 5, capacity=4)\nG.add_edge(2, 8, capacity=6)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(2, 1, capacity=7)\nG.add_edge(2, 10, capacity=8)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(8, 10, capacity=6)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(5, 1, capacity=4)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(7, 10, capacity=9)\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 9, capacity=8)\nG.add_edge(7, 4, capacity=0)\n\n# Calculate the maximum flow from node 4 to node 8\nmax_flow = nx.maximum_flow(G, 4, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 57, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(14, 0, capacity=10)\nG.add_edge(14, 6, capacity=8)\nG.add_edge(14, 2, capacity=0)\nG.add_edge(0, 13, capacity=1)\nG.add_edge(0, 10, capacity=9)\nG.add_edge(0, 7, capacity=5)\nG.add_edge(0, 9, capacity=0)\nG.add_edge(0, 14, capacity=0)\nG.add_edge(6, 4, capacity=10)\nG.add_edge(6, 11, capacity=5)\nG.add_edge(6, 3, capacity=8)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(6, 7, capacity=7)\nG.add_edge(6, 8, capacity=6)\nG.add_edge(6, 0, capacity=10)\nG.add_edge(6, 13, capacity=7)\nG.add_edge(13, 6, capacity=10)\nG.add_edge(10, 8, capacity=0)\nG.add_edge(10, 7, capacity=0)\nG.add_edge(10, 0, capacity=0)\nG.add_edge(7, 8, capacity=7)\nG.add_edge(7, 10, capacity=7)\nG.add_edge(7, 3, capacity=6)\nG.add_edge(7, 5, capacity=1)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(4, 5, capacity=2)\nG.add_edge(11, 9, capacity=6)\nG.add_edge(11, 2, capacity=6)\nG.add_edge(11, 5, capacity=0)\nG.add_edge(11, 1, capacity=0)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 8, capacity=5)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(5, 1, capacity=2)\nG.add_edge(5, 4, capacity=2)\nG.add_edge(5, 11, capacity=7)\nG.add_edge(5, 3, capacity=8)\nG.add_edge(8, 2, capacity=10)\nG.add_edge(8, 10, capacity=7)\nG.add_edge(8, 14, capacity=4)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(8, 3, capacity=0)\nG.add_edge(2, 14, capacity=10)\nG.add_edge(2, 3, capacity=5)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 11, capacity=0)\nG.add_edge(9, 14, capacity=7)\nG.add_edge(9, 0, capacity=7)\nG.add_edge(9, 11, capacity=0)\nG.add_edge(1, 11, capacity=1)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(12, 14, capacity=5)\n\n# Calculate the maximum flow from node 5 to node 10\nmax_flow = nx.maximum_flow(G, 5, 10)[0]\n\nprint(max_flow)\n```"}, {"id": 58, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nG.add_edge(6, 3, capacity=7)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(6, 5, capacity=7)\nG.add_edge(6, 0, capacity=10)\nG.add_edge(3, 0, capacity=7)\nG.add_edge(3, 6, capacity=5)\nG.add_edge(2, 0, capacity=1)\nG.add_edge(2, 1, capacity=9)\nG.add_edge(2, 6, capacity=4)\nG.add_edge(5, 0, capacity=1)\nG.add_edge(5, 6, capacity=3)\nG.add_edge(5, 7, capacity=8)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(1, 4, capacity=3)\nG.add_edge(1, 7, capacity=7)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 5, capacity=4)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(7, 3, capacity=7)\nG.add_edge(7, 5, capacity=1)\nG.add_edge(7, 0, capacity=9)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 1, capacity=0)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 1, capacity=6)\n\n# Calculate the maximum flow from node 3 to node 7\nmax_flow = nx.maximum_flow(G, 3, 7)[0]\n\nprint(max_flow)\n```"}, {"id": 59, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 2, capacity=9)\nG.add_edge(2, 3, capacity=1)\nG.add_edge(2, 5, capacity=3)\nG.add_edge(2, 7, capacity=0)\nG.add_edge(3, 7, capacity=2)\nG.add_edge(3, 4, capacity=1)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(5, 2, capacity=7)\nG.add_edge(5, 7, capacity=8)\nG.add_edge(5, 0, capacity=10)\nG.add_edge(4, 2, capacity=5)\nG.add_edge(4, 1, capacity=5)\nG.add_edge(4, 6, capacity=3)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(1, 6, capacity=7)\nG.add_edge(1, 3, capacity=7)\nG.add_edge(1, 0, capacity=10)\nG.add_edge(6, 3, capacity=10)\nG.add_edge(6, 2, capacity=9)\nG.add_edge(6, 1, capacity=5)\nG.add_edge(7, 0, capacity=5)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 2, capacity=3)\n\n# Calculate the maximum flow from node 7 to node 4\nmax_flow = nx.maximum_flow_value(G, 7, 4)\n\nprint(\"Maximum flow from node 7 to node 4:\", max_flow)\n```"}, {"id": 60, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 7, capacity=2)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(7, 5, capacity=2)\nG.add_edge(7, 6, capacity=2)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 0, capacity=0)\nG.add_edge(5, 0, capacity=4)\nG.add_edge(5, 8, capacity=1)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(6, 4, capacity=10)\nG.add_edge(1, 8, capacity=1)\nG.add_edge(8, 2, capacity=6)\nG.add_edge(2, 6, capacity=4)\nG.add_edge(2, 7, capacity=1)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(4, 0, capacity=10)\nG.add_edge(4, 6, capacity=0)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 7, capacity=9)\nG.add_edge(3, 5, capacity=2)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 0, capacity=7)\nG.add_edge(3, 6, capacity=7)\n\n# Calculate the maximum flow from node 6 to node 7\nmax_flow = nx.maximum_flow(G, 6, 7)[0]\n\nprint(max_flow)\n```"}, {"id": 61, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 10, capacity=5)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(3, 12, capacity=0)\nG.add_edge(10, 11, capacity=6)\nG.add_edge(10, 3, capacity=0)\nG.add_edge(11, 7, capacity=4)\nG.add_edge(11, 3, capacity=4)\nG.add_edge(11, 9, capacity=7)\nG.add_edge(11, 12, capacity=4)\nG.add_edge(5, 12, capacity=2)\nG.add_edge(5, 10, capacity=3)\nG.add_edge(5, 3, capacity=5)\nG.add_edge(12, 4, capacity=4)\nG.add_edge(12, 6, capacity=1)\nG.add_edge(12, 3, capacity=5)\nG.add_edge(12, 7, capacity=0)\nG.add_edge(4, 7, capacity=4)\nG.add_edge(4, 3, capacity=2)\nG.add_edge(9, 7, capacity=4)\nG.add_edge(9, 13, capacity=8)\nG.add_edge(9, 6, capacity=10)\nG.add_edge(7, 12, capacity=5)\nG.add_edge(7, 4, capacity=0)\nG.add_edge(0, 10, capacity=6)\nG.add_edge(2, 11, capacity=1)\nG.add_edge(2, 0, capacity=5)\nG.add_edge(1, 9, capacity=2)\nG.add_edge(8, 6, capacity=6)\nG.add_edge(8, 5, capacity=7)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(8, 1, capacity=8)\nG.add_edge(8, 4, capacity=9)\n\n# Calculate the maximum flow from node 4 to node 10\nmax_flow = nx.maximum_flow_value(G, 4, 10)\n\nprint(\"Maximum flow from node 4 to node 10:\", max_flow)\n```"}, {"id": 62, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 3, capacity=3)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(1, 0, capacity=5)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(1, 3, capacity=0)\nG.add_edge(0, 2, capacity=2)\nG.add_edge(0, 7, capacity=5)\nG.add_edge(6, 7, capacity=8)\nG.add_edge(6, 1, capacity=2)\nG.add_edge(7, 4, capacity=5)\nG.add_edge(7, 1, capacity=6)\nG.add_edge(7, 0, capacity=6)\nG.add_edge(7, 2, capacity=1)\n\n# Calculate the maximum flow from node 2 to node 1\nmax_flow = nx.maximum_flow(G, 2, 1)[0]\n\nprint(\"Maximum flow from node 2 to node 1:\", max_flow)\n```"}, {"id": 63, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 12, 10), (7, 2, 9), (7, 8, 2), (7, 9, 4), (7, 5, 3), (7, 4, 6), (7, 11, 0),\n    (12, 2, 3), (12, 8, 7), (12, 5, 9), (12, 10, 9), (12, 4, 3), (12, 0, 1), (12, 6, 9),\n    (2, 8, 10), (2, 3, 2), (2, 9, 1), (2, 10, 2), (2, 4, 1), (2, 1, 7), (2, 0, 0),\n    (8, 9, 1), (8, 5, 7), (8, 0, 2), (8, 11, 10), (8, 1, 2), (8, 12, 0),\n    (9, 10, 6), (9, 7, 9), (9, 1, 4), (9, 0, 0), (9, 2, 0), (9, 3, 0), (9, 8, 0), (9, 5, 0), (9, 4, 0), (9, 6, 0),\n    (5, 4, 3), (5, 0, 7), (5, 7, 6), (5, 11, 4), (5, 12, 7), (5, 8, 4), (5, 9, 3),\n    (4, 0, 7), (4, 6, 2), (4, 11, 10), (4, 2, 8), (4, 9, 5), (4, 5, 10), (4, 1, 0),\n    (10, 4, 5), (10, 0, 2), (10, 6, 2), (10, 2, 7), (10, 8, 9), (10, 9, 5), (10, 5, 1), (10, 12, 0),\n    (0, 11, 8), (0, 12, 5), (0, 2, 7), (0, 9, 5), (0, 10, 2),\n    (6, 12, 6), (6, 2, 3), (6, 9, 3), (6, 5, 4), (6, 10, 5), (6, 3, 0),\n    (3, 9, 7), (3, 5, 5), (3, 6, 3), (3, 12, 8), (3, 11, 0), (3, 2, 0),\n    (1, 10, 1), (1, 4, 3), (1, 7, 8), (1, 11, 9), (1, 12, 4), (1, 2, 0),\n    (11, 12, 9), (11, 3, 8), (11, 7, 5), (11, 0, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 9\nmax_flow = nx.maximum_flow_value(G, 0, 9)\n\nprint(\"Maximum flow from node 0 to node 9:\", max_flow)\n```"}, {"id": 64, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 9, capacity=1)\nG.add_edge(0, 8, capacity=3)\nG.add_edge(0, 6, capacity=5)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 4, capacity=8)\nG.add_edge(0, 1, capacity=0)\nG.add_edge(8, 10, capacity=3)\nG.add_edge(8, 0, capacity=4)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(3, 10, capacity=8)\nG.add_edge(3, 5, capacity=9)\nG.add_edge(3, 6, capacity=3)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(4, 1, capacity=5)\nG.add_edge(4, 8, capacity=4)\nG.add_edge(10, 7, capacity=6)\nG.add_edge(10, 1, capacity=4)\nG.add_edge(10, 8, capacity=1)\nG.add_edge(10, 6, capacity=3)\nG.add_edge(2, 0, capacity=6)\nG.add_edge(2, 7, capacity=2)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(1, 8, capacity=7)\nG.add_edge(1, 10, capacity=7)\nG.add_edge(1, 2, capacity=3)\nG.add_edge(1, 4, capacity=10)\nG.add_edge(1, 0, capacity=4)\nG.add_edge(7, 9, capacity=4)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 0, capacity=2)\n\n# Calculate the maximum flow from node 4 to node 5\nmax_flow = nx.maximum_flow(G, 4, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 65, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 1, 7), (10, 3, 9), (10, 5, 4), (10, 2, 2), (10, 9, 5), (10, 6, 9),\n    (1, 9, 2), (1, 0, 1), (1, 10, 7), (1, 8, 0),\n    (3, 5, 7), (3, 2, 9), (3, 9, 5), (3, 6, 8), (3, 8, 5), (3, 0, 0),\n    (5, 6, 1), (5, 4, 6), (5, 8, 7),\n    (2, 7, 8), (2, 0, 9),\n    (9, 5, 9),\n    (6, 0, 6), (6, 7, 0),\n    (0, 3, 5), (0, 4, 10), (0, 6, 0),\n    (8, 0, 5), (8, 1, 4), (8, 3, 9), (8, 2, 4),\n    (4, 8, 1), (4, 0, 9), (4, 10, 6),\n    (7, 6, 4)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 7 to node 1\nmax_flow = nx.maximum_flow_value(G, 7, 1)\n\nprint(\"Maximum flow from node 7 to node 1:\", max_flow)\n```"}, {"id": 66, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 10, 10), (11, 5, 4), (11, 2, 9),\n    (10, 0, 9), (10, 5, 0),\n    (5, 12, 1), (5, 10, 9), (5, 3, 0), (5, 1, 0),\n    (2, 11, 6), (2, 1, 10), (2, 13, 7),\n    (0, 13, 10), (0, 4, 7), (0, 7, 6), (0, 10, 7), (0, 1, 6), (0, 12, 10),\n    (12, 13, 8), (12, 4, 8), (12, 5, 0), (12, 1, 0), (12, 0, 0),\n    (1, 12, 3), (1, 5, 3), (1, 3, 0),\n    (13, 4, 2), (13, 11, 5), (13, 7, 3), (13, 14, 7), (13, 8, 5), (13, 6, 5), (13, 0, 0), (13, 12, 0),\n    (7, 5, 7), (7, 0, 3), (7, 3, 2), (7, 14, 2), (7, 8, 1), (7, 9, 3), (7, 6, 3), (7, 11, 7), (7, 13, 0),\n    (3, 4, 9), (3, 5, 7), (3, 1, 9),\n    (14, 6, 3), (14, 4, 6), (14, 11, 8), (14, 13, 0),\n    (8, 6, 8), (8, 7, 6), (8, 14, 10), (8, 13, 0),\n    (9, 2, 6), (9, 10, 7), (9, 1, 5), (9, 12, 1), (9, 0, 3),\n    (6, 4, 6), (6, 7, 8), (6, 1, 6), (6, 13, 0), (6, 14, 0),\n    (4, 0, 10), (4, 3, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 7\nmax_flow = nx.maximum_flow_value(G, 3, 7)\n\nprint(\"Maximum flow from node 3 to node 7:\", max_flow)\n```"}, {"id": 67, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 2, 6), (9, 4, 4), (9, 8, 0),\n    (2, 11, 6), (2, 9, 2), (2, 1, 6), (2, 10, 4), (2, 0, 0),\n    (4, 8, 5), (4, 11, 7), (4, 3, 5), (4, 1, 0), (4, 7, 0),\n    (11, 3, 9), (11, 2, 8), (11, 4, 4), (11, 8, 1), (11, 5, 7),\n    (1, 2, 9), (1, 4, 9), (1, 7, 3), (1, 3, 2),\n    (10, 6, 1), (10, 8, 1), (10, 0, 5), (10, 5, 4),\n    (8, 0, 1), (8, 9, 9), (8, 1, 1), (8, 10, 7), (8, 4, 8),\n    (3, 7, 7), (3, 1, 0),\n    (7, 5, 4), (7, 3, 4), (7, 4, 2), (7, 1, 0),\n    (5, 11, 10), (5, 1, 6), (5, 4, 5), (5, 6, 3), (5, 0, 1), (5, 7, 0),\n    (6, 0, 3), (6, 11, 3), (6, 9, 2), (6, 1, 3), (6, 10, 5), (6, 5, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 1 to node 2\nmax_flow = nx.maximum_flow_value(G, 1, 2)\n\nprint(\"Maximum flow from node 1 to node 2:\", max_flow)\n```"}, {"id": 68, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 7, capacity=7)\nG.add_edge(3, 2, capacity=10)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(3, 14, capacity=0)\nG.add_edge(7, 8, capacity=10)\nG.add_edge(7, 0, capacity=5)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(2, 5, capacity=5)\nG.add_edge(2, 4, capacity=9)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(0, 13, capacity=3)\nG.add_edge(0, 4, capacity=10)\nG.add_edge(0, 14, capacity=3)\nG.add_edge(0, 10, capacity=1)\nG.add_edge(8, 0, capacity=7)\nG.add_edge(8, 3, capacity=10)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(8, 6, capacity=1)\nG.add_edge(1, 11, capacity=4)\nG.add_edge(1, 0, capacity=3)\nG.add_edge(1, 14, capacity=1)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(5, 13, capacity=6)\nG.add_edge(4, 9, capacity=9)\nG.add_edge(4, 5, capacity=7)\nG.add_edge(13, 12, capacity=7)\nG.add_edge(14, 3, capacity=1)\nG.add_edge(14, 10, capacity=0)\nG.add_edge(10, 14, capacity=9)\nG.add_edge(10, 6, capacity=0)\nG.add_edge(12, 4, capacity=7)\nG.add_edge(12, 2, capacity=5)\nG.add_edge(12, 10, capacity=2)\nG.add_edge(9, 12, capacity=10)\nG.add_edge(9, 11, capacity=10)\nG.add_edge(9, 4, capacity=7)\nG.add_edge(11, 3, capacity=7)\nG.add_edge(11, 9, capacity=5)\nG.add_edge(11, 12, capacity=8)\nG.add_edge(11, 8, capacity=8)\nG.add_edge(11, 1, capacity=0)\nG.add_edge(6, 10, capacity=8)\n\n# Calculate the maximum flow from node 6 to node 11\nmax_flow = nx.maximum_flow(G, 6, 11)[0]\n\nprint(max_flow)\n```"}, {"id": 69, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 1, 9), (2, 14, 10), (2, 3, 7), (2, 7, 5), (2, 13, 4), (2, 5, 10), (2, 0, 7), (2, 10, 0), (2, 12, 0), (2, 11, 0), (2, 4, 0),\n    (1, 11, 4), (1, 14, 8), (1, 10, 4), (1, 4, 8), (1, 9, 10), (1, 6, 8), (1, 0, 8), (1, 2, 3), (1, 7, 0),\n    (14, 10, 4), (14, 12, 9), (14, 6, 10),\n    (3, 8, 3), (3, 13, 6), (3, 12, 5), (3, 5, 3), (3, 6, 10), (3, 0, 7),\n    (7, 6, 1), (7, 2, 6), (7, 1, 5), (7, 11, 5), (7, 14, 2), (7, 12, 0), (7, 4, 0),\n    (13, 6, 1), (13, 11, 8), (13, 14, 10), (13, 3, 8),\n    (5, 6, 7), (5, 11, 6), (5, 9, 7), (5, 8, 6), (5, 12, 9),\n    (0, 12, 3),\n    (11, 13, 9), (11, 2, 10), (11, 12, 0),\n    (10, 8, 2), (10, 2, 4), (10, 14, 2),\n    (4, 7, 7), (4, 12, 7), (4, 6, 6), (4, 0, 10), (4, 2, 8), (4, 14, 4), (4, 10, 1),\n    (9, 12, 2), (9, 6, 1), (9, 1, 1), (9, 10, 2), (9, 4, 10), (9, 5, 0),\n    (6, 10, 4), (6, 4, 4), (6, 7, 1), (6, 14, 0),\n    (12, 5, 4), (12, 2, 1), (12, 11, 3), (12, 14, 4), (12, 10, 8), (12, 4, 8), (12, 7, 1),\n    (8, 12, 8), (8, 0, 9), (8, 9, 7)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 14 to node 1\nmax_flow = nx.maximum_flow_value(G, 14, 1)\n\nprint(\"Maximum flow from node 14 to node 1:\", max_flow)\n```"}, {"id": 70, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 3, capacity=9)\nG.add_edge(5, 8, capacity=5)\nG.add_edge(3, 8, capacity=6)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(3, 2, capacity=8)\nG.add_edge(3, 9, capacity=7)\nG.add_edge(3, 6, capacity=8)\nG.add_edge(8, 6, capacity=9)\nG.add_edge(8, 3, capacity=6)\nG.add_edge(0, 6, capacity=1)\nG.add_edge(0, 7, capacity=1)\nG.add_edge(0, 3, capacity=9)\nG.add_edge(2, 5, capacity=6)\nG.add_edge(2, 1, capacity=2)\nG.add_edge(9, 5, capacity=7)\nG.add_edge(9, 0, capacity=8)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(1, 2, capacity=1)\nG.add_edge(1, 5, capacity=9)\nG.add_edge(4, 7, capacity=1)\n\n# Calculate the maximum flow from node 2 to node 1\nmax_flow = nx.maximum_flow_value(G, 2, 1)\n\nprint(\"Maximum flow from node 2 to node 1:\", max_flow)\n```"}, {"id": 71, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 5, 5), (10, 11, 10), (10, 1, 4), (10, 8, 9), (10, 6, 5), (10, 7, 8),\n    (5, 11, 7), (5, 6, 5), (5, 3, 3), (5, 7, 6), (5, 10, 9), (5, 8, 0),\n    (11, 2, 6), (11, 7, 6), (11, 5, 7),\n    (1, 9, 5), (1, 0, 7), (1, 6, 3), (1, 3, 8), (1, 10, 4), (1, 11, 2), (1, 8, 0),\n    (8, 0, 6), (8, 2, 4), (8, 3, 3), (8, 5, 1), (8, 1, 6), (8, 9, 6),\n    (6, 3, 8), (6, 5, 5), (6, 9, 1), (6, 0, 6), (6, 2, 3),\n    (7, 10, 4), (7, 5, 9), (7, 11, 4), (7, 1, 8), (7, 8, 8), (7, 0, 4), (7, 3, 10),\n    (3, 11, 1), (3, 1, 8), (3, 9, 1), (3, 0, 1), (3, 4, 9), (3, 6, 0), (3, 8, 0), (3, 5, 0),\n    (2, 6, 2), (2, 4, 5), (2, 8, 5),\n    (9, 2, 9), (9, 6, 3), (9, 3, 2), (9, 10, 2), (9, 1, 8),\n    (0, 2, 2), (0, 7, 2), (0, 11, 3), (0, 8, 5),\n    (4, 5, 7), (4, 11, 2), (4, 1, 6), (4, 0, 1), (4, 6, 8), (4, 2, 0), (4, 3, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 4\nmax_flow = nx.maximum_flow_value(G, 2, 4)\n\nprint(\"Maximum flow from node 2 to node 4:\", max_flow)\n```"}, {"id": 72, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 0, 6), (8, 4, 2), (8, 1, 4), (8, 10, 1), (8, 3, 6), (8, 6, 6),\n    (0, 4, 7), (0, 5, 8), (0, 7, 8), (0, 8, 6), (0, 1, 0),\n    (4, 5, 2), (4, 9, 2), (4, 1, 3), (4, 3, 3), (4, 6, 8), (4, 8, 7),\n    (1, 10, 10), (1, 2, 6), (1, 6, 10), (1, 8, 2), (1, 0, 6), (1, 7, 2),\n    (10, 2, 8), (10, 8, 6), (10, 0, 7), (10, 9, 2), (10, 7, 6),\n    (3, 7, 8),\n    (6, 4, 5), (6, 5, 4), (6, 9, 4), (6, 10, 8),\n    (5, 7, 7), (5, 1, 1), (5, 2, 10), (5, 3, 4), (5, 4, 6),\n    (7, 1, 9), (7, 2, 7), (7, 6, 10), (7, 0, 4), (7, 5, 8), (7, 3, 0),\n    (9, 7, 9), (9, 1, 2), (9, 2, 2), (9, 3, 10), (9, 6, 9), (9, 4, 9),\n    (2, 3, 7), (2, 6, 5), (2, 5, 4)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 3 to node 0\nmax_flow = nx.maximum_flow_value(G, 3, 0)\n\nprint(\"Maximum flow from node 3 to node 0:\", max_flow)\n```"}, {"id": 73, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 2, capacity=4)\nG.add_edge(4, 7, capacity=9)\nG.add_edge(4, 5, capacity=1)\nG.add_edge(4, 1, capacity=7)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(2, 7, capacity=6)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 3, capacity=10)\nG.add_edge(7, 0, capacity=5)\nG.add_edge(5, 0, capacity=10)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 6, capacity=0)\nG.add_edge(0, 7, capacity=9)\nG.add_edge(0, 5, capacity=8)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(0, 6, capacity=7)\nG.add_edge(0, 3, capacity=9)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(0, 1, capacity=0)\nG.add_edge(6, 2, capacity=9)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(3, 5, capacity=3)\nG.add_edge(3, 1, capacity=9)\nG.add_edge(3, 6, capacity=2)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(3, 0, capacity=0)\n\n# Calculate the maximum flow from node 6 to node 3\nmax_flow = nx.maximum_flow(G, 6, 3)[0]\n\nprint(\"Maximum flow from node 6 to node 3:\", max_flow)\n```"}, {"id": 74, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(13, 7, capacity=9)\nG.add_edge(13, 5, capacity=4)\nG.add_edge(7, 3, capacity=4)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 2, capacity=7)\nG.add_edge(5, 1, capacity=2)\nG.add_edge(3, 1, capacity=8)\nG.add_edge(6, 5, capacity=5)\nG.add_edge(2, 7, capacity=7)\nG.add_edge(2, 5, capacity=4)\nG.add_edge(2, 14, capacity=8)\nG.add_edge(1, 0, capacity=5)\nG.add_edge(1, 9, capacity=9)\nG.add_edge(1, 6, capacity=6)\nG.add_edge(14, 10, capacity=9)\nG.add_edge(14, 12, capacity=3)\nG.add_edge(14, 11, capacity=4)\nG.add_edge(14, 9, capacity=4)\nG.add_edge(14, 6, capacity=10)\nG.add_edge(14, 2, capacity=0)\nG.add_edge(12, 3, capacity=3)\nG.add_edge(0, 10, capacity=3)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(9, 13, capacity=8)\nG.add_edge(11, 2, capacity=2)\nG.add_edge(11, 5, capacity=4)\nG.add_edge(10, 2, capacity=4)\nG.add_edge(10, 11, capacity=4)\nG.add_edge(10, 8, capacity=7)\nG.add_edge(10, 14, capacity=7)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(8, 3, capacity=7)\nG.add_edge(8, 9, capacity=5)\nG.add_edge(8, 10, capacity=0)\nG.add_edge(4, 12, capacity=2)\nG.add_edge(4, 10, capacity=3)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow(G, 7, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 75, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 0, capacity=6)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(0, 3, capacity=2)\nG.add_edge(0, 1, capacity=7)\nG.add_edge(0, 5, capacity=0)\nG.add_edge(2, 3, capacity=3)\nG.add_edge(2, 6, capacity=4)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 5, capacity=8)\nG.add_edge(2, 7, capacity=0)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 4, capacity=9)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(6, 0, capacity=4)\nG.add_edge(6, 5, capacity=4)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(5, 7, capacity=5)\nG.add_edge(5, 4, capacity=5)\nG.add_edge(5, 3, capacity=1)\nG.add_edge(5, 0, capacity=6)\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 1, capacity=2)\nG.add_edge(4, 2, capacity=4)\nG.add_edge(4, 5, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 2\nmax_flow = nx.maximum_flow(G, 5, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 76, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 12, capacity=5)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(12, 2, capacity=5)\nG.add_edge(12, 13, capacity=1)\nG.add_edge(12, 5, capacity=2)\nG.add_edge(12, 9, capacity=6)\nG.add_edge(12, 10, capacity=0)\nG.add_edge(3, 2, capacity=2)\nG.add_edge(3, 5, capacity=1)\nG.add_edge(3, 7, capacity=4)\nG.add_edge(4, 10, capacity=1)\nG.add_edge(4, 12, capacity=7)\nG.add_edge(8, 3, capacity=9)\nG.add_edge(2, 11, capacity=1)\nG.add_edge(2, 10, capacity=8)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(13, 4, capacity=6)\nG.add_edge(13, 11, capacity=3)\nG.add_edge(13, 0, capacity=7)\nG.add_edge(5, 1, capacity=3)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(9, 10, capacity=5)\nG.add_edge(9, 3, capacity=5)\nG.add_edge(9, 11, capacity=0)\nG.add_edge(9, 1, capacity=0)\nG.add_edge(9, 12, capacity=0)\nG.add_edge(10, 12, capacity=7)\nG.add_edge(10, 11, capacity=5)\nG.add_edge(10, 2, capacity=0)\nG.add_edge(11, 9, capacity=8)\nG.add_edge(11, 2, capacity=0)\nG.add_edge(0, 12, capacity=7)\nG.add_edge(1, 11, capacity=6)\nG.add_edge(1, 9, capacity=7)\nG.add_edge(1, 5, capacity=0)\n\n# Calculate the maximum flow from node 3 to node 9\nmax_flow = nx.maximum_flow_value(G, 3, 9)\n\nprint(\"Maximum flow from node 3 to node 9:\", max_flow)\n```"}, {"id": 77, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 6, capacity=5)\nG.add_edge(3, 2, capacity=10)\nG.add_edge(3, 10, capacity=0)\nG.add_edge(6, 1, capacity=10)\nG.add_edge(6, 4, capacity=3)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(2, 10, capacity=4)\nG.add_edge(2, 11, capacity=3)\nG.add_edge(2, 8, capacity=3)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(1, 2, capacity=5)\nG.add_edge(1, 6, capacity=7)\nG.add_edge(1, 8, capacity=5)\nG.add_edge(1, 9, capacity=9)\nG.add_edge(4, 3, capacity=9)\nG.add_edge(4, 9, capacity=8)\nG.add_edge(4, 1, capacity=2)\nG.add_edge(4, 2, capacity=10)\nG.add_edge(10, 3, capacity=10)\nG.add_edge(10, 8, capacity=6)\nG.add_edge(11, 2, capacity=4)\nG.add_edge(11, 7, capacity=3)\nG.add_edge(8, 5, capacity=1)\nG.add_edge(8, 10, capacity=0)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(8, 7, capacity=0)\nG.add_edge(7, 10, capacity=3)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 8, capacity=2)\nG.add_edge(7, 11, capacity=0)\nG.add_edge(9, 1, capacity=6)\nG.add_edge(9, 0, capacity=1)\nG.add_edge(9, 10, capacity=7)\nG.add_edge(9, 3, capacity=5)\nG.add_edge(9, 11, capacity=4)\nG.add_edge(5, 0, capacity=8)\nG.add_edge(5, 3, capacity=5)\nG.add_edge(5, 8, capacity=2)\nG.add_edge(0, 3, capacity=8)\nG.add_edge(0, 9, capacity=10)\nG.add_edge(0, 1, capacity=4)\nG.add_edge(0, 7, capacity=8)\n\n# Calculate the maximum flow from node 10 to node 8\nmax_flow = nx.maximum_flow(G, 10, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 78, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 4, 8), (3, 11, 7), (3, 0, 6), (3, 6, 7), (3, 1, 0),\n    (4, 11, 7), (4, 0, 1), (4, 12, 9), (4, 6, 9),\n    (11, 5, 6), (11, 0, 2), (11, 3, 9),\n    (0, 2, 4), (0, 3, 5), (0, 4, 8), (0, 11, 1), (0, 7, 8), (0, 5, 7),\n    (6, 3, 6), (6, 9, 1), (6, 4, 5), (6, 10, 5), (6, 0, 8), (6, 12, 7), (6, 7, 0),\n    (12, 8, 2), (12, 3, 5), (12, 4, 3), (12, 1, 8), (12, 0, 4), (12, 2, 4), (12, 9, 0),\n    (5, 1, 1), (5, 10, 2), (5, 0, 0),\n    (2, 10, 9), (2, 7, 3), (2, 1, 8), (2, 0, 10),\n    (7, 1, 1), (7, 2, 5), (7, 6, 10), (7, 9, 2), (7, 11, 8),\n    (9, 5, 9), (9, 12, 10), (9, 6, 2), (9, 1, 0),\n    (10, 11, 1), (10, 0, 5), (10, 8, 2), (10, 6, 6), (10, 9, 8), (10, 4, 2), (10, 2, 0), (10, 5, 0),\n    (1, 0, 5), (1, 3, 2), (1, 9, 6), (1, 11, 9), (1, 7, 9), (1, 2, 0),\n    (8, 6, 3), (8, 9, 5), (8, 4, 5), (8, 10, 3), (8, 5, 4), (8, 12, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 10\nmax_flow = nx.maximum_flow_value(G, 2, 10)\n\nprint(\"Maximum flow from node 2 to node 10:\", max_flow)\n```"}, {"id": 79, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 6, capacity=1)\nG.add_edge(7, 10, capacity=5)\nG.add_edge(7, 0, capacity=8)\nG.add_edge(7, 2, capacity=0)\nG.add_edge(10, 4, capacity=8)\nG.add_edge(10, 0, capacity=1)\nG.add_edge(0, 7, capacity=1)\nG.add_edge(0, 2, capacity=1)\nG.add_edge(0, 11, capacity=0)\nG.add_edge(4, 8, capacity=5)\nG.add_edge(2, 9, capacity=8)\nG.add_edge(2, 7, capacity=6)\nG.add_edge(1, 11, capacity=4)\nG.add_edge(1, 8, capacity=6)\nG.add_edge(11, 4, capacity=2)\nG.add_edge(11, 0, capacity=4)\nG.add_edge(11, 9, capacity=0)\nG.add_edge(8, 2, capacity=2)\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 10, capacity=6)\nG.add_edge(9, 11, capacity=10)\nG.add_edge(9, 2, capacity=10)\nG.add_edge(5, 7, capacity=1)\n\n# Calculate the maximum flow from node 9 to node 7\nmax_flow = nx.maximum_flow_value(G, 9, 7)\n\nprint(\"Maximum flow from node 9 to node 7:\", max_flow)\n```"}, {"id": 80, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 6, capacity=3)\nG.add_edge(4, 5, capacity=8)\nG.add_edge(4, 1, capacity=7)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(6, 3, capacity=1)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(6, 7, capacity=0)\nG.add_edge(5, 1, capacity=3)\nG.add_edge(5, 4, capacity=3)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 5, capacity=7)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 5, capacity=10)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(2, 7, capacity=0)\nG.add_edge(2, 6, capacity=0)\nG.add_edge(7, 6, capacity=1)\nG.add_edge(7, 5, capacity=10)\nG.add_edge(7, 1, capacity=10)\nG.add_edge(7, 2, capacity=2)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(0, 5, capacity=3)\nG.add_edge(0, 1, capacity=6)\n\n# Calculate the maximum flow from node 7 to node 5\nmax_flow = nx.maximum_flow(G, 7, 5)[0]\n\nprint(\"Maximum flow from node 7 to node 5:\", max_flow)\n```"}, {"id": 81, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 4, capacity=5)\nG.add_edge(4, 5, capacity=3)\nG.add_edge(4, 6, capacity=3)\nG.add_edge(4, 7, capacity=8)\nG.add_edge(5, 2, capacity=5)\nG.add_edge(5, 9, capacity=1)\nG.add_edge(5, 8, capacity=8)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(6, 8, capacity=0)\nG.add_edge(7, 3, capacity=9)\nG.add_edge(7, 1, capacity=1)\nG.add_edge(8, 5, capacity=7)\nG.add_edge(8, 6, capacity=8)\nG.add_edge(8, 7, capacity=3)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 9, capacity=5)\nG.add_edge(2, 8, capacity=10)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(9, 0, capacity=1)\nG.add_edge(9, 8, capacity=3)\nG.add_edge(9, 1, capacity=7)\nG.add_edge(9, 3, capacity=0)\nG.add_edge(9, 5, capacity=0)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 9, capacity=2)\nG.add_edge(1, 8, capacity=1)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 9, capacity=5)\nG.add_edge(3, 0, capacity=7)\nG.add_edge(3, 2, capacity=0)\n\n# Calculate the maximum flow from node 2 to node 9\nmax_flow = nx.maximum_flow(G, 2, 9)[0]\n\nprint(\"Maximum flow from node 2 to node 9:\", max_flow)\n```"}, {"id": 82, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 6, 4), (5, 10, 4), (5, 9, 2), (5, 2, 7), (5, 4, 2), (5, 7, 7), (5, 1, 0),\n    (6, 9, 2), (6, 8, 5), (6, 1, 9),\n    (10, 9, 8), (10, 8, 9),\n    (9, 3, 3), (9, 11, 8), (9, 8, 7),\n    (2, 7, 9), (2, 5, 1), (2, 1, 9), (2, 10, 8),\n    (4, 7, 5), (4, 11, 7), (4, 2, 8), (4, 1, 0), (4, 5, 0),\n    (7, 9, 7), (7, 2, 5),\n    (8, 6, 5), (8, 7, 7),\n    (1, 10, 10), (1, 9, 5), (1, 4, 3), (1, 8, 7), (1, 5, 10), (1, 3, 0),\n    (3, 8, 7), (3, 12, 6), (3, 0, 8), (3, 1, 6), (3, 9, 8),\n    (11, 0, 6), (11, 1, 5), (11, 10, 8), (11, 2, 2), (11, 4, 7), (11, 7, 9), (11, 9, 0),\n    (12, 6, 8), (12, 9, 9), (12, 7, 8), (12, 8, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 4\nmax_flow = nx.maximum_flow_value(G, 3, 4)\n\nprint(\"Maximum flow from node 3 to node 4:\", max_flow)\n```"}, {"id": 83, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 7, capacity=2)\nG.add_edge(9, 11, capacity=9)\nG.add_edge(9, 6, capacity=3)\nG.add_edge(7, 11, capacity=8)\nG.add_edge(11, 8, capacity=2)\nG.add_edge(11, 10, capacity=4)\nG.add_edge(11, 1, capacity=5)\nG.add_edge(6, 7, capacity=10)\nG.add_edge(6, 11, capacity=6)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(8, 3, capacity=2)\nG.add_edge(8, 11, capacity=0)\nG.add_edge(8, 10, capacity=0)\nG.add_edge(10, 8, capacity=3)\nG.add_edge(10, 11, capacity=0)\nG.add_edge(1, 0, capacity=10)\nG.add_edge(1, 11, capacity=0)\nG.add_edge(0, 6, capacity=9)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 1, capacity=5)\nG.add_edge(4, 3, capacity=1)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(3, 11, capacity=9)\nG.add_edge(3, 8, capacity=8)\nG.add_edge(3, 9, capacity=7)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(2, 8, capacity=0)\nG.add_edge(5, 0, capacity=6)\n\n# Calculate the maximum flow from node 11 to node 2\nmax_flow = nx.maximum_flow(G, 11, 2)[0]\n\nprint(\"Maximum flow from node 11 to node 2:\", max_flow)\n```"}, {"id": 84, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 5, 3), (10, 7, 3), (10, 6, 6),\n    (5, 8, 3), (5, 1, 9), (5, 6, 1),\n    (7, 9, 1), (7, 6, 0),\n    (6, 9, 8), (6, 2, 1), (6, 8, 2), (6, 0, 10), (6, 7, 7),\n    (8, 3, 7), (8, 4, 10), (8, 6, 2), (8, 5, 9), (8, 0, 0),\n    (1, 0, 4), (1, 9, 4), (1, 5, 9), (1, 8, 9), (1, 3, 9),\n    (9, 3, 4), (9, 4, 5), (9, 0, 7), (9, 7, 5), (9, 6, 0),\n    (2, 3, 6), (2, 1, 2), (2, 0, 3), (2, 6, 0),\n    (0, 7, 6), (0, 2, 1), (0, 8, 8), (0, 4, 6), (0, 6, 0),\n    (3, 1, 3), (3, 4, 2), (3, 2, 2), (3, 5, 6), (3, 8, 7), (3, 9, 0),\n    (4, 7, 8), (4, 9, 8), (4, 8, 10), (4, 3, 5), (4, 0, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 4\nmax_flow = nx.maximum_flow(G, 6, 4)[0]\n\nprint(\"Maximum flow from node 6 to node 4:\", max_flow)\n```"}, {"id": 85, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 1, capacity=1)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(5, 1, capacity=4)\nG.add_edge(5, 4, capacity=10)\nG.add_edge(5, 7, capacity=8)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(1, 3, capacity=0)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(4, 5, capacity=6)\nG.add_edge(4, 6, capacity=6)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(6, 0, capacity=1)\nG.add_edge(6, 5, capacity=3)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(2, 3, capacity=7)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 6, capacity=0)\n\n# Calculate the maximum flow from node 4 to node 1\nmax_flow = nx.maximum_flow(G, 4, 1)[0]\n\nprint(\"Maximum flow from node 4 to node 1:\", max_flow)\n```"}, {"id": 86, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(6, 2, weight=2)\nG.add_edge(2, 5, weight=3)\nG.add_edge(2, 3, weight=2)\nG.add_edge(2, 7, weight=0)\nG.add_edge(5, 3, weight=2)\nG.add_edge(5, 1, weight=6)\nG.add_edge(5, 2, weight=4)\nG.add_edge(5, 4, weight=0)\nG.add_edge(5, 0, weight=0)\nG.add_edge(3, 7, weight=9)\nG.add_edge(3, 2, weight=2)\nG.add_edge(3, 4, weight=2)\nG.add_edge(3, 5, weight=3)\nG.add_edge(1, 7, weight=9)\nG.add_edge(1, 3, weight=3)\nG.add_edge(7, 2, weight=9)\nG.add_edge(7, 0, weight=1)\nG.add_edge(7, 4, weight=2)\nG.add_edge(7, 6, weight=3)\nG.add_edge(7, 3, weight=0)\nG.add_edge(4, 5, weight=7)\nG.add_edge(4, 0, weight=1)\nG.add_edge(4, 3, weight=0)\nG.add_edge(4, 7, weight=0)\nG.add_edge(0, 6, weight=4)\nG.add_edge(0, 5, weight=8)\nG.add_edge(0, 7, weight=7)\nG.add_edge(0, 2, weight=4)\n\n# Calculate the maximum flow from node 3 to node 5\nmax_flow = nx.maximum_flow_value(G, 3, 5)\n\nprint(\"Maximum flow from node 3 to node 5:\", max_flow)\n```"}, {"id": 87, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 9, capacity=8)\nG.add_edge(8, 0, capacity=5)\nG.add_edge(8, 3, capacity=3)\nG.add_edge(8, 4, capacity=0)\n\nG.add_edge(9, 7, capacity=7)\nG.add_edge(9, 3, capacity=8)\nG.add_edge(9, 1, capacity=4)\nG.add_edge(9, 4, capacity=0)\n\nG.add_edge(0, 3, capacity=5)\nG.add_edge(0, 2, capacity=6)\nG.add_edge(0, 7, capacity=8)\nG.add_edge(0, 8, capacity=0)\n\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 5, capacity=5)\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 7, capacity=4)\nG.add_edge(3, 8, capacity=0)\n\nG.add_edge(7, 3, capacity=9)\nG.add_edge(7, 5, capacity=5)\nG.add_edge(7, 9, capacity=9)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(7, 6, capacity=0)\n\nG.add_edge(1, 5, capacity=3)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(1, 6, capacity=0)\n\nG.add_edge(2, 7, capacity=2)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 6, capacity=7)\nG.add_edge(2, 8, capacity=5)\nG.add_edge(2, 5, capacity=5)\n\nG.add_edge(6, 1, capacity=5)\nG.add_edge(6, 4, capacity=1)\nG.add_edge(6, 9, capacity=7)\nG.add_edge(6, 7, capacity=2)\nG.add_edge(6, 0, capacity=8)\n\nG.add_edge(5, 9, capacity=7)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 8, capacity=4)\nG.add_edge(5, 1, capacity=8)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(5, 3, capacity=0)\n\nG.add_edge(4, 9, capacity=9)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 8, capacity=9)\nG.add_edge(4, 5, capacity=3)\n\n# Calculate the maximum flow from node 4 to node 5\nmax_flow = nx.maximum_flow(G, 4, 5)[0]\n\nprint(\"Maximum flow from node 4 to node 5:\", max_flow)\n```"}, {"id": 88, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(1, 7, weight=1)\nG.add_edge(1, 2, weight=4)\nG.add_edge(1, 8, weight=6)\nG.add_edge(1, 3, weight=0)\nG.add_edge(7, 5, weight=7)\nG.add_edge(7, 0, weight=0)\nG.add_edge(2, 4, weight=10)\nG.add_edge(2, 5, weight=9)\nG.add_edge(2, 1, weight=0)\nG.add_edge(2, 6, weight=0)\nG.add_edge(8, 3, weight=10)\nG.add_edge(8, 0, weight=7)\nG.add_edge(8, 6, weight=8)\nG.add_edge(8, 2, weight=9)\nG.add_edge(5, 2, weight=9)\nG.add_edge(5, 3, weight=4)\nG.add_edge(5, 0, weight=3)\nG.add_edge(5, 7, weight=0)\nG.add_edge(4, 7, weight=6)\nG.add_edge(4, 6, weight=1)\nG.add_edge(4, 5, weight=5)\nG.add_edge(4, 0, weight=1)\nG.add_edge(3, 1, weight=6)\nG.add_edge(3, 6, weight=8)\nG.add_edge(3, 0, weight=0)\nG.add_edge(0, 7, weight=2)\nG.add_edge(0, 3, weight=7)\nG.add_edge(6, 5, weight=8)\nG.add_edge(6, 2, weight=5)\nG.add_edge(6, 8, weight=4)\nG.add_edge(6, 1, weight=6)\nG.add_edge(6, 4, weight=10)\nG.add_edge(6, 7, weight=4)\nG.add_edge(6, 3, weight=0)\n\n# Calculate the maximum flow from node 0 to node 2\nmax_flow = nx.maximum_flow(G, 0, 2)\n\n# Print the maximum flow value\nprint(max_flow[0])\n```"}, {"id": 89, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 3, capacity=3)\nG.add_edge(7, 2, capacity=2)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 8, capacity=3)\nG.add_edge(3, 1, capacity=7)\nG.add_edge(3, 6, capacity=2)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(2, 4, capacity=3)\nG.add_edge(4, 7, capacity=10)\nG.add_edge(4, 1, capacity=1)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(8, 1, capacity=7)\nG.add_edge(8, 5, capacity=9)\nG.add_edge(1, 5, capacity=1)\nG.add_edge(6, 5, capacity=3)\nG.add_edge(6, 0, capacity=4)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 4, capacity=8)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 2, capacity=9)\nG.add_edge(5, 4, capacity=1)\nG.add_edge(5, 6, capacity=6)\n\n# Calculate the maximum flow from node 5 to node 6\nmax_flow = nx.maximum_flow(G, 5, 6)[0]\n\nprint(\"Maximum flow from node 5 to node 6:\", max_flow)\n```"}, {"id": 90, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 10, 1), (3, 11, 3), (3, 12, 5), (3, 7, 0),\n    (10, 5, 1), (10, 4, 1), (10, 11, 4), (10, 7, 3), (10, 13, 6), (10, 8, 1), (10, 1, 1), (10, 3, 0),\n    (11, 6, 10), (11, 12, 7), (11, 7, 5), (11, 13, 7), (11, 8, 1), (11, 1, 7), (11, 3, 0), (11, 10, 0), (11, 9, 0),\n    (12, 13, 7), (12, 3, 4), (12, 5, 3), (12, 9, 4),\n    (5, 6, 5), (5, 10, 9),\n    (4, 2, 8), (4, 7, 4), (4, 13, 6), (4, 8, 2),\n    (7, 13, 1), (7, 3, 5), (7, 8, 5), (7, 1, 3),\n    (13, 5, 2), (13, 11, 1), (13, 7, 0),\n    (8, 10, 7), (8, 11, 4), (8, 13, 4), (8, 7, 0),\n    (1, 10, 4), (1, 6, 3), (1, 12, 7), (1, 8, 4), (1, 7, 0),\n    (6, 12, 3), (6, 0, 7), (6, 4, 4), (6, 2, 9), (6, 9, 6), (6, 11, 2), (6, 1, 0),\n    (9, 11, 7), (9, 8, 7), (9, 2, 6), (9, 12, 0),\n    (0, 7, 6), (0, 3, 9), (0, 8, 2), (0, 1, 4), (0, 4, 1), (0, 2, 2), (0, 11, 2),\n    (2, 13, 10)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 11\nmax_flow = nx.maximum_flow(G, 7, 11)[0]\n\nprint(\"Maximum flow from node 7 to node 11:\", max_flow)\n```"}, {"id": 91, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 4, capacity=4)\nG.add_edge(2, 1, capacity=1)\nG.add_edge(2, 7, capacity=9)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(4, 6, capacity=7)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(1, 8, capacity=7)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(0, 8, capacity=4)\nG.add_edge(0, 2, capacity=10)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(6, 0, capacity=2)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 4, capacity=1)\nG.add_edge(5, 1, capacity=10)\nG.add_edge(5, 7, capacity=7)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(5, 3, capacity=0)\n\n# Calculate the maximum flow from node 3 to node 1\nmax_flow = nx.maximum_flow(G, 3, 1)[0]\n\nprint(\"Maximum flow from node 3 to node 1:\", max_flow)\n```"}, {"id": 92, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(4, 7, weight=8)\nG.add_edge(4, 5, weight=0)\nG.add_edge(4, 1, weight=0)\nG.add_edge(4, 10, weight=0)\nG.add_edge(7, 5, weight=1)\nG.add_edge(7, 1, weight=1)\nG.add_edge(7, 8, weight=6)\nG.add_edge(7, 3, weight=2)\nG.add_edge(5, 2, weight=2)\nG.add_edge(5, 4, weight=3)\nG.add_edge(5, 8, weight=7)\nG.add_edge(5, 7, weight=2)\nG.add_edge(1, 4, weight=9)\nG.add_edge(1, 10, weight=2)\nG.add_edge(1, 7, weight=6)\nG.add_edge(1, 9, weight=1)\nG.add_edge(1, 6, weight=0)\nG.add_edge(8, 0, weight=4)\nG.add_edge(8, 7, weight=0)\nG.add_edge(3, 0, weight=9)\nG.add_edge(3, 7, weight=0)\nG.add_edge(0, 10, weight=2)\nG.add_edge(0, 6, weight=6)\nG.add_edge(0, 8, weight=0)\nG.add_edge(0, 3, weight=0)\nG.add_edge(10, 7, weight=3)\nG.add_edge(10, 9, weight=7)\nG.add_edge(10, 5, weight=10)\nG.add_edge(10, 2, weight=9)\nG.add_edge(10, 4, weight=4)\nG.add_edge(10, 0, weight=0)\nG.add_edge(6, 9, weight=9)\nG.add_edge(6, 1, weight=7)\nG.add_edge(6, 3, weight=6)\nG.add_edge(6, 0, weight=0)\nG.add_edge(9, 5, weight=2)\nG.add_edge(9, 2, weight=4)\nG.add_edge(9, 1, weight=6)\nG.add_edge(9, 8, weight=8)\nG.add_edge(9, 7, weight=8)\nG.add_edge(2, 7, weight=4)\nG.add_edge(2, 9, weight=3)\n\n# Calculate the maximum flow from node 7 to node 4\nmax_flow = nx.maximum_flow_value(G, 7, 4)\n\nprint(\"Maximum flow from node 7 to node 4:\", max_flow)\n```"}, {"id": 93, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(0, 7, weight=9)\nG.add_edge(0, 3, weight=9)\nG.add_edge(0, 5, weight=10)\nG.add_edge(0, 1, weight=4)\nG.add_edge(0, 4, weight=1)\nG.add_edge(7, 3, weight=8)\nG.add_edge(7, 1, weight=1)\nG.add_edge(7, 0, weight=9)\nG.add_edge(3, 5, weight=9)\nG.add_edge(3, 1, weight=10)\nG.add_edge(3, 0, weight=3)\nG.add_edge(5, 6, weight=5)\nG.add_edge(5, 1, weight=1)\nG.add_edge(5, 4, weight=7)\nG.add_edge(5, 0, weight=7)\nG.add_edge(5, 3, weight=7)\nG.add_edge(1, 6, weight=8)\nG.add_edge(1, 3, weight=0)\nG.add_edge(4, 0, weight=10)\nG.add_edge(4, 7, weight=6)\nG.add_edge(4, 3, weight=1)\nG.add_edge(4, 5, weight=10)\nG.add_edge(4, 6, weight=6)\nG.add_edge(6, 5, weight=10)\nG.add_edge(6, 1, weight=0)\nG.add_edge(6, 4, weight=0)\nG.add_edge(2, 1, weight=3)\nG.add_edge(2, 5, weight=6)\n\n# Calculate the maximum flow from node 3 to node 6\nmax_flow = nx.maximum_flow_value(G, 3, 6)\n\nprint(\"Maximum flow from node 3 to node 6:\", max_flow)\n```"}, {"id": 94, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 9, capacity=5)\nG.add_edge(2, 10, capacity=7)\nG.add_edge(2, 5, capacity=8)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(9, 4, capacity=9)\nG.add_edge(9, 6, capacity=5)\nG.add_edge(9, 8, capacity=3)\nG.add_edge(10, 1, capacity=10)\nG.add_edge(10, 5, capacity=4)\nG.add_edge(10, 3, capacity=1)\nG.add_edge(10, 4, capacity=6)\nG.add_edge(10, 8, capacity=1)\nG.add_edge(10, 2, capacity=0)\nG.add_edge(5, 7, capacity=2)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(4, 6, capacity=2)\nG.add_edge(4, 2, capacity=3)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(4, 9, capacity=0)\nG.add_edge(6, 0, capacity=1)\nG.add_edge(6, 9, capacity=9)\nG.add_edge(8, 10, capacity=2)\nG.add_edge(8, 0, capacity=6)\nG.add_edge(8, 7, capacity=3)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(1, 7, capacity=6)\nG.add_edge(1, 8, capacity=5)\nG.add_edge(1, 10, capacity=0)\nG.add_edge(3, 6, capacity=8)\nG.add_edge(3, 8, capacity=3)\nG.add_edge(3, 9, capacity=6)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 5, capacity=2)\nG.add_edge(7, 0, capacity=9)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(0, 8, capacity=4)\nG.add_edge(0, 6, capacity=0)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(11, 10, capacity=4)\nG.add_edge(11, 7, capacity=8)\n\n# Calculate the maximum flow from node 6 to node 8\nmax_flow = nx.maximum_flow_value(G, 6, 8)\n\nprint(\"Maximum flow from node 6 to node 8:\", max_flow)\n```"}, {"id": 95, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 6, capacity=2)\nG.add_edge(2, 9, capacity=9)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(9, 1, capacity=4)\nG.add_edge(9, 2, capacity=4)\nG.add_edge(9, 0, capacity=6)\nG.add_edge(3, 7, capacity=9)\nG.add_edge(3, 9, capacity=5)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 7, capacity=2)\nG.add_edge(0, 9, capacity=0)\nG.add_edge(7, 1, capacity=2)\nG.add_edge(7, 5, capacity=1)\nG.add_edge(7, 0, capacity=0)\nG.add_edge(5, 4, capacity=9)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 5, capacity=0)\nG.add_edge(8, 9, capacity=2)\n\n# Calculate the maximum flow from node 9 to node 4\nmax_flow = nx.maximum_flow(G, 9, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 96, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (4, 10, 7), (4, 1, 5),\n    (10, 7, 1), (10, 1, 8), (10, 6, 6), (10, 4, 4),\n    (1, 6, 7), (1, 10, 9), (1, 8, 2),\n    (7, 1, 6), (7, 4, 7), (7, 0, 2), (7, 3, 4), (7, 5, 0),\n    (6, 4, 1), (6, 10, 5), (6, 7, 7), (6, 8, 6), (6, 1, 7),\n    (8, 6, 8), (8, 4, 8), (8, 10, 9), (8, 0, 2), (8, 3, 4), (8, 9, 7), (8, 5, 0),\n    (0, 3, 5), (0, 9, 10), (0, 1, 3), (0, 6, 2), (0, 2, 10), (0, 10, 10), (0, 5, 0), (0, 7, 0), (0, 8, 0),\n    (3, 9, 6), (3, 7, 2), (3, 8, 3), (3, 2, 6), (3, 0, 3), (3, 5, 0),\n    (9, 8, 3), (9, 1, 5), (9, 10, 1),\n    (2, 8, 3), (2, 1, 9), (2, 5, 6),\n    (5, 0, 6), (5, 3, 4), (5, 7, 2), (5, 8, 9), (5, 6, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 0\nmax_flow = nx.maximum_flow(G, 5, 0)[0]\n\nprint(\"Maximum flow from node 5 to node 0:\", max_flow)\n```"}, {"id": 97, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 1, capacity=9)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(1, 6, capacity=2)\nG.add_edge(1, 0, capacity=1)\nG.add_edge(6, 2, capacity=9)\nG.add_edge(6, 0, capacity=5)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(4, 1, capacity=5)\nG.add_edge(0, 1, capacity=8)\nG.add_edge(0, 6, capacity=2)\nG.add_edge(0, 3, capacity=10)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(8, 0, capacity=7)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(5, 1, capacity=7)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(7, 3, capacity=8)\n\n# Calculate the maximum flow from node 3 to node 2\nmax_flow = nx.maximum_flow(G, 3, 2)[0]\n\nprint(\"Maximum flow from node 3 to node 2:\", max_flow)\n```"}, {"id": 98, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 4, 6), (10, 7, 1), (10, 3, 9), (10, 11, 8), (10, 0, 4), (10, 12, 0),\n    (4, 6, 7), (4, 7, 7), (4, 1, 8), (4, 3, 6), (4, 12, 0), (4, 9, 0),\n    (7, 2, 4), (7, 8, 5), (7, 12, 7), (7, 1, 0), (7, 10, 0), (7, 4, 0), (7, 11, 0),\n    (3, 9, 3), (3, 5, 5),\n    (11, 0, 8), (11, 6, 7), (11, 13, 6), (11, 7, 8), (11, 5, 3), (11, 10, 0),\n    (0, 6, 6), (0, 2, 2), (0, 12, 3), (0, 3, 4), (0, 11, 6),\n    (6, 8, 6), (6, 0, 3),\n    (1, 4, 9), (1, 8, 9), (1, 7, 10), (1, 12, 0),\n    (2, 0, 9), (2, 10, 7), (2, 4, 7), (2, 6, 6),\n    (8, 9, 8), (8, 12, 3), (8, 7, 8), (8, 5, 8), (8, 10, 6), (8, 4, 6), (8, 13, 6), (8, 2, 10),\n    (12, 7, 1), (12, 1, 2), (12, 10, 4), (12, 4, 8), (12, 9, 5),\n    (9, 4, 3), (9, 12, 0),\n    (5, 11, 1), (5, 4, 7), (5, 8, 9), (5, 9, 3),\n    (13, 12, 8), (13, 5, 7)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 12 to node 7\nmax_flow = nx.maximum_flow_value(G, 12, 7)\n\nprint(\"Maximum flow from node 12 to node 7:\", max_flow)\n```"}, {"id": 99, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 6, 6), (3, 4, 5), (3, 8, 1), (3, 2, 10), (3, 9, 0),\n    (6, 4, 9), (6, 9, 10), (6, 8, 2),\n    (4, 8, 6), (4, 5, 3), (4, 7, 0),\n    (8, 0, 2), (8, 5, 8), (8, 2, 10), (8, 1, 3), (8, 6, 5), (8, 4, 10),\n    (2, 3, 2), (2, 1, 2), (2, 9, 9), (2, 7, 0), (2, 8, 0), (2, 0, 0),\n    (9, 7, 1), (9, 5, 8), (9, 3, 9), (9, 6, 10), (9, 4, 4),\n    (5, 6, 1), (5, 7, 5), (5, 0, 9), (5, 4, 0),\n    (0, 5, 5), (0, 2, 3), (0, 1, 1), (0, 8, 2),\n    (1, 4, 3), (1, 9, 6), (1, 7, 5), (1, 3, 1),\n    (7, 2, 10), (7, 4, 7), (7, 9, 9)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 2\nmax_flow = nx.maximum_flow(G, 7, 2)[0]\n\nprint(\"Maximum flow from node 7 to node 2:\", max_flow)\n```"}, {"id": 100, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (1, 9, 1), (1, 6, 8), (1, 7, 6), (1, 3, 5), (1, 4, 9), (1, 0, 0),\n    (9, 6, 10), (9, 8, 7), (9, 5, 10), (9, 3, 8), (9, 2, 6),\n    (6, 1, 2), (6, 0, 8), (6, 9, 10),\n    (7, 5, 2), (7, 1, 0), (7, 3, 0),\n    (3, 2, 5), (3, 7, 7), (3, 5, 2), (3, 8, 0), (3, 1, 0),\n    (4, 0, 7), (4, 5, 2),\n    (8, 3, 6), (8, 4, 3), (8, 0, 0), (8, 5, 0),\n    (5, 3, 1), (5, 7, 5), (5, 8, 2), (5, 0, 0), (5, 4, 0),\n    (2, 0, 1), (2, 7, 9), (2, 3, 7),\n    (0, 8, 3), (0, 5, 7), (0, 4, 5), (0, 1, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 7\nmax_flow = nx.maximum_flow_value(G, 0, 7)\n\nprint(\"Maximum flow from node 0 to node 7:\", max_flow)\n```"}, {"id": 101, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 1, capacity=4)\nG.add_edge(0, 7, capacity=10)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(1, 4, capacity=0)\nG.add_edge(7, 0, capacity=10)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(2, 6, capacity=7)\nG.add_edge(2, 3, capacity=7)\nG.add_edge(4, 5, capacity=6)\nG.add_edge(4, 1, capacity=4)\nG.add_edge(4, 6, capacity=2)\nG.add_edge(4, 3, capacity=2)\nG.add_edge(4, 0, capacity=9)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(5, 3, capacity=4)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 4, capacity=5)\nG.add_edge(3, 2, capacity=3)\nG.add_edge(3, 5, capacity=2)\n\n# Calculate the maximum flow from node 7 to node 1\nmax_flow = nx.maximum_flow(G, 7, 1)[0]\n\nprint(max_flow)\n```"}, {"id": 102, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (6, 2, 7), (6, 12, 10), (6, 11, 9), (6, 14, 9), (6, 7, 10), (6, 0, 4), (6, 8, 2),\n    (2, 12, 10), (2, 4, 9), (2, 11, 10), (2, 14, 2), (2, 9, 6), (2, 7, 9),\n    (12, 11, 6), (12, 10, 5), (12, 8, 4),\n    (11, 9, 6), (11, 6, 5),\n    (14, 9, 6), (14, 10, 2), (14, 7, 7), (14, 13, 9), (14, 6, 6),\n    (7, 8, 10), (7, 4, 1), (7, 9, 5),\n    (0, 3, 4), (0, 11, 9), (0, 14, 8),\n    (8, 12, 5), (8, 14, 3), (8, 1, 7), (8, 7, 8), (8, 13, 4),\n    (4, 2, 7), (4, 3, 2),\n    (9, 10, 2), (9, 7, 10), (9, 6, 1), (9, 3, 9), (9, 4, 3), (9, 14, 9),\n    (10, 0, 6), (10, 8, 8), (10, 3, 6), (10, 4, 10),\n    (13, 5, 1), (13, 6, 10), (13, 2, 6), (13, 12, 2), (13, 4, 5), (13, 10, 10), (13, 7, 6), (13, 8, 0),\n    (3, 11, 4), (3, 14, 6), (3, 9, 10), (3, 13, 10), (3, 6, 8),\n    (1, 7, 4), (1, 13, 10), (1, 0, 4), (1, 2, 9), (1, 3, 9), (1, 4, 2), (1, 14, 3),\n    (5, 0, 9), (5, 8, 5), (5, 2, 4), (5, 12, 1), (5, 3, 1), (5, 4, 5), (5, 14, 5), (5, 9, 10), (5, 13, 0)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 8 to node 5\nmax_flow = nx.maximum_flow_value(G, 8, 5)\n\nprint(max_flow)\n```"}, {"id": 103, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 2, 8), (11, 9, 8), (11, 10, 1), (11, 0, 7), (11, 6, 1), (11, 1, 0),\n    (2, 10, 2), (2, 3, 10), (2, 12, 5), (2, 6, 3), (2, 11, 4),\n    (9, 8, 2), (9, 5, 9), (9, 6, 7), (9, 1, 9),\n    (10, 0, 6), (10, 11, 3), (10, 9, 3), (10, 3, 0), (10, 2, 0),\n    (0, 6, 10), (0, 1, 4), (0, 4, 7), (0, 3, 3),\n    (6, 2, 4), (6, 4, 7), (6, 7, 4), (6, 8, 3), (6, 12, 6), (6, 5, 1), (6, 0, 0),\n    (3, 12, 4), (3, 1, 2), (3, 11, 3), (3, 10, 10), (3, 8, 10), (3, 0, 0), (3, 4, 0),\n    (12, 1, 6), (12, 9, 6), (12, 4, 4), (12, 8, 8),\n    (8, 12, 7), (8, 5, 6), (8, 1, 2), (8, 11, 10), (8, 9, 2), (8, 4, 9), (8, 7, 5),\n    (5, 8, 1),\n    (1, 11, 9), (1, 2, 8), (1, 9, 8), (1, 0, 0),\n    (4, 7, 9), (4, 3, 8), (4, 0, 1), (4, 1, 8), (4, 2, 9),\n    (7, 11, 5)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 0 to node 10\nmax_flow = nx.maximum_flow_value(G, 0, 10)\n\nprint(\"Maximum flow from node 0 to node 10:\", max_flow)\n```"}, {"id": 104, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 8, capacity=9)\nG.add_edge(3, 2, capacity=5)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(8, 7, capacity=6)\nG.add_edge(8, 2, capacity=4)\nG.add_edge(8, 6, capacity=5)\nG.add_edge(8, 3, capacity=3)\nG.add_edge(8, 0, capacity=0)\nG.add_edge(2, 5, capacity=6)\nG.add_edge(2, 6, capacity=1)\nG.add_edge(2, 8, capacity=0)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(4, 3, capacity=0)\nG.add_edge(4, 5, capacity=0)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(7, 8, capacity=0)\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 1, capacity=6)\nG.add_edge(5, 4, capacity=3)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(1, 3, capacity=10)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(0, 6, capacity=10)\nG.add_edge(0, 8, capacity=10)\n\n# Calculate the maximum flow from node 0 to node 4\nmax_flow = nx.maximum_flow_value(G, 0, 4)\n\nprint(\"Maximum flow from node 0 to node 4:\", max_flow)\n```"}, {"id": 105, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 3, capacity=10)\nG.add_edge(1, 9, capacity=8)\nG.add_edge(3, 0, capacity=7)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(9, 2, capacity=3)\nG.add_edge(9, 8, capacity=6)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(4, 2, capacity=10)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(6, 0, capacity=1)\nG.add_edge(6, 7, capacity=6)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 5, capacity=5)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(7, 2, capacity=1)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 1, capacity=5)\n\n# Calculate the maximum flow from node 0 to node 3\nmax_flow = nx.maximum_flow(G, 0, 3)[0]\n\nprint(\"Maximum flow from node 0 to node 3:\", max_flow)\n```"}, {"id": 106, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (6, 9, 2), (6, 0, 5), (6, 7, 7), (6, 8, 3), (6, 3, 5),\n    (9, 0, 5), (9, 6, 7), (9, 3, 0),\n    (0, 4, 2), (0, 2, 10),\n    (7, 1, 9), (7, 10, 9), (7, 9, 8), (7, 6, 0),\n    (8, 1, 2), (8, 6, 8), (8, 5, 6), (8, 9, 2), (8, 7, 7),\n    (3, 6, 2), (3, 9, 2), (3, 4, 10), (3, 11, 1),\n    (4, 11, 2), (4, 3, 0),\n    (2, 8, 6), (2, 3, 1),\n    (1, 5, 4), (1, 0, 8), (1, 8, 8), (1, 3, 4),\n    (10, 6, 2), (10, 11, 4), (10, 8, 5), (10, 7, 0),\n    (5, 0, 10), (5, 2, 7), (5, 7, 10), (5, 8, 6), (5, 10, 5),\n    (11, 7, 9), (11, 1, 9), (11, 5, 2), (11, 4, 4), (11, 3, 0), (11, 10, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 11\nmax_flow = nx.maximum_flow_value(G, 3, 11)\n\nprint(\"Maximum flow from node 3 to node 11:\", max_flow)\n```"}, {"id": 107, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(8, 12, weight=2)\nG.add_edge(8, 10, weight=10)\nG.add_edge(8, 1, weight=0)\nG.add_edge(12, 6, weight=8)\nG.add_edge(12, 11, weight=8)\nG.add_edge(10, 1, weight=7)\nG.add_edge(10, 3, weight=7)\nG.add_edge(10, 9, weight=7)\nG.add_edge(10, 4, weight=0)\nG.add_edge(10, 8, weight=0)\nG.add_edge(6, 11, weight=3)\nG.add_edge(11, 5, weight=5)\nG.add_edge(11, 1, weight=4)\nG.add_edge(11, 0, weight=4)\nG.add_edge(11, 3, weight=6)\nG.add_edge(11, 6, weight=5)\nG.add_edge(11, 4, weight=2)\nG.add_edge(1, 2, weight=1)\nG.add_edge(1, 12, weight=4)\nG.add_edge(1, 7, weight=3)\nG.add_edge(1, 8, weight=10)\nG.add_edge(1, 11, weight=0)\nG.add_edge(1, 5, weight=0)\nG.add_edge(3, 10, weight=7)\nG.add_edge(3, 11, weight=6)\nG.add_edge(3, 5, weight=1)\nG.add_edge(9, 6, weight=10)\nG.add_edge(9, 0, weight=4)\nG.add_edge(5, 1, weight=9)\nG.add_edge(5, 2, weight=9)\nG.add_edge(5, 3, weight=0)\nG.add_edge(2, 5, weight=4)\nG.add_edge(2, 0, weight=7)\nG.add_edge(0, 3, weight=1)\nG.add_edge(4, 10, weight=10)\nG.add_edge(4, 8, weight=7)\nG.add_edge(4, 3, weight=5)\nG.add_edge(4, 6, weight=3)\nG.add_edge(4, 11, weight=0)\n\n# Calculate the maximum flow from node 3 to node 10\nmax_flow = nx.maximum_flow_value(G, 3, 10)\n\nprint(\"Maximum flow from node 3 to node 10:\", max_flow)\n```"}, {"id": 108, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 2, capacity=8)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(2, 0, capacity=9)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 5, capacity=5)\nG.add_edge(2, 7, capacity=9)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(1, 5, capacity=2)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(5, 2, capacity=9)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 4, capacity=7)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(6, 4, capacity=6)\n\n# Calculate the maximum flow from node 1 to node 3\nmax_flow = nx.maximum_flow(G, 1, 3)[0]\n\nprint(max_flow)\n```"}, {"id": 109, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 0, capacity=5)\nG.add_edge(5, 2, capacity=8)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 6, capacity=3)\nG.add_edge(0, 5, capacity=3)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 5, capacity=0)\nG.add_edge(3, 6, capacity=8)\nG.add_edge(3, 4, capacity=8)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(6, 4, capacity=10)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(4, 2, capacity=9)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 5, capacity=8)\nG.add_edge(7, 0, capacity=4)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(7, 3, capacity=1)\nG.add_edge(7, 6, capacity=9)\nG.add_edge(1, 3, capacity=2)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 7, capacity=7)\n\n# Calculate the maximum flow from node 0 to node 6\nmax_flow = nx.maximum_flow_value(G, 0, 6)\n\nprint(\"Maximum flow from node 0 to node 6:\", max_flow)\n```"}, {"id": 110, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(10, 8, weight=3)\nG.add_edge(10, 9, weight=1)\nG.add_edge(10, 3, weight=6)\nG.add_edge(10, 7, weight=5)\nG.add_edge(8, 9, weight=6)\nG.add_edge(8, 4, weight=1)\nG.add_edge(8, 7, weight=8)\nG.add_edge(9, 3, weight=5)\nG.add_edge(9, 4, weight=6)\nG.add_edge(9, 7, weight=2)\nG.add_edge(3, 4, weight=7)\nG.add_edge(3, 7, weight=1)\nG.add_edge(3, 6, weight=3)\nG.add_edge(7, 2, weight=8)\nG.add_edge(7, 0, weight=2)\nG.add_edge(7, 9, weight=5)\nG.add_edge(7, 4, weight=7)\nG.add_edge(4, 7, weight=8)\nG.add_edge(4, 2, weight=4)\nG.add_edge(4, 5, weight=4)\nG.add_edge(4, 8, weight=10)\nG.add_edge(4, 6, weight=4)\nG.add_edge(4, 0, weight=0)\nG.add_edge(6, 1, weight=10)\nG.add_edge(6, 2, weight=1)\nG.add_edge(6, 0, weight=3)\nG.add_edge(6, 4, weight=0)\nG.add_edge(2, 8, weight=9)\nG.add_edge(2, 9, weight=4)\nG.add_edge(2, 1, weight=6)\nG.add_edge(2, 7, weight=10)\nG.add_edge(2, 4, weight=0)\nG.add_edge(0, 4, weight=10)\nG.add_edge(5, 8, weight=8)\nG.add_edge(5, 6, weight=10)\nG.add_edge(5, 4, weight=0)\nG.add_edge(5, 1, weight=0)\nG.add_edge(1, 5, weight=5)\nG.add_edge(1, 9, weight=10)\nG.add_edge(1, 2, weight=0)\nG.add_edge(1, 6, weight=0)\n\n# Calculate the maximum flow from node 0 to node 5\nmax_flow = nx.maximum_flow_value(G, 0, 5)\n\nprint(\"Maximum flow from node 0 to node 5:\", max_flow)\n```"}, {"id": 111, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (12, 1, 4),\n    (1, 4, 7), (1, 6, 10), (1, 7, 9),\n    (4, 0, 3), (4, 2, 3),\n    (6, 0, 10), (6, 7, 5), (6, 12, 1), (6, 4, 6),\n    (7, 3, 9), (7, 13, 9), (7, 1, 0),\n    (11, 2, 2), (11, 8, 8), (11, 9, 7), (11, 1, 2), (11, 10, 0),\n    (2, 9, 3), (2, 1, 10),\n    (8, 7, 6), (8, 2, 9), (8, 10, 1), (8, 3, 0),\n    (9, 0, 8), (9, 1, 3),\n    (10, 6, 3), (10, 12, 8), (10, 11, 2), (10, 8, 0), (10, 5, 0),\n    (0, 2, 4), (0, 6, 3),\n    (13, 5, 2), (13, 9, 1), (13, 7, 0),\n    (5, 6, 4), (5, 9, 2), (5, 10, 6), (5, 13, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 1 to node 11\nmax_flow = nx.maximum_flow(G, 1, 11)[0]\n\nprint(\"Maximum flow from node 1 to node 11:\", max_flow)\n```"}, {"id": 112, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 11, capacity=7)\nG.add_edge(2, 9, capacity=6)\nG.add_edge(11, 5, capacity=5)\nG.add_edge(11, 0, capacity=6)\nG.add_edge(11, 2, capacity=0)\nG.add_edge(9, 8, capacity=8)\nG.add_edge(9, 2, capacity=5)\nG.add_edge(9, 11, capacity=3)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(5, 7, capacity=7)\nG.add_edge(5, 4, capacity=5)\nG.add_edge(5, 11, capacity=0)\nG.add_edge(0, 11, capacity=8)\nG.add_edge(0, 9, capacity=1)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(7, 0, capacity=7)\nG.add_edge(7, 6, capacity=9)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(7, 1, capacity=0)\nG.add_edge(1, 6, capacity=9)\nG.add_edge(1, 7, capacity=6)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(4, 11, capacity=10)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(4, 6, capacity=10)\nG.add_edge(10, 5, capacity=4)\nG.add_edge(10, 6, capacity=6)\nG.add_edge(10, 2, capacity=2)\n\n# Calculate the maximum flow from node 2 to node 7\nmax_flow = nx.maximum_flow_value(G, 2, 7)\n\nprint(\"Maximum flow from node 2 to node 7:\", max_flow)\n```"}, {"id": 113, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 4, capacity=2)\nG.add_edge(8, 6, capacity=6)\nG.add_edge(8, 0, capacity=6)\nG.add_edge(8, 3, capacity=3)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 5, capacity=7)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 9, capacity=1)\nG.add_edge(6, 8, capacity=0)\nG.add_edge(0, 2, capacity=6)\nG.add_edge(0, 6, capacity=8)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(3, 8, capacity=4)\nG.add_edge(5, 1, capacity=10)\nG.add_edge(5, 3, capacity=3)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(1, 9, capacity=7)\nG.add_edge(1, 5, capacity=4)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 4, capacity=7)\nG.add_edge(1, 6, capacity=4)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(9, 7, capacity=3)\nG.add_edge(9, 2, capacity=5)\nG.add_edge(9, 0, capacity=9)\nG.add_edge(9, 1, capacity=5)\nG.add_edge(9, 6, capacity=0)\nG.add_edge(2, 0, capacity=7)\nG.add_edge(2, 1, capacity=1)\nG.add_edge(2, 5, capacity=10)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(7, 6, capacity=10)\nG.add_edge(7, 1, capacity=4)\nG.add_edge(7, 5, capacity=6)\nG.add_edge(7, 8, capacity=3)\n\n# Calculate the maximum flow from node 8 to node 4\nmax_flow = nx.maximum_flow_value(G, 8, 4)\n\nprint(max_flow)\n```"}, {"id": 114, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (6, 0, 4), (6, 1, 9), (6, 4, 9), (6, 7, 6), (6, 3, 10),\n    (0, 1, 7), (0, 7, 6), (0, 6, 4), (0, 4, 0),\n    (1, 4, 8), (1, 3, 9), (1, 2, 5), (1, 6, 6),\n    (4, 5, 8), (4, 0, 5), (4, 6, 0),\n    (7, 3, 1), (7, 2, 7), (7, 6, 9), (7, 0, 7), (7, 1, 5), (7, 4, 2), (7, 5, 0),\n    (3, 1, 3), (3, 4, 3), (3, 7, 8), (3, 6, 0),\n    (2, 5, 10), (2, 1, 4), (2, 7, 2), (2, 3, 6),\n    (5, 6, 10), (5, 0, 4), (5, 1, 7), (5, 7, 2), (5, 4, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 7\nmax_flow = nx.maximum_flow_value(G, 6, 7)\n\nprint(\"Maximum flow from node 6 to node 7:\", max_flow)\n```"}, {"id": 115, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nG.add_edge(13, 6, weight=3)\nG.add_edge(13, 9, weight=5)\nG.add_edge(13, 4, weight=4)\nG.add_edge(6, 2, weight=1)\nG.add_edge(6, 13, weight=4)\nG.add_edge(6, 11, weight=0)\nG.add_edge(9, 12, weight=4)\nG.add_edge(9, 2, weight=10)\nG.add_edge(9, 13, weight=1)\nG.add_edge(9, 0, weight=5)\nG.add_edge(2, 11, weight=8)\nG.add_edge(12, 6, weight=8)\nG.add_edge(12, 0, weight=1)\nG.add_edge(12, 3, weight=5)\nG.add_edge(0, 9, weight=10)\nG.add_edge(0, 6, weight=2)\nG.add_edge(11, 4, weight=10)\nG.add_edge(11, 6, weight=9)\nG.add_edge(11, 2, weight=4)\nG.add_edge(3, 12, weight=5)\nG.add_edge(3, 10, weight=1)\nG.add_edge(3, 1, weight=1)\nG.add_edge(3, 13, weight=4)\nG.add_edge(3, 6, weight=4)\nG.add_edge(10, 12, weight=1)\nG.add_edge(10, 2, weight=3)\nG.add_edge(10, 11, weight=5)\nG.add_edge(1, 0, weight=7)\nG.add_edge(5, 1, weight=9)\nG.add_edge(5, 6, weight=2)\nG.add_edge(5, 9, weight=10)\nG.add_edge(5, 2, weight=2)\nG.add_edge(8, 9, weight=5)\nG.add_edge(8, 11, weight=4)\nG.add_edge(8, 10, weight=4)\nG.add_edge(7, 13, weight=8)\nG.add_edge(7, 12, weight=7)\n\n# Calculate the maximum flow from node 2 to node 0\nmax_flow = nx.maximum_flow_value(G, 2, 0)\n\nprint(\"Maximum flow from node 2 to node 0:\", max_flow)\n```"}, {"id": 116, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (12, 0, 3), (12, 10, 5), (12, 11, 9), (12, 6, 7),\n    (0, 10, 3), (0, 7, 8), (0, 6, 5), (0, 12, 8), (0, 5, 4), (0, 2, 4), (0, 8, 7), (0, 1, 0),\n    (10, 7, 10), (10, 6, 6), (10, 12, 5), (10, 4, 3), (10, 3, 1), (10, 2, 3), (10, 0, 8),\n    (11, 1, 3),\n    (6, 12, 6), (6, 4, 1), (6, 3, 4),\n    (7, 12, 7), (7, 2, 1), (7, 1, 9),\n    (5, 3, 5), (5, 0, 1), (5, 11, 5), (5, 6, 1),\n    (2, 0, 8), (2, 10, 9), (2, 11, 1), (2, 7, 6), (2, 6, 10), (2, 9, 4), (2, 12, 10), (2, 4, 3), (2, 3, 1),\n    (8, 0, 10), (8, 11, 3), (8, 6, 6), (8, 9, 2), (8, 4, 8), (8, 2, 7),\n    (4, 1, 6), (4, 10, 5), (4, 11, 3), (4, 6, 8), (4, 9, 4), (4, 12, 10),\n    (3, 0, 2), (3, 1, 4), (3, 10, 7), (3, 6, 8), (3, 4, 10),\n    (1, 11, 6), (1, 5, 10), (1, 3, 6), (1, 2, 3), (1, 0, 4), (1, 4, 0),\n    (9, 3, 4), (9, 1, 4), (9, 10, 6), (9, 11, 9)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 4 to node 8\nmax_flow = nx.maximum_flow_value(G, 4, 8)\nprint(max_flow)\n```"}, {"id": 117, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 4, capacity=2)\nG.add_edge(6, 8, capacity=2)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(6, 3, capacity=1)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 0, capacity=5)\n\nG.add_edge(4, 0, capacity=2)\nG.add_edge(4, 5, capacity=2)\n\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(8, 0, capacity=7)\nG.add_edge(8, 6, capacity=4)\n\nG.add_edge(2, 9, capacity=4)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(2, 5, capacity=2)\nG.add_edge(2, 6, capacity=0)\n\nG.add_edge(3, 7, capacity=2)\nG.add_edge(3, 8, capacity=7)\nG.add_edge(3, 9, capacity=10)\n\nG.add_edge(1, 2, capacity=7)\nG.add_edge(1, 9, capacity=1)\nG.add_edge(1, 3, capacity=5)\n\nG.add_edge(0, 6, capacity=2)\nG.add_edge(0, 5, capacity=4)\nG.add_edge(0, 1, capacity=8)\nG.add_edge(0, 4, capacity=0)\n\nG.add_edge(5, 8, capacity=10)\nG.add_edge(5, 2, capacity=5)\nG.add_edge(5, 1, capacity=10)\nG.add_edge(5, 4, capacity=0)\n\nG.add_edge(9, 1, capacity=8)\nG.add_edge(9, 7, capacity=4)\nG.add_edge(9, 0, capacity=8)\n\nG.add_edge(7, 6, capacity=5)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(7, 1, capacity=2)\n\n# Calculate the maximum flow from node 4 to node 7\nmax_flow = nx.maximum_flow(G, 4, 7)[0]\n\nprint(\"Maximum flow from node 4 to node 7:\", max_flow)\n```"}, {"id": 118, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 0, 10), (7, 1, 9), (7, 12, 9), (7, 9, 5), (7, 10, 9),\n    (0, 9, 6), (0, 4, 4), (0, 10, 10), (0, 1, 0),\n    (1, 11, 6), (1, 6, 9), (1, 4, 9), (1, 10, 1), (1, 7, 1), (1, 0, 9), (1, 3, 6), (1, 5, 7),\n    (12, 9, 8), (12, 8, 8), (12, 2, 4), (12, 11, 6), (12, 10, 9), (12, 1, 8), (12, 6, 0), (12, 4, 0), (12, 7, 0),\n    (9, 6, 1), (9, 4, 5), (9, 7, 1), (9, 0, 6),\n    (10, 7, 8), (10, 0, 5), (10, 1, 10), (10, 12, 10), (10, 9, 2), (10, 8, 1), (10, 2, 5),\n    (4, 10, 2), (4, 7, 2), (4, 0, 9), (4, 12, 9), (4, 9, 2), (4, 8, 1), (4, 2, 6), (4, 1, 0),\n    (11, 6, 5), (11, 4, 10), (11, 7, 8), (11, 0, 9), (11, 3, 2), (11, 1, 3), (11, 12, 8), (11, 8, 4), (11, 2, 4),\n    (6, 3, 4), (6, 5, 7), (6, 1, 10), (6, 12, 6), (6, 9, 8), (6, 8, 6),\n    (3, 5, 3), (3, 1, 9), (3, 12, 4), (3, 10, 1),\n    (5, 12, 2), (5, 7, 5),\n    (8, 11, 1), (8, 4, 7), (8, 0, 1), (8, 5, 5), (8, 1, 10), (8, 9, 5), (8, 6, 0), (8, 10, 0), (8, 12, 0), (8, 2, 0),\n    (2, 11, 7), (2, 6, 10), (2, 4, 4), (2, 10, 10), (2, 3, 3), (2, 9, 3), (2, 8, 10), (2, 12, 0)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 1 to node 8\nmax_flow = nx.maximum_flow_value(G, 1, 8)\n\nprint(\"Maximum flow from node 1 to node 8:\", max_flow)\n```"}, {"id": 119, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 6, capacity=1)\nG.add_edge(3, 1, capacity=8)\nG.add_edge(6, 5, capacity=4)\nG.add_edge(1, 8, capacity=10)\nG.add_edge(1, 5, capacity=3)\nG.add_edge(5, 2, capacity=3)\nG.add_edge(5, 0, capacity=10)\nG.add_edge(8, 0, capacity=3)\nG.add_edge(2, 8, capacity=1)\nG.add_edge(2, 1, capacity=9)\nG.add_edge(2, 7, capacity=9)\nG.add_edge(2, 5, capacity=0)\nG.add_edge(7, 4, capacity=7)\nG.add_edge(7, 1, capacity=7)\nG.add_edge(0, 7, capacity=2)\nG.add_edge(4, 7, capacity=6)\nG.add_edge(4, 6, capacity=7)\n\n# Calculate the maximum flow from node 5 to node 2\nmax_flow = nx.maximum_flow(G, 5, 2)[0]\n\nprint(\"Maximum flow from node 5 to node 2:\", max_flow)\n```"}, {"id": 120, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(11, 6, capacity=10)\nG.add_edge(11, 8, capacity=10)\nG.add_edge(11, 1, capacity=6)\nG.add_edge(6, 10, capacity=6)\nG.add_edge(6, 11, capacity=6)\nG.add_edge(8, 7, capacity=7)\nG.add_edge(8, 3, capacity=9)\nG.add_edge(8, 5, capacity=7)\nG.add_edge(1, 4, capacity=10)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(10, 2, capacity=4)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(7, 11, capacity=1)\nG.add_edge(5, 12, capacity=3)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(4, 3, capacity=4)\nG.add_edge(0, 9, capacity=9)\nG.add_edge(0, 12, capacity=6)\nG.add_edge(0, 3, capacity=4)\nG.add_edge(0, 10, capacity=2)\nG.add_edge(0, 4, capacity=4)\nG.add_edge(0, 6, capacity=2)\nG.add_edge(2, 9, capacity=9)\nG.add_edge(2, 3, capacity=3)\nG.add_edge(9, 12, capacity=3)\nG.add_edge(9, 0, capacity=4)\nG.add_edge(12, 5, capacity=2)\n\n# Calculate the maximum flow from node 6 to node 11\nmax_flow = nx.maximum_flow(G, 6, 11)[0]\n\nprint(\"Maximum flow from node 6 to node 11:\", max_flow)\n```"}, {"id": 121, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (12, 8, 6), (12, 4, 6), (12, 11, 4), (12, 9, 8), (12, 3, 8), (12, 0, 5), (12, 5, 7), (12, 7, 0), (12, 13, 0),\n    (8, 4, 1),\n    (4, 6, 5), (4, 3, 8), (4, 8, 8), (4, 2, 0),\n    (11, 10, 5), (11, 5, 2), (11, 13, 10), (11, 3, 0),\n    (9, 10, 7), (9, 5, 8), (9, 2, 8), (9, 7, 0), (9, 0, 0),\n    (3, 10, 8), (3, 11, 5), (3, 1, 8), (3, 4, 0),\n    (0, 6, 5), (0, 9, 7), (0, 1, 0),\n    (5, 12, 5), (5, 9, 7), (5, 2, 0), (5, 11, 0),\n    (6, 1, 8), (6, 0, 1), (6, 8, 3), (6, 2, 0),\n    (10, 2, 7), (10, 11, 3),\n    (13, 12, 7), (13, 8, 1), (13, 11, 4), (13, 6, 5),\n    (2, 4, 10), (2, 6, 7), (2, 10, 1), (2, 5, 8), (2, 7, 10),\n    (1, 0, 3), (1, 8, 3), (1, 4, 8), (1, 6, 0),\n    (7, 2, 6), (7, 9, 4), (7, 12, 9)\n]\n\nfor u, v, capacity in edges:\n    G.add_edge(u, v, capacity=capacity)\n\n# Calculate the maximum flow from node 2 to node 5\nmax_flow = nx.maximum_flow(G, 2, 5)[0]\n\nprint(\"Maximum flow from node 2 to node 5:\", max_flow)\n```"}, {"id": 122, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 4, 1), (5, 1, 5), (5, 7, 4), (5, 3, 6), (5, 2, 4), (5, 6, 1),\n    (4, 1, 8), (4, 7, 10), (4, 3, 4), (4, 5, 1),\n    (1, 3, 9), (1, 0, 4), (1, 6, 10), (1, 5, 1),\n    (7, 0, 10), (7, 6, 10), (7, 5, 7), (7, 1, 7), (7, 4, 0),\n    (3, 0, 8), (3, 6, 10), (3, 2, 0),\n    (2, 5, 10), (2, 1, 1), (2, 3, 10), (2, 6, 0),\n    (6, 1, 4), (6, 7, 4), (6, 3, 5), (6, 2, 10),\n    (0, 6, 2), (0, 5, 1), (0, 1, 4), (0, 2, 8), (0, 7, 0), (0, 3, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 0\nmax_flow = nx.maximum_flow(G, 6, 0)\n\nprint(\"Maximum flow from node 6 to node 0:\", max_flow[0])\n```"}, {"id": 123, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=8)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 2, capacity=3)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(2, 6, capacity=3)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(0, 1, capacity=7)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(6, 4, capacity=1)\nG.add_edge(5, 3, capacity=5)\nG.add_edge(5, 7, capacity=6)\nG.add_edge(3, 4, capacity=8)\nG.add_edge(3, 6, capacity=10)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 1, capacity=1)\n\n# Calculate the maximum flow from node 0 to node 1\nmax_flow = nx.maximum_flow(G, 0, 1)[0]\n\nprint(\"Maximum flow from node 0 to node 1:\", max_flow)\n```"}, {"id": 124, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 13, capacity=6)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 4, capacity=0)\nG.add_edge(13, 3, capacity=10)\nG.add_edge(13, 12, capacity=5)\nG.add_edge(13, 7, capacity=0)\nG.add_edge(3, 0, capacity=1)\nG.add_edge(3, 9, capacity=1)\nG.add_edge(12, 10, capacity=5)\nG.add_edge(12, 13, capacity=0)\nG.add_edge(10, 0, capacity=5)\nG.add_edge(10, 4, capacity=4)\nG.add_edge(10, 12, capacity=0)\nG.add_edge(0, 6, capacity=6)\nG.add_edge(0, 11, capacity=5)\nG.add_edge(0, 8, capacity=8)\nG.add_edge(0, 5, capacity=6)\nG.add_edge(4, 7, capacity=3)\nG.add_edge(11, 13, capacity=2)\nG.add_edge(11, 0, capacity=1)\nG.add_edge(11, 2, capacity=7)\nG.add_edge(8, 12, capacity=5)\nG.add_edge(5, 1, capacity=2)\nG.add_edge(5, 6, capacity=3)\nG.add_edge(5, 10, capacity=4)\nG.add_edge(5, 13, capacity=9)\nG.add_edge(9, 1, capacity=6)\nG.add_edge(9, 4, capacity=10)\nG.add_edge(1, 0, capacity=10)\nG.add_edge(2, 12, capacity=9)\n\n# Calculate the maximum flow from node 4 to node 10\nmax_flow = nx.maximum_flow(G, 4, 10)[0]\n\nprint(\"Maximum flow from node 4 to node 10:\", max_flow)\n```"}, {"id": 125, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(8, 5, capacity=0)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(0, 1, capacity=3)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(3, 2, capacity=3)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(3, 1, capacity=2)\nG.add_edge(3, 7, capacity=0)\nG.add_edge(2, 5, capacity=1)\nG.add_edge(2, 7, capacity=6)\nG.add_edge(2, 8, capacity=1)\nG.add_edge(2, 0, capacity=3)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(5, 8, capacity=4)\nG.add_edge(5, 1, capacity=9)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(7, 3, capacity=1)\nG.add_edge(6, 3, capacity=3)\nG.add_edge(6, 2, capacity=2)\nG.add_edge(6, 4, capacity=7)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow(G, 7, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 126, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 4, capacity=7)\nG.add_edge(5, 3, capacity=8)\nG.add_edge(5, 7, capacity=7)\nG.add_edge(5, 1, capacity=8)\nG.add_edge(4, 5, capacity=0)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(3, 2, capacity=4)\nG.add_edge(3, 0, capacity=8)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(7, 4, capacity=10)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 6, capacity=2)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(6, 0, capacity=9)\nG.add_edge(6, 7, capacity=6)\nG.add_edge(6, 2, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 4\nmax_flow = nx.maximum_flow(G, 5, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 127, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (1, 9, 3), (1, 8, 5), (1, 10, 9), (1, 3, 9), (1, 11, 2),\n    (9, 8, 10), (9, 0, 5), (9, 3, 6), (9, 2, 10), (9, 5, 4), (9, 12, 0), (9, 10, 0),\n    (8, 12, 8), (8, 10, 6), (8, 0, 9), (8, 11, 10), (8, 7, 7), (8, 9, 9),\n    (10, 6, 2), (10, 2, 1), (10, 11, 8), (10, 9, 5), (10, 12, 0),\n    (11, 8, 10), (11, 10, 8), (11, 3, 4),\n    (0, 6, 7), (0, 3, 4), (0, 1, 4), (0, 7, 2), (0, 13, 8), (0, 12, 6), (0, 9, 0),\n    (2, 11, 2), (2, 7, 1), (2, 9, 9), (2, 8, 8), (2, 3, 8), (2, 10, 0),\n    (5, 11, 9), (5, 7, 6), (5, 13, 3), (5, 12, 8), (5, 3, 2), (5, 9, 0), (5, 6, 0),\n    (12, 10, 10), (12, 9, 5), (12, 8, 10),\n    (7, 9, 6), (7, 4, 1), (7, 12, 3), (7, 10, 2), (7, 0, 10), (7, 2, 3), (7, 5, 8), (7, 1, 7), (7, 8, 0),\n    (6, 5, 3), (6, 10, 0),\n    (4, 10, 6), (4, 6, 3), (4, 2, 10), (4, 5, 1), (4, 13, 7),\n    (13, 8, 5), (13, 0, 8), (13, 6, 4), (13, 5, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 12 to node 7\nmax_flow = nx.maximum_flow(G, 12, 7)[0]\n\nprint(\"Maximum flow from node 12 to node 7:\", max_flow)\n```"}, {"id": 128, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 8, capacity=9)\nG.add_edge(2, 3, capacity=3)\nG.add_edge(2, 10, capacity=8)\nG.add_edge(8, 6, capacity=4)\nG.add_edge(10, 9, capacity=6)\nG.add_edge(6, 9, capacity=2)\nG.add_edge(9, 6, capacity=5)\nG.add_edge(9, 8, capacity=7)\nG.add_edge(9, 5, capacity=9)\nG.add_edge(11, 5, capacity=1)\nG.add_edge(11, 0, capacity=3)\nG.add_edge(11, 12, capacity=4)\nG.add_edge(11, 2, capacity=1)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 0, capacity=8)\nG.add_edge(5, 2, capacity=8)\nG.add_edge(5, 11, capacity=8)\nG.add_edge(5, 9, capacity=0)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(0, 8, capacity=4)\nG.add_edge(0, 5, capacity=0)\nG.add_edge(12, 6, capacity=9)\nG.add_edge(12, 11, capacity=5)\nG.add_edge(12, 4, capacity=10)\nG.add_edge(12, 7, capacity=2)\nG.add_edge(1, 4, capacity=3)\nG.add_edge(1, 7, capacity=10)\nG.add_edge(4, 12, capacity=2)\nG.add_edge(4, 11, capacity=4)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 2, capacity=3)\nG.add_edge(7, 8, capacity=5)\nG.add_edge(7, 5, capacity=4)\n\n# Calculate the maximum flow from node 6 to node 0\nmax_flow = nx.maximum_flow(G, 6, 0)[0]\n\nprint(\"Maximum flow from node 6 to node 0:\", max_flow)\n```"}, {"id": 129, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (12, 11, 9), (12, 3, 10), (12, 9, 3), (12, 1, 8),\n    (11, 4, 8), (11, 0, 2), (11, 7, 9),\n    (3, 6, 1), (3, 9, 2), (3, 1, 5), (3, 0, 2), (3, 12, 8),\n    (9, 10, 3), (9, 12, 1), (9, 8, 3), (9, 11, 9), (9, 6, 10),\n    (1, 5, 5), (1, 3, 7),\n    (4, 0, 4), (4, 7, 9), (4, 11, 1), (4, 6, 1), (4, 1, 4), (4, 5, 10),\n    (0, 7, 10), (0, 12, 5), (0, 3, 3),\n    (7, 2, 2), (7, 3, 6), (7, 4, 0),\n    (6, 4, 8), (6, 0, 4), (6, 12, 7),\n    (10, 7, 3), (10, 11, 9), (10, 3, 3), (10, 6, 3), (10, 1, 4), (10, 5, 3), (10, 4, 5),\n    (8, 12, 8),\n    (5, 0, 7), (5, 10, 5), (5, 12, 1), (5, 6, 5), (5, 1, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 2\nmax_flow = nx.maximum_flow(G, 6, 2)[0]\n\nprint(\"Maximum flow from node 6 to node 2:\", max_flow)\n```"}, {"id": 130, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(13, 10, weight=9)\nG.add_edge(13, 12, weight=7)\nG.add_edge(13, 8, weight=1)\nG.add_edge(10, 7, weight=7)\nG.add_edge(12, 6, weight=10)\nG.add_edge(12, 13, weight=5)\nG.add_edge(12, 10, weight=2)\nG.add_edge(8, 3, weight=9)\nG.add_edge(8, 13, weight=6)\nG.add_edge(8, 0, weight=4)\nG.add_edge(8, 2, weight=6)\nG.add_edge(8, 7, weight=8)\nG.add_edge(8, 11, weight=7)\nG.add_edge(8, 4, weight=0)\nG.add_edge(6, 9, weight=6)\nG.add_edge(6, 12, weight=9)\nG.add_edge(3, 10, weight=7)\nG.add_edge(0, 8, weight=10)\nG.add_edge(2, 7, weight=8)\nG.add_edge(2, 13, weight=6)\nG.add_edge(11, 4, weight=9)\nG.add_edge(11, 13, weight=8)\nG.add_edge(11, 2, weight=8)\nG.add_edge(11, 6, weight=3)\nG.add_edge(11, 1, weight=5)\nG.add_edge(11, 8, weight=0)\nG.add_edge(9, 8, weight=4)\nG.add_edge(9, 3, weight=7)\nG.add_edge(14, 1, weight=9)\nG.add_edge(14, 7, weight=7)\nG.add_edge(1, 5, weight=7)\nG.add_edge(1, 14, weight=2)\nG.add_edge(1, 11, weight=0)\nG.add_edge(5, 10, weight=8)\nG.add_edge(5, 3, weight=2)\nG.add_edge(5, 1, weight=0)\nG.add_edge(4, 8, weight=8)\n\n# Calculate the maximum flow from node 4 to node 5\nmax_flow = nx.maximum_flow(G, 4, 5)[0]\n\nprint(\"Maximum flow from node 4 to node 5:\", max_flow)\n```"}, {"id": 131, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 2, capacity=7)\nG.add_edge(6, 9, capacity=2)\nG.add_edge(6, 0, capacity=1)\nG.add_edge(6, 1, capacity=6)\nG.add_edge(2, 5, capacity=3)\nG.add_edge(2, 3, capacity=9)\nG.add_edge(9, 8, capacity=6)\nG.add_edge(9, 6, capacity=0)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(1, 6, capacity=8)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(5, 1, capacity=5)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(4, 8, capacity=8)\n\n# Calculate the maximum flow from node 6 to node 8\nmax_flow = nx.maximum_flow(G, 6, 8)[0]\n\nprint(\"Maximum flow from node 6 to node 8:\", max_flow)\n```"}, {"id": 132, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 10, capacity=10)\nG.add_edge(10, 6, capacity=1)\nG.add_edge(10, 5, capacity=10)\nG.add_edge(10, 3, capacity=6)\nG.add_edge(6, 1, capacity=5)\nG.add_edge(6, 11, capacity=7)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(6, 10, capacity=9)\nG.add_edge(6, 9, capacity=5)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(3, 8, capacity=4)\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 2, capacity=7)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(2, 8, capacity=4)\nG.add_edge(2, 10, capacity=3)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(8, 9, capacity=6)\nG.add_edge(8, 0, capacity=5)\nG.add_edge(8, 6, capacity=4)\nG.add_edge(0, 6, capacity=10)\nG.add_edge(0, 5, capacity=10)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 11, capacity=6)\nG.add_edge(0, 8, capacity=5)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(0, 1, capacity=0)\nG.add_edge(9, 5, capacity=7)\nG.add_edge(9, 7, capacity=6)\nG.add_edge(9, 10, capacity=5)\nG.add_edge(11, 0, capacity=6)\nG.add_edge(11, 1, capacity=6)\nG.add_edge(7, 5, capacity=10)\nG.add_edge(7, 4, capacity=9)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(7, 3, capacity=2)\nG.add_edge(7, 1, capacity=10)\nG.add_edge(7, 11, capacity=3)\nG.add_edge(1, 0, capacity=6)\nG.add_edge(1, 5, capacity=1)\n\n# Calculate the maximum flow from node 1 to node 10\nmax_flow = nx.maximum_flow(G, 1, 10)[0]\n\nprint(\"Maximum flow from node 1 to node 10:\", max_flow)\n```"}, {"id": 133, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 3, capacity=5)\nG.add_edge(1, 7, capacity=4)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(1, 5, capacity=6)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 4, capacity=4)\nG.add_edge(7, 0, capacity=4)\nG.add_edge(7, 6, capacity=2)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 7, capacity=8)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(0, 7, capacity=8)\nG.add_edge(0, 2, capacity=7)\nG.add_edge(0, 5, capacity=0)\nG.add_edge(5, 0, capacity=2)\nG.add_edge(4, 3, capacity=1)\nG.add_edge(4, 7, capacity=9)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(6, 4, capacity=5)\nG.add_edge(6, 3, capacity=8)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(6, 0, capacity=10)\n\n# Calculate the maximum flow from node 5 to node 1\nmax_flow = nx.maximum_flow(G, 5, 1)[0]\n\nprint(\"Maximum flow from node 5 to node 1:\", max_flow)\n```"}, {"id": 134, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 6, capacity=4)\nG.add_edge(4, 8, capacity=3)\nG.add_edge(4, 1, capacity=6)\nG.add_edge(4, 5, capacity=0)\nG.add_edge(4, 3, capacity=0)\n\nG.add_edge(6, 2, capacity=2)\nG.add_edge(6, 8, capacity=7)\nG.add_edge(6, 7, capacity=10)\n\nG.add_edge(8, 7, capacity=3)\nG.add_edge(8, 5, capacity=8)\nG.add_edge(8, 6, capacity=0)\n\nG.add_edge(1, 0, capacity=4)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 7, capacity=0)\n\nG.add_edge(2, 5, capacity=5)\nG.add_edge(2, 8, capacity=9)\nG.add_edge(2, 7, capacity=1)\nG.add_edge(2, 3, capacity=5)\nG.add_edge(2, 6, capacity=0)\n\nG.add_edge(7, 3, capacity=2)\nG.add_edge(7, 8, capacity=4)\nG.add_edge(7, 1, capacity=7)\nG.add_edge(7, 6, capacity=0)\n\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 0, capacity=5)\nG.add_edge(5, 4, capacity=1)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(5, 8, capacity=0)\n\nG.add_edge(0, 6, capacity=8)\nG.add_edge(0, 2, capacity=7)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(0, 3, capacity=8)\n\nG.add_edge(3, 0, capacity=9)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 2, capacity=2)\nG.add_edge(3, 8, capacity=6)\nG.add_edge(3, 7, capacity=7)\nG.add_edge(3, 5, capacity=0)\n\n# Calculate the maximum flow from node 6 to node 4\nmax_flow = nx.maximum_flow(G, 6, 4)[0]\n\nprint(\"Maximum flow from node 6 to node 4:\", max_flow)\n```"}, {"id": 135, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 2, 2), (5, 8, 2), (5, 0, 7), (5, 6, 2), (5, 10, 1), (5, 7, 1), (5, 1, 0),\n    (2, 8, 3), (2, 4, 4), (2, 0, 9),\n    (8, 6, 9), (8, 9, 9), (8, 1, 8),\n    (0, 10, 8), (0, 9, 10), (0, 3, 3), (0, 1, 6), (0, 2, 8), (0, 8, 10),\n    (6, 2, 8), (6, 8, 6),\n    (10, 3, 4), (10, 7, 3), (10, 1, 6), (10, 5, 7), (10, 4, 0),\n    (7, 6, 9), (7, 10, 4), (7, 9, 0),\n    (4, 0, 2), (4, 6, 4), (4, 10, 8), (4, 8, 5), (4, 9, 0),\n    (9, 7, 8), (9, 2, 1), (9, 4, 6), (9, 0, 8), (9, 6, 6),\n    (1, 5, 1), (1, 2, 3), (1, 0, 0),\n    (3, 9, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 5\nmax_flow = nx.maximum_flow(G, 9, 5)[0]\n\nprint(\"Maximum flow from node 9 to node 5:\", max_flow)\n```"}, {"id": 136, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 4, 8), (5, 0, 5), (5, 2, 2), (5, 7, 4), (5, 3, 10), (5, 6, 1), (5, 8, 6),\n    (4, 0, 8), (4, 2, 2), (4, 8, 7),\n    (0, 7, 5), (0, 3, 1), (0, 6, 1),\n    (2, 6, 6), (2, 4, 1),\n    (7, 3, 8), (7, 6, 4), (7, 8, 6), (7, 4, 8),\n    (3, 6, 5), (3, 8, 2), (3, 4, 2), (3, 2, 8),\n    (6, 8, 5), (6, 5, 5), (6, 0, 6), (6, 1, 9), (6, 2, 1), (6, 7, 0), (6, 3, 0),\n    (8, 7, 9), (8, 3, 3),\n    (1, 2, 3), (1, 8, 5), (1, 4, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 8 to node 5\nmax_flow = nx.maximum_flow_value(G, 8, 5)\n\nprint(\"Maximum flow from node 8 to node 5:\", max_flow)\n```"}, {"id": 137, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 2, capacity=2)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 0, capacity=9)\nG.add_edge(2, 7, capacity=2)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(0, 3, capacity=10)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 5, capacity=10)\nG.add_edge(0, 1, capacity=4)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(7, 6, capacity=4)\nG.add_edge(7, 3, capacity=5)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(4, 0, capacity=10)\nG.add_edge(4, 2, capacity=8)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(3, 2, capacity=3)\nG.add_edge(3, 5, capacity=6)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 4, capacity=7)\nG.add_edge(3, 6, capacity=9)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(5, 4, capacity=2)\nG.add_edge(5, 6, capacity=6)\n\n# Calculate the maximum flow from node 4 to node 2\nmax_flow = nx.maximum_flow(G, 4, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 138, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(8, 5, capacity=8)\nG.add_edge(8, 10, capacity=0)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(1, 9, capacity=8)\nG.add_edge(1, 4, capacity=9)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 10, capacity=0)\nG.add_edge(0, 4, capacity=1)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(7, 0, capacity=4)\nG.add_edge(7, 10, capacity=4)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(10, 8, capacity=9)\nG.add_edge(10, 1, capacity=8)\nG.add_edge(5, 4, capacity=8)\nG.add_edge(5, 6, capacity=10)\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 0, capacity=2)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 4, capacity=1)\nG.add_edge(2, 8, capacity=6)\nG.add_edge(2, 6, capacity=6)\nG.add_edge(2, 3, capacity=9)\nG.add_edge(2, 1, capacity=1)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(6, 1, capacity=4)\nG.add_edge(6, 0, capacity=8)\nG.add_edge(6, 4, capacity=5)\n\n# Calculate the maximum flow from node 10 to node 8\nmax_flow = nx.maximum_flow(G, 10, 8)[0]\n\nprint(\"Maximum flow from node 10 to node 8:\", max_flow)\n```"}, {"id": 139, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 7, 8), (4, 6, 4), (4, 1, 7), (4, 10, 7), (4, 2, 7), (4, 8, 1),\n    (7, 11, 3), (7, 5, 5), (7, 10, 6), (7, 3, 4), (7, 8, 9), (7, 4, 7), (7, 0, 6),\n    (6, 11, 6), (6, 7, 2),\n    (1, 11, 2), (1, 10, 10), (1, 2, 3), (1, 3, 8), (1, 8, 1), (1, 4, 6), (1, 9, 6), (1, 6, 8), (1, 0, 0),\n    (10, 3, 2), (10, 11, 8), (10, 5, 4), (10, 0, 0),\n    (2, 8, 5), (2, 0, 6), (2, 6, 1), (2, 10, 6),\n    (8, 4, 5), (8, 6, 6), (8, 11, 4), (8, 10, 2), (8, 2, 4), (8, 3, 1),\n    (11, 5, 8), (11, 2, 2), (11, 4, 4), (11, 1, 2), (11, 0, 0), (11, 10, 0),\n    (5, 6, 3), (5, 7, 0), (5, 11, 0), (5, 10, 0),\n    (3, 7, 1), (3, 2, 1),\n    (0, 7, 5), (0, 1, 3), (0, 11, 3), (0, 10, 7),\n    (9, 6, 7), (9, 1, 3), (9, 10, 1), (9, 4, 8)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 0 to node 5\nmax_flow = nx.maximum_flow_value(G, 0, 5)\n\nprint(\"Maximum flow from node 0 to node 5:\", max_flow)\n```"}, {"id": 140, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 13, capacity=5)\nG.add_edge(9, 5, capacity=5)\nG.add_edge(9, 10, capacity=3)\nG.add_edge(13, 5, capacity=9)\nG.add_edge(13, 4, capacity=1)\nG.add_edge(13, 1, capacity=6)\nG.add_edge(13, 9, capacity=4)\nG.add_edge(13, 12, capacity=0)\nG.add_edge(5, 7, capacity=1)\nG.add_edge(5, 12, capacity=10)\nG.add_edge(10, 12, capacity=9)\nG.add_edge(10, 4, capacity=4)\nG.add_edge(4, 8, capacity=2)\nG.add_edge(4, 3, capacity=4)\nG.add_edge(4, 0, capacity=3)\nG.add_edge(4, 5, capacity=8)\nG.add_edge(4, 6, capacity=0)\nG.add_edge(1, 13, capacity=4)\nG.add_edge(1, 8, capacity=6)\nG.add_edge(1, 2, capacity=3)\nG.add_edge(1, 10, capacity=10)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 6, capacity=0)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 0, capacity=3)\nG.add_edge(12, 6, capacity=6)\nG.add_edge(12, 13, capacity=7)\nG.add_edge(12, 5, capacity=7)\nG.add_edge(12, 2, capacity=5)\nG.add_edge(0, 10, capacity=1)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(2, 0, capacity=5)\nG.add_edge(3, 9, capacity=1)\nG.add_edge(3, 13, capacity=10)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 2, capacity=5)\nG.add_edge(6, 13, capacity=2)\nG.add_edge(6, 4, capacity=10)\nG.add_edge(6, 1, capacity=6)\nG.add_edge(6, 11, capacity=8)\nG.add_edge(6, 12, capacity=0)\nG.add_edge(11, 6, capacity=9)\nG.add_edge(11, 4, capacity=4)\nG.add_edge(11, 2, capacity=6)\nG.add_edge(11, 10, capacity=10)\nG.add_edge(11, 3, capacity=3)\nG.add_edge(11, 1, capacity=1)\n\n# Calculate the maximum flow from node 12 to node 8\nmax_flow = nx.maximum_flow(G, 12, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 141, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 3, capacity=8)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(3, 0, capacity=7)\nG.add_edge(3, 8, capacity=5)\nG.add_edge(3, 7, capacity=8)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 7, capacity=8)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(2, 0, capacity=6)\nG.add_edge(2, 6, capacity=7)\nG.add_edge(2, 8, capacity=0)\nG.add_edge(2, 1, capacity=0)\nG.add_edge(8, 4, capacity=7)\nG.add_edge(8, 3, capacity=1)\nG.add_edge(8, 2, capacity=3)\nG.add_edge(8, 6, capacity=0)\nG.add_edge(8, 5, capacity=0)\nG.add_edge(0, 6, capacity=7)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 5, capacity=2)\nG.add_edge(0, 4, capacity=1)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(7, 4, capacity=9)\nG.add_edge(7, 3, capacity=2)\nG.add_edge(7, 0, capacity=3)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(4, 1, capacity=4)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(1, 5, capacity=8)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 4, capacity=0)\n\n# Calculate the maximum flow from node 6 to node 7\nmax_flow = nx.maximum_flow(G, 6, 7)[0]\n\nprint(max_flow)\n```"}, {"id": 142, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 2, capacity=6)\nG.add_edge(5, 8, capacity=4)\nG.add_edge(3, 2, capacity=6)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 8, capacity=10)\nG.add_edge(3, 6, capacity=9)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(2, 0, capacity=2)\nG.add_edge(2, 8, capacity=10)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 4, capacity=4)\nG.add_edge(2, 1, capacity=7)\nG.add_edge(2, 3, capacity=3)\nG.add_edge(2, 5, capacity=0)\nG.add_edge(8, 5, capacity=6)\nG.add_edge(8, 4, capacity=2)\nG.add_edge(8, 3, capacity=10)\nG.add_edge(8, 0, capacity=7)\nG.add_edge(8, 7, capacity=10)\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 7, capacity=2)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(4, 1, capacity=2)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 4, capacity=1)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(7, 8, capacity=4)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 2, capacity=4)\n\n# Calculate the maximum flow from node 5 to node 1\nmax_flow = nx.maximum_flow(G, 5, 1)[0]\n\nprint(\"Maximum flow from node 5 to node 1:\", max_flow)\n```"}, {"id": 143, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(11, 1, weight=2)\nG.add_edge(11, 6, weight=7)\nG.add_edge(11, 8, weight=1)\nG.add_edge(11, 5, weight=0)\nG.add_edge(1, 3, weight=4)\nG.add_edge(1, 8, weight=2)\nG.add_edge(1, 4, weight=4)\nG.add_edge(1, 11, weight=0)\nG.add_edge(6, 13, weight=2)\nG.add_edge(6, 8, weight=4)\nG.add_edge(6, 2, weight=10)\nG.add_edge(6, 11, weight=3)\nG.add_edge(3, 1, weight=3)\nG.add_edge(3, 9, weight=0)\nG.add_edge(4, 1, weight=8)\nG.add_edge(4, 3, weight=6)\nG.add_edge(4, 13, weight=6)\nG.add_edge(4, 12, weight=0)\nG.add_edge(13, 8, weight=8)\nG.add_edge(13, 4, weight=7)\nG.add_edge(13, 12, weight=0)\nG.add_edge(2, 6, weight=2)\nG.add_edge(2, 7, weight=6)\nG.add_edge(2, 3, weight=7)\nG.add_edge(7, 13, weight=3)\nG.add_edge(7, 9, weight=10)\nG.add_edge(9, 5, weight=1)\nG.add_edge(9, 2, weight=3)\nG.add_edge(9, 0, weight=4)\nG.add_edge(9, 7, weight=2)\nG.add_edge(9, 3, weight=5)\nG.add_edge(9, 8, weight=9)\nG.add_edge(9, 12, weight=0)\nG.add_edge(5, 0, weight=4)\nG.add_edge(5, 11, weight=6)\nG.add_edge(5, 6, weight=3)\nG.add_edge(5, 13, weight=3)\nG.add_edge(5, 8, weight=10)\nG.add_edge(5, 10, weight=2)\nG.add_edge(5, 12, weight=0)\nG.add_edge(0, 10, weight=6)\nG.add_edge(0, 5, weight=6)\nG.add_edge(0, 2, weight=6)\nG.add_edge(10, 11, weight=9)\nG.add_edge(10, 6, weight=3)\nG.add_edge(12, 5, weight=3)\nG.add_edge(12, 4, weight=8)\nG.add_edge(12, 0, weight=7)\nG.add_edge(12, 13, weight=7)\nG.add_edge(12, 9, weight=3)\n\n# Calculate the maximum flow from node 12 to node 4\nmax_flow = nx.maximum_flow_value(G, 12, 4)\n\nprint(\"Maximum flow from node 12 to node 4:\", max_flow)\n```"}, {"id": 144, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (1, 3, 4), (1, 5, 9), (1, 7, 7), (1, 6, 5), (1, 4, 0), (1, 2, 0),\n    (3, 4, 4), (3, 7, 1), (3, 0, 5), (3, 1, 6),\n    (5, 2, 6), (5, 0, 10), (5, 1, 6), (5, 3, 10), (5, 4, 1),\n    (7, 2, 5), (7, 6, 3), (7, 0, 5), (7, 1, 1), (7, 3, 3), (7, 4, 1),\n    (6, 1, 3), (6, 3, 9), (6, 4, 3), (6, 7, 0),\n    (4, 7, 6), (4, 6, 2), (4, 0, 7), (4, 1, 4), (4, 3, 0),\n    (0, 3, 7), (0, 4, 6), (0, 2, 1),\n    (2, 6, 7), (2, 1, 2), (2, 0, 0), (2, 7, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 1\nmax_flow = nx.maximum_flow_value(G, 3, 1)\n\nprint(\"Maximum flow from node 3 to node 1:\", max_flow)\n```"}, {"id": 145, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 5, capacity=7)\nG.add_edge(6, 7, capacity=3)\nG.add_edge(5, 3, capacity=4)\nG.add_edge(5, 1, capacity=10)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(7, 5, capacity=9)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(3, 8, capacity=10)\nG.add_edge(3, 1, capacity=2)\nG.add_edge(1, 0, capacity=4)\nG.add_edge(1, 11, capacity=7)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(8, 0, capacity=8)\nG.add_edge(8, 9, capacity=9)\nG.add_edge(8, 5, capacity=6)\nG.add_edge(8, 7, capacity=9)\nG.add_edge(0, 1, capacity=3)\nG.add_edge(0, 3, capacity=8)\nG.add_edge(11, 10, capacity=5)\nG.add_edge(2, 1, capacity=10)\nG.add_edge(2, 5, capacity=2)\nG.add_edge(2, 7, capacity=2)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 0, capacity=2)\nG.add_edge(9, 11, capacity=1)\nG.add_edge(10, 0, capacity=3)\nG.add_edge(10, 2, capacity=7)\nG.add_edge(4, 0, capacity=2)\nG.add_edge(4, 1, capacity=3)\nG.add_edge(4, 5, capacity=2)\n\n# Calculate the maximum flow from node 6 to node 5\nmax_flow = nx.maximum_flow(G, 6, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 146, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 2, 5), (10, 3, 8), (10, 8, 4), (10, 6, 1), (10, 1, 4),\n    (2, 7, 5), (2, 8, 2), (2, 0, 4), (2, 4, 3), (2, 1, 6), (2, 10, 5),\n    (3, 9, 10), (3, 0, 3), (3, 6, 5),\n    (8, 0, 7), (8, 10, 1), (8, 3, 9), (8, 7, 2), (8, 6, 0),\n    (6, 10, 1), (6, 5, 2), (6, 9, 5), (6, 8, 5), (6, 4, 9), (6, 1, 0),\n    (1, 10, 7), (1, 5, 3), (1, 0, 5), (1, 6, 9),\n    (7, 0, 0), (7, 2, 0), (7, 8, 0),\n    (0, 4, 10), (0, 6, 10), (0, 1, 5), (0, 5, 5), (0, 9, 10), (0, 7, 9), (0, 8, 0),\n    (4, 6, 3), (4, 5, 8), (4, 3, 7), (4, 0, 3),\n    (9, 8, 1), (9, 6, 5), (9, 1, 7),\n    (5, 9, 4), (5, 6, 1), (5, 1, 1),\n    (11, 1, 9), (11, 5, 2), (11, 7, 6)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 1 to node 7\nmax_flow = nx.maximum_flow_value(G, 1, 7)\n\nprint(\"Maximum flow from node 1 to node 7:\", max_flow)\n```"}, {"id": 147, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 10, 7), (4, 6, 9), (4, 8, 5), (4, 3, 10), (4, 2, 2),\n    (10, 4, 5), (10, 5, 4), (10, 2, 0),\n    (6, 4, 3), (6, 5, 5), (6, 2, 0),\n    (8, 6, 1),\n    (3, 9, 2), (3, 5, 6), (3, 4, 0),\n    (2, 9, 10), (2, 0, 6), (2, 10, 1), (2, 7, 5), (2, 6, 9),\n    (5, 6, 7), (5, 3, 7), (5, 4, 10), (5, 9, 7), (5, 10, 0),\n    (9, 5, 2), (9, 6, 9), (9, 8, 1), (9, 3, 3), (9, 2, 7), (9, 0, 0), (9, 7, 0),\n    (0, 10, 9), (0, 9, 9), (0, 2, 0),\n    (7, 8, 10), (7, 3, 2), (7, 2, 2), (7, 9, 5), (7, 5, 8),\n    (1, 6, 9), (1, 3, 7), (1, 0, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 9\nmax_flow = nx.maximum_flow(G, 2, 9)[0]\n\nprint(\"Maximum flow from node 2 to node 9:\", max_flow)\n```"}, {"id": 148, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 5, capacity=1)\nG.add_edge(4, 6, capacity=0)\nG.add_edge(5, 3, capacity=9)\nG.add_edge(5, 2, capacity=2)\nG.add_edge(5, 6, capacity=8)\nG.add_edge(5, 8, capacity=2)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(3, 7, capacity=6)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(6, 4, capacity=4)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(8, 7, capacity=3)\nG.add_edge(8, 3, capacity=9)\nG.add_edge(7, 5, capacity=6)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(0, 5, capacity=9)\nG.add_edge(0, 7, capacity=10)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(1, 0, capacity=5)\n\n# Calculate the maximum flow from node 1 to node 4\nmax_flow = nx.maximum_flow(G, 1, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 149, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(3, 0, weight=4)\nG.add_edge(3, 1, weight=9)\nG.add_edge(3, 2, weight=3)\nG.add_edge(3, 7, weight=4)\nG.add_edge(3, 5, weight=0)\nG.add_edge(0, 5, weight=7)\nG.add_edge(0, 7, weight=0)\nG.add_edge(0, 3, weight=0)\nG.add_edge(0, 4, weight=0)\nG.add_edge(1, 6, weight=3)\nG.add_edge(2, 5, weight=6)\nG.add_edge(2, 3, weight=2)\nG.add_edge(2, 1, weight=2)\nG.add_edge(2, 4, weight=8)\nG.add_edge(7, 0, weight=5)\nG.add_edge(7, 1, weight=4)\nG.add_edge(7, 6, weight=5)\nG.add_edge(7, 5, weight=0)\nG.add_edge(5, 7, weight=6)\nG.add_edge(5, 3, weight=10)\nG.add_edge(5, 0, weight=1)\nG.add_edge(5, 1, weight=6)\nG.add_edge(6, 1, weight=9)\nG.add_edge(4, 6, weight=10)\nG.add_edge(4, 5, weight=10)\nG.add_edge(4, 7, weight=6)\nG.add_edge(4, 0, weight=1)\nG.add_edge(4, 2, weight=0)\n\n# Calculate the maximum flow from node 5 to node 0\nmax_flow = nx.maximum_flow(G, 5, 0)\n\n# Print the maximum flow value\nprint(max_flow[0])\n```"}, {"id": 150, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (13, 6, 1), (13, 1, 10), (13, 10, 10), (13, 8, 8), (13, 3, 8), (13, 0, 5),\n    (6, 1, 9), (6, 8, 4), (6, 3, 6), (6, 14, 10), (6, 12, 3), (6, 0, 8), (6, 7, 9), (6, 9, 5),\n    (1, 12, 4), (1, 0, 7), (1, 13, 9), (1, 2, 2), (1, 6, 0),\n    (10, 14, 7), (10, 13, 2), (10, 1, 8),\n    (8, 3, 7), (8, 14, 7), (8, 5, 6), (8, 2, 4), (8, 1, 2), (8, 11, 5), (8, 9, 0),\n    (3, 0, 2), (3, 8, 9),\n    (0, 4, 8), (0, 13, 7), (0, 2, 4), (0, 10, 3), (0, 3, 4), (0, 9, 0),\n    (14, 12, 4), (14, 4, 10), (14, 13, 9), (14, 6, 2), (14, 1, 5), (14, 10, 1), (14, 11, 6),\n    (12, 13, 1), (12, 2, 10), (12, 10, 9), (12, 11, 5), (12, 8, 2), (12, 9, 0), (12, 6, 0), (12, 1, 0),\n    (7, 6, 10), (7, 10, 2), (7, 3, 1), (7, 14, 7),\n    (9, 6, 10), (9, 11, 9), (9, 8, 7), (9, 12, 4), (9, 0, 9), (9, 4, 8),\n    (2, 8, 10), (2, 14, 2), (2, 0, 9), (2, 5, 4), (2, 12, 0), (2, 4, 0), (2, 1, 0),\n    (5, 10, 1), (5, 13, 10),\n    (11, 14, 9), (11, 4, 10), (11, 9, 8), (11, 6, 6), (11, 10, 6),\n    (4, 7, 9), (4, 9, 1), (4, 5, 5), (4, 2, 6), (4, 14, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 2\nmax_flow = nx.maximum_flow(G, 9, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 151, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 9, 4), (2, 3, 0),\n    (9, 2, 8), (9, 7, 2),\n    (7, 3, 8), (7, 9, 1), (7, 4, 7), (7, 11, 6), (7, 10, 3), (7, 2, 5),\n    (3, 4, 4), (3, 2, 10), (3, 5, 0),\n    (4, 0, 6), (4, 10, 8), (4, 3, 3), (4, 9, 6),\n    (11, 7, 6),\n    (10, 4, 1), (10, 1, 8), (10, 5, 0), (10, 7, 0),\n    (0, 3, 2),\n    (1, 10, 1), (1, 2, 10),\n    (8, 2, 8), (8, 3, 8), (8, 4, 8),\n    (5, 10, 3), (5, 3, 5),\n    (6, 0, 1), (6, 1, 2)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 10\nmax_flow = nx.maximum_flow(G, 5, 10)[0]\n\nprint(\"Maximum flow from node 5 to node 10:\", max_flow)\n```"}, {"id": 152, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 9, capacity=9)\nG.add_edge(1, 0, capacity=4)\nG.add_edge(5, 9, capacity=6)\nG.add_edge(5, 3, capacity=1)\nG.add_edge(9, 8, capacity=6)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(0, 8, capacity=1)\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 2, capacity=10)\nG.add_edge(0, 6, capacity=10)\nG.add_edge(3, 5, capacity=2)\nG.add_edge(3, 8, capacity=6)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(8, 4, capacity=2)\nG.add_edge(8, 2, capacity=10)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(2, 5, capacity=3)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 8, capacity=3)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 9, capacity=0)\nG.add_edge(4, 9, capacity=8)\nG.add_edge(4, 0, capacity=10)\nG.add_edge(4, 1, capacity=5)\nG.add_edge(6, 4, capacity=4)\nG.add_edge(6, 7, capacity=3)\nG.add_edge(7, 3, capacity=9)\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 8, capacity=6)\nG.add_edge(7, 2, capacity=6)\n\n# Calculate the maximum flow from node 9 to node 2\nmax_flow = nx.maximum_flow(G, 9, 2)[0]\n\nprint(\"Maximum flow from node 9 to node 2:\", max_flow)\n```"}, {"id": 153, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 7, 10), (8, 11, 6), (8, 10, 2), (8, 4, 1), (8, 5, 10), (8, 13, 0),\n    (7, 11, 6), (7, 3, 1), (7, 12, 10), (7, 10, 10), (7, 4, 4), (7, 13, 0),\n    (11, 6, 10), (11, 1, 8), (11, 2, 1), (11, 4, 2), (11, 0, 5), (11, 5, 5),\n    (11, 14, 9), (11, 7, 8), (11, 13, 0), (11, 8, 0),\n    (10, 9, 3), (10, 3, 10), (10, 12, 10), (10, 13, 6), (10, 1, 4),\n    (4, 5, 7), (4, 14, 1), (4, 8, 4), (4, 7, 5), (4, 11, 5), (4, 6, 8),\n    (5, 8, 4), (5, 3, 10), (5, 6, 7), (5, 9, 8), (5, 4, 1), (5, 13, 0),\n    (3, 10, 10),\n    (12, 13, 2), (12, 2, 3), (12, 9, 8), (12, 0, 4), (12, 7, 6),\n    (6, 13, 4), (6, 10, 1), (6, 0, 10), (6, 3, 6), (6, 5, 0), (6, 11, 0),\n    (1, 2, 1), (1, 9, 2), (1, 0, 1), (1, 8, 4), (1, 3, 9), (1, 13, 7),\n    (2, 4, 7), (2, 5, 8), (2, 14, 8), (2, 8, 9), (2, 11, 5),\n    (0, 14, 5), (0, 7, 1), (0, 3, 8), (0, 11, 0), (0, 6, 0), (0, 12, 0), (0, 1, 0),\n    (14, 13, 10), (14, 1, 1), (14, 9, 5),\n    (9, 12, 7), (9, 13, 1), (9, 1, 10), (9, 5, 0),\n    (13, 5, 8), (13, 8, 3), (13, 7, 7), (13, 11, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 13 to node 0\nmax_flow = nx.maximum_flow(G, 13, 0)\n\nprint(\"Maximum flow from node 13 to node 0:\", max_flow[0])\n```"}, {"id": 154, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(10, 0, capacity=10)\nG.add_edge(10, 8, capacity=0)\nG.add_edge(0, 10, capacity=8)\nG.add_edge(0, 9, capacity=8)\nG.add_edge(9, 0, capacity=3)\nG.add_edge(9, 3, capacity=0)\nG.add_edge(7, 2, capacity=1)\nG.add_edge(7, 1, capacity=1)\nG.add_edge(7, 3, capacity=8)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 7, capacity=0)\nG.add_edge(1, 3, capacity=1)\nG.add_edge(3, 9, capacity=7)\nG.add_edge(3, 7, capacity=0)\nG.add_edge(6, 8, capacity=7)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(5, 2, capacity=9)\nG.add_edge(5, 8, capacity=5)\nG.add_edge(8, 10, capacity=6)\nG.add_edge(8, 4, capacity=10)\nG.add_edge(8, 1, capacity=5)\nG.add_edge(8, 6, capacity=0)\n\n# Calculate the maximum flow from node 7 to node 10\nmax_flow = nx.maximum_flow(G, 7, 10)[0]\n\nprint(\"Maximum flow from node 7 to node 10:\", max_flow)\n```"}, {"id": 155, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 10, 1), (11, 9, 10), (11, 0, 0),\n    (10, 5, 2), (10, 2, 2), (10, 11, 1), (10, 8, 0),\n    (5, 2, 4), (5, 11, 6),\n    (2, 9, 2), (2, 1, 3),\n    (1, 11, 5),\n    (7, 6, 8), (7, 0, 5),\n    (6, 5, 4), (6, 0, 1), (6, 4, 10),\n    (0, 8, 4), (0, 9, 8), (0, 11, 1), (0, 1, 9), (0, 6, 4), (0, 5, 8), (0, 2, 9),\n    (4, 9, 9), (4, 7, 10), (4, 6, 9), (4, 3, 5),\n    (8, 11, 9), (8, 1, 9), (8, 10, 3), (8, 2, 6), (8, 0, 0),\n    (3, 8, 2), (3, 11, 8), (3, 6, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 10\nmax_flow = nx.maximum_flow_value(G, 0, 10)\n\nprint(\"Maximum flow from node 0 to node 10:\", max_flow)\n```"}, {"id": 156, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(8, 7, weight=10)\nG.add_edge(8, 1, weight=0)\nG.add_edge(7, 5, weight=7)\nG.add_edge(7, 3, weight=2)\nG.add_edge(7, 1, weight=3)\nG.add_edge(7, 6, weight=10)\nG.add_edge(7, 8, weight=0)\nG.add_edge(7, 4, weight=0)\nG.add_edge(5, 13, weight=6)\nG.add_edge(5, 14, weight=8)\nG.add_edge(5, 12, weight=8)\nG.add_edge(5, 8, weight=8)\nG.add_edge(5, 7, weight=0)\nG.add_edge(5, 4, weight=0)\nG.add_edge(3, 7, weight=3)\nG.add_edge(3, 9, weight=1)\nG.add_edge(3, 13, weight=1)\nG.add_edge(3, 4, weight=9)\nG.add_edge(3, 11, weight=8)\nG.add_edge(1, 8, weight=3)\nG.add_edge(1, 9, weight=3)\nG.add_edge(1, 14, weight=5)\nG.add_edge(13, 12, weight=1)\nG.add_edge(13, 7, weight=7)\nG.add_edge(13, 0, weight=3)\nG.add_edge(14, 10, weight=10)\nG.add_edge(14, 7, weight=8)\nG.add_edge(14, 1, weight=0)\nG.add_edge(14, 5, weight=0)\nG.add_edge(9, 4, weight=4)\nG.add_edge(9, 6, weight=8)\nG.add_edge(9, 1, weight=0)\nG.add_edge(4, 6, weight=8)\nG.add_edge(4, 7, weight=10)\nG.add_edge(4, 5, weight=2)\nG.add_edge(4, 9, weight=3)\nG.add_edge(4, 12, weight=7)\nG.add_edge(4, 10, weight=8)\nG.add_edge(11, 5, weight=3)\nG.add_edge(0, 13, weight=10)\nG.add_edge(0, 14, weight=4)\nG.add_edge(0, 12, weight=6)\nG.add_edge(0, 11, weight=7)\nG.add_edge(0, 3, weight=5)\nG.add_edge(0, 2, weight=1)\nG.add_edge(0, 8, weight=4)\nG.add_edge(0, 9, weight=4)\nG.add_edge(10, 3, weight=5)\nG.add_edge(10, 6, weight=2)\nG.add_edge(2, 9, weight=8)\nG.add_edge(2, 4, weight=4)\n\n# Calculate the maximum flow from node 1 to node 14\nmax_flow = nx.maximum_flow_value(G, 1, 14)\n\nprint(\"Maximum flow from node 1 to node 14:\", max_flow)\n```"}, {"id": 157, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 4, capacity=9)\nG.add_edge(9, 0, capacity=1)\nG.add_edge(9, 1, capacity=8)\nG.add_edge(9, 10, capacity=6)\nG.add_edge(9, 3, capacity=1)\nG.add_edge(9, 14, capacity=0)\nG.add_edge(9, 8, capacity=0)\n\nG.add_edge(4, 12, capacity=5)\nG.add_edge(4, 11, capacity=8)\nG.add_edge(4, 6, capacity=2)\n\nG.add_edge(0, 12, capacity=1)\nG.add_edge(0, 8, capacity=4)\nG.add_edge(0, 2, capacity=9)\n\nG.add_edge(12, 7, capacity=4)\n\nG.add_edge(6, 3, capacity=5)\nG.add_edge(6, 0, capacity=4)\nG.add_edge(6, 13, capacity=7)\n\nG.add_edge(8, 10, capacity=3)\nG.add_edge(8, 9, capacity=6)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 14, capacity=0)\n\nG.add_edge(2, 8, capacity=5)\n\nG.add_edge(7, 11, capacity=4)\nG.add_edge(7, 6, capacity=1)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(7, 2, capacity=2)\n\nG.add_edge(13, 5, capacity=9)\nG.add_edge(13, 2, capacity=9)\nG.add_edge(13, 0, capacity=7)\n\nG.add_edge(14, 9, capacity=3)\nG.add_edge(14, 4, capacity=10)\nG.add_edge(14, 8, capacity=6)\n\n# Calculate the maximum flow from node 14 to node 9\nmax_flow = nx.maximum_flow(G, 14, 9)[0]\n\nprint(\"Maximum flow from node 14 to node 9:\", max_flow)\n```"}, {"id": 158, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 11, 3), (2, 13, 1), (2, 10, 9),\n    (11, 1, 4), (11, 14, 5),\n    (13, 0, 7), (13, 6, 10), (13, 4, 2), (13, 9, 4), (13, 12, 0), (13, 1, 0),\n    (10, 12, 4), (10, 6, 6), (10, 1, 3),\n    (1, 4, 3), (1, 12, 8), (1, 14, 7), (1, 9, 3), (1, 11, 8), (1, 13, 5), (1, 0, 10), (1, 10, 0),\n    (14, 9, 6), (14, 7, 3), (14, 1, 1), (14, 2, 8),\n    (0, 2, 1), (0, 12, 3), (0, 3, 3),\n    (6, 5, 5), (6, 3, 2), (6, 14, 2), (6, 9, 10), (6, 11, 3), (6, 13, 8), (6, 10, 0),\n    (4, 14, 6), (4, 9, 2), (4, 11, 7), (4, 0, 4), (4, 1, 3),\n    (9, 7, 2), (9, 5, 2), (9, 14, 1),\n    (12, 3, 6), (12, 11, 6), (12, 13, 9), (12, 6, 9), (12, 10, 0),\n    (3, 9, 5), (3, 7, 9), (3, 6, 2), (3, 1, 6), (3, 12, 8),\n    (7, 8, 6), (7, 6, 8), (7, 1, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 13\nmax_flow = nx.maximum_flow(G, 10, 13)[0]\n\nprint(\"Maximum flow from node 10 to node 13:\", max_flow)\n```"}, {"id": 159, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(9, 10, weight=6)\nG.add_edge(9, 8, weight=6)\nG.add_edge(9, 2, weight=6)\nG.add_edge(9, 0, weight=7)\nG.add_edge(10, 1, weight=9)\nG.add_edge(10, 0, weight=1)\nG.add_edge(10, 3, weight=6)\nG.add_edge(10, 4, weight=5)\nG.add_edge(10, 9, weight=1)\nG.add_edge(10, 7, weight=0)\nG.add_edge(8, 2, weight=1)\nG.add_edge(8, 1, weight=4)\nG.add_edge(8, 0, weight=4)\nG.add_edge(8, 7, weight=5)\nG.add_edge(2, 0, weight=6)\nG.add_edge(2, 7, weight=1)\nG.add_edge(0, 9, weight=7)\nG.add_edge(0, 5, weight=2)\nG.add_edge(0, 10, weight=3)\nG.add_edge(0, 2, weight=7)\nG.add_edge(0, 1, weight=2)\nG.add_edge(1, 3, weight=4)\nG.add_edge(1, 7, weight=10)\nG.add_edge(1, 9, weight=2)\nG.add_edge(1, 5, weight=6)\nG.add_edge(1, 8, weight=4)\nG.add_edge(1, 2, weight=5)\nG.add_edge(1, 10, weight=0)\nG.add_edge(3, 4, weight=4)\nG.add_edge(3, 6, weight=10)\nG.add_edge(3, 5, weight=5)\nG.add_edge(3, 2, weight=1)\nG.add_edge(3, 1, weight=6)\nG.add_edge(3, 10, weight=0)\nG.add_edge(4, 7, weight=9)\nG.add_edge(4, 9, weight=10)\nG.add_edge(4, 5, weight=1)\nG.add_edge(4, 8, weight=3)\nG.add_edge(4, 0, weight=6)\nG.add_edge(7, 9, weight=1)\nG.add_edge(7, 5, weight=4)\nG.add_edge(7, 10, weight=10)\nG.add_edge(7, 8, weight=6)\nG.add_edge(5, 10, weight=2)\nG.add_edge(5, 8, weight=5)\nG.add_edge(5, 0, weight=1)\nG.add_edge(5, 6, weight=2)\nG.add_edge(5, 7, weight=0)\nG.add_edge(6, 9, weight=1)\nG.add_edge(6, 10, weight=6)\nG.add_edge(6, 7, weight=3)\nG.add_edge(6, 5, weight=0)\nG.add_edge(6, 3, weight=0)\n\n# Calculate the maximum flow from node 7 to node 6\nmax_flow = nx.maximum_flow_value(G, 7, 6)\n\nprint(\"Maximum flow from node 7 to node 6:\", max_flow)\n```"}, {"id": 160, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 3, capacity=5)\nG.add_edge(0, 1, capacity=3)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 5, capacity=10)\nG.add_edge(3, 7, capacity=2)\nG.add_edge(3, 4, capacity=4)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 2, capacity=8)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(1, 2, capacity=4)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 4, capacity=7)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(1, 3, capacity=0)\nG.add_edge(2, 0, capacity=1)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 7, capacity=2)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(5, 3, capacity=10)\nG.add_edge(5, 7, capacity=10)\nG.add_edge(5, 1, capacity=6)\nG.add_edge(7, 2, capacity=5)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 8, capacity=4)\nG.add_edge(4, 7, capacity=8)\nG.add_edge(4, 6, capacity=10)\nG.add_edge(4, 3, capacity=0)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(8, 7, capacity=7)\nG.add_edge(8, 6, capacity=4)\nG.add_edge(8, 1, capacity=4)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(6, 8, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 6\nmax_flow = nx.maximum_flow(G, 5, 6)[0]\n\nprint(max_flow)\n```"}, {"id": 161, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 4, capacity=6)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(4, 3, capacity=8)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(3, 10, capacity=9)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 6, capacity=1)\nG.add_edge(3, 8, capacity=4)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(10, 5, capacity=5)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 8, capacity=2)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(5, 0, capacity=7)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(2, 10, capacity=9)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(2, 5, capacity=0)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(0, 10, capacity=3)\nG.add_edge(0, 9, capacity=3)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(9, 6, capacity=3)\nG.add_edge(9, 8, capacity=10)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 6, capacity=2)\n\n# Calculate the maximum flow from node 9 to node 2\nmax_flow = nx.maximum_flow(G, 9, 2)[0]\n\nprint(\"Maximum flow from node 9 to node 2:\", max_flow)\n```"}, {"id": 162, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 11, 1), (2, 0, 8), (2, 4, 1), (2, 8, 4), (2, 7, 0),\n    (11, 3, 8), (11, 5, 6), (11, 8, 3),\n    (0, 1, 6), (0, 7, 5), (0, 5, 4), (0, 11, 7),\n    (4, 2, 7), (4, 7, 10), (4, 10, 9),\n    (8, 3, 6), (8, 10, 5), (8, 6, 8), (8, 7, 0), (8, 2, 0),\n    (3, 1, 5), (3, 7, 4), (3, 4, 4),\n    (5, 6, 9), (5, 7, 8),\n    (1, 7, 8), (1, 4, 8), (1, 8, 2), (1, 9, 2), (1, 3, 3),\n    (7, 8, 4), (7, 2, 6), (7, 5, 0),\n    (10, 6, 9), (10, 8, 2), (10, 2, 6), (10, 11, 9), (10, 1, 3),\n    (6, 4, 7), (6, 2, 2), (6, 10, 3), (6, 5, 0), (6, 8, 0),\n    (9, 8, 7), (9, 2, 6)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 6\nmax_flow = nx.maximum_flow(G, 5, 6)[0]\n\nprint(max_flow)\n```"}, {"id": 163, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 6, 3), (2, 5, 2), (2, 10, 8), (2, 9, 9), (2, 0, 10),\n    (6, 10, 4), (6, 4, 7), (6, 1, 1), (6, 11, 4), (6, 8, 3),\n    (5, 9, 2), (5, 4, 7), (5, 8, 4),\n    (10, 9, 6), (10, 0, 4), (10, 4, 10), (10, 7, 7),\n    (9, 0, 8), (9, 6, 3),\n    (0, 4, 7), (0, 3, 3), (0, 7, 3), (0, 1, 8), (0, 11, 5), (0, 5, 1), (0, 9, 1), (0, 8, 0),\n    (4, 11, 2), (4, 8, 5), (4, 5, 6),\n    (1, 2, 3), (1, 11, 10), (1, 4, 10),\n    (11, 8, 9), (11, 7, 6), (11, 1, 3), (11, 2, 2),\n    (8, 0, 8), (8, 1, 1), (8, 4, 0),\n    (7, 2, 9), (7, 6, 5), (7, 5, 2), (7, 10, 3), (7, 9, 5),\n    (3, 2, 6), (3, 11, 9), (3, 6, 1), (3, 0, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 3\nmax_flow = nx.maximum_flow(G, 4, 3)[0]\n\nprint(\"Maximum flow from node 4 to node 3:\", max_flow)\n```"}, {"id": 164, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 8, capacity=2)\nG.add_edge(8, 5, capacity=4)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 1, capacity=5)\nG.add_edge(8, 7, capacity=6)\nG.add_edge(5, 4, capacity=6)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 2, capacity=5)\nG.add_edge(5, 1, capacity=9)\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 7, capacity=4)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(2, 3, capacity=2)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(7, 5, capacity=8)\nG.add_edge(7, 4, capacity=10)\nG.add_edge(7, 3, capacity=1)\nG.add_edge(3, 5, capacity=10)\nG.add_edge(3, 6, capacity=10)\nG.add_edge(3, 1, capacity=1)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(6, 5, capacity=4)\nG.add_edge(6, 4, capacity=2)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 2, capacity=2)\nG.add_edge(4, 3, capacity=4)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(0, 8, capacity=8)\nG.add_edge(0, 2, capacity=7)\nG.add_edge(0, 1, capacity=1)\n\n# Calculate the maximum flow from node 2 to node 6\nmax_flow = nx.maximum_flow(G, 2, 6)[0]\n\nprint(\"Maximum flow from node 2 to node 6:\", max_flow)\n```"}, {"id": 165, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 5, capacity=4)\nG.add_edge(4, 1, capacity=9)\nG.add_edge(4, 7, capacity=6)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(4, 3, capacity=0)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 8, capacity=10)\nG.add_edge(5, 7, capacity=2)\nG.add_edge(1, 8, capacity=1)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(7, 3, capacity=6)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(7, 0, capacity=6)\nG.add_edge(7, 5, capacity=3)\nG.add_edge(7, 6, capacity=9)\nG.add_edge(6, 1, capacity=2)\nG.add_edge(6, 8, capacity=9)\nG.add_edge(6, 0, capacity=3)\nG.add_edge(6, 5, capacity=6)\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 9, capacity=8)\nG.add_edge(8, 3, capacity=10)\nG.add_edge(8, 4, capacity=2)\nG.add_edge(8, 2, capacity=7)\nG.add_edge(8, 1, capacity=9)\nG.add_edge(8, 6, capacity=0)\nG.add_edge(0, 9, capacity=5)\nG.add_edge(0, 6, capacity=9)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(3, 4, capacity=9)\nG.add_edge(3, 0, capacity=4)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(3, 9, capacity=5)\nG.add_edge(3, 6, capacity=3)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 8, capacity=0)\nG.add_edge(9, 0, capacity=9)\nG.add_edge(2, 9, capacity=3)\nG.add_edge(2, 0, capacity=7)\n\n# Calculate the maximum flow from node 1 to node 7\nmax_flow = nx.maximum_flow_value(G, 1, 7)\n\nprint(\"Maximum flow from node 1 to node 7:\", max_flow)\n```"}, {"id": 166, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (13, 7, 6), (13, 1, 6), (13, 8, 7), (13, 4, 2), (13, 6, 6),\n    (7, 11, 4), (7, 9, 5), (7, 3, 9), (7, 13, 1), (7, 6, 0),\n    (1, 13, 1), (1, 6, 0),\n    (8, 2, 7), (8, 6, 9), (8, 7, 2), (8, 11, 8), (8, 13, 0),\n    (4, 13, 7), (4, 10, 2), (4, 11, 6), (4, 9, 5), (4, 12, 3), (4, 2, 1), (4, 3, 0),\n    (6, 5, 8), (6, 7, 1), (6, 1, 4),\n    (11, 8, 6), (11, 2, 3), (11, 7, 8),\n    (9, 1, 4), (9, 0, 5), (9, 2, 7), (9, 6, 2),\n    (3, 4, 7), (3, 10, 10), (3, 7, 9), (3, 5, 0),\n    (10, 11, 6), (10, 2, 7), (10, 4, 9),\n    (12, 5, 7), (12, 8, 6), (12, 3, 4),\n    (5, 3, 4), (5, 6, 3),\n    (0, 2, 9)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 5 to node 8\nmax_flow = nx.maximum_flow_value(G, 5, 8)\nprint(max_flow)\n```"}, {"id": 167, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(9, 6, weight=7)\nG.add_edge(9, 11, weight=8)\nG.add_edge(9, 5, weight=0)\nG.add_edge(6, 8, weight=6)\nG.add_edge(6, 9, weight=0)\nG.add_edge(6, 7, weight=0)\nG.add_edge(11, 7, weight=8)\nG.add_edge(11, 3, weight=0)\nG.add_edge(8, 6, weight=0)\nG.add_edge(8, 0, weight=0)\nG.add_edge(8, 4, weight=0)\nG.add_edge(7, 3, weight=7)\nG.add_edge(7, 6, weight=9)\nG.add_edge(7, 11, weight=0)\nG.add_edge(4, 6, weight=1)\nG.add_edge(4, 3, weight=4)\nG.add_edge(4, 5, weight=1)\nG.add_edge(4, 8, weight=1)\nG.add_edge(4, 1, weight=0)\nG.add_edge(3, 5, weight=8)\nG.add_edge(3, 11, weight=5)\nG.add_edge(5, 9, weight=8)\nG.add_edge(5, 1, weight=4)\nG.add_edge(5, 3, weight=0)\nG.add_edge(1, 6, weight=4)\nG.add_edge(1, 0, weight=2)\nG.add_edge(1, 3, weight=6)\nG.add_edge(1, 4, weight=3)\nG.add_edge(1, 5, weight=0)\nG.add_edge(0, 11, weight=5)\nG.add_edge(0, 8, weight=8)\nG.add_edge(0, 1, weight=3)\nG.add_edge(0, 6, weight=4)\nG.add_edge(2, 5, weight=8)\nG.add_edge(2, 8, weight=9)\nG.add_edge(10, 4, weight=6)\nG.add_edge(10, 0, weight=2)\n\n# Calculate the maximum flow from node 3 to node 8\nmax_flow = nx.maximum_flow_value(G, 3, 8)\n\nprint(\"Maximum flow from node 3 to node 8:\", max_flow)\n```"}, {"id": 168, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 12, 9), (4, 8, 5), (4, 13, 1), (4, 11, 2), (4, 10, 0),\n    (12, 8, 7), (12, 5, 2), (12, 13, 1), (12, 11, 4),\n    (8, 7, 2), (8, 1, 4), (8, 13, 9), (8, 12, 6), (8, 10, 0),\n    (13, 8, 10), (13, 2, 9), (13, 5, 4), (13, 9, 7), (13, 3, 1), (13, 10, 10), (13, 0, 2), (13, 7, 0), (13, 4, 0),\n    (11, 12, 7), (11, 2, 3), (11, 5, 8), (11, 0, 2), (11, 13, 8), (11, 7, 0), (11, 4, 0),\n    (5, 9, 6), (5, 3, 9), (5, 10, 3), (5, 0, 4), (5, 1, 2), (5, 13, 2), (5, 8, 9),\n    (7, 1, 2), (7, 13, 4), (7, 11, 2), (7, 3, 3), (7, 10, 10),\n    (1, 7, 4), (1, 0, 1),\n    (2, 3, 3), (2, 6, 1), (2, 10, 5), (2, 7, 8), (2, 13, 0), (2, 11, 0), (2, 0, 0),\n    (9, 3, 1), (9, 6, 5), (9, 7, 10), (9, 4, 2), (9, 12, 3), (9, 13, 0),\n    (3, 7, 10), (3, 1, 7), (3, 13, 3), (3, 11, 2), (3, 4, 9), (3, 12, 10),\n    (10, 1, 9), (10, 4, 3), (10, 8, 2), (10, 7, 0),\n    (0, 1, 9), (0, 2, 2), (0, 3, 6), (0, 11, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 2\nmax_flow = nx.maximum_flow(G, 7, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 169, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nG.add_edge(9, 1, weight=1)\nG.add_edge(9, 4, weight=10)\nG.add_edge(9, 8, weight=7)\nG.add_edge(1, 6, weight=4)\nG.add_edge(1, 5, weight=4)\nG.add_edge(1, 8, weight=6)\nG.add_edge(1, 7, weight=1)\nG.add_edge(1, 3, weight=3)\nG.add_edge(1, 9, weight=0)\nG.add_edge(4, 8, weight=4)\nG.add_edge(4, 0, weight=6)\nG.add_edge(4, 2, weight=4)\nG.add_edge(4, 6, weight=6)\nG.add_edge(8, 3, weight=8)\nG.add_edge(8, 1, weight=2)\nG.add_edge(8, 0, weight=9)\nG.add_edge(8, 2, weight=7)\nG.add_edge(8, 5, weight=4)\nG.add_edge(6, 0, weight=6)\nG.add_edge(5, 8, weight=4)\nG.add_edge(5, 3, weight=5)\nG.add_edge(5, 4, weight=8)\nG.add_edge(7, 6, weight=9)\nG.add_edge(7, 9, weight=5)\nG.add_edge(7, 1, weight=0)\nG.add_edge(3, 2, weight=4)\nG.add_edge(3, 5, weight=7)\nG.add_edge(3, 8, weight=8)\nG.add_edge(0, 2, weight=5)\nG.add_edge(0, 6, weight=5)\nG.add_edge(0, 8, weight=1)\nG.add_edge(0, 9, weight=5)\nG.add_edge(0, 3, weight=3)\nG.add_edge(0, 1, weight=3)\nG.add_edge(2, 0, weight=8)\n\n# Calculate the maximum flow from node 9 to node 7\nmax_flow = nx.maximum_flow_value(G, 9, 7)\n\nprint(\"Maximum flow from node 9 to node 7:\", max_flow)\n```"}, {"id": 170, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 9, capacity=10)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(4, 5, capacity=2)\nG.add_edge(4, 6, capacity=4)\nG.add_edge(4, 3, capacity=7)\nG.add_edge(4, 2, capacity=0)\n\nG.add_edge(9, 0, capacity=10)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(9, 6, capacity=8)\nG.add_edge(9, 7, capacity=7)\nG.add_edge(9, 4, capacity=10)\nG.add_edge(9, 2, capacity=0)\n\nG.add_edge(0, 8, capacity=3)\nG.add_edge(0, 1, capacity=8)\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 9, capacity=1)\nG.add_edge(0, 5, capacity=0)\n\nG.add_edge(5, 2, capacity=6)\nG.add_edge(5, 4, capacity=10)\nG.add_edge(5, 0, capacity=6)\n\nG.add_edge(6, 4, capacity=10)\nG.add_edge(6, 8, capacity=1)\n\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 6, capacity=2)\n\nG.add_edge(7, 9, capacity=2)\n\nG.add_edge(8, 3, capacity=5)\nG.add_edge(8, 7, capacity=9)\nG.add_edge(8, 1, capacity=10)\nG.add_edge(8, 9, capacity=6)\n\nG.add_edge(1, 8, capacity=2)\nG.add_edge(1, 2, capacity=3)\n\nG.add_edge(2, 1, capacity=1)\nG.add_edge(2, 4, capacity=5)\nG.add_edge(2, 9, capacity=9)\nG.add_edge(2, 8, capacity=1)\nG.add_edge(2, 3, capacity=1)\nG.add_edge(2, 5, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 4\nmax_flow = nx.maximum_flow_value(G, 5, 4)\nprint(max_flow)\n```"}, {"id": 171, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(1, 6, weight=1)\nG.add_edge(1, 9, weight=6)\nG.add_edge(1, 11, weight=6)\nG.add_edge(6, 0, weight=6)\nG.add_edge(6, 2, weight=4)\nG.add_edge(6, 4, weight=5)\nG.add_edge(9, 3, weight=5)\nG.add_edge(9, 1, weight=3)\nG.add_edge(9, 6, weight=3)\nG.add_edge(11, 3, weight=7)\nG.add_edge(0, 3, weight=1)\nG.add_edge(0, 9, weight=6)\nG.add_edge(0, 10, weight=2)\nG.add_edge(0, 6, weight=0)\nG.add_edge(2, 6, weight=8)\nG.add_edge(2, 10, weight=2)\nG.add_edge(2, 8, weight=0)\nG.add_edge(4, 8, weight=7)\nG.add_edge(4, 2, weight=7)\nG.add_edge(3, 6, weight=1)\nG.add_edge(10, 8, weight=0)\nG.add_edge(10, 7, weight=0)\nG.add_edge(10, 2, weight=0)\nG.add_edge(10, 0, weight=0)\nG.add_edge(8, 7, weight=1)\nG.add_edge(8, 2, weight=7)\nG.add_edge(8, 10, weight=4)\nG.add_edge(5, 0, weight=9)\nG.add_edge(5, 7, weight=8)\nG.add_edge(5, 11, weight=5)\nG.add_edge(5, 6, weight=5)\nG.add_edge(7, 4, weight=6)\nG.add_edge(7, 10, weight=2)\nG.add_edge(7, 8, weight=0)\n\n# Calculate the maximum flow from node 8 to node 10\nmax_flow = nx.maximum_flow_value(G, 8, 10)\n\nprint(\"Maximum flow from node 8 to node 10:\", max_flow)\n```"}, {"id": 172, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 5, 7), (0, 7, 3), (0, 11, 10), (0, 6, 1), (0, 2, 7), (0, 4, 0),\n    (5, 3, 7), (5, 10, 6), (5, 9, 2), (5, 2, 7), (5, 1, 3), (5, 0, 5),\n    (7, 6, 3), (7, 8, 6), (7, 9, 2), (7, 4, 0),\n    (11, 10, 7),\n    (6, 1, 10), (6, 8, 9), (6, 3, 6), (6, 10, 2), (6, 4, 7), (6, 0, 0),\n    (2, 1, 6), (2, 4, 9), (2, 9, 3),\n    (3, 7, 6), (3, 11, 9), (3, 6, 3), (3, 1, 2), (3, 8, 5), (3, 4, 0), (3, 5, 0),\n    (10, 9, 1), (10, 11, 9), (10, 6, 1), (10, 2, 4), (10, 1, 9), (10, 8, 4),\n    (9, 7, 7), (9, 2, 10), (9, 0, 9), (9, 3, 7), (9, 10, 9),\n    (1, 8, 2), (1, 10, 4), (1, 11, 2), (1, 2, 4),\n    (8, 0, 1), (8, 4, 5), (8, 9, 7), (8, 7, 0), (8, 3, 0), (8, 1, 0), (8, 6, 0), (8, 10, 0),\n    (4, 7, 6), (4, 2, 5), (4, 8, 8), (4, 0, 2), (4, 3, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 8\nmax_flow = nx.maximum_flow_value(G, 4, 8)\n\nprint(\"Maximum flow from node 4 to node 8:\", max_flow)\n```"}, {"id": 173, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 10, capacity=6)\nG.add_edge(5, 9, capacity=10)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 4, capacity=4)\nG.add_edge(5, 13, capacity=0)\n\nG.add_edge(10, 8, capacity=10)\nG.add_edge(10, 1, capacity=2)\nG.add_edge(10, 5, capacity=7)\nG.add_edge(10, 11, capacity=2)\nG.add_edge(10, 3, capacity=9)\nG.add_edge(10, 13, capacity=0)\n\nG.add_edge(9, 6, capacity=5)\nG.add_edge(9, 13, capacity=6)\nG.add_edge(9, 1, capacity=10)\nG.add_edge(9, 5, capacity=0)\nG.add_edge(9, 7, capacity=0)\n\nG.add_edge(6, 1, capacity=10)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(6, 3, capacity=8)\n\nG.add_edge(4, 13, capacity=7)\nG.add_edge(4, 8, capacity=10)\nG.add_edge(4, 11, capacity=6)\nG.add_edge(4, 12, capacity=10)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 6, capacity=10)\n\nG.add_edge(8, 5, capacity=6)\nG.add_edge(8, 12, capacity=3)\nG.add_edge(8, 6, capacity=3)\nG.add_edge(8, 4, capacity=9)\n\nG.add_edge(1, 5, capacity=2)\nG.add_edge(1, 11, capacity=6)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(1, 0, capacity=6)\nG.add_edge(1, 13, capacity=9)\n\nG.add_edge(11, 2, capacity=3)\nG.add_edge(11, 10, capacity=4)\nG.add_edge(11, 6, capacity=8)\nG.add_edge(11, 8, capacity=6)\nG.add_edge(11, 1, capacity=7)\n\nG.add_edge(3, 12, capacity=9)\nG.add_edge(3, 10, capacity=4)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 7, capacity=10)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(3, 11, capacity=6)\n\nG.add_edge(13, 5, capacity=5)\nG.add_edge(13, 11, capacity=1)\nG.add_edge(13, 10, capacity=8)\n\nG.add_edge(12, 2, capacity=4)\nG.add_edge(12, 10, capacity=8)\nG.add_edge(12, 4, capacity=3)\nG.add_edge(12, 8, capacity=6)\nG.add_edge(12, 5, capacity=7)\nG.add_edge(12, 11, capacity=9)\nG.add_edge(12, 3, capacity=6)\n\nG.add_edge(0, 4, capacity=8)\nG.add_edge(0, 13, capacity=5)\nG.add_edge(0, 8, capacity=10)\nG.add_edge(0, 7, capacity=7)\nG.add_edge(0, 12, capacity=4)\n\nG.add_edge(2, 6, capacity=6)\nG.add_edge(2, 4, capacity=1)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 5, capacity=6)\n\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 5, capacity=8)\nG.add_edge(7, 11, capacity=9)\nG.add_edge(7, 9, capacity=2)\nG.add_edge(7, 0, capacity=6)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 13, capacity=1)\nG.add_edge(7, 3, capacity=0)\n\n# Calculate the maximum flow from node 13 to node 9\nmax_flow = nx.maximum_flow(G, 13, 9)[0]\nprint(max_flow)\n```"}, {"id": 174, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(7, 2, weight=1)\nG.add_edge(7, 1, weight=9)\nG.add_edge(7, 5, weight=9)\nG.add_edge(7, 0, weight=8)\nG.add_edge(7, 4, weight=0)\nG.add_edge(2, 8, weight=6)\nG.add_edge(2, 0, weight=1)\nG.add_edge(2, 7, weight=10)\nG.add_edge(2, 3, weight=2)\nG.add_edge(5, 0, weight=10)\nG.add_edge(5, 8, weight=9)\nG.add_edge(5, 1, weight=8)\nG.add_edge(5, 3, weight=0)\nG.add_edge(0, 7, weight=10)\nG.add_edge(0, 5, weight=0)\nG.add_edge(8, 1, weight=3)\nG.add_edge(8, 4, weight=2)\nG.add_edge(8, 3, weight=2)\nG.add_edge(3, 5, weight=1)\nG.add_edge(3, 4, weight=1)\nG.add_edge(3, 8, weight=0)\nG.add_edge(4, 3, weight=10)\nG.add_edge(4, 8, weight=3)\nG.add_edge(4, 7, weight=7)\nG.add_edge(6, 0, weight=10)\nG.add_edge(6, 7, weight=1)\n\n# Calculate the maximum flow from node 8 to node 0\nmax_flow = nx.maximum_flow_value(G, 8, 0)\n\nprint(\"Maximum flow from node 8 to node 0:\", max_flow)\n```"}, {"id": 175, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 7, capacity=1)\nG.add_edge(7, 3, capacity=5)\nG.add_edge(7, 8, capacity=1)\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 9, capacity=9)\nG.add_edge(3, 8, capacity=6)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(3, 9, capacity=4)\nG.add_edge(3, 10, capacity=3)\nG.add_edge(8, 0, capacity=8)\nG.add_edge(8, 2, capacity=10)\nG.add_edge(8, 11, capacity=5)\nG.add_edge(8, 9, capacity=6)\nG.add_edge(8, 7, capacity=1)\nG.add_edge(8, 3, capacity=0)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 11, capacity=8)\nG.add_edge(5, 10, capacity=6)\nG.add_edge(5, 8, capacity=1)\nG.add_edge(0, 2, capacity=7)\nG.add_edge(0, 9, capacity=9)\nG.add_edge(0, 10, capacity=7)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(1, 7, capacity=4)\nG.add_edge(1, 12, capacity=2)\nG.add_edge(1, 8, capacity=4)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(9, 4, capacity=3)\nG.add_edge(9, 6, capacity=10)\nG.add_edge(2, 0, capacity=2)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(2, 8, capacity=0)\nG.add_edge(11, 9, capacity=3)\nG.add_edge(11, 10, capacity=5)\nG.add_edge(11, 4, capacity=1)\nG.add_edge(11, 1, capacity=2)\nG.add_edge(10, 0, capacity=8)\nG.add_edge(10, 2, capacity=5)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 7, capacity=3)\nG.add_edge(4, 1, capacity=3)\nG.add_edge(12, 6, capacity=8)\nG.add_edge(12, 8, capacity=2)\nG.add_edge(12, 9, capacity=1)\nG.add_edge(12, 1, capacity=0)\nG.add_edge(14, 3, capacity=9)\nG.add_edge(14, 13, capacity=7)\nG.add_edge(13, 4, capacity=2)\nG.add_edge(13, 12, capacity=8)\nG.add_edge(13, 6, capacity=8)\nG.add_edge(13, 0, capacity=1)\nG.add_edge(13, 2, capacity=3)\nG.add_edge(13, 11, capacity=9)\n\n# Calculate the maximum flow from node 3 to node 12\nmax_flow = nx.maximum_flow(G, 3, 12)[0]\n\nprint(max_flow)\n```"}, {"id": 176, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 8, 7), (9, 14, 7), (9, 11, 8), (9, 12, 4), (9, 5, 0), (9, 7, 0), (9, 6, 0), (9, 1, 0),\n    (8, 14, 9), (8, 13, 9), (8, 5, 1), (8, 11, 0),\n    (14, 11, 2), (14, 5, 4), (14, 0, 9), (14, 6, 6), (14, 2, 0),\n    (11, 2, 10), (11, 3, 8), (11, 9, 4), (11, 8, 9), (11, 13, 6), (11, 4, 9),\n    (12, 9, 2), (12, 8, 1), (12, 14, 2), (12, 4, 2), (12, 11, 3), (12, 0, 2), (12, 2, 0),\n    (13, 10, 6), (13, 11, 0),\n    (5, 6, 2), (5, 3, 8), (5, 9, 10), (5, 4, 10), (5, 8, 0), (5, 14, 0), (5, 7, 0),\n    (0, 12, 5), (0, 2, 2), (0, 3, 7), (0, 8, 1),\n    (6, 7, 3), (6, 9, 1), (6, 14, 8),\n    (2, 14, 8), (2, 4, 3), (2, 0, 2), (2, 12, 3), (2, 11, 0),\n    (3, 14, 10), (3, 4, 1), (3, 11, 7),\n    (4, 2, 8), (4, 7, 7), (4, 3, 2), (4, 14, 1), (4, 11, 0),\n    (10, 6, 9), (10, 1, 3), (10, 3, 10), (10, 14, 3), (10, 13, 10),\n    (7, 9, 5), (7, 8, 10), (7, 4, 8), (7, 5, 7), (7, 6, 0)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 11 to node 9\nmax_flow = nx.maximum_flow_value(G, 11, 9)\nprint(max_flow)\n```"}, {"id": 177, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 3, capacity=8)\nG.add_edge(4, 5, capacity=5)\nG.add_edge(4, 2, capacity=9)\nG.add_edge(4, 6, capacity=7)\nG.add_edge(4, 1, capacity=0)\n\nG.add_edge(3, 2, capacity=10)\nG.add_edge(3, 6, capacity=7)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 0, capacity=5)\n\nG.add_edge(5, 7, capacity=4)\nG.add_edge(5, 2, capacity=6)\nG.add_edge(5, 6, capacity=5)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 4, capacity=0)\n\nG.add_edge(2, 3, capacity=4)\nG.add_edge(2, 7, capacity=3)\nG.add_edge(2, 1, capacity=0)\n\nG.add_edge(6, 0, capacity=9)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(6, 1, capacity=0)\n\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 2, capacity=8)\nG.add_edge(1, 6, capacity=9)\n\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 1, capacity=3)\n\nG.add_edge(7, 6, capacity=4)\nG.add_edge(7, 2, capacity=0)\nG.add_edge(7, 5, capacity=0)\n\n# Calculate the maximum flow from node 1 to node 7\nmax_flow = nx.maximum_flow_value(G, 1, 7)\n\nprint(\"Maximum flow from node 1 to node 7:\", max_flow)\n```"}, {"id": 178, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 5, capacity=8)\nG.add_edge(6, 7, capacity=3)\nG.add_edge(6, 2, capacity=1)\nG.add_edge(6, 1, capacity=9)\nG.add_edge(5, 4, capacity=4)\nG.add_edge(5, 8, capacity=9)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 8, capacity=6)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(2, 6, capacity=9)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(4, 5, capacity=0)\nG.add_edge(8, 3, capacity=1)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(3, 7, capacity=9)\nG.add_edge(3, 6, capacity=10)\nG.add_edge(0, 4, capacity=10)\n\n# Calculate the maximum flow from node 6 to node 4\nmax_flow = nx.maximum_flow(G, 6, 4)[0]\n\nprint(\"Maximum flow from node 6 to node 4:\", max_flow)\n```"}, {"id": 179, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 10, capacity=7)\nG.add_edge(8, 4, capacity=3)\nG.add_edge(8, 5, capacity=2)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(10, 6, capacity=1)\nG.add_edge(10, 12, capacity=2)\nG.add_edge(10, 5, capacity=10)\nG.add_edge(4, 6, capacity=6)\nG.add_edge(4, 11, capacity=5)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(5, 1, capacity=5)\nG.add_edge(5, 9, capacity=2)\nG.add_edge(5, 12, capacity=4)\nG.add_edge(5, 8, capacity=0)\nG.add_edge(5, 11, capacity=0)\nG.add_edge(6, 8, capacity=6)\nG.add_edge(12, 8, capacity=5)\nG.add_edge(12, 9, capacity=2)\nG.add_edge(12, 2, capacity=10)\nG.add_edge(12, 0, capacity=5)\nG.add_edge(12, 11, capacity=0)\nG.add_edge(11, 7, capacity=4)\nG.add_edge(11, 3, capacity=7)\nG.add_edge(11, 0, capacity=10)\nG.add_edge(11, 12, capacity=1)\nG.add_edge(11, 5, capacity=5)\nG.add_edge(11, 10, capacity=2)\nG.add_edge(11, 4, capacity=0)\nG.add_edge(1, 9, capacity=6)\nG.add_edge(1, 4, capacity=3)\nG.add_edge(1, 8, capacity=1)\nG.add_edge(9, 7, capacity=5)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(9, 8, capacity=8)\nG.add_edge(9, 1, capacity=0)\nG.add_edge(9, 5, capacity=0)\nG.add_edge(9, 0, capacity=0)\nG.add_edge(9, 12, capacity=0)\nG.add_edge(7, 0, capacity=9)\nG.add_edge(7, 12, capacity=1)\nG.add_edge(7, 8, capacity=7)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(7, 11, capacity=10)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 12, capacity=4)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(2, 9, capacity=1)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(0, 5, capacity=3)\nG.add_edge(0, 8, capacity=10)\nG.add_edge(0, 10, capacity=2)\nG.add_edge(0, 9, capacity=1)\nG.add_edge(0, 2, capacity=5)\nG.add_edge(0, 11, capacity=0)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 12, capacity=6)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 1, capacity=1)\nG.add_edge(3, 11, capacity=2)\nG.add_edge(3, 7, capacity=3)\n\n# Calculate the maximum flow from node 1 to node 9\nmax_flow = nx.maximum_flow(G, 1, 9)[0]\n\nprint(\"Maximum flow from node 1 to node 9:\", max_flow)\n```"}, {"id": 180, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(11, 4, capacity=3)\nG.add_edge(11, 6, capacity=1)\nG.add_edge(11, 10, capacity=9)\nG.add_edge(11, 9, capacity=0)\nG.add_edge(4, 10, capacity=6)\nG.add_edge(4, 8, capacity=9)\nG.add_edge(6, 10, capacity=9)\nG.add_edge(10, 2, capacity=2)\nG.add_edge(10, 0, capacity=1)\nG.add_edge(10, 8, capacity=6)\nG.add_edge(10, 3, capacity=4)\nG.add_edge(10, 11, capacity=0)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(2, 11, capacity=2)\nG.add_edge(0, 11, capacity=5)\nG.add_edge(0, 5, capacity=7)\nG.add_edge(0, 10, capacity=0)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 5, capacity=10)\nG.add_edge(3, 6, capacity=1)\nG.add_edge(5, 9, capacity=9)\nG.add_edge(9, 5, capacity=1)\nG.add_edge(9, 11, capacity=7)\nG.add_edge(7, 2, capacity=3)\nG.add_edge(7, 11, capacity=7)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 6, capacity=2)\nG.add_edge(1, 3, capacity=7)\n\n# Calculate the maximum flow from node 5 to node 0\nmax_flow = nx.maximum_flow(G, 5, 0)[0]\n\nprint(\"Maximum flow from node 5 to node 0:\", max_flow)\n```"}, {"id": 181, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 11, capacity=7)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(8, 5, capacity=0)\nG.add_edge(8, 1, capacity=0)\nG.add_edge(11, 5, capacity=6)\nG.add_edge(11, 3, capacity=9)\nG.add_edge(11, 8, capacity=0)\nG.add_edge(11, 0, capacity=0)\nG.add_edge(5, 3, capacity=9)\nG.add_edge(5, 8, capacity=2)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 9, capacity=0)\nG.add_edge(3, 0, capacity=1)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 10, capacity=3)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(10, 9, capacity=3)\nG.add_edge(10, 4, capacity=0)\nG.add_edge(0, 11, capacity=9)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 3, capacity=5)\nG.add_edge(9, 2, capacity=2)\nG.add_edge(9, 5, capacity=5)\nG.add_edge(9, 10, capacity=0)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 10, capacity=9)\nG.add_edge(2, 1, capacity=2)\nG.add_edge(2, 9, capacity=0)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 5, capacity=7)\nG.add_edge(1, 7, capacity=6)\nG.add_edge(1, 8, capacity=1)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(6, 4, capacity=9)\n\n# Calculate the maximum flow from node 4 to node 11\nmax_flow = nx.maximum_flow_value(G, 4, 11)\n\nprint(max_flow)\n```"}, {"id": 182, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(1, 6, capacity=5)\nG.add_edge(1, 0, capacity=1)\nG.add_edge(1, 5, capacity=2)\nG.add_edge(1, 9, capacity=10)\nG.add_edge(4, 7, capacity=6)\nG.add_edge(4, 2, capacity=5)\nG.add_edge(4, 8, capacity=8)\nG.add_edge(4, 1, capacity=7)\nG.add_edge(6, 5, capacity=2)\nG.add_edge(6, 4, capacity=9)\nG.add_edge(6, 1, capacity=0)\nG.add_edge(0, 6, capacity=2)\nG.add_edge(5, 9, capacity=5)\nG.add_edge(5, 3, capacity=1)\nG.add_edge(5, 0, capacity=6)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(9, 7, capacity=8)\nG.add_edge(9, 0, capacity=6)\nG.add_edge(9, 8, capacity=8)\nG.add_edge(7, 0, capacity=7)\nG.add_edge(7, 9, capacity=7)\nG.add_edge(7, 1, capacity=2)\nG.add_edge(2, 1, capacity=6)\nG.add_edge(2, 7, capacity=7)\nG.add_edge(8, 0, capacity=9)\n\n# Calculate the maximum flow from node 1 to node 5\nmax_flow = nx.maximum_flow(G, 1, 5)[0]\n\nprint(\"Maximum flow from node 1 to node 5:\", max_flow)\n```"}, {"id": 183, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 1, capacity=5)\nG.add_edge(9, 13, capacity=8)\nG.add_edge(9, 3, capacity=0)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 13, capacity=2)\nG.add_edge(13, 5, capacity=2)\nG.add_edge(13, 8, capacity=9)\nG.add_edge(13, 2, capacity=1)\nG.add_edge(13, 1, capacity=0)\nG.add_edge(13, 9, capacity=0)\nG.add_edge(3, 9, capacity=7)\nG.add_edge(3, 14, capacity=6)\nG.add_edge(3, 8, capacity=2)\nG.add_edge(3, 1, capacity=0)\nG.add_edge(5, 12, capacity=9)\nG.add_edge(5, 11, capacity=8)\nG.add_edge(5, 8, capacity=6)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 3, capacity=10)\nG.add_edge(5, 13, capacity=6)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(8, 6, capacity=8)\nG.add_edge(2, 5, capacity=5)\nG.add_edge(2, 14, capacity=0)\nG.add_edge(2, 13, capacity=0)\nG.add_edge(10, 14, capacity=7)\nG.add_edge(10, 6, capacity=5)\nG.add_edge(10, 3, capacity=3)\nG.add_edge(14, 1, capacity=10)\nG.add_edge(14, 2, capacity=3)\nG.add_edge(14, 9, capacity=2)\nG.add_edge(14, 10, capacity=8)\nG.add_edge(14, 3, capacity=0)\nG.add_edge(6, 3, capacity=10)\nG.add_edge(6, 13, capacity=10)\nG.add_edge(6, 9, capacity=2)\nG.add_edge(12, 11, capacity=9)\nG.add_edge(12, 6, capacity=5)\nG.add_edge(12, 3, capacity=3)\nG.add_edge(12, 7, capacity=9)\nG.add_edge(12, 14, capacity=10)\nG.add_edge(12, 5, capacity=0)\nG.add_edge(11, 8, capacity=3)\nG.add_edge(11, 3, capacity=6)\nG.add_edge(11, 5, capacity=3)\nG.add_edge(11, 10, capacity=8)\nG.add_edge(7, 9, capacity=5)\nG.add_edge(0, 3, capacity=1)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(4, 9, capacity=7)\nG.add_edge(4, 1, capacity=9)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(4, 5, capacity=6)\n\n# Calculate the maximum flow from node 1 to node 12\nmax_flow = nx.maximum_flow(G, 1, 12)[0]\n\nprint(max_flow)\n```"}, {"id": 184, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 8, capacity=10)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(8, 5, capacity=3)\nG.add_edge(8, 11, capacity=3)\nG.add_edge(8, 1, capacity=6)\nG.add_edge(8, 3, capacity=3)\nG.add_edge(4, 0, capacity=2)\nG.add_edge(4, 8, capacity=9)\nG.add_edge(4, 5, capacity=2)\nG.add_edge(4, 9, capacity=10)\nG.add_edge(5, 1, capacity=4)\nG.add_edge(5, 4, capacity=3)\nG.add_edge(5, 8, capacity=0)\nG.add_edge(5, 10, capacity=0)\nG.add_edge(5, 0, capacity=0)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(11, 9, capacity=10)\nG.add_edge(11, 1, capacity=4)\nG.add_edge(11, 6, capacity=1)\nG.add_edge(11, 8, capacity=5)\nG.add_edge(1, 3, capacity=2)\nG.add_edge(1, 10, capacity=6)\nG.add_edge(1, 8, capacity=0)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 2, capacity=8)\nG.add_edge(3, 11, capacity=2)\nG.add_edge(3, 7, capacity=1)\nG.add_edge(3, 8, capacity=0)\nG.add_edge(3, 1, capacity=0)\nG.add_edge(3, 10, capacity=0)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 5, capacity=5)\nG.add_edge(0, 11, capacity=3)\nG.add_edge(0, 9, capacity=9)\nG.add_edge(0, 3, capacity=5)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(9, 4, capacity=6)\nG.add_edge(9, 6, capacity=2)\nG.add_edge(9, 11, capacity=0)\nG.add_edge(10, 5, capacity=1)\nG.add_edge(10, 11, capacity=10)\nG.add_edge(10, 9, capacity=9)\nG.add_edge(10, 3, capacity=4)\nG.add_edge(10, 1, capacity=0)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 7, capacity=4)\nG.add_edge(2, 10, capacity=10)\nG.add_edge(2, 8, capacity=4)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(7, 8, capacity=7)\nG.add_edge(7, 9, capacity=4)\n\n# Calculate the maximum flow from node 8 to node 5\nmax_flow = nx.maximum_flow_value(G, 8, 5)\n\nprint(max_flow)\n```"}, {"id": 185, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 9, 10), (8, 1, 8), (8, 6, 9), (8, 0, 1), (8, 3, 9), (8, 5, 0),\n    (9, 1, 1), (9, 3, 0), (9, 8, 0), (9, 5, 0), (9, 2, 0), (9, 6, 0),\n    (1, 2, 1), (1, 0, 9), (1, 3, 10), (1, 8, 4),\n    (6, 2, 8), (6, 4, 3), (6, 9, 3), (6, 5, 8),\n    (0, 8, 2),\n    (3, 8, 9), (3, 9, 10), (3, 5, 9), (3, 1, 4),\n    (2, 0, 6), (2, 9, 2), (2, 6, 10), (2, 5, 0),\n    (4, 3, 8), (4, 6, 1), (4, 2, 1),\n    (5, 1, 9), (5, 2, 7), (5, 4, 5), (5, 3, 8), (5, 8, 4), (5, 9, 1),\n    (7, 4, 4), (7, 3, 7), (7, 8, 3), (7, 1, 5), (7, 2, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 9\nmax_flow = nx.maximum_flow(G, 3, 9)[0]\n\nprint(\"Maximum flow from node 3 to node 9:\", max_flow)\n```"}, {"id": 186, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 5, capacity=5)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(2, 3, capacity=10)\nG.add_edge(2, 5, capacity=10)\nG.add_edge(5, 0, capacity=8)\nG.add_edge(5, 4, capacity=1)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(5, 7, capacity=9)\nG.add_edge(5, 3, capacity=8)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(3, 5, capacity=9)\nG.add_edge(3, 0, capacity=10)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 8, capacity=1)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(4, 7, capacity=6)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 1, capacity=5)\nG.add_edge(8, 2, capacity=5)\nG.add_edge(8, 6, capacity=1)\nG.add_edge(1, 4, capacity=5)\nG.add_edge(1, 8, capacity=5)\nG.add_edge(1, 6, capacity=1)\nG.add_edge(1, 5, capacity=4)\nG.add_edge(6, 8, capacity=4)\n\n# Calculate the maximum flow from node 2 to node 0\nmax_flow = nx.maximum_flow(G, 2, 0)[0]\n\nprint(max_flow)\n```"}, {"id": 187, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 5, capacity=4)\nG.add_edge(5, 3, capacity=3)\nG.add_edge(5, 8, capacity=5)\nG.add_edge(5, 7, capacity=3)\nG.add_edge(3, 8, capacity=7)\nG.add_edge(3, 5, capacity=2)\nG.add_edge(8, 2, capacity=2)\nG.add_edge(8, 3, capacity=0)\nG.add_edge(7, 8, capacity=2)\nG.add_edge(10, 3, capacity=8)\nG.add_edge(1, 3, capacity=1)\nG.add_edge(9, 8, capacity=6)\nG.add_edge(9, 7, capacity=1)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(2, 4, capacity=3)\nG.add_edge(2, 8, capacity=0)\nG.add_edge(11, 4, capacity=2)\nG.add_edge(11, 12, capacity=5)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(6, 0, capacity=8)\nG.add_edge(6, 1, capacity=6)\n\n# Calculate the maximum flow from node 3 to node 2\nmax_flow = nx.maximum_flow(G, 3, 2)[0]\n\nprint(\"Maximum flow from node 3 to node 2:\", max_flow)\n```"}, {"id": 188, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 10, capacity=7)\nG.add_edge(10, 9, capacity=2)\nG.add_edge(10, 6, capacity=5)\nG.add_edge(9, 12, capacity=7)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(9, 13, capacity=3)\nG.add_edge(9, 6, capacity=8)\nG.add_edge(9, 5, capacity=4)\nG.add_edge(9, 8, capacity=4)\nG.add_edge(9, 10, capacity=7)\nG.add_edge(9, 0, capacity=10)\nG.add_edge(9, 14, capacity=0)\nG.add_edge(5, 7, capacity=6)\nG.add_edge(5, 8, capacity=10)\nG.add_edge(5, 4, capacity=4)\nG.add_edge(5, 14, capacity=2)\nG.add_edge(5, 9, capacity=1)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 1, capacity=1)\nG.add_edge(5, 12, capacity=0)\nG.add_edge(7, 8, capacity=3)\nG.add_edge(7, 9, capacity=8)\nG.add_edge(7, 12, capacity=2)\nG.add_edge(7, 13, capacity=5)\nG.add_edge(7, 6, capacity=4)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(7, 2, capacity=0)\nG.add_edge(7, 0, capacity=0)\nG.add_edge(7, 1, capacity=0)\nG.add_edge(7, 11, capacity=0)\nG.add_edge(8, 4, capacity=6)\nG.add_edge(8, 14, capacity=6)\nG.add_edge(8, 3, capacity=8)\nG.add_edge(8, 2, capacity=6)\nG.add_edge(4, 14, capacity=7)\nG.add_edge(4, 12, capacity=5)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 13, capacity=3)\nG.add_edge(4, 0, capacity=10)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(14, 9, capacity=9)\nG.add_edge(14, 12, capacity=7)\nG.add_edge(14, 2, capacity=7)\nG.add_edge(14, 13, capacity=8)\nG.add_edge(14, 6, capacity=4)\nG.add_edge(14, 10, capacity=7)\nG.add_edge(14, 4, capacity=9)\nG.add_edge(14, 8, capacity=0)\nG.add_edge(3, 1, capacity=3)\nG.add_edge(3, 2, capacity=5)\nG.add_edge(3, 11, capacity=7)\nG.add_edge(3, 13, capacity=6)\nG.add_edge(3, 5, capacity=3)\nG.add_edge(3, 10, capacity=8)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 8, capacity=0)\nG.add_edge(1, 13, capacity=9)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 7, capacity=1)\nG.add_edge(1, 4, capacity=10)\nG.add_edge(1, 14, capacity=10)\nG.add_edge(1, 9, capacity=1)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(12, 11, capacity=7)\nG.add_edge(12, 13, capacity=3)\nG.add_edge(12, 5, capacity=8)\nG.add_edge(12, 8, capacity=2)\nG.add_edge(12, 10, capacity=3)\nG.add_edge(12, 0, capacity=8)\nG.add_edge(12, 4, capacity=0)\nG.add_edge(13, 6, capacity=7)\nG.add_edge(13, 5, capacity=6)\nG.add_edge(13, 4, capacity=7)\nG.add_edge(13, 14, capacity=5)\nG.add_edge(13, 9, capacity=1)\nG.add_edge(13, 3, capacity=2)\nG.add_edge(13, 1, capacity=8)\nG.add_edge(13, 2, capacity=5)\nG.add_edge(2, 11, capacity=5)\nG.add_edge(2, 6, capacity=4)\nG.add_edge(2, 7, capacity=3)\nG.add_edge(2, 8, capacity=3)\nG.add_edge(2, 4, capacity=6)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(0, 2, capacity=1)\nG.add_edge(0, 13, capacity=1)\nG.add_edge(0, 7, capacity=1)\nG.add_edge(0, 4, capacity=0)\n\n# Calculate the maximum flow from node 8 to node 7\nmax_flow = nx.maximum_flow_value(G, 8, 7)\nprint(max_flow)\n```"}, {"id": 189, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 3, capacity=6)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(3, 2, capacity=2)\nG.add_edge(3, 7, capacity=7)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(2, 8, capacity=2)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 6, capacity=5)\nG.add_edge(7, 6, capacity=3)\nG.add_edge(7, 1, capacity=7)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(8, 9, capacity=6)\nG.add_edge(8, 5, capacity=8)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(0, 6, capacity=1)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(9, 8, capacity=2)\nG.add_edge(9, 0, capacity=4)\nG.add_edge(9, 4, capacity=6)\nG.add_edge(5, 7, capacity=1)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 8, capacity=0)\nG.add_edge(10, 5, capacity=9)\n\n# Calculate the maximum flow from node 2 to node 1\nmax_flow = nx.maximum_flow_value(G, 2, 1)\n\nprint(max_flow)\n```"}, {"id": 190, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 8, capacity=10)\nG.add_edge(2, 9, capacity=8)\nG.add_edge(8, 6, capacity=4)\nG.add_edge(8, 0, capacity=9)\nG.add_edge(8, 5, capacity=8)\nG.add_edge(9, 3, capacity=4)\nG.add_edge(9, 2, capacity=3)\nG.add_edge(9, 5, capacity=4)\nG.add_edge(9, 8, capacity=2)\nG.add_edge(0, 10, capacity=4)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(5, 0, capacity=1)\nG.add_edge(5, 1, capacity=8)\nG.add_edge(7, 8, capacity=4)\nG.add_edge(7, 3, capacity=2)\nG.add_edge(4, 5, capacity=4)\nG.add_edge(4, 7, capacity=3)\nG.add_edge(4, 2, capacity=9)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(10, 1, capacity=4)\nG.add_edge(10, 9, capacity=5)\nG.add_edge(10, 6, capacity=5)\n\n# Calculate the maximum flow from node 0 to node 4\nmax_flow = nx.maximum_flow(G, 0, 4)[0]\n\nprint(\"Maximum flow from node 0 to node 4:\", max_flow)\n```"}, {"id": 191, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 3, 1), (4, 5, 2), (4, 0, 9), (4, 7, 0), (4, 2, 0),\n    (3, 1, 5), (3, 2, 7), (3, 0, 2), (3, 6, 1), (3, 4, 2),\n    (5, 2, 9), (5, 6, 2), (5, 4, 3), (5, 3, 7), (5, 1, 8), (5, 7, 9), (5, 0, 0),\n    (0, 6, 5), (0, 3, 4), (0, 1, 10), (0, 7, 8), (0, 5, 5),\n    (1, 2, 2), (1, 3, 2),\n    (2, 6, 10), (2, 4, 2), (2, 3, 7), (2, 7, 2),\n    (6, 3, 1), (6, 0, 4),\n    (7, 2, 10), (7, 0, 8), (7, 4, 7), (7, 1, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 4\nmax_flow = nx.maximum_flow_value(G, 7, 4)\n\nprint(\"Maximum flow from node 7 to node 4:\", max_flow)\n```"}, {"id": 192, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(2, 0, weight=6)\nG.add_edge(0, 9, weight=2)\nG.add_edge(0, 8, weight=8)\nG.add_edge(0, 2, weight=8)\nG.add_edge(0, 12, weight=0)\nG.add_edge(9, 4, weight=7)\nG.add_edge(9, 12, weight=7)\nG.add_edge(9, 0, weight=0)\nG.add_edge(8, 5, weight=6)\nG.add_edge(8, 1, weight=5)\nG.add_edge(8, 2, weight=1)\nG.add_edge(8, 12, weight=0)\nG.add_edge(8, 0, weight=0)\nG.add_edge(4, 13, weight=4)\nG.add_edge(4, 2, weight=10)\nG.add_edge(4, 7, weight=5)\nG.add_edge(4, 8, weight=9)\nG.add_edge(4, 10, weight=7)\nG.add_edge(4, 1, weight=10)\nG.add_edge(4, 9, weight=0)\nG.add_edge(4, 3, weight=0)\nG.add_edge(12, 2, weight=5)\nG.add_edge(12, 0, weight=4)\nG.add_edge(12, 11, weight=10)\nG.add_edge(12, 8, weight=2)\nG.add_edge(12, 1, weight=4)\nG.add_edge(5, 3, weight=4)\nG.add_edge(5, 0, weight=4)\nG.add_edge(5, 8, weight=5)\nG.add_edge(1, 12, weight=7)\nG.add_edge(6, 8, weight=5)\nG.add_edge(6, 10, weight=7)\nG.add_edge(10, 4, weight=8)\nG.add_edge(10, 12, weight=5)\nG.add_edge(10, 3, weight=8)\nG.add_edge(3, 2, weight=10)\nG.add_edge(3, 5, weight=9)\nG.add_edge(3, 4, weight=10)\nG.add_edge(11, 13, weight=10)\nG.add_edge(11, 12, weight=0)\nG.add_edge(13, 12, weight=3)\nG.add_edge(13, 2, weight=4)\nG.add_edge(13, 0, weight=6)\nG.add_edge(13, 6, weight=7)\nG.add_edge(13, 1, weight=9)\nG.add_edge(13, 11, weight=0)\nG.add_edge(13, 4, weight=0)\nG.add_edge(13, 7, weight=0)\nG.add_edge(7, 13, weight=8)\nG.add_edge(7, 4, weight=0)\n\n# Calculate the maximum flow from node 12 to node 13\nmax_flow = nx.maximum_flow_value(G, 12, 13)\n\nprint(\"Maximum flow from node 12 to node 13:\", max_flow)\n```"}, {"id": 193, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nG.add_edge(6, 1, weight=6)\nG.add_edge(6, 10, weight=1)\nG.add_edge(6, 0, weight=8)\nG.add_edge(1, 10, weight=7)\nG.add_edge(1, 6, weight=7)\nG.add_edge(1, 3, weight=7)\nG.add_edge(10, 2, weight=2)\nG.add_edge(10, 5, weight=2)\nG.add_edge(0, 3, weight=2)\nG.add_edge(0, 1, weight=1)\nG.add_edge(3, 10, weight=3)\nG.add_edge(3, 0, weight=5)\nG.add_edge(3, 9, weight=6)\nG.add_edge(3, 6, weight=4)\nG.add_edge(2, 4, weight=6)\nG.add_edge(2, 6, weight=2)\nG.add_edge(2, 3, weight=7)\nG.add_edge(5, 8, weight=8)\nG.add_edge(5, 6, weight=8)\nG.add_edge(5, 3, weight=7)\nG.add_edge(5, 2, weight=3)\nG.add_edge(5, 4, weight=0)\nG.add_edge(9, 10, weight=1)\nG.add_edge(4, 5, weight=10)\nG.add_edge(4, 0, weight=1)\nG.add_edge(4, 7, weight=0)\nG.add_edge(7, 4, weight=8)\nG.add_edge(7, 6, weight=7)\nG.add_edge(7, 3, weight=3)\nG.add_edge(8, 9, weight=2)\nG.add_edge(8, 7, weight=1)\nG.add_edge(8, 5, weight=0)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow(G, 7, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 194, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 8, capacity=8)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(8, 5, capacity=10)\nG.add_edge(8, 2, capacity=9)\nG.add_edge(0, 4, capacity=5)\nG.add_edge(0, 7, capacity=5)\nG.add_edge(0, 8, capacity=2)\nG.add_edge(0, 5, capacity=6)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(5, 2, capacity=4)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(4, 6, capacity=1)\nG.add_edge(4, 1, capacity=6)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 3, capacity=2)\nG.add_edge(7, 8, capacity=8)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(7, 0, capacity=0)\nG.add_edge(3, 8, capacity=1)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(3, 2, capacity=10)\nG.add_edge(6, 5, capacity=8)\nG.add_edge(6, 2, capacity=10)\nG.add_edge(6, 4, capacity=9)\nG.add_edge(6, 1, capacity=0)\nG.add_edge(1, 2, capacity=5)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 8, capacity=9)\nG.add_edge(1, 6, capacity=9)\n\n# Calculate the maximum flow from node 2 to node 4\nmax_flow = nx.maximum_flow(G, 2, 4)[0]\n\nprint(\"Maximum flow from node 2 to node 4:\", max_flow)\n```"}, {"id": 195, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 5, capacity=6)\nG.add_edge(5, 7, capacity=1)\nG.add_edge(5, 11, capacity=6)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 1, capacity=4)\nG.add_edge(7, 6, capacity=7)\nG.add_edge(11, 12, capacity=6)\nG.add_edge(11, 6, capacity=3)\nG.add_edge(11, 8, capacity=1)\nG.add_edge(11, 3, capacity=10)\nG.add_edge(11, 1, capacity=5)\nG.add_edge(11, 2, capacity=4)\nG.add_edge(11, 9, capacity=5)\nG.add_edge(11, 0, capacity=3)\nG.add_edge(11, 5, capacity=0)\nG.add_edge(6, 3, capacity=4)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(1, 7, capacity=7)\nG.add_edge(1, 2, capacity=6)\nG.add_edge(1, 8, capacity=6)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(10, 8, capacity=6)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 3, capacity=0)\nG.add_edge(8, 10, capacity=5)\nG.add_edge(8, 6, capacity=2)\nG.add_edge(8, 11, capacity=0)\nG.add_edge(9, 0, capacity=8)\nG.add_edge(9, 11, capacity=0)\nG.add_edge(9, 10, capacity=0)\nG.add_edge(12, 2, capacity=9)\nG.add_edge(12, 4, capacity=4)\nG.add_edge(12, 11, capacity=2)\nG.add_edge(3, 0, capacity=10)\nG.add_edge(3, 10, capacity=5)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(3, 8, capacity=2)\nG.add_edge(2, 4, capacity=1)\nG.add_edge(2, 7, capacity=2)\n\n# Calculate the maximum flow from node 5 to node 9\nmax_flow = nx.maximum_flow(G, 5, 9)[0]\n\nprint(max_flow)\n```"}, {"id": 196, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (12, 4, 4), (12, 9, 5), (12, 7, 4), (12, 1, 9),\n    (4, 9, 5),\n    (9, 11, 9), (9, 7, 8), (9, 6, 5), (9, 1, 8), (9, 2, 2), (9, 10, 6), (9, 4, 3), (9, 0, 0),\n    (7, 1, 4), (7, 2, 10), (7, 0, 2), (7, 13, 5), (7, 8, 6), (7, 11, 2),\n    (1, 3, 1), (1, 6, 7), (1, 7, 0),\n    (11, 6, 10), (11, 2, 1), (11, 0, 2), (11, 12, 6), (11, 13, 8), (11, 14, 9), (11, 9, 9),\n    (6, 1, 1), (6, 2, 6), (6, 4, 4), (6, 9, 2), (6, 5, 10), (6, 11, 0),\n    (2, 0, 10), (2, 12, 2), (2, 13, 3), (2, 11, 8), (2, 7, 8), (2, 6, 2),\n    (10, 14, 9), (10, 11, 7), (10, 5, 4), (10, 6, 10), (10, 0, 5),\n    (0, 9, 7), (0, 7, 2),\n    (13, 14, 4), (13, 9, 6), (13, 11, 3), (13, 5, 10), (13, 6, 2), (13, 12, 5), (13, 3, 3),\n    (8, 12, 5), (8, 3, 10), (8, 9, 10),\n    (3, 5, 7), (3, 1, 3), (3, 10, 1),\n    (5, 1, 2), (5, 2, 9), (5, 0, 5), (5, 10, 1), (5, 12, 10), (5, 9, 3), (5, 11, 1), (5, 7, 4),\n    (14, 8, 9), (14, 6, 5), (14, 0, 4), (14, 3, 5), (14, 13, 9)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 0 to node 6\nmax_flow = nx.maximum_flow_value(G, 0, 6)\n\nprint(\"Maximum flow from node 0 to node 6:\", max_flow)\n```"}, {"id": 197, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 1, capacity=4)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(1, 11, capacity=3)\nG.add_edge(1, 5, capacity=2)\nG.add_edge(1, 9, capacity=9)\nG.add_edge(1, 6, capacity=3)\nG.add_edge(1, 10, capacity=8)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(4, 9, capacity=0)\nG.add_edge(11, 2, capacity=1)\nG.add_edge(11, 0, capacity=6)\nG.add_edge(11, 1, capacity=4)\nG.add_edge(9, 10, capacity=2)\nG.add_edge(9, 4, capacity=8)\nG.add_edge(9, 1, capacity=0)\nG.add_edge(10, 2, capacity=9)\nG.add_edge(10, 8, capacity=0)\nG.add_edge(7, 8, capacity=9)\nG.add_edge(8, 4, capacity=1)\nG.add_edge(8, 5, capacity=9)\nG.add_edge(8, 10, capacity=5)\nG.add_edge(8, 7, capacity=7)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 5, capacity=7)\nG.add_edge(2, 10, capacity=0)\nG.add_edge(0, 10, capacity=2)\nG.add_edge(0, 7, capacity=2)\nG.add_edge(0, 2, capacity=3)\n\n# Calculate the maximum flow from node 8 to node 4\nmax_flow = nx.maximum_flow(G, 8, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 198, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 5, capacity=3)\nG.add_edge(3, 0, capacity=4)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(5, 8, capacity=6)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(8, 9, capacity=4)\nG.add_edge(8, 5, capacity=2)\nG.add_edge(2, 9, capacity=6)\nG.add_edge(2, 3, capacity=5)\nG.add_edge(2, 6, capacity=2)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 5, capacity=3)\nG.add_edge(1, 6, capacity=2)\nG.add_edge(1, 0, capacity=0)\nG.add_edge(6, 4, capacity=9)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(4, 8, capacity=2)\nG.add_edge(7, 9, capacity=7)\n\n# Calculate the maximum flow from node 2 to node 1\nmax_flow = nx.maximum_flow_value(G, 2, 1)\n\nprint(\"Maximum flow from node 2 to node 1:\", max_flow)\n```"}, {"id": 199, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (11, 2, 3), (11, 12, 0),\n    (2, 10, 10), (2, 11, 3), (2, 0, 8), (2, 8, 8), (2, 5, 9), (2, 4, 8), (2, 12, 0),\n    (10, 5, 6), (10, 1, 1), (10, 12, 0),\n    (0, 5, 7), (0, 12, 0),\n    (8, 5, 6), (8, 4, 9), (8, 10, 8), (8, 9, 2), (8, 6, 8), (8, 11, 9), (8, 0, 3), (8, 12, 0), (8, 2, 0), (8, 7, 0), (8, 3, 0),\n    (5, 1, 10), (5, 2, 3), (5, 9, 4), (5, 6, 8), (5, 11, 9), (5, 0, 10),\n    (4, 10, 5), (4, 9, 10), (4, 6, 10), (4, 11, 2), (4, 7, 9), (4, 12, 5), (4, 0, 10),\n    (7, 12, 6), (7, 0, 6), (7, 8, 4), (7, 10, 5), (7, 9, 10), (7, 11, 6), (7, 4, 0),\n    (12, 0, 4), (12, 8, 7), (12, 4, 7), (12, 2, 6), (12, 10, 10), (12, 6, 3), (12, 11, 4),\n    (9, 6, 4), (9, 12, 10), (9, 0, 6), (9, 8, 2), (9, 10, 2), (9, 4, 0),\n    (6, 11, 6), (6, 7, 1), (6, 0, 8), (6, 5, 9),\n    (1, 2, 2), (1, 10, 10), (1, 6, 9), (1, 11, 9), (1, 12, 9), (1, 3, 9), (1, 5, 0),\n    (3, 8, 4), (3, 5, 3), (3, 1, 5), (3, 2, 8), (3, 11, 8), (3, 12, 8)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 12 to node 8\nmax_flow = nx.maximum_flow_value(G, 12, 8)\n\nprint(\"Maximum flow from node 12 to node 8:\", max_flow)\n```"}, {"id": 200, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 9, 3), (7, 12, 1), (7, 6, 5), (7, 4, 10), (7, 1, 6),\n    (9, 3, 7), (9, 8, 8), (9, 12, 6), (9, 10, 2), (9, 7, 3),\n    (12, 6, 4), (12, 1, 9), (12, 3, 5), (12, 8, 0),\n    (6, 1, 10), (6, 10, 9), (6, 11, 8), (6, 3, 6), (6, 8, 8), (6, 0, 9), (6, 7, 0),\n    (4, 1, 5), (4, 10, 8), (4, 7, 9), (4, 11, 2), (4, 8, 4),\n    (1, 10, 7), (1, 5, 5), (1, 3, 9), (1, 12, 9), (1, 4, 10), (1, 2, 10), (1, 7, 0),\n    (3, 8, 1), (3, 0, 3), (3, 6, 4), (3, 1, 2), (3, 10, 10), (3, 9, 8), (3, 5, 9),\n    (8, 12, 3), (8, 6, 3), (8, 4, 1), (8, 7, 8), (8, 11, 8), (8, 9, 9),\n    (10, 9, 5), (10, 5, 1), (10, 8, 4), (10, 0, 10), (10, 12, 10), (10, 4, 1), (10, 2, 7), (10, 1, 7),\n    (11, 9, 1), (11, 12, 3), (11, 6, 5), (11, 4, 3), (11, 1, 5), (11, 10, 1),\n    (0, 4, 3), (0, 10, 2), (0, 7, 5), (0, 9, 4), (0, 5, 0), (0, 6, 0), (0, 3, 0), (0, 2, 0),\n    (5, 0, 10), (5, 4, 6), (5, 7, 4), (5, 9, 6), (5, 1, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 0\nmax_flow = nx.maximum_flow_value(G, 4, 0)\n\nprint(\"Maximum flow from node 4 to node 0:\", max_flow)\n```"}, {"id": 201, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 8, capacity=7)\nG.add_edge(3, 7, capacity=8)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(8, 6, capacity=2)\nG.add_edge(8, 1, capacity=6)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 5, capacity=1)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(1, 5, capacity=7)\nG.add_edge(1, 6, capacity=7)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(4, 8, capacity=1)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 3, capacity=4)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(2, 7, capacity=9)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(0, 4, capacity=8)\n\n# Calculate the maximum flow from node 7 to node 5\nmax_flow = nx.maximum_flow(G, 7, 5)[0]\n\nprint(\"Maximum flow from node 7 to node 5:\", max_flow)\n```"}, {"id": 202, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 8, capacity=2)\nG.add_edge(9, 2, capacity=6)\nG.add_edge(9, 0, capacity=4)\nG.add_edge(9, 10, capacity=9)\nG.add_edge(8, 10, capacity=1)\nG.add_edge(8, 4, capacity=6)\nG.add_edge(2, 3, capacity=7)\nG.add_edge(2, 4, capacity=2)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(10, 7, capacity=6)\nG.add_edge(10, 3, capacity=7)\nG.add_edge(10, 5, capacity=8)\nG.add_edge(10, 8, capacity=0)\nG.add_edge(4, 8, capacity=10)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(3, 8, capacity=3)\nG.add_edge(7, 9, capacity=9)\nG.add_edge(7, 1, capacity=2)\nG.add_edge(7, 4, capacity=9)\nG.add_edge(7, 2, capacity=0)\nG.add_edge(7, 10, capacity=0)\nG.add_edge(5, 7, capacity=2)\nG.add_edge(5, 9, capacity=7)\nG.add_edge(5, 2, capacity=8)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(1, 4, capacity=10)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(6, 1, capacity=2)\n\n# Calculate the maximum flow from node 4 to node 7\nmax_flow = nx.maximum_flow(G, 4, 7)[0]\n\nprint(\"Maximum flow from node 4 to node 7:\", max_flow)\n```"}, {"id": 203, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (11, 5, 9), (11, 7, 5), (11, 0, 10), (11, 12, 0),\n    (5, 10, 3), (5, 12, 4), (5, 1, 1), (5, 11, 0),\n    (7, 11, 1),\n    (0, 6, 4), (0, 12, 6),\n    (10, 1, 7), (10, 5, 7), (10, 0, 7), (10, 2, 5), (10, 3, 0), (10, 9, 0),\n    (12, 11, 6), (12, 4, 9), (12, 0, 8), (12, 3, 3),\n    (1, 7, 10), (1, 2, 2), (1, 12, 9), (1, 5, 0),\n    (6, 12, 1), (6, 7, 1),\n    (4, 7, 6),\n    (2, 4, 9), (2, 1, 6), (2, 9, 1), (2, 5, 9),\n    (9, 10, 1), (9, 12, 4), (9, 8, 8), (9, 2, 0),\n    (3, 10, 8), (3, 12, 0),\n    (8, 2, 5), (8, 10, 1), (8, 4, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 12 to node 10\nmax_flow = nx.maximum_flow(G, 12, 10)[0]\n\nprint(\"Maximum flow from node 12 to node 10:\", max_flow)\n```"}, {"id": 204, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 9, 9), (8, 1, 9), (8, 7, 7), (8, 3, 5), (8, 0, 7), (8, 5, 6), (8, 2, 0),\n    (9, 7, 10), (9, 2, 10), (9, 3, 8), (9, 0, 8), (9, 5, 1), (9, 6, 7), (9, 8, 3),\n    (1, 2, 3), (1, 3, 9), (1, 6, 2), (1, 9, 10),\n    (7, 3, 6), (7, 0, 9), (7, 6, 4), (7, 4, 3), (7, 8, 1), (7, 9, 9), (7, 1, 2), (7, 2, 0),\n    (3, 6, 1), (3, 8, 5), (3, 9, 9), (3, 7, 2), (3, 2, 3), (3, 4, 0),\n    (0, 9, 10), (0, 1, 7), (0, 2, 8), (0, 3, 4),\n    (5, 8, 6), (5, 9, 5), (5, 2, 0),\n    (2, 5, 4), (2, 4, 7), (2, 8, 8), (2, 7, 2),\n    (6, 4, 1), (6, 7, 10), (6, 2, 10), (6, 3, 3), (6, 0, 3), (6, 5, 8),\n    (4, 8, 8), (4, 9, 6), (4, 2, 8), (4, 3, 10), (4, 0, 8), (4, 5, 9), (4, 6, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 3\nmax_flow = nx.maximum_flow(G, 2, 3)[0]\n\nprint(\"Maximum flow from node 2 to node 3:\", max_flow)\n```"}, {"id": 205, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 9, 1), (10, 5, 2), (10, 6, 7), (10, 12, 5), (10, 0, 2),\n    (9, 4, 1), (9, 6, 4), (9, 2, 3),\n    (5, 13, 10), (5, 3, 5), (5, 10, 10), (5, 2, 5), (5, 9, 6), (5, 7, 8),\n    (12, 3, 6), (12, 10, 3), (12, 2, 3),\n    (0, 11, 9), (0, 13, 10), (0, 8, 1), (0, 10, 0),\n    (4, 7, 5), (4, 5, 6), (4, 2, 7),\n    (2, 3, 7),\n    (13, 2, 7), (13, 4, 10),\n    (3, 7, 6), (3, 5, 6), (3, 13, 2),\n    (7, 8, 2), (7, 3, 5), (7, 1, 9), (7, 2, 5), (7, 9, 2),\n    (11, 5, 3), (11, 1, 0), (11, 0, 0),\n    (8, 12, 5), (8, 0, 6), (8, 9, 1), (8, 7, 3),\n    (1, 11, 10), (1, 12, 4), (1, 7, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 11\nmax_flow = nx.maximum_flow(G, 7, 11)[0]\n\nprint(\"Maximum flow from node 7 to node 11:\", max_flow)\n```"}, {"id": 206, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 10, 9), (2, 13, 5), (2, 3, 6), (2, 0, 10), (2, 1, 10),\n    (10, 7, 2), (10, 6, 1), (10, 1, 1),\n    (13, 8, 2), (13, 6, 1), (13, 2, 10), (13, 10, 5),\n    (3, 12, 2), (3, 4, 8), (3, 13, 8),\n    (0, 12, 8), (0, 5, 6), (0, 8, 2), (0, 6, 4), (0, 10, 4), (0, 3, 5), (0, 7, 0),\n    (1, 3, 10), (1, 12, 10), (1, 5, 5), (1, 9, 1), (1, 10, 0),\n    (7, 4, 7), (7, 11, 1), (7, 10, 5), (7, 0, 8),\n    (6, 9, 5), (6, 1, 10), (6, 2, 4), (6, 13, 5), (6, 8, 6), (6, 10, 0),\n    (8, 13, 6), (8, 0, 2), (8, 7, 5), (8, 6, 0), (8, 5, 0),\n    (12, 6, 10), (12, 9, 9),\n    (5, 8, 2), (5, 6, 4), (5, 9, 9), (5, 1, 2), (5, 2, 10), (5, 7, 6),\n    (9, 4, 6), (9, 3, 10), (9, 8, 3),\n    (11, 10, 2), (11, 12, 6)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 10 to node 8\nmax_flow = nx.maximum_flow_value(G, 10, 8)\nprint(max_flow)\n```"}, {"id": 207, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 7, 3), (8, 0, 7), (8, 6, 9), (8, 1, 1), (8, 2, 0),\n    (7, 3, 4), (7, 0, 6), (7, 2, 4), (7, 9, 3), (7, 4, 0),\n    (0, 5, 2), (0, 6, 6), (0, 8, 2), (0, 7, 4), (0, 3, 2), (0, 1, 0), (0, 9, 0),\n    (6, 9, 4), (6, 5, 7), (6, 2, 0),\n    (1, 2, 1), (1, 4, 9), (1, 8, 4), (1, 7, 3), (1, 0, 5), (1, 6, 5),\n    (3, 2, 7), (3, 4, 9),\n    (2, 8, 5), (2, 3, 8), (2, 6, 9), (2, 1, 1),\n    (9, 8, 7), (9, 0, 7), (9, 6, 2), (9, 1, 1), (9, 2, 2),\n    (5, 2, 4), (5, 7, 10), (5, 3, 3),\n    (4, 7, 6), (4, 3, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 3 to node 0\nmax_flow = nx.maximum_flow_value(G, 3, 0)\n\nprint(\"Maximum flow from node 3 to node 0:\", max_flow)\n```"}, {"id": 208, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(1, 7, weight=9)\nG.add_edge(1, 11, weight=6)\nG.add_edge(1, 4, weight=0)\nG.add_edge(7, 9, weight=5)\nG.add_edge(7, 0, weight=5)\nG.add_edge(7, 1, weight=0)\nG.add_edge(11, 0, weight=5)\nG.add_edge(11, 13, weight=8)\nG.add_edge(11, 8, weight=2)\nG.add_edge(11, 9, weight=2)\nG.add_edge(9, 11, weight=10)\nG.add_edge(9, 4, weight=5)\nG.add_edge(9, 0, weight=5)\nG.add_edge(9, 6, weight=10)\nG.add_edge(9, 8, weight=2)\nG.add_edge(9, 12, weight=6)\nG.add_edge(9, 7, weight=0)\nG.add_edge(0, 1, weight=5)\nG.add_edge(13, 8, weight=1)\nG.add_edge(8, 11, weight=7)\nG.add_edge(8, 2, weight=1)\nG.add_edge(4, 13, weight=9)\nG.add_edge(4, 6, weight=5)\nG.add_edge(4, 1, weight=8)\nG.add_edge(4, 10, weight=2)\nG.add_edge(4, 3, weight=8)\nG.add_edge(6, 4, weight=8)\nG.add_edge(6, 3, weight=0)\nG.add_edge(12, 5, weight=3)\nG.add_edge(12, 11, weight=2)\nG.add_edge(12, 3, weight=10)\nG.add_edge(12, 0, weight=1)\nG.add_edge(12, 13, weight=1)\nG.add_edge(12, 9, weight=0)\nG.add_edge(5, 10, weight=5)\nG.add_edge(5, 6, weight=6)\nG.add_edge(5, 1, weight=10)\nG.add_edge(5, 12, weight=0)\nG.add_edge(10, 3, weight=2)\nG.add_edge(10, 4, weight=8)\nG.add_edge(10, 0, weight=8)\nG.add_edge(10, 1, weight=5)\nG.add_edge(10, 5, weight=3)\nG.add_edge(10, 9, weight=3)\nG.add_edge(3, 4, weight=2)\nG.add_edge(3, 6, weight=3)\nG.add_edge(14, 5, weight=4)\nG.add_edge(14, 9, weight=4)\nG.add_edge(14, 11, weight=2)\n\n# Calculate the maximum flow from node 3 to node 5\nmax_flow = nx.maximum_flow_value(G, 3, 5)\n\nprint(\"Maximum flow from node 3 to node 5:\", max_flow)\n```"}, {"id": 209, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 6, 3), (7, 3, 3), (7, 1, 9), (7, 2, 5), (7, 5, 7),\n    (6, 1, 8), (6, 2, 4), (6, 0, 8), (6, 7, 6), (6, 4, 0),\n    (3, 1, 7), (3, 2, 3), (3, 5, 4), (3, 4, 7), (3, 7, 2),\n    (1, 0, 1), (1, 4, 3), (1, 3, 0),\n    (2, 5, 7), (2, 4, 8), (2, 3, 9),\n    (5, 4, 3), (5, 2, 9),\n    (0, 4, 5), (0, 6, 6), (0, 3, 7), (0, 1, 3), (0, 2, 6),\n    (4, 6, 7), (4, 0, 1), (4, 5, 0), (4, 2, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 6\nmax_flow = nx.maximum_flow(G, 5, 6)[0]\n\nprint(\"Maximum flow from node 5 to node 6:\", max_flow)\n```"}, {"id": 210, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 6, capacity=7)\nG.add_edge(4, 1, capacity=2)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(6, 4, capacity=4)\nG.add_edge(6, 7, capacity=10)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 2, capacity=4)\nG.add_edge(7, 0, capacity=10)\nG.add_edge(7, 6, capacity=10)\nG.add_edge(7, 4, capacity=5)\nG.add_edge(2, 7, capacity=7)\nG.add_edge(2, 8, capacity=3)\nG.add_edge(2, 3, capacity=8)\nG.add_edge(2, 1, capacity=0)\nG.add_edge(8, 5, capacity=4)\nG.add_edge(8, 1, capacity=4)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(5, 3, capacity=2)\nG.add_edge(5, 1, capacity=9)\nG.add_edge(5, 4, capacity=9)\nG.add_edge(3, 7, capacity=8)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow(G, 7, 8)[0]\n\nprint(\"Maximum flow from node 7 to node 8:\", max_flow)\n```"}, {"id": 211, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(13, 10, weight=2)\nG.add_edge(13, 2, weight=6)\nG.add_edge(13, 14, weight=6)\nG.add_edge(10, 0, weight=6)\nG.add_edge(10, 3, weight=4)\nG.add_edge(10, 8, weight=10)\nG.add_edge(10, 14, weight=5)\nG.add_edge(10, 2, weight=0)\nG.add_edge(10, 12, weight=0)\nG.add_edge(10, 7, weight=0)\nG.add_edge(2, 1, weight=9)\nG.add_edge(2, 11, weight=7)\nG.add_edge(2, 8, weight=8)\nG.add_edge(2, 10, weight=7)\nG.add_edge(2, 5, weight=4)\nG.add_edge(14, 1, weight=9)\nG.add_edge(14, 3, weight=9)\nG.add_edge(14, 7, weight=7)\nG.add_edge(0, 9, weight=6)\nG.add_edge(3, 7, weight=7)\nG.add_edge(3, 5, weight=0)\nG.add_edge(8, 4, weight=3)\nG.add_edge(8, 2, weight=5)\nG.add_edge(8, 12, weight=7)\nG.add_edge(8, 3, weight=6)\nG.add_edge(8, 11, weight=0)\nG.add_edge(1, 4, weight=6)\nG.add_edge(11, 8, weight=9)\nG.add_edge(11, 5, weight=6)\nG.add_edge(5, 4, weight=2)\nG.add_edge(5, 3, weight=8)\nG.add_edge(5, 14, weight=9)\nG.add_edge(5, 11, weight=0)\nG.add_edge(7, 9, weight=4)\nG.add_edge(7, 14, weight=1)\nG.add_edge(7, 10, weight=4)\nG.add_edge(7, 3, weight=0)\nG.add_edge(9, 1, weight=9)\nG.add_edge(9, 7, weight=9)\nG.add_edge(4, 9, weight=10)\nG.add_edge(12, 9, weight=3)\nG.add_edge(12, 14, weight=2)\nG.add_edge(12, 10, weight=7)\nG.add_edge(12, 8, weight=0)\nG.add_edge(6, 14, weight=3)\nG.add_edge(6, 4, weight=9)\n\n# Calculate the maximum flow from node 11 to node 10\nmax_flow = nx.maximum_flow_value(G, 11, 10)\n\nprint(\"Maximum flow from node 11 to node 10:\", max_flow)\n```"}, {"id": 212, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(14, 6, capacity=10)\nG.add_edge(14, 5, capacity=6)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(6, 10, capacity=5)\nG.add_edge(6, 12, capacity=1)\nG.add_edge(6, 9, capacity=6)\nG.add_edge(1, 11, capacity=1)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(10, 13, capacity=4)\nG.add_edge(10, 9, capacity=5)\nG.add_edge(10, 4, capacity=1)\nG.add_edge(12, 14, capacity=1)\nG.add_edge(12, 7, capacity=7)\nG.add_edge(9, 6, capacity=9)\nG.add_edge(9, 13, capacity=6)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(4, 2, capacity=8)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(8, 12, capacity=6)\nG.add_edge(8, 3, capacity=7)\nG.add_edge(8, 9, capacity=7)\nG.add_edge(8, 7, capacity=4)\nG.add_edge(3, 6, capacity=8)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(3, 7, capacity=7)\nG.add_edge(7, 14, capacity=7)\nG.add_edge(7, 6, capacity=1)\nG.add_edge(7, 0, capacity=10)\nG.add_edge(7, 2, capacity=7)\nG.add_edge(11, 2, capacity=10)\nG.add_edge(11, 13, capacity=3)\nG.add_edge(11, 5, capacity=5)\nG.add_edge(11, 3, capacity=6)\nG.add_edge(11, 1, capacity=1)\nG.add_edge(13, 3, capacity=1)\nG.add_edge(13, 9, capacity=9)\nG.add_edge(13, 6, capacity=5)\nG.add_edge(13, 11, capacity=0)\nG.add_edge(0, 7, capacity=2)\nG.add_edge(0, 13, capacity=4)\nG.add_edge(0, 9, capacity=6)\nG.add_edge(0, 1, capacity=6)\n\n# Calculate the maximum flow from node 2 to node 9\nmax_flow = nx.maximum_flow(G, 2, 9)[0]\n\nprint(max_flow)\n```"}, {"id": 213, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (1, 2, 5), (1, 8, 9), (1, 11, 7),\n    (2, 5, 5), (2, 4, 3), (2, 0, 8), (2, 1, 6), (2, 6, 6),\n    (8, 1, 2), (8, 2, 6), (8, 3, 6), (8, 9, 0),\n    (11, 6, 2), (11, 3, 7), (11, 4, 3),\n    (5, 3, 9), (5, 4, 0), (5, 2, 0), (5, 10, 0),\n    (4, 8, 1), (4, 0, 5), (4, 11, 4), (4, 6, 3), (4, 2, 9), (4, 5, 2), (4, 9, 0),\n    (0, 11, 5), (0, 7, 2), (0, 1, 8), (0, 9, 10), (0, 8, 3),\n    (6, 10, 4), (6, 3, 8), (6, 7, 2), (6, 9, 0),\n    (3, 5, 9), (3, 2, 8), (3, 9, 9), (3, 8, 0),\n    (10, 3, 1), (10, 5, 4), (10, 8, 10), (10, 0, 3), (10, 11, 9), (10, 7, 9), (10, 9, 7), (10, 6, 0),\n    (7, 2, 7), (7, 10, 3), (7, 9, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 5\nmax_flow = nx.maximum_flow(G, 9, 5)[0]\n\nprint(\"Maximum flow from node 9 to node 5:\", max_flow)\n```"}, {"id": 214, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 6, capacity=2)\nG.add_edge(5, 4, capacity=2)\nG.add_edge(5, 0, capacity=0)\nG.add_edge(6, 5, capacity=3)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 1, capacity=4)\nG.add_edge(4, 5, capacity=5)\nG.add_edge(4, 0, capacity=9)\nG.add_edge(2, 0, capacity=9)\nG.add_edge(2, 7, capacity=10)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(0, 3, capacity=4)\nG.add_edge(0, 5, capacity=5)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(7, 5, capacity=10)\n\n# Calculate the maximum flow from node 2 to node 3\nmax_flow = nx.maximum_flow(G, 2, 3)[0]\n\nprint(\"Maximum flow from node 2 to node 3:\", max_flow)\n```"}, {"id": 215, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 8, capacity=3)\nG.add_edge(4, 7, capacity=5)\nG.add_edge(4, 5, capacity=9)\nG.add_edge(4, 9, capacity=3)\nG.add_edge(4, 1, capacity=7)\nG.add_edge(8, 5, capacity=7)\nG.add_edge(8, 9, capacity=2)\nG.add_edge(8, 1, capacity=7)\nG.add_edge(8, 6, capacity=9)\nG.add_edge(7, 9, capacity=6)\nG.add_edge(7, 2, capacity=4)\nG.add_edge(7, 6, capacity=5)\nG.add_edge(5, 4, capacity=8)\nG.add_edge(5, 3, capacity=7)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(9, 2, capacity=6)\nG.add_edge(9, 6, capacity=1)\nG.add_edge(9, 7, capacity=1)\nG.add_edge(1, 3, capacity=7)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 4, capacity=0)\nG.add_edge(6, 7, capacity=7)\nG.add_edge(6, 0, capacity=4)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 5, capacity=10)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(3, 5, capacity=3)\nG.add_edge(3, 2, capacity=8)\nG.add_edge(3, 1, capacity=0)\n\n# Calculate the maximum flow from node 2 to node 3\nmax_flow = nx.maximum_flow_value(G, 2, 3)\n\nprint(\"Maximum flow from node 2 to node 3:\", max_flow)\n```"}, {"id": 216, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 2, capacity=4)\nG.add_edge(9, 7, capacity=1)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(9, 0, capacity=7)\nG.add_edge(9, 1, capacity=0)\nG.add_edge(2, 3, capacity=7)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(2, 7, capacity=7)\nG.add_edge(2, 9, capacity=0)\nG.add_edge(7, 8, capacity=2)\nG.add_edge(7, 9, capacity=5)\nG.add_edge(7, 3, capacity=10)\nG.add_edge(5, 0, capacity=7)\nG.add_edge(5, 8, capacity=3)\nG.add_edge(0, 9, capacity=5)\nG.add_edge(3, 6, capacity=3)\nG.add_edge(3, 4, capacity=4)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(3, 7, capacity=0)\nG.add_edge(1, 5, capacity=4)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(1, 4, capacity=7)\nG.add_edge(1, 9, capacity=7)\nG.add_edge(6, 8, capacity=9)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(6, 3, capacity=7)\nG.add_edge(6, 5, capacity=1)\n\n# Calculate the maximum flow from node 1 to node 3\nmax_flow = nx.maximum_flow(G, 1, 3)[0]\n\nprint(\"Maximum flow from node 1 to node 3:\", max_flow)\n```"}, {"id": 217, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 6, capacity=8)\nG.add_edge(6, 11, capacity=5)\nG.add_edge(6, 10, capacity=7)\nG.add_edge(11, 10, capacity=3)\nG.add_edge(11, 12, capacity=6)\nG.add_edge(11, 1, capacity=5)\nG.add_edge(11, 13, capacity=8)\nG.add_edge(10, 8, capacity=1)\nG.add_edge(13, 9, capacity=3)\nG.add_edge(13, 8, capacity=0)\nG.add_edge(9, 2, capacity=6)\nG.add_edge(9, 1, capacity=6)\nG.add_edge(9, 14, capacity=1)\nG.add_edge(9, 13, capacity=0)\nG.add_edge(2, 8, capacity=9)\nG.add_edge(1, 9, capacity=3)\nG.add_edge(14, 10, capacity=3)\nG.add_edge(14, 7, capacity=5)\nG.add_edge(14, 8, capacity=0)\nG.add_edge(14, 9, capacity=0)\nG.add_edge(8, 13, capacity=8)\nG.add_edge(8, 14, capacity=10)\nG.add_edge(8, 0, capacity=5)\nG.add_edge(0, 11, capacity=9)\nG.add_edge(12, 0, capacity=1)\nG.add_edge(12, 5, capacity=9)\nG.add_edge(3, 5, capacity=5)\nG.add_edge(3, 12, capacity=9)\nG.add_edge(5, 0, capacity=3)\nG.add_edge(4, 8, capacity=3)\nG.add_edge(4, 2, capacity=2)\nG.add_edge(4, 1, capacity=1)\nG.add_edge(4, 3, capacity=9)\n\n# Calculate the maximum flow from node 8 to node 14\nmax_flow = nx.maximum_flow_value(G, 8, 14)\n\nprint(\"Maximum flow from node 8 to node 14:\", max_flow)\n```"}, {"id": 218, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 6, capacity=8)\nG.add_edge(1, 0, capacity=2)\nG.add_edge(1, 9, capacity=7)\nG.add_edge(1, 4, capacity=2)\nG.add_edge(1, 7, capacity=0)\n\nG.add_edge(6, 5, capacity=1)\nG.add_edge(6, 2, capacity=3)\nG.add_edge(6, 7, capacity=10)\nG.add_edge(6, 1, capacity=10)\n\nG.add_edge(0, 5, capacity=1)\nG.add_edge(0, 10, capacity=8)\nG.add_edge(0, 7, capacity=7)\nG.add_edge(0, 1, capacity=0)\n\nG.add_edge(9, 8, capacity=1)\nG.add_edge(9, 0, capacity=3)\nG.add_edge(9, 3, capacity=9)\nG.add_edge(9, 7, capacity=0)\n\nG.add_edge(4, 8, capacity=9)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(4, 6, capacity=8)\nG.add_edge(4, 9, capacity=1)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(4, 5, capacity=0)\n\nG.add_edge(5, 2, capacity=2)\nG.add_edge(5, 4, capacity=8)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 11, capacity=8)\nG.add_edge(5, 7, capacity=0)\n\nG.add_edge(2, 10, capacity=1)\nG.add_edge(2, 1, capacity=10)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(2, 5, capacity=8)\nG.add_edge(2, 12, capacity=0)\n\nG.add_edge(7, 4, capacity=1)\nG.add_edge(7, 12, capacity=9)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 6, capacity=10)\nG.add_edge(7, 11, capacity=10)\nG.add_edge(7, 9, capacity=5)\nG.add_edge(7, 5, capacity=1)\n\nG.add_edge(10, 4, capacity=4)\nG.add_edge(10, 8, capacity=7)\nG.add_edge(10, 6, capacity=4)\nG.add_edge(10, 11, capacity=8)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 5, capacity=4)\nG.add_edge(10, 2, capacity=2)\nG.add_edge(10, 12, capacity=0)\nG.add_edge(10, 0, capacity=0)\n\nG.add_edge(8, 1, capacity=2)\nG.add_edge(8, 7, capacity=10)\nG.add_edge(8, 12, capacity=8)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(8, 10, capacity=0)\nG.add_edge(8, 3, capacity=0)\n\nG.add_edge(3, 9, capacity=9)\nG.add_edge(3, 10, capacity=1)\nG.add_edge(3, 7, capacity=6)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 8, capacity=3)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(3, 11, capacity=0)\n\nG.add_edge(11, 9, capacity=5)\nG.add_edge(11, 5, capacity=6)\nG.add_edge(11, 10, capacity=3)\nG.add_edge(11, 3, capacity=6)\nG.add_edge(11, 7, capacity=0)\n\nG.add_edge(12, 8, capacity=1)\nG.add_edge(12, 1, capacity=3)\nG.add_edge(12, 6, capacity=6)\nG.add_edge(12, 11, capacity=2)\nG.add_edge(12, 2, capacity=1)\nG.add_edge(12, 10, capacity=2)\nG.add_edge(12, 7, capacity=1)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow(G, 7, 8)[0]\nprint(max_flow)\n```"}, {"id": 219, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (13, 1, 7), (13, 10, 9), (13, 8, 9), (13, 12, 4), (13, 11, 0), (13, 2, 0), (13, 5, 0),\n    (1, 7, 3), (1, 5, 1), (1, 2, 7), (1, 11, 0), (1, 4, 0),\n    (10, 0, 1), (10, 13, 10), (10, 1, 3), (10, 11, 4), (10, 6, 4), (10, 7, 6), (10, 8, 0), (10, 2, 0),\n    (8, 6, 2), (8, 10, 5), (8, 2, 3), (8, 9, 0), (8, 12, 0),\n    (12, 13, 2), (12, 3, 9), (12, 8, 9), (12, 4, 0),\n    (7, 9, 2), (7, 12, 2),\n    (5, 2, 1), (5, 13, 4), (5, 3, 7), (5, 7, 5), (5, 4, 3), (5, 1, 0), (5, 6, 0),\n    (2, 8, 2), (2, 12, 3), (2, 13, 7), (2, 10, 2), (2, 11, 0), (2, 1, 0),\n    (0, 12, 6), (0, 13, 4), (0, 3, 8), (0, 6, 2), (0, 7, 3), (0, 10, 5), (0, 9, 8),\n    (11, 4, 9), (11, 9, 2), (11, 2, 5), (11, 13, 8), (11, 1, 2),\n    (6, 5, 1), (6, 2, 2), (6, 8, 5), (6, 11, 9), (6, 4, 0),\n    (3, 6, 10), (3, 12, 10), (3, 1, 4), (3, 11, 10),\n    (9, 8, 3), (9, 7, 1), (9, 4, 1), (9, 11, 0),\n    (4, 9, 10), (4, 12, 10), (4, 1, 6), (4, 11, 4), (4, 6, 6)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 11 to node 13\nmax_flow = nx.maximum_flow_value(G, 11, 13)\n\nprint(\"Maximum flow from node 11 to node 13:\", max_flow)\n```"}, {"id": 220, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(1, 2, weight=1)\nG.add_edge(2, 11, weight=5)\nG.add_edge(2, 5, weight=7)\nG.add_edge(2, 4, weight=2)\nG.add_edge(2, 6, weight=6)\nG.add_edge(2, 8, weight=0)\nG.add_edge(11, 10, weight=2)\nG.add_edge(11, 5, weight=2)\nG.add_edge(11, 3, weight=10)\nG.add_edge(11, 13, weight=7)\nG.add_edge(11, 6, weight=8)\nG.add_edge(11, 2, weight=5)\nG.add_edge(5, 3, weight=8)\nG.add_edge(5, 13, weight=1)\nG.add_edge(5, 2, weight=6)\nG.add_edge(4, 6, weight=9)\nG.add_edge(4, 7, weight=8)\nG.add_edge(4, 12, weight=1)\nG.add_edge(4, 2, weight=0)\nG.add_edge(6, 9, weight=5)\nG.add_edge(6, 12, weight=5)\nG.add_edge(6, 2, weight=0)\nG.add_edge(6, 3, weight=0)\nG.add_edge(3, 6, weight=6)\nG.add_edge(3, 5, weight=5)\nG.add_edge(3, 0, weight=0)\nG.add_edge(13, 3, weight=3)\nG.add_edge(8, 2, weight=2)\nG.add_edge(8, 0, weight=6)\nG.add_edge(0, 3, weight=7)\nG.add_edge(0, 8, weight=0)\nG.add_edge(7, 12, weight=2)\nG.add_edge(7, 10, weight=4)\nG.add_edge(7, 1, weight=9)\nG.add_edge(7, 4, weight=0)\nG.add_edge(12, 4, weight=3)\nG.add_edge(12, 7, weight=5)\nG.add_edge(12, 6, weight=0)\nG.add_edge(9, 5, weight=8)\n\n# Calculate the maximum flow from node 8 to node 12\nmax_flow = nx.maximum_flow(G, 8, 12)\n\n# Print the maximum flow value\nprint(max_flow[0])\n```"}, {"id": 221, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 8, 2), (4, 5, 4), (4, 9, 1),\n    (8, 5, 10), (8, 12, 10), (8, 7, 4),\n    (5, 11, 7), (5, 14, 5), (5, 1, 1), (5, 2, 2),\n    (9, 8, 9), (9, 1, 6), (9, 3, 9), (9, 2, 5), (9, 12, 7),\n    (12, 14, 9), (12, 7, 10), (12, 9, 8), (12, 6, 6), (12, 0, 1),\n    (7, 4, 8), (7, 6, 8), (7, 12, 3),\n    (11, 12, 6), (11, 14, 7), (11, 8, 9), (11, 6, 7), (11, 0, 2), (11, 1, 0),\n    (14, 7, 7), (14, 1, 10), (14, 13, 1), (14, 2, 2), (14, 6, 1), (14, 12, 6), (14, 10, 2), (14, 11, 0),\n    (1, 11, 3), (1, 10, 1),\n    (2, 10, 3), (2, 14, 9), (2, 7, 6), (2, 1, 9), (2, 13, 7), (2, 0, 0),\n    (3, 2, 6), (3, 11, 4), (3, 12, 9), (3, 10, 3), (3, 1, 3),\n    (6, 0, 6), (6, 10, 4), (6, 14, 8), (6, 4, 9), (6, 8, 3), (6, 3, 10), (6, 13, 5),\n    (0, 7, 6), (0, 13, 2), (0, 2, 8), (0, 6, 3), (0, 11, 0),\n    (10, 7, 9), (10, 9, 7), (10, 4, 5), (10, 8, 6), (10, 1, 7), (10, 13, 8), (10, 2, 3), (10, 6, 7), (10, 0, 7), (10, 12, 9),\n    (13, 2, 5), (13, 6, 8), (13, 0, 6), (13, 12, 4), (13, 10, 3), (13, 14, 1), (13, 9, 7), (13, 4, 2), (13, 8, 1), (13, 3, 10)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 1 to node 2\nmax_flow = nx.maximum_flow(G, 1, 2)[0]\n\nprint(\"Maximum flow from node 1 to node 2:\", max_flow)\n```"}, {"id": 222, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 2, capacity=5)\nG.add_edge(4, 8, capacity=6)\nG.add_edge(4, 5, capacity=7)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(2, 3, capacity=2)\nG.add_edge(2, 0, capacity=7)\nG.add_edge(2, 1, capacity=0)\nG.add_edge(2, 6, capacity=0)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(8, 7, capacity=4)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 3, capacity=1)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(3, 2, capacity=10)\nG.add_edge(3, 8, capacity=1)\nG.add_edge(3, 7, capacity=3)\nG.add_edge(3, 6, capacity=5)\nG.add_edge(3, 5, capacity=10)\nG.add_edge(0, 2, capacity=8)\nG.add_edge(0, 7, capacity=2)\nG.add_edge(0, 5, capacity=2)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(7, 6, capacity=5)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 1, capacity=8)\nG.add_edge(7, 8, capacity=2)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(1, 2, capacity=7)\nG.add_edge(1, 3, capacity=7)\nG.add_edge(6, 1, capacity=6)\nG.add_edge(6, 2, capacity=6)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(6, 7, capacity=0)\n\n# Calculate the maximum flow from node 3 to node 2\nmax_flow = nx.maximum_flow(G, 3, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 223, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 7, capacity=3)\nG.add_edge(3, 11, capacity=1)\nG.add_edge(3, 9, capacity=4)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(3, 6, capacity=2)\n\nG.add_edge(7, 11, capacity=4)\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 5, capacity=9)\nG.add_edge(7, 8, capacity=2)\nG.add_edge(7, 10, capacity=10)\nG.add_edge(7, 4, capacity=0)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(7, 6, capacity=0)\n\nG.add_edge(11, 0, capacity=2)\nG.add_edge(11, 4, capacity=5)\nG.add_edge(11, 7, capacity=6)\nG.add_edge(11, 10, capacity=0)\n\nG.add_edge(9, 2, capacity=8)\nG.add_edge(9, 10, capacity=8)\nG.add_edge(9, 3, capacity=8)\n\nG.add_edge(0, 6, capacity=6)\nG.add_edge(0, 9, capacity=10)\nG.add_edge(0, 10, capacity=0)\n\nG.add_edge(6, 3, capacity=1)\nG.add_edge(6, 7, capacity=7)\nG.add_edge(6, 11, capacity=9)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(6, 1, capacity=5)\nG.add_edge(6, 4, capacity=9)\nG.add_edge(6, 0, capacity=0)\n\nG.add_edge(5, 8, capacity=6)\nG.add_edge(5, 3, capacity=8)\nG.add_edge(5, 1, capacity=6)\n\nG.add_edge(8, 11, capacity=6)\nG.add_edge(8, 9, capacity=1)\nG.add_edge(8, 1, capacity=7)\nG.add_edge(8, 4, capacity=7)\nG.add_edge(8, 5, capacity=3)\n\nG.add_edge(10, 7, capacity=1)\nG.add_edge(10, 11, capacity=8)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 0, capacity=8)\nG.add_edge(10, 4, capacity=10)\nG.add_edge(10, 5, capacity=6)\n\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 7, capacity=10)\nG.add_edge(4, 10, capacity=0)\nG.add_edge(4, 11, capacity=0)\n\nG.add_edge(2, 6, capacity=6)\nG.add_edge(2, 3, capacity=4)\n\nG.add_edge(1, 10, capacity=4)\nG.add_edge(1, 3, capacity=1)\nG.add_edge(1, 11, capacity=9)\nG.add_edge(1, 2, capacity=4)\n\n# Calculate the maximum flow from node 10 to node 7\nmax_flow = nx.maximum_flow(G, 10, 7)[0]\n\nprint(\"Maximum flow from node 10 to node 7:\", max_flow)\n```"}, {"id": 224, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (1, 3, 2), (1, 7, 9), (1, 9, 9), (1, 0, 6), (1, 13, 2), (1, 11, 5),\n    (3, 4, 5), (3, 2, 9), (3, 7, 1), (3, 9, 8), (3, 0, 3), (3, 12, 4), (3, 13, 6),\n    (7, 0, 2), (7, 11, 7), (7, 10, 5), (7, 5, 2),\n    (9, 6, 9), (9, 0, 9), (9, 12, 2), (9, 3, 8), (9, 5, 4), (9, 11, 0), (9, 13, 0),\n    (0, 1, 6), (0, 3, 5), (0, 4, 10), (0, 10, 9), (0, 9, 9),\n    (13, 11, 7), (13, 4, 3), (13, 10, 10), (13, 2, 4), (13, 9, 9), (13, 0, 2), (13, 12, 1), (13, 8, 0),\n    (11, 1, 6), (11, 4, 2), (11, 10, 1), (11, 5, 7), (11, 9, 8), (11, 0, 3),\n    (4, 8, 7), (4, 6, 3), (4, 1, 2),\n    (2, 9, 5), (2, 6, 4), (2, 10, 10),\n    (12, 13, 9), (12, 11, 1), (12, 4, 6), (12, 8, 7), (12, 7, 4), (12, 9, 6), (12, 0, 4), (12, 10, 0),\n    (10, 8, 1), (10, 0, 8), (10, 12, 8), (10, 11, 7),\n    (5, 9, 8), (5, 6, 2), (5, 12, 9), (5, 1, 10),\n    (6, 5, 7), (6, 2, 4), (6, 7, 7),\n    (8, 7, 10), (8, 13, 7), (8, 4, 1), (8, 10, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 9\nmax_flow = nx.maximum_flow(G, 10, 9)[0]\n\nprint(\"Maximum flow from node 10 to node 9:\", max_flow)\n```"}, {"id": 225, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 0, 3), (9, 5, 3),\n    (0, 5, 7), (0, 6, 9), (0, 8, 6), (0, 13, 2), (0, 4, 0), (0, 7, 0), (0, 3, 0), (0, 10, 0),\n    (5, 6, 6), (5, 13, 3), (5, 12, 9), (5, 7, 3),\n    (6, 12, 8), (6, 7, 1), (6, 2, 6), (6, 3, 3), (6, 5, 6), (6, 11, 0),\n    (8, 13, 6), (8, 12, 10),\n    (13, 12, 1), (13, 4, 7), (13, 0, 6), (13, 9, 3), (13, 1, 10), (13, 8, 4),\n    (12, 4, 9), (12, 5, 9), (12, 10, 10),\n    (7, 0, 7), (7, 6, 0),\n    (11, 6, 4), (11, 2, 6), (11, 4, 0),\n    (2, 11, 9), (2, 10, 9), (2, 1, 6), (2, 7, 5),\n    (3, 6, 3), (3, 12, 10), (3, 7, 3), (3, 0, 10),\n    (10, 8, 10), (10, 12, 4), (10, 0, 3), (10, 2, 7), (10, 3, 8), (10, 9, 6),\n    (1, 6, 5), (1, 13, 5), (1, 7, 8), (1, 9, 5), (1, 11, 4),\n    (4, 0, 7), (4, 11, 7)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 4 to node 0\nmax_flow = nx.maximum_flow_value(G, 4, 0)\n\nprint(\"Maximum flow from node 4 to node 0:\", max_flow)\n```"}, {"id": 226, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 7, capacity=10)\nG.add_edge(8, 6, capacity=4)\nG.add_edge(8, 2, capacity=1)\nG.add_edge(4, 7, capacity=7)\nG.add_edge(4, 13, capacity=3)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 3, capacity=4)\nG.add_edge(4, 11, capacity=2)\nG.add_edge(4, 12, capacity=4)\nG.add_edge(7, 10, capacity=3)\nG.add_edge(7, 1, capacity=5)\nG.add_edge(7, 6, capacity=10)\nG.add_edge(7, 2, capacity=5)\nG.add_edge(7, 12, capacity=1)\nG.add_edge(7, 9, capacity=9)\nG.add_edge(6, 3, capacity=2)\nG.add_edge(6, 11, capacity=7)\nG.add_edge(6, 2, capacity=10)\nG.add_edge(6, 7, capacity=10)\nG.add_edge(6, 10, capacity=2)\nG.add_edge(6, 13, capacity=5)\nG.add_edge(2, 12, capacity=5)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(2, 1, capacity=1)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 5, capacity=3)\nG.add_edge(2, 11, capacity=0)\nG.add_edge(13, 6, capacity=10)\nG.add_edge(13, 5, capacity=5)\nG.add_edge(13, 8, capacity=9)\nG.add_edge(13, 9, capacity=2)\nG.add_edge(13, 7, capacity=4)\nG.add_edge(13, 10, capacity=10)\nG.add_edge(13, 12, capacity=0)\nG.add_edge(3, 11, capacity=8)\nG.add_edge(3, 12, capacity=8)\nG.add_edge(3, 9, capacity=2)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(11, 2, capacity=2)\nG.add_edge(11, 12, capacity=1)\nG.add_edge(12, 9, capacity=5)\nG.add_edge(12, 4, capacity=8)\nG.add_edge(12, 7, capacity=10)\nG.add_edge(12, 13, capacity=8)\nG.add_edge(12, 1, capacity=10)\nG.add_edge(12, 8, capacity=3)\nG.add_edge(12, 11, capacity=0)\nG.add_edge(12, 2, capacity=0)\nG.add_edge(10, 1, capacity=4)\nG.add_edge(10, 0, capacity=6)\nG.add_edge(10, 11, capacity=6)\nG.add_edge(10, 2, capacity=7)\nG.add_edge(10, 9, capacity=10)\nG.add_edge(10, 4, capacity=7)\nG.add_edge(1, 3, capacity=7)\nG.add_edge(1, 7, capacity=9)\nG.add_edge(1, 13, capacity=7)\nG.add_edge(9, 10, capacity=10)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(9, 12, capacity=9)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(5, 9, capacity=6)\nG.add_edge(5, 7, capacity=7)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(0, 8, capacity=1)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(0, 10, capacity=5)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 3, capacity=7)\nG.add_edge(0, 5, capacity=4)\n\n# Calculate the maximum flow from node 11 to node 13\nmax_flow = nx.maximum_flow(G, 11, 13)[0]\n\nprint(\"Maximum flow from node 11 to node 13:\", max_flow)\n```"}, {"id": 227, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 1, capacity=10)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 2, capacity=10)\nG.add_edge(1, 9, capacity=4)\nG.add_edge(1, 8, capacity=9)\nG.add_edge(1, 10, capacity=0)\nG.add_edge(7, 3, capacity=2)\nG.add_edge(7, 0, capacity=8)\nG.add_edge(7, 4, capacity=7)\nG.add_edge(7, 8, capacity=6)\nG.add_edge(3, 9, capacity=9)\nG.add_edge(3, 8, capacity=8)\nG.add_edge(3, 10, capacity=8)\nG.add_edge(3, 5, capacity=6)\nG.add_edge(3, 7, capacity=10)\nG.add_edge(3, 1, capacity=0)\nG.add_edge(2, 10, capacity=9)\nG.add_edge(2, 5, capacity=7)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(8, 10, capacity=5)\nG.add_edge(8, 1, capacity=2)\nG.add_edge(0, 9, capacity=1)\nG.add_edge(10, 1, capacity=9)\nG.add_edge(10, 2, capacity=2)\nG.add_edge(10, 4, capacity=5)\nG.add_edge(10, 8, capacity=4)\nG.add_edge(6, 3, capacity=3)\nG.add_edge(6, 2, capacity=10)\nG.add_edge(6, 9, capacity=1)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(5, 6, capacity=7)\nG.add_edge(5, 10, capacity=3)\nG.add_edge(5, 2, capacity=0)\nG.add_edge(5, 3, capacity=0)\n\n# Calculate the maximum flow from node 10 to node 6\nmax_flow = nx.maximum_flow(G, 10, 6)[0]\n\nprint(\"Maximum flow from node 10 to node 6:\", max_flow)\n```"}, {"id": 228, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=2)\nG.add_edge(4, 6, capacity=4)\nG.add_edge(4, 2, capacity=4)\nG.add_edge(7, 0, capacity=6)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 4, capacity=3)\nG.add_edge(5, 3, capacity=5)\n\n# Calculate the maximum flow from node 0 to node 7\nmax_flow = nx.maximum_flow_value(G, 0, 7)\n\nprint(\"Maximum flow from node 0 to node 7:\", max_flow)\n```"}, {"id": 229, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 2, capacity=2)\nG.add_edge(6, 1, capacity=10)\nG.add_edge(6, 3, capacity=5)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 6, capacity=8)\nG.add_edge(1, 6, capacity=7)\nG.add_edge(1, 0, capacity=5)\nG.add_edge(3, 12, capacity=1)\nG.add_edge(3, 9, capacity=8)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 6, capacity=0)\nG.add_edge(0, 1, capacity=1)\nG.add_edge(0, 6, capacity=9)\nG.add_edge(12, 2, capacity=1)\nG.add_edge(12, 10, capacity=7)\nG.add_edge(9, 11, capacity=2)\nG.add_edge(9, 3, capacity=0)\nG.add_edge(7, 3, capacity=3)\nG.add_edge(5, 12, capacity=5)\nG.add_edge(8, 10, capacity=7)\nG.add_edge(11, 3, capacity=9)\nG.add_edge(11, 12, capacity=1)\nG.add_edge(11, 10, capacity=9)\nG.add_edge(11, 9, capacity=6)\nG.add_edge(13, 1, capacity=8)\nG.add_edge(13, 4, capacity=1)\nG.add_edge(13, 0, capacity=8)\n\n# Calculate the maximum flow from node 1 to node 11\nmax_flow = nx.maximum_flow(G, 1, 11)[0]\n\nprint(\"Maximum flow from node 1 to node 11:\", max_flow)\n```"}, {"id": 230, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 1, capacity=4)\nG.add_edge(8, 0, capacity=1)\nG.add_edge(8, 10, capacity=1)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(1, 4, capacity=2)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 7, capacity=9)\nG.add_edge(0, 4, capacity=8)\nG.add_edge(0, 6, capacity=6)\nG.add_edge(0, 10, capacity=4)\nG.add_edge(0, 7, capacity=9)\nG.add_edge(0, 8, capacity=8)\nG.add_edge(0, 3, capacity=9)\nG.add_edge(10, 5, capacity=7)\nG.add_edge(10, 3, capacity=9)\nG.add_edge(10, 4, capacity=9)\nG.add_edge(3, 9, capacity=4)\nG.add_edge(3, 6, capacity=9)\nG.add_edge(3, 10, capacity=3)\nG.add_edge(3, 7, capacity=5)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(4, 10, capacity=3)\nG.add_edge(4, 8, capacity=4)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(4, 3, capacity=7)\nG.add_edge(4, 0, capacity=9)\nG.add_edge(2, 8, capacity=9)\nG.add_edge(2, 9, capacity=7)\nG.add_edge(2, 6, capacity=0)\nG.add_edge(7, 1, capacity=7)\nG.add_edge(7, 10, capacity=4)\nG.add_edge(6, 2, capacity=4)\nG.add_edge(5, 0, capacity=7)\nG.add_edge(5, 4, capacity=4)\nG.add_edge(5, 9, capacity=3)\nG.add_edge(5, 6, capacity=8)\nG.add_edge(5, 2, capacity=8)\nG.add_edge(9, 7, capacity=5)\nG.add_edge(9, 0, capacity=1)\n\n# Calculate the maximum flow from node 6 to node 2\nmax_flow = nx.maximum_flow(G, 6, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 231, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 5, capacity=1)\nG.add_edge(6, 11, capacity=8)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(5, 9, capacity=4)\nG.add_edge(5, 3, capacity=10)\nG.add_edge(5, 2, capacity=1)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(11, 2, capacity=1)\nG.add_edge(9, 3, capacity=9)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(3, 9, capacity=0)\nG.add_edge(2, 10, capacity=10)\nG.add_edge(2, 13, capacity=9)\nG.add_edge(2, 6, capacity=6)\nG.add_edge(2, 0, capacity=6)\nG.add_edge(0, 10, capacity=8)\nG.add_edge(0, 3, capacity=4)\nG.add_edge(0, 6, capacity=3)\nG.add_edge(10, 12, capacity=4)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 3, capacity=2)\nG.add_edge(10, 6, capacity=2)\nG.add_edge(7, 8, capacity=3)\nG.add_edge(8, 11, capacity=4)\nG.add_edge(8, 0, capacity=5)\nG.add_edge(8, 7, capacity=10)\nG.add_edge(13, 2, capacity=4)\nG.add_edge(4, 12, capacity=1)\nG.add_edge(4, 9, capacity=1)\nG.add_edge(4, 0, capacity=7)\nG.add_edge(4, 10, capacity=8)\nG.add_edge(1, 8, capacity=2)\nG.add_edge(1, 5, capacity=10)\nG.add_edge(1, 12, capacity=8)\n\n# Calculate the maximum flow from node 9 to node 5\nmax_flow = nx.maximum_flow(G, 9, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 232, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (2, 8, 9), (2, 13, 8), (2, 5, 1), (2, 10, 7), (2, 1, 0),\n    (8, 13, 10), (8, 2, 7), (8, 6, 0),\n    (13, 9, 2), (13, 12, 6), (13, 6, 5), (13, 3, 5),\n    (5, 3, 5), (5, 2, 2), (5, 11, 4), (5, 13, 2), (5, 10, 0),\n    (10, 5, 5), (10, 6, 2),\n    (9, 0, 1),\n    (12, 0, 6), (12, 1, 1),\n    (6, 8, 6), (6, 11, 4), (6, 9, 10), (6, 4, 3), (6, 10, 0),\n    (3, 7, 5), (3, 6, 3),\n    (11, 3, 3), (11, 1, 6), (11, 5, 0),\n    (0, 11, 2), (0, 5, 8),\n    (1, 2, 6), (1, 11, 0),\n    (7, 9, 8), (7, 12, 10),\n    (4, 3, 5), (4, 0, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 2\nmax_flow = nx.maximum_flow(G, 10, 2)\n\nprint(\"Maximum flow from node 10 to node 2:\", max_flow[0])\n```"}, {"id": 233, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 3, capacity=10)\nG.add_edge(7, 2, capacity=6)\nG.add_edge(3, 0, capacity=6)\nG.add_edge(3, 2, capacity=3)\nG.add_edge(3, 10, capacity=2)\nG.add_edge(3, 4, capacity=0)\nG.add_edge(2, 12, capacity=4)\nG.add_edge(2, 10, capacity=8)\nG.add_edge(2, 8, capacity=5)\nG.add_edge(2, 9, capacity=10)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(0, 1, capacity=6)\nG.add_edge(10, 4, capacity=1)\nG.add_edge(10, 3, capacity=7)\nG.add_edge(10, 1, capacity=1)\nG.add_edge(12, 8, capacity=6)\nG.add_edge(12, 9, capacity=9)\nG.add_edge(8, 4, capacity=1)\nG.add_edge(8, 5, capacity=6)\nG.add_edge(9, 10, capacity=6)\nG.add_edge(9, 11, capacity=3)\nG.add_edge(1, 4, capacity=6)\nG.add_edge(1, 6, capacity=3)\nG.add_edge(1, 10, capacity=0)\nG.add_edge(4, 7, capacity=9)\nG.add_edge(4, 3, capacity=8)\nG.add_edge(4, 6, capacity=2)\nG.add_edge(4, 5, capacity=8)\nG.add_edge(4, 12, capacity=2)\nG.add_edge(4, 10, capacity=0)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(11, 7, capacity=6)\nG.add_edge(11, 6, capacity=5)\nG.add_edge(11, 1, capacity=7)\nG.add_edge(11, 0, capacity=1)\nG.add_edge(11, 12, capacity=9)\nG.add_edge(11, 8, capacity=2)\nG.add_edge(6, 2, capacity=5)\nG.add_edge(6, 7, capacity=9)\nG.add_edge(5, 4, capacity=3)\n\n# Calculate the maximum flow from node 10 to node 3\nmax_flow = nx.maximum_flow(G, 10, 3)[0]\n\nprint(max_flow)\n```"}, {"id": 234, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 12, 1), (10, 3, 5), (10, 6, 8), (10, 8, 1), (10, 5, 7),\n    (12, 0, 9), (12, 2, 5), (12, 1, 6), (12, 9, 8), (12, 3, 9), (12, 11, 2), (12, 5, 2),\n    (3, 11, 8), (3, 5, 4), (3, 12, 1), (3, 1, 7),\n    (6, 8, 5), (6, 5, 9), (6, 2, 7), (6, 11, 8),\n    (8, 4, 3), (8, 0, 7), (8, 2, 5), (8, 3, 10), (8, 11, 7), (8, 7, 8), (8, 5, 0), (8, 10, 0),\n    (5, 10, 1), (5, 0, 7), (5, 7, 7), (5, 8, 6),\n    (0, 2, 6), (0, 11, 10), (0, 5, 5),\n    (2, 1, 6), (2, 9, 6), (2, 4, 5), (2, 5, 3), (2, 10, 3), (2, 0, 0),\n    (1, 11, 10), (1, 7, 1), (1, 6, 4), (1, 8, 4), (1, 4, 8), (1, 0, 1), (1, 2, 3),\n    (9, 3, 2), (9, 11, 9), (9, 7, 3), (9, 6, 10), (9, 0, 8), (9, 1, 5), (9, 2, 0),\n    (11, 6, 3), (11, 8, 4), (11, 10, 4), (11, 12, 3), (11, 1, 4), (11, 9, 8), (11, 0, 0),\n    (4, 10, 10), (4, 12, 9), (4, 2, 10), (4, 9, 5), (4, 8, 5)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow(G, 5, 7)[0]\n\nprint(\"Maximum flow from node 5 to node 7:\", max_flow)\n```"}, {"id": 235, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nedges = [\n    (0, 1, 7), (0, 6, 10), (0, 5, 1), (0, 3, 1), (0, 12, 0), (0, 11, 0), (0, 2, 0),\n    (1, 2, 9), (1, 3, 2), (1, 0, 3), (1, 4, 2), (1, 12, 5), (1, 9, 10), (1, 11, 5),\n    (6, 4, 2), (6, 9, 5),\n    (5, 0, 5), (5, 7, 10),\n    (3, 0, 2), (3, 4, 9), (3, 12, 7), (3, 7, 3), (3, 5, 9),\n    (2, 5, 3), (2, 0, 10), (2, 8, 6), (2, 10, 10), (2, 9, 7), (2, 11, 5), (2, 1, 2),\n    (4, 9, 1), (4, 5, 8),\n    (12, 1, 6), (12, 2, 10), (12, 0, 2), (12, 4, 4), (12, 8, 3),\n    (9, 2, 3), (9, 7, 10), (9, 3, 2), (9, 4, 6), (9, 8, 7),\n    (11, 6, 1), (11, 7, 8), (11, 3, 4), (11, 0, 1), (11, 8, 1), (11, 10, 0),\n    (7, 0, 2), (7, 10, 4), (7, 6, 1),\n    (8, 10, 5), (8, 12, 5),\n    (10, 9, 3), (10, 11, 7), (10, 2, 4), (10, 5, 7), (10, 3, 7), (10, 4, 5), (10, 8, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 8 to node 0\nmax_flow = nx.maximum_flow_value(G, 8, 0)\n\nprint(\"Maximum flow from node 8 to node 0:\", max_flow)\n```"}, {"id": 236, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 4, capacity=9)\nG.add_edge(2, 8, capacity=7)\nG.add_edge(5, 2, capacity=5)\nG.add_edge(5, 0, capacity=1)\nG.add_edge(5, 9, capacity=2)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(4, 7, capacity=9)\nG.add_edge(0, 4, capacity=10)\nG.add_edge(9, 8, capacity=8)\nG.add_edge(9, 3, capacity=7)\nG.add_edge(9, 10, capacity=8)\nG.add_edge(6, 1, capacity=5)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(10, 3, capacity=9)\nG.add_edge(10, 0, capacity=8)\nG.add_edge(10, 9, capacity=0)\nG.add_edge(1, 7, capacity=3)\nG.add_edge(1, 9, capacity=10)\nG.add_edge(1, 5, capacity=9)\n\n# Calculate the maximum flow from node 9 to node 10\nmax_flow = nx.maximum_flow(G, 9, 10)[0]\n\nprint(\"Maximum flow from node 9 to node 10:\", max_flow)\n```"}, {"id": 237, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 4, 8), (9, 0, 9), (9, 11, 2), (9, 14, 1), (9, 8, 2), (9, 6, 0), (9, 3, 0), (9, 12, 0), (9, 13, 0), (9, 5, 0),\n    (4, 14, 10), (4, 6, 6), (4, 5, 3), (4, 7, 4), (4, 10, 0), (4, 8, 0), (4, 9, 0),\n    (0, 12, 5), (0, 3, 9), (0, 6, 1),\n    (11, 14, 2),\n    (14, 12, 1), (14, 6, 9),\n    (8, 5, 8), (8, 7, 3), (8, 4, 9), (8, 13, 9), (8, 11, 8), (8, 2, 0), (8, 9, 0),\n    (6, 9, 2), (6, 14, 5), (6, 12, 6), (6, 10, 0),\n    (5, 9, 8), (5, 12, 0),\n    (7, 1, 6), (7, 13, 4), (7, 11, 3), (7, 14, 4),\n    (12, 3, 5), (12, 5, 3), (12, 1, 2), (12, 9, 1), (12, 6, 0),\n    (3, 7, 5), (3, 1, 1), (3, 9, 2), (3, 0, 10), (3, 11, 8),\n    (13, 11, 10), (13, 14, 8), (13, 9, 8), (13, 2, 4),\n    (2, 13, 7), (2, 0, 7), (2, 8, 8), (2, 12, 9), (2, 5, 7), (2, 10, 0), (2, 1, 0),\n    (1, 2, 6), (1, 3, 7), (1, 6, 7), (1, 10, 0),\n    (10, 1, 3), (10, 2, 8), (10, 4, 3), (10, 6, 10)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 4\nmax_flow = nx.maximum_flow(G, 10, 4)[0]\n\nprint(\"Maximum flow from node 10 to node 4:\", max_flow)\n```"}, {"id": 238, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 12, 7), (0, 3, 1), (0, 11, 2), (0, 8, 5),\n    (12, 4, 6),\n    (3, 1, 2), (3, 0, 9), (3, 10, 3),\n    (11, 5, 1), (11, 4, 5), (11, 7, 6),\n    (8, 4, 3), (8, 9, 1), (8, 11, 5),\n    (4, 7, 7), (4, 11, 3), (4, 13, 9), (4, 10, 2),\n    (1, 6, 1), (1, 12, 2), (1, 10, 10), (1, 7, 0),\n    (10, 3, 7), (10, 2, 9), (10, 13, 8), (10, 12, 6),\n    (5, 7, 6), (5, 9, 7), (5, 6, 5), (5, 8, 3), (5, 0, 10), (5, 12, 2), (5, 10, 7), (5, 11, 0),\n    (7, 1, 6), (7, 13, 10), (7, 11, 0),\n    (9, 13, 1), (9, 5, 4), (9, 7, 9),\n    (13, 10, 6), (13, 7, 10), (13, 3, 5), (13, 9, 10), (13, 2, 7), (13, 4, 0),\n    (2, 6, 6), (2, 5, 7), (2, 3, 10), (2, 11, 3), (2, 13, 0),\n    (6, 4, 9), (6, 11, 5), (6, 5, 0), (6, 1, 0), (6, 2, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 11 to node 6\nmax_flow = nx.maximum_flow(G, 11, 6)[0]\n\nprint(\"Maximum flow from node 11 to node 6:\", max_flow)\n```"}, {"id": 239, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 8, 10), (0, 9, 10), (0, 6, 10), (0, 10, 2), (0, 1, 0), (0, 3, 0), (0, 7, 0), (0, 5, 0),\n    (8, 7, 6), (8, 3, 1),\n    (9, 1, 3), (9, 5, 9), (9, 4, 1), (9, 8, 7), (9, 2, 3), (9, 0, 0), (9, 10, 0),\n    (6, 10, 10), (6, 0, 7), (6, 4, 1),\n    (10, 0, 7), (10, 4, 7), (10, 8, 3), (10, 9, 2), (10, 6, 5), (10, 3, 0),\n    (7, 2, 9), (7, 1, 8), (7, 3, 9), (7, 5, 10), (7, 6, 5), (7, 0, 2), (7, 8, 8),\n    (3, 10, 7), (3, 0, 5), (3, 4, 8), (3, 2, 2), (3, 1, 5),\n    (1, 3, 5), (1, 0, 1), (1, 2, 10),\n    (5, 6, 10), (5, 0, 5), (5, 7, 0),\n    (4, 8, 1), (4, 7, 8), (4, 9, 8), (4, 0, 10), (4, 2, 0), (4, 3, 0),\n    (2, 1, 6), (2, 3, 6), (2, 4, 6), (2, 8, 1), (2, 7, 9)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 2 to node 9\nmax_flow = nx.maximum_flow_value(G, 2, 9)\n\nprint(\"Maximum flow from node 2 to node 9:\", max_flow)\n```"}, {"id": 240, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 5, capacity=10)\nG.add_edge(4, 2, capacity=3)\nG.add_edge(4, 6, capacity=1)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(2, 6, capacity=7)\nG.add_edge(2, 1, capacity=4)\nG.add_edge(2, 7, capacity=4)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(2, 4, capacity=0)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(6, 3, capacity=1)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(0, 1, capacity=5)\nG.add_edge(0, 3, capacity=1)\nG.add_edge(3, 5, capacity=1)\n\n# Calculate the maximum flow from node 4 to node 6\nmax_flow = nx.maximum_flow_value(G, 4, 6)\n\nprint(\"Maximum flow from node 4 to node 6:\", max_flow)\n```"}, {"id": 241, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (6, 12, 4), (6, 10, 2), (6, 0, 9), (6, 4, 0), (6, 3, 0), (6, 7, 0),\n    (12, 11, 10), (12, 6, 1), (12, 1, 0),\n    (10, 1, 2), (10, 2, 7), (10, 4, 8), (10, 5, 9),\n    (0, 3, 7), (0, 12, 1), (0, 9, 10), (0, 5, 10), (0, 11, 7),\n    (11, 10, 7), (11, 1, 5), (11, 4, 7), (11, 0, 2), (11, 8, 10), (11, 3, 10), (11, 5, 4), (11, 12, 0),\n    (1, 4, 2), (1, 12, 4), (1, 11, 1),\n    (2, 0, 5), (2, 7, 1), (2, 8, 5), (2, 3, 7), (2, 11, 4), (2, 1, 2), (2, 10, 0),\n    (4, 3, 2), (4, 6, 5), (4, 10, 3), (4, 1, 6),\n    (5, 10, 10), (5, 2, 10), (5, 7, 5), (5, 8, 10), (5, 12, 1), (5, 9, 3), (5, 11, 0),\n    (3, 6, 6), (3, 9, 9), (3, 5, 7), (3, 0, 3), (3, 8, 8), (3, 4, 0), (3, 2, 0), (3, 11, 0),\n    (9, 10, 4), (9, 1, 3), (9, 0, 2),\n    (8, 12, 4), (8, 2, 3),\n    (7, 6, 6), (7, 9, 6), (7, 10, 6), (7, 2, 6), (7, 5, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 4 to node 6\nmax_flow = nx.maximum_flow_value(G, 4, 6)\n\nprint(\"Maximum flow from node 4 to node 6:\", max_flow)\n```"}, {"id": 242, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 11, capacity=3)\nG.add_edge(11, 1, capacity=5)\nG.add_edge(11, 8, capacity=0)\nG.add_edge(1, 11, capacity=8)\nG.add_edge(3, 7, capacity=3)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 11, capacity=7)\nG.add_edge(7, 2, capacity=8)\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(0, 8, capacity=1)\nG.add_edge(0, 3, capacity=9)\nG.add_edge(2, 11, capacity=10)\nG.add_edge(2, 9, capacity=9)\nG.add_edge(2, 7, capacity=2)\nG.add_edge(5, 11, capacity=8)\nG.add_edge(5, 8, capacity=10)\nG.add_edge(5, 6, capacity=8)\nG.add_edge(4, 1, capacity=2)\nG.add_edge(4, 6, capacity=6)\nG.add_edge(6, 8, capacity=3)\nG.add_edge(6, 7, capacity=4)\nG.add_edge(6, 10, capacity=9)\nG.add_edge(10, 6, capacity=4)\nG.add_edge(10, 5, capacity=7)\nG.add_edge(9, 1, capacity=1)\nG.add_edge(9, 5, capacity=4)\nG.add_edge(9, 8, capacity=5)\nG.add_edge(9, 4, capacity=6)\n\n# Calculate the maximum flow from node 8 to node 1\nmax_flow = nx.maximum_flow(G, 8, 1)[0]\n\nprint(\"Maximum flow from node 8 to node 1:\", max_flow)\n```"}, {"id": 243, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 11, capacity=9)\nG.add_edge(8, 3, capacity=6)\nG.add_edge(8, 12, capacity=3)\nG.add_edge(8, 7, capacity=0)\n\nG.add_edge(11, 1, capacity=5)\nG.add_edge(11, 12, capacity=7)\nG.add_edge(11, 14, capacity=9)\nG.add_edge(11, 5, capacity=7)\nG.add_edge(11, 0, capacity=8)\nG.add_edge(11, 4, capacity=0)\nG.add_edge(11, 6, capacity=0)\nG.add_edge(11, 8, capacity=0)\n\nG.add_edge(3, 1, capacity=7)\nG.add_edge(3, 12, capacity=8)\nG.add_edge(3, 6, capacity=10)\nG.add_edge(3, 8, capacity=10)\nG.add_edge(3, 9, capacity=10)\nG.add_edge(3, 4, capacity=9)\n\nG.add_edge(12, 14, capacity=3)\nG.add_edge(12, 8, capacity=3)\nG.add_edge(12, 13, capacity=8)\nG.add_edge(12, 5, capacity=5)\nG.add_edge(12, 10, capacity=3)\n\nG.add_edge(1, 14, capacity=5)\nG.add_edge(1, 4, capacity=4)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(1, 11, capacity=8)\n\nG.add_edge(14, 7, capacity=6)\nG.add_edge(14, 0, capacity=8)\nG.add_edge(14, 3, capacity=2)\nG.add_edge(14, 1, capacity=7)\n\nG.add_edge(5, 4, capacity=4)\nG.add_edge(5, 10, capacity=8)\nG.add_edge(5, 12, capacity=7)\n\nG.add_edge(0, 1, capacity=7)\nG.add_edge(0, 12, capacity=6)\nG.add_edge(0, 14, capacity=7)\nG.add_edge(0, 8, capacity=7)\n\nG.add_edge(6, 7, capacity=7)\nG.add_edge(6, 8, capacity=9)\nG.add_edge(6, 13, capacity=3)\nG.add_edge(6, 11, capacity=7)\nG.add_edge(6, 3, capacity=10)\nG.add_edge(6, 4, capacity=0)\nG.add_edge(6, 2, capacity=0)\n\nG.add_edge(9, 4, capacity=6)\nG.add_edge(9, 10, capacity=9)\n\nG.add_edge(4, 2, capacity=3)\nG.add_edge(4, 11, capacity=3)\nG.add_edge(4, 12, capacity=4)\nG.add_edge(4, 6, capacity=8)\nG.add_edge(4, 5, capacity=5)\nG.add_edge(4, 9, capacity=1)\nG.add_edge(4, 1, capacity=0)\n\nG.add_edge(13, 0, capacity=8)\nG.add_edge(13, 1, capacity=3)\nG.add_edge(13, 10, capacity=3)\nG.add_edge(13, 12, capacity=9)\n\nG.add_edge(10, 8, capacity=10)\nG.add_edge(10, 13, capacity=7)\nG.add_edge(10, 4, capacity=1)\nG.add_edge(10, 2, capacity=1)\nG.add_edge(10, 11, capacity=5)\nG.add_edge(10, 3, capacity=9)\n\nG.add_edge(2, 1, capacity=9)\nG.add_edge(2, 12, capacity=9)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 8, capacity=2)\nG.add_edge(2, 9, capacity=10)\n\n# Calculate the maximum flow from node 1 to node 11\nmax_flow = nx.maximum_flow_value(G, 1, 11)\nprint(max_flow)\n```"}, {"id": 244, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(5, 2, capacity=2)\nG.add_edge(5, 4, capacity=2)\nG.add_edge(2, 5, capacity=1)\nG.add_edge(2, 8, capacity=8)\nG.add_edge(4, 5, capacity=6)\nG.add_edge(4, 7, capacity=6)\nG.add_edge(4, 3, capacity=7)\nG.add_edge(4, 0, capacity=8)\nG.add_edge(8, 3, capacity=6)\nG.add_edge(8, 4, capacity=7)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(0, 3, capacity=10)\nG.add_edge(0, 6, capacity=8)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(1, 4, capacity=9)\n\n# Calculate the maximum flow from node 5 to node 8\nmax_flow = nx.maximum_flow(G, 5, 8)[0]\n\nprint(\"Maximum flow from node 5 to node 8:\", max_flow)\n```"}, {"id": 245, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 3, 1), (5, 2, 5), (5, 11, 9), (5, 0, 8), (5, 8, 10), (5, 13, 0),\n    (3, 7, 6), (3, 4, 1),\n    (2, 12, 4), (2, 10, 10), (2, 9, 9), (2, 3, 4),\n    (11, 0, 1), (11, 8, 5), (11, 4, 2), (11, 12, 1),\n    (0, 7, 10), (0, 13, 4),\n    (8, 1, 9), (8, 0, 9), (8, 5, 0),\n    (7, 1, 9), (7, 13, 6), (7, 0, 0),\n    (4, 12, 4), (4, 10, 6), (4, 1, 9),\n    (12, 11, 10), (12, 9, 3), (12, 1, 9), (12, 5, 9), (12, 4, 2), (12, 13, 9), (12, 6, 7), (12, 2, 7),\n    (10, 7, 6), (10, 6, 10), (10, 2, 9), (10, 12, 1),\n    (9, 8, 9), (9, 1, 1), (9, 5, 5), (9, 4, 2), (9, 6, 1), (9, 10, 2),\n    (13, 0, 7), (13, 7, 4), (13, 5, 2),\n    (1, 13, 5), (1, 6, 6), (1, 10, 3), (1, 7, 0), (1, 8, 0),\n    (6, 10, 1), (6, 0, 6), (6, 9, 9), (6, 3, 2)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 13 to node 1\nmax_flow = nx.maximum_flow(G, 13, 1)[0]\n\nprint(\"Maximum flow from node 13 to node 1:\", max_flow)\n```"}, {"id": 246, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(10, 4, capacity=2)\nG.add_edge(10, 0, capacity=9)\nG.add_edge(10, 9, capacity=10)\nG.add_edge(10, 8, capacity=0)\nG.add_edge(4, 3, capacity=10)\nG.add_edge(4, 6, capacity=7)\nG.add_edge(4, 10, capacity=10)\nG.add_edge(4, 12, capacity=0)\nG.add_edge(0, 5, capacity=5)\nG.add_edge(0, 11, capacity=5)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(0, 10, capacity=0)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(9, 12, capacity=3)\nG.add_edge(3, 1, capacity=1)\nG.add_edge(3, 4, capacity=6)\nG.add_edge(3, 7, capacity=10)\nG.add_edge(3, 5, capacity=3)\nG.add_edge(6, 11, capacity=1)\nG.add_edge(6, 1, capacity=9)\nG.add_edge(6, 4, capacity=9)\nG.add_edge(6, 5, capacity=1)\nG.add_edge(5, 8, capacity=6)\nG.add_edge(5, 2, capacity=7)\nG.add_edge(5, 1, capacity=0)\nG.add_edge(11, 10, capacity=3)\nG.add_edge(11, 4, capacity=9)\nG.add_edge(11, 2, capacity=2)\nG.add_edge(11, 12, capacity=9)\nG.add_edge(11, 6, capacity=10)\nG.add_edge(11, 1, capacity=0)\nG.add_edge(11, 0, capacity=0)\nG.add_edge(2, 3, capacity=9)\nG.add_edge(12, 1, capacity=10)\nG.add_edge(12, 4, capacity=1)\nG.add_edge(1, 12, capacity=10)\nG.add_edge(1, 5, capacity=10)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(1, 11, capacity=7)\nG.add_edge(7, 3, capacity=5)\nG.add_edge(8, 10, capacity=7)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 0, capacity=2)\nG.add_edge(8, 3, capacity=10)\nG.add_edge(8, 5, capacity=0)\n\n# Calculate the maximum flow from node 12 to node 11\nmax_flow = nx.maximum_flow(G, 12, 11)[0]\n\nprint(max_flow)\n```"}, {"id": 247, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 5, capacity=1)\nG.add_edge(4, 0, capacity=10)\nG.add_edge(7, 5, capacity=5)\nG.add_edge(7, 1, capacity=7)\nG.add_edge(7, 4, capacity=0)\nG.add_edge(5, 6, capacity=10)\nG.add_edge(5, 1, capacity=2)\nG.add_edge(5, 4, capacity=6)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 2, capacity=4)\nG.add_edge(0, 8, capacity=9)\nG.add_edge(0, 5, capacity=6)\nG.add_edge(0, 6, capacity=4)\nG.add_edge(1, 7, capacity=3)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(1, 8, capacity=0)\nG.add_edge(6, 4, capacity=1)\nG.add_edge(6, 8, capacity=5)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(2, 0, capacity=2)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(8, 1, capacity=7)\nG.add_edge(8, 4, capacity=3)\nG.add_edge(8, 6, capacity=0)\nG.add_edge(3, 7, capacity=4)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 1, capacity=8)\nG.add_edge(3, 4, capacity=4)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow(G, 5, 7)[0]\n\nprint(max_flow)\n```"}, {"id": 248, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 9, capacity=4)\nG.add_edge(2, 5, capacity=1)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(9, 4, capacity=3)\nG.add_edge(9, 7, capacity=2)\nG.add_edge(9, 8, capacity=1)\nG.add_edge(9, 2, capacity=3)\nG.add_edge(9, 1, capacity=0)\nG.add_edge(5, 2, capacity=9)\nG.add_edge(5, 9, capacity=6)\nG.add_edge(5, 7, capacity=5)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(5, 8, capacity=7)\nG.add_edge(1, 9, capacity=7)\nG.add_edge(1, 6, capacity=5)\nG.add_edge(1, 2, capacity=0)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 8, capacity=7)\nG.add_edge(4, 5, capacity=6)\nG.add_edge(4, 1, capacity=8)\nG.add_edge(4, 2, capacity=7)\nG.add_edge(4, 9, capacity=10)\nG.add_edge(7, 0, capacity=2)\nG.add_edge(7, 5, capacity=6)\nG.add_edge(7, 1, capacity=6)\nG.add_edge(7, 9, capacity=3)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(8, 1, capacity=6)\nG.add_edge(8, 2, capacity=3)\nG.add_edge(8, 6, capacity=6)\nG.add_edge(8, 3, capacity=2)\nG.add_edge(8, 0, capacity=6)\nG.add_edge(8, 9, capacity=0)\nG.add_edge(8, 5, capacity=0)\nG.add_edge(8, 4, capacity=0)\nG.add_edge(6, 1, capacity=7)\nG.add_edge(6, 7, capacity=2)\nG.add_edge(3, 0, capacity=9)\nG.add_edge(3, 2, capacity=4)\nG.add_edge(3, 9, capacity=8)\n\n# Calculate the maximum flow from node 2 to node 8\nmax_flow = nx.maximum_flow(G, 2, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 249, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(1, 0, capacity=2)\nG.add_edge(1, 7, capacity=5)\nG.add_edge(1, 9, capacity=6)\nG.add_edge(0, 9, capacity=3)\nG.add_edge(0, 8, capacity=9)\nG.add_edge(0, 1, capacity=6)\nG.add_edge(0, 2, capacity=6)\nG.add_edge(0, 6, capacity=7)\nG.add_edge(7, 6, capacity=1)\nG.add_edge(7, 4, capacity=4)\nG.add_edge(7, 1, capacity=0)\nG.add_edge(2, 0, capacity=7)\nG.add_edge(2, 10, capacity=0)\nG.add_edge(6, 9, capacity=6)\nG.add_edge(6, 8, capacity=4)\nG.add_edge(6, 2, capacity=7)\nG.add_edge(6, 0, capacity=0)\nG.add_edge(6, 7, capacity=0)\nG.add_edge(4, 10, capacity=2)\nG.add_edge(4, 7, capacity=0)\nG.add_edge(10, 5, capacity=10)\nG.add_edge(10, 2, capacity=8)\nG.add_edge(10, 4, capacity=0)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 0, capacity=8)\n\n# Calculate the maximum flow from node 1 to node 6\nmax_flow = nx.maximum_flow_value(G, 1, 6)\n\nprint(\"Maximum flow from node 1 to node 6:\", max_flow)\n```"}, {"id": 250, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 1, capacity=10)\nG.add_edge(1, 3, capacity=4)\nG.add_edge(1, 6, capacity=8)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 6, capacity=3)\nG.add_edge(3, 1, capacity=0)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(6, 2, capacity=8)\nG.add_edge(6, 7, capacity=5)\nG.add_edge(6, 1, capacity=4)\nG.add_edge(6, 4, capacity=1)\nG.add_edge(6, 0, capacity=4)\nG.add_edge(4, 0, capacity=7)\nG.add_edge(4, 6, capacity=4)\nG.add_edge(4, 5, capacity=8)\nG.add_edge(4, 1, capacity=3)\nG.add_edge(4, 3, capacity=0)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(5, 7, capacity=0)\nG.add_edge(5, 4, capacity=0)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(2, 6, capacity=6)\nG.add_edge(7, 3, capacity=2)\nG.add_edge(7, 0, capacity=7)\nG.add_edge(7, 5, capacity=5)\nG.add_edge(7, 2, capacity=2)\nG.add_edge(7, 6, capacity=0)\nG.add_edge(0, 2, capacity=9)\nG.add_edge(0, 8, capacity=4)\n\n# Calculate the maximum flow from node 6 to node 5\nmax_flow = nx.maximum_flow(G, 6, 5)[0]\n\nprint(\"Maximum flow from node 6 to node 5:\", max_flow)\n```"}, {"id": 251, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 7, capacity=6)\nG.add_edge(0, 1, capacity=8)\nG.add_edge(0, 3, capacity=4)\nG.add_edge(0, 5, capacity=6)\nG.add_edge(0, 2, capacity=0)\nG.add_edge(7, 4, capacity=6)\nG.add_edge(1, 6, capacity=4)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 2, capacity=0)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(4, 2, capacity=9)\nG.add_edge(6, 2, capacity=10)\nG.add_edge(6, 1, capacity=6)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(2, 0, capacity=7)\nG.add_edge(2, 4, capacity=5)\nG.add_edge(2, 3, capacity=3)\nG.add_edge(2, 6, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 3\nmax_flow = nx.maximum_flow(G, 5, 3)[0]\n\nprint(max_flow)\n```"}, {"id": 252, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (4, 8, 7), (4, 2, 1), (4, 7, 10), (4, 9, 6), (4, 6, 0),\n    (8, 0, 6), (8, 6, 1), (8, 4, 5),\n    (2, 7, 6), (2, 3, 3), (2, 1, 9), (2, 5, 1), (2, 6, 0), (2, 4, 0), (2, 0, 0),\n    (7, 9, 9), (7, 3, 9), (7, 1, 5), (7, 5, 6), (7, 2, 2), (7, 4, 0),\n    (9, 3, 8), (9, 2, 7), (9, 7, 10),\n    (0, 2, 10), (0, 3, 3), (0, 6, 3), (0, 8, 4),\n    (6, 4, 4), (6, 8, 9), (6, 0, 3), (6, 2, 2), (6, 3, 4),\n    (3, 1, 2), (3, 8, 5), (3, 0, 10), (3, 6, 0),\n    (1, 0, 9), (1, 3, 9), (1, 2, 0), (1, 7, 0),\n    (5, 2, 9), (5, 3, 5), (5, 6, 1)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 1\nmax_flow = nx.maximum_flow(G, 6, 1)[0]\n\nprint(\"Maximum flow from node 6 to node 1:\", max_flow)\n```"}, {"id": 253, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 9, capacity=9)\nG.add_edge(4, 10, capacity=4)\nG.add_edge(4, 3, capacity=3)\nG.add_edge(4, 0, capacity=3)\nG.add_edge(9, 6, capacity=6)\nG.add_edge(9, 12, capacity=7)\nG.add_edge(10, 0, capacity=2)\nG.add_edge(3, 0, capacity=5)\nG.add_edge(3, 8, capacity=10)\nG.add_edge(3, 12, capacity=3)\nG.add_edge(0, 8, capacity=2)\nG.add_edge(0, 12, capacity=9)\nG.add_edge(0, 2, capacity=7)\nG.add_edge(6, 4, capacity=6)\nG.add_edge(6, 8, capacity=8)\nG.add_edge(6, 10, capacity=9)\nG.add_edge(6, 7, capacity=6)\nG.add_edge(6, 5, capacity=3)\nG.add_edge(12, 2, capacity=1)\nG.add_edge(12, 9, capacity=6)\nG.add_edge(12, 7, capacity=4)\nG.add_edge(12, 1, capacity=5)\nG.add_edge(12, 4, capacity=10)\nG.add_edge(12, 0, capacity=0)\nG.add_edge(8, 12, capacity=4)\nG.add_edge(8, 3, capacity=10)\nG.add_edge(2, 9, capacity=4)\nG.add_edge(2, 3, capacity=7)\nG.add_edge(2, 8, capacity=5)\nG.add_edge(2, 12, capacity=5)\nG.add_edge(7, 5, capacity=4)\nG.add_edge(7, 6, capacity=9)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 11, capacity=3)\nG.add_edge(7, 2, capacity=5)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(1, 12, capacity=0)\nG.add_edge(11, 5, capacity=3)\n\n# Calculate the maximum flow from node 0 to node 1\nmax_flow = nx.maximum_flow(G, 0, 1)[0]\n\nprint(\"Maximum flow from node 0 to node 1:\", max_flow)\n```"}, {"id": 254, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 5, capacity=10)\nG.add_edge(0, 1, capacity=5)\nG.add_edge(5, 7, capacity=10)\nG.add_edge(5, 3, capacity=1)\nG.add_edge(5, 6, capacity=1)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(1, 7, capacity=1)\nG.add_edge(7, 6, capacity=9)\nG.add_edge(7, 2, capacity=1)\nG.add_edge(7, 1, capacity=4)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 4, capacity=7)\nG.add_edge(3, 5, capacity=0)\nG.add_edge(6, 5, capacity=8)\nG.add_edge(6, 7, capacity=4)\nG.add_edge(6, 3, capacity=1)\nG.add_edge(2, 0, capacity=9)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(4, 2, capacity=2)\nG.add_edge(4, 5, capacity=9)\nG.add_edge(4, 1, capacity=6)\nG.add_edge(4, 6, capacity=5)\nG.add_edge(4, 3, capacity=0)\n\n# Calculate the maximum flow from node 5 to node 4\nmax_flow = nx.maximum_flow(G, 5, 4)[0]\n\nprint(\"Maximum flow from node 5 to node 4:\", max_flow)\n```"}, {"id": 255, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 0, capacity=1)\nG.add_edge(7, 4, capacity=8)\nG.add_edge(7, 3, capacity=0)\nG.add_edge(7, 5, capacity=0)\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 7, capacity=4)\nG.add_edge(0, 3, capacity=0)\nG.add_edge(4, 2, capacity=3)\nG.add_edge(4, 7, capacity=8)\nG.add_edge(4, 0, capacity=2)\nG.add_edge(2, 3, capacity=1)\nG.add_edge(2, 1, capacity=8)\nG.add_edge(2, 6, capacity=6)\nG.add_edge(1, 3, capacity=8)\nG.add_edge(3, 7, capacity=9)\nG.add_edge(3, 1, capacity=8)\nG.add_edge(3, 0, capacity=3)\nG.add_edge(3, 2, capacity=2)\nG.add_edge(6, 5, capacity=2)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(5, 2, capacity=2)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 7, capacity=8)\nG.add_edge(5, 1, capacity=8)\nG.add_edge(5, 6, capacity=6)\nG.add_edge(5, 4, capacity=10)\n\n# Calculate the maximum flow from node 3 to node 7\nmax_flow = nx.maximum_flow_value(G, 3, 7)\n\nprint(\"Maximum flow from node 3 to node 7:\", max_flow)\n```"}, {"id": 256, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 4, capacity=3)\nG.add_edge(8, 7, capacity=5)\nG.add_edge(4, 0, capacity=6)\nG.add_edge(4, 2, capacity=4)\nG.add_edge(4, 8, capacity=5)\nG.add_edge(7, 1, capacity=9)\nG.add_edge(7, 3, capacity=1)\nG.add_edge(0, 7, capacity=3)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(2, 3, capacity=4)\nG.add_edge(2, 6, capacity=1)\nG.add_edge(2, 4, capacity=10)\nG.add_edge(1, 2, capacity=8)\nG.add_edge(1, 3, capacity=2)\nG.add_edge(1, 6, capacity=5)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(3, 5, capacity=5)\nG.add_edge(3, 7, capacity=2)\nG.add_edge(6, 8, capacity=6)\nG.add_edge(6, 0, capacity=10)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 2, capacity=10)\nG.add_edge(6, 5, capacity=10)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(5, 3, capacity=0)\n\n# Calculate the maximum flow from node 3 to node 6\nmax_flow = nx.maximum_flow(G, 3, 6)[0]\n\nprint(\"Maximum flow from node 3 to node 6:\", max_flow)\n```"}, {"id": 257, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(11, 9, capacity=10)\nG.add_edge(11, 8, capacity=2)\nG.add_edge(9, 0, capacity=4)\nG.add_edge(9, 2, capacity=6)\nG.add_edge(9, 11, capacity=8)\nG.add_edge(8, 10, capacity=10)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 7, capacity=4)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(8, 11, capacity=0)\nG.add_edge(0, 5, capacity=1)\nG.add_edge(2, 9, capacity=6)\nG.add_edge(2, 8, capacity=4)\nG.add_edge(2, 10, capacity=8)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(10, 0, capacity=6)\nG.add_edge(4, 5, capacity=5)\nG.add_edge(7, 4, capacity=7)\nG.add_edge(7, 11, capacity=4)\nG.add_edge(6, 8, capacity=2)\nG.add_edge(6, 0, capacity=3)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(3, 4, capacity=2)\nG.add_edge(3, 7, capacity=6)\nG.add_edge(5, 3, capacity=4)\nG.add_edge(12, 10, capacity=5)\nG.add_edge(12, 4, capacity=7)\nG.add_edge(1, 0, capacity=3)\nG.add_edge(1, 2, capacity=4)\nG.add_edge(1, 5, capacity=6)\n\n# Calculate the maximum flow from node 2 to node 8\nmax_flow = nx.maximum_flow(G, 2, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 258, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 7, 7), (8, 10, 2), (8, 6, 0),\n    (7, 4, 6), (7, 8, 7), (7, 1, 7), (7, 2, 2), (7, 11, 0),\n    (10, 6, 3), (10, 8, 10), (10, 1, 3), (10, 5, 10), (10, 4, 2), (10, 0, 6),\n    (4, 8, 1), (4, 11, 8), (4, 5, 3), (4, 6, 0),\n    (1, 11, 5), (1, 2, 7), (1, 7, 6), (1, 0, 6), (1, 12, 10), (1, 6, 3), (1, 8, 5),\n    (2, 0, 10), (2, 12, 8), (2, 10, 6), (2, 6, 5), (2, 1, 0), (2, 7, 0), (2, 5, 0),\n    (6, 8, 3), (6, 1, 6), (6, 11, 10), (6, 2, 7), (6, 4, 3),\n    (5, 3, 9), (5, 8, 4), (5, 2, 9), (5, 7, 10), (5, 4, 0),\n    (0, 6, 5), (0, 7, 5), (0, 4, 4),\n    (11, 7, 4), (11, 4, 4), (11, 0, 6), (11, 3, 7), (11, 8, 2), (11, 6, 0),\n    (12, 9, 2), (12, 3, 3), (12, 8, 6), (12, 2, 4), (12, 7, 1), (12, 1, 0),\n    (3, 6, 2), (3, 8, 7), (3, 1, 4), (3, 7, 7), (3, 5, 8), (3, 4, 5), (3, 12, 2), (3, 9, 5), (3, 11, 0),\n    (9, 1, 2), (9, 2, 3), (9, 7, 6), (9, 5, 3), (9, 4, 3), (9, 0, 2)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 2\nmax_flow = nx.maximum_flow(G, 6, 2)[0]\n\nprint(max_flow)\n```"}, {"id": 259, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 9, 1), (3, 10, 2), (3, 14, 7), (3, 4, 8), (3, 8, 10), (3, 1, 4), (3, 0, 7), (3, 12, 3), (3, 11, 5), (3, 2, 4),\n    (9, 10, 10), (9, 7, 8), (9, 14, 1), (9, 5, 9), (9, 1, 6), (9, 2, 10),\n    (10, 14, 6), (10, 2, 3), (10, 9, 7), (10, 7, 0), (10, 1, 0), (10, 8, 0), (10, 11, 0), (10, 13, 0),\n    (14, 4, 10), (14, 8, 3), (14, 1, 9), (14, 0, 5), (14, 2, 6), (14, 9, 2), (14, 10, 5), (14, 7, 8), (14, 12, 0),\n    (4, 8, 5), (4, 1, 2), (4, 12, 2), (4, 9, 1), (4, 7, 9),\n    (8, 0, 3), (8, 12, 8), (8, 13, 4), (8, 11, 3), (8, 2, 1), (8, 6, 3), (8, 9, 2), (8, 10, 8), (8, 7, 0),\n    (1, 12, 4), (1, 2, 1), (1, 9, 4), (1, 10, 10), (1, 14, 6), (1, 5, 7), (1, 8, 10), (1, 0, 0),\n    (0, 6, 10), (0, 9, 9), (0, 7, 5), (0, 4, 8), (0, 1, 1), (0, 2, 0),\n    (12, 6, 6), (12, 7, 9), (12, 14, 10), (12, 1, 8), (12, 5, 0),\n    (11, 2, 9), (11, 9, 2), (11, 10, 1), (11, 14, 9), (11, 5, 1), (11, 8, 9), (11, 1, 4), (11, 12, 6),\n    (2, 6, 4), (2, 9, 2), (2, 10, 5), (2, 0, 10), (2, 12, 10),\n    (7, 5, 4), (7, 8, 3), (7, 0, 4), (7, 6, 8), (7, 10, 4), (7, 9, 0),\n    (5, 12, 10), (5, 11, 4), (5, 2, 9), (5, 6, 4), (5, 9, 0),\n    (13, 3, 9), (13, 10, 10), (13, 7, 5), (13, 5, 4), (13, 6, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 10\nmax_flow = nx.maximum_flow_value(G, 9, 10)\n\nprint(\"Maximum flow from node 9 to node 10:\", max_flow)\n```"}, {"id": 260, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 6, 2), (3, 11, 4), (3, 1, 4), (3, 9, 8), (3, 8, 4), (3, 10, 1), (3, 14, 10), (3, 2, 1), (3, 12, 0),\n    (6, 11, 2), (6, 5, 8), (6, 13, 1), (6, 7, 9), (6, 14, 8), (6, 2, 5),\n    (11, 5, 10), (11, 4, 3), (11, 9, 2), (11, 13, 7), (11, 10, 9), (11, 2, 6), (11, 3, 2),\n    (1, 5, 8), (1, 9, 8), (1, 13, 9), (1, 12, 8), (1, 6, 2),\n    (9, 8, 10), (9, 10, 4), (9, 14, 4), (9, 0, 7), (9, 6, 5),\n    (8, 10, 5), (8, 4, 9), (8, 9, 2), (8, 7, 0), (8, 3, 0), (8, 5, 0),\n    (10, 2, 10), (10, 3, 7), (10, 5, 5), (10, 9, 6), (10, 8, 7), (10, 12, 7), (10, 4, 0),\n    (14, 11, 3), (14, 5, 10), (14, 9, 8), (14, 12, 2), (14, 10, 4),\n    (2, 3, 9), (2, 10, 3), (2, 14, 5),\n    (5, 9, 5), (5, 8, 6), (5, 14, 10), (5, 3, 9), (5, 11, 3), (5, 12, 0), (5, 10, 0),\n    (13, 12, 9), (13, 7, 7), (13, 14, 9), (13, 2, 8), (13, 11, 6), (13, 1, 8), (13, 4, 0), (13, 0, 0),\n    (7, 14, 7), (7, 3, 1), (7, 8, 10), (7, 13, 0),\n    (4, 13, 4), (4, 12, 5), (4, 10, 10), (4, 0, 6),\n    (12, 14, 1), (12, 2, 7), (12, 3, 5), (12, 5, 7), (12, 4, 1), (12, 13, 5),\n    (0, 9, 4), (0, 13, 7), (0, 4, 0)\n]\n\nfor u, v, w in edges:\n    G.add_edge(u, v, capacity=w)\n\n# Calculate the maximum flow from node 4 to node 8\nmax_flow = nx.maximum_flow_value(G, 4, 8)\nprint(max_flow)\n```"}, {"id": 261, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 7, 1), (9, 11, 10), (9, 5, 4), (9, 3, 4), (9, 12, 9), (9, 2, 4), (9, 6, 8),\n    (7, 5, 2), (7, 12, 1), (7, 4, 8), (7, 13, 3), (7, 6, 5),\n    (11, 12, 1), (11, 2, 3), (11, 4, 3), (11, 13, 7), (11, 6, 8),\n    (5, 3, 9), (5, 13, 9), (5, 6, 3), (5, 7, 0), (5, 2, 0),\n    (3, 8, 9), (3, 2, 4), (3, 4, 7), (3, 0, 5), (3, 10, 3), (3, 5, 0),\n    (12, 6, 8), (12, 9, 6), (12, 7, 1), (12, 11, 0),\n    (2, 6, 7), (2, 5, 7), (2, 8, 4), (2, 11, 0),\n    (6, 0, 6), (6, 10, 5), (6, 2, 10), (6, 13, 10), (6, 11, 0), (6, 12, 0), (6, 4, 0),\n    (4, 6, 8), (4, 7, 7), (4, 8, 3), (4, 11, 0),\n    (13, 11, 2), (13, 10, 8), (13, 6, 0),\n    (8, 1, 2), (8, 2, 8), (8, 0, 4),\n    (0, 10, 6), (0, 8, 9), (0, 1, 10), (0, 6, 0),\n    (10, 8, 2), (10, 1, 3), (10, 9, 7), (10, 13, 0), (10, 6, 0), (10, 0, 0), (10, 3, 0),\n    (1, 4, 10), (1, 13, 1), (1, 11, 4), (1, 12, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 11 to node 10\nmax_flow = nx.maximum_flow_value(G, 11, 10)\n\nprint(\"Maximum flow from node 11 to node 10:\", max_flow)\n```"}, {"id": 262, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(6, 7, capacity=3)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 0, capacity=3)\nG.add_edge(1, 5, capacity=8)\nG.add_edge(1, 4, capacity=3)\nG.add_edge(1, 6, capacity=9)\nG.add_edge(1, 8, capacity=7)\nG.add_edge(1, 7, capacity=4)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(0, 3, capacity=7)\nG.add_edge(0, 4, capacity=0)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(0, 7, capacity=0)\nG.add_edge(8, 0, capacity=4)\nG.add_edge(8, 1, capacity=3)\nG.add_edge(8, 5, capacity=1)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 6, capacity=7)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(4, 0, capacity=1)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(3, 5, capacity=3)\nG.add_edge(2, 5, capacity=9)\nG.add_edge(2, 8, capacity=9)\nG.add_edge(2, 3, capacity=1)\nG.add_edge(11, 10, capacity=2)\nG.add_edge(11, 7, capacity=6)\nG.add_edge(11, 1, capacity=8)\nG.add_edge(10, 2, capacity=8)\nG.add_edge(10, 7, capacity=9)\nG.add_edge(9, 10, capacity=7)\nG.add_edge(9, 4, capacity=8)\nG.add_edge(9, 3, capacity=1)\nG.add_edge(9, 0, capacity=3)\nG.add_edge(9, 2, capacity=7)\nG.add_edge(9, 5, capacity=2)\n\n# Calculate the maximum flow from node 1 to node 0\nmax_flow = nx.maximum_flow_value(G, 1, 0)\n\nprint(max_flow)\n```"}, {"id": 263, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 5, 3), (7, 2, 8), (7, 9, 3), (7, 6, 1), (7, 4, 10), (7, 3, 2), (7, 14, 0),\n    (5, 2, 9), (5, 14, 7), (5, 8, 9), (5, 6, 7), (5, 10, 4), (5, 4, 7), (5, 11, 8), (5, 7, 2),\n    (2, 12, 1), (2, 9, 6), (2, 4, 6), (2, 0, 4), (2, 7, 3), (2, 14, 0),\n    (9, 8, 8), (9, 1, 10), (9, 0, 7), (9, 7, 1), (9, 5, 4), (9, 12, 8), (9, 11, 0), (9, 2, 0),\n    (6, 13, 2), (6, 0, 8), (6, 9, 3), (6, 14, 5), (6, 3, 0),\n    (4, 11, 1), (4, 7, 2), (4, 14, 6), (4, 8, 2), (4, 6, 4), (4, 13, 1),\n    (3, 11, 1), (3, 12, 3), (3, 14, 9), (3, 8, 6), (3, 6, 6), (3, 10, 3),\n    (14, 8, 10), (14, 3, 10), (14, 11, 3), (14, 7, 8), (14, 2, 2), (14, 12, 3),\n    (8, 10, 6), (8, 13, 2), (8, 7, 1), (8, 9, 1), (8, 14, 0),\n    (10, 13, 7), (10, 4, 8), (10, 11, 9), (10, 0, 4), (10, 7, 4), (10, 5, 2), (10, 2, 2), (10, 12, 2), (10, 9, 8), (10, 8, 0),\n    (11, 0, 8), (11, 9, 10), (11, 8, 9), (11, 6, 4), (11, 3, 1), (11, 14, 0),\n    (12, 9, 10), (12, 1, 10), (12, 10, 6), (12, 13, 10), (12, 2, 5), (12, 14, 0), (12, 3, 0),\n    (0, 7, 1), (0, 5, 6), (0, 2, 8), (0, 14, 2), (0, 6, 10), (0, 10, 2),\n    (1, 13, 9), (1, 4, 6), (1, 3, 10), (1, 11, 2), (1, 6, 1),\n    (13, 4, 6), (13, 3, 5), (13, 0, 5), (13, 5, 6), (13, 12, 8), (13, 9, 9), (13, 14, 9), (13, 6, 9), (13, 1, 3), (13, 8, 0), (13, 10, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 14 to node 12\nmax_flow = nx.maximum_flow(G, 14, 12)[0]\n\nprint(\"Maximum flow from node 14 to node 12:\", max_flow)\n```"}, {"id": 264, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (6, 5, 5), (6, 1, 1), (6, 0, 1), (6, 4, 0),\n    (5, 1, 5), (5, 0, 4), (5, 9, 0),\n    (1, 4, 10), (1, 5, 6), (1, 8, 7), (1, 9, 0),\n    (0, 10, 8), (0, 1, 9), (0, 3, 5), (0, 9, 0), (0, 5, 0), (0, 2, 0), (0, 6, 0),\n    (4, 2, 4), (4, 1, 6), (4, 3, 6), (4, 6, 10),\n    (8, 1, 5), (8, 9, 10), (8, 5, 1),\n    (10, 8, 3), (10, 2, 4), (10, 6, 6), (10, 4, 6),\n    (3, 0, 7), (3, 4, 3), (3, 7, 3), (3, 9, 0),\n    (2, 3, 10), (2, 0, 4), (2, 4, 1), (2, 10, 8), (2, 8, 10),\n    (7, 2, 3), (7, 9, 9), (7, 3, 8), (7, 6, 6), (7, 4, 9)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 0\nmax_flow = nx.maximum_flow(G, 9, 0)[0]\n\nprint(\"Maximum flow from node 9 to node 0:\", max_flow)\n```"}, {"id": 265, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 1, capacity=10)\nG.add_edge(1, 6, capacity=7)\nG.add_edge(6, 2, capacity=2)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(6, 9, capacity=3)\nG.add_edge(6, 5, capacity=0)\nG.add_edge(0, 1, capacity=10)\nG.add_edge(0, 6, capacity=8)\nG.add_edge(0, 8, capacity=10)\nG.add_edge(0, 4, capacity=6)\nG.add_edge(8, 7, capacity=4)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 0, capacity=1)\nG.add_edge(8, 6, capacity=6)\nG.add_edge(2, 5, capacity=8)\nG.add_edge(2, 4, capacity=4)\nG.add_edge(9, 4, capacity=6)\nG.add_edge(9, 5, capacity=8)\nG.add_edge(7, 3, capacity=10)\nG.add_edge(7, 8, capacity=0)\nG.add_edge(3, 6, capacity=6)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 1, capacity=4)\nG.add_edge(5, 9, capacity=6)\nG.add_edge(5, 3, capacity=1)\nG.add_edge(5, 6, capacity=9)\nG.add_edge(5, 2, capacity=7)\n\n# Calculate the maximum flow from node 9 to node 7\nmax_flow = nx.maximum_flow(G, 9, 7)[0]\n\nprint(\"Maximum flow from node 9 to node 7:\", max_flow)\n```"}, {"id": 266, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 4, 4), (8, 14, 5), (8, 5, 6), (8, 9, 10), (8, 11, 7), (8, 12, 9), (8, 2, 1), (8, 7, 0),\n    (4, 14, 7), (4, 9, 10), (4, 1, 7), (4, 7, 0), (4, 3, 0),\n    (14, 1, 4), (14, 11, 4), (14, 6, 6), (14, 7, 7), (14, 12, 5), (14, 13, 4), (14, 2, 0), (14, 8, 0), (14, 4, 0),\n    (5, 9, 2), (5, 0, 10), (5, 1, 2), (5, 6, 1), (5, 2, 3), (5, 3, 4), (5, 4, 5), (5, 14, 9),\n    (9, 0, 1), (9, 1, 8), (9, 11, 4), (9, 7, 4), (9, 12, 7), (9, 2, 6), (9, 8, 1), (9, 4, 10), (9, 13, 10), (9, 5, 7),\n    (11, 4, 3), (11, 14, 5),\n    (12, 3, 8), (12, 1, 1),\n    (2, 3, 10), (2, 13, 7), (2, 14, 1), (2, 1, 5), (2, 10, 7), (2, 12, 1), (2, 7, 0),\n    (1, 12, 2), (1, 3, 2), (1, 4, 10), (1, 13, 3),\n    (6, 12, 1), (6, 2, 7), (6, 8, 6), (6, 14, 7), (6, 0, 7), (6, 1, 8), (6, 11, 1),\n    (7, 12, 6), (7, 2, 2), (7, 8, 1), (7, 3, 2), (7, 4, 1), (7, 9, 6), (7, 1, 8), (7, 13, 0),\n    (13, 7, 4),\n    (0, 11, 4), (0, 8, 9), (0, 4, 7), (0, 13, 5),\n    (3, 4, 5), (3, 1, 9), (3, 10, 2), (3, 7, 8), (3, 12, 6),\n    (10, 12, 4), (10, 2, 7), (10, 3, 7), (10, 4, 9), (10, 13, 2), (10, 0, 7), (10, 1, 10)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 13 to node 14\nmax_flow = nx.maximum_flow_value(G, 13, 14)\nprint(max_flow)\n```"}, {"id": 267, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 8, 2), (9, 0, 10), (9, 7, 5), (9, 10, 1), (9, 5, 5), (9, 2, 0),\n    (8, 0, 9), (8, 5, 7), (8, 4, 6), (8, 3, 6), (8, 2, 0), (8, 6, 0), (8, 9, 0), (8, 10, 0),\n    (0, 5, 4), (0, 2, 10), (0, 6, 1), (0, 1, 2),\n    (7, 10, 8), (7, 5, 2), (7, 6, 3), (7, 9, 1), (7, 3, 8),\n    (10, 1, 2), (10, 4, 10), (10, 9, 10), (10, 8, 8), (10, 0, 5), (10, 3, 0), (10, 6, 0), (10, 7, 0),\n    (4, 0, 3), (4, 1, 7),\n    (3, 7, 9), (3, 10, 1), (3, 5, 3), (3, 2, 8), (3, 6, 4), (3, 1, 7), (3, 4, 3),\n    (2, 1, 7), (2, 9, 5), (2, 8, 3), (2, 5, 2), (2, 0, 0),\n    (6, 3, 1), (6, 8, 1), (6, 0, 6), (6, 7, 5), (6, 10, 9), (6, 5, 2), (6, 2, 9), (6, 1, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 8\nmax_flow = nx.maximum_flow_value(G, 0, 8)\n\nprint(\"Maximum flow from node 0 to node 8:\", max_flow)\n```"}, {"id": 268, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 6, 5), (5, 0, 9), (5, 7, 7), (5, 3, 3), (5, 4, 6),\n    (6, 0, 8), (6, 1, 8), (6, 2, 1), (6, 7, 0),\n    (0, 7, 9), (0, 1, 7), (0, 2, 6), (0, 4, 4),\n    (7, 4, 4), (7, 6, 5), (7, 0, 0),\n    (3, 1, 1), (3, 2, 3), (3, 4, 9), (3, 5, 10), (3, 6, 9), (3, 0, 10),\n    (4, 0, 4), (4, 1, 10), (4, 2, 8), (4, 7, 0),\n    (1, 2, 7), (1, 7, 6), (1, 3, 2), (1, 0, 0), (1, 6, 0),\n    (2, 0, 8), (2, 7, 4), (2, 3, 1), (2, 1, 0), (2, 4, 0), (2, 6, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 0 to node 2\nmax_flow = nx.maximum_flow(G, 0, 2)[0]\n\nprint(\"Maximum flow from node 0 to node 2:\", max_flow)\n```"}, {"id": 269, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(12, 3, capacity=7)\nG.add_edge(12, 0, capacity=3)\nG.add_edge(3, 2, capacity=1)\nG.add_edge(3, 11, capacity=3)\nG.add_edge(3, 12, capacity=0)\nG.add_edge(0, 4, capacity=5)\nG.add_edge(0, 2, capacity=3)\nG.add_edge(0, 12, capacity=0)\nG.add_edge(2, 4, capacity=4)\nG.add_edge(2, 3, capacity=0)\nG.add_edge(2, 0, capacity=0)\nG.add_edge(11, 12, capacity=7)\nG.add_edge(11, 10, capacity=7)\nG.add_edge(4, 10, capacity=2)\nG.add_edge(4, 3, capacity=3)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(10, 0, capacity=3)\nG.add_edge(6, 3, capacity=6)\nG.add_edge(6, 4, capacity=3)\nG.add_edge(5, 12, capacity=9)\nG.add_edge(1, 11, capacity=5)\nG.add_edge(1, 12, capacity=9)\nG.add_edge(9, 0, capacity=10)\nG.add_edge(8, 11, capacity=7)\nG.add_edge(8, 0, capacity=3)\nG.add_edge(8, 7, capacity=3)\n\n# Calculate the maximum flow from node 12 to node 2\nmax_flow = nx.maximum_flow(G, 12, 2)[0]\n\nprint(\"Maximum flow from node 12 to node 2:\", max_flow)\n```"}, {"id": 270, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(0, 4, capacity=9)\nG.add_edge(0, 2, capacity=5)\nG.add_edge(0, 3, capacity=5)\nG.add_edge(0, 1, capacity=9)\nG.add_edge(4, 2, capacity=2)\nG.add_edge(4, 3, capacity=1)\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 5, capacity=3)\nG.add_edge(4, 0, capacity=0)\nG.add_edge(2, 0, capacity=8)\nG.add_edge(3, 5, capacity=7)\nG.add_edge(3, 1, capacity=6)\nG.add_edge(3, 6, capacity=3)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(1, 0, capacity=8)\nG.add_edge(1, 2, capacity=3)\nG.add_edge(1, 3, capacity=6)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(7, 0, capacity=4)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(5, 1, capacity=8)\nG.add_edge(5, 0, capacity=1)\nG.add_edge(5, 4, capacity=1)\nG.add_edge(5, 3, capacity=0)\n\n# Calculate the maximum flow from node 2 to node 5\nmax_flow = nx.maximum_flow_value(G, 2, 5)\n\nprint(max_flow)\n```"}, {"id": 271, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (0, 6, 7), (0, 8, 8), (0, 1, 1), (0, 7, 9),\n    (6, 1, 7), (6, 5, 2), (6, 11, 9),\n    (8, 4, 1), (8, 1, 2), (8, 5, 5), (8, 11, 7),\n    (1, 5, 7), (1, 11, 4), (1, 6, 9),\n    (7, 12, 5), (7, 4, 1),\n    (5, 11, 7), (5, 6, 0), (5, 1, 0), (5, 3, 0),\n    (11, 6, 9), (11, 12, 1), (11, 3, 10), (11, 5, 6),\n    (4, 2, 10), (4, 1, 10), (4, 0, 2), (4, 6, 9), (4, 8, 3), (4, 12, 10), (4, 3, 3),\n    (12, 4, 3), (12, 6, 7),\n    (10, 6, 10), (10, 8, 6), (10, 12, 7), (10, 2, 9), (10, 7, 3),\n    (2, 1, 8), (2, 5, 9), (2, 11, 1), (2, 10, 1), (2, 3, 4), (2, 4, 5),\n    (3, 4, 7), (3, 1, 2), (3, 5, 5), (3, 11, 2), (3, 10, 2),\n    (9, 3, 10), (9, 4, 5), (9, 11, 10), (9, 12, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 6 to node 5\nmax_flow = nx.maximum_flow(G, 6, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 272, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(5, 3, weight=10)\nG.add_edge(5, 2, weight=1)\nG.add_edge(5, 10, weight=9)\nG.add_edge(5, 7, weight=10)\nG.add_edge(5, 4, weight=8)\nG.add_edge(3, 6, weight=2)\nG.add_edge(3, 10, weight=9)\nG.add_edge(2, 4, weight=7)\nG.add_edge(2, 0, weight=4)\nG.add_edge(2, 1, weight=3)\nG.add_edge(10, 5, weight=2)\nG.add_edge(10, 1, weight=3)\nG.add_edge(10, 9, weight=0)\nG.add_edge(7, 4, weight=10)\nG.add_edge(7, 5, weight=3)\nG.add_edge(7, 9, weight=10)\nG.add_edge(7, 1, weight=4)\nG.add_edge(4, 8, weight=5)\nG.add_edge(4, 7, weight=2)\nG.add_edge(6, 7, weight=7)\nG.add_edge(6, 9, weight=6)\nG.add_edge(6, 3, weight=10)\nG.add_edge(0, 3, weight=7)\nG.add_edge(0, 8, weight=9)\nG.add_edge(0, 2, weight=4)\nG.add_edge(0, 10, weight=2)\nG.add_edge(0, 7, weight=3)\nG.add_edge(0, 9, weight=4)\nG.add_edge(1, 7, weight=1)\nG.add_edge(1, 4, weight=3)\nG.add_edge(1, 9, weight=8)\nG.add_edge(9, 0, weight=4)\nG.add_edge(9, 8, weight=6)\nG.add_edge(9, 1, weight=5)\nG.add_edge(9, 2, weight=2)\nG.add_edge(9, 10, weight=10)\nG.add_edge(9, 7, weight=1)\nG.add_edge(8, 6, weight=3)\nG.add_edge(8, 10, weight=4)\nG.add_edge(8, 7, weight=5)\nG.add_edge(8, 4, weight=2)\n\n# Calculate the maximum flow from node 7 to node 5\nmax_flow = nx.maximum_flow_value(G, 7, 5)\n\nprint(\"Maximum flow from node 7 to node 5:\", max_flow)\n```"}, {"id": 273, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(10, 9, capacity=8)\nG.add_edge(10, 3, capacity=6)\nG.add_edge(3, 9, capacity=1)\nG.add_edge(2, 3, capacity=6)\nG.add_edge(2, 6, capacity=2)\nG.add_edge(6, 1, capacity=1)\nG.add_edge(6, 3, capacity=8)\nG.add_edge(1, 11, capacity=10)\nG.add_edge(1, 10, capacity=5)\nG.add_edge(1, 2, capacity=9)\nG.add_edge(1, 5, capacity=5)\nG.add_edge(1, 8, capacity=0)\nG.add_edge(5, 0, capacity=7)\nG.add_edge(0, 11, capacity=1)\nG.add_edge(11, 7, capacity=6)\nG.add_edge(11, 1, capacity=10)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(8, 1, capacity=4)\nG.add_edge(8, 3, capacity=4)\nG.add_edge(4, 10, capacity=5)\n\n# Calculate the maximum flow from node 8 to node 1\nmax_flow = nx.maximum_flow(G, 8, 1)[0]\n\nprint(\"Maximum flow from node 8 to node 1:\", max_flow)\n```"}, {"id": 274, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 1, capacity=9)\nG.add_edge(2, 7, capacity=3)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(2, 8, capacity=4)\nG.add_edge(1, 6, capacity=3)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 8, capacity=0)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(8, 1, capacity=10)\nG.add_edge(6, 9, capacity=10)\nG.add_edge(6, 1, capacity=0)\nG.add_edge(9, 5, capacity=10)\nG.add_edge(9, 6, capacity=1)\nG.add_edge(9, 8, capacity=7)\nG.add_edge(4, 2, capacity=8)\nG.add_edge(5, 2, capacity=10)\nG.add_edge(5, 4, capacity=5)\n\n# Calculate the maximum flow from node 8 to node 9\nmax_flow = nx.maximum_flow(G, 8, 9)[0]\n\nprint(\"Maximum flow from node 8 to node 9:\", max_flow)\n```"}, {"id": 275, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(11, 1, weight=6)\nG.add_edge(11, 0, weight=0)\nG.add_edge(11, 8, weight=0)\nG.add_edge(1, 4, weight=8)\nG.add_edge(1, 9, weight=5)\nG.add_edge(1, 6, weight=9)\nG.add_edge(1, 11, weight=0)\nG.add_edge(1, 8, weight=0)\nG.add_edge(1, 3, weight=0)\nG.add_edge(4, 5, weight=2)\nG.add_edge(4, 10, weight=1)\nG.add_edge(4, 8, weight=9)\nG.add_edge(9, 3, weight=4)\nG.add_edge(9, 0, weight=4)\nG.add_edge(9, 4, weight=1)\nG.add_edge(9, 7, weight=0)\nG.add_edge(6, 5, weight=7)\nG.add_edge(6, 13, weight=7)\nG.add_edge(6, 3, weight=1)\nG.add_edge(6, 8, weight=6)\nG.add_edge(6, 7, weight=6)\nG.add_edge(6, 4, weight=7)\nG.add_edge(0, 10, weight=2)\nG.add_edge(0, 11, weight=10)\nG.add_edge(10, 0, weight=4)\nG.add_edge(10, 7, weight=3)\nG.add_edge(10, 4, weight=6)\nG.add_edge(7, 9, weight=6)\nG.add_edge(7, 13, weight=2)\nG.add_edge(7, 10, weight=0)\nG.add_edge(8, 12, weight=9)\nG.add_edge(8, 4, weight=3)\nG.add_edge(8, 6, weight=3)\nG.add_edge(8, 1, weight=4)\nG.add_edge(8, 11, weight=10)\nG.add_edge(12, 9, weight=3)\nG.add_edge(12, 5, weight=6)\nG.add_edge(5, 0, weight=7)\nG.add_edge(5, 8, weight=2)\nG.add_edge(13, 11, weight=1)\nG.add_edge(13, 8, weight=10)\nG.add_edge(13, 4, weight=1)\nG.add_edge(3, 1, weight=5)\nG.add_edge(3, 10, weight=2)\nG.add_edge(3, 9, weight=0)\nG.add_edge(2, 12, weight=4)\nG.add_edge(2, 4, weight=8)\n\n# Calculate the maximum flow from node 10 to node 1\nmax_flow = nx.maximum_flow_value(G, 10, 1)\n\nprint(\"Maximum flow from node 10 to node 1:\", max_flow)\n```"}, {"id": 276, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(12, 10, weight=1)\nG.add_edge(12, 5, weight=5)\nG.add_edge(12, 1, weight=5)\nG.add_edge(10, 3, weight=5)\nG.add_edge(10, 11, weight=2)\nG.add_edge(10, 1, weight=9)\nG.add_edge(10, 6, weight=4)\nG.add_edge(5, 4, weight=8)\nG.add_edge(5, 1, weight=6)\nG.add_edge(5, 2, weight=7)\nG.add_edge(5, 12, weight=2)\nG.add_edge(5, 8, weight=0)\nG.add_edge(1, 2, weight=1)\nG.add_edge(1, 9, weight=6)\nG.add_edge(1, 5, weight=8)\nG.add_edge(1, 4, weight=10)\nG.add_edge(3, 7, weight=7)\nG.add_edge(3, 11, weight=6)\nG.add_edge(3, 1, weight=5)\nG.add_edge(3, 9, weight=9)\nG.add_edge(3, 10, weight=1)\nG.add_edge(11, 1, weight=2)\nG.add_edge(11, 2, weight=2)\nG.add_edge(11, 10, weight=5)\nG.add_edge(11, 7, weight=2)\nG.add_edge(11, 4, weight=8)\nG.add_edge(6, 11, weight=7)\nG.add_edge(6, 1, weight=4)\nG.add_edge(4, 1, weight=7)\nG.add_edge(4, 8, weight=3)\nG.add_edge(4, 3, weight=5)\nG.add_edge(4, 7, weight=6)\nG.add_edge(2, 12, weight=6)\nG.add_edge(2, 6, weight=7)\nG.add_edge(2, 9, weight=3)\nG.add_edge(9, 5, weight=8)\nG.add_edge(9, 7, weight=10)\nG.add_edge(9, 1, weight=7)\nG.add_edge(9, 8, weight=2)\nG.add_edge(8, 9, weight=6)\nG.add_edge(8, 5, weight=6)\nG.add_edge(7, 0, weight=3)\nG.add_edge(7, 12, weight=8)\nG.add_edge(7, 8, weight=7)\nG.add_edge(7, 10, weight=3)\nG.add_edge(0, 2, weight=3)\nG.add_edge(0, 10, weight=9)\nG.add_edge(0, 3, weight=6)\nG.add_edge(0, 11, weight=6)\n\n# Calculate the maximum flow from node 8 to node 9\nmax_flow = nx.maximum_flow_value(G, 8, 9)\n\nprint(\"Maximum flow from node 8 to node 9:\", max_flow)\n```"}, {"id": 277, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (3, 5, 9), (3, 7, 1), (3, 9, 1), (3, 10, 3),\n    (5, 7, 10), (5, 11, 6), (5, 6, 8), (5, 13, 7), (5, 1, 8), (5, 12, 4),\n    (7, 8, 1), (7, 13, 6), (7, 1, 6), (7, 4, 5),\n    (9, 6, 9), (9, 8, 7), (9, 3, 7), (9, 7, 2), (9, 4, 0),\n    (10, 4, 4), (10, 7, 2), (10, 11, 8), (10, 9, 8),\n    (11, 6, 7), (11, 2, 7), (11, 13, 8), (11, 12, 5), (11, 4, 1), (11, 5, 4), (11, 7, 5),\n    (6, 13, 4), (6, 1, 1), (6, 10, 10), (6, 0, 7), (6, 5, 8), (6, 9, 9),\n    (13, 12, 7), (13, 4, 3), (13, 9, 5), (13, 6, 6), (13, 8, 10), (13, 7, 0), (13, 5, 0),\n    (1, 12, 2), (1, 5, 10), (1, 7, 10), (1, 6, 2),\n    (12, 4, 10), (12, 7, 6), (12, 11, 9), (12, 13, 4), (12, 1, 4),\n    (8, 13, 6), (8, 10, 10), (8, 5, 5), (8, 11, 10), (8, 7, 0), (8, 9, 0),\n    (4, 3, 7), (4, 9, 6), (4, 2, 8), (4, 13, 3), (4, 7, 0),\n    (0, 7, 9), (0, 13, 1), (0, 10, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 8\nmax_flow = nx.maximum_flow_value(G, 7, 8)\n\nprint(\"Maximum flow from node 7 to node 8:\", max_flow)\n```"}, {"id": 278, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 4, 9), (10, 1, 3), (10, 3, 9), (10, 6, 0),\n    (4, 8, 6), (4, 14, 5), (4, 5, 0),\n    (1, 3, 3), (1, 8, 8), (1, 9, 10), (1, 5, 3),\n    (3, 11, 8), (3, 13, 1), (3, 9, 7), (3, 7, 9), (3, 14, 3), (3, 6, 2), (3, 10, 0), (3, 2, 0),\n    (8, 13, 1), (8, 9, 10), (8, 10, 10), (8, 7, 5), (8, 1, 8), (8, 5, 0), (8, 4, 0),\n    (14, 4, 6), (14, 6, 10), (14, 0, 7), (14, 2, 7), (14, 10, 10),\n    (9, 0, 7), (9, 2, 1), (9, 10, 10), (9, 7, 5), (9, 5, 6), (9, 1, 1), (9, 3, 9), (9, 8, 0),\n    (5, 6, 3), (5, 8, 2), (5, 4, 8),\n    (11, 9, 6), (11, 0, 8), (11, 2, 3), (11, 10, 6), (11, 7, 7), (11, 14, 4), (11, 1, 6), (11, 12, 8), (11, 3, 9),\n    (13, 8, 1),\n    (7, 12, 10), (7, 11, 2), (7, 8, 1), (7, 9, 1), (7, 6, 0), (7, 3, 0),\n    (6, 10, 5), (6, 7, 1), (6, 14, 10), (6, 5, 3), (6, 1, 3),\n    (12, 3, 2), (12, 13, 6), (12, 9, 10), (12, 10, 1), (12, 7, 1), (12, 5, 8), (12, 0, 0),\n    (0, 12, 6), (0, 6, 4), (0, 8, 5), (0, 14, 0),\n    (2, 10, 4), (2, 4, 5), (2, 5, 1), (2, 1, 10), (2, 12, 7), (2, 3, 10), (2, 8, 1), (2, 0, 9), (2, 14, 0)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow_value(G, 5, 7)\nprint(max_flow)\n```"}, {"id": 279, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 2, 1), (9, 5, 3), (9, 0, 2), (9, 1, 10),\n    (2, 3, 10), (2, 5, 6), (2, 1, 9), (2, 9, 0), (2, 8, 0),\n    (5, 1, 5), (5, 8, 6), (5, 9, 7), (5, 3, 2),\n    (0, 1, 4), (0, 9, 1), (0, 4, 8),\n    (1, 3, 9), (1, 0, 3), (1, 9, 0),\n    (3, 5, 5), (3, 2, 1), (3, 1, 0),\n    (8, 6, 3), (8, 2, 6), (8, 7, 10), (8, 3, 6), (8, 1, 7), (8, 5, 0), (8, 4, 0),\n    (4, 1, 6), (4, 8, 1), (4, 6, 5), (4, 0, 0),\n    (6, 3, 7), (6, 5, 7), (6, 0, 10), (6, 8, 4), (6, 4, 0),\n    (7, 4, 7), (7, 0, 8), (7, 8, 7)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 2\nmax_flow = nx.maximum_flow_value(G, 9, 2)\n\nprint(\"Maximum flow from node 9 to node 2:\", max_flow)\n```"}, {"id": 280, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 7, 2), (5, 4, 7), (5, 8, 1), (5, 1, 3),\n    (7, 3, 10), (7, 8, 7), (7, 9, 7), (7, 5, 0),\n    (4, 6, 3), (4, 8, 3), (4, 5, 5), (4, 9, 4),\n    (8, 5, 1), (8, 0, 8), (8, 2, 9), (8, 4, 9), (8, 6, 7), (8, 3, 5), (8, 7, 0), (8, 9, 0),\n    (1, 3, 7), (1, 5, 0),\n    (3, 8, 5), (3, 1, 9), (3, 5, 7), (3, 6, 4),\n    (9, 6, 10), (9, 3, 10), (9, 8, 9), (9, 1, 10), (9, 5, 10), (9, 2, 7), (9, 4, 0),\n    (6, 1, 4),\n    (0, 7, 2), (0, 6, 9), (0, 8, 4), (0, 1, 5), (0, 5, 3),\n    (2, 7, 8), (2, 6, 2), (2, 3, 3), (2, 1, 10), (2, 5, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 8\nmax_flow = nx.maximum_flow_value(G, 5, 8)\n\nprint(\"Maximum flow from node 5 to node 8:\", max_flow)\n```"}, {"id": 281, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(3, 1, weight=5)\nG.add_edge(3, 9, weight=4)\nG.add_edge(3, 8, weight=2)\nG.add_edge(3, 4, weight=0)\nG.add_edge(1, 9, weight=3)\nG.add_edge(1, 2, weight=1)\nG.add_edge(1, 3, weight=5)\nG.add_edge(9, 8, weight=2)\nG.add_edge(9, 5, weight=5)\nG.add_edge(9, 10, weight=3)\nG.add_edge(9, 3, weight=7)\nG.add_edge(9, 11, weight=0)\nG.add_edge(8, 5, weight=10)\nG.add_edge(8, 9, weight=7)\nG.add_edge(2, 3, weight=3)\nG.add_edge(2, 1, weight=7)\nG.add_edge(2, 6, weight=9)\nG.add_edge(2, 10, weight=2)\nG.add_edge(2, 7, weight=0)\nG.add_edge(5, 3, weight=9)\nG.add_edge(5, 6, weight=7)\nG.add_edge(5, 9, weight=1)\nG.add_edge(5, 11, weight=0)\nG.add_edge(5, 7, weight=0)\nG.add_edge(10, 4, weight=1)\nG.add_edge(10, 6, weight=4)\nG.add_edge(10, 0, weight=7)\nG.add_edge(7, 8, weight=5)\nG.add_edge(7, 5, weight=3)\nG.add_edge(7, 10, weight=6)\nG.add_edge(7, 2, weight=10)\nG.add_edge(7, 4, weight=2)\nG.add_edge(7, 11, weight=0)\nG.add_edge(4, 3, weight=5)\nG.add_edge(4, 7, weight=3)\nG.add_edge(4, 9, weight=3)\nG.add_edge(4, 8, weight=10)\nG.add_edge(4, 10, weight=8)\nG.add_edge(4, 11, weight=0)\nG.add_edge(6, 5, weight=10)\nG.add_edge(6, 7, weight=8)\nG.add_edge(6, 10, weight=0)\nG.add_edge(6, 2, weight=0)\nG.add_edge(0, 8, weight=9)\nG.add_edge(11, 4, weight=8)\nG.add_edge(11, 7, weight=2)\nG.add_edge(11, 9, weight=7)\nG.add_edge(11, 5, weight=2)\n\n# Calculate the maximum flow from node 11 to node 6\nmax_flow = nx.maximum_flow_value(G, 11, 6)\n\nprint(\"Maximum flow from node 11 to node 6:\", max_flow)\n```"}, {"id": 282, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 11, capacity=6)\nG.add_edge(8, 6, capacity=1)\nG.add_edge(11, 8, capacity=5)\nG.add_edge(6, 1, capacity=5)\nG.add_edge(6, 8, capacity=0)\nG.add_edge(1, 4, capacity=7)\nG.add_edge(1, 6, capacity=10)\nG.add_edge(1, 3, capacity=2)\nG.add_edge(4, 6, capacity=9)\nG.add_edge(4, 10, capacity=6)\nG.add_edge(4, 0, capacity=5)\nG.add_edge(4, 9, capacity=2)\nG.add_edge(4, 1, capacity=0)\nG.add_edge(10, 9, capacity=3)\nG.add_edge(10, 5, capacity=2)\nG.add_edge(10, 11, capacity=5)\nG.add_edge(10, 4, capacity=0)\nG.add_edge(0, 1, capacity=7)\nG.add_edge(9, 5, capacity=2)\nG.add_edge(9, 0, capacity=1)\nG.add_edge(5, 1, capacity=7)\nG.add_edge(5, 10, capacity=1)\nG.add_edge(5, 8, capacity=3)\nG.add_edge(5, 7, capacity=2)\nG.add_edge(2, 7, capacity=5)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(7, 5, capacity=5)\nG.add_edge(7, 11, capacity=5)\nG.add_edge(7, 10, capacity=1)\nG.add_edge(7, 4, capacity=3)\nG.add_edge(3, 0, capacity=9)\nG.add_edge(3, 8, capacity=2)\nG.add_edge(3, 2, capacity=8)\n\n# Calculate the maximum flow from node 8 to node 5\nmax_flow = nx.maximum_flow(G, 8, 5)[0]\n\nprint(\"Maximum flow from node 8 to node 5:\", max_flow)\n```"}, {"id": 283, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(7, 6, capacity=3)\nG.add_edge(7, 1, capacity=3)\nG.add_edge(6, 5, capacity=5)\nG.add_edge(3, 5, capacity=10)\nG.add_edge(3, 4, capacity=1)\nG.add_edge(5, 3, capacity=4)\nG.add_edge(5, 2, capacity=7)\nG.add_edge(1, 2, capacity=7)\nG.add_edge(1, 7, capacity=0)\nG.add_edge(2, 5, capacity=4)\nG.add_edge(2, 0, capacity=10)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(2, 1, capacity=0)\nG.add_edge(4, 5, capacity=1)\n\n# Calculate the maximum flow from node 7 to node 5\nmax_flow = nx.maximum_flow(G, 7, 5)[0]\n\nprint(max_flow)\n```"}, {"id": 284, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 10, 6), (7, 5, 9), (7, 3, 6), (7, 4, 10), (7, 2, 0), (7, 8, 0), (7, 6, 0),\n    (10, 5, 6), (10, 0, 1), (10, 7, 4), (10, 9, 0), (10, 11, 0), (10, 6, 0),\n    (5, 2, 8), (5, 9, 8), (5, 8, 2), (5, 11, 10), (5, 0, 7), (5, 6, 9),\n    (3, 8, 2), (3, 7, 7), (3, 10, 10), (3, 6, 6), (3, 5, 6),\n    (4, 0, 8), (4, 7, 7), (4, 5, 5), (4, 9, 5), (4, 8, 5), (4, 2, 0), (4, 6, 0),\n    (0, 5, 6), (0, 9, 2), (0, 8, 2),\n    (2, 9, 7), (2, 4, 8), (2, 7, 6), (2, 5, 10), (2, 3, 10),\n    (9, 8, 7), (9, 10, 2), (9, 6, 5), (9, 2, 2), (9, 5, 0), (9, 11, 0),\n    (8, 7, 10), (8, 5, 10), (8, 9, 0), (8, 0, 0),\n    (11, 10, 2), (11, 6, 6), (11, 9, 5), (11, 5, 0),\n    (6, 9, 5), (6, 4, 1), (6, 7, 6), (6, 10, 1), (6, 5, 0),\n    (1, 11, 10), (1, 10, 4), (1, 6, 4)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 5 to node 7\nmax_flow = nx.maximum_flow_value(G, 5, 7)\n\nprint(\"Maximum flow from node 5 to node 7:\", max_flow)\n```"}, {"id": 285, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 10, capacity=3)\nG.add_edge(3, 6, capacity=2)\nG.add_edge(10, 13, capacity=2)\nG.add_edge(10, 2, capacity=4)\nG.add_edge(10, 9, capacity=4)\nG.add_edge(10, 5, capacity=5)\nG.add_edge(6, 7, capacity=10)\nG.add_edge(6, 3, capacity=4)\nG.add_edge(6, 10, capacity=8)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(13, 6, capacity=2)\nG.add_edge(13, 14, capacity=10)\nG.add_edge(13, 8, capacity=8)\nG.add_edge(13, 11, capacity=2)\nG.add_edge(13, 9, capacity=5)\nG.add_edge(13, 3, capacity=4)\nG.add_edge(13, 1, capacity=10)\nG.add_edge(13, 10, capacity=0)\nG.add_edge(13, 12, capacity=0)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 10, capacity=2)\nG.add_edge(2, 1, capacity=3)\nG.add_edge(2, 11, capacity=0)\nG.add_edge(9, 11, capacity=9)\nG.add_edge(5, 3, capacity=6)\nG.add_edge(5, 13, capacity=6)\nG.add_edge(5, 4, capacity=6)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(5, 7, capacity=1)\nG.add_edge(5, 14, capacity=4)\nG.add_edge(7, 12, capacity=9)\nG.add_edge(7, 4, capacity=3)\nG.add_edge(7, 6, capacity=8)\nG.add_edge(14, 12, capacity=8)\nG.add_edge(14, 8, capacity=4)\nG.add_edge(14, 10, capacity=8)\nG.add_edge(14, 1, capacity=8)\nG.add_edge(8, 9, capacity=3)\nG.add_edge(8, 3, capacity=9)\nG.add_edge(8, 13, capacity=3)\nG.add_edge(8, 0, capacity=6)\nG.add_edge(11, 9, capacity=5)\nG.add_edge(11, 2, capacity=8)\nG.add_edge(1, 11, capacity=9)\nG.add_edge(4, 7, capacity=5)\nG.add_edge(4, 9, capacity=5)\nG.add_edge(4, 5, capacity=4)\nG.add_edge(4, 1, capacity=1)\nG.add_edge(12, 11, capacity=10)\nG.add_edge(12, 3, capacity=8)\nG.add_edge(12, 10, capacity=3)\nG.add_edge(12, 13, capacity=9)\nG.add_edge(12, 7, capacity=0)\nG.add_edge(0, 5, capacity=7)\nG.add_edge(0, 4, capacity=7)\nG.add_edge(0, 12, capacity=4)\n\n# Calculate the maximum flow from node 11 to node 13\nmax_flow = nx.maximum_flow_value(G, 11, 13)\n\nprint(\"Maximum flow from node 11 to node 13:\", max_flow)\n```"}, {"id": 286, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 3, capacity=4)\nG.add_edge(9, 8, capacity=4)\nG.add_edge(9, 2, capacity=6)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(3, 6, capacity=5)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 5, capacity=4)\nG.add_edge(3, 9, capacity=7)\nG.add_edge(8, 0, capacity=4)\nG.add_edge(8, 7, capacity=1)\nG.add_edge(8, 9, capacity=10)\nG.add_edge(2, 4, capacity=7)\nG.add_edge(2, 3, capacity=2)\nG.add_edge(2, 8, capacity=6)\nG.add_edge(2, 0, capacity=1)\nG.add_edge(1, 9, capacity=6)\nG.add_edge(1, 3, capacity=3)\nG.add_edge(1, 5, capacity=0)\nG.add_edge(6, 7, capacity=3)\nG.add_edge(6, 5, capacity=6)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(4, 9, capacity=8)\nG.add_edge(4, 3, capacity=2)\nG.add_edge(4, 0, capacity=2)\nG.add_edge(5, 1, capacity=7)\nG.add_edge(5, 0, capacity=8)\nG.add_edge(5, 7, capacity=3)\nG.add_edge(5, 4, capacity=1)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(0, 7, capacity=10)\nG.add_edge(0, 4, capacity=5)\nG.add_edge(0, 5, capacity=6)\nG.add_edge(0, 3, capacity=7)\nG.add_edge(0, 8, capacity=1)\nG.add_edge(7, 4, capacity=2)\nG.add_edge(7, 9, capacity=10)\nG.add_edge(7, 3, capacity=3)\nG.add_edge(7, 2, capacity=7)\n\n# Calculate the maximum flow from node 3 to node 1\nmax_flow = nx.maximum_flow_value(G, 3, 1)\n\nprint(max_flow)\n```"}, {"id": 287, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(2, 4, capacity=8)\nG.add_edge(2, 1, capacity=5)\nG.add_edge(2, 5, capacity=8)\nG.add_edge(2, 6, capacity=6)\nG.add_edge(4, 2, capacity=6)\nG.add_edge(4, 8, capacity=0)\nG.add_edge(1, 9, capacity=9)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(1, 2, capacity=10)\nG.add_edge(1, 0, capacity=9)\nG.add_edge(5, 6, capacity=4)\nG.add_edge(5, 3, capacity=9)\nG.add_edge(5, 8, capacity=3)\nG.add_edge(6, 0, capacity=6)\nG.add_edge(6, 8, capacity=1)\nG.add_edge(6, 7, capacity=3)\nG.add_edge(6, 5, capacity=7)\nG.add_edge(6, 3, capacity=0)\nG.add_edge(9, 5, capacity=1)\nG.add_edge(9, 2, capacity=9)\nG.add_edge(9, 0, capacity=7)\nG.add_edge(9, 1, capacity=6)\nG.add_edge(9, 8, capacity=0)\nG.add_edge(3, 0, capacity=1)\nG.add_edge(3, 8, capacity=3)\nG.add_edge(3, 1, capacity=5)\nG.add_edge(3, 5, capacity=6)\nG.add_edge(3, 6, capacity=4)\nG.add_edge(0, 7, capacity=10)\nG.add_edge(0, 3, capacity=3)\nG.add_edge(0, 1, capacity=0)\nG.add_edge(0, 6, capacity=0)\nG.add_edge(0, 9, capacity=0)\nG.add_edge(8, 7, capacity=9)\nG.add_edge(8, 9, capacity=1)\nG.add_edge(8, 5, capacity=4)\nG.add_edge(8, 4, capacity=9)\nG.add_edge(8, 3, capacity=0)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(7, 6, capacity=8)\n\n# Calculate the maximum flow from node 3 to node 0\nmax_flow = nx.maximum_flow(G, 3, 0)[0]\n\nprint(\"Maximum flow from node 3 to node 0:\", max_flow)\n```"}, {"id": 288, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (5, 11, 1), (5, 10, 10), (5, 6, 3), (5, 1, 1), (5, 12, 0),\n    (11, 7, 10), (11, 0, 7), (11, 1, 9),\n    (10, 9, 3), (10, 8, 6), (10, 4, 1), (10, 12, 2), (10, 1, 1), (10, 3, 1), (10, 5, 6), (10, 2, 3),\n    (6, 12, 5), (6, 0, 8), (6, 3, 10), (6, 5, 3), (6, 2, 6), (6, 11, 1), (6, 7, 7), (6, 9, 0),\n    (1, 2, 3), (1, 10, 9), (1, 4, 7), (1, 0, 3),\n    (7, 12, 6), (7, 0, 1),\n    (0, 1, 10), (0, 3, 8), (0, 2, 3), (0, 8, 6), (0, 12, 3),\n    (9, 8, 4), (9, 4, 8), (9, 12, 5), (9, 1, 8), (9, 10, 5), (9, 6, 2),\n    (8, 0, 2), (8, 9, 0),\n    (4, 2, 2), (4, 10, 3), (4, 7, 2), (4, 9, 0),\n    (12, 0, 1), (12, 5, 8), (12, 2, 10), (12, 11, 1), (12, 10, 8), (12, 6, 2), (12, 8, 5), (12, 4, 2), (12, 9, 0),\n    (3, 2, 6), (3, 11, 4), (3, 4, 10), (3, 12, 1),\n    (2, 11, 6), (2, 7, 2), (2, 9, 1), (2, 8, 4), (2, 4, 6), (2, 0, 9)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 9 to node 5\nmax_flow = nx.maximum_flow_value(G, 9, 5)\n\nprint(\"Maximum flow from node 9 to node 5:\", max_flow)\n```"}, {"id": 289, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(9, 6, capacity=5)\nG.add_edge(9, 10, capacity=9)\nG.add_edge(9, 4, capacity=6)\nG.add_edge(9, 5, capacity=1)\nG.add_edge(6, 8, capacity=8)\nG.add_edge(6, 13, capacity=10)\nG.add_edge(6, 7, capacity=0)\nG.add_edge(10, 0, capacity=4)\nG.add_edge(10, 2, capacity=9)\nG.add_edge(10, 13, capacity=3)\nG.add_edge(10, 12, capacity=4)\nG.add_edge(10, 1, capacity=3)\nG.add_edge(10, 7, capacity=1)\nG.add_edge(4, 12, capacity=2)\nG.add_edge(4, 1, capacity=3)\nG.add_edge(4, 3, capacity=10)\nG.add_edge(4, 6, capacity=3)\nG.add_edge(4, 11, capacity=8)\nG.add_edge(5, 12, capacity=3)\nG.add_edge(8, 5, capacity=5)\nG.add_edge(8, 7, capacity=2)\nG.add_edge(8, 10, capacity=9)\nG.add_edge(8, 11, capacity=9)\nG.add_edge(8, 14, capacity=0)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(8, 6, capacity=0)\nG.add_edge(13, 12, capacity=10)\nG.add_edge(13, 14, capacity=7)\nG.add_edge(0, 12, capacity=9)\nG.add_edge(0, 11, capacity=3)\nG.add_edge(2, 8, capacity=4)\nG.add_edge(2, 5, capacity=2)\nG.add_edge(2, 12, capacity=0)\nG.add_edge(2, 11, capacity=0)\nG.add_edge(12, 1, capacity=8)\nG.add_edge(12, 10, capacity=9)\nG.add_edge(12, 14, capacity=10)\nG.add_edge(12, 2, capacity=7)\nG.add_edge(12, 13, capacity=3)\nG.add_edge(12, 0, capacity=0)\nG.add_edge(1, 14, capacity=4)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 10, capacity=2)\nG.add_edge(7, 4, capacity=1)\nG.add_edge(7, 14, capacity=7)\nG.add_edge(7, 11, capacity=0)\nG.add_edge(3, 6, capacity=5)\nG.add_edge(3, 4, capacity=5)\nG.add_edge(3, 7, capacity=3)\nG.add_edge(11, 5, capacity=8)\nG.add_edge(11, 2, capacity=5)\nG.add_edge(11, 13, capacity=3)\nG.add_edge(11, 7, capacity=3)\nG.add_edge(11, 0, capacity=0)\nG.add_edge(14, 2, capacity=9)\nG.add_edge(14, 6, capacity=3)\nG.add_edge(14, 8, capacity=7)\nG.add_edge(14, 5, capacity=7)\nG.add_edge(14, 12, capacity=0)\n\n# Calculate the maximum flow from node 0 to node 8\nmax_flow = nx.maximum_flow(G, 0, 8)[0]\n\nprint(max_flow)\n```"}, {"id": 290, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (10, 3, 10), (10, 4, 7), (10, 5, 7), (10, 11, 2),\n    (3, 8, 4), (3, 6, 8), (3, 2, 0),\n    (4, 9, 3),\n    (5, 0, 10), (5, 3, 1), (5, 4, 5),\n    (11, 2, 3),\n    (8, 13, 9), (8, 2, 2), (8, 3, 7), (8, 4, 10),\n    (6, 0, 4), (6, 2, 3), (6, 8, 3), (6, 3, 0),\n    (9, 8, 2), (9, 12, 5), (9, 5, 9), (9, 11, 4), (9, 1, 9),\n    (0, 2, 4), (0, 7, 2), (0, 1, 0), (0, 6, 0),\n    (2, 3, 4), (2, 11, 2), (2, 1, 4),\n    (1, 3, 5), (1, 5, 9), (1, 13, 8), (1, 0, 9), (1, 2, 0),\n    (13, 10, 7), (13, 6, 5)\n]\n\nfor u, v, weight in edges:\n    G.add_edge(u, v, capacity=weight)\n\n# Calculate the maximum flow from node 2 to node 0\nmax_flow = nx.maximum_flow_value(G, 2, 0)\n\nprint(\"Maximum flow from node 2 to node 0:\", max_flow)\n```"}, {"id": 291, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (9, 5, 8), (9, 2, 10), (9, 0, 9), (9, 6, 6), (9, 4, 4), (9, 8, 0),\n    (5, 7, 10), (5, 1, 10), (5, 8, 9), (5, 3, 4),\n    (2, 6, 10), (2, 4, 6), (2, 7, 8), (2, 3, 2), (2, 9, 6), (2, 8, 0),\n    (0, 8, 9), (0, 9, 7), (0, 5, 8), (0, 2, 5), (0, 6, 0), (0, 1, 0),\n    (6, 7, 8), (6, 5, 2), (6, 0, 10), (6, 2, 0),\n    (4, 7, 5), (4, 9, 8), (4, 2, 3), (4, 6, 10), (4, 8, 0),\n    (7, 3, 7), (7, 5, 7), (7, 2, 4), (7, 4, 6),\n    (1, 8, 5), (1, 0, 1), (1, 5, 0),\n    (8, 9, 6), (8, 2, 10), (8, 4, 4),\n    (3, 2, 9), (3, 6, 10), (3, 7, 1), (3, 8, 6)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 8 to node 0\nmax_flow = nx.maximum_flow_value(G, 8, 0)\n\nprint(\"Maximum flow from node 8 to node 0:\", max_flow)\n```"}, {"id": 292, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(8, 0, capacity=10)\nG.add_edge(8, 9, capacity=9)\nG.add_edge(8, 6, capacity=2)\nG.add_edge(8, 2, capacity=0)\nG.add_edge(0, 11, capacity=6)\nG.add_edge(0, 3, capacity=6)\nG.add_edge(0, 8, capacity=0)\nG.add_edge(9, 11, capacity=1)\nG.add_edge(6, 5, capacity=5)\nG.add_edge(6, 8, capacity=8)\nG.add_edge(6, 9, capacity=1)\nG.add_edge(6, 3, capacity=4)\nG.add_edge(6, 2, capacity=0)\nG.add_edge(11, 4, capacity=8)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 4, capacity=3)\nG.add_edge(3, 12, capacity=6)\nG.add_edge(3, 11, capacity=9)\nG.add_edge(3, 6, capacity=0)\nG.add_edge(3, 0, capacity=0)\nG.add_edge(5, 12, capacity=2)\nG.add_edge(5, 0, capacity=10)\nG.add_edge(5, 11, capacity=4)\nG.add_edge(5, 6, capacity=0)\nG.add_edge(5, 10, capacity=0)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(4, 9, capacity=2)\nG.add_edge(4, 3, capacity=5)\nG.add_edge(4, 2, capacity=0)\nG.add_edge(12, 0, capacity=9)\nG.add_edge(12, 10, capacity=7)\nG.add_edge(12, 4, capacity=10)\nG.add_edge(12, 2, capacity=2)\nG.add_edge(12, 3, capacity=0)\nG.add_edge(1, 2, capacity=2)\nG.add_edge(2, 12, capacity=5)\nG.add_edge(2, 8, capacity=1)\nG.add_edge(2, 6, capacity=9)\nG.add_edge(2, 4, capacity=8)\nG.add_edge(10, 5, capacity=9)\nG.add_edge(10, 11, capacity=1)\nG.add_edge(10, 12, capacity=0)\nG.add_edge(7, 5, capacity=7)\nG.add_edge(7, 4, capacity=2)\n\n# Calculate the maximum flow from node 2 to node 5\nmax_flow = nx.maximum_flow_value(G, 2, 5)\n\nprint(max_flow)\n```"}, {"id": 293, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 7, capacity=1)\nG.add_edge(4, 10, capacity=0)\nG.add_edge(7, 3, capacity=4)\nG.add_edge(3, 0, capacity=2)\nG.add_edge(3, 5, capacity=8)\nG.add_edge(3, 1, capacity=6)\nG.add_edge(3, 9, capacity=1)\nG.add_edge(3, 11, capacity=9)\nG.add_edge(3, 13, capacity=4)\nG.add_edge(0, 2, capacity=2)\nG.add_edge(0, 11, capacity=10)\nG.add_edge(2, 0, capacity=4)\nG.add_edge(11, 3, capacity=3)\nG.add_edge(11, 12, capacity=7)\nG.add_edge(1, 12, capacity=4)\nG.add_edge(1, 3, capacity=5)\nG.add_edge(9, 1, capacity=7)\nG.add_edge(9, 10, capacity=3)\nG.add_edge(13, 6, capacity=1)\nG.add_edge(13, 0, capacity=7)\nG.add_edge(13, 5, capacity=10)\nG.add_edge(13, 10, capacity=2)\nG.add_edge(13, 12, capacity=7)\nG.add_edge(13, 9, capacity=2)\nG.add_edge(10, 13, capacity=7)\nG.add_edge(10, 3, capacity=6)\nG.add_edge(10, 4, capacity=3)\nG.add_edge(10, 9, capacity=0)\nG.add_edge(6, 5, capacity=2)\nG.add_edge(6, 10, capacity=2)\nG.add_edge(6, 8, capacity=2)\nG.add_edge(6, 11, capacity=6)\nG.add_edge(8, 11, capacity=1)\nG.add_edge(8, 13, capacity=1)\nG.add_edge(8, 3, capacity=4)\nG.add_edge(8, 0, capacity=9)\nG.add_edge(8, 5, capacity=8)\n\n# Calculate the maximum flow from node 9 to node 4\nmax_flow = nx.maximum_flow(G, 9, 4)[0]\n\nprint(max_flow)\n```"}, {"id": 294, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(7, 2, weight=1)\nG.add_edge(7, 6, weight=1)\nG.add_edge(7, 9, weight=4)\nG.add_edge(2, 10, weight=8)\nG.add_edge(2, 7, weight=5)\nG.add_edge(6, 1, weight=9)\nG.add_edge(6, 9, weight=5)\nG.add_edge(6, 10, weight=0)\nG.add_edge(6, 7, weight=0)\nG.add_edge(9, 2, weight=7)\nG.add_edge(9, 6, weight=7)\nG.add_edge(9, 4, weight=5)\nG.add_edge(9, 7, weight=0)\nG.add_edge(10, 0, weight=3)\nG.add_edge(10, 6, weight=10)\nG.add_edge(10, 4, weight=1)\nG.add_edge(10, 1, weight=6)\nG.add_edge(10, 11, weight=2)\nG.add_edge(10, 2, weight=0)\nG.add_edge(1, 8, weight=3)\nG.add_edge(1, 5, weight=6)\nG.add_edge(1, 4, weight=1)\nG.add_edge(4, 9, weight=3)\nG.add_edge(4, 2, weight=9)\nG.add_edge(4, 10, weight=10)\nG.add_edge(4, 6, weight=6)\nG.add_edge(4, 5, weight=10)\nG.add_edge(11, 6, weight=1)\nG.add_edge(11, 1, weight=1)\nG.add_edge(11, 9, weight=8)\nG.add_edge(11, 7, weight=6)\nG.add_edge(8, 0, weight=9)\nG.add_edge(8, 4, weight=1)\nG.add_edge(8, 1, weight=6)\nG.add_edge(8, 9, weight=2)\nG.add_edge(8, 11, weight=7)\nG.add_edge(8, 2, weight=1)\nG.add_edge(5, 4, weight=6)\nG.add_edge(5, 7, weight=8)\nG.add_edge(5, 8, weight=7)\nG.add_edge(5, 10, weight=1)\nG.add_edge(5, 0, weight=5)\nG.add_edge(5, 6, weight=1)\nG.add_edge(0, 3, weight=5)\nG.add_edge(0, 4, weight=8)\nG.add_edge(0, 9, weight=3)\nG.add_edge(0, 2, weight=2)\nG.add_edge(0, 8, weight=2)\nG.add_edge(3, 7, weight=2)\nG.add_edge(3, 11, weight=4)\n\n# Calculate the maximum flow from node 2 to node 6\nmax_flow = nx.maximum_flow_value(G, 2, 6)\n\nprint(\"Maximum flow from node 2 to node 6:\", max_flow)\n```"}, {"id": 295, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (7, 8, 9), (7, 10, 9), (7, 1, 9), (7, 9, 2), (7, 2, 2),\n    (8, 7, 3),\n    (10, 9, 7), (10, 2, 5), (10, 5, 1), (10, 0, 10), (10, 7, 0),\n    (1, 6, 5), (1, 9, 7), (1, 2, 5), (1, 7, 10), (1, 8, 5),\n    (9, 3, 8), (9, 0, 10), (9, 6, 3), (9, 7, 0), (9, 10, 0),\n    (2, 0, 4), (2, 1, 10), (2, 6, 6),\n    (5, 3, 10), (5, 7, 6), (5, 8, 4), (5, 10, 9), (5, 1, 8), (5, 9, 9),\n    (0, 6, 6), (0, 7, 10),\n    (6, 9, 9), (6, 2, 9), (6, 0, 9),\n    (3, 6, 4), (3, 9, 4), (3, 5, 9),\n    (4, 5, 3), (4, 7, 3)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 7 to node 3\nmax_flow = nx.maximum_flow(G, 7, 3)[0]\n\nprint(\"Maximum flow from node 7 to node 3:\", max_flow)\n```"}, {"id": 296, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(4, 11, capacity=3)\nG.add_edge(4, 6, capacity=6)\nG.add_edge(11, 10, capacity=4)\nG.add_edge(11, 7, capacity=10)\nG.add_edge(11, 2, capacity=8)\nG.add_edge(6, 3, capacity=9)\nG.add_edge(6, 9, capacity=0)\nG.add_edge(10, 8, capacity=5)\nG.add_edge(10, 7, capacity=4)\nG.add_edge(7, 6, capacity=6)\nG.add_edge(7, 11, capacity=8)\nG.add_edge(2, 9, capacity=2)\nG.add_edge(3, 11, capacity=2)\nG.add_edge(3, 9, capacity=10)\nG.add_edge(1, 11, capacity=6)\nG.add_edge(1, 4, capacity=1)\nG.add_edge(8, 7, capacity=4)\nG.add_edge(8, 11, capacity=8)\nG.add_edge(9, 6, capacity=9)\nG.add_edge(5, 0, capacity=1)\nG.add_edge(5, 9, capacity=10)\nG.add_edge(0, 7, capacity=7)\nG.add_edge(0, 10, capacity=2)\nG.add_edge(0, 5, capacity=2)\n\n# Calculate the maximum flow from node 9 to node 6\nmax_flow = nx.maximum_flow(G, 9, 6)[0]\n\nprint(\"Maximum flow from node 9 to node 6:\", max_flow)\n```"}, {"id": 297, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with capacities\nG.add_edge(3, 8, capacity=1)\nG.add_edge(3, 5, capacity=1)\nG.add_edge(8, 1, capacity=9)\nG.add_edge(8, 0, capacity=10)\nG.add_edge(8, 9, capacity=2)\nG.add_edge(8, 3, capacity=9)\nG.add_edge(5, 9, capacity=3)\nG.add_edge(5, 3, capacity=0)\nG.add_edge(1, 0, capacity=7)\nG.add_edge(0, 7, capacity=6)\nG.add_edge(9, 4, capacity=5)\nG.add_edge(9, 8, capacity=0)\nG.add_edge(9, 5, capacity=0)\nG.add_edge(7, 3, capacity=7)\nG.add_edge(4, 9, capacity=1)\nG.add_edge(2, 6, capacity=10)\nG.add_edge(2, 9, capacity=5)\nG.add_edge(2, 3, capacity=4)\nG.add_edge(2, 7, capacity=3)\nG.add_edge(6, 9, capacity=10)\n\n# Calculate the maximum flow from node 8 to node 9\nmax_flow = nx.maximum_flow(G, 8, 9)[0]\n\nprint(\"Maximum flow from node 8 to node 9:\", max_flow)\n```"}, {"id": 298, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights (capacities)\nG.add_edge(2, 9, weight=4)\nG.add_edge(2, 4, weight=1)\nG.add_edge(2, 5, weight=8)\nG.add_edge(9, 10, weight=1)\nG.add_edge(9, 6, weight=10)\nG.add_edge(4, 5, weight=10)\nG.add_edge(4, 0, weight=9)\nG.add_edge(4, 3, weight=3)\nG.add_edge(4, 1, weight=10)\nG.add_edge(4, 9, weight=8)\nG.add_edge(4, 8, weight=8)\nG.add_edge(4, 6, weight=0)\nG.add_edge(5, 0, weight=9)\nG.add_edge(5, 1, weight=8)\nG.add_edge(5, 9, weight=6)\nG.add_edge(5, 10, weight=1)\nG.add_edge(10, 0, weight=3)\nG.add_edge(10, 6, weight=2)\nG.add_edge(10, 9, weight=4)\nG.add_edge(6, 8, weight=3)\nG.add_edge(6, 4, weight=5)\nG.add_edge(6, 10, weight=6)\nG.add_edge(6, 5, weight=5)\nG.add_edge(6, 7, weight=1)\nG.add_edge(6, 9, weight=0)\nG.add_edge(0, 3, weight=4)\nG.add_edge(0, 9, weight=7)\nG.add_edge(0, 8, weight=6)\nG.add_edge(0, 10, weight=10)\nG.add_edge(3, 9, weight=3)\nG.add_edge(3, 8, weight=6)\nG.add_edge(3, 10, weight=4)\nG.add_edge(1, 9, weight=7)\nG.add_edge(1, 4, weight=7)\nG.add_edge(1, 5, weight=8)\nG.add_edge(1, 0, weight=2)\nG.add_edge(1, 3, weight=1)\nG.add_edge(1, 7, weight=1)\nG.add_edge(8, 10, weight=5)\nG.add_edge(8, 5, weight=6)\nG.add_edge(8, 0, weight=2)\nG.add_edge(8, 3, weight=2)\nG.add_edge(8, 2, weight=9)\nG.add_edge(8, 9, weight=3)\nG.add_edge(8, 6, weight=0)\nG.add_edge(8, 4, weight=0)\nG.add_edge(8, 7, weight=0)\nG.add_edge(7, 1, weight=9)\nG.add_edge(7, 2, weight=3)\nG.add_edge(7, 8, weight=10)\nG.add_edge(7, 4, weight=10)\nG.add_edge(7, 10, weight=5)\nG.add_edge(7, 6, weight=0)\n\n# Calculate the maximum flow from node 9 to node 8\nmax_flow = nx.maximum_flow_value(G, 9, 8)\n\nprint(\"Maximum flow from node 9 to node 8:\", max_flow)\n```"}, {"id": 299, "code": "```python\nimport networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights\nedges = [\n    (8, 6, 7), (8, 2, 2), (8, 10, 0),\n    (6, 2, 9), (6, 4, 2), (6, 8, 0),\n    (2, 9, 9), (2, 0, 8), (2, 10, 0), (2, 8, 0), (2, 6, 0),\n    (4, 2, 2), (4, 8, 6), (4, 7, 5), (4, 5, 6), (4, 10, 8), (4, 6, 0),\n    (9, 5, 5), (9, 4, 9), (9, 2, 2), (9, 1, 7), (9, 10, 0),\n    (0, 7, 3), (0, 1, 3), (0, 9, 4), (0, 6, 5), (0, 2, 0),\n    (7, 1, 1), (7, 3, 9), (7, 5, 1), (7, 10, 5), (7, 4, 10), (7, 0, 10),\n    (1, 5, 5), (1, 6, 4), (1, 10, 0), (1, 3, 0), (1, 9, 0), (1, 0, 0), (1, 7, 0),\n    (3, 5, 8), (3, 10, 3), (3, 6, 7), (3, 7, 10), (3, 1, 6),\n    (5, 10, 8), (5, 1, 8), (5, 3, 0), (5, 4, 0), (5, 9, 0)\n]\n\nG.add_weighted_edges_from(edges)\n\n# Calculate the maximum flow from node 10 to node 1\nmax_flow = nx.maximum_flow(G, 10, 1)[0]\n\nprint(\"Maximum flow from node 10 to node 1:\", max_flow)\n```"}]