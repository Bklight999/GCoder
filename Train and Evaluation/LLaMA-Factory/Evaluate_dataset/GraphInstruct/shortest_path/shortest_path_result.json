[{"id": 0, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 4 (weight: 6), 2 (weight: 2), 1 (weight: 8).\nNode 4 is connected to nodes 8 (weight: 6), 2 (weight: 6), 3 (weight: 4).\nNode 2 is connected to nodes 8 (weight: 2), 4 (weight: 6), 5 (weight: 4), 0 (weight: 1), 6 (weight: 8), 1 (weight: 2).\nNode 1 is connected to nodes 8 (weight: 8), 2 (weight: 2), 5 (weight: 5), 0 (weight: 6), 6 (weight: 10), 7 (weight: 7), 3 (weight: 7).\nNode 3 is connected to nodes 4 (weight: 4), 1 (weight: 7).\nNode 5 is connected to nodes 2 (weight: 4), 1 (weight: 5).\nNode 0 is connected to nodes 2 (weight: 1), 1 (weight: 6).\nNode 6 is connected to nodes 2 (weight: 8), 1 (weight: 10).\nNode 7 is connected to node 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=5, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 1, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 1), 9 (weight: 3), 2 (weight: 10), 4 (weight: 10), 6 (weight: 1), 0 (weight: 1), 5 (weight: 7), 1 (weight: 9).\nNode 3 is connected to node 8 (weight: 1).\nNode 9 is connected to node 8 (weight: 3).\nNode 2 is connected to node 8 (weight: 10).\nNode 4 is connected to node 8 (weight: 10).\nNode 6 is connected to nodes 8 (weight: 1), 7 (weight: 9).\nNode 0 is connected to node 8 (weight: 1).\nNode 5 is connected to node 8 (weight: 7).\nNode 1 is connected to node 8 (weight: 9).\nNode 7 is connected to node 6 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=9, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 2, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 3), 3 (weight: 8), 5 (weight: 3), 6 (weight: 6), 10 (weight: 8), 0 (weight: 10), 8 (weight: 5), 7 (weight: 10).\nNode 4 is connected to nodes 2 (weight: 3), 3 (weight: 10), 5 (weight: 4), 6 (weight: 1), 9 (weight: 3), 1 (weight: 4), 10 (weight: 1), 0 (weight: 8), 8 (weight: 10), 7 (weight: 3).\nNode 3 is connected to nodes 2 (weight: 8), 4 (weight: 10), 5 (weight: 2), 6 (weight: 9), 9 (weight: 1), 0 (weight: 10), 8 (weight: 5), 7 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 3), 4 (weight: 4), 3 (weight: 2), 6 (weight: 8), 9 (weight: 10), 10 (weight: 9), 7 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 6), 4 (weight: 1), 3 (weight: 9), 5 (weight: 8), 9 (weight: 3), 1 (weight: 1), 10 (weight: 2), 0 (weight: 4), 8 (weight: 9), 7 (weight: 5).\nNode 10 is connected to nodes 2 (weight: 8), 4 (weight: 1), 5 (weight: 9), 6 (weight: 2), 9 (weight: 2), 1 (weight: 7), 8 (weight: 10), 7 (weight: 1).\nNode 0 is connected to nodes 2 (weight: 10), 4 (weight: 8), 3 (weight: 10), 6 (weight: 4), 1 (weight: 3), 8 (weight: 4).\nNode 8 is connected to nodes 2 (weight: 5), 4 (weight: 10), 3 (weight: 5), 6 (weight: 9), 10 (weight: 10), 0 (weight: 4), 9 (weight: 7), 1 (weight: 9), 7 (weight: 1).\nNode 7 is connected to nodes 2 (weight: 10), 4 (weight: 3), 3 (weight: 8), 5 (weight: 1), 6 (weight: 5), 10 (weight: 1), 8 (weight: 1), 9 (weight: 3), 1 (weight: 7).\nNode 9 is connected to nodes 4 (weight: 3), 3 (weight: 1), 5 (weight: 10), 6 (weight: 3), 10 (weight: 2), 8 (weight: 7), 7 (weight: 3), 1 (weight: 6).\nNode 1 is connected to nodes 4 (weight: 4), 6 (weight: 1), 10 (weight: 7), 0 (weight: 3), 8 (weight: 9), 7 (weight: 7), 9 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=6, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 3, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 5 (weight: 6), 6 (weight: 2).\nNode 5 is connected to nodes 10 (weight: 6), 7 (weight: 1).\nNode 6 is connected to nodes 10 (weight: 2), 3 (weight: 1).\nNode 7 is connected to nodes 5 (weight: 1), 9 (weight: 3), 1 (weight: 5).\nNode 3 is connected to nodes 6 (weight: 1), 0 (weight: 5).\nNode 9 is connected to nodes 7 (weight: 3), 8 (weight: 2).\nNode 1 is connected to nodes 7 (weight: 5), 13 (weight: 4).\nNode 8 is connected to nodes 9 (weight: 2), 4 (weight: 10).\nNode 4 is connected to nodes 8 (weight: 10), 0 (weight: 9), 2 (weight: 6).\nNode 0 is connected to nodes 4 (weight: 9), 3 (weight: 5).\nNode 2 is connected to nodes 4 (weight: 6), 14 (weight: 1).\nNode 14 is connected to nodes 2 (weight: 1), 11 (weight: 5).\nNode 13 is connected to node 1 (weight: 4).\nNode 12 is connected to node 11 (weight: 8).\nNode 11 is connected to nodes 12 (weight: 8), 14 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=10, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 4, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 3 (weight: 10), 5 (weight: 9), 10 (weight: 4), 11 (weight: 5), 2 (weight: 9).\nNode 3 is connected to nodes 9 (weight: 10), 6 (weight: 2), 4 (weight: 9).\nNode 5 is connected to nodes 9 (weight: 9), 7 (weight: 5), 8 (weight: 2), 4 (weight: 7).\nNode 10 is connected to nodes 9 (weight: 4), 11 (weight: 4), 12 (weight: 8), 1 (weight: 1).\nNode 11 is connected to nodes 9 (weight: 5), 10 (weight: 4), 4 (weight: 3), 2 (weight: 5).\nNode 2 is connected to nodes 9 (weight: 9), 11 (weight: 5), 12 (weight: 10), 1 (weight: 4).\nNode 6 is connected to nodes 3 (weight: 2), 0 (weight: 2).\nNode 4 is connected to nodes 3 (weight: 9), 5 (weight: 7), 11 (weight: 3), 7 (weight: 5), 8 (weight: 1), 0 (weight: 5).\nNode 7 is connected to nodes 5 (weight: 5), 4 (weight: 5), 1 (weight: 1), 0 (weight: 7), 8 (weight: 2).\nNode 8 is connected to nodes 5 (weight: 2), 4 (weight: 1), 7 (weight: 2).\nNode 12 is connected to nodes 10 (weight: 8), 2 (weight: 10), 1 (weight: 2).\nNode 1 is connected to nodes 10 (weight: 1), 2 (weight: 4), 7 (weight: 1), 12 (weight: 2), 0 (weight: 6).\nNode 0 is connected to nodes 6 (weight: 2), 4 (weight: 5), 7 (weight: 7), 1 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=7, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 5, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 8 (weight: 10), 3 (weight: 5), 1 (weight: 6).\nNode 8 is connected to nodes 6 (weight: 7), 0 (weight: 2), 4 (weight: 5).\nNode 3 is connected to nodes 5 (weight: 4), 4 (weight: 3), 8 (weight: 8), 7 (weight: 1).\nNode 1 is connected to nodes 8 (weight: 4), 7 (weight: 1), 0 (weight: 3).\nNode 6 is connected to nodes 7 (weight: 7), 3 (weight: 3), 8 (weight: 1).\nNode 0 is connected to nodes 8 (weight: 1), 6 (weight: 10), 7 (weight: 4).\nNode 5 is connected to node 6 (weight: 6).\nNode 7 is connected to nodes 3 (weight: 9), 2 (weight: 8), 8 (weight: 5), 6 (weight: 2).\nNode 2 is connected to nodes 8 (weight: 10), 0 (weight: 10), 5 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=2, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 6, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 1 (weight: 1), 8 (weight: 4), 0 (weight: 4), 4 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 1), 7 (weight: 8), 0 (weight: 2), 4 (weight: 3).\nNode 8 is connected to nodes 2 (weight: 4), 7 (weight: 5), 6 (weight: 1), 0 (weight: 6), 5 (weight: 9), 4 (weight: 5).\nNode 0 is connected to nodes 2 (weight: 4), 1 (weight: 2), 8 (weight: 6), 7 (weight: 2), 6 (weight: 8), 3 (weight: 5), 5 (weight: 6).\nNode 4 is connected to nodes 2 (weight: 7), 1 (weight: 3), 8 (weight: 5), 7 (weight: 10), 6 (weight: 2), 3 (weight: 6), 5 (weight: 9).\nNode 7 is connected to nodes 1 (weight: 8), 8 (weight: 5), 0 (weight: 2), 4 (weight: 10), 5 (weight: 9).\nNode 6 is connected to nodes 8 (weight: 1), 0 (weight: 8), 4 (weight: 2), 5 (weight: 6), 3 (weight: 2).\nNode 5 is connected to nodes 8 (weight: 9), 0 (weight: 6), 4 (weight: 9), 7 (weight: 9), 6 (weight: 6), 3 (weight: 8).\nNode 3 is connected to nodes 0 (weight: 5), 4 (weight: 6), 5 (weight: 8), 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=4, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 7, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 1 is connected to node 5 (weight: 4).\nNode 4 is connected to nodes 7 (weight: 9), 6 (weight: 2), 2 (weight: 9), 1 (weight: 6), 5 (weight: 5).\nNode 7 is connected to nodes 6 (weight: 4), 0 (weight: 1).\nNode 6 is connected to node 1 (weight: 10).\nNode 0 is connected to nodes 2 (weight: 8), 5 (weight: 9), 7 (weight: 7).\nNode 3 is connected to nodes 2 (weight: 6), 5 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=0, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 8, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 6), 1 (weight: 6), 3 (weight: 1), 0 (weight: 1), 6 (weight: 6), 7 (weight: 6), 5 (weight: 4).\nNode 4 is connected to nodes 2 (weight: 6), 6 (weight: 9), 3 (weight: 4), 8 (weight: 1), 5 (weight: 10).\nNode 1 is connected to nodes 2 (weight: 6), 7 (weight: 9), 0 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 1), 4 (weight: 4).\nNode 0 is connected to nodes 2 (weight: 1), 1 (weight: 2), 8 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 6), 4 (weight: 9).\nNode 7 is connected to nodes 2 (weight: 6), 1 (weight: 9).\nNode 5 is connected to nodes 2 (weight: 4), 4 (weight: 10).\nNode 8 is connected to nodes 4 (weight: 1), 0 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=2, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 9, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 13 (weight: 6), 10 (weight: 4), 9 (weight: 10), 1 (weight: 1), 8 (weight: 10).\nNode 13 is connected to nodes 4 (weight: 6), 6 (weight: 8), 14 (weight: 5).\nNode 10 is connected to nodes 4 (weight: 4), 6 (weight: 10), 0 (weight: 1), 8 (weight: 3), 1 (weight: 1).\nNode 9 is connected to nodes 4 (weight: 10), 11 (weight: 4), 6 (weight: 3), 14 (weight: 4), 5 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 1), 10 (weight: 1), 3 (weight: 9), 7 (weight: 9), 2 (weight: 3).\nNode 8 is connected to nodes 4 (weight: 10), 10 (weight: 3).\nNode 6 is connected to nodes 13 (weight: 8), 10 (weight: 10), 9 (weight: 3).\nNode 14 is connected to nodes 13 (weight: 5), 9 (weight: 4), 3 (weight: 3), 12 (weight: 9), 0 (weight: 10).\nNode 0 is connected to nodes 10 (weight: 1), 14 (weight: 10), 12 (weight: 4), 5 (weight: 1), 7 (weight: 8).\nNode 11 is connected to nodes 9 (weight: 4), 3 (weight: 9), 12 (weight: 9).\nNode 5 is connected to nodes 9 (weight: 4), 3 (weight: 6), 2 (weight: 3), 0 (weight: 1).\nNode 3 is connected to nodes 1 (weight: 9), 14 (weight: 3), 11 (weight: 9), 2 (weight: 7), 5 (weight: 6).\nNode 7 is connected to nodes 1 (weight: 9), 2 (weight: 4), 0 (weight: 8).\nNode 2 is connected to nodes 1 (weight: 3), 3 (weight: 7), 5 (weight: 3), 7 (weight: 4).\nNode 12 is connected to nodes 14 (weight: 9), 11 (weight: 9), 0 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=4, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 10, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 0 (weight: 10), 1 (weight: 6), 6 (weight: 7), 2 (weight: 5), 12 (weight: 10).\nNode 0 is connected to nodes 10 (weight: 10), 4 (weight: 5).\nNode 1 is connected to nodes 10 (weight: 6), 12 (weight: 9).\nNode 6 is connected to nodes 10 (weight: 7), 2 (weight: 8).\nNode 2 is connected to nodes 10 (weight: 5), 6 (weight: 8), 12 (weight: 10), 7 (weight: 9), 13 (weight: 8), 8 (weight: 2), 4 (weight: 7).\nNode 12 is connected to nodes 10 (weight: 10), 1 (weight: 9), 2 (weight: 10), 11 (weight: 3), 14 (weight: 6), 8 (weight: 5), 5 (weight: 7), 3 (weight: 7), 9 (weight: 3).\nNode 4 is connected to nodes 0 (weight: 5), 2 (weight: 7), 13 (weight: 10), 3 (weight: 6).\nNode 7 is connected to nodes 2 (weight: 9), 8 (weight: 1).\nNode 13 is connected to nodes 2 (weight: 8), 4 (weight: 10).\nNode 8 is connected to nodes 2 (weight: 2), 12 (weight: 5), 11 (weight: 3), 14 (weight: 7), 7 (weight: 1), 5 (weight: 3).\nNode 11 is connected to nodes 12 (weight: 3), 8 (weight: 3).\nNode 14 is connected to nodes 12 (weight: 6), 8 (weight: 7), 9 (weight: 4).\nNode 5 is connected to nodes 12 (weight: 7), 8 (weight: 3).\nNode 3 is connected to nodes 12 (weight: 7), 4 (weight: 6).\nNode 9 is connected to nodes 12 (weight: 3), 14 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=7, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 11, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 5 (weight: 7), 4 (weight: 1), 8 (weight: 2), 1 (weight: 9), 6 (weight: 2), 0 (weight: 3), 11 (weight: 8), 9 (weight: 1), 7 (weight: 2).\nNode 5 is connected to nodes 3 (weight: 7), 11 (weight: 7), 0 (weight: 5).\nNode 4 is connected to nodes 3 (weight: 1), 6 (weight: 2), 8 (weight: 2), 11 (weight: 4), 2 (weight: 5), 0 (weight: 8).\nNode 8 is connected to nodes 3 (weight: 2), 4 (weight: 2), 10 (weight: 3).\nNode 1 is connected to nodes 3 (weight: 9), 6 (weight: 5), 10 (weight: 10), 0 (weight: 1).\nNode 6 is connected to nodes 3 (weight: 2), 4 (weight: 2), 1 (weight: 5), 10 (weight: 4), 9 (weight: 2), 0 (weight: 7).\nNode 0 is connected to nodes 3 (weight: 3), 5 (weight: 5), 4 (weight: 8), 1 (weight: 1), 6 (weight: 7), 10 (weight: 4).\nNode 11 is connected to nodes 3 (weight: 8), 5 (weight: 7), 4 (weight: 4).\nNode 9 is connected to nodes 3 (weight: 1), 6 (weight: 2), 7 (weight: 5).\nNode 7 is connected to nodes 3 (weight: 2), 9 (weight: 5), 2 (weight: 3).\nNode 2 is connected to nodes 4 (weight: 5), 7 (weight: 3), 10 (weight: 4).\nNode 10 is connected to nodes 8 (weight: 3), 1 (weight: 10), 6 (weight: 4), 0 (weight: 4), 2 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=8, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 12, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to node 0 (weight: 10).\nNode 0 is connected to nodes 10 (weight: 8), 7 (weight: 7).\nNode 7 is connected to node 6 (weight: 5).\nNode 3 is connected to node 8 (weight: 9).\nNode 8 is connected to nodes 1 (weight: 2), 5 (weight: 7), 0 (weight: 4).\nNode 5 is connected to nodes 0 (weight: 5), 2 (weight: 9), 4 (weight: 6), 10 (weight: 8).\nNode 6 is connected to nodes 1 (weight: 5), 3 (weight: 5).\nNode 2 is connected to nodes 6 (weight: 7), 8 (weight: 8), 5 (weight: 5), 0 (weight: 6).\nNode 9 is connected to nodes 8 (weight: 6), 1 (weight: 7), 5 (weight: 2), 6 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 9 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=9, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 13, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 2 (weight: 4), 7 (weight: 2), 3 (weight: 10).\nNode 2 is connected to nodes 10 (weight: 4), 9 (weight: 1), 5 (weight: 5), 0 (weight: 1), 1 (weight: 5), 6 (weight: 9), 4 (weight: 10), 7 (weight: 10), 3 (weight: 7).\nNode 7 is connected to nodes 10 (weight: 2), 2 (weight: 10), 9 (weight: 4), 5 (weight: 8), 1 (weight: 2), 6 (weight: 9), 4 (weight: 3).\nNode 3 is connected to nodes 10 (weight: 10), 2 (weight: 7), 9 (weight: 4), 5 (weight: 2), 1 (weight: 10), 6 (weight: 5), 4 (weight: 6), 8 (weight: 1).\nNode 9 is connected to nodes 2 (weight: 1), 7 (weight: 4), 3 (weight: 4), 5 (weight: 5), 0 (weight: 4), 1 (weight: 9), 6 (weight: 8), 4 (weight: 1), 8 (weight: 2).\nNode 5 is connected to nodes 2 (weight: 5), 7 (weight: 8), 3 (weight: 2), 9 (weight: 5), 0 (weight: 1), 1 (weight: 9), 4 (weight: 5), 8 (weight: 7).\nNode 0 is connected to nodes 2 (weight: 1), 9 (weight: 4), 5 (weight: 1), 1 (weight: 6), 6 (weight: 10), 4 (weight: 4), 8 (weight: 9).\nNode 1 is connected to nodes 2 (weight: 5), 7 (weight: 2), 3 (weight: 10), 9 (weight: 9), 5 (weight: 9), 0 (weight: 6), 6 (weight: 1), 4 (weight: 3), 8 (weight: 7).\nNode 6 is connected to nodes 2 (weight: 9), 7 (weight: 9), 3 (weight: 5), 9 (weight: 8), 0 (weight: 10), 1 (weight: 1), 4 (weight: 5).\nNode 4 is connected to nodes 2 (weight: 10), 7 (weight: 3), 3 (weight: 6), 9 (weight: 1), 5 (weight: 5), 0 (weight: 4), 1 (weight: 3), 6 (weight: 5), 8 (weight: 5).\nNode 8 is connected to nodes 3 (weight: 1), 9 (weight: 2), 5 (weight: 7), 0 (weight: 9), 1 (weight: 7), 4 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=9, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 14, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to node 10 (weight: 4).\nNode 10 is connected to nodes 3 (weight: 7), 0 (weight: 7).\nNode 3 is connected to nodes 8 (weight: 10), 2 (weight: 9).\nNode 0 is connected to nodes 9 (weight: 4), 12 (weight: 6).\nNode 4 is connected to nodes 0 (weight: 6), 9 (weight: 10), 10 (weight: 9), 3 (weight: 2), 5 (weight: 1), 8 (weight: 6).\nNode 5 is connected to nodes 12 (weight: 3), 11 (weight: 10), 2 (weight: 7).\nNode 8 is connected to nodes 6 (weight: 9), 0 (weight: 1), 3 (weight: 6).\nNode 12 is connected to nodes 11 (weight: 8), 0 (weight: 5).\nNode 2 is connected to nodes 3 (weight: 7), 5 (weight: 9), 1 (weight: 8).\nNode 11 is connected to nodes 6 (weight: 7), 9 (weight: 10), 3 (weight: 6).\nNode 6 is connected to nodes 10 (weight: 2), 5 (weight: 6).\nNode 1 is connected to nodes 11 (weight: 2), 6 (weight: 8), 0 (weight: 5), 5 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor, weight=1)  # Assuming all weights are 1\n\n# Calculate the length of the shortest path from node 10 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=10, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 15, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 4 is connected to nodes 1 (weight: 5), 2 (weight: 2).\nNode 1 is connected to node 6 (weight: 10).\nNode 2 is connected to node 1 (weight: 9).\nNode 6 is connected to nodes 8 (weight: 1), 0 (weight: 5), 5 (weight: 8).\nNode 8 is connected to nodes 10 (weight: 4), 1 (weight: 4), 2 (weight: 3), 3 (weight: 4).\nNode 0 is connected to nodes 9 (weight: 4), 8 (weight: 7).\nNode 5 is connected to nodes 4 (weight: 4), 9 (weight: 1), 7 (weight: 3), 10 (weight: 8).\nNode 9 is connected to nodes 3 (weight: 4), 10 (weight: 8), 5 (weight: 3), 1 (weight: 9).\nNode 3 is connected to nodes 7 (weight: 2), 5 (weight: 7), 4 (weight: 8), 9 (weight: 3), 6 (weight: 1).\nNode 10 is connected to nodes 0 (weight: 2), 5 (weight: 2), 4 (weight: 10), 8 (weight: 3).\nNode 7 is connected to nodes 10 (weight: 9), 5 (weight: 4), 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=9, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 16, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 0 (weight: 3), 4 (weight: 8), 1 (weight: 8), 2 (weight: 4), 5 (weight: 4), 7 (weight: 7).\nNode 0 is connected to nodes 6 (weight: 3), 4 (weight: 4), 2 (weight: 8), 5 (weight: 4), 7 (weight: 10).\nNode 4 is connected to nodes 6 (weight: 8), 0 (weight: 4), 1 (weight: 8), 5 (weight: 4), 3 (weight: 10), 7 (weight: 5).\nNode 1 is connected to nodes 6 (weight: 8), 4 (weight: 8), 2 (weight: 6), 5 (weight: 9), 7 (weight: 3).\nNode 2 is connected to nodes 6 (weight: 4), 0 (weight: 8), 1 (weight: 6), 5 (weight: 3), 3 (weight: 5), 7 (weight: 1).\nNode 5 is connected to nodes 6 (weight: 4), 0 (weight: 4), 4 (weight: 4), 1 (weight: 9), 2 (weight: 3), 7 (weight: 5).\nNode 7 is connected to nodes 6 (weight: 7), 0 (weight: 10), 4 (weight: 5), 1 (weight: 3), 2 (weight: 1), 5 (weight: 5), 3 (weight: 10).\nNode 3 is connected to nodes 4 (weight: 10), 2 (weight: 5), 7 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=6, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 17, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 5 is connected to nodes 0 (weight: 1), 6 (weight: 4).\nNode 0 is connected to nodes 3 (weight: 8), 8 (weight: 4), 4 (weight: 7), 2 (weight: 9), 1 (weight: 8).\nNode 6 is connected to node 2 (weight: 10).\nNode 3 is connected to nodes 7 (weight: 2), 6 (weight: 1), 2 (weight: 2), 5 (weight: 7).\nNode 8 is connected to nodes 0 (weight: 1), 3 (weight: 3), 7 (weight: 10), 6 (weight: 9).\nNode 4 is connected to node 6 (weight: 8).\nNode 2 is connected to nodes 1 (weight: 2), 0 (weight: 7), 7 (weight: 1).\nNode 1 is connected to nodes 6 (weight: 8), 5 (weight: 3).\nNode 7 is connected to nodes 6 (weight: 6), 8 (weight: 3), 4 (weight: 9), 1 (weight: 5), 3 (weight: 10), 9 (weight: 6).\nNode 9 is connected to nodes 8 (weight: 1), 2 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=0, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 18, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 3 (weight: 3), 5 (weight: 2), 2 (weight: 7), 4 (weight: 7).\nNode 3 is connected to nodes 11 (weight: 3), 0 (weight: 1), 9 (weight: 2), 5 (weight: 1).\nNode 5 is connected to nodes 11 (weight: 2), 3 (weight: 1), 10 (weight: 8), 8 (weight: 3), 1 (weight: 6).\nNode 2 is connected to nodes 11 (weight: 7), 10 (weight: 8), 12 (weight: 4).\nNode 4 is connected to nodes 11 (weight: 7), 12 (weight: 4), 1 (weight: 2).\nNode 0 is connected to nodes 3 (weight: 1), 7 (weight: 8), 9 (weight: 1), 12 (weight: 3), 6 (weight: 3).\nNode 9 is connected to nodes 3 (weight: 2), 0 (weight: 1), 7 (weight: 8).\nNode 10 is connected to nodes 5 (weight: 8), 2 (weight: 8), 7 (weight: 3), 12 (weight: 3), 6 (weight: 9), 1 (weight: 1).\nNode 8 is connected to nodes 5 (weight: 3), 12 (weight: 2), 6 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 6), 4 (weight: 2), 10 (weight: 1).\nNode 12 is connected to nodes 2 (weight: 4), 4 (weight: 4), 0 (weight: 3), 10 (weight: 3), 6 (weight: 7), 8 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 8), 9 (weight: 8), 10 (weight: 3).\nNode 6 is connected to nodes 0 (weight: 3), 10 (weight: 9), 12 (weight: 7), 8 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=11, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 19, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 1 (weight: 3), 3 (weight: 1), 8 (weight: 7), 12 (weight: 8), 4 (weight: 8), 6 (weight: 7), 7 (weight: 7), 0 (weight: 9).\nNode 1 is connected to nodes 2 (weight: 3), 4 (weight: 6), 12 (weight: 1), 0 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 1), 10 (weight: 10), 7 (weight: 7), 8 (weight: 6), 12 (weight: 1), 6 (weight: 2).\nNode 8 is connected to nodes 2 (weight: 7), 3 (weight: 6), 4 (weight: 4), 7 (weight: 9).\nNode 12 is connected to nodes 2 (weight: 8), 1 (weight: 1), 3 (weight: 1), 4 (weight: 9), 11 (weight: 3), 0 (weight: 2), 7 (weight: 3), 6 (weight: 6), 5 (weight: 5), 10 (weight: 4).\nNode 4 is connected to nodes 2 (weight: 8), 1 (weight: 6), 8 (weight: 4), 12 (weight: 9), 7 (weight: 6), 6 (weight: 9), 9 (weight: 9), 10 (weight: 4), 11 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 7), 3 (weight: 2), 12 (weight: 6), 4 (weight: 9), 9 (weight: 2), 0 (weight: 8).\nNode 7 is connected to nodes 2 (weight: 7), 3 (weight: 7), 8 (weight: 9), 12 (weight: 3), 4 (weight: 6), 0 (weight: 3).\nNode 0 is connected to nodes 2 (weight: 9), 1 (weight: 2), 12 (weight: 2), 6 (weight: 8), 7 (weight: 3), 9 (weight: 3).\nNode 10 is connected to nodes 3 (weight: 10), 12 (weight: 4), 4 (weight: 4), 11 (weight: 5).\nNode 11 is connected to nodes 12 (weight: 3), 4 (weight: 4), 10 (weight: 5), 9 (weight: 8).\nNode 5 is connected to node 12 (weight: 5).\nNode 9 is connected to nodes 4 (weight: 9), 6 (weight: 2), 0 (weight: 3), 11 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=4, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 20, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 3 is connected to nodes 1 (weight: 9), 7 (weight: 2), 5 (weight: 2).\nNode 1 is connected to node 5 (weight: 9).\nNode 7 is connected to nodes 9 (weight: 1), 5 (weight: 6), 2 (weight: 1), 0 (weight: 8).\nNode 5 is connected to node 6 (weight: 2).\nNode 9 is connected to nodes 2 (weight: 1), 0 (weight: 8), 3 (weight: 2), 1 (weight: 3).\nNode 2 is connected to nodes 8 (weight: 7), 7 (weight: 4), 5 (weight: 1).\nNode 0 is connected to nodes 4 (weight: 7), 1 (weight: 9), 7 (weight: 5), 8 (weight: 2).\nNode 6 is connected to nodes 4 (weight: 10), 1 (weight: 5), 2 (weight: 1), 8 (weight: 2), 0 (weight: 8).\nNode 8 is connected to nodes 0 (weight: 4), 6 (weight: 9), 1 (weight: 8), 7 (weight: 5), 2 (weight: 5).\nNode 4 is connected to nodes 7 (weight: 3), 2 (weight: 2), 8 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 6\nlength = nx.shortest_path_length(G, source=5, target=6, weight='weight')\nprint(length)\n```"}, {"id": 21, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 4 (weight: 1), 1 (weight: 7).\nNode 4 is connected to nodes 6 (weight: 1), 3 (weight: 9).\nNode 1 is connected to nodes 6 (weight: 7), 3 (weight: 9).\nNode 3 is connected to nodes 4 (weight: 9), 1 (weight: 9), 11 (weight: 9), 7 (weight: 3).\nNode 11 is connected to nodes 3 (weight: 9), 5 (weight: 4).\nNode 7 is connected to nodes 3 (weight: 3), 9 (weight: 3).\nNode 5 is connected to node 11 (weight: 4).\nNode 9 is connected to nodes 7 (weight: 3), 10 (weight: 3).\nNode 2 is connected to node 0 (weight: 1).\nNode 0 is connected to nodes 2 (weight: 1), 8 (weight: 8).\nNode 8 is connected to nodes 0 (weight: 8), 10 (weight: 6).\nNode 10 is connected to nodes 8 (weight: 6), 9 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=4, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 22, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 5), 8 (weight: 9), 9 (weight: 5), 0 (weight: 8), 7 (weight: 1), 5 (weight: 9), 4 (weight: 10), 1 (weight: 2), 3 (weight: 6), 10 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 5), 8 (weight: 10), 9 (weight: 9), 0 (weight: 4), 7 (weight: 3), 5 (weight: 7), 4 (weight: 6), 3 (weight: 5).\nNode 8 is connected to nodes 2 (weight: 9), 6 (weight: 10), 9 (weight: 3), 0 (weight: 9), 7 (weight: 2), 5 (weight: 8), 4 (weight: 4), 3 (weight: 1), 10 (weight: 4).\nNode 9 is connected to nodes 2 (weight: 5), 6 (weight: 9), 8 (weight: 3), 5 (weight: 5), 4 (weight: 6), 1 (weight: 9), 3 (weight: 6), 10 (weight: 4).\nNode 0 is connected to nodes 2 (weight: 8), 6 (weight: 4), 8 (weight: 9), 7 (weight: 8), 5 (weight: 8), 3 (weight: 4), 10 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 1), 6 (weight: 3), 8 (weight: 2), 0 (weight: 8), 4 (weight: 10), 1 (weight: 3), 3 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 9), 6 (weight: 7), 8 (weight: 8), 9 (weight: 5), 0 (weight: 8), 3 (weight: 2), 10 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 10), 6 (weight: 6), 8 (weight: 4), 9 (weight: 6), 7 (weight: 10), 1 (weight: 3), 10 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 2), 9 (weight: 9), 7 (weight: 3), 4 (weight: 3), 3 (weight: 4), 10 (weight: 7).\nNode 3 is connected to nodes 2 (weight: 6), 6 (weight: 5), 8 (weight: 1), 9 (weight: 6), 0 (weight: 4), 7 (weight: 8), 5 (weight: 2), 1 (weight: 4).\nNode 10 is connected to nodes 2 (weight: 9), 8 (weight: 4), 9 (weight: 4), 0 (weight: 10), 5 (weight: 9), 4 (weight: 7), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=10, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 23, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 4 (weight: 8), 3 (weight: 6), 7 (weight: 2).\nNode 4 is connected to nodes 6 (weight: 8), 5 (weight: 3).\nNode 3 is connected to nodes 6 (weight: 6), 2 (weight: 10).\nNode 7 is connected to node 6 (weight: 2).\nNode 5 is connected to nodes 4 (weight: 3), 1 (weight: 6).\nNode 2 is connected to nodes 3 (weight: 10), 0 (weight: 7).\nNode 1 is connected to nodes 5 (weight: 6), 8 (weight: 5).\nNode 0 is connected to nodes 2 (weight: 7), 8 (weight: 6).\nNode 8 is connected to nodes 0 (weight: 6), 1 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=7, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 24, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 7 (weight: 1), 10 (weight: 3), 9 (weight: 8), 8 (weight: 7), 12 (weight: 10), 6 (weight: 9).\nNode 7 is connected to nodes 5 (weight: 1), 10 (weight: 6), 3 (weight: 10).\nNode 10 is connected to nodes 5 (weight: 3), 7 (weight: 6), 12 (weight: 2).\nNode 9 is connected to nodes 5 (weight: 8), 12 (weight: 2).\nNode 8 is connected to nodes 5 (weight: 7), 2 (weight: 8), 6 (weight: 3).\nNode 12 is connected to nodes 5 (weight: 10), 10 (weight: 2), 9 (weight: 2), 1 (weight: 9), 6 (weight: 5), 4 (weight: 4), 0 (weight: 9).\nNode 6 is connected to nodes 5 (weight: 9), 8 (weight: 3), 12 (weight: 5), 1 (weight: 2), 0 (weight: 4).\nNode 3 is connected to nodes 7 (weight: 10), 2 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 8), 3 (weight: 7), 1 (weight: 3), 11 (weight: 8).\nNode 1 is connected to nodes 12 (weight: 9), 6 (weight: 2), 2 (weight: 3).\nNode 4 is connected to nodes 12 (weight: 4), 11 (weight: 1).\nNode 0 is connected to nodes 12 (weight: 9), 6 (weight: 4).\nNode 11 is connected to nodes 2 (weight: 8), 4 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=1, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 25, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 2 (weight: 1), 1 (weight: 9).\nNode 2 is connected to nodes 3 (weight: 1), 4 (weight: 7).\nNode 1 is connected to node 3 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 7), 10 (weight: 3), 6 (weight: 9).\nNode 10 is connected to node 4 (weight: 3).\nNode 6 is connected to nodes 4 (weight: 9), 0 (weight: 9), 12 (weight: 7).\nNode 5 is connected to nodes 0 (weight: 10), 7 (weight: 2).\nNode 0 is connected to nodes 5 (weight: 10), 6 (weight: 9).\nNode 7 is connected to nodes 5 (weight: 2), 12 (weight: 2).\nNode 12 is connected to nodes 7 (weight: 2), 6 (weight: 7), 11 (weight: 5).\nNode 11 is connected to nodes 12 (weight: 5), 9 (weight: 3), 8 (weight: 4).\nNode 9 is connected to node 11 (weight: 3).\nNode 8 is connected to node 11 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=11, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 26, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to node 5 (weight: 10).\nNode 5 is connected to nodes 1 (weight: 5), 2 (weight: 8).\nNode 1 is connected to node 3 (weight: 10).\nNode 2 is connected to node 5 (weight: 6).\nNode 7 is connected to nodes 4 (weight: 4), 1 (weight: 5).\nNode 4 is connected to node 3 (weight: 2).\nNode 3 is connected to node 7 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 5), 5 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 5\nlength = nx.shortest_path_length(G, source=6, target=5, weight='weight')\nprint(length)\n```"}, {"id": 27, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 8 (weight: 4), 6 (weight: 8), 3 (weight: 8).\nNode 8 is connected to nodes 9 (weight: 4), 7 (weight: 9), 4 (weight: 1).\nNode 6 is connected to nodes 9 (weight: 8), 1 (weight: 6).\nNode 3 is connected to node 9 (weight: 8).\nNode 7 is connected to nodes 8 (weight: 9), 5 (weight: 6), 1 (weight: 1), 2 (weight: 8).\nNode 4 is connected to node 8 (weight: 1).\nNode 1 is connected to nodes 6 (weight: 6), 7 (weight: 1).\nNode 5 is connected to nodes 7 (weight: 6), 0 (weight: 8).\nNode 2 is connected to node 7 (weight: 8).\nNode 0 is connected to node 5 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=8, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 28, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 10), 1 (weight: 10), 5 (weight: 1).\nNode 3 is connected to node 0 (weight: 10).\nNode 1 is connected to nodes 0 (weight: 10), 5 (weight: 5).\nNode 5 is connected to nodes 0 (weight: 1), 1 (weight: 5), 6 (weight: 7).\nNode 6 is connected to nodes 5 (weight: 7), 7 (weight: 7).\nNode 7 is connected to nodes 6 (weight: 7), 8 (weight: 7).\nNode 8 is connected to nodes 7 (weight: 7), 2 (weight: 10).\nNode 2 is connected to nodes 8 (weight: 10), 4 (weight: 7).\nNode 4 is connected to node 2 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=2, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 29, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 2 (weight: 6), 0 (weight: 5), 7 (weight: 3), 3 (weight: 2), 1 (weight: 5), 6 (weight: 6).\nNode 2 is connected to node 4 (weight: 6).\nNode 0 is connected to node 4 (weight: 5).\nNode 7 is connected to nodes 4 (weight: 3), 5 (weight: 4).\nNode 3 is connected to node 4 (weight: 2).\nNode 1 is connected to node 4 (weight: 5).\nNode 6 is connected to node 4 (weight: 6).\nNode 5 is connected to node 7 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=4, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 30, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 4 (weight: 9), 1 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 9), 0 (weight: 7).\nNode 1 is connected to nodes 8 (weight: 4), 5 (weight: 5).\nNode 0 is connected to nodes 4 (weight: 7), 3 (weight: 8), 2 (weight: 2).\nNode 5 is connected to nodes 1 (weight: 5), 7 (weight: 7).\nNode 3 is connected to nodes 0 (weight: 8), 2 (weight: 1), 6 (weight: 6).\nNode 2 is connected to nodes 0 (weight: 2), 3 (weight: 1).\nNode 7 is connected to node 5 (weight: 7).\nNode 6 is connected to node 3 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=3, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 31, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 1 (weight: 5), 9 (weight: 6), 4 (weight: 8), 10 (weight: 1).\nNode 1 is connected to nodes 3 (weight: 5), 0 (weight: 9), 4 (weight: 8), 5 (weight: 4).\nNode 9 is connected to nodes 3 (weight: 6), 8 (weight: 10), 6 (weight: 5), 7 (weight: 7).\nNode 4 is connected to nodes 3 (weight: 8), 1 (weight: 8), 10 (weight: 1), 5 (weight: 2), 6 (weight: 1).\nNode 10 is connected to nodes 3 (weight: 1), 4 (weight: 1), 6 (weight: 2), 0 (weight: 10), 2 (weight: 8).\nNode 0 is connected to nodes 1 (weight: 9), 10 (weight: 10), 5 (weight: 5), 2 (weight: 6).\nNode 5 is connected to nodes 1 (weight: 4), 4 (weight: 2), 0 (weight: 5), 2 (weight: 1), 7 (weight: 3).\nNode 8 is connected to nodes 9 (weight: 10), 6 (weight: 10).\nNode 6 is connected to nodes 9 (weight: 5), 4 (weight: 1), 10 (weight: 2), 8 (weight: 10), 2 (weight: 8).\nNode 7 is connected to nodes 9 (weight: 7), 5 (weight: 3).\nNode 2 is connected to nodes 10 (weight: 8), 0 (weight: 6), 5 (weight: 1), 6 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=9, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 32, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 1 is connected to nodes 8 (weight: 5), 10 (weight: 6), 9 (weight: 8).\nNode 8 is connected to nodes 4 (weight: 9), 2 (weight: 9).\nNode 10 is connected to nodes 0 (weight: 7), 6 (weight: 2).\nNode 9 is connected to nodes 8 (weight: 7), 7 (weight: 9), 0 (weight: 1), 12 (weight: 1).\nNode 4 is connected to nodes 7 (weight: 10), 11 (weight: 10), 12 (weight: 8), 5 (weight: 1).\nNode 2 is connected to nodes 9 (weight: 3), 4 (weight: 2), 7 (weight: 7).\nNode 0 is connected to nodes 6 (weight: 2), 1 (weight: 6), 4 (weight: 1).\nNode 6 is connected to node 0 (weight: 5).\nNode 7 is connected to nodes 11 (weight: 5), 3 (weight: 4), 5 (weight: 5), 1 (weight: 4), 8 (weight: 2), 4 (weight: 10), 10 (weight: 3).\nNode 5 is connected to node 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=6, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 33, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 8 (weight: 8), 7 (weight: 5), 12 (weight: 9).\nNode 8 is connected to node 0 (weight: 7).\nNode 7 is connected to nodes 13 (weight: 9), 2 (weight: 6), 4 (weight: 3), 5 (weight: 9).\nNode 0 is connected to nodes 6 (weight: 9), 12 (weight: 2), 10 (weight: 2), 5 (weight: 2), 7 (weight: 1).\nNode 13 is connected to node 1 (weight: 10).\nNode 2 is connected to node 10 (weight: 4).\nNode 4 is connected to nodes 0 (weight: 10), 3 (weight: 4).\nNode 5 is connected to nodes 9 (weight: 2), 7 (weight: 3), 10 (weight: 10), 4 (weight: 7).\nNode 3 is connected to node 9 (weight: 1).\nNode 9 is connected to nodes 12 (weight: 4), 3 (weight: 1).\nNode 1 is connected to nodes 3 (weight: 8), 5 (weight: 9).\nNode 11 is connected to nodes 2 (weight: 1), 5 (weight: 8), 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=8, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 34, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 6 (weight: 5), 5 (weight: 3), 4 (weight: 8), 7 (weight: 4), 9 (weight: 6), 8 (weight: 10), 3 (weight: 4).\nNode 6 is connected to nodes 1 (weight: 5), 3 (weight: 7), 7 (weight: 2), 8 (weight: 4), 10 (weight: 7).\nNode 5 is connected to nodes 1 (weight: 3), 7 (weight: 7), 10 (weight: 9).\nNode 4 is connected to nodes 1 (weight: 8), 7 (weight: 2), 0 (weight: 6).\nNode 7 is connected to nodes 1 (weight: 4), 6 (weight: 2), 5 (weight: 7), 4 (weight: 2), 3 (weight: 9), 8 (weight: 8), 2 (weight: 2), 9 (weight: 9), 0 (weight: 4).\nNode 9 is connected to nodes 1 (weight: 6), 7 (weight: 9), 3 (weight: 7).\nNode 8 is connected to nodes 1 (weight: 10), 6 (weight: 4), 7 (weight: 8), 10 (weight: 8).\nNode 3 is connected to nodes 1 (weight: 4), 6 (weight: 7), 7 (weight: 9), 9 (weight: 7), 0 (weight: 2).\nNode 10 is connected to nodes 6 (weight: 7), 5 (weight: 9), 8 (weight: 8), 0 (weight: 8).\nNode 0 is connected to nodes 4 (weight: 6), 7 (weight: 4), 3 (weight: 2), 10 (weight: 8).\nNode 2 is connected to node 7 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=2, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 35, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 6), 4 (weight: 7).\nNode 6 is connected to nodes 2 (weight: 6), 8 (weight: 7), 3 (weight: 2), 7 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 7), 5 (weight: 3), 0 (weight: 8), 1 (weight: 8), 3 (weight: 4).\nNode 8 is connected to nodes 6 (weight: 7), 0 (weight: 7), 1 (weight: 5), 3 (weight: 1), 7 (weight: 7).\nNode 3 is connected to nodes 6 (weight: 2), 4 (weight: 4), 8 (weight: 1), 1 (weight: 5).\nNode 7 is connected to nodes 6 (weight: 9), 8 (weight: 7), 0 (weight: 4), 1 (weight: 7).\nNode 5 is connected to node 4 (weight: 3).\nNode 0 is connected to nodes 4 (weight: 8), 8 (weight: 7), 1 (weight: 1), 7 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 8), 8 (weight: 5), 0 (weight: 1), 3 (weight: 5), 7 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=4, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 36, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 10 (weight: 8), 7 (weight: 7).\nNode 10 is connected to node 9 (weight: 8).\nNode 7 is connected to nodes 9 (weight: 7), 2 (weight: 4), 6 (weight: 8), 8 (weight: 9).\nNode 2 is connected to nodes 7 (weight: 4), 4 (weight: 5).\nNode 6 is connected to nodes 7 (weight: 8), 5 (weight: 5), 0 (weight: 1).\nNode 8 is connected to nodes 7 (weight: 9), 0 (weight: 9).\nNode 3 is connected to nodes 5 (weight: 4), 1 (weight: 2).\nNode 5 is connected to nodes 3 (weight: 4), 6 (weight: 5).\nNode 1 is connected to node 3 (weight: 2).\nNode 0 is connected to nodes 6 (weight: 1), 8 (weight: 9).\nNode 4 is connected to node 2 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=9, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 37, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 3), 5 (weight: 5), 1 (weight: 9), 10 (weight: 2), 0 (weight: 8), 9 (weight: 10).\nNode 2 is connected to nodes 6 (weight: 3), 4 (weight: 10).\nNode 5 is connected to node 6 (weight: 5).\nNode 1 is connected to node 6 (weight: 9).\nNode 10 is connected to nodes 6 (weight: 2), 8 (weight: 2), 3 (weight: 6).\nNode 0 is connected to node 6 (weight: 8).\nNode 9 is connected to nodes 6 (weight: 10), 7 (weight: 4).\nNode 4 is connected to node 2 (weight: 10).\nNode 8 is connected to node 10 (weight: 2).\nNode 3 is connected to node 10 (weight: 6).\nNode 7 is connected to node 9 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=10, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 38, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 13 (weight: 7), 2 (weight: 8), 10 (weight: 1), 4 (weight: 3), 7 (weight: 4), 0 (weight: 4), 8 (weight: 8).\nNode 13 is connected to nodes 12 (weight: 7), 9 (weight: 3), 5 (weight: 8), 3 (weight: 8), 0 (weight: 9), 11 (weight: 10).\nNode 2 is connected to nodes 12 (weight: 8), 6 (weight: 6), 10 (weight: 4), 5 (weight: 3), 1 (weight: 7), 7 (weight: 6), 11 (weight: 8).\nNode 10 is connected to nodes 12 (weight: 1), 2 (weight: 4), 6 (weight: 10), 5 (weight: 2), 3 (weight: 10), 11 (weight: 4).\nNode 4 is connected to nodes 12 (weight: 3), 7 (weight: 1).\nNode 7 is connected to nodes 12 (weight: 4), 2 (weight: 6), 4 (weight: 1), 9 (weight: 8), 5 (weight: 5), 1 (weight: 6), 3 (weight: 6).\nNode 0 is connected to nodes 12 (weight: 4), 13 (weight: 9), 6 (weight: 9), 9 (weight: 2), 1 (weight: 3), 3 (weight: 3), 8 (weight: 1).\nNode 8 is connected to nodes 12 (weight: 8), 0 (weight: 1), 6 (weight: 10), 9 (weight: 4), 5 (weight: 9), 11 (weight: 9).\nNode 9 is connected to nodes 13 (weight: 3), 7 (weight: 8), 0 (weight: 2), 8 (weight: 4), 6 (weight: 6), 3 (weight: 4), 11 (weight: 6).\nNode 5 is connected to nodes 13 (weight: 8), 2 (weight: 3), 10 (weight: 2), 7 (weight: 5), 8 (weight: 9), 1 (weight: 7), 11 (weight: 6).\nNode 3 is connected to nodes 13 (weight: 8), 10 (weight: 10), 7 (weight: 6), 0 (weight: 3), 9 (weight: 4), 11 (weight: 9).\nNode 11 is connected to nodes 13 (weight: 10), 2 (weight: 8), 10 (weight: 4), 8 (weight: 9), 9 (weight: 6), 5 (weight: 6), 3 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 6), 10 (weight: 10), 0 (weight: 9), 8 (weight: 10), 9 (weight: 6).\nNode 1 is connected to nodes 2 (weight: 7), 7 (weight: 6), 0 (weight: 3), 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=10, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 39, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 5 (weight: 7), 4 (weight: 3), 9 (weight: 5), 2 (weight: 10).\nNode 5 is connected to nodes 12 (weight: 7), 10 (weight: 8), 13 (weight: 5), 8 (weight: 6).\nNode 4 is connected to nodes 12 (weight: 3), 3 (weight: 5), 8 (weight: 3), 2 (weight: 7).\nNode 9 is connected to nodes 12 (weight: 5), 1 (weight: 2), 0 (weight: 10), 7 (weight: 8).\nNode 2 is connected to nodes 12 (weight: 10), 4 (weight: 7), 7 (weight: 6).\nNode 10 is connected to nodes 5 (weight: 8), 6 (weight: 5), 7 (weight: 3), 0 (weight: 6).\nNode 13 is connected to nodes 5 (weight: 5), 1 (weight: 1), 6 (weight: 3), 7 (weight: 8), 0 (weight: 10).\nNode 8 is connected to nodes 5 (weight: 6), 4 (weight: 3), 1 (weight: 8), 11 (weight: 2).\nNode 3 is connected to nodes 4 (weight: 5), 6 (weight: 7), 0 (weight: 1), 11 (weight: 10).\nNode 1 is connected to nodes 9 (weight: 2), 13 (weight: 1), 8 (weight: 8), 0 (weight: 7), 11 (weight: 3).\nNode 0 is connected to nodes 9 (weight: 10), 10 (weight: 6), 13 (weight: 10), 3 (weight: 1), 1 (weight: 7).\nNode 7 is connected to nodes 9 (weight: 8), 2 (weight: 6), 10 (weight: 3), 13 (weight: 8).\nNode 6 is connected to nodes 10 (weight: 5), 13 (weight: 3), 3 (weight: 7).\nNode 11 is connected to nodes 8 (weight: 2), 3 (weight: 10), 1 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=5, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 40, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 2), 7 (weight: 4), 9 (weight: 6).\nNode 3 is connected to nodes 4 (weight: 2), 2 (weight: 9), 9 (weight: 7), 0 (weight: 3), 6 (weight: 9), 11 (weight: 8), 10 (weight: 6), 13 (weight: 2).\nNode 7 is connected to nodes 4 (weight: 4), 2 (weight: 10), 5 (weight: 8), 6 (weight: 1), 8 (weight: 9), 10 (weight: 8), 12 (weight: 8), 13 (weight: 6).\nNode 9 is connected to nodes 4 (weight: 6), 3 (weight: 7), 5 (weight: 2), 0 (weight: 1), 11 (weight: 2), 8 (weight: 2), 12 (weight: 1).\nNode 2 is connected to nodes 3 (weight: 9), 7 (weight: 10), 5 (weight: 2), 1 (weight: 1), 11 (weight: 10), 8 (weight: 6), 10 (weight: 7), 12 (weight: 6), 13 (weight: 5).\nNode 0 is connected to nodes 3 (weight: 3), 9 (weight: 1), 1 (weight: 1), 8 (weight: 6).\nNode 6 is connected to nodes 3 (weight: 9), 7 (weight: 1), 5 (weight: 7), 1 (weight: 3), 10 (weight: 7), 13 (weight: 4).\nNode 11 is connected to nodes 3 (weight: 8), 9 (weight: 2), 2 (weight: 10), 5 (weight: 2), 12 (weight: 8), 13 (weight: 1).\nNode 10 is connected to nodes 3 (weight: 6), 7 (weight: 8), 2 (weight: 7), 6 (weight: 7).\nNode 13 is connected to nodes 3 (weight: 2), 7 (weight: 6), 2 (weight: 5), 5 (weight: 8), 1 (weight: 3), 11 (weight: 1), 12 (weight: 7), 6 (weight: 4).\nNode 5 is connected to nodes 7 (weight: 8), 9 (weight: 2), 2 (weight: 2), 1 (weight: 6), 6 (weight: 7), 11 (weight: 2), 13 (weight: 8).\nNode 8 is connected to nodes 7 (weight: 9), 9 (weight: 2), 2 (weight: 6), 0 (weight: 6), 12 (weight: 3).\nNode 12 is connected to nodes 7 (weight: 8), 9 (weight: 1), 2 (weight: 6), 11 (weight: 8), 8 (weight: 3), 13 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 1), 5 (weight: 6), 0 (weight: 1), 6 (weight: 3), 13 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=11, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 41, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 10 (weight: 10), 3 (weight: 7), 5 (weight: 2), 8 (weight: 9), 4 (weight: 5), 9 (weight: 1), 7 (weight: 3), 11 (weight: 4).\nNode 10 is connected to node 6 (weight: 10).\nNode 3 is connected to nodes 6 (weight: 7), 0 (weight: 5).\nNode 5 is connected to node 6 (weight: 2).\nNode 8 is connected to node 6 (weight: 9).\nNode 4 is connected to node 6 (weight: 5).\nNode 9 is connected to node 6 (weight: 1).\nNode 7 is connected to node 6 (weight: 3).\nNode 11 is connected to nodes 6 (weight: 4), 2 (weight: 7).\nNode 0 is connected to nodes 3 (weight: 5), 1 (weight: 6).\nNode 2 is connected to node 11 (weight: 7).\nNode 1 is connected to node 0 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=0, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 42, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 11 (weight: 10), 3 (weight: 4), 4 (weight: 7), 2 (weight: 8), 6 (weight: 5), 7 (weight: 3).\nNode 11 is connected to nodes 10 (weight: 10), 4 (weight: 6), 9 (weight: 3).\nNode 3 is connected to nodes 10 (weight: 4), 4 (weight: 8), 5 (weight: 7).\nNode 4 is connected to nodes 10 (weight: 7), 11 (weight: 6), 3 (weight: 8), 1 (weight: 1), 5 (weight: 5).\nNode 2 is connected to nodes 10 (weight: 8), 8 (weight: 10), 9 (weight: 4).\nNode 6 is connected to nodes 10 (weight: 5), 8 (weight: 4), 1 (weight: 10), 7 (weight: 7), 0 (weight: 10).\nNode 7 is connected to nodes 10 (weight: 3), 6 (weight: 7), 1 (weight: 5), 0 (weight: 7).\nNode 9 is connected to nodes 11 (weight: 3), 2 (weight: 4), 8 (weight: 6), 0 (weight: 6).\nNode 5 is connected to nodes 3 (weight: 7), 4 (weight: 5), 0 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 1), 6 (weight: 10), 7 (weight: 5), 8 (weight: 10).\nNode 8 is connected to nodes 2 (weight: 10), 6 (weight: 4), 9 (weight: 6), 1 (weight: 10).\nNode 0 is connected to nodes 6 (weight: 10), 7 (weight: 7), 9 (weight: 6), 5 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=8, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 43, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 8 (weight: 3), 1 (weight: 6), 7 (weight: 6), 9 (weight: 1), 4 (weight: 3), 0 (weight: 4), 3 (weight: 2).\nNode 8 is connected to nodes 2 (weight: 3), 0 (weight: 9), 3 (weight: 5).\nNode 1 is connected to nodes 2 (weight: 6), 7 (weight: 4), 0 (weight: 5).\nNode 7 is connected to nodes 2 (weight: 6), 1 (weight: 4), 0 (weight: 6), 5 (weight: 4), 9 (weight: 3).\nNode 9 is connected to nodes 2 (weight: 1), 7 (weight: 3), 4 (weight: 3).\nNode 4 is connected to nodes 2 (weight: 3), 9 (weight: 3), 0 (weight: 5), 3 (weight: 10), 6 (weight: 8).\nNode 0 is connected to nodes 2 (weight: 4), 8 (weight: 9), 1 (weight: 5), 7 (weight: 6), 4 (weight: 5), 3 (weight: 9), 5 (weight: 4).\nNode 3 is connected to nodes 2 (weight: 2), 8 (weight: 5), 4 (weight: 10), 0 (weight: 9), 5 (weight: 5).\nNode 5 is connected to nodes 7 (weight: 4), 0 (weight: 4), 3 (weight: 5).\nNode 6 is connected to node 4 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=3, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 44, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 7), 2 (weight: 6), 8 (weight: 7), 5 (weight: 6), 7 (weight: 5), 6 (weight: 7), 1 (weight: 8).\nNode 3 is connected to nodes 0 (weight: 7), 4 (weight: 8), 2 (weight: 9), 8 (weight: 8), 6 (weight: 9).\nNode 2 is connected to nodes 0 (weight: 6), 3 (weight: 9), 4 (weight: 5), 7 (weight: 6), 6 (weight: 8), 1 (weight: 5).\nNode 8 is connected to nodes 0 (weight: 7), 3 (weight: 8), 7 (weight: 4), 6 (weight: 9).\nNode 5 is connected to nodes 0 (weight: 6), 4 (weight: 4), 7 (weight: 9), 1 (weight: 4).\nNode 7 is connected to nodes 0 (weight: 5), 2 (weight: 6), 8 (weight: 4), 5 (weight: 9), 4 (weight: 7), 1 (weight: 10).\nNode 6 is connected to nodes 0 (weight: 7), 3 (weight: 9), 2 (weight: 8), 8 (weight: 9), 4 (weight: 8), 1 (weight: 6).\nNode 1 is connected to nodes 0 (weight: 8), 2 (weight: 5), 5 (weight: 4), 7 (weight: 10), 6 (weight: 6), 4 (weight: 2).\nNode 4 is connected to nodes 3 (weight: 8), 2 (weight: 5), 5 (weight: 4), 7 (weight: 7), 6 (weight: 8), 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=7, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 45, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 6 (weight: 5), 2 (weight: 10), 3 (weight: 9), 8 (weight: 9), 4 (weight: 8), 0 (weight: 4).\nNode 6 is connected to nodes 5 (weight: 5), 1 (weight: 1), 2 (weight: 2), 3 (weight: 5).\nNode 2 is connected to nodes 5 (weight: 10), 6 (weight: 2), 8 (weight: 7), 7 (weight: 9), 1 (weight: 2), 9 (weight: 6).\nNode 3 is connected to nodes 5 (weight: 9), 6 (weight: 5), 8 (weight: 2), 9 (weight: 6), 0 (weight: 1).\nNode 8 is connected to nodes 5 (weight: 9), 2 (weight: 7), 3 (weight: 2), 1 (weight: 3), 7 (weight: 10), 0 (weight: 7), 9 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 8), 7 (weight: 1).\nNode 0 is connected to nodes 5 (weight: 4), 3 (weight: 1), 8 (weight: 7).\nNode 1 is connected to nodes 6 (weight: 1), 2 (weight: 2), 8 (weight: 3).\nNode 7 is connected to nodes 2 (weight: 9), 8 (weight: 10), 4 (weight: 1).\nNode 9 is connected to nodes 2 (weight: 6), 3 (weight: 6), 8 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=7, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 46, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 10), 2 (weight: 7), 6 (weight: 9), 10 (weight: 6), 4 (weight: 8).\nNode 3 is connected to node 0 (weight: 10).\nNode 2 is connected to node 0 (weight: 7).\nNode 6 is connected to nodes 0 (weight: 9), 5 (weight: 2), 1 (weight: 1), 7 (weight: 2).\nNode 10 is connected to node 0 (weight: 6).\nNode 4 is connected to nodes 0 (weight: 8), 9 (weight: 5), 8 (weight: 8).\nNode 5 is connected to node 6 (weight: 2).\nNode 1 is connected to node 6 (weight: 1).\nNode 7 is connected to node 6 (weight: 2).\nNode 9 is connected to node 4 (weight: 5).\nNode 8 is connected to node 4 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=4, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 47, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 8 (weight: 1), 3 (weight: 6).\nNode 8 is connected to nodes 1 (weight: 4), 6 (weight: 8).\nNode 3 is connected to nodes 1 (weight: 2), 6 (weight: 1).\nNode 1 is connected to nodes 2 (weight: 4), 3 (weight: 2), 7 (weight: 8).\nNode 2 is connected to nodes 0 (weight: 1), 8 (weight: 10).\nNode 0 is connected to nodes 7 (weight: 6), 5 (weight: 10), 1 (weight: 9), 2 (weight: 3).\nNode 7 is connected to nodes 1 (weight: 6), 4 (weight: 9), 6 (weight: 9).\nNode 5 is connected to nodes 4 (weight: 9), 6 (weight: 6), 0 (weight: 10), 7 (weight: 3).\nNode 4 is connected to nodes 0 (weight: 6), 8 (weight: 5), 3 (weight: 8), 7 (weight: 7), 1 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=6, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 48, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 2 (weight: 1), 1 (weight: 3), 3 (weight: 9), 0 (weight: 1), 8 (weight: 6).\nNode 2 is connected to node 5 (weight: 1).\nNode 1 is connected to nodes 5 (weight: 3), 7 (weight: 9), 4 (weight: 8).\nNode 3 is connected to node 5 (weight: 9).\nNode 0 is connected to nodes 5 (weight: 1), 9 (weight: 10).\nNode 8 is connected to node 5 (weight: 6).\nNode 7 is connected to node 1 (weight: 9).\nNode 4 is connected to nodes 1 (weight: 8), 6 (weight: 3).\nNode 9 is connected to node 0 (weight: 10).\nNode 6 is connected to node 4 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=0, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 49, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 8 (weight: 1), 4 (weight: 7), 6 (weight: 9), 1 (weight: 8).\nNode 8 is connected to nodes 12 (weight: 1), 2 (weight: 2), 10 (weight: 7), 13 (weight: 5), 5 (weight: 10), 6 (weight: 5), 11 (weight: 6).\nNode 4 is connected to nodes 12 (weight: 7), 10 (weight: 2), 0 (weight: 10), 7 (weight: 1), 6 (weight: 3), 11 (weight: 9), 9 (weight: 4), 1 (weight: 8), 3 (weight: 5).\nNode 6 is connected to nodes 12 (weight: 9), 8 (weight: 5), 4 (weight: 3), 2 (weight: 8), 13 (weight: 8), 7 (weight: 7), 5 (weight: 4), 9 (weight: 8).\nNode 1 is connected to nodes 12 (weight: 8), 4 (weight: 8), 13 (weight: 3), 0 (weight: 7), 7 (weight: 8).\nNode 2 is connected to nodes 8 (weight: 2), 6 (weight: 8), 13 (weight: 6), 0 (weight: 5), 7 (weight: 7), 5 (weight: 7), 11 (weight: 5), 9 (weight: 5).\nNode 10 is connected to nodes 8 (weight: 7), 4 (weight: 2), 0 (weight: 5), 5 (weight: 5), 11 (weight: 5), 3 (weight: 7).\nNode 13 is connected to nodes 8 (weight: 5), 6 (weight: 8), 1 (weight: 3), 2 (weight: 6), 7 (weight: 4), 5 (weight: 3), 11 (weight: 2), 3 (weight: 7).\nNode 5 is connected to nodes 8 (weight: 10), 6 (weight: 4), 2 (weight: 7), 13 (weight: 3), 10 (weight: 5), 9 (weight: 6).\nNode 11 is connected to nodes 8 (weight: 6), 4 (weight: 9), 2 (weight: 5), 13 (weight: 2), 7 (weight: 8), 10 (weight: 5), 9 (weight: 9).\nNode 0 is connected to nodes 4 (weight: 10), 1 (weight: 7), 2 (weight: 5), 10 (weight: 5), 7 (weight: 3), 9 (weight: 10), 3 (weight: 5).\nNode 7 is connected to nodes 4 (weight: 1), 6 (weight: 7), 1 (weight: 8), 2 (weight: 7), 13 (weight: 4), 0 (weight: 3), 11 (weight: 8), 9 (weight: 8), 3 (weight: 10).\nNode 9 is connected to nodes 4 (weight: 4), 6 (weight: 8), 2 (weight: 5), 0 (weight: 10), 7 (weight: 8), 5 (weight: 6), 11 (weight: 9).\nNode 3 is connected to nodes 4 (weight: 5), 13 (weight: 7), 0 (weight: 5), 7 (weight: 10), 10 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 11\nlength = nx.shortest_path_length(G, source=10, target=11)\nprint(length)\n```"}, {"id": 50, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 5 (weight: 1), 7 (weight: 6), 1 (weight: 6).\nNode 5 is connected to nodes 10 (weight: 1), 3 (weight: 6), 2 (weight: 8), 6 (weight: 2), 0 (weight: 8).\nNode 7 is connected to nodes 10 (weight: 6), 3 (weight: 5), 8 (weight: 1), 4 (weight: 5).\nNode 1 is connected to nodes 10 (weight: 6), 9 (weight: 6), 0 (weight: 8).\nNode 3 is connected to nodes 5 (weight: 6), 7 (weight: 5), 2 (weight: 8).\nNode 2 is connected to nodes 5 (weight: 8), 3 (weight: 8), 8 (weight: 6), 4 (weight: 7).\nNode 6 is connected to nodes 5 (weight: 2), 11 (weight: 4), 9 (weight: 6).\nNode 0 is connected to nodes 5 (weight: 8), 1 (weight: 8), 8 (weight: 10), 4 (weight: 4).\nNode 8 is connected to nodes 7 (weight: 1), 2 (weight: 6), 11 (weight: 2), 0 (weight: 10).\nNode 4 is connected to nodes 7 (weight: 5), 2 (weight: 7), 11 (weight: 1), 9 (weight: 4), 0 (weight: 4).\nNode 9 is connected to nodes 1 (weight: 6), 4 (weight: 4), 6 (weight: 6).\nNode 11 is connected to nodes 8 (weight: 2), 4 (weight: 1), 6 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=9, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 51, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 0 (weight: 3), 5 (weight: 7), 6 (weight: 8), 14 (weight: 6), 10 (weight: 1), 8 (weight: 9), 7 (weight: 8).\nNode 0 is connected to nodes 11 (weight: 3), 2 (weight: 7), 14 (weight: 7), 7 (weight: 2).\nNode 5 is connected to nodes 11 (weight: 7), 1 (weight: 9), 4 (weight: 8), 6 (weight: 5), 2 (weight: 8), 14 (weight: 10).\nNode 6 is connected to nodes 11 (weight: 8), 5 (weight: 5), 1 (weight: 8), 2 (weight: 10), 12 (weight: 1), 9 (weight: 1), 8 (weight: 1).\nNode 14 is connected to nodes 11 (weight: 6), 0 (weight: 7), 5 (weight: 10), 1 (weight: 1), 4 (weight: 1), 2 (weight: 2), 9 (weight: 7), 8 (weight: 9), 7 (weight: 8).\nNode 10 is connected to nodes 11 (weight: 1), 2 (weight: 9), 12 (weight: 4), 8 (weight: 8).\nNode 8 is connected to nodes 11 (weight: 9), 6 (weight: 1), 14 (weight: 9), 10 (weight: 8), 1 (weight: 8), 3 (weight: 1).\nNode 7 is connected to nodes 11 (weight: 8), 0 (weight: 2), 14 (weight: 8), 2 (weight: 8), 12 (weight: 6), 9 (weight: 5).\nNode 2 is connected to nodes 0 (weight: 7), 5 (weight: 8), 6 (weight: 10), 14 (weight: 2), 10 (weight: 9), 7 (weight: 8), 3 (weight: 9), 12 (weight: 5), 9 (weight: 7).\nNode 1 is connected to nodes 5 (weight: 9), 6 (weight: 8), 14 (weight: 1), 8 (weight: 8).\nNode 4 is connected to nodes 5 (weight: 8), 14 (weight: 1), 3 (weight: 4).\nNode 12 is connected to nodes 6 (weight: 1), 10 (weight: 4), 7 (weight: 6), 2 (weight: 5), 9 (weight: 1).\nNode 9 is connected to nodes 6 (weight: 1), 14 (weight: 7), 7 (weight: 5), 2 (weight: 7), 12 (weight: 1), 13 (weight: 5).\nNode 3 is connected to nodes 8 (weight: 1), 2 (weight: 9), 4 (weight: 4), 13 (weight: 3).\nNode 13 is connected to nodes 3 (weight: 3), 9 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=3, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 52, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 5 (weight: 9), 2 (weight: 4), 1 (weight: 10).\nNode 5 is connected to node 0 (weight: 1).\nNode 2 is connected to nodes 1 (weight: 8), 4 (weight: 2), 0 (weight: 7), 7 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 4), 3 (weight: 7), 6 (weight: 2).\nNode 4 is connected to nodes 5 (weight: 1), 3 (weight: 2), 2 (weight: 10).\nNode 7 is connected to nodes 1 (weight: 2), 5 (weight: 9), 3 (weight: 2).\nNode 3 is connected to node 6 (weight: 4).\nNode 6 is connected to node 3 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=1, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 53, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 6 (weight: 7), 4 (weight: 1).\nNode 6 is connected to nodes 7 (weight: 7), 5 (weight: 8), 3 (weight: 4).\nNode 4 is connected to nodes 7 (weight: 1), 0 (weight: 5).\nNode 5 is connected to nodes 6 (weight: 8), 1 (weight: 7).\nNode 3 is connected to nodes 6 (weight: 4), 1 (weight: 1).\nNode 0 is connected to nodes 4 (weight: 5), 2 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 7), 3 (weight: 1).\nNode 2 is connected to node 0 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 54, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 0 (weight: 10), 11 (weight: 8), 4 (weight: 2), 8 (weight: 3), 10 (weight: 5), 7 (weight: 9), 12 (weight: 7), 6 (weight: 5), 5 (weight: 2), 1 (weight: 3), 9 (weight: 7).\nNode 0 is connected to nodes 2 (weight: 10), 3 (weight: 9), 4 (weight: 9), 8 (weight: 1), 10 (weight: 1), 7 (weight: 7), 12 (weight: 9), 1 (weight: 8), 9 (weight: 2).\nNode 11 is connected to nodes 2 (weight: 8), 3 (weight: 2), 4 (weight: 3), 7 (weight: 2), 9 (weight: 4).\nNode 4 is connected to nodes 2 (weight: 2), 0 (weight: 9), 11 (weight: 3), 3 (weight: 7), 8 (weight: 4), 10 (weight: 10), 7 (weight: 9), 6 (weight: 1), 5 (weight: 10), 1 (weight: 9).\nNode 8 is connected to nodes 2 (weight: 3), 0 (weight: 1), 4 (weight: 4), 3 (weight: 2), 10 (weight: 3), 12 (weight: 10), 6 (weight: 7), 5 (weight: 2), 9 (weight: 5).\nNode 10 is connected to nodes 2 (weight: 5), 0 (weight: 1), 4 (weight: 10), 8 (weight: 3), 3 (weight: 4), 5 (weight: 4), 1 (weight: 1), 9 (weight: 6).\nNode 7 is connected to nodes 2 (weight: 9), 0 (weight: 7), 11 (weight: 2), 4 (weight: 9), 3 (weight: 5), 6 (weight: 2), 5 (weight: 5), 1 (weight: 7), 9 (weight: 9).\nNode 12 is connected to nodes 2 (weight: 7), 0 (weight: 9), 8 (weight: 10), 3 (weight: 6), 5 (weight: 10), 1 (weight: 1), 9 (weight: 6).\nNode 6 is connected to nodes 2 (weight: 5), 4 (weight: 1), 8 (weight: 7), 7 (weight: 2), 3 (weight: 6), 5 (weight: 7), 1 (weight: 10).\nNode 5 is connected to nodes 2 (weight: 2), 4 (weight: 10), 8 (weight: 2), 10 (weight: 4), 7 (weight: 5), 12 (weight: 10), 6 (weight: 7), 3 (weight: 5), 1 (weight: 10), 9 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 3), 0 (weight: 8), 4 (weight: 9), 10 (weight: 1), 7 (weight: 7), 12 (weight: 1), 6 (weight: 10), 5 (weight: 10).\nNode 9 is connected to nodes 2 (weight: 7), 0 (weight: 2), 11 (weight: 4), 8 (weight: 5), 10 (weight: 6), 7 (weight: 9), 12 (weight: 6), 5 (weight: 4), 3 (weight: 1).\nNode 3 is connected to nodes 0 (weight: 9), 11 (weight: 2), 4 (weight: 7), 8 (weight: 2), 10 (weight: 4), 7 (weight: 5), 12 (weight: 6), 6 (weight: 6), 5 (weight: 5), 9 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=1, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 55, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to node 0 (weight: 2).\nNode 0 is connected to nodes 11 (weight: 2), 7 (weight: 5), 6 (weight: 8), 8 (weight: 2), 4 (weight: 7), 1 (weight: 5), 10 (weight: 5).\nNode 7 is connected to node 0 (weight: 5).\nNode 6 is connected to node 0 (weight: 8).\nNode 8 is connected to nodes 0 (weight: 2), 2 (weight: 10), 5 (weight: 4), 3 (weight: 5).\nNode 4 is connected to nodes 0 (weight: 7), 9 (weight: 4).\nNode 1 is connected to node 0 (weight: 5).\nNode 10 is connected to node 0 (weight: 5).\nNode 2 is connected to node 8 (weight: 10).\nNode 5 is connected to node 8 (weight: 4).\nNode 3 is connected to node 8 (weight: 5).\nNode 9 is connected to node 4 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 6 to node 7\nlength = nx.shortest_path_length(G, source=6, target=7)\nprint(length)\n```"}, {"id": 56, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 5 (weight: 10), 8 (weight: 5).\nNode 5 is connected to node 9 (weight: 10).\nNode 8 is connected to nodes 9 (weight: 5), 0 (weight: 9), 10 (weight: 6), 1 (weight: 8), 2 (weight: 8), 6 (weight: 5).\nNode 0 is connected to node 8 (weight: 9).\nNode 10 is connected to node 8 (weight: 6).\nNode 1 is connected to nodes 8 (weight: 8), 4 (weight: 5).\nNode 2 is connected to nodes 8 (weight: 8), 7 (weight: 1).\nNode 6 is connected to nodes 8 (weight: 5), 3 (weight: 10).\nNode 4 is connected to node 1 (weight: 5).\nNode 7 is connected to node 2 (weight: 1).\nNode 3 is connected to node 6 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=8, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 57, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 3), 1 (weight: 10), 5 (weight: 6), 12 (weight: 9), 8 (weight: 4), 4 (weight: 6), 11 (weight: 9), 7 (weight: 7), 9 (weight: 6), 0 (weight: 7).\nNode 6 is connected to nodes 2 (weight: 3), 9 (weight: 6), 4 (weight: 3), 8 (weight: 8).\nNode 1 is connected to nodes 2 (weight: 10), 9 (weight: 2), 3 (weight: 8), 8 (weight: 9), 0 (weight: 4).\nNode 5 is connected to nodes 2 (weight: 6), 9 (weight: 4), 8 (weight: 6), 12 (weight: 6).\nNode 12 is connected to nodes 2 (weight: 9), 5 (weight: 6), 9 (weight: 1), 7 (weight: 6), 3 (weight: 8).\nNode 8 is connected to nodes 2 (weight: 4), 6 (weight: 8), 1 (weight: 9), 5 (weight: 6), 9 (weight: 4), 10 (weight: 7), 3 (weight: 10), 0 (weight: 3).\nNode 4 is connected to nodes 2 (weight: 6), 6 (weight: 3), 9 (weight: 4), 7 (weight: 4).\nNode 11 is connected to nodes 2 (weight: 9), 9 (weight: 7).\nNode 7 is connected to nodes 2 (weight: 7), 12 (weight: 6), 4 (weight: 4), 9 (weight: 6), 0 (weight: 7), 3 (weight: 9).\nNode 9 is connected to nodes 2 (weight: 6), 6 (weight: 6), 1 (weight: 2), 5 (weight: 4), 12 (weight: 1), 8 (weight: 4), 4 (weight: 4), 11 (weight: 7), 7 (weight: 6), 10 (weight: 5), 3 (weight: 6), 0 (weight: 7).\nNode 0 is connected to nodes 2 (weight: 7), 1 (weight: 4), 8 (weight: 3), 7 (weight: 7), 9 (weight: 7).\nNode 3 is connected to nodes 1 (weight: 8), 12 (weight: 8), 8 (weight: 10), 7 (weight: 9), 9 (weight: 6).\nNode 10 is connected to nodes 8 (weight: 7), 9 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=4, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 58, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 1 (weight: 10), 13 (weight: 10), 7 (weight: 9), 2 (weight: 9), 4 (weight: 8).\nNode 1 is connected to nodes 0 (weight: 10), 7 (weight: 9), 4 (weight: 5).\nNode 13 is connected to nodes 0 (weight: 10), 6 (weight: 5), 4 (weight: 3), 7 (weight: 8), 5 (weight: 4), 9 (weight: 6), 12 (weight: 9), 11 (weight: 8).\nNode 7 is connected to nodes 0 (weight: 9), 1 (weight: 9), 13 (weight: 8), 8 (weight: 2), 4 (weight: 2), 5 (weight: 4), 9 (weight: 3), 11 (weight: 4).\nNode 2 is connected to nodes 0 (weight: 9), 3 (weight: 6), 11 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 8), 1 (weight: 5), 13 (weight: 3), 7 (weight: 2), 8 (weight: 1), 10 (weight: 7), 11 (weight: 8), 5 (weight: 7), 9 (weight: 4).\nNode 6 is connected to nodes 13 (weight: 5), 8 (weight: 2), 11 (weight: 8).\nNode 5 is connected to nodes 13 (weight: 4), 7 (weight: 4), 4 (weight: 7).\nNode 9 is connected to nodes 13 (weight: 6), 7 (weight: 3), 4 (weight: 4), 3 (weight: 8), 12 (weight: 1).\nNode 12 is connected to nodes 13 (weight: 9), 3 (weight: 7), 9 (weight: 1).\nNode 11 is connected to nodes 13 (weight: 8), 7 (weight: 4), 2 (weight: 9), 4 (weight: 8), 6 (weight: 8), 3 (weight: 7).\nNode 8 is connected to nodes 7 (weight: 2), 4 (weight: 1), 6 (weight: 2), 3 (weight: 6).\nNode 3 is connected to nodes 2 (weight: 6), 8 (weight: 6), 9 (weight: 8), 11 (weight: 7), 12 (weight: 7).\nNode 10 is connected to node 4 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=10, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 59, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 1 (weight: 7), 10 (weight: 6), 0 (weight: 4).\nNode 1 is connected to nodes 5 (weight: 7), 4 (weight: 9).\nNode 10 is connected to nodes 5 (weight: 6), 11 (weight: 5), 8 (weight: 3).\nNode 0 is connected to nodes 5 (weight: 4), 7 (weight: 10).\nNode 4 is connected to node 1 (weight: 9).\nNode 11 is connected to nodes 10 (weight: 5), 6 (weight: 4).\nNode 8 is connected to nodes 10 (weight: 3), 3 (weight: 1), 6 (weight: 2).\nNode 7 is connected to node 0 (weight: 10).\nNode 9 is connected to nodes 3 (weight: 3), 2 (weight: 2).\nNode 3 is connected to nodes 9 (weight: 3), 8 (weight: 1).\nNode 2 is connected to node 9 (weight: 2).\nNode 6 is connected to nodes 8 (weight: 2), 11 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=1, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 60, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to node 8 (weight: 3).\nNode 8 is connected to nodes 2 (weight: 3), 9 (weight: 7).\nNode 9 is connected to nodes 8 (weight: 7), 0 (weight: 5), 4 (weight: 8).\nNode 0 is connected to nodes 9 (weight: 5), 7 (weight: 6).\nNode 4 is connected to nodes 9 (weight: 8), 10 (weight: 1).\nNode 7 is connected to nodes 0 (weight: 6), 5 (weight: 3).\nNode 5 is connected to nodes 7 (weight: 3), 1 (weight: 6).\nNode 1 is connected to nodes 5 (weight: 6), 6 (weight: 8).\nNode 6 is connected to nodes 1 (weight: 8), 3 (weight: 9).\nNode 10 is connected to nodes 4 (weight: 1), 3 (weight: 10).\nNode 3 is connected to nodes 10 (weight: 10), 6 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 9 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=9, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 61, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 3 (weight: 2), 10 (weight: 4), 1 (weight: 3), 5 (weight: 7).\nNode 3 is connected to nodes 6 (weight: 2), 0 (weight: 7), 10 (weight: 4), 9 (weight: 1).\nNode 10 is connected to nodes 6 (weight: 4), 3 (weight: 4), 7 (weight: 9), 1 (weight: 7), 4 (weight: 5).\nNode 1 is connected to nodes 6 (weight: 3), 10 (weight: 7), 2 (weight: 3), 9 (weight: 10), 5 (weight: 2).\nNode 5 is connected to nodes 6 (weight: 7), 1 (weight: 2).\nNode 0 is connected to nodes 3 (weight: 7), 2 (weight: 5), 8 (weight: 5).\nNode 9 is connected to nodes 3 (weight: 1), 1 (weight: 10), 2 (weight: 10), 8 (weight: 1).\nNode 7 is connected to nodes 10 (weight: 9), 11 (weight: 10).\nNode 4 is connected to nodes 10 (weight: 5), 11 (weight: 10).\nNode 2 is connected to nodes 1 (weight: 3), 0 (weight: 5), 9 (weight: 10), 8 (weight: 2).\nNode 8 is connected to nodes 0 (weight: 5), 9 (weight: 1), 2 (weight: 2), 11 (weight: 1).\nNode 11 is connected to nodes 8 (weight: 1), 7 (weight: 10), 4 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 62, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 5 (weight: 5), 1 (weight: 5), 3 (weight: 5), 8 (weight: 4), 10 (weight: 3), 6 (weight: 7).\nNode 5 is connected to nodes 2 (weight: 5), 3 (weight: 9), 1 (weight: 9).\nNode 1 is connected to nodes 2 (weight: 5), 5 (weight: 9), 8 (weight: 6), 0 (weight: 5), 7 (weight: 6), 4 (weight: 10), 10 (weight: 10), 9 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 5), 5 (weight: 9), 9 (weight: 9).\nNode 8 is connected to nodes 2 (weight: 4), 1 (weight: 6), 6 (weight: 7), 7 (weight: 5), 9 (weight: 8), 10 (weight: 1).\nNode 10 is connected to nodes 2 (weight: 3), 1 (weight: 10), 8 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 7), 8 (weight: 7), 9 (weight: 9).\nNode 0 is connected to nodes 1 (weight: 5), 9 (weight: 9), 4 (weight: 1).\nNode 7 is connected to nodes 1 (weight: 6), 8 (weight: 5), 9 (weight: 9).\nNode 4 is connected to nodes 1 (weight: 10), 9 (weight: 10), 0 (weight: 1).\nNode 9 is connected to nodes 1 (weight: 2), 3 (weight: 9), 8 (weight: 8), 6 (weight: 9), 0 (weight: 9), 7 (weight: 9), 4 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=4, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 63, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 7 (weight: 3), 3 (weight: 4), 8 (weight: 3).\nNode 7 is connected to nodes 10 (weight: 3), 0 (weight: 10), 5 (weight: 7), 4 (weight: 9), 3 (weight: 6).\nNode 3 is connected to nodes 10 (weight: 4), 7 (weight: 6), 4 (weight: 9), 5 (weight: 2).\nNode 8 is connected to nodes 10 (weight: 3), 2 (weight: 1), 4 (weight: 5), 11 (weight: 10).\nNode 0 is connected to nodes 7 (weight: 10), 5 (weight: 8), 9 (weight: 3).\nNode 5 is connected to nodes 7 (weight: 7), 3 (weight: 2), 0 (weight: 8), 2 (weight: 5), 6 (weight: 3), 9 (weight: 4).\nNode 4 is connected to nodes 7 (weight: 9), 3 (weight: 9), 8 (weight: 5), 2 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 1), 5 (weight: 5), 4 (weight: 7), 1 (weight: 5).\nNode 11 is connected to nodes 8 (weight: 10), 1 (weight: 1), 6 (weight: 7).\nNode 9 is connected to nodes 0 (weight: 3), 5 (weight: 4), 1 (weight: 6), 6 (weight: 4).\nNode 6 is connected to nodes 5 (weight: 3), 11 (weight: 7), 1 (weight: 2), 9 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 5), 11 (weight: 1), 9 (weight: 6), 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=0, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 64, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 12 (weight: 5), 10 (weight: 1).\nNode 12 is connected to nodes 13 (weight: 3), 9 (weight: 2).\nNode 13 is connected to nodes 0 (weight: 1), 12 (weight: 5), 10 (weight: 8).\nNode 9 is connected to nodes 8 (weight: 7), 5 (weight: 7).\nNode 0 is connected to nodes 13 (weight: 6), 4 (weight: 5).\nNode 8 is connected to nodes 14 (weight: 10), 5 (weight: 10), 1 (weight: 6).\nNode 5 is connected to nodes 4 (weight: 5), 8 (weight: 10), 6 (weight: 1).\nNode 14 is connected to nodes 1 (weight: 10), 9 (weight: 6).\nNode 1 is connected to nodes 3 (weight: 6), 4 (weight: 3), 14 (weight: 9), 6 (weight: 9), 10 (weight: 1), 7 (weight: 5).\nNode 6 is connected to nodes 12 (weight: 5), 1 (weight: 9), 2 (weight: 5), 9 (weight: 3).\nNode 3 is connected to node 12 (weight: 7).\nNode 11 is connected to nodes 0 (weight: 6), 9 (weight: 6), 4 (weight: 10).\nNode 7 is connected to nodes 9 (weight: 2), 8 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=1, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 65, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 6), 4 (weight: 8), 3 (weight: 2), 8 (weight: 8), 7 (weight: 1), 5 (weight: 3), 0 (weight: 7).\nNode 2 is connected to node 6 (weight: 6).\nNode 4 is connected to node 6 (weight: 8).\nNode 3 is connected to nodes 6 (weight: 2), 1 (weight: 4).\nNode 8 is connected to node 6 (weight: 8).\nNode 7 is connected to node 6 (weight: 1).\nNode 5 is connected to node 6 (weight: 3).\nNode 0 is connected to node 6 (weight: 7).\nNode 1 is connected to node 3 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=7, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 66, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to node 6 (weight: 3).\nNode 6 is connected to nodes 11 (weight: 3), 10 (weight: 6).\nNode 10 is connected to nodes 6 (weight: 6), 2 (weight: 4), 8 (weight: 6).\nNode 2 is connected to nodes 10 (weight: 4), 5 (weight: 2).\nNode 8 is connected to nodes 10 (weight: 6), 0 (weight: 8), 1 (weight: 5).\nNode 5 is connected to nodes 2 (weight: 2), 3 (weight: 7).\nNode 0 is connected to nodes 8 (weight: 8), 4 (weight: 8).\nNode 1 is connected to nodes 8 (weight: 5), 9 (weight: 3).\nNode 4 is connected to node 0 (weight: 8).\nNode 3 is connected to nodes 5 (weight: 7), 7 (weight: 6).\nNode 7 is connected to nodes 3 (weight: 6), 9 (weight: 10).\nNode 9 is connected to nodes 7 (weight: 10), 1 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 1 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=1, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 67, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 12 (weight: 2), 1 (weight: 7), 11 (weight: 3), 8 (weight: 9), 3 (weight: 2).\nNode 12 is connected to nodes 10 (weight: 9), 2 (weight: 10), 8 (weight: 8), 6 (weight: 8).\nNode 1 is connected to nodes 8 (weight: 3), 3 (weight: 7), 0 (weight: 7), 6 (weight: 5), 2 (weight: 1), 7 (weight: 4).\nNode 11 is connected to nodes 0 (weight: 2), 4 (weight: 1), 5 (weight: 9), 1 (weight: 7).\nNode 8 is connected to nodes 3 (weight: 1), 0 (weight: 8), 4 (weight: 5), 2 (weight: 8), 7 (weight: 2).\nNode 3 is connected to nodes 0 (weight: 9), 5 (weight: 6), 2 (weight: 8).\nNode 10 is connected to nodes 2 (weight: 10), 3 (weight: 3), 4 (weight: 8), 9 (weight: 6).\nNode 2 is connected to nodes 11 (weight: 10), 4 (weight: 2), 12 (weight: 3).\nNode 6 is connected to nodes 9 (weight: 2), 1 (weight: 2), 11 (weight: 5), 3 (weight: 7), 4 (weight: 9).\nNode 0 is connected to nodes 12 (weight: 2), 7 (weight: 9), 11 (weight: 8), 8 (weight: 10).\nNode 7 is connected to nodes 8 (weight: 5), 3 (weight: 5), 12 (weight: 3), 10 (weight: 6), 2 (weight: 4).\nNode 5 is connected to nodes 2 (weight: 7), 0 (weight: 3), 12 (weight: 9).\nNode 9 is connected to nodes 10 (weight: 3), 2 (weight: 9), 7 (weight: 6), 11 (weight: 5), 3 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 6\nlength = nx.shortest_path_length(G, source=12, target=6, weight='weight')\nprint(length)\n```"}, {"id": 68, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 1 is connected to nodes 5 (weight: 1), 0 (weight: 4), 4 (weight: 8).\nNode 5 is connected to nodes 1 (weight: 1), 2 (weight: 9).\nNode 0 is connected to nodes 1 (weight: 4), 8 (weight: 2).\nNode 4 is connected to nodes 1 (weight: 8), 6 (weight: 10), 3 (weight: 2).\nNode 2 is connected to nodes 5 (weight: 9), 8 (weight: 3).\nNode 8 is connected to nodes 0 (weight: 2), 2 (weight: 3).\nNode 6 is connected to nodes 4 (weight: 10), 7 (weight: 9).\nNode 3 is connected to node 4 (weight: 2).\nNode 7 is connected to node 6 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=5, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 69, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 3 (weight: 7), 4 (weight: 8), 5 (weight: 1), 7 (weight: 10), 2 (weight: 1).\nNode 3 is connected to nodes 11 (weight: 3), 5 (weight: 7), 8 (weight: 2).\nNode 4 is connected to nodes 5 (weight: 8), 7 (weight: 3), 8 (weight: 10), 1 (weight: 5), 9 (weight: 9), 3 (weight: 2).\nNode 5 is connected to nodes 7 (weight: 2), 8 (weight: 9), 9 (weight: 10), 10 (weight: 2), 6 (weight: 7), 0 (weight: 5).\nNode 7 is connected to nodes 1 (weight: 3), 9 (weight: 1), 3 (weight: 4), 5 (weight: 10).\nNode 2 is connected to nodes 8 (weight: 9), 10 (weight: 2), 6 (weight: 8).\nNode 11 is connected to nodes 2 (weight: 10), 3 (weight: 5), 10 (weight: 9).\nNode 8 is connected to nodes 9 (weight: 4), 4 (weight: 9), 10 (weight: 10), 11 (weight: 6), 2 (weight: 8).\nNode 9 is connected to nodes 4 (weight: 4), 0 (weight: 9), 5 (weight: 5), 2 (weight: 7).\nNode 10 is connected to nodes 11 (weight: 7), 0 (weight: 3), 5 (weight: 9), 2 (weight: 3), 3 (weight: 4).\nNode 6 is connected to nodes 0 (weight: 7), 1 (weight: 8), 3 (weight: 10).\nNode 0 is connected to nodes 5 (weight: 7), 7 (weight: 7), 9 (weight: 5), 3 (weight: 4), 4 (weight: 6), 6 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=8, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 70, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 6 (weight: 6), 2 (weight: 6), 7 (weight: 7), 8 (weight: 9), 12 (weight: 4), 10 (weight: 10), 4 (weight: 7).\nNode 6 is connected to nodes 1 (weight: 6), 12 (weight: 3), 5 (weight: 9), 9 (weight: 8), 0 (weight: 4).\nNode 2 is connected to nodes 1 (weight: 6), 4 (weight: 9), 3 (weight: 1).\nNode 7 is connected to nodes 1 (weight: 7), 12 (weight: 4).\nNode 8 is connected to nodes 1 (weight: 9), 0 (weight: 7).\nNode 12 is connected to nodes 1 (weight: 4), 6 (weight: 3), 7 (weight: 4).\nNode 10 is connected to nodes 1 (weight: 10), 4 (weight: 4).\nNode 4 is connected to nodes 1 (weight: 7), 2 (weight: 9), 10 (weight: 4), 0 (weight: 7), 3 (weight: 3), 9 (weight: 6).\nNode 5 is connected to nodes 6 (weight: 9), 0 (weight: 3).\nNode 9 is connected to nodes 6 (weight: 8), 4 (weight: 6), 11 (weight: 9).\nNode 0 is connected to nodes 6 (weight: 4), 8 (weight: 7), 4 (weight: 7), 5 (weight: 3), 11 (weight: 5).\nNode 3 is connected to nodes 2 (weight: 1), 4 (weight: 3).\nNode 11 is connected to nodes 9 (weight: 9), 0 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=11, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 71, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 4), 5 (weight: 8), 8 (weight: 6), 0 (weight: 1), 6 (weight: 9), 7 (weight: 1), 2 (weight: 8), 9 (weight: 10), 1 (weight: 4).\nNode 3 is connected to nodes 4 (weight: 4), 9 (weight: 4), 0 (weight: 10), 8 (weight: 7).\nNode 5 is connected to node 4 (weight: 8).\nNode 8 is connected to nodes 4 (weight: 6), 3 (weight: 7), 2 (weight: 2).\nNode 0 is connected to nodes 4 (weight: 1), 3 (weight: 10), 9 (weight: 1).\nNode 6 is connected to nodes 4 (weight: 9), 7 (weight: 8), 9 (weight: 7).\nNode 7 is connected to nodes 4 (weight: 1), 6 (weight: 8), 2 (weight: 7), 1 (weight: 1), 9 (weight: 2).\nNode 2 is connected to nodes 4 (weight: 8), 8 (weight: 2), 7 (weight: 7), 1 (weight: 10), 9 (weight: 10).\nNode 9 is connected to nodes 4 (weight: 10), 3 (weight: 4), 0 (weight: 1), 6 (weight: 7), 7 (weight: 2), 2 (weight: 10).\nNode 1 is connected to nodes 4 (weight: 4), 7 (weight: 1), 2 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=8, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 72, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 8 (weight: 4), 9 (weight: 9), 7 (weight: 5), 2 (weight: 4), 5 (weight: 10), 6 (weight: 3), 0 (weight: 4).\nNode 8 is connected to nodes 1 (weight: 4), 10 (weight: 2), 9 (weight: 1).\nNode 9 is connected to nodes 1 (weight: 9), 8 (weight: 1), 3 (weight: 6), 10 (weight: 8), 6 (weight: 3), 5 (weight: 3), 0 (weight: 3), 7 (weight: 1).\nNode 7 is connected to nodes 1 (weight: 5), 9 (weight: 1), 11 (weight: 4), 0 (weight: 1).\nNode 2 is connected to nodes 1 (weight: 4), 4 (weight: 2), 0 (weight: 9), 11 (weight: 2), 6 (weight: 7).\nNode 5 is connected to nodes 1 (weight: 10), 9 (weight: 3), 10 (weight: 2), 11 (weight: 7).\nNode 6 is connected to nodes 1 (weight: 3), 9 (weight: 3), 2 (weight: 7), 4 (weight: 9), 10 (weight: 8).\nNode 0 is connected to nodes 1 (weight: 4), 9 (weight: 3), 7 (weight: 1), 2 (weight: 9), 4 (weight: 6).\nNode 10 is connected to nodes 8 (weight: 2), 9 (weight: 8), 5 (weight: 2), 6 (weight: 8), 3 (weight: 1).\nNode 3 is connected to nodes 9 (weight: 6), 10 (weight: 1).\nNode 11 is connected to nodes 7 (weight: 4), 2 (weight: 2), 5 (weight: 7).\nNode 4 is connected to nodes 2 (weight: 2), 6 (weight: 9), 0 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=6, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 73, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 1), 4 (weight: 5).\nNode 3 is connected to nodes 0 (weight: 1), 1 (weight: 6).\nNode 4 is connected to nodes 0 (weight: 5), 7 (weight: 10), 1 (weight: 6).\nNode 1 is connected to nodes 3 (weight: 6), 4 (weight: 6), 2 (weight: 2).\nNode 7 is connected to nodes 4 (weight: 10), 8 (weight: 10).\nNode 2 is connected to node 1 (weight: 2).\nNode 8 is connected to nodes 7 (weight: 10), 6 (weight: 10).\nNode 6 is connected to nodes 8 (weight: 10), 5 (weight: 5).\nNode 5 is connected to node 6 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=4, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 74, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 5 (weight: 10), 4 (weight: 8), 9 (weight: 10), 6 (weight: 6).\nNode 5 is connected to nodes 8 (weight: 10), 0 (weight: 3), 7 (weight: 3), 3 (weight: 9), 1 (weight: 9).\nNode 4 is connected to nodes 8 (weight: 8), 0 (weight: 6), 7 (weight: 8), 3 (weight: 10).\nNode 9 is connected to nodes 8 (weight: 10), 0 (weight: 7), 1 (weight: 4), 2 (weight: 8), 6 (weight: 10).\nNode 6 is connected to nodes 8 (weight: 6), 9 (weight: 10), 1 (weight: 10).\nNode 0 is connected to nodes 5 (weight: 3), 4 (weight: 6), 9 (weight: 7), 2 (weight: 4).\nNode 7 is connected to nodes 5 (weight: 3), 4 (weight: 8), 2 (weight: 6), 3 (weight: 10).\nNode 3 is connected to nodes 5 (weight: 9), 4 (weight: 10), 7 (weight: 10), 1 (weight: 5).\nNode 1 is connected to nodes 5 (weight: 9), 9 (weight: 4), 6 (weight: 10), 3 (weight: 5).\nNode 2 is connected to nodes 9 (weight: 8), 0 (weight: 4), 7 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=5, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 75, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 7), 6 (weight: 8), 1 (weight: 5), 2 (weight: 6), 10 (weight: 1).\nNode 3 is connected to nodes 4 (weight: 7), 5 (weight: 4).\nNode 6 is connected to node 4 (weight: 8).\nNode 1 is connected to nodes 4 (weight: 5), 8 (weight: 10), 12 (weight: 5), 7 (weight: 9), 0 (weight: 5).\nNode 2 is connected to node 4 (weight: 6).\nNode 10 is connected to nodes 4 (weight: 1), 9 (weight: 3).\nNode 5 is connected to nodes 3 (weight: 4), 11 (weight: 7).\nNode 8 is connected to node 1 (weight: 10).\nNode 12 is connected to node 1 (weight: 5).\nNode 7 is connected to node 1 (weight: 9).\nNode 0 is connected to node 1 (weight: 5).\nNode 9 is connected to node 10 (weight: 3).\nNode 11 is connected to node 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=6, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 76, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to node 6 (weight: 2).\nNode 6 is connected to nodes 8 (weight: 2), 7 (weight: 1).\nNode 7 is connected to nodes 6 (weight: 1), 0 (weight: 5), 1 (weight: 10).\nNode 0 is connected to nodes 7 (weight: 5), 1 (weight: 9), 2 (weight: 4).\nNode 1 is connected to nodes 7 (weight: 10), 5 (weight: 1), 0 (weight: 9).\nNode 3 is connected to node 5 (weight: 2).\nNode 5 is connected to nodes 3 (weight: 2), 1 (weight: 1).\nNode 2 is connected to nodes 0 (weight: 4), 4 (weight: 10).\nNode 4 is connected to node 2 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=5, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 77, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 11 (weight: 5), 5 (weight: 6), 4 (weight: 8), 1 (weight: 5), 9 (weight: 8), 3 (weight: 7).\nNode 11 is connected to nodes 12 (weight: 5), 8 (weight: 1), 2 (weight: 3).\nNode 5 is connected to nodes 12 (weight: 6), 6 (weight: 2), 10 (weight: 6), 0 (weight: 9), 7 (weight: 3).\nNode 4 is connected to node 12 (weight: 8).\nNode 1 is connected to node 12 (weight: 5).\nNode 9 is connected to node 12 (weight: 8).\nNode 3 is connected to node 12 (weight: 7).\nNode 8 is connected to node 11 (weight: 1).\nNode 2 is connected to node 11 (weight: 3).\nNode 6 is connected to node 5 (weight: 2).\nNode 10 is connected to node 5 (weight: 6).\nNode 0 is connected to node 5 (weight: 9).\nNode 7 is connected to node 5 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=12, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 78, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 5 is connected to nodes 9 (weight: 10), 10 (weight: 8).\nNode 9 is connected to nodes 7 (weight: 8), 5 (weight: 2).\nNode 10 is connected to nodes 8 (weight: 6), 5 (weight: 6), 9 (weight: 4).\nNode 7 is connected to nodes 6 (weight: 2), 2 (weight: 9), 8 (weight: 7), 3 (weight: 1).\nNode 8 is connected to nodes 0 (weight: 8), 5 (weight: 1).\nNode 6 is connected to nodes 1 (weight: 4), 3 (weight: 3).\nNode 2 is connected to node 0 (weight: 9).\nNode 3 is connected to nodes 4 (weight: 5), 10 (weight: 5), 8 (weight: 7).\nNode 4 is connected to node 9 (weight: 4).\nNode 1 is connected to node 8 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=9, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 79, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 6 (weight: 8), 9 (weight: 6), 11 (weight: 7).\nNode 6 is connected to nodes 0 (weight: 8), 3 (weight: 9), 2 (weight: 9), 10 (weight: 9), 5 (weight: 4), 1 (weight: 2).\nNode 9 is connected to nodes 0 (weight: 6), 11 (weight: 10), 5 (weight: 10), 4 (weight: 7).\nNode 11 is connected to nodes 0 (weight: 7), 9 (weight: 10), 2 (weight: 7), 7 (weight: 7).\nNode 3 is connected to nodes 6 (weight: 9), 8 (weight: 9), 13 (weight: 5), 5 (weight: 5).\nNode 2 is connected to nodes 6 (weight: 9), 11 (weight: 7), 10 (weight: 9), 7 (weight: 8).\nNode 10 is connected to nodes 6 (weight: 9), 2 (weight: 9), 13 (weight: 6), 7 (weight: 9).\nNode 5 is connected to nodes 6 (weight: 4), 9 (weight: 10), 3 (weight: 5), 8 (weight: 7), 1 (weight: 10), 12 (weight: 1).\nNode 1 is connected to nodes 6 (weight: 2), 5 (weight: 10), 8 (weight: 2), 13 (weight: 10), 12 (weight: 7).\nNode 4 is connected to nodes 9 (weight: 7), 7 (weight: 9).\nNode 7 is connected to nodes 11 (weight: 7), 2 (weight: 8), 10 (weight: 9), 4 (weight: 9).\nNode 8 is connected to nodes 3 (weight: 9), 5 (weight: 7), 1 (weight: 2), 13 (weight: 5).\nNode 13 is connected to nodes 3 (weight: 5), 10 (weight: 6), 1 (weight: 10), 8 (weight: 5).\nNode 12 is connected to nodes 5 (weight: 1), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=0, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 80, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 2 (weight: 2), 4 (weight: 3), 3 (weight: 9).\nNode 2 is connected to nodes 10 (weight: 1), 8 (weight: 7), 9 (weight: 2), 6 (weight: 5).\nNode 4 is connected to nodes 7 (weight: 6), 11 (weight: 6).\nNode 3 is connected to nodes 8 (weight: 4), 5 (weight: 9), 1 (weight: 1).\nNode 10 is connected to nodes 1 (weight: 10), 6 (weight: 4).\nNode 8 is connected to nodes 5 (weight: 6), 1 (weight: 8), 2 (weight: 3).\nNode 9 is connected to nodes 6 (weight: 3), 0 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 9), 1 (weight: 10).\nNode 5 is connected to nodes 1 (weight: 3), 11 (weight: 4), 7 (weight: 6), 3 (weight: 6).\nNode 1 is connected to node 6 (weight: 7).\nNode 0 is connected to nodes 1 (weight: 9), 6 (weight: 2), 7 (weight: 9).\nNode 12 is connected to nodes 10 (weight: 10), 1 (weight: 1), 11 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=3, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 81, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 5 is connected to nodes 6 (weight: 3), 1 (weight: 3), 7 (weight: 5).\nNode 6 is connected to nodes 4 (weight: 9), 2 (weight: 8), 3 (weight: 4), 8 (weight: 1).\nNode 1 is connected to nodes 0 (weight: 3), 5 (weight: 4), 4 (weight: 5).\nNode 7 is connected to nodes 8 (weight: 1), 6 (weight: 9).\nNode 4 is connected to node 8 (weight: 6).\nNode 2 is connected to node 7 (weight: 7).\nNode 3 is connected to nodes 5 (weight: 4), 4 (weight: 1).\nNode 8 is connected to node 2 (weight: 3).\nNode 0 is connected to nodes 8 (weight: 3), 2 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=6, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 82, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 12 (weight: 10), 10 (weight: 4), 1 (weight: 7), 13 (weight: 9), 4 (weight: 4), 2 (weight: 4).\nNode 12 is connected to node 0 (weight: 10).\nNode 10 is connected to node 0 (weight: 4).\nNode 1 is connected to nodes 0 (weight: 7), 9 (weight: 10).\nNode 13 is connected to node 0 (weight: 9).\nNode 4 is connected to node 0 (weight: 4).\nNode 2 is connected to node 0 (weight: 4).\nNode 9 is connected to nodes 1 (weight: 10), 11 (weight: 5).\nNode 11 is connected to nodes 7 (weight: 8), 5 (weight: 3), 9 (weight: 5), 8 (weight: 10).\nNode 7 is connected to node 11 (weight: 8).\nNode 5 is connected to nodes 11 (weight: 3), 3 (weight: 7).\nNode 8 is connected to node 11 (weight: 10).\nNode 3 is connected to nodes 5 (weight: 7), 6 (weight: 5).\nNode 6 is connected to node 3 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=1, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 83, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 11 (weight: 9), 0 (weight: 10), 3 (weight: 1), 1 (weight: 5).\nNode 11 is connected to node 10 (weight: 2).\nNode 0 is connected to nodes 6 (weight: 10), 2 (weight: 8), 7 (weight: 8), 1 (weight: 1), 9 (weight: 8).\nNode 3 is connected to nodes 6 (weight: 9), 2 (weight: 3), 7 (weight: 9), 4 (weight: 9), 9 (weight: 6), 0 (weight: 3).\nNode 1 is connected to nodes 8 (weight: 10), 11 (weight: 6), 4 (weight: 8), 3 (weight: 5), 2 (weight: 6), 7 (weight: 6).\nNode 10 is connected to nodes 4 (weight: 6), 9 (weight: 6).\nNode 6 is connected to nodes 2 (weight: 6), 7 (weight: 2), 10 (weight: 3), 4 (weight: 4).\nNode 2 is connected to nodes 7 (weight: 5), 5 (weight: 8), 1 (weight: 3), 11 (weight: 5), 4 (weight: 3), 6 (weight: 1).\nNode 7 is connected to nodes 0 (weight: 7), 3 (weight: 7), 6 (weight: 2), 2 (weight: 9).\nNode 9 is connected to nodes 3 (weight: 9), 2 (weight: 2), 7 (weight: 8), 8 (weight: 2), 10 (weight: 5), 11 (weight: 4), 4 (weight: 5).\nNode 4 is connected to nodes 9 (weight: 6), 0 (weight: 5), 3 (weight: 8), 2 (weight: 5), 5 (weight: 6), 1 (weight: 4), 10 (weight: 10).\nNode 5 is connected to nodes 11 (weight: 6), 9 (weight: 5), 6 (weight: 6), 2 (weight: 1), 7 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=7, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 84, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 3), 6 (weight: 2), 1 (weight: 2), 0 (weight: 6), 7 (weight: 7), 2 (weight: 1), 8 (weight: 3), 5 (weight: 6).\nNode 3 is connected to node 4 (weight: 3).\nNode 6 is connected to node 4 (weight: 2).\nNode 1 is connected to node 4 (weight: 2).\nNode 0 is connected to node 4 (weight: 6).\nNode 7 is connected to node 4 (weight: 7).\nNode 2 is connected to node 4 (weight: 1).\nNode 8 is connected to node 4 (weight: 3).\nNode 5 is connected to node 4 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=0, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 85, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 0 (weight: 10), 1 (weight: 8), 8 (weight: 4), 2 (weight: 3).\nNode 0 is connected to nodes 9 (weight: 10), 7 (weight: 1), 8 (weight: 4), 3 (weight: 6), 6 (weight: 7), 11 (weight: 5), 5 (weight: 5), 4 (weight: 7).\nNode 1 is connected to nodes 9 (weight: 8), 7 (weight: 1), 8 (weight: 6), 10 (weight: 1), 3 (weight: 3), 5 (weight: 3).\nNode 8 is connected to nodes 9 (weight: 4), 0 (weight: 4), 1 (weight: 6), 10 (weight: 5), 4 (weight: 8), 2 (weight: 4).\nNode 2 is connected to nodes 9 (weight: 3), 8 (weight: 4).\nNode 7 is connected to nodes 0 (weight: 1), 1 (weight: 1), 11 (weight: 2), 4 (weight: 3).\nNode 3 is connected to nodes 0 (weight: 6), 1 (weight: 3), 10 (weight: 9), 4 (weight: 3).\nNode 6 is connected to nodes 0 (weight: 7), 10 (weight: 3), 11 (weight: 4), 5 (weight: 2), 4 (weight: 9).\nNode 11 is connected to nodes 0 (weight: 5), 7 (weight: 2), 6 (weight: 4), 4 (weight: 3).\nNode 5 is connected to nodes 0 (weight: 5), 1 (weight: 3), 6 (weight: 2), 10 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 7), 8 (weight: 8), 7 (weight: 3), 3 (weight: 3), 6 (weight: 9), 11 (weight: 3).\nNode 10 is connected to nodes 1 (weight: 1), 8 (weight: 5), 3 (weight: 9), 6 (weight: 3), 5 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=6, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 86, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 5 (weight: 3), 0 (weight: 7), 7 (weight: 5), 8 (weight: 8), 6 (weight: 10), 3 (weight: 4).\nNode 5 is connected to node 1 (weight: 3).\nNode 0 is connected to node 1 (weight: 7).\nNode 7 is connected to node 1 (weight: 5).\nNode 8 is connected to nodes 1 (weight: 8), 2 (weight: 9), 4 (weight: 5).\nNode 6 is connected to node 1 (weight: 10).\nNode 3 is connected to node 1 (weight: 4).\nNode 2 is connected to node 8 (weight: 9).\nNode 4 is connected to node 8 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=2, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 87, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 7 (weight: 2), 2 (weight: 6), 3 (weight: 9), 5 (weight: 10), 6 (weight: 8), 4 (weight: 5), 0 (weight: 1), 9 (weight: 4).\nNode 7 is connected to nodes 11 (weight: 2), 2 (weight: 6), 10 (weight: 5), 3 (weight: 2), 1 (weight: 3), 4 (weight: 10), 0 (weight: 3), 8 (weight: 10), 9 (weight: 1).\nNode 2 is connected to nodes 11 (weight: 6), 7 (weight: 6), 10 (weight: 3), 3 (weight: 3), 4 (weight: 6), 9 (weight: 4).\nNode 3 is connected to nodes 11 (weight: 9), 7 (weight: 2), 2 (weight: 3), 10 (weight: 8), 1 (weight: 6), 5 (weight: 2), 0 (weight: 10), 9 (weight: 8).\nNode 5 is connected to nodes 11 (weight: 10), 3 (weight: 2), 10 (weight: 10), 0 (weight: 7), 8 (weight: 4), 9 (weight: 6).\nNode 6 is connected to nodes 11 (weight: 8), 1 (weight: 7), 4 (weight: 7), 0 (weight: 1), 8 (weight: 5).\nNode 4 is connected to nodes 11 (weight: 5), 7 (weight: 10), 2 (weight: 6), 6 (weight: 7), 10 (weight: 5), 1 (weight: 9), 0 (weight: 4), 8 (weight: 3).\nNode 0 is connected to nodes 11 (weight: 1), 7 (weight: 3), 3 (weight: 10), 5 (weight: 7), 6 (weight: 1), 4 (weight: 4), 8 (weight: 7).\nNode 9 is connected to nodes 11 (weight: 4), 7 (weight: 1), 2 (weight: 4), 3 (weight: 8), 5 (weight: 6), 10 (weight: 9), 1 (weight: 1), 8 (weight: 7).\nNode 10 is connected to nodes 7 (weight: 5), 2 (weight: 3), 3 (weight: 8), 5 (weight: 10), 4 (weight: 5), 9 (weight: 9), 8 (weight: 7).\nNode 1 is connected to nodes 7 (weight: 3), 3 (weight: 6), 6 (weight: 7), 4 (weight: 9), 9 (weight: 1).\nNode 8 is connected to nodes 7 (weight: 10), 5 (weight: 4), 6 (weight: 5), 4 (weight: 3), 0 (weight: 7), 9 (weight: 7), 10 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=9, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 88, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 12 (weight: 1), 4 (weight: 10), 6 (weight: 8), 7 (weight: 9).\nNode 12 is connected to nodes 5 (weight: 10), 11 (weight: 2), 0 (weight: 8).\nNode 4 is connected to nodes 1 (weight: 5), 9 (weight: 4).\nNode 6 is connected to node 12 (weight: 9).\nNode 7 is connected to nodes 0 (weight: 7), 8 (weight: 6).\nNode 11 is connected to nodes 2 (weight: 3), 13 (weight: 9), 4 (weight: 4).\nNode 0 is connected to nodes 9 (weight: 3), 3 (weight: 1), 11 (weight: 7).\nNode 1 is connected to node 5 (weight: 9).\nNode 8 is connected to node 7 (weight: 1).\nNode 3 is connected to nodes 6 (weight: 3), 10 (weight: 6).\nNode 10 is connected to nodes 12 (weight: 1), 5 (weight: 8), 11 (weight: 8), 0 (weight: 2).\nNode 2 is connected to nodes 10 (weight: 9), 4 (weight: 3), 11 (weight: 6).\nNode 14 is connected to node 6 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 14 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=14, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 89, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 6 (weight: 5), 4 (weight: 3), 5 (weight: 10), 3 (weight: 2), 8 (weight: 3), 9 (weight: 7).\nNode 6 is connected to nodes 0 (weight: 5), 9 (weight: 7), 3 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 3), 5 (weight: 10), 3 (weight: 10), 7 (weight: 4), 10 (weight: 7).\nNode 5 is connected to nodes 0 (weight: 10), 4 (weight: 10), 8 (weight: 6).\nNode 3 is connected to nodes 0 (weight: 2), 6 (weight: 9), 4 (weight: 10), 2 (weight: 10), 1 (weight: 2).\nNode 8 is connected to nodes 0 (weight: 3), 5 (weight: 6).\nNode 9 is connected to nodes 0 (weight: 7), 6 (weight: 7).\nNode 7 is connected to nodes 4 (weight: 4), 10 (weight: 7).\nNode 10 is connected to nodes 4 (weight: 7), 7 (weight: 7), 1 (weight: 7), 2 (weight: 9).\nNode 2 is connected to nodes 3 (weight: 10), 10 (weight: 9).\nNode 1 is connected to nodes 3 (weight: 2), 10 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=10, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 90, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 4 (weight: 10), 2 (weight: 5), 10 (weight: 1).\nNode 4 is connected to node 7 (weight: 10).\nNode 2 is connected to nodes 7 (weight: 5), 5 (weight: 6), 1 (weight: 3).\nNode 10 is connected to nodes 7 (weight: 1), 0 (weight: 3).\nNode 5 is connected to nodes 2 (weight: 6), 0 (weight: 9).\nNode 1 is connected to nodes 2 (weight: 3), 9 (weight: 3).\nNode 0 is connected to nodes 10 (weight: 3), 8 (weight: 5), 5 (weight: 9).\nNode 6 is connected to nodes 9 (weight: 2), 3 (weight: 6).\nNode 9 is connected to nodes 6 (weight: 2), 1 (weight: 3).\nNode 3 is connected to node 6 (weight: 6).\nNode 8 is connected to node 0 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=9, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 91, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 6), 1 (weight: 10).\nNode 4 is connected to nodes 2 (weight: 6), 7 (weight: 3).\nNode 1 is connected to nodes 2 (weight: 10), 3 (weight: 2).\nNode 7 is connected to nodes 4 (weight: 3), 5 (weight: 8).\nNode 3 is connected to nodes 1 (weight: 2), 6 (weight: 7).\nNode 5 is connected to nodes 7 (weight: 8), 6 (weight: 7).\nNode 6 is connected to nodes 3 (weight: 7), 0 (weight: 7), 5 (weight: 7).\nNode 0 is connected to node 6 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=7, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 92, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 8), 7 (weight: 9), 12 (weight: 9), 1 (weight: 2), 11 (weight: 5), 4 (weight: 1), 14 (weight: 9), 3 (weight: 9), 10 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 8), 13 (weight: 1), 7 (weight: 5), 12 (weight: 7), 4 (weight: 8), 8 (weight: 7), 5 (weight: 5), 3 (weight: 3), 0 (weight: 3).\nNode 7 is connected to nodes 2 (weight: 9), 6 (weight: 5), 13 (weight: 6), 12 (weight: 1), 1 (weight: 3), 9 (weight: 6), 5 (weight: 3), 10 (weight: 1).\nNode 12 is connected to nodes 2 (weight: 9), 6 (weight: 7), 7 (weight: 1), 13 (weight: 7), 9 (weight: 9), 11 (weight: 3), 4 (weight: 9), 14 (weight: 1), 3 (weight: 6).\nNode 1 is connected to nodes 2 (weight: 2), 7 (weight: 3), 9 (weight: 8), 11 (weight: 5), 5 (weight: 8), 3 (weight: 5), 0 (weight: 1).\nNode 11 is connected to nodes 2 (weight: 5), 12 (weight: 3), 1 (weight: 5), 13 (weight: 4), 9 (weight: 8), 5 (weight: 5), 0 (weight: 4).\nNode 4 is connected to nodes 2 (weight: 1), 6 (weight: 8), 12 (weight: 9), 13 (weight: 10), 9 (weight: 1), 8 (weight: 10), 14 (weight: 5), 0 (weight: 2), 10 (weight: 5).\nNode 14 is connected to nodes 2 (weight: 9), 12 (weight: 1), 4 (weight: 5), 13 (weight: 2), 9 (weight: 2), 3 (weight: 1), 0 (weight: 8), 10 (weight: 6).\nNode 3 is connected to nodes 2 (weight: 9), 6 (weight: 3), 12 (weight: 6), 1 (weight: 5), 14 (weight: 1), 13 (weight: 5), 9 (weight: 4), 8 (weight: 3), 5 (weight: 1).\nNode 10 is connected to nodes 2 (weight: 9), 7 (weight: 1), 4 (weight: 5), 14 (weight: 6), 13 (weight: 10), 9 (weight: 2).\nNode 13 is connected to nodes 6 (weight: 1), 7 (weight: 6), 12 (weight: 7), 11 (weight: 4), 4 (weight: 10), 14 (weight: 2), 3 (weight: 5), 10 (weight: 10), 9 (weight: 5), 5 (weight: 3), 0 (weight: 4).\nNode 8 is connected to nodes 6 (weight: 7), 4 (weight: 10), 3 (weight: 3), 9 (weight: 6), 5 (weight: 9).\nNode 5 is connected to nodes 6 (weight: 5), 7 (weight: 3), 1 (weight: 8), 11 (weight: 5), 3 (weight: 1), 13 (weight: 3), 9 (weight: 9), 8 (weight: 9), 0 (weight: 8).\nNode 0 is connected to nodes 6 (weight: 3), 1 (weight: 1), 11 (weight: 4), 4 (weight: 2), 14 (weight: 8), 13 (weight: 4), 9 (weight: 4), 5 (weight: 8).\nNode 9 is connected to nodes 7 (weight: 6), 12 (weight: 9), 1 (weight: 8), 11 (weight: 8), 4 (weight: 1), 14 (weight: 2), 3 (weight: 4), 10 (weight: 2), 13 (weight: 5), 8 (weight: 6), 5 (weight: 9), 0 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 14\nshortest_path_length = nx.shortest_path_length(G, source=5, target=14, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 93, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 6 (weight: 10), 8 (weight: 10), 1 (weight: 7), 4 (weight: 1), 0 (weight: 1).\nNode 6 is connected to nodes 8 (weight: 2), 1 (weight: 5), 3 (weight: 8), 9 (weight: 4), 5 (weight: 1).\nNode 8 is connected to nodes 6 (weight: 5), 2 (weight: 1).\nNode 1 is connected to nodes 0 (weight: 6), 2 (weight: 2).\nNode 4 is connected to nodes 7 (weight: 5), 6 (weight: 8), 2 (weight: 6).\nNode 3 is connected to nodes 9 (weight: 4), 4 (weight: 8), 2 (weight: 3), 8 (weight: 9).\nNode 9 is connected to node 5 (weight: 6).\nNode 2 is connected to nodes 1 (weight: 3), 3 (weight: 2), 0 (weight: 2), 5 (weight: 4).\nNode 7 is connected to nodes 5 (weight: 2), 8 (weight: 7), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=4, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 94, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 9 (weight: 4), 4 (weight: 3), 3 (weight: 1), 8 (weight: 5).\nNode 9 is connected to node 4 (weight: 1).\nNode 4 is connected to nodes 1 (weight: 6), 5 (weight: 4), 9 (weight: 1).\nNode 3 is connected to nodes 1 (weight: 1), 7 (weight: 6), 2 (weight: 7), 9 (weight: 8).\nNode 8 is connected to nodes 6 (weight: 4), 7 (weight: 1), 5 (weight: 8), 9 (weight: 7), 0 (weight: 7), 4 (weight: 7), 3 (weight: 10).\nNode 1 is connected to node 5 (weight: 6).\nNode 5 is connected to nodes 4 (weight: 1), 10 (weight: 9), 8 (weight: 4), 1 (weight: 5), 6 (weight: 6).\nNode 7 is connected to nodes 2 (weight: 1), 0 (weight: 1), 3 (weight: 10), 8 (weight: 7), 1 (weight: 10), 6 (weight: 8).\nNode 2 is connected to nodes 9 (weight: 9), 0 (weight: 7), 4 (weight: 7), 10 (weight: 1), 1 (weight: 8), 7 (weight: 9).\nNode 0 is connected to nodes 8 (weight: 1), 1 (weight: 8).\nNode 10 is connected to nodes 7 (weight: 10), 5 (weight: 3), 9 (weight: 2), 0 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=3, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 95, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 7 (weight: 2), 4 (weight: 8).\nNode 7 is connected to nodes 8 (weight: 2), 0 (weight: 5), 9 (weight: 10), 2 (weight: 8).\nNode 4 is connected to nodes 8 (weight: 8), 5 (weight: 8), 9 (weight: 2), 3 (weight: 5).\nNode 0 is connected to nodes 7 (weight: 5), 5 (weight: 4), 9 (weight: 10).\nNode 9 is connected to nodes 7 (weight: 10), 4 (weight: 2), 5 (weight: 4), 1 (weight: 7), 0 (weight: 10).\nNode 2 is connected to nodes 7 (weight: 8), 5 (weight: 2), 6 (weight: 10), 3 (weight: 4).\nNode 5 is connected to nodes 4 (weight: 8), 1 (weight: 3), 0 (weight: 4), 9 (weight: 4), 2 (weight: 2), 6 (weight: 7).\nNode 3 is connected to nodes 4 (weight: 5), 2 (weight: 4).\nNode 1 is connected to nodes 5 (weight: 3), 9 (weight: 7).\nNode 6 is connected to nodes 5 (weight: 7), 2 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=2, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 96, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 6 (weight: 8), 3 (weight: 9), 12 (weight: 9), 2 (weight: 5), 4 (weight: 3).\nNode 6 is connected to node 10 (weight: 8).\nNode 3 is connected to nodes 10 (weight: 9), 11 (weight: 10).\nNode 12 is connected to nodes 10 (weight: 9), 7 (weight: 1), 9 (weight: 1), 1 (weight: 9), 0 (weight: 5), 13 (weight: 1).\nNode 2 is connected to node 10 (weight: 5).\nNode 4 is connected to node 10 (weight: 3).\nNode 11 is connected to node 3 (weight: 10).\nNode 7 is connected to node 12 (weight: 1).\nNode 9 is connected to node 12 (weight: 1).\nNode 1 is connected to node 12 (weight: 9).\nNode 0 is connected to node 12 (weight: 5).\nNode 13 is connected to nodes 12 (weight: 1), 8 (weight: 5), 5 (weight: 7).\nNode 8 is connected to node 13 (weight: 5).\nNode 5 is connected to node 13 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=9, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 97, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 4 (weight: 6), 0 (weight: 3).\nNode 4 is connected to nodes 10 (weight: 6), 1 (weight: 1).\nNode 0 is connected to nodes 10 (weight: 3), 6 (weight: 4), 1 (weight: 9), 11 (weight: 2), 7 (weight: 9).\nNode 1 is connected to nodes 4 (weight: 1), 0 (weight: 9), 8 (weight: 8), 13 (weight: 7), 11 (weight: 8), 2 (weight: 8), 3 (weight: 8).\nNode 6 is connected to nodes 0 (weight: 4), 13 (weight: 3), 11 (weight: 8).\nNode 11 is connected to nodes 0 (weight: 2), 6 (weight: 8), 13 (weight: 10), 1 (weight: 8), 9 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 9), 12 (weight: 1), 5 (weight: 2).\nNode 12 is connected to nodes 8 (weight: 5), 7 (weight: 1).\nNode 8 is connected to nodes 12 (weight: 5), 14 (weight: 1), 13 (weight: 3), 5 (weight: 1), 1 (weight: 8).\nNode 14 is connected to node 8 (weight: 1).\nNode 13 is connected to nodes 8 (weight: 3), 6 (weight: 3), 1 (weight: 7), 11 (weight: 10).\nNode 5 is connected to nodes 8 (weight: 1), 7 (weight: 2).\nNode 9 is connected to node 11 (weight: 2).\nNode 2 is connected to node 1 (weight: 8).\nNode 3 is connected to node 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=5, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 98, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 2 (weight: 9), 12 (weight: 2), 4 (weight: 8), 8 (weight: 8).\nNode 2 is connected to nodes 10 (weight: 4), 7 (weight: 1), 5 (weight: 10).\nNode 12 is connected to nodes 4 (weight: 9), 11 (weight: 3), 1 (weight: 1).\nNode 4 is connected to node 0 (weight: 6).\nNode 8 is connected to nodes 2 (weight: 10), 4 (weight: 10).\nNode 10 is connected to nodes 0 (weight: 2), 2 (weight: 5).\nNode 5 is connected to nodes 11 (weight: 1), 8 (weight: 1).\nNode 11 is connected to node 9 (weight: 2).\nNode 1 is connected to nodes 4 (weight: 8), 9 (weight: 5), 2 (weight: 6).\nNode 0 is connected to nodes 12 (weight: 2), 8 (weight: 1).\nNode 6 is connected to node 4 (weight: 5).\nNode 9 is connected to nodes 7 (weight: 10), 0 (weight: 2), 1 (weight: 7), 3 (weight: 9), 4 (weight: 5).\nNode 3 is connected to nodes 8 (weight: 9), 0 (weight: 6), 11 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=1, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 99, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 1 (weight: 10), 9 (weight: 7), 7 (weight: 10), 6 (weight: 4).\nNode 1 is connected to node 8 (weight: 6).\nNode 9 is connected to nodes 4 (weight: 3), 0 (weight: 5), 5 (weight: 2).\nNode 7 is connected to nodes 2 (weight: 5), 8 (weight: 10), 0 (weight: 8), 3 (weight: 8).\nNode 6 is connected to nodes 1 (weight: 4), 0 (weight: 6), 2 (weight: 8).\nNode 4 is connected to nodes 5 (weight: 5), 3 (weight: 6), 7 (weight: 4), 6 (weight: 1), 1 (weight: 7).\nNode 0 is connected to nodes 5 (weight: 6), 3 (weight: 3), 6 (weight: 6), 8 (weight: 5), 1 (weight: 7).\nNode 5 is connected to nodes 2 (weight: 7), 1 (weight: 7), 9 (weight: 10), 4 (weight: 3), 0 (weight: 10).\nNode 2 is connected to nodes 1 (weight: 6), 4 (weight: 8), 3 (weight: 5).\nNode 3 is connected to nodes 9 (weight: 7), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=3, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 100, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 2), 1 (weight: 2).\nNode 6 is connected to nodes 2 (weight: 2), 5 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 2), 0 (weight: 7).\nNode 5 is connected to nodes 6 (weight: 4), 0 (weight: 10), 7 (weight: 8).\nNode 0 is connected to nodes 1 (weight: 7), 5 (weight: 10).\nNode 7 is connected to nodes 5 (weight: 8), 3 (weight: 6).\nNode 3 is connected to nodes 7 (weight: 6), 4 (weight: 6).\nNode 4 is connected to node 3 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 101, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 0 (weight: 6), 8 (weight: 4), 9 (weight: 4).\nNode 0 is connected to nodes 5 (weight: 6), 4 (weight: 2), 7 (weight: 10).\nNode 8 is connected to nodes 5 (weight: 4), 6 (weight: 3).\nNode 9 is connected to nodes 5 (weight: 4), 2 (weight: 2), 3 (weight: 7).\nNode 4 is connected to nodes 0 (weight: 2), 1 (weight: 7).\nNode 7 is connected to node 0 (weight: 10).\nNode 6 is connected to nodes 8 (weight: 3), 1 (weight: 6).\nNode 2 is connected to node 9 (weight: 2).\nNode 3 is connected to node 9 (weight: 7).\nNode 1 is connected to nodes 4 (weight: 7), 6 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=7, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 102, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 9 (weight: 8), 8 (weight: 5), 1 (weight: 8), 7 (weight: 10), 5 (weight: 4).\nNode 9 is connected to nodes 6 (weight: 8), 1 (weight: 3), 0 (weight: 1), 2 (weight: 10), 10 (weight: 2), 5 (weight: 1), 4 (weight: 6).\nNode 8 is connected to nodes 6 (weight: 5), 1 (weight: 8), 0 (weight: 4), 2 (weight: 6), 10 (weight: 6), 4 (weight: 10).\nNode 1 is connected to nodes 6 (weight: 8), 9 (weight: 3), 8 (weight: 8), 7 (weight: 5), 3 (weight: 7), 0 (weight: 3), 2 (weight: 6), 10 (weight: 3), 5 (weight: 10), 4 (weight: 5).\nNode 7 is connected to nodes 6 (weight: 10), 1 (weight: 5), 3 (weight: 9), 2 (weight: 9), 10 (weight: 5), 5 (weight: 6), 4 (weight: 9).\nNode 5 is connected to nodes 6 (weight: 4), 9 (weight: 1), 1 (weight: 10), 7 (weight: 6), 3 (weight: 8), 0 (weight: 7), 10 (weight: 4), 4 (weight: 1).\nNode 0 is connected to nodes 9 (weight: 1), 8 (weight: 4), 1 (weight: 3), 5 (weight: 7), 3 (weight: 6), 2 (weight: 9), 4 (weight: 4).\nNode 2 is connected to nodes 9 (weight: 10), 8 (weight: 6), 1 (weight: 6), 7 (weight: 9), 0 (weight: 9), 3 (weight: 9), 4 (weight: 4).\nNode 10 is connected to nodes 9 (weight: 2), 8 (weight: 6), 1 (weight: 3), 7 (weight: 5), 5 (weight: 4).\nNode 4 is connected to nodes 9 (weight: 6), 8 (weight: 10), 1 (weight: 5), 7 (weight: 9), 5 (weight: 1), 0 (weight: 4), 2 (weight: 4).\nNode 3 is connected to nodes 1 (weight: 7), 7 (weight: 9), 5 (weight: 8), 0 (weight: 6), 2 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=4, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 103, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 5), 4 (weight: 6).\nNode 2 is connected to nodes 4 (weight: 7), 9 (weight: 10), 0 (weight: 4).\nNode 9 is connected to nodes 3 (weight: 4), 7 (weight: 4), 6 (weight: 9).\nNode 3 is connected to nodes 0 (weight: 2), 5 (weight: 4), 4 (weight: 5).\nNode 7 is connected to node 2 (weight: 3).\nNode 5 is connected to nodes 2 (weight: 9), 8 (weight: 3), 7 (weight: 4).\nNode 8 is connected to node 9 (weight: 1).\nNode 1 is connected to nodes 2 (weight: 5), 3 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 104, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 3 (weight: 9), 5 (weight: 4), 2 (weight: 3), 8 (weight: 3).\nNode 3 is connected to nodes 9 (weight: 9), 1 (weight: 8).\nNode 5 is connected to nodes 9 (weight: 4), 6 (weight: 5), 8 (weight: 10).\nNode 2 is connected to node 9 (weight: 3).\nNode 8 is connected to nodes 9 (weight: 3), 5 (weight: 10), 7 (weight: 10).\nNode 1 is connected to nodes 3 (weight: 8), 0 (weight: 1).\nNode 6 is connected to node 5 (weight: 5).\nNode 7 is connected to node 8 (weight: 10).\nNode 0 is connected to nodes 1 (weight: 1), 4 (weight: 2).\nNode 4 is connected to node 0 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=3, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 105, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 6 (weight: 3), 4 (weight: 7), 3 (weight: 2), 7 (weight: 4), 5 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 3), 4 (weight: 3), 3 (weight: 3), 7 (weight: 9), 1 (weight: 9), 0 (weight: 3), 5 (weight: 10).\nNode 4 is connected to nodes 2 (weight: 7), 6 (weight: 3), 3 (weight: 7), 7 (weight: 9), 1 (weight: 4), 0 (weight: 8), 5 (weight: 4).\nNode 3 is connected to nodes 2 (weight: 2), 6 (weight: 3), 4 (weight: 7), 1 (weight: 6), 0 (weight: 1), 5 (weight: 9).\nNode 7 is connected to nodes 2 (weight: 4), 6 (weight: 9), 4 (weight: 9), 0 (weight: 10), 5 (weight: 6).\nNode 5 is connected to nodes 2 (weight: 4), 6 (weight: 10), 4 (weight: 4), 3 (weight: 9), 7 (weight: 6), 0 (weight: 6).\nNode 1 is connected to nodes 6 (weight: 9), 4 (weight: 4), 3 (weight: 6).\nNode 0 is connected to nodes 6 (weight: 3), 4 (weight: 8), 3 (weight: 1), 7 (weight: 10), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=6, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 106, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 4 is connected to nodes 7 (weight: 5), 6 (weight: 7).\nNode 7 is connected to nodes 4 (weight: 5), 0 (weight: 10).\nNode 6 is connected to nodes 4 (weight: 7), 8 (weight: 10), 1 (weight: 2).\nNode 0 is connected to nodes 7 (weight: 10), 5 (weight: 2).\nNode 8 is connected to nodes 6 (weight: 10), 5 (weight: 7), 3 (weight: 5).\nNode 1 is connected to nodes 6 (weight: 2), 2 (weight: 2).\nNode 5 is connected to nodes 0 (weight: 2), 8 (weight: 7).\nNode 3 is connected to node 8 (weight: 5).\nNode 2 is connected to node 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=5, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 107, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 9), 0 (weight: 2), 10 (weight: 1), 9 (weight: 6), 5 (weight: 9).\nNode 3 is connected to nodes 0 (weight: 8), 10 (weight: 8), 6 (weight: 3), 5 (weight: 4), 7 (weight: 2), 2 (weight: 10).\nNode 0 is connected to nodes 9 (weight: 3), 11 (weight: 8), 4 (weight: 4), 2 (weight: 7), 3 (weight: 2).\nNode 10 is connected to nodes 1 (weight: 7), 9 (weight: 4), 7 (weight: 8), 11 (weight: 7), 2 (weight: 10), 0 (weight: 5).\nNode 9 is connected to nodes 5 (weight: 7), 0 (weight: 3), 10 (weight: 7), 8 (weight: 2).\nNode 5 is connected to nodes 11 (weight: 3), 3 (weight: 7), 0 (weight: 2), 8 (weight: 6).\nNode 6 is connected to nodes 9 (weight: 1), 5 (weight: 7), 2 (weight: 10), 3 (weight: 5), 0 (weight: 4).\nNode 7 is connected to nodes 11 (weight: 4), 4 (weight: 5), 3 (weight: 4), 0 (weight: 2), 1 (weight: 8).\nNode 2 is connected to nodes 3 (weight: 8), 0 (weight: 2), 10 (weight: 9), 11 (weight: 8), 4 (weight: 3).\nNode 11 is connected to nodes 4 (weight: 7), 10 (weight: 3), 6 (weight: 8), 5 (weight: 3).\nNode 1 is connected to nodes 8 (weight: 1), 6 (weight: 10), 3 (weight: 8).\nNode 8 is connected to nodes 6 (weight: 3), 5 (weight: 6), 11 (weight: 7), 2 (weight: 10), 0 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=1, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 108, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to node 11 (weight: 5).\nNode 11 is connected to nodes 6 (weight: 3), 2 (weight: 10), 0 (weight: 2), 9 (weight: 8).\nNode 6 is connected to nodes 0 (weight: 9), 7 (weight: 9).\nNode 2 is connected to nodes 0 (weight: 1), 8 (weight: 4), 11 (weight: 9), 1 (weight: 7), 6 (weight: 6).\nNode 0 is connected to nodes 11 (weight: 2), 7 (weight: 7), 4 (weight: 2).\nNode 9 is connected to nodes 1 (weight: 2), 0 (weight: 4).\nNode 8 is connected to nodes 11 (weight: 5), 7 (weight: 4), 4 (weight: 8), 2 (weight: 10).\nNode 1 is connected to nodes 10 (weight: 5), 0 (weight: 9), 3 (weight: 3).\nNode 7 is connected to nodes 1 (weight: 10), 10 (weight: 5), 2 (weight: 6), 8 (weight: 3).\nNode 4 is connected to nodes 6 (weight: 7), 2 (weight: 10), 3 (weight: 8), 7 (weight: 7).\nNode 3 is connected to nodes 1 (weight: 6), 8 (weight: 2).\nNode 5 is connected to nodes 8 (weight: 7), 1 (weight: 9), 4 (weight: 4), 2 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 109, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 5 (weight: 6), 3 (weight: 3), 10 (weight: 2), 2 (weight: 10).\nNode 5 is connected to nodes 11 (weight: 6), 9 (weight: 8), 6 (weight: 9), 8 (weight: 5), 10 (weight: 3), 1 (weight: 3).\nNode 3 is connected to nodes 11 (weight: 3), 6 (weight: 6), 2 (weight: 8).\nNode 10 is connected to nodes 11 (weight: 2), 5 (weight: 3), 6 (weight: 8), 0 (weight: 6).\nNode 2 is connected to nodes 11 (weight: 10), 3 (weight: 8), 1 (weight: 1), 8 (weight: 8), 4 (weight: 1).\nNode 9 is connected to nodes 5 (weight: 8), 7 (weight: 7), 1 (weight: 10), 8 (weight: 4).\nNode 6 is connected to nodes 5 (weight: 9), 3 (weight: 6), 10 (weight: 8), 7 (weight: 1), 0 (weight: 7).\nNode 8 is connected to nodes 5 (weight: 5), 2 (weight: 8), 9 (weight: 4), 1 (weight: 5).\nNode 1 is connected to nodes 5 (weight: 3), 2 (weight: 1), 9 (weight: 10), 8 (weight: 5), 7 (weight: 7), 4 (weight: 5).\nNode 0 is connected to nodes 10 (weight: 6), 6 (weight: 7).\nNode 4 is connected to nodes 2 (weight: 1), 1 (weight: 5).\nNode 7 is connected to nodes 9 (weight: 7), 6 (weight: 1), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=8, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 110, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 5 (weight: 3), 3 (weight: 4), 1 (weight: 2), 4 (weight: 3), 11 (weight: 5), 7 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 3), 1 (weight: 1), 6 (weight: 2), 0 (weight: 9), 7 (weight: 5).\nNode 3 is connected to nodes 2 (weight: 4), 6 (weight: 9), 0 (weight: 10), 4 (weight: 3).\nNode 1 is connected to nodes 2 (weight: 2), 5 (weight: 1), 11 (weight: 8).\nNode 4 is connected to nodes 2 (weight: 3), 3 (weight: 3), 6 (weight: 8), 12 (weight: 8).\nNode 11 is connected to nodes 2 (weight: 5), 1 (weight: 8), 6 (weight: 2), 9 (weight: 7), 8 (weight: 9), 7 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 8), 5 (weight: 5), 11 (weight: 10), 12 (weight: 8).\nNode 6 is connected to nodes 5 (weight: 2), 3 (weight: 9), 4 (weight: 8), 11 (weight: 2), 10 (weight: 4), 9 (weight: 8).\nNode 0 is connected to nodes 5 (weight: 9), 3 (weight: 10).\nNode 12 is connected to nodes 4 (weight: 8), 7 (weight: 8), 10 (weight: 1), 8 (weight: 10).\nNode 9 is connected to nodes 11 (weight: 7), 6 (weight: 8), 8 (weight: 6).\nNode 8 is connected to nodes 11 (weight: 9), 10 (weight: 7), 9 (weight: 6), 12 (weight: 10).\nNode 10 is connected to nodes 6 (weight: 4), 12 (weight: 1), 8 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=5, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 111, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 7 is connected to nodes 5 (weight: 3), 0 (weight: 7), 2 (weight: 10), 1 (weight: 3), 4 (weight: 4), 3 (weight: 1), 6 (weight: 10).\nNode 5 is connected to node 7 (weight: 3).\nNode 0 is connected to node 7 (weight: 7).\nNode 2 is connected to node 7 (weight: 10).\nNode 1 is connected to node 7 (weight: 3).\nNode 4 is connected to node 7 (weight: 4).\nNode 3 is connected to node 7 (weight: 1).\nNode 6 is connected to node 7 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=5, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 112, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 3), 2 (weight: 9), 9 (weight: 8), 4 (weight: 2), 0 (weight: 3), 7 (weight: 5).\nNode 3 is connected to node 8 (weight: 3).\nNode 2 is connected to node 8 (weight: 9).\nNode 9 is connected to node 8 (weight: 8).\nNode 4 is connected to node 8 (weight: 2).\nNode 0 is connected to nodes 8 (weight: 3), 1 (weight: 4), 5 (weight: 6), 6 (weight: 2).\nNode 7 is connected to node 8 (weight: 5).\nNode 1 is connected to node 0 (weight: 4).\nNode 5 is connected to node 0 (weight: 6).\nNode 6 is connected to node 0 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=4, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 113, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 9 (weight: 10), 4 (weight: 3), 5 (weight: 4).\nNode 9 is connected to nodes 8 (weight: 5), 7 (weight: 4), 0 (weight: 7), 6 (weight: 6), 3 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 5), 7 (weight: 4), 3 (weight: 8).\nNode 5 is connected to nodes 1 (weight: 8), 2 (weight: 3), 8 (weight: 5).\nNode 8 is connected to nodes 5 (weight: 1), 3 (weight: 3).\nNode 7 is connected to nodes 9 (weight: 2), 2 (weight: 1), 4 (weight: 3), 8 (weight: 7).\nNode 0 is connected to nodes 5 (weight: 2), 9 (weight: 7), 4 (weight: 10), 7 (weight: 6).\nNode 6 is connected to nodes 5 (weight: 3), 2 (weight: 8), 7 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 9), 0 (weight: 2), 3 (weight: 9), 9 (weight: 3).\nNode 2 is connected to nodes 8 (weight: 10), 7 (weight: 7), 3 (weight: 4), 9 (weight: 7), 1 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=2, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 114, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 7 (weight: 1), 2 (weight: 7), 4 (weight: 8), 0 (weight: 8), 1 (weight: 2).\nNode 7 is connected to nodes 5 (weight: 1), 3 (weight: 2), 4 (weight: 9), 0 (weight: 10).\nNode 2 is connected to nodes 5 (weight: 7), 3 (weight: 3), 4 (weight: 3), 0 (weight: 9), 1 (weight: 4).\nNode 4 is connected to nodes 5 (weight: 8), 7 (weight: 9), 2 (weight: 3), 0 (weight: 4).\nNode 0 is connected to nodes 5 (weight: 8), 7 (weight: 10), 2 (weight: 9), 4 (weight: 4), 3 (weight: 1), 6 (weight: 4).\nNode 1 is connected to nodes 5 (weight: 2), 2 (weight: 4), 3 (weight: 1), 6 (weight: 6).\nNode 3 is connected to nodes 7 (weight: 2), 2 (weight: 3), 0 (weight: 1), 1 (weight: 1).\nNode 6 is connected to nodes 0 (weight: 4), 1 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=3, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 115, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 8 (weight: 8), 12 (weight: 8), 9 (weight: 7), 4 (weight: 6), 10 (weight: 1), 1 (weight: 9), 0 (weight: 8), 2 (weight: 2).\nNode 8 is connected to nodes 11 (weight: 8), 6 (weight: 9), 10 (weight: 6).\nNode 12 is connected to nodes 11 (weight: 8), 10 (weight: 6).\nNode 9 is connected to nodes 11 (weight: 7), 5 (weight: 2).\nNode 4 is connected to nodes 11 (weight: 6), 10 (weight: 5), 5 (weight: 7).\nNode 10 is connected to nodes 11 (weight: 1), 8 (weight: 6), 12 (weight: 6), 4 (weight: 5), 6 (weight: 8), 3 (weight: 7), 7 (weight: 7), 1 (weight: 9), 0 (weight: 10), 5 (weight: 7).\nNode 1 is connected to nodes 11 (weight: 9), 10 (weight: 9).\nNode 0 is connected to nodes 11 (weight: 8), 10 (weight: 10).\nNode 2 is connected to nodes 11 (weight: 2), 6 (weight: 3).\nNode 6 is connected to nodes 8 (weight: 9), 10 (weight: 8), 2 (weight: 3), 7 (weight: 3).\nNode 5 is connected to nodes 9 (weight: 2), 4 (weight: 7), 10 (weight: 7).\nNode 3 is connected to node 10 (weight: 7).\nNode 7 is connected to nodes 10 (weight: 7), 6 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=8, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 116, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 4 (weight: 2), 3 (weight: 9), 5 (weight: 10), 6 (weight: 10), 2 (weight: 8).\nNode 4 is connected to nodes 1 (weight: 2), 7 (weight: 4), 3 (weight: 6), 6 (weight: 4).\nNode 3 is connected to nodes 1 (weight: 9), 4 (weight: 6).\nNode 5 is connected to node 1 (weight: 10).\nNode 6 is connected to nodes 1 (weight: 10), 4 (weight: 4), 2 (weight: 1), 7 (weight: 8).\nNode 2 is connected to nodes 1 (weight: 8), 6 (weight: 1), 0 (weight: 10).\nNode 7 is connected to nodes 4 (weight: 4), 6 (weight: 8), 0 (weight: 4).\nNode 0 is connected to nodes 2 (weight: 10), 7 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=3, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 117, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 3 (weight: 6), 12 (weight: 8), 4 (weight: 5).\nNode 3 is connected to nodes 11 (weight: 6), 14 (weight: 5), 6 (weight: 7), 2 (weight: 6), 7 (weight: 1).\nNode 12 is connected to nodes 11 (weight: 8), 4 (weight: 2), 5 (weight: 1), 8 (weight: 9).\nNode 4 is connected to nodes 11 (weight: 5), 12 (weight: 2), 10 (weight: 9), 14 (weight: 6), 13 (weight: 8).\nNode 14 is connected to nodes 3 (weight: 5), 4 (weight: 6), 10 (weight: 7), 8 (weight: 9), 5 (weight: 8), 9 (weight: 7), 13 (weight: 5), 6 (weight: 9).\nNode 6 is connected to nodes 3 (weight: 7), 14 (weight: 9), 0 (weight: 7), 1 (weight: 7).\nNode 2 is connected to nodes 3 (weight: 6), 10 (weight: 5).\nNode 7 is connected to nodes 3 (weight: 1), 0 (weight: 5), 1 (weight: 10), 13 (weight: 6).\nNode 5 is connected to nodes 12 (weight: 1), 14 (weight: 8).\nNode 8 is connected to nodes 12 (weight: 9), 14 (weight: 9).\nNode 10 is connected to nodes 4 (weight: 9), 14 (weight: 7), 2 (weight: 5).\nNode 13 is connected to nodes 4 (weight: 8), 14 (weight: 5), 7 (weight: 6), 9 (weight: 6).\nNode 9 is connected to nodes 14 (weight: 7), 13 (weight: 6).\nNode 0 is connected to nodes 6 (weight: 7), 7 (weight: 5).\nNode 1 is connected to nodes 6 (weight: 7), 7 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=10, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 118, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 9 (weight: 5), 14 (weight: 7), 13 (weight: 1), 2 (weight: 3), 7 (weight: 8), 5 (weight: 7).\nNode 9 is connected to node 4 (weight: 5).\nNode 14 is connected to node 4 (weight: 7).\nNode 13 is connected to node 4 (weight: 1).\nNode 2 is connected to nodes 4 (weight: 3), 11 (weight: 10).\nNode 7 is connected to node 4 (weight: 8).\nNode 5 is connected to nodes 4 (weight: 7), 3 (weight: 7), 8 (weight: 6), 1 (weight: 1).\nNode 11 is connected to nodes 2 (weight: 10), 12 (weight: 8).\nNode 3 is connected to nodes 5 (weight: 7), 6 (weight: 6), 10 (weight: 5).\nNode 8 is connected to node 5 (weight: 6).\nNode 1 is connected to nodes 5 (weight: 1), 0 (weight: 2).\nNode 12 is connected to node 11 (weight: 8).\nNode 6 is connected to node 3 (weight: 6).\nNode 10 is connected to node 3 (weight: 5).\nNode 0 is connected to node 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        edge_weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=edge_weight)\n\n# Calculate the length of the shortest path from node 9 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=9, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 119, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 10 (weight: 4), 14 (weight: 3), 6 (weight: 7), 12 (weight: 8), 4 (weight: 8), 7 (weight: 4), 13 (weight: 9), 11 (weight: 7).\nNode 10 is connected to nodes 1 (weight: 4), 13 (weight: 10).\nNode 14 is connected to nodes 1 (weight: 3), 5 (weight: 7), 13 (weight: 1).\nNode 6 is connected to nodes 1 (weight: 7), 11 (weight: 4), 3 (weight: 3).\nNode 12 is connected to nodes 1 (weight: 8), 11 (weight: 10).\nNode 4 is connected to nodes 1 (weight: 8), 13 (weight: 6).\nNode 7 is connected to nodes 1 (weight: 4), 3 (weight: 1).\nNode 13 is connected to nodes 1 (weight: 9), 10 (weight: 10), 14 (weight: 1), 4 (weight: 6), 2 (weight: 2), 3 (weight: 6).\nNode 11 is connected to nodes 1 (weight: 7), 6 (weight: 4), 12 (weight: 10), 5 (weight: 4), 8 (weight: 8).\nNode 5 is connected to nodes 14 (weight: 7), 11 (weight: 4).\nNode 3 is connected to nodes 6 (weight: 3), 7 (weight: 1), 13 (weight: 6), 8 (weight: 1), 2 (weight: 1), 9 (weight: 1), 0 (weight: 5).\nNode 2 is connected to nodes 13 (weight: 2), 3 (weight: 1), 9 (weight: 4), 0 (weight: 4).\nNode 8 is connected to nodes 11 (weight: 8), 3 (weight: 1).\nNode 9 is connected to nodes 3 (weight: 1), 2 (weight: 4).\nNode 0 is connected to nodes 3 (weight: 5), 2 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=3, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 120, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 5 (weight: 9), 0 (weight: 6), 4 (weight: 2), 9 (weight: 5), 1 (weight: 10), 2 (weight: 6), 6 (weight: 1).\nNode 5 is connected to nodes 7 (weight: 9), 0 (weight: 4), 4 (weight: 4), 1 (weight: 10), 6 (weight: 2).\nNode 0 is connected to nodes 7 (weight: 6), 5 (weight: 4), 4 (weight: 9), 9 (weight: 8), 1 (weight: 7), 2 (weight: 5).\nNode 4 is connected to nodes 7 (weight: 2), 5 (weight: 4), 0 (weight: 9), 8 (weight: 7), 9 (weight: 1), 1 (weight: 4), 3 (weight: 3), 6 (weight: 6).\nNode 9 is connected to nodes 7 (weight: 5), 0 (weight: 8), 4 (weight: 1), 8 (weight: 8), 1 (weight: 3), 2 (weight: 8), 3 (weight: 1), 6 (weight: 3).\nNode 1 is connected to nodes 7 (weight: 10), 5 (weight: 10), 0 (weight: 7), 4 (weight: 4), 9 (weight: 3), 2 (weight: 4).\nNode 2 is connected to nodes 7 (weight: 6), 0 (weight: 5), 9 (weight: 8), 1 (weight: 4), 8 (weight: 6), 3 (weight: 1).\nNode 6 is connected to nodes 7 (weight: 1), 5 (weight: 2), 4 (weight: 6), 9 (weight: 3), 8 (weight: 10), 3 (weight: 9).\nNode 8 is connected to nodes 4 (weight: 7), 9 (weight: 8), 2 (weight: 6), 6 (weight: 10).\nNode 3 is connected to nodes 4 (weight: 3), 9 (weight: 1), 2 (weight: 1), 6 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=9, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 121, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 4 (weight: 6), 13 (weight: 9), 8 (weight: 1), 9 (weight: 1).\nNode 4 is connected to node 5 (weight: 6).\nNode 13 is connected to node 5 (weight: 9).\nNode 8 is connected to nodes 5 (weight: 1), 12 (weight: 8).\nNode 9 is connected to nodes 5 (weight: 1), 0 (weight: 7), 2 (weight: 5), 3 (weight: 1), 1 (weight: 4), 7 (weight: 9).\nNode 12 is connected to node 8 (weight: 8).\nNode 0 is connected to node 9 (weight: 7).\nNode 2 is connected to node 9 (weight: 5).\nNode 3 is connected to node 9 (weight: 1).\nNode 1 is connected to nodes 9 (weight: 4), 6 (weight: 1).\nNode 7 is connected to nodes 9 (weight: 9), 11 (weight: 8), 14 (weight: 4), 10 (weight: 6).\nNode 6 is connected to node 1 (weight: 1).\nNode 11 is connected to node 7 (weight: 8).\nNode 14 is connected to node 7 (weight: 4).\nNode 10 is connected to node 7 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=11, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 122, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 3 (weight: 6), 7 (weight: 6), 4 (weight: 6), 5 (weight: 4), 6 (weight: 2), 10 (weight: 4), 1 (weight: 5).\nNode 3 is connected to nodes 9 (weight: 6), 7 (weight: 10), 2 (weight: 9), 4 (weight: 7), 5 (weight: 10), 6 (weight: 2), 10 (weight: 8), 0 (weight: 5), 8 (weight: 8).\nNode 7 is connected to nodes 9 (weight: 6), 3 (weight: 10), 2 (weight: 3), 4 (weight: 2), 5 (weight: 3), 6 (weight: 1), 10 (weight: 9), 0 (weight: 5).\nNode 4 is connected to nodes 9 (weight: 6), 3 (weight: 7), 7 (weight: 2), 2 (weight: 5), 5 (weight: 8), 6 (weight: 6), 10 (weight: 4), 0 (weight: 9), 1 (weight: 7).\nNode 5 is connected to nodes 9 (weight: 4), 3 (weight: 10), 7 (weight: 3), 4 (weight: 8), 2 (weight: 9), 6 (weight: 2), 10 (weight: 6), 0 (weight: 7), 8 (weight: 8), 1 (weight: 10).\nNode 6 is connected to nodes 9 (weight: 2), 3 (weight: 2), 7 (weight: 1), 4 (weight: 6), 5 (weight: 2), 2 (weight: 4), 0 (weight: 8), 8 (weight: 5), 1 (weight: 8).\nNode 10 is connected to nodes 9 (weight: 4), 3 (weight: 8), 7 (weight: 9), 4 (weight: 4), 5 (weight: 6), 2 (weight: 5), 0 (weight: 8), 8 (weight: 3), 1 (weight: 8).\nNode 1 is connected to nodes 9 (weight: 5), 4 (weight: 7), 5 (weight: 10), 6 (weight: 8), 10 (weight: 8), 0 (weight: 10), 8 (weight: 7).\nNode 2 is connected to nodes 3 (weight: 9), 7 (weight: 3), 4 (weight: 5), 5 (weight: 9), 6 (weight: 4), 10 (weight: 5), 8 (weight: 5).\nNode 0 is connected to nodes 3 (weight: 5), 7 (weight: 5), 4 (weight: 9), 5 (weight: 7), 6 (weight: 8), 10 (weight: 8), 1 (weight: 10), 8 (weight: 1).\nNode 8 is connected to nodes 3 (weight: 8), 5 (weight: 8), 6 (weight: 5), 10 (weight: 3), 1 (weight: 7), 2 (weight: 5), 0 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=2, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 123, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to nodes 4 (weight: 10), 7 (weight: 6), 3 (weight: 1), 0 (weight: 6), 2 (weight: 2), 10 (weight: 7), 8 (weight: 10), 6 (weight: 6), 5 (weight: 1), 9 (weight: 7), 1 (weight: 9), 11 (weight: 9).\nNode 4 is connected to nodes 13 (weight: 10), 7 (weight: 5), 3 (weight: 8), 0 (weight: 10), 8 (weight: 9), 12 (weight: 9), 6 (weight: 3), 5 (weight: 2), 9 (weight: 2).\nNode 7 is connected to nodes 13 (weight: 6), 4 (weight: 5), 14 (weight: 9), 10 (weight: 8), 12 (weight: 9), 6 (weight: 3), 5 (weight: 7), 9 (weight: 8), 1 (weight: 9), 11 (weight: 9).\nNode 3 is connected to nodes 13 (weight: 1), 4 (weight: 8), 0 (weight: 7), 14 (weight: 6), 2 (weight: 5), 10 (weight: 3), 8 (weight: 3), 12 (weight: 2), 6 (weight: 2), 5 (weight: 9), 1 (weight: 10).\nNode 0 is connected to nodes 13 (weight: 6), 4 (weight: 10), 3 (weight: 7), 14 (weight: 4), 2 (weight: 3), 10 (weight: 3), 12 (weight: 5), 6 (weight: 5), 5 (weight: 10), 9 (weight: 5), 1 (weight: 1), 11 (weight: 3).\nNode 2 is connected to nodes 13 (weight: 2), 3 (weight: 5), 0 (weight: 3), 14 (weight: 5), 12 (weight: 9), 6 (weight: 1), 5 (weight: 5), 9 (weight: 6).\nNode 10 is connected to nodes 13 (weight: 7), 7 (weight: 8), 3 (weight: 3), 0 (weight: 3), 14 (weight: 3), 8 (weight: 9), 6 (weight: 2), 5 (weight: 5), 1 (weight: 10).\nNode 8 is connected to nodes 13 (weight: 10), 4 (weight: 9), 3 (weight: 3), 10 (weight: 9), 14 (weight: 4), 12 (weight: 1), 6 (weight: 1), 5 (weight: 10), 9 (weight: 2), 1 (weight: 4).\nNode 6 is connected to nodes 13 (weight: 6), 4 (weight: 3), 7 (weight: 3), 3 (weight: 2), 0 (weight: 5), 2 (weight: 1), 10 (weight: 2), 8 (weight: 1), 14 (weight: 2), 12 (weight: 5), 5 (weight: 7), 11 (weight: 8).\nNode 5 is connected to nodes 13 (weight: 1), 4 (weight: 2), 7 (weight: 7), 3 (weight: 9), 0 (weight: 10), 2 (weight: 5), 10 (weight: 5), 8 (weight: 10), 6 (weight: 7), 14 (weight: 5), 12 (weight: 8), 9 (weight: 7), 11 (weight: 2).\nNode 9 is connected to nodes 13 (weight: 7), 4 (weight: 2), 7 (weight: 8), 0 (weight: 5), 2 (weight: 6), 8 (weight: 2), 5 (weight: 7), 1 (weight: 6), 11 (weight: 5).\nNode 1 is connected to nodes 13 (weight: 9), 7 (weight: 9), 3 (weight: 10), 0 (weight: 1), 10 (weight: 10), 8 (weight: 4), 9 (weight: 6), 12 (weight: 4), 11 (weight: 7).\nNode 11 is connected to nodes 13 (weight: 9), 7 (weight: 9), 0 (weight: 3), 6 (weight: 8), 5 (weight: 2), 9 (weight: 5), 1 (weight: 7), 14 (weight: 3).\nNode 12 is connected to nodes 4 (weight: 9), 7 (weight: 9), 3 (weight: 2), 0 (weight: 5), 2 (weight: 9), 8 (weight: 1), 6 (weight: 5), 5 (weight: 8), 1 (weight: 4), 14 (weight: 6).\nNode 14 is connected to nodes 7 (weight: 9), 3 (weight: 6), 0 (weight: 4), 2 (weight: 5), 10 (weight: 3), 8 (weight: 4), 6 (weight: 2), 5 (weight: 5), 11 (weight: 3), 12 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 13 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=13, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 124, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 8 (weight: 5), 6 (weight: 4).\nNode 8 is connected to nodes 3 (weight: 5), 5 (weight: 3), 7 (weight: 5), 4 (weight: 7).\nNode 6 is connected to node 3 (weight: 4).\nNode 5 is connected to node 8 (weight: 3).\nNode 7 is connected to nodes 8 (weight: 5), 4 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 7), 7 (weight: 7), 0 (weight: 5).\nNode 0 is connected to nodes 4 (weight: 5), 1 (weight: 8), 2 (weight: 8).\nNode 1 is connected to node 0 (weight: 8).\nNode 2 is connected to node 0 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=6, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 125, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 13 (weight: 4), 14 (weight: 2).\nNode 13 is connected to node 10 (weight: 4).\nNode 14 is connected to nodes 10 (weight: 2), 6 (weight: 8), 8 (weight: 10), 9 (weight: 1), 3 (weight: 3).\nNode 6 is connected to nodes 14 (weight: 8), 2 (weight: 3).\nNode 8 is connected to node 14 (weight: 10).\nNode 9 is connected to nodes 14 (weight: 1), 7 (weight: 3).\nNode 3 is connected to nodes 14 (weight: 3), 1 (weight: 6), 12 (weight: 8).\nNode 2 is connected to node 6 (weight: 3).\nNode 7 is connected to node 9 (weight: 3).\nNode 1 is connected to nodes 3 (weight: 6), 11 (weight: 5), 5 (weight: 3).\nNode 12 is connected to node 3 (weight: 8).\nNode 11 is connected to nodes 1 (weight: 5), 4 (weight: 10), 0 (weight: 8).\nNode 5 is connected to node 1 (weight: 3).\nNode 4 is connected to node 11 (weight: 10).\nNode 0 is connected to node 11 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=3, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 126, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 4 (weight: 3), 5 (weight: 5).\nNode 4 is connected to nodes 7 (weight: 3), 6 (weight: 7), 1 (weight: 9).\nNode 5 is connected to nodes 7 (weight: 5), 3 (weight: 1).\nNode 6 is connected to nodes 4 (weight: 7), 3 (weight: 2), 8 (weight: 2).\nNode 1 is connected to nodes 4 (weight: 9), 2 (weight: 2).\nNode 3 is connected to nodes 5 (weight: 1), 6 (weight: 2).\nNode 8 is connected to node 6 (weight: 2).\nNode 2 is connected to nodes 1 (weight: 2), 0 (weight: 7).\nNode 0 is connected to node 2 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=5, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 127, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 11 (weight: 1), 10 (weight: 7), 9 (weight: 3), 1 (weight: 7), 5 (weight: 7), 4 (weight: 10), 8 (weight: 9).\nNode 11 is connected to nodes 6 (weight: 1), 10 (weight: 10), 5 (weight: 7), 0 (weight: 4), 2 (weight: 4), 8 (weight: 2).\nNode 10 is connected to nodes 6 (weight: 7), 11 (weight: 10), 7 (weight: 7), 1 (weight: 5), 0 (weight: 4), 3 (weight: 9), 8 (weight: 7).\nNode 9 is connected to nodes 6 (weight: 3), 1 (weight: 7).\nNode 1 is connected to nodes 6 (weight: 7), 10 (weight: 5), 9 (weight: 7), 8 (weight: 2).\nNode 5 is connected to nodes 6 (weight: 7), 11 (weight: 7), 7 (weight: 9), 4 (weight: 1), 2 (weight: 3), 8 (weight: 3).\nNode 4 is connected to nodes 6 (weight: 10), 5 (weight: 1), 7 (weight: 3), 3 (weight: 9), 8 (weight: 8).\nNode 8 is connected to nodes 6 (weight: 9), 11 (weight: 2), 10 (weight: 7), 1 (weight: 2), 5 (weight: 3), 4 (weight: 8), 2 (weight: 10).\nNode 0 is connected to nodes 11 (weight: 4), 10 (weight: 4).\nNode 2 is connected to nodes 11 (weight: 4), 5 (weight: 3), 8 (weight: 10), 7 (weight: 4), 3 (weight: 8).\nNode 7 is connected to nodes 10 (weight: 7), 5 (weight: 9), 4 (weight: 3), 3 (weight: 4), 2 (weight: 4).\nNode 3 is connected to nodes 10 (weight: 9), 4 (weight: 9), 7 (weight: 4), 2 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=1, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 128, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 13 (weight: 9), 6 (weight: 3).\nNode 13 is connected to nodes 7 (weight: 9), 2 (weight: 7), 12 (weight: 2).\nNode 6 is connected to nodes 7 (weight: 3), 11 (weight: 2), 5 (weight: 1).\nNode 2 is connected to nodes 13 (weight: 7), 5 (weight: 6).\nNode 12 is connected to node 13 (weight: 2).\nNode 11 is connected to nodes 6 (weight: 2), 8 (weight: 7).\nNode 5 is connected to nodes 6 (weight: 1), 2 (weight: 6).\nNode 8 is connected to nodes 11 (weight: 7), 9 (weight: 3).\nNode 9 is connected to nodes 8 (weight: 3), 1 (weight: 2).\nNode 4 is connected to node 1 (weight: 9).\nNode 1 is connected to nodes 4 (weight: 9), 9 (weight: 2), 3 (weight: 10).\nNode 3 is connected to nodes 1 (weight: 10), 10 (weight: 3).\nNode 10 is connected to nodes 3 (weight: 3), 0 (weight: 10).\nNode 0 is connected to node 10 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=11, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 129, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 6 (weight: 1), 7 (weight: 6).\nNode 6 is connected to nodes 3 (weight: 1), 1 (weight: 8), 5 (weight: 4), 0 (weight: 1).\nNode 7 is connected to nodes 3 (weight: 6), 8 (weight: 6), 0 (weight: 6), 9 (weight: 2).\nNode 1 is connected to node 6 (weight: 8).\nNode 5 is connected to node 6 (weight: 4).\nNode 0 is connected to nodes 6 (weight: 1), 7 (weight: 6).\nNode 8 is connected to nodes 7 (weight: 6), 4 (weight: 4).\nNode 9 is connected to node 7 (weight: 2).\nNode 4 is connected to nodes 8 (weight: 4), 2 (weight: 8).\nNode 2 is connected to node 4 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 130, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 3), 4 (weight: 10), 3 (weight: 1), 1 (weight: 1).\nNode 2 is connected to nodes 4 (weight: 4), 9 (weight: 3), 0 (weight: 1), 7 (weight: 1).\nNode 3 is connected to nodes 5 (weight: 10), 0 (weight: 4).\nNode 1 is connected to node 5 (weight: 10).\nNode 9 is connected to node 4 (weight: 10).\nNode 0 is connected to node 4 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 9), 8 (weight: 2), 9 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 5), 8 (weight: 6).\nNode 8 is connected to nodes 1 (weight: 2), 5 (weight: 8), 9 (weight: 5), 2 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=5, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 131, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 5 (weight: 5), 2 (weight: 1), 0 (weight: 6).\nNode 5 is connected to nodes 6 (weight: 5), 4 (weight: 3).\nNode 2 is connected to nodes 6 (weight: 1), 1 (weight: 2).\nNode 0 is connected to node 6 (weight: 6).\nNode 4 is connected to nodes 5 (weight: 3), 3 (weight: 10).\nNode 1 is connected to nodes 2 (weight: 2), 7 (weight: 2).\nNode 3 is connected to nodes 4 (weight: 10), 7 (weight: 7).\nNode 7 is connected to nodes 1 (weight: 2), 3 (weight: 7), 8 (weight: 8).\nNode 8 is connected to node 7 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=8, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 132, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 4), 10 (weight: 2).\nNode 3 is connected to node 13 (weight: 8).\nNode 10 is connected to nodes 1 (weight: 4), 14 (weight: 7).\nNode 13 is connected to nodes 3 (weight: 1), 5 (weight: 7), 7 (weight: 3), 14 (weight: 1), 11 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 5), 13 (weight: 7), 8 (weight: 2), 3 (weight: 5).\nNode 14 is connected to node 11 (weight: 5).\nNode 0 is connected to nodes 13 (weight: 8), 9 (weight: 10), 8 (weight: 2).\nNode 9 is connected to nodes 4 (weight: 10), 5 (weight: 1), 7 (weight: 10), 6 (weight: 4), 2 (weight: 2).\nNode 5 is connected to node 3 (weight: 2).\nNode 11 is connected to nodes 3 (weight: 3), 1 (weight: 2), 6 (weight: 2), 12 (weight: 1).\nNode 4 is connected to node 13 (weight: 10).\nNode 6 is connected to nodes 14 (weight: 5), 13 (weight: 9), 9 (weight: 2), 10 (weight: 8), 8 (weight: 10).\nNode 12 is connected to node 8 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=11, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 133, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 10 (weight: 2), 4 (weight: 9), 3 (weight: 9), 11 (weight: 8), 9 (weight: 4).\nNode 10 is connected to nodes 0 (weight: 2), 1 (weight: 8), 4 (weight: 3).\nNode 4 is connected to nodes 0 (weight: 9), 10 (weight: 3), 1 (weight: 10), 9 (weight: 5), 6 (weight: 6), 7 (weight: 10), 2 (weight: 5), 5 (weight: 8), 11 (weight: 10).\nNode 3 is connected to nodes 0 (weight: 9), 1 (weight: 7), 9 (weight: 10), 2 (weight: 8), 6 (weight: 8).\nNode 11 is connected to nodes 0 (weight: 8), 4 (weight: 10), 8 (weight: 4).\nNode 9 is connected to nodes 0 (weight: 4), 4 (weight: 5), 3 (weight: 10), 8 (weight: 6), 6 (weight: 6).\nNode 1 is connected to nodes 10 (weight: 8), 4 (weight: 10), 3 (weight: 7), 6 (weight: 7).\nNode 6 is connected to nodes 4 (weight: 6), 3 (weight: 8), 9 (weight: 6), 1 (weight: 7), 8 (weight: 2), 2 (weight: 10), 5 (weight: 8).\nNode 7 is connected to node 4 (weight: 10).\nNode 2 is connected to nodes 4 (weight: 5), 3 (weight: 8), 6 (weight: 10), 8 (weight: 5), 5 (weight: 4).\nNode 5 is connected to nodes 4 (weight: 8), 6 (weight: 8), 2 (weight: 4).\nNode 8 is connected to nodes 11 (weight: 4), 9 (weight: 6), 6 (weight: 2), 2 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=4, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 134, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 3 (weight: 5), 0 (weight: 10), 7 (weight: 7), 2 (weight: 6), 10 (weight: 4), 1 (weight: 8).\nNode 3 is connected to nodes 5 (weight: 5), 10 (weight: 7), 6 (weight: 4).\nNode 0 is connected to nodes 5 (weight: 10), 7 (weight: 8), 9 (weight: 10).\nNode 7 is connected to nodes 5 (weight: 7), 0 (weight: 8), 2 (weight: 10), 8 (weight: 1), 4 (weight: 6).\nNode 2 is connected to nodes 5 (weight: 6), 7 (weight: 10), 9 (weight: 1).\nNode 10 is connected to nodes 5 (weight: 4), 3 (weight: 7), 6 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 8), 8 (weight: 4).\nNode 6 is connected to nodes 3 (weight: 4), 10 (weight: 9), 8 (weight: 10), 4 (weight: 7).\nNode 9 is connected to nodes 0 (weight: 10), 2 (weight: 1).\nNode 8 is connected to nodes 7 (weight: 1), 1 (weight: 4), 6 (weight: 10).\nNode 4 is connected to nodes 7 (weight: 6), 6 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=3, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 135, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 7 (weight: 8), 1 (weight: 6), 0 (weight: 3).\nNode 7 is connected to nodes 5 (weight: 8), 0 (weight: 5), 6 (weight: 9).\nNode 1 is connected to node 5 (weight: 6).\nNode 0 is connected to nodes 5 (weight: 3), 7 (weight: 5).\nNode 6 is connected to nodes 7 (weight: 9), 4 (weight: 8).\nNode 4 is connected to nodes 6 (weight: 8), 3 (weight: 8).\nNode 3 is connected to nodes 4 (weight: 8), 2 (weight: 2).\nNode 2 is connected to node 3 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=7, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 136, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 1 (weight: 7), 12 (weight: 2), 2 (weight: 6), 7 (weight: 9), 3 (weight: 7).\nNode 1 is connected to nodes 12 (weight: 1), 2 (weight: 2), 11 (weight: 6), 9 (weight: 6).\nNode 12 is connected to nodes 6 (weight: 9), 3 (weight: 3), 8 (weight: 1).\nNode 2 is connected to nodes 5 (weight: 6), 4 (weight: 5), 9 (weight: 9), 12 (weight: 4), 10 (weight: 1), 6 (weight: 5).\nNode 7 is connected to nodes 8 (weight: 8), 11 (weight: 3), 6 (weight: 8).\nNode 3 is connected to nodes 8 (weight: 2), 9 (weight: 1), 0 (weight: 3), 1 (weight: 3), 10 (weight: 8), 6 (weight: 10), 5 (weight: 3), 7 (weight: 6).\nNode 11 is connected to nodes 4 (weight: 2), 0 (weight: 3), 10 (weight: 4), 3 (weight: 5), 8 (weight: 8).\nNode 6 is connected to nodes 2 (weight: 8), 5 (weight: 1), 8 (weight: 8), 11 (weight: 6), 4 (weight: 2), 1 (weight: 10), 12 (weight: 3).\nNode 8 is connected to nodes 11 (weight: 10), 10 (weight: 10), 7 (weight: 6), 3 (weight: 7).\nNode 5 is connected to nodes 8 (weight: 3), 4 (weight: 6), 0 (weight: 3), 2 (weight: 3).\nNode 4 is connected to nodes 0 (weight: 10), 6 (weight: 6), 3 (weight: 7), 8 (weight: 4).\nNode 10 is connected to nodes 7 (weight: 2), 8 (weight: 1), 12 (weight: 10).\nNode 0 is connected to nodes 1 (weight: 7), 2 (weight: 5), 5 (weight: 5), 3 (weight: 8), 4 (weight: 5), 9 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nlength = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(length)\n```"}, {"id": 137, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 1 (weight: 1), 4 (weight: 3).\nNode 4 is connected to nodes 3 (weight: 6), 1 (weight: 10).\nNode 3 is connected to nodes 0 (weight: 10), 7 (weight: 8), 4 (weight: 9).\nNode 7 is connected to nodes 2 (weight: 2), 4 (weight: 10).\nNode 2 is connected to node 4 (weight: 2).\nNode 5 is connected to nodes 2 (weight: 4), 6 (weight: 1), 3 (weight: 1).\nNode 6 is connected to nodes 3 (weight: 10), 1 (weight: 1), 4 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=4, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 138, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 2 (weight: 9), 10 (weight: 1), 7 (weight: 7), 8 (weight: 3), 0 (weight: 3), 3 (weight: 5), 4 (weight: 7), 13 (weight: 7), 12 (weight: 10), 6 (weight: 4).\nNode 2 is connected to nodes 1 (weight: 9), 10 (weight: 4), 7 (weight: 8), 8 (weight: 2), 9 (weight: 3), 11 (weight: 1), 5 (weight: 4), 12 (weight: 6), 6 (weight: 5).\nNode 10 is connected to nodes 1 (weight: 1), 2 (weight: 4), 8 (weight: 10), 0 (weight: 9), 3 (weight: 9), 4 (weight: 6), 13 (weight: 10), 9 (weight: 2), 11 (weight: 7), 5 (weight: 7), 12 (weight: 9), 6 (weight: 6).\nNode 7 is connected to nodes 1 (weight: 7), 2 (weight: 8), 8 (weight: 10), 0 (weight: 5), 4 (weight: 1), 13 (weight: 9), 9 (weight: 6), 11 (weight: 6), 5 (weight: 2), 12 (weight: 5), 6 (weight: 4).\nNode 8 is connected to nodes 1 (weight: 3), 2 (weight: 2), 10 (weight: 10), 7 (weight: 10), 3 (weight: 7), 4 (weight: 9), 9 (weight: 8), 11 (weight: 5), 5 (weight: 9), 12 (weight: 5), 6 (weight: 5).\nNode 0 is connected to nodes 1 (weight: 3), 10 (weight: 9), 7 (weight: 5), 3 (weight: 7), 4 (weight: 7), 13 (weight: 8), 9 (weight: 1), 11 (weight: 4).\nNode 3 is connected to nodes 1 (weight: 5), 10 (weight: 9), 8 (weight: 7), 0 (weight: 7), 4 (weight: 9), 13 (weight: 1), 9 (weight: 7), 11 (weight: 8), 5 (weight: 10), 12 (weight: 3), 6 (weight: 6).\nNode 4 is connected to nodes 1 (weight: 7), 10 (weight: 6), 7 (weight: 1), 8 (weight: 9), 0 (weight: 7), 3 (weight: 9), 13 (weight: 5), 9 (weight: 6), 11 (weight: 1), 5 (weight: 7).\nNode 13 is connected to nodes 1 (weight: 7), 10 (weight: 10), 7 (weight: 9), 0 (weight: 8), 3 (weight: 1), 4 (weight: 5), 9 (weight: 3), 11 (weight: 1), 5 (weight: 4), 12 (weight: 3), 6 (weight: 7).\nNode 12 is connected to nodes 1 (weight: 10), 2 (weight: 6), 10 (weight: 9), 7 (weight: 5), 8 (weight: 5), 3 (weight: 3), 13 (weight: 3), 9 (weight: 1), 5 (weight: 3), 6 (weight: 6).\nNode 6 is connected to nodes 1 (weight: 4), 2 (weight: 5), 10 (weight: 6), 7 (weight: 4), 8 (weight: 5), 3 (weight: 6), 13 (weight: 7), 12 (weight: 6), 11 (weight: 3), 5 (weight: 9).\nNode 9 is connected to nodes 2 (weight: 3), 10 (weight: 2), 7 (weight: 6), 8 (weight: 8), 0 (weight: 1), 3 (weight: 7), 4 (weight: 6), 13 (weight: 3), 12 (weight: 1), 11 (weight: 5), 5 (weight: 10).\nNode 11 is connected to nodes 2 (weight: 1), 10 (weight: 7), 7 (weight: 6), 8 (weight: 5), 0 (weight: 4), 3 (weight: 8), 4 (weight: 1), 13 (weight: 1), 6 (weight: 3), 9 (weight: 5), 5 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 4), 10 (weight: 7), 7 (weight: 2), 8 (weight: 9), 3 (weight: 10), 4 (weight: 7), 13 (weight: 4), 12 (weight: 3), 6 (weight: 9), 9 (weight: 10), 11 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=12, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 139, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 0 (weight: 8), 5 (weight: 10), 7 (weight: 8), 8 (weight: 7).\nNode 0 is connected to nodes 12 (weight: 1), 4 (weight: 1), 10 (weight: 8), 3 (weight: 7).\nNode 5 is connected to node 3 (weight: 1).\nNode 7 is connected to nodes 10 (weight: 9), 1 (weight: 9), 0 (weight: 4), 12 (weight: 4), 5 (weight: 7).\nNode 8 is connected to nodes 10 (weight: 10), 1 (weight: 9), 0 (weight: 7), 6 (weight: 1), 11 (weight: 2).\nNode 12 is connected to nodes 5 (weight: 2), 11 (weight: 7), 0 (weight: 5), 2 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 8), 10 (weight: 4), 12 (weight: 1).\nNode 3 is connected to nodes 0 (weight: 4), 6 (weight: 8), 11 (weight: 3).\nNode 1 is connected to nodes 6 (weight: 1), 3 (weight: 5).\nNode 6 is connected to node 9 (weight: 7).\nNode 11 is connected to nodes 8 (weight: 5), 10 (weight: 1), 1 (weight: 10), 6 (weight: 5).\nNode 9 is connected to node 8 (weight: 3).\nNode 2 is connected to nodes 12 (weight: 9), 5 (weight: 10), 9 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=7, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 140, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to node 6 (weight: 7).\nNode 6 is connected to nodes 13 (weight: 7), 1 (weight: 6).\nNode 1 is connected to nodes 6 (weight: 6), 2 (weight: 10), 10 (weight: 2).\nNode 2 is connected to nodes 1 (weight: 10), 12 (weight: 4), 5 (weight: 6).\nNode 10 is connected to node 1 (weight: 2).\nNode 9 is connected to nodes 8 (weight: 10), 7 (weight: 9).\nNode 8 is connected to nodes 9 (weight: 10), 11 (weight: 10).\nNode 7 is connected to nodes 9 (weight: 9), 0 (weight: 10).\nNode 11 is connected to nodes 8 (weight: 10), 12 (weight: 4), 0 (weight: 7).\nNode 0 is connected to nodes 7 (weight: 10), 11 (weight: 7), 3 (weight: 5).\nNode 12 is connected to nodes 11 (weight: 4), 2 (weight: 4).\nNode 3 is connected to node 0 (weight: 5).\nNode 5 is connected to nodes 2 (weight: 6), 4 (weight: 7).\nNode 4 is connected to node 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 for each edge\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 9 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=9, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 141, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 10 (weight: 8), 2 (weight: 7), 0 (weight: 7), 1 (weight: 4).\nNode 10 is connected to nodes 7 (weight: 8), 3 (weight: 3), 2 (weight: 1), 0 (weight: 3), 6 (weight: 7).\nNode 2 is connected to nodes 7 (weight: 7), 10 (weight: 1), 13 (weight: 9).\nNode 0 is connected to nodes 7 (weight: 7), 10 (weight: 3), 3 (weight: 2), 6 (weight: 8), 8 (weight: 9).\nNode 1 is connected to nodes 7 (weight: 4), 5 (weight: 6), 6 (weight: 5), 4 (weight: 5), 9 (weight: 3), 13 (weight: 8).\nNode 3 is connected to nodes 10 (weight: 3), 0 (weight: 2), 11 (weight: 6), 9 (weight: 9), 14 (weight: 2).\nNode 6 is connected to nodes 10 (weight: 7), 0 (weight: 8), 1 (weight: 5).\nNode 13 is connected to nodes 2 (weight: 9), 1 (weight: 8), 4 (weight: 7), 11 (weight: 7).\nNode 8 is connected to nodes 0 (weight: 9), 14 (weight: 8), 9 (weight: 2), 11 (weight: 4).\nNode 5 is connected to nodes 1 (weight: 6), 14 (weight: 3), 4 (weight: 8).\nNode 4 is connected to nodes 1 (weight: 5), 5 (weight: 8), 13 (weight: 7), 12 (weight: 1).\nNode 9 is connected to nodes 1 (weight: 3), 3 (weight: 9), 14 (weight: 10), 8 (weight: 2).\nNode 11 is connected to nodes 3 (weight: 6), 13 (weight: 7), 8 (weight: 4).\nNode 14 is connected to nodes 3 (weight: 2), 5 (weight: 3), 9 (weight: 10), 12 (weight: 6), 8 (weight: 8).\nNode 12 is connected to nodes 14 (weight: 6), 4 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=2, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 142, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 10), 9 (weight: 3), 8 (weight: 3), 5 (weight: 1).\nNode 2 is connected to node 6 (weight: 10).\nNode 9 is connected to nodes 6 (weight: 3), 0 (weight: 10).\nNode 8 is connected to nodes 6 (weight: 3), 3 (weight: 2).\nNode 5 is connected to node 6 (weight: 1).\nNode 0 is connected to nodes 9 (weight: 10), 7 (weight: 10), 4 (weight: 2).\nNode 3 is connected to nodes 8 (weight: 2), 1 (weight: 2).\nNode 1 is connected to node 3 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 10), 4 (weight: 1).\nNode 4 is connected to nodes 0 (weight: 2), 7 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=9, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 143, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 8 (weight: 3), 7 (weight: 8), 2 (weight: 7).\nNode 8 is connected to nodes 3 (weight: 3), 6 (weight: 2).\nNode 7 is connected to node 3 (weight: 8).\nNode 2 is connected to nodes 3 (weight: 7), 0 (weight: 5).\nNode 6 is connected to nodes 8 (weight: 2), 5 (weight: 10).\nNode 0 is connected to node 2 (weight: 5).\nNode 5 is connected to nodes 6 (weight: 10), 4 (weight: 6), 1 (weight: 2).\nNode 4 is connected to nodes 5 (weight: 6), 1 (weight: 6).\nNode 1 is connected to nodes 5 (weight: 2), 4 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=8, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 144, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 2 (weight: 4), 3 (weight: 1).\nNode 2 is connected to nodes 12 (weight: 4), 6 (weight: 2).\nNode 3 is connected to node 12 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 2), 7 (weight: 3), 9 (weight: 9).\nNode 7 is connected to nodes 6 (weight: 3), 11 (weight: 5).\nNode 9 is connected to nodes 6 (weight: 9), 10 (weight: 8), 1 (weight: 1).\nNode 11 is connected to nodes 7 (weight: 5), 1 (weight: 4).\nNode 1 is connected to nodes 11 (weight: 4), 9 (weight: 1).\nNode 10 is connected to nodes 9 (weight: 8), 8 (weight: 4).\nNode 8 is connected to nodes 10 (weight: 4), 5 (weight: 7).\nNode 5 is connected to nodes 8 (weight: 7), 4 (weight: 9).\nNode 4 is connected to nodes 5 (weight: 9), 0 (weight: 7).\nNode 0 is connected to node 4 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=2, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 145, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 8 (weight: 4), 0 (weight: 1), 12 (weight: 1).\nNode 8 is connected to nodes 2 (weight: 4), 6 (weight: 4), 5 (weight: 6), 13 (weight: 1).\nNode 0 is connected to nodes 2 (weight: 1), 7 (weight: 8), 12 (weight: 5), 5 (weight: 3), 14 (weight: 3).\nNode 12 is connected to nodes 2 (weight: 1), 0 (weight: 5), 7 (weight: 6), 14 (weight: 7).\nNode 6 is connected to nodes 8 (weight: 4), 9 (weight: 9), 7 (weight: 4), 1 (weight: 5), 3 (weight: 3).\nNode 5 is connected to nodes 8 (weight: 6), 0 (weight: 3), 13 (weight: 4), 14 (weight: 6).\nNode 13 is connected to nodes 8 (weight: 1), 5 (weight: 4), 9 (weight: 7), 14 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 8), 12 (weight: 6), 6 (weight: 4), 1 (weight: 5).\nNode 14 is connected to nodes 0 (weight: 3), 12 (weight: 7), 5 (weight: 6), 13 (weight: 2), 10 (weight: 10).\nNode 9 is connected to nodes 6 (weight: 9), 13 (weight: 7), 10 (weight: 9), 11 (weight: 4).\nNode 1 is connected to nodes 6 (weight: 5), 7 (weight: 5), 3 (weight: 5), 4 (weight: 10).\nNode 3 is connected to nodes 6 (weight: 3), 11 (weight: 8), 1 (weight: 5), 4 (weight: 4).\nNode 10 is connected to nodes 9 (weight: 9), 11 (weight: 7), 14 (weight: 10).\nNode 11 is connected to nodes 10 (weight: 7), 9 (weight: 4), 4 (weight: 8), 3 (weight: 8).\nNode 4 is connected to nodes 11 (weight: 8), 1 (weight: 10), 3 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=7, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 146, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 2 (weight: 4), 7 (weight: 6), 4 (weight: 5), 1 (weight: 7).\nNode 2 is connected to nodes 0 (weight: 4), 7 (weight: 9), 5 (weight: 5).\nNode 7 is connected to nodes 0 (weight: 6), 2 (weight: 9), 4 (weight: 9), 8 (weight: 9), 5 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 5), 7 (weight: 9), 3 (weight: 5), 8 (weight: 1), 5 (weight: 2), 6 (weight: 9).\nNode 1 is connected to nodes 0 (weight: 7), 3 (weight: 7), 8 (weight: 1).\nNode 5 is connected to nodes 2 (weight: 5), 7 (weight: 9), 4 (weight: 2), 3 (weight: 1).\nNode 8 is connected to nodes 7 (weight: 9), 4 (weight: 1), 1 (weight: 1), 3 (weight: 3).\nNode 3 is connected to nodes 4 (weight: 5), 1 (weight: 7), 5 (weight: 1), 8 (weight: 3), 6 (weight: 2).\nNode 6 is connected to nodes 4 (weight: 9), 3 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=6, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 147, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 2 (weight: 1), 1 (weight: 9).\nNode 2 is connected to nodes 8 (weight: 1), 9 (weight: 9), 4 (weight: 9).\nNode 1 is connected to nodes 8 (weight: 9), 9 (weight: 6).\nNode 9 is connected to nodes 2 (weight: 9), 1 (weight: 6), 5 (weight: 8).\nNode 4 is connected to nodes 2 (weight: 9), 10 (weight: 8).\nNode 5 is connected to nodes 9 (weight: 8), 6 (weight: 4).\nNode 10 is connected to nodes 4 (weight: 8), 0 (weight: 8).\nNode 6 is connected to nodes 5 (weight: 4), 7 (weight: 5), 3 (weight: 9).\nNode 7 is connected to node 6 (weight: 5).\nNode 3 is connected to node 6 (weight: 9).\nNode 0 is connected to node 10 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=1, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 148, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 2 (weight: 2), 5 (weight: 5), 13 (weight: 10).\nNode 2 is connected to nodes 12 (weight: 2), 11 (weight: 7), 6 (weight: 8), 7 (weight: 10), 14 (weight: 3), 4 (weight: 8).\nNode 5 is connected to node 12 (weight: 5).\nNode 13 is connected to nodes 12 (weight: 10), 8 (weight: 5), 1 (weight: 8).\nNode 11 is connected to node 2 (weight: 7).\nNode 6 is connected to node 2 (weight: 8).\nNode 7 is connected to node 2 (weight: 10).\nNode 14 is connected to nodes 2 (weight: 3), 9 (weight: 1).\nNode 4 is connected to node 2 (weight: 8).\nNode 8 is connected to nodes 13 (weight: 5), 3 (weight: 4), 10 (weight: 2), 0 (weight: 4).\nNode 1 is connected to node 13 (weight: 8).\nNode 9 is connected to node 14 (weight: 1).\nNode 3 is connected to node 8 (weight: 4).\nNode 10 is connected to node 8 (weight: 2).\nNode 0 is connected to node 8 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=12, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 149, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 5 (weight: 4), 0 (weight: 7).\nNode 5 is connected to nodes 3 (weight: 4), 7 (weight: 5).\nNode 0 is connected to nodes 3 (weight: 7), 7 (weight: 2).\nNode 7 is connected to nodes 5 (weight: 5), 0 (weight: 2), 4 (weight: 10).\nNode 4 is connected to nodes 7 (weight: 10), 1 (weight: 3).\nNode 1 is connected to nodes 4 (weight: 3), 6 (weight: 8).\nNode 6 is connected to nodes 1 (weight: 8), 2 (weight: 7).\nNode 2 is connected to node 6 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=4, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 150, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 9 (weight: 3), 0 (weight: 6), 12 (weight: 6), 5 (weight: 8), 6 (weight: 7), 1 (weight: 3).\nNode 9 is connected to nodes 10 (weight: 3), 4 (weight: 3), 5 (weight: 7), 6 (weight: 9).\nNode 0 is connected to nodes 10 (weight: 6), 13 (weight: 2), 7 (weight: 2), 6 (weight: 4), 2 (weight: 1), 1 (weight: 2).\nNode 12 is connected to node 10 (weight: 6).\nNode 5 is connected to nodes 10 (weight: 8), 9 (weight: 7), 4 (weight: 6), 13 (weight: 4), 6 (weight: 2).\nNode 6 is connected to nodes 10 (weight: 7), 9 (weight: 9), 0 (weight: 4), 5 (weight: 2).\nNode 1 is connected to nodes 10 (weight: 3), 0 (weight: 2), 8 (weight: 2), 13 (weight: 6).\nNode 4 is connected to nodes 9 (weight: 3), 5 (weight: 6), 8 (weight: 9), 3 (weight: 7), 7 (weight: 9).\nNode 13 is connected to nodes 0 (weight: 2), 5 (weight: 4), 1 (weight: 6), 8 (weight: 4), 2 (weight: 5).\nNode 7 is connected to nodes 0 (weight: 2), 4 (weight: 9).\nNode 2 is connected to nodes 0 (weight: 1), 8 (weight: 2), 11 (weight: 8), 13 (weight: 5).\nNode 8 is connected to nodes 1 (weight: 2), 4 (weight: 9), 13 (weight: 4), 2 (weight: 2).\nNode 3 is connected to nodes 4 (weight: 7), 11 (weight: 4).\nNode 11 is connected to nodes 3 (weight: 4), 2 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=3, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 151, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 2 (weight: 4), 3 (weight: 8), 0 (weight: 7), 5 (weight: 9), 6 (weight: 5).\nNode 2 is connected to nodes 8 (weight: 4), 4 (weight: 2), 6 (weight: 8).\nNode 3 is connected to nodes 8 (weight: 8), 5 (weight: 4), 9 (weight: 1), 6 (weight: 8).\nNode 0 is connected to nodes 8 (weight: 7), 9 (weight: 9), 7 (weight: 9).\nNode 5 is connected to nodes 8 (weight: 9), 3 (weight: 4).\nNode 6 is connected to nodes 8 (weight: 5), 2 (weight: 8), 3 (weight: 8), 9 (weight: 4).\nNode 4 is connected to nodes 2 (weight: 2), 1 (weight: 3), 9 (weight: 4), 7 (weight: 10).\nNode 9 is connected to nodes 3 (weight: 1), 0 (weight: 9), 6 (weight: 4), 4 (weight: 4).\nNode 7 is connected to nodes 0 (weight: 9), 4 (weight: 10).\nNode 1 is connected to node 4 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=6, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 152, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 7 is connected to nodes 2 (weight: 6), 5 (weight: 5).\nNode 2 is connected to nodes 7 (weight: 6), 3 (weight: 4).\nNode 5 is connected to nodes 7 (weight: 5), 3 (weight: 5), 1 (weight: 8), 0 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 4), 5 (weight: 5).\nNode 1 is connected to nodes 5 (weight: 8), 6 (weight: 2).\nNode 0 is connected to nodes 5 (weight: 2), 8 (weight: 3).\nNode 4 is connected to node 8 (weight: 6).\nNode 8 is connected to nodes 4 (weight: 6), 0 (weight: 3).\nNode 6 is connected to node 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=4, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 153, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 7 (weight: 7), 6 (weight: 4), 2 (weight: 4).\nNode 7 is connected to nodes 5 (weight: 2), 0 (weight: 3).\nNode 6 is connected to nodes 5 (weight: 6), 2 (weight: 9).\nNode 2 is connected to nodes 7 (weight: 1), 1 (weight: 4), 3 (weight: 2), 5 (weight: 8).\nNode 5 is connected to nodes 0 (weight: 3), 1 (weight: 7), 3 (weight: 2).\nNode 1 is connected to nodes 6 (weight: 5), 0 (weight: 7).\nNode 3 is connected to nodes 6 (weight: 4), 2 (weight: 1), 7 (weight: 8), 1 (weight: 5), 4 (weight: 7).\nNode 4 is connected to nodes 6 (weight: 7), 5 (weight: 1), 0 (weight: 6), 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=1, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 154, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to node 3 (weight: 10).\nNode 3 is connected to nodes 5 (weight: 10), 0 (weight: 5).\nNode 0 is connected to nodes 3 (weight: 5), 8 (weight: 4).\nNode 8 is connected to nodes 0 (weight: 4), 7 (weight: 8), 10 (weight: 5).\nNode 4 is connected to node 9 (weight: 1).\nNode 9 is connected to nodes 4 (weight: 1), 1 (weight: 4), 6 (weight: 3).\nNode 1 is connected to nodes 9 (weight: 4), 2 (weight: 6).\nNode 6 is connected to node 9 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 6), 10 (weight: 4).\nNode 7 is connected to nodes 8 (weight: 8), 10 (weight: 6).\nNode 10 is connected to nodes 8 (weight: 5), 7 (weight: 6), 2 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 3 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=3, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 155, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 6), 5 (weight: 10), 0 (weight: 7), 6 (weight: 7), 4 (weight: 9).\nNode 3 is connected to nodes 8 (weight: 6), 4 (weight: 9), 13 (weight: 5).\nNode 5 is connected to nodes 8 (weight: 10), 11 (weight: 2), 13 (weight: 10).\nNode 0 is connected to nodes 8 (weight: 7), 12 (weight: 6), 13 (weight: 6), 10 (weight: 9), 2 (weight: 5).\nNode 6 is connected to nodes 8 (weight: 7), 12 (weight: 10), 13 (weight: 4), 4 (weight: 3), 7 (weight: 3), 2 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 9), 3 (weight: 9), 6 (weight: 3), 13 (weight: 9), 11 (weight: 2).\nNode 13 is connected to nodes 3 (weight: 5), 5 (weight: 10), 0 (weight: 6), 6 (weight: 4), 4 (weight: 9), 12 (weight: 6), 9 (weight: 1), 10 (weight: 9), 1 (weight: 2), 11 (weight: 10), 7 (weight: 4).\nNode 11 is connected to nodes 5 (weight: 2), 4 (weight: 2), 13 (weight: 10), 7 (weight: 8), 2 (weight: 1).\nNode 12 is connected to nodes 0 (weight: 6), 6 (weight: 10), 13 (weight: 6), 9 (weight: 3), 10 (weight: 1), 1 (weight: 5).\nNode 10 is connected to nodes 0 (weight: 9), 13 (weight: 9), 12 (weight: 1).\nNode 2 is connected to nodes 0 (weight: 5), 6 (weight: 7), 11 (weight: 1), 9 (weight: 6).\nNode 7 is connected to nodes 6 (weight: 3), 13 (weight: 4), 11 (weight: 8), 1 (weight: 1).\nNode 9 is connected to nodes 13 (weight: 1), 12 (weight: 3), 2 (weight: 6).\nNode 1 is connected to nodes 13 (weight: 2), 12 (weight: 5), 7 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=10, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 156, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 8 (weight: 1), 12 (weight: 4), 11 (weight: 4), 9 (weight: 6), 10 (weight: 2).\nNode 8 is connected to nodes 3 (weight: 1), 7 (weight: 3), 2 (weight: 2).\nNode 12 is connected to node 3 (weight: 4).\nNode 11 is connected to nodes 3 (weight: 4), 1 (weight: 10).\nNode 9 is connected to nodes 3 (weight: 6), 4 (weight: 10), 13 (weight: 2).\nNode 10 is connected to node 3 (weight: 2).\nNode 7 is connected to nodes 8 (weight: 3), 5 (weight: 9), 0 (weight: 6).\nNode 2 is connected to node 8 (weight: 2).\nNode 1 is connected to node 11 (weight: 10).\nNode 4 is connected to node 9 (weight: 10).\nNode 13 is connected to node 9 (weight: 2).\nNode 5 is connected to node 7 (weight: 9).\nNode 0 is connected to nodes 7 (weight: 6), 6 (weight: 1).\nNode 6 is connected to node 0 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=11, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 157, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 9 (weight: 6), 12 (weight: 7), 1 (weight: 10), 14 (weight: 1), 13 (weight: 7), 8 (weight: 7), 6 (weight: 9), 2 (weight: 8), 5 (weight: 5).\nNode 9 is connected to node 0 (weight: 6).\nNode 12 is connected to nodes 0 (weight: 7), 3 (weight: 4), 14 (weight: 5), 8 (weight: 1), 7 (weight: 7), 11 (weight: 6), 10 (weight: 2), 1 (weight: 3), 6 (weight: 3).\nNode 1 is connected to nodes 0 (weight: 10), 12 (weight: 3), 14 (weight: 9), 4 (weight: 2), 11 (weight: 1), 2 (weight: 1).\nNode 14 is connected to nodes 0 (weight: 1), 12 (weight: 5), 1 (weight: 9), 8 (weight: 1), 7 (weight: 1), 5 (weight: 10), 10 (weight: 7), 4 (weight: 9), 6 (weight: 1), 11 (weight: 4).\nNode 13 is connected to nodes 0 (weight: 7), 3 (weight: 7), 6 (weight: 9), 7 (weight: 3).\nNode 8 is connected to nodes 0 (weight: 7), 12 (weight: 1), 14 (weight: 1).\nNode 6 is connected to nodes 0 (weight: 9), 12 (weight: 3), 14 (weight: 1), 13 (weight: 9).\nNode 2 is connected to nodes 0 (weight: 8), 1 (weight: 1), 5 (weight: 7), 11 (weight: 9).\nNode 5 is connected to nodes 0 (weight: 5), 14 (weight: 10), 2 (weight: 7).\nNode 3 is connected to nodes 12 (weight: 4), 13 (weight: 7), 7 (weight: 10), 10 (weight: 6).\nNode 7 is connected to nodes 12 (weight: 7), 14 (weight: 1), 13 (weight: 3), 3 (weight: 10).\nNode 11 is connected to nodes 12 (weight: 6), 1 (weight: 1), 14 (weight: 4), 2 (weight: 9), 4 (weight: 6).\nNode 10 is connected to nodes 12 (weight: 2), 14 (weight: 7), 3 (weight: 6).\nNode 4 is connected to nodes 1 (weight: 2), 14 (weight: 9), 11 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 14\nshortest_path_length = nx.shortest_path_length(G, source=3, target=14, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 158, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 11 (weight: 7), 9 (weight: 4).\nNode 11 is connected to nodes 2 (weight: 7), 4 (weight: 8), 1 (weight: 5), 8 (weight: 5), 6 (weight: 9), 0 (weight: 6), 3 (weight: 10).\nNode 9 is connected to nodes 2 (weight: 4), 7 (weight: 8).\nNode 4 is connected to node 11 (weight: 8).\nNode 1 is connected to node 11 (weight: 5).\nNode 8 is connected to node 11 (weight: 5).\nNode 6 is connected to nodes 11 (weight: 9), 5 (weight: 6).\nNode 0 is connected to nodes 11 (weight: 6), 14 (weight: 2), 10 (weight: 7), 12 (weight: 4), 13 (weight: 10).\nNode 3 is connected to node 11 (weight: 10).\nNode 7 is connected to node 9 (weight: 8).\nNode 5 is connected to node 6 (weight: 6).\nNode 14 is connected to node 0 (weight: 2).\nNode 10 is connected to node 0 (weight: 7).\nNode 12 is connected to node 0 (weight: 4).\nNode 13 is connected to node 0 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=5, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 159, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 11 (weight: 8), 8 (weight: 6), 12 (weight: 10), 3 (weight: 1), 9 (weight: 2).\nNode 11 is connected to nodes 4 (weight: 8), 13 (weight: 3), 7 (weight: 1).\nNode 8 is connected to nodes 4 (weight: 6), 0 (weight: 7), 14 (weight: 3), 3 (weight: 8), 10 (weight: 5), 13 (weight: 4), 6 (weight: 1).\nNode 12 is connected to nodes 4 (weight: 10), 3 (weight: 9), 9 (weight: 8).\nNode 3 is connected to nodes 4 (weight: 1), 8 (weight: 8), 12 (weight: 9), 0 (weight: 3), 14 (weight: 7), 2 (weight: 1), 1 (weight: 5), 5 (weight: 7), 6 (weight: 4), 9 (weight: 7).\nNode 9 is connected to nodes 4 (weight: 2), 12 (weight: 8), 3 (weight: 7), 7 (weight: 5), 2 (weight: 3), 1 (weight: 5), 6 (weight: 5), 10 (weight: 4).\nNode 13 is connected to nodes 11 (weight: 3), 8 (weight: 4), 7 (weight: 1), 5 (weight: 8), 6 (weight: 9).\nNode 7 is connected to nodes 11 (weight: 1), 9 (weight: 5), 13 (weight: 1), 14 (weight: 9).\nNode 0 is connected to nodes 8 (weight: 7), 3 (weight: 3), 2 (weight: 1).\nNode 14 is connected to nodes 8 (weight: 3), 3 (weight: 7), 7 (weight: 9), 5 (weight: 2), 6 (weight: 2).\nNode 10 is connected to nodes 8 (weight: 5), 9 (weight: 4), 2 (weight: 4).\nNode 6 is connected to nodes 8 (weight: 1), 3 (weight: 4), 9 (weight: 5), 13 (weight: 9), 14 (weight: 2).\nNode 2 is connected to nodes 3 (weight: 1), 9 (weight: 3), 0 (weight: 1), 10 (weight: 4), 1 (weight: 8).\nNode 1 is connected to nodes 3 (weight: 5), 9 (weight: 5), 2 (weight: 8).\nNode 5 is connected to nodes 3 (weight: 7), 13 (weight: 8), 14 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=1, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 160, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 4 (weight: 7), 0 (weight: 4).\nNode 4 is connected to nodes 3 (weight: 7), 2 (weight: 3), 0 (weight: 1).\nNode 0 is connected to nodes 3 (weight: 4), 4 (weight: 1), 5 (weight: 1), 9 (weight: 9), 7 (weight: 7), 6 (weight: 10), 2 (weight: 8).\nNode 2 is connected to nodes 4 (weight: 3), 0 (weight: 8), 9 (weight: 4), 6 (weight: 7).\nNode 5 is connected to nodes 0 (weight: 1), 9 (weight: 3), 6 (weight: 3), 1 (weight: 8), 10 (weight: 7).\nNode 9 is connected to nodes 0 (weight: 9), 5 (weight: 3), 6 (weight: 8), 2 (weight: 4).\nNode 7 is connected to nodes 0 (weight: 7), 6 (weight: 8), 10 (weight: 5).\nNode 6 is connected to nodes 0 (weight: 10), 5 (weight: 3), 9 (weight: 8), 7 (weight: 8), 2 (weight: 7), 1 (weight: 4), 10 (weight: 5).\nNode 1 is connected to nodes 5 (weight: 8), 6 (weight: 4).\nNode 10 is connected to nodes 5 (weight: 7), 6 (weight: 5), 8 (weight: 10), 7 (weight: 5).\nNode 8 is connected to node 10 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 161, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 9 (weight: 3), 1 (weight: 4), 12 (weight: 6), 10 (weight: 8), 6 (weight: 5), 0 (weight: 1), 7 (weight: 9), 2 (weight: 3), 4 (weight: 2), 3 (weight: 1), 8 (weight: 3), 5 (weight: 7).\nNode 9 is connected to nodes 11 (weight: 3), 0 (weight: 6), 4 (weight: 3), 7 (weight: 9), 1 (weight: 7), 8 (weight: 8), 6 (weight: 2).\nNode 1 is connected to nodes 11 (weight: 4), 9 (weight: 7), 7 (weight: 4), 12 (weight: 8).\nNode 12 is connected to nodes 11 (weight: 6), 1 (weight: 8), 3 (weight: 9).\nNode 10 is connected to nodes 11 (weight: 8), 7 (weight: 5), 13 (weight: 6), 5 (weight: 3).\nNode 6 is connected to nodes 11 (weight: 5), 9 (weight: 2), 13 (weight: 8), 3 (weight: 9).\nNode 0 is connected to nodes 11 (weight: 1), 9 (weight: 6), 7 (weight: 9).\nNode 7 is connected to nodes 11 (weight: 9), 9 (weight: 9), 1 (weight: 4), 10 (weight: 5), 0 (weight: 9), 13 (weight: 6), 2 (weight: 1), 8 (weight: 1).\nNode 2 is connected to nodes 11 (weight: 3), 7 (weight: 1), 13 (weight: 8), 4 (weight: 1).\nNode 4 is connected to nodes 11 (weight: 2), 9 (weight: 3), 2 (weight: 1).\nNode 3 is connected to nodes 11 (weight: 1), 12 (weight: 9), 6 (weight: 9), 5 (weight: 5).\nNode 8 is connected to nodes 11 (weight: 3), 9 (weight: 8), 7 (weight: 1).\nNode 5 is connected to nodes 11 (weight: 7), 10 (weight: 3), 3 (weight: 5).\nNode 13 is connected to nodes 10 (weight: 6), 6 (weight: 8), 7 (weight: 6), 2 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 162, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 7 (weight: 6), 5 (weight: 10), 6 (weight: 5), 2 (weight: 4), 9 (weight: 10), 1 (weight: 9), 3 (weight: 5), 13 (weight: 10), 0 (weight: 6).\nNode 7 is connected to nodes 8 (weight: 6), 10 (weight: 9).\nNode 5 is connected to nodes 8 (weight: 10), 12 (weight: 3).\nNode 6 is connected to nodes 8 (weight: 5), 11 (weight: 4), 14 (weight: 10).\nNode 2 is connected to nodes 8 (weight: 4), 1 (weight: 7), 12 (weight: 9).\nNode 9 is connected to nodes 8 (weight: 10), 0 (weight: 2).\nNode 1 is connected to nodes 8 (weight: 9), 2 (weight: 7).\nNode 3 is connected to nodes 8 (weight: 5), 11 (weight: 1), 0 (weight: 10), 12 (weight: 8).\nNode 13 is connected to nodes 8 (weight: 10), 11 (weight: 4), 4 (weight: 4).\nNode 0 is connected to nodes 8 (weight: 6), 9 (weight: 2), 3 (weight: 10).\nNode 10 is connected to nodes 7 (weight: 9), 11 (weight: 8), 12 (weight: 10), 4 (weight: 1).\nNode 12 is connected to nodes 5 (weight: 3), 2 (weight: 9), 3 (weight: 8), 10 (weight: 10), 11 (weight: 9).\nNode 11 is connected to nodes 6 (weight: 4), 3 (weight: 1), 13 (weight: 4), 10 (weight: 8), 12 (weight: 9), 14 (weight: 5).\nNode 14 is connected to nodes 6 (weight: 10), 11 (weight: 5).\nNode 4 is connected to nodes 13 (weight: 4), 10 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=7, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 163, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 8), 4 (weight: 8), 2 (weight: 5), 1 (weight: 5), 7 (weight: 4), 6 (weight: 9).\nNode 3 is connected to nodes 0 (weight: 8), 5 (weight: 6), 4 (weight: 1), 2 (weight: 10), 1 (weight: 2), 7 (weight: 4).\nNode 4 is connected to nodes 0 (weight: 8), 3 (weight: 1), 5 (weight: 8), 2 (weight: 10), 1 (weight: 2), 7 (weight: 8), 6 (weight: 6).\nNode 2 is connected to nodes 0 (weight: 5), 3 (weight: 10), 4 (weight: 10), 5 (weight: 5), 1 (weight: 4), 6 (weight: 3).\nNode 1 is connected to nodes 0 (weight: 5), 3 (weight: 2), 4 (weight: 2), 2 (weight: 4), 5 (weight: 10), 7 (weight: 9).\nNode 7 is connected to nodes 0 (weight: 4), 3 (weight: 4), 4 (weight: 8), 1 (weight: 9), 5 (weight: 7), 6 (weight: 2).\nNode 6 is connected to nodes 0 (weight: 9), 4 (weight: 6), 2 (weight: 3), 7 (weight: 2), 5 (weight: 2).\nNode 5 is connected to nodes 3 (weight: 6), 4 (weight: 8), 2 (weight: 5), 1 (weight: 10), 7 (weight: 7), 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=4, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 164, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 1 (weight: 2), 2 (weight: 9), 5 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 7), 0 (weight: 6), 4 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 3), 5 (weight: 7), 4 (weight: 2), 1 (weight: 7).\nNode 0 is connected to nodes 5 (weight: 1), 1 (weight: 9).\nNode 4 is connected to nodes 3 (weight: 6), 8 (weight: 2).\nNode 8 is connected to nodes 5 (weight: 3), 6 (weight: 8), 4 (weight: 8), 3 (weight: 2), 0 (weight: 10).\nNode 3 is connected to nodes 2 (weight: 10), 0 (weight: 9), 5 (weight: 4), 6 (weight: 8).\nNode 7 is connected to node 1 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=0, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 165, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 11 (weight: 9), 0 (weight: 8), 7 (weight: 7), 4 (weight: 6), 10 (weight: 1).\nNode 11 is connected to nodes 9 (weight: 2), 1 (weight: 9), 10 (weight: 4), 8 (weight: 7), 5 (weight: 10).\nNode 0 is connected to nodes 9 (weight: 5), 6 (weight: 5), 7 (weight: 7), 10 (weight: 2), 3 (weight: 7), 11 (weight: 3).\nNode 7 is connected to nodes 10 (weight: 5), 8 (weight: 8), 3 (weight: 10), 11 (weight: 9), 0 (weight: 3), 9 (weight: 7), 12 (weight: 3), 6 (weight: 5).\nNode 4 is connected to nodes 1 (weight: 1), 10 (weight: 6), 6 (weight: 4).\nNode 10 is connected to nodes 8 (weight: 1), 2 (weight: 4).\nNode 9 is connected to nodes 12 (weight: 9), 7 (weight: 7), 2 (weight: 8), 5 (weight: 3), 0 (weight: 3).\nNode 1 is connected to nodes 10 (weight: 7), 8 (weight: 1), 11 (weight: 9), 0 (weight: 6), 9 (weight: 7), 12 (weight: 5), 6 (weight: 6), 7 (weight: 2), 2 (weight: 7).\nNode 8 is connected to nodes 5 (weight: 5), 12 (weight: 5), 4 (weight: 5).\nNode 5 is connected to nodes 3 (weight: 7), 0 (weight: 7), 12 (weight: 8), 6 (weight: 6), 8 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 5), 3 (weight: 9), 0 (weight: 10), 9 (weight: 3).\nNode 12 is connected to nodes 2 (weight: 6), 10 (weight: 9), 8 (weight: 8), 5 (weight: 2), 11 (weight: 6), 9 (weight: 4).\nNode 2 is connected to nodes 1 (weight: 7), 10 (weight: 5), 8 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 12\nlength = nx.shortest_path_length(G, source=4, target=12, weight='weight')\nprint(length)\n```"}, {"id": 166, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 8), 10 (weight: 6), 1 (weight: 3), 6 (weight: 2), 9 (weight: 2).\nNode 4 is connected to nodes 2 (weight: 8), 0 (weight: 4), 10 (weight: 6), 11 (weight: 1), 1 (weight: 2), 9 (weight: 10), 8 (weight: 9).\nNode 10 is connected to nodes 2 (weight: 6), 4 (weight: 6), 11 (weight: 5), 7 (weight: 9), 5 (weight: 7), 9 (weight: 7), 8 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 3), 4 (weight: 2), 0 (weight: 1), 11 (weight: 2), 6 (weight: 8), 5 (weight: 3), 9 (weight: 10), 8 (weight: 1).\nNode 6 is connected to nodes 2 (weight: 2), 1 (weight: 8), 3 (weight: 10), 0 (weight: 2), 11 (weight: 3), 7 (weight: 7), 9 (weight: 4), 8 (weight: 7).\nNode 9 is connected to nodes 2 (weight: 2), 4 (weight: 10), 10 (weight: 7), 1 (weight: 10), 6 (weight: 4), 5 (weight: 1).\nNode 0 is connected to nodes 4 (weight: 4), 1 (weight: 1), 6 (weight: 2), 3 (weight: 5), 11 (weight: 1), 8 (weight: 10).\nNode 11 is connected to nodes 4 (weight: 1), 10 (weight: 5), 1 (weight: 2), 6 (weight: 3), 3 (weight: 10), 0 (weight: 1), 7 (weight: 8), 5 (weight: 9), 8 (weight: 7).\nNode 8 is connected to nodes 4 (weight: 9), 10 (weight: 7), 1 (weight: 1), 6 (weight: 7), 3 (weight: 10), 0 (weight: 10), 11 (weight: 7), 5 (weight: 1).\nNode 7 is connected to nodes 10 (weight: 9), 6 (weight: 7), 11 (weight: 8).\nNode 5 is connected to nodes 10 (weight: 7), 1 (weight: 3), 9 (weight: 1), 3 (weight: 3), 11 (weight: 9), 8 (weight: 1).\nNode 3 is connected to nodes 6 (weight: 10), 0 (weight: 5), 11 (weight: 10), 5 (weight: 3), 8 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 3\nlength = nx.shortest_path_length(G, source=10, target=3, weight='weight')\nprint(length)\n```"}, {"id": 167, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 11 (weight: 8), 10 (weight: 8), 8 (weight: 10).\nNode 11 is connected to nodes 9 (weight: 6), 5 (weight: 1), 7 (weight: 1).\nNode 10 is connected to nodes 4 (weight: 1), 2 (weight: 8), 9 (weight: 7), 1 (weight: 8).\nNode 8 is connected to nodes 2 (weight: 2), 6 (weight: 2), 3 (weight: 6), 1 (weight: 5), 10 (weight: 10).\nNode 9 is connected to nodes 0 (weight: 8), 10 (weight: 7), 11 (weight: 9), 6 (weight: 10), 12 (weight: 9).\nNode 5 is connected to nodes 0 (weight: 4), 7 (weight: 10), 1 (weight: 3), 2 (weight: 3), 11 (weight: 6), 12 (weight: 4).\nNode 7 is connected to nodes 1 (weight: 7), 6 (weight: 10), 12 (weight: 5), 5 (weight: 10).\nNode 4 is connected to nodes 2 (weight: 9), 11 (weight: 3), 0 (weight: 4), 10 (weight: 9).\nNode 1 is connected to nodes 10 (weight: 7), 2 (weight: 10), 12 (weight: 7), 3 (weight: 1), 0 (weight: 9).\nNode 6 is connected to nodes 0 (weight: 1), 10 (weight: 3), 2 (weight: 9), 11 (weight: 9).\nNode 3 is connected to nodes 0 (weight: 8), 1 (weight: 5), 2 (weight: 6), 6 (weight: 6).\nNode 0 is connected to nodes 1 (weight: 8), 10 (weight: 10), 11 (weight: 7), 9 (weight: 2), 5 (weight: 1), 3 (weight: 2).\nNode 12 is connected to nodes 9 (weight: 6), 5 (weight: 5), 4 (weight: 10), 2 (weight: 6), 6 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=7, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 168, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 5 (weight: 2), 8 (weight: 9), 1 (weight: 3).\nNode 5 is connected to nodes 4 (weight: 2), 6 (weight: 8), 0 (weight: 9).\nNode 8 is connected to nodes 4 (weight: 9), 7 (weight: 4).\nNode 1 is connected to node 4 (weight: 3).\nNode 6 is connected to nodes 5 (weight: 8), 2 (weight: 4), 3 (weight: 4).\nNode 0 is connected to nodes 5 (weight: 9), 7 (weight: 10).\nNode 7 is connected to nodes 8 (weight: 4), 0 (weight: 10).\nNode 2 is connected to node 6 (weight: 4).\nNode 3 is connected to node 6 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=3, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 169, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 7 (weight: 8), 0 (weight: 4).\nNode 7 is connected to nodes 4 (weight: 8), 3 (weight: 7).\nNode 0 is connected to nodes 4 (weight: 4), 6 (weight: 6), 2 (weight: 8).\nNode 3 is connected to node 7 (weight: 7).\nNode 6 is connected to nodes 0 (weight: 6), 2 (weight: 3), 1 (weight: 2).\nNode 2 is connected to nodes 0 (weight: 8), 6 (weight: 3).\nNode 1 is connected to nodes 6 (weight: 2), 5 (weight: 3).\nNode 5 is connected to node 1 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=4, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 170, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 2 is connected to nodes 3 (weight: 8), 4 (weight: 3).\nNode 3 is connected to nodes 2 (weight: 8), 5 (weight: 1).\nNode 4 is connected to nodes 2 (weight: 3), 6 (weight: 10).\nNode 5 is connected to nodes 3 (weight: 1), 1 (weight: 8).\nNode 6 is connected to nodes 4 (weight: 10), 0 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 8), 7 (weight: 2).\nNode 0 is connected to nodes 6 (weight: 9), 7 (weight: 8).\nNode 7 is connected to nodes 0 (weight: 8), 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=7, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 171, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 0 (weight: 9), 10 (weight: 1), 8 (weight: 1).\nNode 0 is connected to nodes 4 (weight: 9), 7 (weight: 4).\nNode 10 is connected to nodes 4 (weight: 1), 9 (weight: 5), 3 (weight: 4).\nNode 8 is connected to node 4 (weight: 1).\nNode 7 is connected to nodes 0 (weight: 4), 2 (weight: 3).\nNode 9 is connected to node 10 (weight: 5).\nNode 3 is connected to nodes 10 (weight: 4), 6 (weight: 5).\nNode 2 is connected to nodes 7 (weight: 3), 6 (weight: 6), 1 (weight: 6).\nNode 6 is connected to nodes 3 (weight: 5), 2 (weight: 6).\nNode 1 is connected to nodes 2 (weight: 6), 5 (weight: 2).\nNode 5 is connected to node 1 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=2, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 172, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 2 (weight: 3), 7 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 3), 7 (weight: 1).\nNode 7 is connected to nodes 1 (weight: 3), 2 (weight: 1), 6 (weight: 1).\nNode 6 is connected to nodes 7 (weight: 1), 4 (weight: 5).\nNode 5 is connected to nodes 4 (weight: 4), 3 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 4), 6 (weight: 5).\nNode 3 is connected to nodes 5 (weight: 7), 0 (weight: 9).\nNode 0 is connected to node 3 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=0, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 173, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 11 (weight: 3), 7 (weight: 8), 10 (weight: 10), 8 (weight: 3).\nNode 11 is connected to nodes 5 (weight: 3), 9 (weight: 1), 1 (weight: 4), 2 (weight: 4), 8 (weight: 9).\nNode 7 is connected to nodes 5 (weight: 8), 10 (weight: 10), 2 (weight: 4).\nNode 10 is connected to nodes 5 (weight: 10), 7 (weight: 10), 3 (weight: 9), 1 (weight: 6), 2 (weight: 4).\nNode 8 is connected to nodes 5 (weight: 3), 11 (weight: 9), 3 (weight: 10), 1 (weight: 1).\nNode 9 is connected to nodes 11 (weight: 1), 12 (weight: 7), 6 (weight: 2), 3 (weight: 7), 0 (weight: 2).\nNode 1 is connected to nodes 11 (weight: 4), 10 (weight: 6), 8 (weight: 1).\nNode 2 is connected to nodes 11 (weight: 4), 7 (weight: 4), 10 (weight: 4), 12 (weight: 9).\nNode 3 is connected to nodes 10 (weight: 9), 8 (weight: 10), 9 (weight: 7), 12 (weight: 4).\nNode 12 is connected to nodes 9 (weight: 7), 2 (weight: 9), 0 (weight: 1), 6 (weight: 5), 3 (weight: 4).\nNode 6 is connected to nodes 9 (weight: 2), 12 (weight: 5), 4 (weight: 3), 0 (weight: 7).\nNode 0 is connected to nodes 9 (weight: 2), 12 (weight: 1), 6 (weight: 7), 4 (weight: 9).\nNode 4 is connected to nodes 6 (weight: 3), 0 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=6, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 174, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to node 0 (weight: 7).\nNode 0 is connected to nodes 4 (weight: 7), 7 (weight: 3), 3 (weight: 9).\nNode 7 is connected to nodes 0 (weight: 3), 1 (weight: 6), 5 (weight: 8).\nNode 3 is connected to nodes 0 (weight: 9), 6 (weight: 9).\nNode 1 is connected to nodes 7 (weight: 6), 2 (weight: 8).\nNode 5 is connected to node 7 (weight: 8).\nNode 6 is connected to nodes 3 (weight: 9), 2 (weight: 2).\nNode 2 is connected to nodes 1 (weight: 8), 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=5, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 175, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 7 (weight: 4), 12 (weight: 10), 1 (weight: 7), 9 (weight: 10), 0 (weight: 1), 6 (weight: 8), 13 (weight: 2), 10 (weight: 8).\nNode 7 is connected to nodes 2 (weight: 4), 9 (weight: 10), 12 (weight: 8), 11 (weight: 4).\nNode 12 is connected to nodes 2 (weight: 10), 7 (weight: 8), 8 (weight: 9), 3 (weight: 2), 9 (weight: 9), 4 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 7), 0 (weight: 8), 9 (weight: 8).\nNode 9 is connected to nodes 2 (weight: 10), 7 (weight: 10), 12 (weight: 9), 1 (weight: 8), 8 (weight: 3), 13 (weight: 9), 3 (weight: 5), 11 (weight: 7), 0 (weight: 8), 10 (weight: 5), 5 (weight: 6).\nNode 0 is connected to nodes 2 (weight: 1), 1 (weight: 8), 9 (weight: 8), 13 (weight: 8), 11 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 8), 13 (weight: 4), 4 (weight: 6), 11 (weight: 8), 3 (weight: 9).\nNode 13 is connected to nodes 2 (weight: 2), 9 (weight: 9), 0 (weight: 8), 6 (weight: 4).\nNode 10 is connected to nodes 2 (weight: 8), 9 (weight: 5), 8 (weight: 4).\nNode 11 is connected to nodes 7 (weight: 4), 9 (weight: 7), 0 (weight: 4), 6 (weight: 8), 8 (weight: 7).\nNode 8 is connected to nodes 12 (weight: 9), 9 (weight: 3), 10 (weight: 4), 11 (weight: 7).\nNode 3 is connected to nodes 12 (weight: 2), 9 (weight: 5), 6 (weight: 9), 4 (weight: 9).\nNode 4 is connected to nodes 12 (weight: 4), 6 (weight: 6), 3 (weight: 9).\nNode 5 is connected to node 9 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=7, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 176, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 10 (weight: 4), 4 (weight: 5), 6 (weight: 3), 1 (weight: 8).\nNode 10 is connected to nodes 3 (weight: 4), 0 (weight: 5).\nNode 4 is connected to nodes 3 (weight: 5), 13 (weight: 4), 5 (weight: 7), 2 (weight: 6), 12 (weight: 9), 8 (weight: 7), 14 (weight: 10), 11 (weight: 1).\nNode 6 is connected to node 3 (weight: 3).\nNode 1 is connected to node 3 (weight: 8).\nNode 0 is connected to node 10 (weight: 5).\nNode 13 is connected to nodes 4 (weight: 4), 7 (weight: 9).\nNode 5 is connected to node 4 (weight: 7).\nNode 2 is connected to node 4 (weight: 6).\nNode 12 is connected to node 4 (weight: 9).\nNode 8 is connected to node 4 (weight: 7).\nNode 14 is connected to node 4 (weight: 10).\nNode 11 is connected to node 4 (weight: 1).\nNode 7 is connected to nodes 13 (weight: 9), 9 (weight: 4).\nNode 9 is connected to node 7 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=8, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 177, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 4 (weight: 9), 7 (weight: 1), 0 (weight: 10).\nNode 4 is connected to nodes 6 (weight: 9), 1 (weight: 4).\nNode 7 is connected to node 6 (weight: 1).\nNode 0 is connected to nodes 6 (weight: 10), 5 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 4), 3 (weight: 3).\nNode 5 is connected to nodes 0 (weight: 4), 3 (weight: 2), 8 (weight: 8).\nNode 3 is connected to nodes 1 (weight: 3), 5 (weight: 2).\nNode 2 is connected to nodes 8 (weight: 1), 9 (weight: 5).\nNode 8 is connected to nodes 2 (weight: 1), 5 (weight: 8).\nNode 9 is connected to node 2 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=4, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 178, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 10 (weight: 7), 0 (weight: 3), 4 (weight: 6), 1 (weight: 5), 3 (weight: 2), 5 (weight: 1), 12 (weight: 4), 9 (weight: 10), 11 (weight: 3), 6 (weight: 6), 7 (weight: 9), 2 (weight: 9).\nNode 10 is connected to nodes 8 (weight: 7), 0 (weight: 2), 13 (weight: 8), 4 (weight: 2), 1 (weight: 1), 5 (weight: 10), 11 (weight: 1), 6 (weight: 2), 7 (weight: 4), 2 (weight: 10).\nNode 0 is connected to nodes 8 (weight: 3), 10 (weight: 2), 4 (weight: 5), 1 (weight: 10), 3 (weight: 7), 5 (weight: 5), 12 (weight: 9), 9 (weight: 1), 6 (weight: 9), 7 (weight: 6).\nNode 4 is connected to nodes 8 (weight: 6), 10 (weight: 2), 0 (weight: 5), 13 (weight: 8), 3 (weight: 3), 5 (weight: 6), 11 (weight: 4), 6 (weight: 5).\nNode 1 is connected to nodes 8 (weight: 5), 10 (weight: 1), 0 (weight: 10), 5 (weight: 1), 12 (weight: 9), 9 (weight: 6), 6 (weight: 5), 7 (weight: 10), 2 (weight: 10).\nNode 3 is connected to nodes 8 (weight: 2), 0 (weight: 7), 4 (weight: 3), 13 (weight: 3), 12 (weight: 9), 9 (weight: 2), 7 (weight: 4), 2 (weight: 3).\nNode 5 is connected to nodes 8 (weight: 1), 10 (weight: 10), 0 (weight: 5), 4 (weight: 6), 1 (weight: 1), 13 (weight: 1), 12 (weight: 6), 9 (weight: 1), 11 (weight: 4), 6 (weight: 5), 2 (weight: 2).\nNode 12 is connected to nodes 8 (weight: 4), 0 (weight: 9), 1 (weight: 9), 3 (weight: 9), 5 (weight: 6), 6 (weight: 3), 7 (weight: 10), 2 (weight: 6).\nNode 9 is connected to nodes 8 (weight: 10), 0 (weight: 1), 1 (weight: 6), 3 (weight: 2), 5 (weight: 1), 11 (weight: 8), 6 (weight: 7), 7 (weight: 6), 2 (weight: 2).\nNode 11 is connected to nodes 8 (weight: 3), 10 (weight: 1), 4 (weight: 4), 5 (weight: 4), 9 (weight: 8), 13 (weight: 5), 2 (weight: 2).\nNode 6 is connected to nodes 8 (weight: 6), 10 (weight: 2), 0 (weight: 9), 4 (weight: 5), 1 (weight: 5), 5 (weight: 5), 12 (weight: 3), 9 (weight: 7), 13 (weight: 1), 2 (weight: 10).\nNode 7 is connected to nodes 8 (weight: 9), 10 (weight: 4), 0 (weight: 6), 1 (weight: 10), 3 (weight: 4), 12 (weight: 10), 9 (weight: 6), 13 (weight: 8), 2 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 9), 10 (weight: 10), 1 (weight: 10), 3 (weight: 3), 5 (weight: 2), 12 (weight: 6), 9 (weight: 2), 11 (weight: 2), 6 (weight: 10), 7 (weight: 7), 13 (weight: 2).\nNode 13 is connected to nodes 10 (weight: 8), 4 (weight: 8), 3 (weight: 3), 5 (weight: 1), 11 (weight: 5), 6 (weight: 1), 7 (weight: 8), 2 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=0, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 179, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 7 (weight: 3), 1 (weight: 3).\nNode 7 is connected to node 3 (weight: 3).\nNode 1 is connected to nodes 3 (weight: 3), 9 (weight: 4).\nNode 9 is connected to nodes 1 (weight: 4), 5 (weight: 1), 6 (weight: 4), 8 (weight: 3).\nNode 5 is connected to node 9 (weight: 1).\nNode 6 is connected to nodes 9 (weight: 4), 4 (weight: 2), 2 (weight: 4), 0 (weight: 10).\nNode 8 is connected to node 9 (weight: 3).\nNode 4 is connected to node 6 (weight: 2).\nNode 2 is connected to node 6 (weight: 4).\nNode 0 is connected to node 6 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=6, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 180, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 1 (weight: 5), 7 (weight: 6), 5 (weight: 7), 0 (weight: 9).\nNode 1 is connected to nodes 10 (weight: 5), 4 (weight: 8), 3 (weight: 8), 7 (weight: 8), 5 (weight: 9), 6 (weight: 3).\nNode 7 is connected to nodes 10 (weight: 6), 1 (weight: 8), 9 (weight: 2), 4 (weight: 2), 8 (weight: 1), 5 (weight: 2), 6 (weight: 3), 2 (weight: 2), 0 (weight: 6).\nNode 5 is connected to nodes 10 (weight: 7), 1 (weight: 9), 7 (weight: 2), 9 (weight: 1), 8 (weight: 8), 3 (weight: 7), 6 (weight: 1).\nNode 0 is connected to nodes 10 (weight: 9), 7 (weight: 6), 4 (weight: 9), 8 (weight: 1), 3 (weight: 2), 6 (weight: 6).\nNode 4 is connected to nodes 1 (weight: 8), 7 (weight: 2), 0 (weight: 9).\nNode 3 is connected to nodes 1 (weight: 8), 5 (weight: 7), 0 (weight: 2), 9 (weight: 6), 6 (weight: 8), 2 (weight: 4).\nNode 6 is connected to nodes 1 (weight: 3), 7 (weight: 3), 5 (weight: 1), 0 (weight: 6), 9 (weight: 7), 3 (weight: 8), 8 (weight: 6), 2 (weight: 8).\nNode 9 is connected to nodes 7 (weight: 2), 5 (weight: 1), 3 (weight: 6), 6 (weight: 7), 2 (weight: 7).\nNode 8 is connected to nodes 7 (weight: 1), 5 (weight: 8), 0 (weight: 1), 6 (weight: 6), 2 (weight: 8).\nNode 2 is connected to nodes 7 (weight: 2), 9 (weight: 7), 3 (weight: 4), 6 (weight: 8), 8 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=1, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 181, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 7 (weight: 5), 8 (weight: 10), 4 (weight: 1), 5 (weight: 4), 3 (weight: 7), 6 (weight: 4).\nNode 7 is connected to nodes 2 (weight: 5), 0 (weight: 1), 1 (weight: 7), 4 (weight: 7).\nNode 8 is connected to nodes 2 (weight: 10), 3 (weight: 8), 1 (weight: 7).\nNode 4 is connected to nodes 2 (weight: 1), 7 (weight: 7), 3 (weight: 1).\nNode 5 is connected to nodes 2 (weight: 4), 6 (weight: 7).\nNode 3 is connected to nodes 2 (weight: 7), 8 (weight: 8), 4 (weight: 1), 0 (weight: 6).\nNode 6 is connected to nodes 2 (weight: 4), 5 (weight: 7).\nNode 0 is connected to nodes 7 (weight: 1), 3 (weight: 6).\nNode 1 is connected to nodes 7 (weight: 7), 8 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=8, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 182, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 3), 9 (weight: 8).\nNode 3 is connected to nodes 0 (weight: 3), 6 (weight: 2).\nNode 9 is connected to nodes 0 (weight: 8), 1 (weight: 1), 2 (weight: 1).\nNode 6 is connected to nodes 3 (weight: 2), 5 (weight: 5).\nNode 1 is connected to nodes 9 (weight: 1), 10 (weight: 2).\nNode 2 is connected to node 9 (weight: 1).\nNode 5 is connected to nodes 6 (weight: 5), 4 (weight: 10), 7 (weight: 7).\nNode 8 is connected to node 4 (weight: 10).\nNode 4 is connected to nodes 8 (weight: 10), 5 (weight: 10).\nNode 7 is connected to nodes 5 (weight: 7), 10 (weight: 5).\nNode 10 is connected to nodes 1 (weight: 2), 7 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=0, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 183, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 5 (weight: 6), 14 (weight: 9).\nNode 5 is connected to nodes 8 (weight: 6), 1 (weight: 2), 10 (weight: 3).\nNode 14 is connected to nodes 8 (weight: 9), 9 (weight: 7).\nNode 1 is connected to nodes 5 (weight: 2), 11 (weight: 10), 4 (weight: 10).\nNode 10 is connected to nodes 5 (weight: 3), 3 (weight: 10).\nNode 9 is connected to nodes 14 (weight: 7), 0 (weight: 9).\nNode 11 is connected to nodes 1 (weight: 10), 13 (weight: 7).\nNode 4 is connected to nodes 1 (weight: 10), 3 (weight: 2).\nNode 3 is connected to nodes 10 (weight: 10), 7 (weight: 10), 4 (weight: 2).\nNode 2 is connected to nodes 6 (weight: 10), 12 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 10), 7 (weight: 6).\nNode 12 is connected to node 2 (weight: 9).\nNode 7 is connected to nodes 6 (weight: 6), 3 (weight: 10).\nNode 13 is connected to node 11 (weight: 7).\nNode 0 is connected to node 9 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 13 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=13, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 184, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to node 3 (weight: 5).\nNode 3 is connected to nodes 8 (weight: 10), 7 (weight: 3).\nNode 8 is connected to node 6 (weight: 10).\nNode 7 is connected to nodes 1 (weight: 3), 5 (weight: 9).\nNode 5 is connected to nodes 9 (weight: 6), 3 (weight: 6).\nNode 9 is connected to nodes 1 (weight: 6), 0 (weight: 7).\nNode 1 is connected to nodes 2 (weight: 6), 9 (weight: 2).\nNode 0 is connected to nodes 3 (weight: 2), 8 (weight: 7), 1 (weight: 4).\nNode 4 is connected to nodes 1 (weight: 6), 7 (weight: 3), 3 (weight: 7), 8 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=6, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 185, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 4 (weight: 4), 5 (weight: 10).\nNode 4 is connected to nodes 0 (weight: 4), 3 (weight: 8).\nNode 5 is connected to nodes 0 (weight: 10), 6 (weight: 1).\nNode 3 is connected to nodes 4 (weight: 8), 7 (weight: 3).\nNode 6 is connected to nodes 5 (weight: 1), 1 (weight: 4).\nNode 7 is connected to nodes 3 (weight: 3), 1 (weight: 2).\nNode 1 is connected to nodes 7 (weight: 2), 2 (weight: 8), 6 (weight: 4).\nNode 2 is connected to node 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 186, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 3 (weight: 1), 11 (weight: 10), 10 (weight: 10).\nNode 3 is connected to node 6 (weight: 1).\nNode 11 is connected to node 5 (weight: 2).\nNode 10 is connected to nodes 6 (weight: 4), 0 (weight: 2), 7 (weight: 1).\nNode 6 is connected to nodes 1 (weight: 10), 3 (weight: 7).\nNode 5 is connected to nodes 11 (weight: 5), 6 (weight: 1), 0 (weight: 10).\nNode 7 is connected to node 6 (weight: 9).\nNode 1 is connected to node 8 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 6), 5 (weight: 4).\nNode 8 is connected to node 1 (weight: 7).\nNode 9 is connected to nodes 4 (weight: 2), 3 (weight: 3), 10 (weight: 10).\nNode 2 is connected to node 10 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 6\nlength = nx.shortest_path_length(G, source=10, target=6, weight='weight')\nprint(length)\n```"}, {"id": 187, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 4 (weight: 8), 7 (weight: 9), 1 (weight: 9), 5 (weight: 1), 6 (weight: 6).\nNode 4 is connected to nodes 3 (weight: 8), 6 (weight: 10).\nNode 7 is connected to nodes 3 (weight: 9), 6 (weight: 10).\nNode 1 is connected to nodes 3 (weight: 9), 5 (weight: 6).\nNode 5 is connected to nodes 3 (weight: 1), 1 (weight: 6), 0 (weight: 9), 8 (weight: 7), 2 (weight: 1).\nNode 6 is connected to nodes 3 (weight: 6), 4 (weight: 10), 7 (weight: 10), 0 (weight: 4), 2 (weight: 5).\nNode 0 is connected to nodes 5 (weight: 9), 6 (weight: 4), 8 (weight: 3).\nNode 8 is connected to nodes 5 (weight: 7), 0 (weight: 3).\nNode 2 is connected to nodes 5 (weight: 1), 6 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=2, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 188, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 14 (weight: 10), 10 (weight: 10), 8 (weight: 10), 4 (weight: 10), 2 (weight: 3), 7 (weight: 1).\nNode 14 is connected to nodes 1 (weight: 10), 0 (weight: 7), 4 (weight: 7).\nNode 10 is connected to nodes 1 (weight: 10), 2 (weight: 3), 7 (weight: 5), 8 (weight: 9).\nNode 8 is connected to nodes 1 (weight: 10), 10 (weight: 9), 2 (weight: 1), 0 (weight: 8).\nNode 4 is connected to nodes 1 (weight: 10), 14 (weight: 7), 12 (weight: 3), 6 (weight: 9).\nNode 2 is connected to nodes 1 (weight: 3), 10 (weight: 3), 8 (weight: 1), 13 (weight: 5), 3 (weight: 9), 12 (weight: 3).\nNode 7 is connected to nodes 1 (weight: 1), 10 (weight: 5), 6 (weight: 7), 9 (weight: 7).\nNode 0 is connected to nodes 14 (weight: 7), 8 (weight: 8), 6 (weight: 10), 11 (weight: 3).\nNode 12 is connected to nodes 4 (weight: 3), 2 (weight: 3), 13 (weight: 4), 3 (weight: 5), 5 (weight: 6), 9 (weight: 8).\nNode 6 is connected to nodes 4 (weight: 9), 7 (weight: 7), 0 (weight: 10).\nNode 13 is connected to nodes 2 (weight: 5), 3 (weight: 8), 12 (weight: 4), 5 (weight: 8).\nNode 3 is connected to nodes 2 (weight: 9), 13 (weight: 8), 12 (weight: 5), 11 (weight: 5).\nNode 9 is connected to nodes 7 (weight: 7), 12 (weight: 8).\nNode 11 is connected to nodes 0 (weight: 3), 3 (weight: 5), 5 (weight: 6).\nNode 5 is connected to nodes 13 (weight: 8), 12 (weight: 6), 11 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=12, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 189, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 4 (weight: 8), 1 (weight: 4).\nNode 4 is connected to nodes 6 (weight: 8), 10 (weight: 4), 7 (weight: 9).\nNode 1 is connected to nodes 6 (weight: 4), 0 (weight: 1), 7 (weight: 1).\nNode 10 is connected to node 4 (weight: 4).\nNode 7 is connected to nodes 4 (weight: 9), 1 (weight: 1), 3 (weight: 9).\nNode 0 is connected to node 1 (weight: 1).\nNode 3 is connected to nodes 7 (weight: 9), 13 (weight: 7), 9 (weight: 7), 2 (weight: 9).\nNode 5 is connected to node 8 (weight: 4).\nNode 8 is connected to nodes 5 (weight: 4), 13 (weight: 10).\nNode 13 is connected to nodes 8 (weight: 10), 3 (weight: 7).\nNode 9 is connected to node 3 (weight: 7).\nNode 2 is connected to nodes 3 (weight: 9), 11 (weight: 7).\nNode 11 is connected to nodes 2 (weight: 7), 12 (weight: 4).\nNode 12 is connected to node 11 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=1, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 190, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 2 (weight: 5), 12 (weight: 3), 6 (weight: 1), 4 (weight: 2), 5 (weight: 6), 9 (weight: 3).\nNode 2 is connected to nodes 0 (weight: 5), 12 (weight: 5), 1 (weight: 6), 9 (weight: 2).\nNode 12 is connected to nodes 0 (weight: 3), 2 (weight: 5).\nNode 6 is connected to nodes 0 (weight: 1), 8 (weight: 9), 7 (weight: 6).\nNode 4 is connected to nodes 0 (weight: 2), 3 (weight: 9), 7 (weight: 2), 9 (weight: 4), 1 (weight: 7).\nNode 5 is connected to nodes 0 (weight: 6), 9 (weight: 1), 11 (weight: 1), 8 (weight: 4).\nNode 9 is connected to nodes 0 (weight: 3), 2 (weight: 2), 4 (weight: 4), 5 (weight: 1), 11 (weight: 5).\nNode 1 is connected to nodes 2 (weight: 6), 4 (weight: 7), 3 (weight: 3), 10 (weight: 3).\nNode 8 is connected to nodes 6 (weight: 9), 5 (weight: 4).\nNode 7 is connected to nodes 6 (weight: 6), 4 (weight: 2).\nNode 3 is connected to nodes 4 (weight: 9), 1 (weight: 3).\nNode 11 is connected to nodes 5 (weight: 1), 9 (weight: 5), 10 (weight: 9).\nNode 10 is connected to nodes 1 (weight: 3), 11 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=12, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 191, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 6 (weight: 9), 11 (weight: 3), 1 (weight: 3), 7 (weight: 10), 8 (weight: 8).\nNode 6 is connected to node 0 (weight: 9).\nNode 11 is connected to nodes 0 (weight: 3), 4 (weight: 4).\nNode 1 is connected to nodes 0 (weight: 3), 5 (weight: 5), 9 (weight: 7), 3 (weight: 10).\nNode 7 is connected to node 0 (weight: 10).\nNode 8 is connected to node 0 (weight: 8).\nNode 4 is connected to node 11 (weight: 4).\nNode 5 is connected to node 1 (weight: 5).\nNode 9 is connected to nodes 1 (weight: 7), 2 (weight: 7).\nNode 3 is connected to nodes 1 (weight: 10), 10 (weight: 9).\nNode 2 is connected to node 9 (weight: 7).\nNode 10 is connected to node 3 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=8, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 192, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 3 (weight: 4), 11 (weight: 1), 0 (weight: 6), 6 (weight: 3), 5 (weight: 8), 7 (weight: 4).\nNode 3 is connected to nodes 4 (weight: 4), 7 (weight: 7).\nNode 11 is connected to nodes 4 (weight: 1), 1 (weight: 6), 9 (weight: 7).\nNode 0 is connected to nodes 4 (weight: 6), 7 (weight: 4).\nNode 6 is connected to nodes 4 (weight: 3), 9 (weight: 7), 8 (weight: 6).\nNode 5 is connected to nodes 4 (weight: 8), 7 (weight: 6), 10 (weight: 5).\nNode 7 is connected to nodes 4 (weight: 4), 3 (weight: 7), 0 (weight: 4), 5 (weight: 6), 9 (weight: 7), 10 (weight: 3), 8 (weight: 3), 2 (weight: 6).\nNode 1 is connected to nodes 11 (weight: 6), 9 (weight: 9).\nNode 9 is connected to nodes 11 (weight: 7), 6 (weight: 7), 7 (weight: 7), 1 (weight: 9), 2 (weight: 7).\nNode 8 is connected to nodes 6 (weight: 6), 7 (weight: 3).\nNode 10 is connected to nodes 5 (weight: 5), 7 (weight: 3).\nNode 2 is connected to nodes 7 (weight: 6), 9 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=9, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 193, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 11 (weight: 4), 2 (weight: 8).\nNode 11 is connected to nodes 6 (weight: 9), 0 (weight: 5), 1 (weight: 7), 4 (weight: 7), 8 (weight: 3).\nNode 2 is connected to nodes 7 (weight: 9), 8 (weight: 4).\nNode 6 is connected to node 3 (weight: 10).\nNode 0 is connected to nodes 7 (weight: 2), 1 (weight: 5), 8 (weight: 2), 2 (weight: 5), 3 (weight: 7).\nNode 1 is connected to nodes 10 (weight: 6), 4 (weight: 8), 8 (weight: 7), 0 (weight: 2).\nNode 4 is connected to nodes 3 (weight: 6), 6 (weight: 4), 9 (weight: 6), 10 (weight: 2).\nNode 8 is connected to nodes 2 (weight: 5), 1 (weight: 1), 5 (weight: 4), 9 (weight: 4).\nNode 7 is connected to nodes 1 (weight: 1), 5 (weight: 1), 9 (weight: 10), 8 (weight: 7), 3 (weight: 6), 11 (weight: 2).\nNode 10 is connected to nodes 8 (weight: 2), 3 (weight: 10), 6 (weight: 6), 7 (weight: 1).\nNode 9 is connected to nodes 2 (weight: 4), 3 (weight: 5), 11 (weight: 4), 6 (weight: 6), 0 (weight: 8), 7 (weight: 1).\nNode 5 is connected to nodes 9 (weight: 1), 2 (weight: 8), 0 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=10, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 194, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 2 (weight: 4), 6 (weight: 7), 10 (weight: 1), 4 (weight: 2).\nNode 2 is connected to nodes 11 (weight: 7), 14 (weight: 6), 10 (weight: 6), 3 (weight: 8), 4 (weight: 6), 12 (weight: 2), 5 (weight: 9).\nNode 6 is connected to nodes 0 (weight: 4), 8 (weight: 9), 14 (weight: 5), 10 (weight: 1), 3 (weight: 7), 12 (weight: 6), 5 (weight: 6).\nNode 10 is connected to nodes 9 (weight: 8), 12 (weight: 6), 2 (weight: 6), 13 (weight: 3), 1 (weight: 1).\nNode 4 is connected to nodes 12 (weight: 6), 2 (weight: 3), 6 (weight: 6), 1 (weight: 4), 3 (weight: 3).\nNode 11 is connected to nodes 8 (weight: 7), 1 (weight: 2), 9 (weight: 2), 6 (weight: 2).\nNode 14 is connected to nodes 3 (weight: 10), 5 (weight: 2), 11 (weight: 5).\nNode 3 is connected to nodes 5 (weight: 5), 7 (weight: 1), 0 (weight: 1), 10 (weight: 9).\nNode 5 is connected to nodes 7 (weight: 5), 13 (weight: 7), 6 (weight: 6), 9 (weight: 7), 4 (weight: 2).\nNode 0 is connected to nodes 10 (weight: 2), 9 (weight: 7), 2 (weight: 8), 6 (weight: 3).\nNode 8 is connected to nodes 14 (weight: 7), 9 (weight: 10), 4 (weight: 2), 2 (weight: 4).\nNode 9 is connected to nodes 5 (weight: 9), 13 (weight: 2), 6 (weight: 2), 11 (weight: 4), 0 (weight: 3), 14 (weight: 10).\nNode 13 is connected to nodes 6 (weight: 9), 11 (weight: 2), 10 (weight: 8), 3 (weight: 3), 5 (weight: 9), 2 (weight: 1).\nNode 1 is connected to nodes 14 (weight: 3), 3 (weight: 6), 6 (weight: 8).\nNode 7 is connected to nodes 0 (weight: 3), 8 (weight: 2), 10 (weight: 5), 9 (weight: 7), 5 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 13 to node 11\nlength = nx.shortest_path_length(G, source=13, target=11, weight='weight')\nprint(length)\n```"}, {"id": 195, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 0 is connected to nodes 4 (weight: 4), 2 (weight: 5), 3 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 2), 5 (weight: 4).\nNode 2 is connected to nodes 8 (weight: 8), 0 (weight: 1), 14 (weight: 1).\nNode 3 is connected to node 9 (weight: 2).\nNode 8 is connected to nodes 4 (weight: 4), 14 (weight: 1), 11 (weight: 2), 9 (weight: 8).\nNode 5 is connected to nodes 13 (weight: 6), 11 (weight: 10), 12 (weight: 5).\nNode 14 is connected to nodes 10 (weight: 5), 3 (weight: 9), 1 (weight: 7).\nNode 9 is connected to nodes 8 (weight: 9), 1 (weight: 9), 6 (weight: 4).\nNode 13 is connected to nodes 7 (weight: 6), 1 (weight: 7), 6 (weight: 2), 5 (weight: 8).\nNode 11 is connected to nodes 5 (weight: 4), 14 (weight: 6).\nNode 12 is connected to nodes 4 (weight: 3), 11 (weight: 9), 2 (weight: 10), 3 (weight: 5).\nNode 7 is connected to nodes 2 (weight: 5), 4 (weight: 2).\nNode 1 is connected to nodes 4 (weight: 2), 10 (weight: 8), 7 (weight: 3), 2 (weight: 1).\nNode 6 is connected to nodes 5 (weight: 5), 4 (weight: 5), 14 (weight: 6), 1 (weight: 3), 12 (weight: 3).\nNode 10 is connected to node 12 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 11\nlength = nx.shortest_path_length(G, source=4, target=11, weight='weight')\nprint(length)\n```"}, {"id": 196, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 10 (weight: 3), 2 (weight: 5).\nNode 10 is connected to nodes 0 (weight: 2), 9 (weight: 1).\nNode 2 is connected to node 8 (weight: 5).\nNode 0 is connected to node 7 (weight: 8).\nNode 9 is connected to nodes 4 (weight: 3), 6 (weight: 6), 5 (weight: 8).\nNode 8 is connected to nodes 11 (weight: 4), 9 (weight: 8), 4 (weight: 6).\nNode 11 is connected to nodes 0 (weight: 3), 4 (weight: 5), 6 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 8), 3 (weight: 3), 11 (weight: 7), 7 (weight: 7), 8 (weight: 9), 10 (weight: 10).\nNode 5 is connected to nodes 2 (weight: 10), 11 (weight: 10), 7 (weight: 8).\nNode 7 is connected to nodes 10 (weight: 1), 2 (weight: 2), 11 (weight: 6).\nNode 3 is connected to nodes 0 (weight: 2), 9 (weight: 4), 10 (weight: 8), 6 (weight: 4), 5 (weight: 5).\nNode 1 is connected to nodes 2 (weight: 8), 3 (weight: 9), 0 (weight: 9), 8 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=8, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 197, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 0 (weight: 1), 5 (weight: 6), 3 (weight: 1), 4 (weight: 9), 7 (weight: 10).\nNode 0 is connected to nodes 2 (weight: 1), 1 (weight: 9).\nNode 5 is connected to nodes 2 (weight: 6), 6 (weight: 5).\nNode 3 is connected to node 2 (weight: 1).\nNode 4 is connected to node 2 (weight: 9).\nNode 7 is connected to node 2 (weight: 10).\nNode 1 is connected to node 0 (weight: 9).\nNode 6 is connected to node 5 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=7, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 198, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 1 (weight: 10), 10 (weight: 5), 5 (weight: 3).\nNode 1 is connected to nodes 3 (weight: 4), 7 (weight: 10), 12 (weight: 5).\nNode 10 is connected to nodes 8 (weight: 5), 2 (weight: 8), 0 (weight: 1).\nNode 5 is connected to nodes 12 (weight: 2), 0 (weight: 1), 10 (weight: 3), 4 (weight: 2), 7 (weight: 1).\nNode 3 is connected to nodes 10 (weight: 8), 8 (weight: 10).\nNode 7 is connected to nodes 5 (weight: 3), 9 (weight: 4), 3 (weight: 7), 4 (weight: 10).\nNode 8 is connected to nodes 12 (weight: 7), 1 (weight: 9), 0 (weight: 7), 3 (weight: 8), 11 (weight: 3).\nNode 2 is connected to node 4 (weight: 4).\nNode 0 is connected to nodes 3 (weight: 9), 10 (weight: 10), 8 (weight: 8), 9 (weight: 4), 1 (weight: 8).\nNode 4 is connected to nodes 7 (weight: 3), 12 (weight: 7), 1 (weight: 10).\nNode 9 is connected to nodes 3 (weight: 4), 7 (weight: 4), 2 (weight: 2).\nNode 11 is connected to nodes 8 (weight: 5), 2 (weight: 4), 1 (weight: 8).\nNode 6 is connected to nodes 11 (weight: 5), 8 (weight: 4), 9 (weight: 9), 0 (weight: 2), 10 (weight: 1), 4 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=2, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 199, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 8 (weight: 4), 6 (weight: 5), 7 (weight: 10), 0 (weight: 9), 2 (weight: 2), 4 (weight: 3).\nNode 8 is connected to nodes 5 (weight: 4), 4 (weight: 2), 2 (weight: 1).\nNode 6 is connected to nodes 5 (weight: 5), 7 (weight: 6), 4 (weight: 1), 0 (weight: 7).\nNode 7 is connected to nodes 5 (weight: 10), 6 (weight: 6), 1 (weight: 3), 9 (weight: 2), 2 (weight: 6).\nNode 0 is connected to nodes 5 (weight: 9), 6 (weight: 7), 4 (weight: 2).\nNode 2 is connected to nodes 5 (weight: 2), 8 (weight: 1), 7 (weight: 6), 1 (weight: 6), 4 (weight: 2).\nNode 4 is connected to nodes 5 (weight: 3), 8 (weight: 2), 6 (weight: 1), 0 (weight: 2), 2 (weight: 2), 1 (weight: 5), 3 (weight: 7), 9 (weight: 1).\nNode 1 is connected to nodes 7 (weight: 3), 2 (weight: 6), 4 (weight: 5).\nNode 9 is connected to nodes 7 (weight: 2), 4 (weight: 1), 3 (weight: 8).\nNode 3 is connected to nodes 4 (weight: 7), 9 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=1, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 200, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 1 (weight: 6), 5 (weight: 9), 6 (weight: 7), 3 (weight: 3), 2 (weight: 7), 0 (weight: 1).\nNode 1 is connected to nodes 7 (weight: 6), 5 (weight: 4), 6 (weight: 8), 3 (weight: 9), 4 (weight: 5), 0 (weight: 10).\nNode 5 is connected to nodes 7 (weight: 9), 1 (weight: 4), 4 (weight: 5), 2 (weight: 6).\nNode 6 is connected to nodes 7 (weight: 7), 1 (weight: 8), 3 (weight: 1), 4 (weight: 6), 2 (weight: 2), 0 (weight: 7).\nNode 3 is connected to nodes 7 (weight: 3), 1 (weight: 9), 6 (weight: 1), 4 (weight: 4), 2 (weight: 6), 0 (weight: 5).\nNode 2 is connected to nodes 7 (weight: 7), 5 (weight: 6), 6 (weight: 2), 3 (weight: 6), 4 (weight: 6), 0 (weight: 3).\nNode 0 is connected to nodes 7 (weight: 1), 1 (weight: 10), 6 (weight: 7), 3 (weight: 5), 2 (weight: 3), 4 (weight: 7).\nNode 4 is connected to nodes 1 (weight: 5), 5 (weight: 5), 6 (weight: 6), 3 (weight: 4), 2 (weight: 6), 0 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 201, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 5 (weight: 5), 3 (weight: 3), 9 (weight: 2), 1 (weight: 4), 8 (weight: 6).\nNode 5 is connected to nodes 6 (weight: 5), 3 (weight: 7), 7 (weight: 1), 9 (weight: 3), 4 (weight: 10).\nNode 3 is connected to nodes 6 (weight: 3), 5 (weight: 7), 4 (weight: 9), 1 (weight: 7), 0 (weight: 10), 9 (weight: 9), 7 (weight: 6).\nNode 9 is connected to nodes 6 (weight: 2), 5 (weight: 3), 3 (weight: 9).\nNode 1 is connected to nodes 6 (weight: 4), 3 (weight: 7), 4 (weight: 9), 0 (weight: 1), 7 (weight: 7), 2 (weight: 2).\nNode 8 is connected to nodes 6 (weight: 6), 4 (weight: 4).\nNode 7 is connected to nodes 5 (weight: 1), 3 (weight: 6), 1 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 10), 3 (weight: 9), 1 (weight: 9), 8 (weight: 4), 0 (weight: 9), 2 (weight: 4).\nNode 0 is connected to nodes 3 (weight: 10), 1 (weight: 1), 4 (weight: 9).\nNode 2 is connected to nodes 1 (weight: 2), 4 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=2, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 202, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to nodes 4 (weight: 3), 2 (weight: 1), 11 (weight: 3).\nNode 4 is connected to nodes 13 (weight: 3), 12 (weight: 5), 7 (weight: 1), 1 (weight: 9), 5 (weight: 5).\nNode 2 is connected to nodes 13 (weight: 1), 0 (weight: 5), 11 (weight: 9), 1 (weight: 2), 9 (weight: 5).\nNode 11 is connected to nodes 13 (weight: 3), 2 (weight: 9), 5 (weight: 7), 6 (weight: 1), 10 (weight: 3), 14 (weight: 2), 1 (weight: 7), 3 (weight: 5).\nNode 12 is connected to nodes 4 (weight: 5), 0 (weight: 1), 10 (weight: 7), 14 (weight: 6).\nNode 7 is connected to nodes 4 (weight: 1), 6 (weight: 2), 3 (weight: 2).\nNode 1 is connected to nodes 4 (weight: 9), 2 (weight: 2), 11 (weight: 7), 8 (weight: 3), 0 (weight: 1), 6 (weight: 1), 14 (weight: 1).\nNode 5 is connected to nodes 4 (weight: 5), 11 (weight: 7), 8 (weight: 5), 10 (weight: 3), 14 (weight: 3), 9 (weight: 3).\nNode 0 is connected to nodes 2 (weight: 5), 12 (weight: 1), 1 (weight: 1).\nNode 9 is connected to nodes 2 (weight: 5), 5 (weight: 3), 14 (weight: 2).\nNode 6 is connected to nodes 11 (weight: 1), 7 (weight: 2), 1 (weight: 1), 10 (weight: 3), 3 (weight: 8).\nNode 10 is connected to nodes 11 (weight: 3), 12 (weight: 7), 5 (weight: 3), 6 (weight: 3), 14 (weight: 10), 3 (weight: 9).\nNode 14 is connected to nodes 11 (weight: 2), 12 (weight: 6), 1 (weight: 1), 5 (weight: 3), 8 (weight: 2), 10 (weight: 10), 9 (weight: 2).\nNode 3 is connected to nodes 11 (weight: 5), 7 (weight: 2), 10 (weight: 9), 6 (weight: 8).\nNode 8 is connected to nodes 1 (weight: 3), 5 (weight: 5), 14 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 11\nlength = nx.shortest_path_length(G, source=6, target=11)\nprint(length)\n```"}, {"id": 203, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 0 (weight: 3), 10 (weight: 2), 7 (weight: 9), 5 (weight: 6), 4 (weight: 9).\nNode 0 is connected to nodes 9 (weight: 3), 10 (weight: 2), 1 (weight: 7), 2 (weight: 6), 8 (weight: 6), 3 (weight: 7), 4 (weight: 8).\nNode 10 is connected to nodes 9 (weight: 2), 0 (weight: 2), 1 (weight: 7), 6 (weight: 3), 2 (weight: 4), 5 (weight: 3), 8 (weight: 2), 3 (weight: 5), 4 (weight: 3).\nNode 7 is connected to nodes 9 (weight: 9), 6 (weight: 1), 2 (weight: 7), 8 (weight: 10), 4 (weight: 6).\nNode 5 is connected to nodes 9 (weight: 6), 10 (weight: 3), 6 (weight: 8), 3 (weight: 5).\nNode 4 is connected to nodes 9 (weight: 9), 0 (weight: 8), 10 (weight: 3), 7 (weight: 6), 1 (weight: 4), 8 (weight: 9), 3 (weight: 5).\nNode 1 is connected to nodes 0 (weight: 7), 10 (weight: 7), 4 (weight: 4), 3 (weight: 2).\nNode 2 is connected to nodes 0 (weight: 6), 10 (weight: 4), 7 (weight: 7), 8 (weight: 3).\nNode 8 is connected to nodes 0 (weight: 6), 10 (weight: 2), 7 (weight: 10), 4 (weight: 9), 2 (weight: 3).\nNode 3 is connected to nodes 0 (weight: 7), 10 (weight: 5), 5 (weight: 5), 4 (weight: 5), 1 (weight: 2).\nNode 6 is connected to nodes 10 (weight: 3), 7 (weight: 1), 5 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=1, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 204, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 7 (weight: 7), 6 (weight: 3), 9 (weight: 1), 4 (weight: 5), 0 (weight: 3), 10 (weight: 5).\nNode 7 is connected to nodes 1 (weight: 7), 5 (weight: 3), 4 (weight: 4), 2 (weight: 4), 0 (weight: 5).\nNode 6 is connected to nodes 1 (weight: 3), 5 (weight: 7), 9 (weight: 10), 2 (weight: 10), 0 (weight: 10), 10 (weight: 8).\nNode 9 is connected to nodes 1 (weight: 1), 6 (weight: 10), 5 (weight: 4), 8 (weight: 10).\nNode 4 is connected to nodes 1 (weight: 5), 7 (weight: 4), 10 (weight: 3), 8 (weight: 1).\nNode 0 is connected to nodes 1 (weight: 3), 7 (weight: 5), 6 (weight: 10), 5 (weight: 9), 10 (weight: 1).\nNode 10 is connected to nodes 1 (weight: 5), 6 (weight: 8), 4 (weight: 3), 0 (weight: 1), 2 (weight: 8), 8 (weight: 9), 3 (weight: 2).\nNode 5 is connected to nodes 7 (weight: 3), 6 (weight: 7), 9 (weight: 4), 0 (weight: 9), 2 (weight: 10), 8 (weight: 2).\nNode 2 is connected to nodes 7 (weight: 4), 6 (weight: 10), 10 (weight: 8), 5 (weight: 10), 8 (weight: 10), 3 (weight: 8).\nNode 8 is connected to nodes 9 (weight: 10), 4 (weight: 1), 10 (weight: 9), 5 (weight: 2), 2 (weight: 10).\nNode 3 is connected to nodes 10 (weight: 2), 2 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=3, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 205, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 12 (weight: 10), 6 (weight: 10).\nNode 12 is connected to nodes 1 (weight: 10), 9 (weight: 1), 2 (weight: 4).\nNode 6 is connected to nodes 1 (weight: 10), 0 (weight: 6), 10 (weight: 6).\nNode 9 is connected to node 12 (weight: 1).\nNode 2 is connected to nodes 12 (weight: 4), 11 (weight: 9).\nNode 0 is connected to node 6 (weight: 6).\nNode 10 is connected to nodes 6 (weight: 6), 7 (weight: 8), 5 (weight: 3), 4 (weight: 3), 3 (weight: 4).\nNode 11 is connected to node 2 (weight: 9).\nNode 7 is connected to node 10 (weight: 8).\nNode 5 is connected to node 10 (weight: 3).\nNode 4 is connected to node 10 (weight: 3).\nNode 3 is connected to nodes 10 (weight: 4), 8 (weight: 7).\nNode 8 is connected to node 3 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=1, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 206, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 0 (weight: 6), 6 (weight: 10), 10 (weight: 7), 1 (weight: 8), 3 (weight: 2), 2 (weight: 7).\nNode 0 is connected to nodes 9 (weight: 6), 5 (weight: 9), 8 (weight: 9), 6 (weight: 6), 10 (weight: 10), 1 (weight: 1), 7 (weight: 1), 3 (weight: 4), 2 (weight: 2).\nNode 6 is connected to nodes 9 (weight: 10), 0 (weight: 6), 5 (weight: 10), 10 (weight: 9), 7 (weight: 3), 3 (weight: 9), 2 (weight: 2).\nNode 10 is connected to nodes 9 (weight: 7), 0 (weight: 10), 6 (weight: 9), 5 (weight: 10), 8 (weight: 7), 1 (weight: 9), 7 (weight: 3), 4 (weight: 5), 2 (weight: 8).\nNode 1 is connected to nodes 9 (weight: 8), 0 (weight: 1), 10 (weight: 9), 5 (weight: 7), 7 (weight: 4), 3 (weight: 7), 2 (weight: 1).\nNode 3 is connected to nodes 9 (weight: 2), 0 (weight: 4), 6 (weight: 9), 1 (weight: 7), 5 (weight: 3), 7 (weight: 10), 4 (weight: 4), 2 (weight: 2).\nNode 2 is connected to nodes 9 (weight: 7), 0 (weight: 2), 6 (weight: 2), 10 (weight: 8), 1 (weight: 1), 3 (weight: 2), 5 (weight: 1), 8 (weight: 8), 7 (weight: 9), 4 (weight: 1).\nNode 5 is connected to nodes 0 (weight: 9), 6 (weight: 10), 10 (weight: 10), 1 (weight: 7), 3 (weight: 3), 2 (weight: 1), 8 (weight: 6), 4 (weight: 2).\nNode 8 is connected to nodes 0 (weight: 9), 10 (weight: 7), 2 (weight: 8), 5 (weight: 6), 7 (weight: 3), 4 (weight: 5).\nNode 7 is connected to nodes 0 (weight: 1), 6 (weight: 3), 10 (weight: 3), 1 (weight: 4), 3 (weight: 10), 2 (weight: 9), 8 (weight: 3), 4 (weight: 8).\nNode 4 is connected to nodes 10 (weight: 5), 3 (weight: 4), 2 (weight: 1), 5 (weight: 2), 8 (weight: 5), 7 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=4, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 207, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to node 0 (weight: 3).\nNode 0 is connected to nodes 4 (weight: 3), 11 (weight: 9), 1 (weight: 6).\nNode 11 is connected to nodes 0 (weight: 9), 10 (weight: 9).\nNode 1 is connected to nodes 0 (weight: 6), 13 (weight: 6), 5 (weight: 8).\nNode 10 is connected to nodes 11 (weight: 9), 3 (weight: 1).\nNode 13 is connected to node 1 (weight: 6).\nNode 5 is connected to nodes 1 (weight: 8), 7 (weight: 8).\nNode 7 is connected to nodes 5 (weight: 8), 9 (weight: 1), 6 (weight: 10).\nNode 3 is connected to nodes 10 (weight: 1), 12 (weight: 4).\nNode 9 is connected to nodes 7 (weight: 1), 6 (weight: 1), 2 (weight: 6).\nNode 6 is connected to nodes 7 (weight: 10), 9 (weight: 1), 8 (weight: 7).\nNode 2 is connected to node 9 (weight: 6).\nNode 8 is connected to node 6 (weight: 7).\nNode 12 is connected to node 3 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        edge_weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=edge_weight)\n\n# Calculate the length of the shortest path from node 2 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=2, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 208, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 2 (weight: 1), 7 (weight: 4), 11 (weight: 6), 1 (weight: 6), 5 (weight: 3).\nNode 2 is connected to nodes 8 (weight: 1), 14 (weight: 8).\nNode 7 is connected to nodes 8 (weight: 4), 4 (weight: 10), 10 (weight: 5), 11 (weight: 3), 0 (weight: 1).\nNode 11 is connected to nodes 8 (weight: 6), 7 (weight: 3).\nNode 1 is connected to nodes 8 (weight: 6), 4 (weight: 5).\nNode 5 is connected to nodes 8 (weight: 3), 3 (weight: 5), 14 (weight: 6), 0 (weight: 4), 13 (weight: 7).\nNode 14 is connected to nodes 2 (weight: 8), 5 (weight: 6), 6 (weight: 4), 12 (weight: 1).\nNode 4 is connected to nodes 7 (weight: 10), 1 (weight: 5), 3 (weight: 7), 12 (weight: 10), 9 (weight: 9), 0 (weight: 8).\nNode 10 is connected to nodes 7 (weight: 5), 6 (weight: 5).\nNode 0 is connected to nodes 7 (weight: 1), 5 (weight: 4), 4 (weight: 8), 12 (weight: 4), 13 (weight: 7), 6 (weight: 7).\nNode 3 is connected to nodes 5 (weight: 5), 4 (weight: 7).\nNode 13 is connected to nodes 5 (weight: 7), 0 (weight: 7).\nNode 6 is connected to nodes 14 (weight: 4), 0 (weight: 7), 10 (weight: 5).\nNode 12 is connected to nodes 14 (weight: 1), 4 (weight: 10), 0 (weight: 4), 9 (weight: 10).\nNode 9 is connected to nodes 4 (weight: 9), 12 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=1, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 209, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 13 (weight: 5), 0 (weight: 5), 9 (weight: 4), 10 (weight: 1), 2 (weight: 4), 12 (weight: 10), 4 (weight: 8), 6 (weight: 2), 7 (weight: 2).\nNode 13 is connected to node 8 (weight: 5).\nNode 0 is connected to node 8 (weight: 5).\nNode 9 is connected to nodes 8 (weight: 4), 3 (weight: 7), 11 (weight: 7).\nNode 10 is connected to node 8 (weight: 1).\nNode 2 is connected to node 8 (weight: 4).\nNode 12 is connected to node 8 (weight: 10).\nNode 4 is connected to node 8 (weight: 8).\nNode 6 is connected to nodes 8 (weight: 2), 1 (weight: 7).\nNode 7 is connected to node 8 (weight: 2).\nNode 3 is connected to node 9 (weight: 7).\nNode 11 is connected to nodes 9 (weight: 7), 5 (weight: 2).\nNode 1 is connected to node 6 (weight: 7).\nNode 5 is connected to node 11 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=12, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 210, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 4 (weight: 7), 2 (weight: 6).\nNode 4 is connected to nodes 6 (weight: 2), 2 (weight: 3), 1 (weight: 1), 7 (weight: 5).\nNode 2 is connected to nodes 3 (weight: 10), 5 (weight: 10), 1 (weight: 3), 7 (weight: 6), 6 (weight: 5), 0 (weight: 10).\nNode 6 is connected to nodes 2 (weight: 5), 7 (weight: 10), 4 (weight: 2).\nNode 1 is connected to nodes 7 (weight: 4), 4 (weight: 7), 0 (weight: 10), 2 (weight: 2), 5 (weight: 8).\nNode 7 is connected to nodes 4 (weight: 8), 0 (weight: 5), 3 (weight: 3).\nNode 5 is connected to node 1 (weight: 9).\nNode 0 is connected to nodes 3 (weight: 6), 1 (weight: 10), 4 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=1, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 211, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to node 9 (weight: 2).\nNode 9 is connected to nodes 10 (weight: 10), 1 (weight: 5).\nNode 10 is connected to nodes 12 (weight: 6), 7 (weight: 2).\nNode 1 is connected to nodes 4 (weight: 4), 2 (weight: 7).\nNode 14 is connected to node 10 (weight: 4).\nNode 12 is connected to nodes 2 (weight: 2), 10 (weight: 9).\nNode 7 is connected to node 0 (weight: 4).\nNode 0 is connected to nodes 5 (weight: 1), 12 (weight: 6), 2 (weight: 7).\nNode 5 is connected to nodes 7 (weight: 2), 8 (weight: 4), 1 (weight: 5).\nNode 2 is connected to nodes 8 (weight: 3), 14 (weight: 5), 5 (weight: 4), 4 (weight: 3), 12 (weight: 5).\nNode 4 is connected to nodes 2 (weight: 2), 7 (weight: 8), 8 (weight: 5), 14 (weight: 9), 0 (weight: 8), 1 (weight: 5), 9 (weight: 5).\nNode 6 is connected to nodes 12 (weight: 6), 0 (weight: 8).\nNode 11 is connected to nodes 12 (weight: 3), 8 (weight: 10), 0 (weight: 1).\nNode 13 is connected to nodes 2 (weight: 10), 0 (weight: 8).\nNode 3 is connected to nodes 10 (weight: 1), 14 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the length of the shortest path from node 0 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=0, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 212, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 3), 8 (weight: 6), 0 (weight: 9).\nNode 4 is connected to nodes 1 (weight: 1), 0 (weight: 6).\nNode 8 is connected to nodes 3 (weight: 2), 0 (weight: 8), 4 (weight: 5).\nNode 0 is connected to nodes 4 (weight: 10), 3 (weight: 1), 1 (weight: 1), 6 (weight: 9).\nNode 1 is connected to nodes 7 (weight: 3), 4 (weight: 5).\nNode 3 is connected to nodes 6 (weight: 3), 4 (weight: 5).\nNode 6 is connected to nodes 7 (weight: 8), 0 (weight: 8), 2 (weight: 7), 5 (weight: 6).\nNode 5 is connected to nodes 3 (weight: 3), 1 (weight: 4), 6 (weight: 4), 0 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 6), 2 (weight: 6), 4 (weight: 10), 3 (weight: 6), 1 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=8, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 213, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 11 (weight: 1), 7 (weight: 5), 13 (weight: 4), 6 (weight: 2).\nNode 7 is connected to nodes 10 (weight: 1), 13 (weight: 5), 6 (weight: 4), 1 (weight: 5), 11 (weight: 8).\nNode 13 is connected to nodes 0 (weight: 1), 10 (weight: 8).\nNode 6 is connected to nodes 3 (weight: 6), 10 (weight: 2), 12 (weight: 1).\nNode 10 is connected to nodes 4 (weight: 4), 6 (weight: 6), 1 (weight: 10), 11 (weight: 7).\nNode 1 is connected to nodes 12 (weight: 1), 8 (weight: 5), 3 (weight: 3).\nNode 0 is connected to node 10 (weight: 3).\nNode 12 is connected to nodes 11 (weight: 3), 5 (weight: 10), 10 (weight: 10).\nNode 8 is connected to nodes 6 (weight: 2), 3 (weight: 1), 1 (weight: 7), 5 (weight: 9).\nNode 5 is connected to nodes 10 (weight: 4), 8 (weight: 2), 6 (weight: 4), 1 (weight: 10).\nNode 2 is connected to nodes 12 (weight: 5), 9 (weight: 6), 0 (weight: 8), 8 (weight: 4).\nNode 9 is connected to nodes 6 (weight: 5), 1 (weight: 7), 10 (weight: 2).\nNode 4 is connected to nodes 8 (weight: 3), 1 (weight: 4), 13 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 13 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=13, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 214, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 4 (weight: 3), 8 (weight: 8), 5 (weight: 1), 11 (weight: 9), 6 (weight: 1), 0 (weight: 10).\nNode 4 is connected to node 1 (weight: 3).\nNode 8 is connected to node 1 (weight: 8).\nNode 5 is connected to nodes 1 (weight: 1), 7 (weight: 4), 3 (weight: 1), 9 (weight: 10).\nNode 11 is connected to node 1 (weight: 9).\nNode 6 is connected to node 1 (weight: 1).\nNode 0 is connected to nodes 1 (weight: 10), 10 (weight: 9), 2 (weight: 7).\nNode 7 is connected to node 5 (weight: 4).\nNode 3 is connected to node 5 (weight: 1).\nNode 9 is connected to node 5 (weight: 10).\nNode 10 is connected to node 0 (weight: 9).\nNode 2 is connected to node 0 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=9, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 215, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 2 (weight: 7), 8 (weight: 4), 1 (weight: 5).\nNode 2 is connected to nodes 9 (weight: 7), 10 (weight: 6), 12 (weight: 4), 8 (weight: 4).\nNode 8 is connected to nodes 9 (weight: 4), 2 (weight: 4), 4 (weight: 7), 12 (weight: 8).\nNode 1 is connected to nodes 9 (weight: 5), 10 (weight: 1), 3 (weight: 9).\nNode 10 is connected to nodes 2 (weight: 6), 1 (weight: 1), 6 (weight: 10), 0 (weight: 9), 11 (weight: 1).\nNode 12 is connected to nodes 2 (weight: 4), 8 (weight: 8), 4 (weight: 9), 7 (weight: 5), 3 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 7), 12 (weight: 9), 6 (weight: 1), 7 (weight: 3).\nNode 3 is connected to nodes 1 (weight: 9), 12 (weight: 4), 11 (weight: 6), 0 (weight: 7).\nNode 6 is connected to nodes 10 (weight: 10), 11 (weight: 7), 7 (weight: 3), 4 (weight: 1), 5 (weight: 10).\nNode 0 is connected to nodes 10 (weight: 9), 11 (weight: 2), 5 (weight: 1), 3 (weight: 7).\nNode 11 is connected to nodes 10 (weight: 1), 6 (weight: 7), 0 (weight: 2), 3 (weight: 6).\nNode 7 is connected to nodes 12 (weight: 5), 6 (weight: 3), 4 (weight: 3), 5 (weight: 4).\nNode 5 is connected to nodes 6 (weight: 10), 7 (weight: 4), 0 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=6, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 216, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 5), 9 (weight: 10), 0 (weight: 2), 4 (weight: 8).\nNode 2 is connected to nodes 6 (weight: 5), 1 (weight: 9), 3 (weight: 6), 0 (weight: 9).\nNode 9 is connected to nodes 6 (weight: 10), 7 (weight: 4), 0 (weight: 6), 4 (weight: 6).\nNode 0 is connected to nodes 6 (weight: 2), 2 (weight: 9), 9 (weight: 6), 7 (weight: 7).\nNode 4 is connected to nodes 6 (weight: 8), 9 (weight: 6), 8 (weight: 1), 7 (weight: 5), 10 (weight: 2).\nNode 1 is connected to nodes 2 (weight: 9), 5 (weight: 1), 3 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 6), 1 (weight: 2), 5 (weight: 3), 10 (weight: 9).\nNode 7 is connected to nodes 9 (weight: 4), 0 (weight: 7), 4 (weight: 5), 8 (weight: 9).\nNode 8 is connected to nodes 4 (weight: 1), 5 (weight: 9), 7 (weight: 9), 10 (weight: 1).\nNode 10 is connected to nodes 4 (weight: 2), 3 (weight: 9), 5 (weight: 8), 8 (weight: 1).\nNode 5 is connected to nodes 1 (weight: 1), 3 (weight: 3), 8 (weight: 9), 10 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=8, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 217, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 5 (weight: 8), 0 (weight: 3), 2 (weight: 10), 7 (weight: 1).\nNode 5 is connected to nodes 3 (weight: 8), 4 (weight: 1).\nNode 0 is connected to nodes 3 (weight: 3), 4 (weight: 2).\nNode 2 is connected to nodes 3 (weight: 10), 4 (weight: 7), 6 (weight: 3), 7 (weight: 2), 1 (weight: 4).\nNode 7 is connected to nodes 3 (weight: 1), 2 (weight: 2), 4 (weight: 2).\nNode 4 is connected to nodes 5 (weight: 1), 0 (weight: 2), 2 (weight: 7), 7 (weight: 2), 6 (weight: 10).\nNode 6 is connected to nodes 2 (weight: 3), 4 (weight: 10).\nNode 1 is connected to node 2 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=5, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 218, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 7 (weight: 8), 4 (weight: 5).\nNode 7 is connected to nodes 8 (weight: 4), 1 (weight: 4), 4 (weight: 7), 9 (weight: 9), 6 (weight: 8).\nNode 4 is connected to nodes 9 (weight: 5), 7 (weight: 10).\nNode 8 is connected to nodes 2 (weight: 5), 3 (weight: 2), 9 (weight: 3), 7 (weight: 2).\nNode 1 is connected to nodes 3 (weight: 5), 9 (weight: 6), 5 (weight: 7).\nNode 9 is connected to nodes 6 (weight: 9), 3 (weight: 8).\nNode 6 is connected to nodes 5 (weight: 4), 8 (weight: 5), 2 (weight: 10), 4 (weight: 8), 0 (weight: 10).\nNode 5 is connected to nodes 2 (weight: 6), 0 (weight: 7), 3 (weight: 2).\nNode 2 is connected to nodes 4 (weight: 7), 7 (weight: 7), 5 (weight: 4), 8 (weight: 2).\nNode 0 is connected to nodes 6 (weight: 4), 4 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=2, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 219, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 4 (weight: 10), 13 (weight: 6), 2 (weight: 9), 11 (weight: 8), 7 (weight: 8), 5 (weight: 9), 6 (weight: 10), 1 (weight: 1), 9 (weight: 4).\nNode 4 is connected to nodes 0 (weight: 10), 1 (weight: 3).\nNode 13 is connected to nodes 0 (weight: 6), 8 (weight: 3), 3 (weight: 10).\nNode 2 is connected to nodes 0 (weight: 9), 8 (weight: 6), 11 (weight: 6).\nNode 11 is connected to nodes 0 (weight: 8), 2 (weight: 6), 1 (weight: 1), 7 (weight: 3), 9 (weight: 7), 12 (weight: 5).\nNode 7 is connected to nodes 0 (weight: 8), 11 (weight: 3).\nNode 5 is connected to nodes 0 (weight: 9), 1 (weight: 10).\nNode 6 is connected to nodes 0 (weight: 10), 1 (weight: 4).\nNode 1 is connected to nodes 0 (weight: 1), 4 (weight: 3), 11 (weight: 1), 5 (weight: 10), 6 (weight: 4), 12 (weight: 6), 8 (weight: 5), 3 (weight: 8), 10 (weight: 7).\nNode 9 is connected to nodes 0 (weight: 4), 11 (weight: 7).\nNode 8 is connected to nodes 13 (weight: 3), 2 (weight: 6), 1 (weight: 5).\nNode 3 is connected to nodes 13 (weight: 10), 1 (weight: 8).\nNode 12 is connected to nodes 11 (weight: 5), 1 (weight: 6).\nNode 10 is connected to node 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=9, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 220, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 2 (weight: 4), 0 (weight: 5), 5 (weight: 4), 12 (weight: 9).\nNode 2 is connected to nodes 6 (weight: 4), 13 (weight: 8), 3 (weight: 9), 0 (weight: 4).\nNode 0 is connected to nodes 6 (weight: 5), 2 (weight: 4), 12 (weight: 6), 10 (weight: 10).\nNode 5 is connected to nodes 6 (weight: 4), 11 (weight: 2), 1 (weight: 8), 8 (weight: 6).\nNode 12 is connected to nodes 6 (weight: 9), 0 (weight: 6), 4 (weight: 8).\nNode 13 is connected to nodes 2 (weight: 8), 11 (weight: 4), 9 (weight: 1), 8 (weight: 3), 10 (weight: 2).\nNode 3 is connected to nodes 2 (weight: 9), 11 (weight: 6), 10 (weight: 4).\nNode 10 is connected to nodes 0 (weight: 10), 13 (weight: 2), 3 (weight: 4), 1 (weight: 9), 4 (weight: 5).\nNode 11 is connected to nodes 5 (weight: 2), 13 (weight: 4), 3 (weight: 6), 8 (weight: 2), 7 (weight: 10).\nNode 1 is connected to nodes 5 (weight: 8), 10 (weight: 9), 4 (weight: 2), 9 (weight: 4).\nNode 8 is connected to nodes 5 (weight: 6), 13 (weight: 3), 11 (weight: 2), 7 (weight: 8), 9 (weight: 8).\nNode 4 is connected to nodes 12 (weight: 8), 10 (weight: 5), 1 (weight: 2).\nNode 9 is connected to nodes 13 (weight: 1), 8 (weight: 8), 7 (weight: 5), 1 (weight: 4).\nNode 7 is connected to nodes 11 (weight: 10), 8 (weight: 8), 9 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=0, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 221, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 2 (weight: 4), 0 (weight: 1), 3 (weight: 1), 6 (weight: 6), 7 (weight: 10), 1 (weight: 6).\nNode 2 is connected to nodes 4 (weight: 4), 3 (weight: 4), 8 (weight: 10), 6 (weight: 2), 7 (weight: 4).\nNode 0 is connected to nodes 4 (weight: 1), 3 (weight: 4), 5 (weight: 6), 10 (weight: 9), 1 (weight: 8).\nNode 3 is connected to nodes 4 (weight: 1), 2 (weight: 4), 0 (weight: 4), 9 (weight: 5), 8 (weight: 5), 10 (weight: 10), 1 (weight: 8).\nNode 6 is connected to nodes 4 (weight: 6), 2 (weight: 2), 9 (weight: 7), 5 (weight: 5), 8 (weight: 3), 7 (weight: 3), 10 (weight: 4), 1 (weight: 10).\nNode 7 is connected to nodes 4 (weight: 10), 2 (weight: 4), 6 (weight: 3), 9 (weight: 4), 5 (weight: 10), 8 (weight: 3), 10 (weight: 1), 1 (weight: 10).\nNode 1 is connected to nodes 4 (weight: 6), 0 (weight: 8), 3 (weight: 8), 6 (weight: 10), 7 (weight: 10), 5 (weight: 5).\nNode 8 is connected to nodes 2 (weight: 10), 3 (weight: 5), 6 (weight: 3), 7 (weight: 3), 9 (weight: 1), 5 (weight: 10), 10 (weight: 4).\nNode 5 is connected to nodes 0 (weight: 6), 6 (weight: 5), 7 (weight: 10), 1 (weight: 5), 8 (weight: 10), 9 (weight: 6), 10 (weight: 2).\nNode 10 is connected to nodes 0 (weight: 9), 3 (weight: 10), 6 (weight: 4), 7 (weight: 1), 8 (weight: 4), 5 (weight: 2).\nNode 9 is connected to nodes 3 (weight: 5), 6 (weight: 7), 7 (weight: 4), 8 (weight: 1), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=2, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 222, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 2 (weight: 1), 9 (weight: 7).\nNode 2 is connected to nodes 4 (weight: 1), 8 (weight: 7).\nNode 9 is connected to nodes 4 (weight: 7), 6 (weight: 10).\nNode 8 is connected to nodes 2 (weight: 7), 0 (weight: 7).\nNode 6 is connected to node 9 (weight: 10).\nNode 0 is connected to nodes 8 (weight: 7), 3 (weight: 8).\nNode 3 is connected to nodes 0 (weight: 8), 5 (weight: 10).\nNode 5 is connected to nodes 3 (weight: 10), 1 (weight: 6).\nNode 10 is connected to nodes 7 (weight: 7), 11 (weight: 4).\nNode 7 is connected to nodes 10 (weight: 7), 1 (weight: 3).\nNode 11 is connected to nodes 10 (weight: 4), 1 (weight: 5).\nNode 1 is connected to nodes 7 (weight: 3), 11 (weight: 5), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=4, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 223, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 1 (weight: 2), 7 (weight: 5), 5 (weight: 6), 6 (weight: 2), 4 (weight: 8).\nNode 1 is connected to nodes 3 (weight: 2), 2 (weight: 10), 0 (weight: 10), 7 (weight: 3), 6 (weight: 1), 4 (weight: 9).\nNode 7 is connected to nodes 3 (weight: 5), 1 (weight: 3), 2 (weight: 7), 5 (weight: 7), 6 (weight: 10), 4 (weight: 10).\nNode 5 is connected to nodes 3 (weight: 6), 7 (weight: 7), 2 (weight: 9), 0 (weight: 10), 6 (weight: 1), 4 (weight: 9).\nNode 6 is connected to nodes 3 (weight: 2), 1 (weight: 1), 7 (weight: 10), 5 (weight: 1), 2 (weight: 10), 0 (weight: 9), 4 (weight: 7).\nNode 4 is connected to nodes 3 (weight: 8), 1 (weight: 9), 7 (weight: 10), 5 (weight: 9), 6 (weight: 7), 2 (weight: 3), 0 (weight: 2).\nNode 2 is connected to nodes 1 (weight: 10), 7 (weight: 7), 5 (weight: 9), 6 (weight: 10), 4 (weight: 3), 0 (weight: 5).\nNode 0 is connected to nodes 1 (weight: 10), 5 (weight: 10), 6 (weight: 9), 4 (weight: 2), 2 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=4, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 224, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to nodes 2 (weight: 6), 10 (weight: 2), 11 (weight: 10), 1 (weight: 4), 12 (weight: 7).\nNode 2 is connected to nodes 13 (weight: 6), 9 (weight: 10), 3 (weight: 2), 11 (weight: 2).\nNode 10 is connected to nodes 13 (weight: 2), 11 (weight: 6), 1 (weight: 4).\nNode 11 is connected to nodes 13 (weight: 10), 2 (weight: 2), 10 (weight: 6), 0 (weight: 6).\nNode 1 is connected to nodes 13 (weight: 4), 10 (weight: 4), 14 (weight: 10), 4 (weight: 5).\nNode 12 is connected to nodes 13 (weight: 7), 9 (weight: 4), 6 (weight: 9), 4 (weight: 6).\nNode 9 is connected to nodes 2 (weight: 10), 12 (weight: 4), 0 (weight: 1), 5 (weight: 9), 6 (weight: 9).\nNode 3 is connected to nodes 2 (weight: 2), 5 (weight: 5), 8 (weight: 7), 7 (weight: 8), 0 (weight: 9).\nNode 0 is connected to nodes 11 (weight: 6), 9 (weight: 1), 3 (weight: 9), 8 (weight: 7), 6 (weight: 6).\nNode 14 is connected to nodes 1 (weight: 10), 6 (weight: 7), 4 (weight: 10).\nNode 4 is connected to nodes 1 (weight: 5), 12 (weight: 6), 5 (weight: 10), 14 (weight: 10).\nNode 6 is connected to nodes 12 (weight: 9), 9 (weight: 9), 0 (weight: 6), 5 (weight: 4), 14 (weight: 7).\nNode 5 is connected to nodes 9 (weight: 9), 3 (weight: 5), 4 (weight: 10), 6 (weight: 4).\nNode 8 is connected to nodes 3 (weight: 7), 0 (weight: 7), 7 (weight: 6).\nNode 7 is connected to nodes 3 (weight: 8), 8 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=7, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 225, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 2 (weight: 5), 1 (weight: 2), 4 (weight: 1), 0 (weight: 5), 7 (weight: 3), 5 (weight: 6).\nNode 2 is connected to nodes 8 (weight: 5), 1 (weight: 7), 4 (weight: 8), 0 (weight: 10), 7 (weight: 4).\nNode 1 is connected to nodes 8 (weight: 2), 2 (weight: 7), 4 (weight: 10), 0 (weight: 4), 6 (weight: 3), 3 (weight: 8), 7 (weight: 5).\nNode 4 is connected to nodes 8 (weight: 1), 2 (weight: 8), 1 (weight: 10), 6 (weight: 9), 3 (weight: 9), 7 (weight: 4), 5 (weight: 8).\nNode 0 is connected to nodes 8 (weight: 5), 2 (weight: 10), 1 (weight: 4), 3 (weight: 6), 5 (weight: 1).\nNode 7 is connected to nodes 8 (weight: 3), 2 (weight: 4), 1 (weight: 5), 4 (weight: 4), 6 (weight: 3).\nNode 5 is connected to nodes 8 (weight: 6), 4 (weight: 8), 0 (weight: 1), 3 (weight: 7).\nNode 6 is connected to nodes 1 (weight: 3), 4 (weight: 9), 7 (weight: 3).\nNode 3 is connected to nodes 1 (weight: 8), 4 (weight: 9), 0 (weight: 6), 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=0, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 226, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 2), 0 (weight: 4).\nNode 3 is connected to nodes 8 (weight: 2), 4 (weight: 10).\nNode 0 is connected to nodes 8 (weight: 4), 5 (weight: 10), 1 (weight: 5).\nNode 4 is connected to node 3 (weight: 10).\nNode 5 is connected to nodes 0 (weight: 10), 6 (weight: 3), 2 (weight: 5).\nNode 1 is connected to node 0 (weight: 5).\nNode 6 is connected to nodes 5 (weight: 3), 7 (weight: 3).\nNode 7 is connected to node 6 (weight: 3).\nNode 2 is connected to nodes 5 (weight: 5), 9 (weight: 9).\nNode 9 is connected to node 2 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=8, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 227, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 10 (weight: 8), 7 (weight: 6), 6 (weight: 5), 14 (weight: 1), 5 (weight: 4), 2 (weight: 10), 11 (weight: 7), 0 (weight: 1), 3 (weight: 6), 8 (weight: 3), 4 (weight: 9), 9 (weight: 8).\nNode 10 is connected to nodes 1 (weight: 8), 7 (weight: 3), 14 (weight: 1), 2 (weight: 5), 11 (weight: 7), 0 (weight: 8), 3 (weight: 5), 12 (weight: 6), 8 (weight: 7), 4 (weight: 3).\nNode 7 is connected to nodes 1 (weight: 6), 10 (weight: 3), 6 (weight: 9), 14 (weight: 1), 5 (weight: 10), 2 (weight: 10), 11 (weight: 6), 0 (weight: 1), 3 (weight: 5), 8 (weight: 1), 4 (weight: 6), 13 (weight: 9), 9 (weight: 1).\nNode 6 is connected to nodes 1 (weight: 5), 7 (weight: 9), 14 (weight: 1), 5 (weight: 6), 11 (weight: 9), 0 (weight: 9), 3 (weight: 1), 4 (weight: 2), 13 (weight: 3), 9 (weight: 5).\nNode 14 is connected to nodes 1 (weight: 1), 10 (weight: 1), 7 (weight: 1), 6 (weight: 1), 5 (weight: 4), 11 (weight: 9), 12 (weight: 6), 8 (weight: 4), 4 (weight: 8), 13 (weight: 4), 9 (weight: 9).\nNode 5 is connected to nodes 1 (weight: 4), 7 (weight: 10), 6 (weight: 6), 14 (weight: 4), 2 (weight: 5), 0 (weight: 3), 3 (weight: 6), 12 (weight: 9), 8 (weight: 7), 4 (weight: 2), 9 (weight: 5).\nNode 2 is connected to nodes 1 (weight: 10), 10 (weight: 5), 7 (weight: 10), 5 (weight: 5), 11 (weight: 7), 0 (weight: 2), 3 (weight: 7), 12 (weight: 4), 8 (weight: 3), 4 (weight: 5), 13 (weight: 9), 9 (weight: 9).\nNode 11 is connected to nodes 1 (weight: 7), 10 (weight: 7), 7 (weight: 6), 6 (weight: 9), 14 (weight: 9), 2 (weight: 7), 0 (weight: 4), 12 (weight: 1), 8 (weight: 6), 13 (weight: 10), 9 (weight: 4).\nNode 0 is connected to nodes 1 (weight: 1), 10 (weight: 8), 7 (weight: 1), 6 (weight: 9), 5 (weight: 3), 2 (weight: 2), 11 (weight: 4), 12 (weight: 6), 4 (weight: 10).\nNode 3 is connected to nodes 1 (weight: 6), 10 (weight: 5), 7 (weight: 5), 6 (weight: 1), 5 (weight: 6), 2 (weight: 7), 12 (weight: 9), 4 (weight: 5), 13 (weight: 3).\nNode 8 is connected to nodes 1 (weight: 3), 10 (weight: 7), 7 (weight: 1), 14 (weight: 4), 5 (weight: 7), 2 (weight: 3), 11 (weight: 6), 12 (weight: 4), 4 (weight: 7), 9 (weight: 2).\nNode 4 is connected to nodes 1 (weight: 9), 10 (weight: 3), 7 (weight: 6), 6 (weight: 2), 14 (weight: 8), 5 (weight: 2), 2 (weight: 5), 0 (weight: 10), 3 (weight: 5), 8 (weight: 7), 9 (weight: 10).\nNode 9 is connected to nodes 1 (weight: 8), 7 (weight: 1), 6 (weight: 5), 14 (weight: 9), 5 (weight: 5), 2 (weight: 9), 11 (weight: 4), 8 (weight: 2), 4 (weight: 10), 12 (weight: 7).\nNode 12 is connected to nodes 10 (weight: 6), 14 (weight: 6), 5 (weight: 9), 2 (weight: 4), 11 (weight: 1), 0 (weight: 6), 3 (weight: 9), 8 (weight: 4), 9 (weight: 7), 13 (weight: 3).\nNode 13 is connected to nodes 7 (weight: 9), 6 (weight: 3), 14 (weight: 4), 2 (weight: 9), 11 (weight: 10), 3 (weight: 3), 12 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=5, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 228, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 7 (weight: 6), 1 (weight: 7).\nNode 1 is connected to nodes 5 (weight: 6), 6 (weight: 8).\nNode 5 is connected to node 0 (weight: 7).\nNode 6 is connected to nodes 4 (weight: 7), 5 (weight: 5), 8 (weight: 5).\nNode 2 is connected to nodes 6 (weight: 2), 4 (weight: 6), 7 (weight: 2), 5 (weight: 1), 8 (weight: 6).\nNode 4 is connected to nodes 1 (weight: 5), 5 (weight: 10), 2 (weight: 1).\nNode 8 is connected to nodes 3 (weight: 5), 2 (weight: 9), 4 (weight: 10), 0 (weight: 1).\nNode 0 is connected to nodes 3 (weight: 2), 4 (weight: 4), 7 (weight: 2), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=0, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 229, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 1 (weight: 9), 0 (weight: 4).\nNode 1 is connected to nodes 5 (weight: 9), 6 (weight: 2).\nNode 0 is connected to nodes 5 (weight: 4), 3 (weight: 8).\nNode 6 is connected to nodes 1 (weight: 2), 7 (weight: 6).\nNode 3 is connected to nodes 0 (weight: 8), 2 (weight: 6).\nNode 7 is connected to nodes 6 (weight: 6), 4 (weight: 2).\nNode 8 is connected to nodes 2 (weight: 6), 4 (weight: 3).\nNode 2 is connected to nodes 8 (weight: 6), 3 (weight: 6).\nNode 4 is connected to nodes 8 (weight: 3), 7 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 230, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 7 (weight: 9), 2 (weight: 7), 9 (weight: 6), 1 (weight: 9), 4 (weight: 6), 3 (weight: 6).\nNode 7 is connected to nodes 8 (weight: 9), 4 (weight: 5), 3 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 7), 6 (weight: 7), 1 (weight: 10), 4 (weight: 1).\nNode 9 is connected to nodes 8 (weight: 6), 0 (weight: 2), 3 (weight: 5).\nNode 1 is connected to nodes 8 (weight: 9), 2 (weight: 10), 0 (weight: 5), 3 (weight: 7).\nNode 4 is connected to nodes 8 (weight: 6), 7 (weight: 5), 2 (weight: 1), 0 (weight: 3), 5 (weight: 6), 3 (weight: 4).\nNode 3 is connected to nodes 8 (weight: 6), 7 (weight: 7), 9 (weight: 5), 1 (weight: 7), 4 (weight: 4), 6 (weight: 6), 0 (weight: 3), 5 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 7), 3 (weight: 6), 5 (weight: 6).\nNode 0 is connected to nodes 9 (weight: 2), 1 (weight: 5), 4 (weight: 3), 3 (weight: 3).\nNode 5 is connected to nodes 4 (weight: 6), 3 (weight: 4), 6 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=1, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 231, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 1 (weight: 2), 7 (weight: 10), 9 (weight: 3), 5 (weight: 2), 3 (weight: 6), 4 (weight: 1).\nNode 1 is connected to nodes 2 (weight: 2), 0 (weight: 1).\nNode 7 is connected to nodes 2 (weight: 10), 6 (weight: 6).\nNode 9 is connected to nodes 2 (weight: 3), 5 (weight: 5).\nNode 5 is connected to nodes 2 (weight: 2), 9 (weight: 5), 8 (weight: 4), 6 (weight: 1).\nNode 3 is connected to nodes 2 (weight: 6), 10 (weight: 1).\nNode 4 is connected to nodes 2 (weight: 1), 6 (weight: 4).\nNode 0 is connected to nodes 1 (weight: 1), 8 (weight: 6), 6 (weight: 2).\nNode 6 is connected to nodes 7 (weight: 6), 5 (weight: 1), 4 (weight: 4), 0 (weight: 2), 8 (weight: 6), 10 (weight: 10).\nNode 8 is connected to nodes 5 (weight: 4), 0 (weight: 6), 6 (weight: 6), 10 (weight: 1).\nNode 10 is connected to nodes 3 (weight: 1), 6 (weight: 10), 8 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=10, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 232, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 2 (weight: 1), 0 (weight: 1), 9 (weight: 7), 6 (weight: 9).\nNode 2 is connected to nodes 8 (weight: 8), 4 (weight: 1), 5 (weight: 10), 1 (weight: 3), 7 (weight: 2).\nNode 0 is connected to nodes 3 (weight: 2), 4 (weight: 2), 7 (weight: 5).\nNode 9 is connected to nodes 3 (weight: 1), 4 (weight: 7), 5 (weight: 6), 1 (weight: 8).\nNode 6 is connected to node 0 (weight: 2).\nNode 8 is connected to nodes 3 (weight: 7), 4 (weight: 9), 5 (weight: 3), 1 (weight: 7), 10 (weight: 5).\nNode 4 is connected to nodes 5 (weight: 9), 1 (weight: 4), 9 (weight: 1), 3 (weight: 10).\nNode 5 is connected to nodes 7 (weight: 10), 2 (weight: 1), 0 (weight: 7), 10 (weight: 3), 3 (weight: 7).\nNode 1 is connected to nodes 7 (weight: 10), 9 (weight: 1), 10 (weight: 9), 4 (weight: 4).\nNode 3 is connected to nodes 7 (weight: 6), 2 (weight: 2), 9 (weight: 4), 8 (weight: 1), 6 (weight: 9).\nNode 10 is connected to nodes 8 (weight: 8), 5 (weight: 3), 0 (weight: 10), 9 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=9, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 233, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 2 (weight: 3), 8 (weight: 2), 7 (weight: 8).\nNode 2 is connected to nodes 3 (weight: 10), 1 (weight: 9), 8 (weight: 3), 9 (weight: 8), 5 (weight: 9).\nNode 8 is connected to nodes 0 (weight: 10), 11 (weight: 1), 6 (weight: 7).\nNode 7 is connected to nodes 11 (weight: 3), 2 (weight: 2), 1 (weight: 2), 4 (weight: 8), 9 (weight: 7).\nNode 3 is connected to nodes 1 (weight: 8), 8 (weight: 2), 10 (weight: 5), 11 (weight: 5), 6 (weight: 5).\nNode 1 is connected to nodes 4 (weight: 9), 0 (weight: 1), 6 (weight: 4), 2 (weight: 7), 3 (weight: 8).\nNode 9 is connected to nodes 7 (weight: 8), 0 (weight: 3), 11 (weight: 9), 6 (weight: 3), 1 (weight: 4), 4 (weight: 1).\nNode 5 is connected to nodes 3 (weight: 1), 7 (weight: 6).\nNode 11 is connected to nodes 2 (weight: 3), 4 (weight: 2), 7 (weight: 2).\nNode 6 is connected to nodes 5 (weight: 7), 8 (weight: 8), 10 (weight: 5), 9 (weight: 10), 0 (weight: 6), 11 (weight: 6).\nNode 4 is connected to nodes 0 (weight: 7), 6 (weight: 7), 2 (weight: 4).\nNode 10 is connected to nodes 11 (weight: 5), 5 (weight: 2), 3 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=1, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 234, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 4 (weight: 4), 11 (weight: 8), 2 (weight: 7), 7 (weight: 1), 10 (weight: 6), 5 (weight: 1), 6 (weight: 10).\nNode 4 is connected to nodes 8 (weight: 4), 10 (weight: 4), 0 (weight: 6), 1 (weight: 10), 11 (weight: 2).\nNode 11 is connected to nodes 8 (weight: 8), 4 (weight: 2), 9 (weight: 1), 7 (weight: 1), 2 (weight: 9), 5 (weight: 2), 3 (weight: 9), 0 (weight: 4).\nNode 2 is connected to nodes 8 (weight: 7), 11 (weight: 9).\nNode 7 is connected to nodes 8 (weight: 1), 11 (weight: 1).\nNode 10 is connected to nodes 8 (weight: 6), 4 (weight: 4).\nNode 5 is connected to nodes 8 (weight: 1), 11 (weight: 2), 6 (weight: 9).\nNode 6 is connected to nodes 8 (weight: 10), 5 (weight: 9), 1 (weight: 5).\nNode 0 is connected to nodes 4 (weight: 6), 11 (weight: 4).\nNode 1 is connected to nodes 4 (weight: 10), 6 (weight: 5).\nNode 9 is connected to nodes 11 (weight: 1), 3 (weight: 10).\nNode 3 is connected to nodes 11 (weight: 9), 9 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=4, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 235, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 0 (weight: 7), 8 (weight: 6), 7 (weight: 5), 2 (weight: 3).\nNode 0 is connected to nodes 3 (weight: 7), 9 (weight: 7), 10 (weight: 8), 6 (weight: 8), 5 (weight: 1), 8 (weight: 2), 4 (weight: 10), 1 (weight: 9).\nNode 8 is connected to nodes 3 (weight: 6), 0 (weight: 2), 9 (weight: 10), 10 (weight: 1), 6 (weight: 2), 5 (weight: 4), 11 (weight: 3), 4 (weight: 1), 1 (weight: 3).\nNode 7 is connected to nodes 3 (weight: 5), 9 (weight: 6), 10 (weight: 4), 6 (weight: 1), 1 (weight: 2).\nNode 2 is connected to nodes 3 (weight: 3), 9 (weight: 4), 11 (weight: 7).\nNode 9 is connected to nodes 0 (weight: 7), 8 (weight: 10), 7 (weight: 6), 2 (weight: 4), 10 (weight: 1), 6 (weight: 5), 5 (weight: 10), 1 (weight: 3).\nNode 10 is connected to nodes 0 (weight: 8), 8 (weight: 1), 7 (weight: 4), 9 (weight: 1), 5 (weight: 9), 11 (weight: 6), 1 (weight: 4).\nNode 6 is connected to nodes 0 (weight: 8), 8 (weight: 2), 7 (weight: 1), 9 (weight: 5).\nNode 5 is connected to nodes 0 (weight: 1), 8 (weight: 4), 9 (weight: 10), 10 (weight: 9), 11 (weight: 4), 4 (weight: 8), 1 (weight: 7).\nNode 4 is connected to nodes 0 (weight: 10), 8 (weight: 1), 5 (weight: 8), 1 (weight: 4), 11 (weight: 4).\nNode 1 is connected to nodes 0 (weight: 9), 8 (weight: 3), 7 (weight: 2), 9 (weight: 3), 10 (weight: 4), 5 (weight: 7), 11 (weight: 5), 4 (weight: 4).\nNode 11 is connected to nodes 8 (weight: 3), 2 (weight: 7), 10 (weight: 6), 5 (weight: 4), 1 (weight: 5), 4 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=9, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 236, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 3 is connected to nodes 1 (weight: 4), 6 (weight: 8), 2 (weight: 2).\nNode 1 is connected to nodes 5 (weight: 8), 0 (weight: 2), 3 (weight: 8).\nNode 6 is connected to node 1 (weight: 2).\nNode 5 is connected to node 7 (weight: 2).\nNode 0 is connected to node 4 (weight: 7).\nNode 7 is connected to nodes 6 (weight: 3), 5 (weight: 3).\nNode 4 is connected to nodes 2 (weight: 4), 3 (weight: 10), 7 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nlength = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(length)\n```"}, {"id": 237, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to nodes 1 (weight: 6), 12 (weight: 9), 10 (weight: 10).\nNode 1 is connected to nodes 4 (weight: 8), 12 (weight: 4), 9 (weight: 9), 5 (weight: 4), 11 (weight: 2), 7 (weight: 2).\nNode 12 is connected to nodes 8 (weight: 5), 7 (weight: 9), 4 (weight: 9).\nNode 10 is connected to nodes 2 (weight: 4), 5 (weight: 2), 11 (weight: 10), 8 (weight: 1), 6 (weight: 6), 1 (weight: 6), 4 (weight: 6), 12 (weight: 8).\nNode 4 is connected to nodes 11 (weight: 2), 8 (weight: 6).\nNode 9 is connected to nodes 5 (weight: 7), 3 (weight: 3), 4 (weight: 5), 12 (weight: 10), 0 (weight: 8), 10 (weight: 7), 2 (weight: 10).\nNode 5 is connected to nodes 3 (weight: 9), 12 (weight: 8), 0 (weight: 1).\nNode 11 is connected to nodes 8 (weight: 7), 1 (weight: 4), 12 (weight: 4), 10 (weight: 8), 2 (weight: 9), 3 (weight: 10).\nNode 7 is connected to nodes 4 (weight: 10), 12 (weight: 10), 2 (weight: 10), 9 (weight: 1), 5 (weight: 5), 8 (weight: 1).\nNode 8 is connected to nodes 7 (weight: 8), 1 (weight: 5), 4 (weight: 2), 9 (weight: 5), 5 (weight: 1), 11 (weight: 9).\nNode 2 is connected to nodes 3 (weight: 3), 12 (weight: 8).\nNode 6 is connected to nodes 7 (weight: 4), 1 (weight: 3), 4 (weight: 8), 12 (weight: 2), 9 (weight: 2), 8 (weight: 7).\nNode 0 is connected to nodes 10 (weight: 9), 2 (weight: 4), 3 (weight: 2), 11 (weight: 1), 8 (weight: 6), 6 (weight: 6), 7 (weight: 6), 1 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=9, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 238, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 8 (weight: 4), 9 (weight: 3), 12 (weight: 8), 10 (weight: 7).\nNode 8 is connected to nodes 6 (weight: 4), 2 (weight: 4), 5 (weight: 9), 9 (weight: 1), 3 (weight: 4).\nNode 9 is connected to nodes 6 (weight: 3), 8 (weight: 1), 10 (weight: 2), 2 (weight: 3).\nNode 12 is connected to nodes 6 (weight: 8), 10 (weight: 4), 1 (weight: 9).\nNode 10 is connected to nodes 6 (weight: 7), 9 (weight: 2), 12 (weight: 4), 3 (weight: 4), 1 (weight: 8).\nNode 2 is connected to nodes 8 (weight: 4), 9 (weight: 3), 5 (weight: 1), 4 (weight: 4).\nNode 5 is connected to nodes 8 (weight: 9), 2 (weight: 1), 11 (weight: 9), 13 (weight: 1).\nNode 3 is connected to nodes 8 (weight: 4), 10 (weight: 4), 11 (weight: 1), 13 (weight: 2), 0 (weight: 9), 7 (weight: 10).\nNode 1 is connected to nodes 12 (weight: 9), 10 (weight: 8), 4 (weight: 3), 0 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 4), 1 (weight: 3), 0 (weight: 2).\nNode 11 is connected to nodes 5 (weight: 9), 3 (weight: 1), 7 (weight: 8).\nNode 13 is connected to nodes 5 (weight: 1), 3 (weight: 2), 7 (weight: 1).\nNode 0 is connected to nodes 3 (weight: 9), 1 (weight: 9), 7 (weight: 7), 4 (weight: 2).\nNode 7 is connected to nodes 3 (weight: 10), 11 (weight: 8), 13 (weight: 1), 0 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 13 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=13, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 239, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 3 (weight: 9), 4 (weight: 8), 6 (weight: 6).\nNode 4 is connected to nodes 10 (weight: 9), 7 (weight: 7), 9 (weight: 7), 5 (weight: 7), 8 (weight: 2).\nNode 6 is connected to nodes 3 (weight: 6), 0 (weight: 6).\nNode 10 is connected to nodes 9 (weight: 3), 4 (weight: 1), 6 (weight: 10).\nNode 7 is connected to nodes 9 (weight: 9), 5 (weight: 3), 10 (weight: 6).\nNode 9 is connected to nodes 6 (weight: 7), 10 (weight: 7).\nNode 8 is connected to nodes 1 (weight: 3), 10 (weight: 7), 9 (weight: 8), 5 (weight: 5).\nNode 0 is connected to nodes 7 (weight: 6), 9 (weight: 8), 3 (weight: 9), 2 (weight: 6).\nNode 1 is connected to nodes 6 (weight: 1), 10 (weight: 7), 7 (weight: 2), 3 (weight: 6).\nNode 2 is connected to node 6 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=9, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 240, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 0 (weight: 2), 1 (weight: 1), 4 (weight: 9).\nNode 0 is connected to nodes 1 (weight: 8), 3 (weight: 6), 2 (weight: 9), 7 (weight: 10), 6 (weight: 10).\nNode 1 is connected to nodes 5 (weight: 7), 0 (weight: 7).\nNode 4 is connected to nodes 7 (weight: 10), 5 (weight: 3), 0 (weight: 3), 2 (weight: 9).\nNode 3 is connected to nodes 4 (weight: 5), 7 (weight: 1), 6 (weight: 8), 0 (weight: 9), 1 (weight: 1).\nNode 2 is connected to nodes 6 (weight: 3), 5 (weight: 9).\nNode 6 is connected to nodes 3 (weight: 5), 2 (weight: 3).\nNode 5 is connected to nodes 0 (weight: 4), 8 (weight: 7), 3 (weight: 9), 6 (weight: 1).\nNode 8 is connected to nodes 6 (weight: 5), 5 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=2, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 241, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 5 (weight: 10), 7 (weight: 10), 1 (weight: 5), 2 (weight: 5), 13 (weight: 7).\nNode 5 is connected to nodes 1 (weight: 4), 13 (weight: 7), 3 (weight: 7), 0 (weight: 5), 8 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 5), 13 (weight: 5), 10 (weight: 2), 3 (weight: 5).\nNode 1 is connected to nodes 11 (weight: 5), 6 (weight: 3), 8 (weight: 7), 4 (weight: 2).\nNode 2 is connected to nodes 11 (weight: 9), 6 (weight: 1), 10 (weight: 4), 12 (weight: 3), 0 (weight: 10).\nNode 13 is connected to nodes 0 (weight: 6), 8 (weight: 1), 9 (weight: 3), 5 (weight: 8), 7 (weight: 2), 1 (weight: 3).\nNode 3 is connected to nodes 9 (weight: 10), 5 (weight: 9), 7 (weight: 8), 11 (weight: 8), 6 (weight: 1), 10 (weight: 8).\nNode 0 is connected to nodes 9 (weight: 7), 1 (weight: 1), 12 (weight: 9).\nNode 8 is connected to nodes 9 (weight: 4), 13 (weight: 9), 6 (weight: 4), 10 (weight: 10), 3 (weight: 4).\nNode 10 is connected to nodes 0 (weight: 7), 8 (weight: 10), 4 (weight: 1), 9 (weight: 5), 1 (weight: 1), 2 (weight: 3), 13 (weight: 2).\nNode 11 is connected to nodes 10 (weight: 4), 12 (weight: 7), 8 (weight: 3).\nNode 6 is connected to nodes 12 (weight: 9), 5 (weight: 2), 2 (weight: 9), 13 (weight: 1).\nNode 4 is connected to nodes 7 (weight: 10), 1 (weight: 6), 11 (weight: 8), 6 (weight: 7), 10 (weight: 10), 12 (weight: 5).\nNode 12 is connected to nodes 0 (weight: 5), 4 (weight: 2), 5 (weight: 2), 7 (weight: 6), 11 (weight: 4), 6 (weight: 4), 10 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=3, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 242, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 8 (weight: 2), 11 (weight: 10), 0 (weight: 5), 1 (weight: 7), 9 (weight: 1), 10 (weight: 10), 6 (weight: 1), 7 (weight: 3).\nNode 8 is connected to nodes 2 (weight: 2), 5 (weight: 10), 0 (weight: 3), 3 (weight: 10), 1 (weight: 6), 4 (weight: 3), 9 (weight: 3), 10 (weight: 5), 7 (weight: 9).\nNode 11 is connected to nodes 2 (weight: 10), 5 (weight: 5), 0 (weight: 9), 1 (weight: 10), 9 (weight: 7), 10 (weight: 4).\nNode 0 is connected to nodes 2 (weight: 5), 8 (weight: 3), 11 (weight: 9), 5 (weight: 6), 1 (weight: 6), 9 (weight: 1), 6 (weight: 9), 7 (weight: 1).\nNode 1 is connected to nodes 2 (weight: 7), 8 (weight: 6), 11 (weight: 10), 0 (weight: 6), 3 (weight: 5), 4 (weight: 2), 9 (weight: 8), 10 (weight: 2), 6 (weight: 10), 7 (weight: 5).\nNode 9 is connected to nodes 2 (weight: 1), 8 (weight: 3), 11 (weight: 7), 0 (weight: 1), 1 (weight: 8), 3 (weight: 2), 4 (weight: 2), 6 (weight: 9), 7 (weight: 5).\nNode 10 is connected to nodes 2 (weight: 10), 8 (weight: 5), 11 (weight: 4), 1 (weight: 2), 5 (weight: 5), 6 (weight: 8), 7 (weight: 4).\nNode 6 is connected to nodes 2 (weight: 1), 0 (weight: 9), 1 (weight: 10), 9 (weight: 9), 10 (weight: 8), 5 (weight: 10), 3 (weight: 7).\nNode 7 is connected to nodes 2 (weight: 3), 8 (weight: 9), 0 (weight: 1), 1 (weight: 5), 9 (weight: 5), 10 (weight: 4), 3 (weight: 6), 4 (weight: 7).\nNode 5 is connected to nodes 8 (weight: 10), 11 (weight: 5), 0 (weight: 6), 10 (weight: 5), 6 (weight: 10), 3 (weight: 6), 4 (weight: 5).\nNode 3 is connected to nodes 8 (weight: 10), 1 (weight: 5), 9 (weight: 2), 6 (weight: 7), 7 (weight: 6), 5 (weight: 6), 4 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 3), 1 (weight: 2), 9 (weight: 2), 7 (weight: 7), 5 (weight: 5), 3 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 243, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 1 is connected to nodes 3 (weight: 10), 5 (weight: 4).\nNode 3 is connected to nodes 0 (weight: 6), 1 (weight: 8).\nNode 5 is connected to nodes 4 (weight: 1), 7 (weight: 2).\nNode 4 is connected to node 6 (weight: 6).\nNode 7 is connected to node 5 (weight: 3).\nNode 6 is connected to nodes 1 (weight: 5), 8 (weight: 5), 3 (weight: 10).\nNode 2 is connected to nodes 5 (weight: 6), 4 (weight: 10), 8 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 7\nlength = nx.shortest_path_length(G, source=6, target=7, weight='weight')\nprint(length)\n```"}, {"id": 244, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 8 (weight: 3), 4 (weight: 1), 7 (weight: 9), 5 (weight: 9), 0 (weight: 1), 3 (weight: 8).\nNode 8 is connected to nodes 4 (weight: 7), 6 (weight: 3).\nNode 4 is connected to nodes 7 (weight: 1), 1 (weight: 7), 2 (weight: 2), 8 (weight: 7).\nNode 7 is connected to nodes 1 (weight: 3), 0 (weight: 5), 3 (weight: 9), 6 (weight: 5), 8 (weight: 1).\nNode 5 is connected to nodes 3 (weight: 8), 1 (weight: 2).\nNode 0 is connected to node 5 (weight: 10).\nNode 3 is connected to nodes 9 (weight: 6), 6 (weight: 3), 5 (weight: 3), 0 (weight: 5).\nNode 6 is connected to nodes 5 (weight: 10), 0 (weight: 1), 2 (weight: 8), 3 (weight: 5), 9 (weight: 9).\nNode 1 is connected to nodes 6 (weight: 8), 8 (weight: 2), 7 (weight: 6).\nNode 2 is connected to nodes 7 (weight: 8), 1 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 6\nlength = nx.shortest_path_length(G, source=7, target=6, weight='weight')\nprint(length)\n```"}, {"id": 245, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 7 (weight: 10), 4 (weight: 3), 2 (weight: 6), 6 (weight: 5), 13 (weight: 7), 12 (weight: 6), 1 (weight: 1), 3 (weight: 8), 8 (weight: 5).\nNode 7 is connected to nodes 11 (weight: 10), 10 (weight: 4), 5 (weight: 4), 6 (weight: 2), 4 (weight: 4), 3 (weight: 7).\nNode 4 is connected to nodes 11 (weight: 3), 7 (weight: 4).\nNode 2 is connected to nodes 11 (weight: 6), 5 (weight: 10), 13 (weight: 1), 3 (weight: 8), 12 (weight: 3).\nNode 6 is connected to nodes 11 (weight: 5), 7 (weight: 2).\nNode 13 is connected to nodes 11 (weight: 7), 2 (weight: 1).\nNode 12 is connected to nodes 11 (weight: 6), 2 (weight: 3).\nNode 1 is connected to nodes 11 (weight: 1), 3 (weight: 3), 10 (weight: 2), 8 (weight: 7).\nNode 3 is connected to nodes 11 (weight: 8), 7 (weight: 7), 2 (weight: 8), 1 (weight: 3), 9 (weight: 10), 0 (weight: 9).\nNode 8 is connected to nodes 11 (weight: 5), 1 (weight: 7).\nNode 10 is connected to nodes 7 (weight: 4), 1 (weight: 2).\nNode 5 is connected to nodes 7 (weight: 4), 2 (weight: 10), 9 (weight: 2).\nNode 9 is connected to nodes 3 (weight: 10), 5 (weight: 2).\nNode 0 is connected to node 3 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=10, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 246, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to nodes 12 (weight: 3), 6 (weight: 1), 11 (weight: 2), 4 (weight: 1), 5 (weight: 2).\nNode 12 is connected to node 13 (weight: 3).\nNode 6 is connected to nodes 13 (weight: 1), 3 (weight: 2), 8 (weight: 10), 2 (weight: 1), 7 (weight: 4).\nNode 11 is connected to nodes 13 (weight: 2), 10 (weight: 2), 8 (weight: 1), 14 (weight: 9), 4 (weight: 8).\nNode 4 is connected to nodes 13 (weight: 1), 11 (weight: 8), 8 (weight: 3), 9 (weight: 1), 14 (weight: 6), 5 (weight: 5), 7 (weight: 3).\nNode 5 is connected to nodes 13 (weight: 2), 4 (weight: 5), 3 (weight: 4), 14 (weight: 9).\nNode 3 is connected to nodes 6 (weight: 2), 5 (weight: 4), 14 (weight: 6), 7 (weight: 2).\nNode 8 is connected to nodes 6 (weight: 10), 11 (weight: 1), 4 (weight: 3), 14 (weight: 5).\nNode 2 is connected to node 6 (weight: 1).\nNode 7 is connected to nodes 6 (weight: 4), 4 (weight: 3), 3 (weight: 2), 0 (weight: 5).\nNode 10 is connected to node 11 (weight: 2).\nNode 14 is connected to nodes 11 (weight: 9), 4 (weight: 6), 5 (weight: 9), 3 (weight: 6), 8 (weight: 5), 0 (weight: 8), 1 (weight: 9).\nNode 9 is connected to nodes 4 (weight: 1), 0 (weight: 9), 1 (weight: 8).\nNode 0 is connected to nodes 14 (weight: 8), 7 (weight: 5), 9 (weight: 9), 1 (weight: 6).\nNode 1 is connected to nodes 14 (weight: 9), 9 (weight: 8), 0 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=8, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 247, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 10 (weight: 6), 5 (weight: 8), 0 (weight: 10), 3 (weight: 10), 11 (weight: 4), 1 (weight: 10), 8 (weight: 1), 6 (weight: 6).\nNode 10 is connected to nodes 9 (weight: 6), 1 (weight: 2), 0 (weight: 4), 4 (weight: 2).\nNode 5 is connected to nodes 9 (weight: 8), 1 (weight: 3), 7 (weight: 4), 2 (weight: 1).\nNode 0 is connected to nodes 9 (weight: 10), 10 (weight: 4), 1 (weight: 2), 2 (weight: 1), 8 (weight: 6), 4 (weight: 4), 3 (weight: 3), 7 (weight: 9).\nNode 3 is connected to nodes 9 (weight: 10), 0 (weight: 3), 1 (weight: 8), 6 (weight: 6).\nNode 11 is connected to nodes 9 (weight: 4), 1 (weight: 8), 7 (weight: 4).\nNode 1 is connected to nodes 9 (weight: 10), 10 (weight: 2), 5 (weight: 3), 0 (weight: 2), 3 (weight: 8), 11 (weight: 8), 6 (weight: 7), 7 (weight: 4).\nNode 8 is connected to nodes 9 (weight: 1), 0 (weight: 6).\nNode 6 is connected to nodes 9 (weight: 6), 3 (weight: 6), 1 (weight: 7), 4 (weight: 9).\nNode 4 is connected to nodes 10 (weight: 2), 0 (weight: 4), 6 (weight: 9).\nNode 7 is connected to nodes 5 (weight: 4), 0 (weight: 9), 11 (weight: 4), 1 (weight: 4).\nNode 2 is connected to nodes 5 (weight: 1), 0 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=3, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 248, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to nodes 10 (weight: 9), 6 (weight: 8), 0 (weight: 2), 4 (weight: 2).\nNode 10 is connected to nodes 11 (weight: 6), 4 (weight: 9), 3 (weight: 9).\nNode 6 is connected to nodes 12 (weight: 4), 7 (weight: 2), 13 (weight: 9), 3 (weight: 8), 10 (weight: 9).\nNode 0 is connected to nodes 13 (weight: 5), 2 (weight: 9), 1 (weight: 1), 12 (weight: 2), 11 (weight: 10), 7 (weight: 5).\nNode 4 is connected to nodes 2 (weight: 1), 5 (weight: 9), 11 (weight: 5).\nNode 11 is connected to nodes 0 (weight: 10), 13 (weight: 2), 3 (weight: 2), 5 (weight: 8), 10 (weight: 6).\nNode 12 is connected to nodes 8 (weight: 10), 1 (weight: 8), 5 (weight: 9).\nNode 7 is connected to nodes 0 (weight: 6), 2 (weight: 8), 6 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 8), 5 (weight: 10), 6 (weight: 1), 12 (weight: 5).\nNode 1 is connected to nodes 12 (weight: 6), 4 (weight: 8), 13 (weight: 8).\nNode 5 is connected to nodes 0 (weight: 10), 13 (weight: 6), 3 (weight: 10), 2 (weight: 5).\nNode 8 is connected to node 11 (weight: 5).\nNode 9 is connected to nodes 4 (weight: 5), 10 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=12, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 249, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 14 is connected to nodes 9 (weight: 1), 11 (weight: 4), 12 (weight: 6).\nNode 9 is connected to nodes 4 (weight: 1), 11 (weight: 4), 10 (weight: 5), 3 (weight: 1).\nNode 11 is connected to nodes 1 (weight: 10), 10 (weight: 10), 12 (weight: 8), 9 (weight: 6).\nNode 12 is connected to nodes 14 (weight: 5), 5 (weight: 10), 2 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 4), 3 (weight: 3).\nNode 10 is connected to nodes 14 (weight: 9), 9 (weight: 5), 13 (weight: 9), 5 (weight: 1), 6 (weight: 4).\nNode 3 is connected to nodes 5 (weight: 5), 2 (weight: 2), 10 (weight: 6), 7 (weight: 4).\nNode 1 is connected to nodes 10 (weight: 6), 14 (weight: 10), 3 (weight: 10), 9 (weight: 6), 4 (weight: 9), 13 (weight: 3).\nNode 2 is connected to nodes 10 (weight: 5), 0 (weight: 7), 3 (weight: 7), 13 (weight: 1), 1 (weight: 8).\nNode 7 is connected to nodes 14 (weight: 3), 6 (weight: 5).\nNode 0 is connected to nodes 9 (weight: 10), 2 (weight: 7).\nNode 13 is connected to node 14 (weight: 4).\nNode 6 is connected to node 10 (weight: 7).\nNode 8 is connected to nodes 2 (weight: 9), 10 (weight: 10), 5 (weight: 10), 1 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=2, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 250, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 8 (weight: 1), 5 (weight: 5), 11 (weight: 2), 10 (weight: 3), 12 (weight: 8).\nNode 8 is connected to nodes 2 (weight: 1), 13 (weight: 7), 11 (weight: 7), 10 (weight: 7), 3 (weight: 3), 6 (weight: 5), 4 (weight: 3).\nNode 5 is connected to nodes 2 (weight: 5), 13 (weight: 8), 1 (weight: 2), 11 (weight: 3), 10 (weight: 4), 12 (weight: 4).\nNode 11 is connected to nodes 2 (weight: 2), 8 (weight: 7), 5 (weight: 3), 14 (weight: 9), 3 (weight: 10).\nNode 10 is connected to nodes 2 (weight: 3), 8 (weight: 7), 5 (weight: 4), 14 (weight: 1).\nNode 12 is connected to nodes 2 (weight: 8), 5 (weight: 4), 3 (weight: 4), 6 (weight: 1).\nNode 13 is connected to nodes 8 (weight: 7), 5 (weight: 8), 7 (weight: 9), 14 (weight: 9), 6 (weight: 4).\nNode 3 is connected to nodes 8 (weight: 3), 11 (weight: 10), 12 (weight: 4), 7 (weight: 6), 0 (weight: 7), 1 (weight: 9).\nNode 6 is connected to nodes 8 (weight: 5), 12 (weight: 1), 13 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 3), 7 (weight: 9).\nNode 1 is connected to nodes 5 (weight: 2), 3 (weight: 9), 14 (weight: 7).\nNode 14 is connected to nodes 11 (weight: 9), 10 (weight: 1), 13 (weight: 9), 1 (weight: 7), 9 (weight: 5).\nNode 7 is connected to nodes 13 (weight: 9), 3 (weight: 6), 4 (weight: 9).\nNode 0 is connected to node 3 (weight: 7).\nNode 9 is connected to node 14 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 14 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=14, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 251, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 5 (weight: 6), 6 (weight: 4).\nNode 5 is connected to nodes 1 (weight: 6), 9 (weight: 1), 13 (weight: 9), 10 (weight: 7).\nNode 6 is connected to nodes 0 (weight: 1), 4 (weight: 10), 12 (weight: 1), 10 (weight: 9), 5 (weight: 2), 3 (weight: 10), 7 (weight: 2), 9 (weight: 5).\nNode 1 is connected to nodes 14 (weight: 4), 7 (weight: 3), 6 (weight: 6), 0 (weight: 4), 11 (weight: 9), 4 (weight: 4), 12 (weight: 8), 13 (weight: 8).\nNode 9 is connected to nodes 12 (weight: 6), 2 (weight: 10), 13 (weight: 10), 14 (weight: 9).\nNode 13 is connected to nodes 5 (weight: 9), 9 (weight: 1), 4 (weight: 1), 12 (weight: 3), 2 (weight: 4).\nNode 10 is connected to nodes 5 (weight: 6), 7 (weight: 9), 9 (weight: 1), 0 (weight: 3), 8 (weight: 9), 11 (weight: 1), 4 (weight: 2).\nNode 0 is connected to nodes 11 (weight: 2), 2 (weight: 10), 10 (weight: 7), 5 (weight: 8), 14 (weight: 9), 3 (weight: 6), 9 (weight: 7).\nNode 4 is connected to nodes 12 (weight: 8), 2 (weight: 6), 1 (weight: 7), 9 (weight: 7), 0 (weight: 5), 8 (weight: 8).\nNode 12 is connected to nodes 6 (weight: 4), 0 (weight: 8), 11 (weight: 3).\nNode 3 is connected to nodes 13 (weight: 5), 10 (weight: 5).\nNode 7 is connected to nodes 9 (weight: 1), 6 (weight: 9), 0 (weight: 2), 8 (weight: 9), 12 (weight: 7), 13 (weight: 6), 3 (weight: 10).\nNode 2 is connected to nodes 13 (weight: 10), 5 (weight: 9), 4 (weight: 5), 12 (weight: 8).\nNode 8 is connected to nodes 11 (weight: 4), 12 (weight: 1), 7 (weight: 9).\nNode 14 is connected to nodes 7 (weight: 5), 4 (weight: 7), 2 (weight: 7), 13 (weight: 10), 10 (weight: 2), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=1, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 252, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 10 (weight: 4), 9 (weight: 2), 4 (weight: 4).\nNode 10 is connected to nodes 8 (weight: 4), 3 (weight: 4), 2 (weight: 4), 6 (weight: 9).\nNode 9 is connected to nodes 8 (weight: 2), 2 (weight: 1), 7 (weight: 10).\nNode 4 is connected to nodes 8 (weight: 4), 5 (weight: 2), 11 (weight: 6), 6 (weight: 5), 1 (weight: 4).\nNode 3 is connected to nodes 10 (weight: 4), 0 (weight: 10), 11 (weight: 9), 12 (weight: 1).\nNode 2 is connected to nodes 10 (weight: 4), 9 (weight: 1), 0 (weight: 9), 12 (weight: 5).\nNode 6 is connected to nodes 10 (weight: 9), 4 (weight: 5), 1 (weight: 9), 7 (weight: 1), 12 (weight: 5).\nNode 7 is connected to nodes 9 (weight: 10), 6 (weight: 1), 1 (weight: 1).\nNode 5 is connected to nodes 4 (weight: 2), 0 (weight: 7), 12 (weight: 6), 11 (weight: 7).\nNode 11 is connected to nodes 4 (weight: 6), 3 (weight: 9), 0 (weight: 6), 5 (weight: 7).\nNode 1 is connected to nodes 4 (weight: 4), 6 (weight: 9), 7 (weight: 1).\nNode 0 is connected to nodes 3 (weight: 10), 2 (weight: 9), 5 (weight: 7), 12 (weight: 2), 11 (weight: 6).\nNode 12 is connected to nodes 3 (weight: 1), 2 (weight: 5), 6 (weight: 5), 0 (weight: 2), 5 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 10\nshortest_path_length = nx.shortest_path_length(G, source=7, target=10, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 253, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 0 (weight: 3), 2 (weight: 3), 5 (weight: 9), 7 (weight: 3), 1 (weight: 5), 8 (weight: 3), 9 (weight: 7).\nNode 0 is connected to nodes 10 (weight: 3), 3 (weight: 8), 5 (weight: 5), 6 (weight: 8), 7 (weight: 7), 1 (weight: 2), 4 (weight: 2), 8 (weight: 6), 9 (weight: 6).\nNode 2 is connected to nodes 10 (weight: 3), 3 (weight: 3), 5 (weight: 5), 7 (weight: 5), 4 (weight: 8), 8 (weight: 9), 9 (weight: 10).\nNode 5 is connected to nodes 10 (weight: 9), 0 (weight: 5), 2 (weight: 5), 3 (weight: 8), 6 (weight: 8), 7 (weight: 1), 1 (weight: 1), 4 (weight: 5), 8 (weight: 6).\nNode 7 is connected to nodes 10 (weight: 3), 0 (weight: 7), 2 (weight: 5), 5 (weight: 1), 3 (weight: 2), 6 (weight: 9), 1 (weight: 7), 4 (weight: 2), 8 (weight: 4), 9 (weight: 1).\nNode 1 is connected to nodes 10 (weight: 5), 0 (weight: 2), 5 (weight: 1), 7 (weight: 7), 3 (weight: 5), 6 (weight: 8), 4 (weight: 8), 8 (weight: 3), 9 (weight: 2).\nNode 8 is connected to nodes 10 (weight: 3), 0 (weight: 6), 2 (weight: 9), 5 (weight: 6), 7 (weight: 4), 1 (weight: 3), 4 (weight: 3), 9 (weight: 10).\nNode 9 is connected to nodes 10 (weight: 7), 0 (weight: 6), 2 (weight: 10), 7 (weight: 1), 1 (weight: 2), 8 (weight: 10), 3 (weight: 10), 6 (weight: 7), 4 (weight: 6).\nNode 3 is connected to nodes 0 (weight: 8), 2 (weight: 3), 5 (weight: 8), 7 (weight: 2), 1 (weight: 5), 9 (weight: 10), 6 (weight: 8).\nNode 6 is connected to nodes 0 (weight: 8), 5 (weight: 8), 7 (weight: 9), 1 (weight: 8), 9 (weight: 7), 3 (weight: 8).\nNode 4 is connected to nodes 0 (weight: 2), 2 (weight: 8), 5 (weight: 5), 7 (weight: 2), 1 (weight: 8), 8 (weight: 3), 9 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=0, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 254, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 3 (weight: 9), 1 (weight: 9), 5 (weight: 9).\nNode 3 is connected to nodes 6 (weight: 9), 7 (weight: 10), 2 (weight: 9).\nNode 1 is connected to nodes 6 (weight: 9), 0 (weight: 2), 4 (weight: 8).\nNode 5 is connected to node 6 (weight: 9).\nNode 7 is connected to nodes 3 (weight: 10), 2 (weight: 2).\nNode 2 is connected to nodes 3 (weight: 9), 7 (weight: 2).\nNode 0 is connected to node 1 (weight: 2).\nNode 4 is connected to node 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=4, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 255, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 1 (weight: 3), 7 (weight: 6), 5 (weight: 2), 4 (weight: 10).\nNode 1 is connected to nodes 6 (weight: 3), 2 (weight: 6), 10 (weight: 5).\nNode 7 is connected to nodes 6 (weight: 6), 9 (weight: 2).\nNode 5 is connected to nodes 6 (weight: 2), 8 (weight: 7).\nNode 4 is connected to nodes 6 (weight: 10), 13 (weight: 6).\nNode 2 is connected to node 1 (weight: 6).\nNode 10 is connected to nodes 1 (weight: 5), 8 (weight: 8), 12 (weight: 2).\nNode 9 is connected to nodes 7 (weight: 2), 3 (weight: 10).\nNode 8 is connected to nodes 5 (weight: 7), 10 (weight: 8).\nNode 13 is connected to node 4 (weight: 6).\nNode 12 is connected to node 10 (weight: 2).\nNode 0 is connected to node 3 (weight: 7).\nNode 3 is connected to nodes 0 (weight: 7), 9 (weight: 10), 11 (weight: 1).\nNode 11 is connected to node 3 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=2, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 256, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to node 10 (weight: 9).\nNode 10 is connected to nodes 9 (weight: 9), 5 (weight: 4).\nNode 5 is connected to nodes 10 (weight: 4), 8 (weight: 5), 1 (weight: 6).\nNode 8 is connected to nodes 5 (weight: 5), 4 (weight: 1), 12 (weight: 3), 2 (weight: 10).\nNode 1 is connected to node 5 (weight: 6).\nNode 4 is connected to nodes 8 (weight: 1), 3 (weight: 6).\nNode 12 is connected to nodes 8 (weight: 3), 2 (weight: 10).\nNode 2 is connected to nodes 8 (weight: 10), 12 (weight: 10), 13 (weight: 3).\nNode 3 is connected to nodes 4 (weight: 6), 11 (weight: 7).\nNode 13 is connected to nodes 2 (weight: 3), 14 (weight: 10), 0 (weight: 3).\nNode 14 is connected to nodes 13 (weight: 10), 7 (weight: 4).\nNode 7 is connected to node 14 (weight: 4).\nNode 0 is connected to nodes 13 (weight: 3), 6 (weight: 4).\nNode 6 is connected to node 0 (weight: 4).\nNode 11 is connected to node 3 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        edge_weight = 1  # Assuming default weight is 1 if not specified\n        G.add_edge(node, neighbor, weight=edge_weight)\n\n# Calculate the length of the shortest path from node 10 to node 13\nshortest_path_length = nx.shortest_path_length(G, source=10, target=13, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 257, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 6 (weight: 9), 5 (weight: 10), 1 (weight: 4), 11 (weight: 2), 13 (weight: 10).\nNode 6 is connected to nodes 13 (weight: 5), 3 (weight: 3), 9 (weight: 4).\nNode 5 is connected to nodes 3 (weight: 5), 2 (weight: 9).\nNode 1 is connected to nodes 13 (weight: 9), 12 (weight: 1).\nNode 11 is connected to nodes 8 (weight: 1), 0 (weight: 6).\nNode 13 is connected to node 12 (weight: 10).\nNode 3 is connected to nodes 12 (weight: 10), 1 (weight: 3), 13 (weight: 4).\nNode 9 is connected to nodes 2 (weight: 5), 6 (weight: 6), 1 (weight: 7).\nNode 2 is connected to nodes 12 (weight: 6), 11 (weight: 3), 3 (weight: 7), 7 (weight: 9), 9 (weight: 4).\nNode 12 is connected to nodes 10 (weight: 4), 0 (weight: 3).\nNode 8 is connected to nodes 10 (weight: 7), 3 (weight: 4), 9 (weight: 9), 1 (weight: 7), 11 (weight: 5).\nNode 10 is connected to nodes 4 (weight: 1), 5 (weight: 2).\nNode 7 is connected to nodes 2 (weight: 5), 12 (weight: 3), 1 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 10), 5 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=12, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 258, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 3 is connected to node 14 (weight: 8).\nNode 14 is connected to nodes 6 (weight: 7), 7 (weight: 7), 12 (weight: 2), 4 (weight: 6).\nNode 6 is connected to nodes 11 (weight: 10), 4 (weight: 7), 9 (weight: 2), 5 (weight: 4), 2 (weight: 2).\nNode 7 is connected to nodes 8 (weight: 4), 4 (weight: 4), 9 (weight: 2).\nNode 12 is connected to node 11 (weight: 5).\nNode 4 is connected to node 10 (weight: 6).\nNode 11 is connected to nodes 8 (weight: 7), 3 (weight: 10).\nNode 8 is connected to node 7 (weight: 7).\nNode 9 is connected to nodes 2 (weight: 10), 1 (weight: 3), 0 (weight: 3).\nNode 10 is connected to node 1 (weight: 2).\nNode 2 is connected to node 0 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 10), 3 (weight: 8), 7 (weight: 9).\nNode 0 is connected to nodes 6 (weight: 2), 7 (weight: 5), 1 (weight: 10).\nNode 13 is connected to nodes 10 (weight: 1), 8 (weight: 5), 12 (weight: 4).\nNode 5 is connected to nodes 8 (weight: 6), 14 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 for simplicity, as it's not provided\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 10 to node 14\nshortest_path_length = nx.shortest_path_length(G, source=10, target=14, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 259, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 11 (weight: 3), 7 (weight: 10), 3 (weight: 2), 9 (weight: 1), 8 (weight: 9), 4 (weight: 3), 10 (weight: 10), 1 (weight: 3), 13 (weight: 4).\nNode 11 is connected to node 12 (weight: 3).\nNode 7 is connected to node 12 (weight: 10).\nNode 3 is connected to node 12 (weight: 2).\nNode 9 is connected to node 12 (weight: 1).\nNode 8 is connected to node 12 (weight: 9).\nNode 4 is connected to node 12 (weight: 3).\nNode 10 is connected to node 12 (weight: 10).\nNode 1 is connected to node 12 (weight: 3).\nNode 13 is connected to nodes 12 (weight: 4), 14 (weight: 10), 2 (weight: 6).\nNode 14 is connected to nodes 13 (weight: 10), 6 (weight: 3), 0 (weight: 10), 5 (weight: 8).\nNode 2 is connected to node 13 (weight: 6).\nNode 6 is connected to node 14 (weight: 3).\nNode 0 is connected to node 14 (weight: 10).\nNode 5 is connected to node 14 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=5, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 260, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 7 (weight: 4), 0 (weight: 2), 2 (weight: 5).\nNode 7 is connected to nodes 1 (weight: 4), 5 (weight: 9).\nNode 0 is connected to nodes 1 (weight: 2), 3 (weight: 8).\nNode 2 is connected to nodes 1 (weight: 5), 6 (weight: 10).\nNode 5 is connected to nodes 7 (weight: 9), 6 (weight: 6).\nNode 3 is connected to nodes 0 (weight: 8), 4 (weight: 3).\nNode 6 is connected to nodes 2 (weight: 10), 5 (weight: 6).\nNode 4 is connected to node 3 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=0, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 261, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 4), 0 (weight: 6), 10 (weight: 6), 2 (weight: 6), 7 (weight: 6), 1 (weight: 1).\nNode 3 is connected to nodes 8 (weight: 4), 9 (weight: 7), 2 (weight: 2), 10 (weight: 3).\nNode 0 is connected to nodes 8 (weight: 6), 6 (weight: 9), 4 (weight: 7), 5 (weight: 7).\nNode 10 is connected to nodes 8 (weight: 6), 3 (weight: 3), 2 (weight: 5), 9 (weight: 1).\nNode 2 is connected to nodes 8 (weight: 6), 3 (weight: 2), 10 (weight: 5), 1 (weight: 5).\nNode 7 is connected to nodes 8 (weight: 6), 4 (weight: 3), 1 (weight: 5).\nNode 1 is connected to nodes 8 (weight: 1), 2 (weight: 5), 7 (weight: 5).\nNode 9 is connected to nodes 3 (weight: 7), 10 (weight: 1), 6 (weight: 10), 5 (weight: 8), 11 (weight: 9).\nNode 6 is connected to nodes 0 (weight: 9), 9 (weight: 10), 5 (weight: 4), 11 (weight: 5).\nNode 4 is connected to nodes 0 (weight: 7), 7 (weight: 3), 11 (weight: 9).\nNode 5 is connected to nodes 0 (weight: 7), 9 (weight: 8), 6 (weight: 4), 11 (weight: 7).\nNode 11 is connected to nodes 9 (weight: 9), 6 (weight: 5), 4 (weight: 9), 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=10, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 262, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 4 is connected to nodes 7 (weight: 4), 3 (weight: 3).\nNode 7 is connected to node 4 (weight: 4).\nNode 3 is connected to nodes 4 (weight: 3), 0 (weight: 7), 2 (weight: 4).\nNode 0 is connected to nodes 3 (weight: 7), 6 (weight: 6), 5 (weight: 5).\nNode 2 is connected to nodes 3 (weight: 4), 1 (weight: 5).\nNode 6 is connected to node 0 (weight: 6).\nNode 5 is connected to node 0 (weight: 5).\nNode 1 is connected to node 2 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=0, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 263, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 9 (weight: 10), 2 (weight: 1), 8 (weight: 6).\nNode 9 is connected to nodes 10 (weight: 10), 4 (weight: 4).\nNode 2 is connected to nodes 10 (weight: 1), 6 (weight: 9), 3 (weight: 1).\nNode 8 is connected to node 10 (weight: 6).\nNode 4 is connected to nodes 9 (weight: 4), 5 (weight: 1), 6 (weight: 10).\nNode 6 is connected to nodes 2 (weight: 9), 4 (weight: 10).\nNode 3 is connected to node 2 (weight: 1).\nNode 5 is connected to nodes 4 (weight: 1), 7 (weight: 3).\nNode 7 is connected to nodes 5 (weight: 3), 1 (weight: 9).\nNode 1 is connected to nodes 7 (weight: 9), 0 (weight: 5).\nNode 0 is connected to node 1 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=2, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 264, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 1), 2 (weight: 10), 4 (weight: 2), 1 (weight: 9), 7 (weight: 3).\nNode 3 is connected to nodes 1 (weight: 7), 5 (weight: 2).\nNode 2 is connected to nodes 0 (weight: 8), 6 (weight: 6), 8 (weight: 4).\nNode 4 is connected to nodes 5 (weight: 3), 0 (weight: 4), 3 (weight: 7).\nNode 1 is connected to nodes 5 (weight: 9), 3 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 4), 4 (weight: 8), 1 (weight: 2), 5 (weight: 8), 0 (weight: 6).\nNode 5 is connected to nodes 7 (weight: 6), 3 (weight: 10).\nNode 0 is connected to nodes 6 (weight: 5), 8 (weight: 7), 3 (weight: 3).\nNode 6 is connected to nodes 8 (weight: 6), 3 (weight: 7), 5 (weight: 3), 0 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=6, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 265, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 7 (weight: 8), 11 (weight: 10), 1 (weight: 5), 2 (weight: 7).\nNode 7 is connected to nodes 6 (weight: 4), 10 (weight: 6).\nNode 11 is connected to nodes 0 (weight: 7), 1 (weight: 7), 2 (weight: 8), 3 (weight: 10).\nNode 1 is connected to nodes 6 (weight: 2), 11 (weight: 7), 10 (weight: 8), 0 (weight: 8).\nNode 2 is connected to node 11 (weight: 5).\nNode 6 is connected to node 8 (weight: 10).\nNode 10 is connected to nodes 8 (weight: 1), 11 (weight: 5).\nNode 0 is connected to nodes 4 (weight: 1), 2 (weight: 2), 3 (weight: 3).\nNode 3 is connected to nodes 8 (weight: 3), 11 (weight: 7), 1 (weight: 6), 2 (weight: 8).\nNode 9 is connected to nodes 1 (weight: 1), 8 (weight: 5).\nNode 4 is connected to nodes 8 (weight: 10), 7 (weight: 8), 11 (weight: 9).\nNode 5 is connected to nodes 7 (weight: 7), 1 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=9, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 266, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 0 (weight: 5), 3 (weight: 6), 2 (weight: 5), 1 (weight: 10).\nNode 0 is connected to nodes 4 (weight: 10), 6 (weight: 8), 3 (weight: 4), 1 (weight: 2).\nNode 3 is connected to nodes 7 (weight: 3), 10 (weight: 10), 8 (weight: 8), 5 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 10), 9 (weight: 3), 11 (weight: 6), 3 (weight: 3), 10 (weight: 10).\nNode 1 is connected to nodes 9 (weight: 7), 5 (weight: 3), 3 (weight: 10), 10 (weight: 5).\nNode 4 is connected to nodes 11 (weight: 1), 1 (weight: 1), 8 (weight: 6), 0 (weight: 2), 9 (weight: 3).\nNode 6 is connected to nodes 11 (weight: 4), 3 (weight: 1), 2 (weight: 3), 1 (weight: 1), 8 (weight: 5).\nNode 7 is connected to nodes 10 (weight: 10), 8 (weight: 2), 5 (weight: 8).\nNode 5 is connected to nodes 7 (weight: 1), 2 (weight: 8).\nNode 9 is connected to nodes 5 (weight: 4), 6 (weight: 8), 3 (weight: 9).\nNode 11 is connected to nodes 10 (weight: 9), 9 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=7, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 267, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 0 (weight: 1), 6 (weight: 4), 1 (weight: 10).\nNode 0 is connected to nodes 2 (weight: 1), 6 (weight: 9).\nNode 6 is connected to nodes 2 (weight: 4), 0 (weight: 9), 3 (weight: 9).\nNode 1 is connected to nodes 2 (weight: 10), 5 (weight: 3).\nNode 3 is connected to node 6 (weight: 9).\nNode 5 is connected to nodes 1 (weight: 3), 8 (weight: 8).\nNode 4 is connected to nodes 8 (weight: 1), 7 (weight: 10).\nNode 8 is connected to nodes 4 (weight: 1), 5 (weight: 8).\nNode 7 is connected to node 4 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=5, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 268, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 2 is connected to nodes 3 (weight: 10), 8 (weight: 1), 7 (weight: 10), 0 (weight: 2), 5 (weight: 10).\nNode 3 is connected to nodes 2 (weight: 10), 1 (weight: 10), 0 (weight: 7), 5 (weight: 2).\nNode 8 is connected to nodes 2 (weight: 1), 6 (weight: 2), 4 (weight: 4), 0 (weight: 8).\nNode 7 is connected to nodes 2 (weight: 10), 6 (weight: 3).\nNode 0 is connected to nodes 2 (weight: 2), 3 (weight: 7), 8 (weight: 8).\nNode 5 is connected to nodes 2 (weight: 10), 3 (weight: 2), 6 (weight: 10), 1 (weight: 5).\nNode 1 is connected to nodes 3 (weight: 10), 5 (weight: 5), 6 (weight: 4).\nNode 6 is connected to nodes 8 (weight: 2), 7 (weight: 3), 5 (weight: 10), 1 (weight: 4).\nNode 4 is connected to node 8 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 1 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=1, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 269, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 3 (weight: 9), 6 (weight: 4), 4 (weight: 7).\nNode 3 is connected to nodes 7 (weight: 7), 5 (weight: 5), 0 (weight: 9), 1 (weight: 4).\nNode 6 is connected to node 2 (weight: 4).\nNode 4 is connected to nodes 8 (weight: 10), 1 (weight: 5), 5 (weight: 10).\nNode 7 is connected to nodes 5 (weight: 5), 4 (weight: 2), 0 (weight: 6), 2 (weight: 5).\nNode 5 is connected to nodes 4 (weight: 2), 0 (weight: 5), 2 (weight: 6), 8 (weight: 10), 7 (weight: 5).\nNode 0 is connected to node 6 (weight: 4).\nNode 1 is connected to node 2 (weight: 5).\nNode 2 is connected to node 1 (weight: 8).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 5 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=5, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 270, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 9 is connected to nodes 8 (weight: 6), 0 (weight: 6), 10 (weight: 9), 3 (weight: 7).\nNode 8 is connected to nodes 9 (weight: 6), 2 (weight: 9).\nNode 0 is connected to nodes 9 (weight: 6), 5 (weight: 6).\nNode 10 is connected to nodes 9 (weight: 9), 1 (weight: 9).\nNode 3 is connected to nodes 9 (weight: 7), 6 (weight: 9).\nNode 2 is connected to nodes 8 (weight: 9), 7 (weight: 7).\nNode 5 is connected to node 0 (weight: 6).\nNode 1 is connected to nodes 10 (weight: 9), 7 (weight: 9).\nNode 6 is connected to node 3 (weight: 9).\nNode 7 is connected to nodes 2 (weight: 7), 1 (weight: 9), 11 (weight: 7).\nNode 11 is connected to nodes 7 (weight: 7), 4 (weight: 10).\nNode 4 is connected to node 11 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=9, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 271, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 7 (weight: 3), 9 (weight: 3), 4 (weight: 5), 6 (weight: 6), 3 (weight: 2), 0 (weight: 6), 12 (weight: 2), 13 (weight: 8), 11 (weight: 9), 1 (weight: 1), 5 (weight: 6).\nNode 7 is connected to nodes 10 (weight: 3), 4 (weight: 7), 6 (weight: 8), 0 (weight: 8), 12 (weight: 2), 13 (weight: 7), 5 (weight: 3).\nNode 9 is connected to nodes 10 (weight: 3), 4 (weight: 1), 3 (weight: 8), 0 (weight: 8), 8 (weight: 2), 12 (weight: 9).\nNode 4 is connected to nodes 10 (weight: 5), 7 (weight: 7), 9 (weight: 1), 6 (weight: 10), 3 (weight: 1), 12 (weight: 1), 13 (weight: 2), 11 (weight: 10), 1 (weight: 9), 5 (weight: 4).\nNode 6 is connected to nodes 10 (weight: 6), 7 (weight: 8), 4 (weight: 10), 3 (weight: 1), 0 (weight: 4), 12 (weight: 3), 11 (weight: 8), 1 (weight: 3), 5 (weight: 8), 2 (weight: 2).\nNode 3 is connected to nodes 10 (weight: 2), 9 (weight: 8), 4 (weight: 1), 6 (weight: 1), 8 (weight: 10), 12 (weight: 5), 11 (weight: 10), 1 (weight: 7), 2 (weight: 4).\nNode 0 is connected to nodes 10 (weight: 6), 7 (weight: 8), 9 (weight: 8), 6 (weight: 4), 8 (weight: 8), 12 (weight: 7), 13 (weight: 4), 5 (weight: 4), 2 (weight: 4).\nNode 12 is connected to nodes 10 (weight: 2), 7 (weight: 2), 9 (weight: 9), 4 (weight: 1), 6 (weight: 3), 3 (weight: 5), 0 (weight: 7), 8 (weight: 3), 13 (weight: 6), 11 (weight: 6), 5 (weight: 9), 2 (weight: 7).\nNode 13 is connected to nodes 10 (weight: 8), 7 (weight: 7), 4 (weight: 2), 0 (weight: 4), 12 (weight: 6), 8 (weight: 3), 5 (weight: 6), 2 (weight: 3).\nNode 11 is connected to nodes 10 (weight: 9), 4 (weight: 10), 6 (weight: 8), 3 (weight: 10), 12 (weight: 6), 8 (weight: 9), 1 (weight: 7), 5 (weight: 7), 2 (weight: 4).\nNode 1 is connected to nodes 10 (weight: 1), 4 (weight: 9), 6 (weight: 3), 3 (weight: 7), 11 (weight: 7), 8 (weight: 3), 2 (weight: 2).\nNode 5 is connected to nodes 10 (weight: 6), 7 (weight: 3), 4 (weight: 4), 6 (weight: 8), 0 (weight: 4), 12 (weight: 9), 13 (weight: 6), 11 (weight: 7), 8 (weight: 9).\nNode 8 is connected to nodes 9 (weight: 2), 3 (weight: 10), 0 (weight: 8), 12 (weight: 3), 13 (weight: 3), 11 (weight: 9), 1 (weight: 3), 5 (weight: 9), 2 (weight: 6).\nNode 2 is connected to nodes 6 (weight: 2), 3 (weight: 4), 0 (weight: 4), 12 (weight: 7), 13 (weight: 3), 11 (weight: 4), 1 (weight: 2), 8 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 8 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=8, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 272, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to nodes 13 (weight: 5), 7 (weight: 2), 6 (weight: 5), 12 (weight: 5), 2 (weight: 7).\nNode 13 is connected to nodes 0 (weight: 5), 2 (weight: 7), 8 (weight: 1), 7 (weight: 7).\nNode 7 is connected to nodes 0 (weight: 2), 13 (weight: 7), 12 (weight: 1).\nNode 6 is connected to nodes 0 (weight: 5), 5 (weight: 8), 12 (weight: 8).\nNode 12 is connected to nodes 0 (weight: 5), 7 (weight: 1), 6 (weight: 8), 5 (weight: 6).\nNode 2 is connected to nodes 0 (weight: 7), 13 (weight: 7), 3 (weight: 10), 11 (weight: 3).\nNode 8 is connected to nodes 13 (weight: 1), 3 (weight: 7), 9 (weight: 10).\nNode 5 is connected to nodes 6 (weight: 8), 12 (weight: 6), 4 (weight: 5), 10 (weight: 10).\nNode 3 is connected to nodes 2 (weight: 10), 8 (weight: 7), 1 (weight: 7), 9 (weight: 7).\nNode 11 is connected to nodes 2 (weight: 3), 4 (weight: 6), 14 (weight: 6), 1 (weight: 6), 9 (weight: 4).\nNode 9 is connected to nodes 8 (weight: 10), 10 (weight: 7), 11 (weight: 4), 1 (weight: 6), 3 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 5), 14 (weight: 3), 10 (weight: 8), 11 (weight: 6).\nNode 10 is connected to nodes 5 (weight: 10), 4 (weight: 8), 14 (weight: 9), 9 (weight: 7).\nNode 14 is connected to nodes 4 (weight: 3), 10 (weight: 9), 11 (weight: 6), 1 (weight: 7).\nNode 1 is connected to nodes 14 (weight: 7), 11 (weight: 6), 3 (weight: 7), 9 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=9, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 273, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 13 is connected to node 10 (weight: 9).\nNode 10 is connected to node 9 (weight: 1).\nNode 9 is connected to node 2 (weight: 1).\nNode 8 is connected to nodes 5 (weight: 6), 1 (weight: 6).\nNode 5 is connected to nodes 0 (weight: 2), 2 (weight: 4), 8 (weight: 8).\nNode 1 is connected to nodes 10 (weight: 7), 12 (weight: 1).\nNode 2 is connected to nodes 6 (weight: 7), 4 (weight: 10), 5 (weight: 2).\nNode 12 is connected to nodes 1 (weight: 5), 5 (weight: 3), 0 (weight: 2).\nNode 6 is connected to nodes 1 (weight: 3), 13 (weight: 9), 9 (weight: 2).\nNode 3 is connected to node 8 (weight: 6).\nNode 7 is connected to node 6 (weight: 4).\nNode 11 is connected to nodes 2 (weight: 6), 4 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 7 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=7, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 274, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 7 (weight: 6), 0 (weight: 10), 2 (weight: 9), 6 (weight: 10).\nNode 7 is connected to nodes 1 (weight: 6), 3 (weight: 10), 2 (weight: 5).\nNode 0 is connected to nodes 1 (weight: 10), 4 (weight: 4).\nNode 2 is connected to nodes 1 (weight: 9), 7 (weight: 5), 3 (weight: 6), 4 (weight: 4), 5 (weight: 9), 6 (weight: 2).\nNode 6 is connected to nodes 1 (weight: 10), 2 (weight: 2), 5 (weight: 7).\nNode 3 is connected to nodes 7 (weight: 10), 2 (weight: 6), 4 (weight: 7), 5 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 4), 2 (weight: 4), 3 (weight: 7).\nNode 5 is connected to nodes 2 (weight: 9), 6 (weight: 7), 3 (weight: 9).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=3, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 275, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 0 is connected to node 4 (weight: 8).\nNode 4 is connected to nodes 1 (weight: 10), 3 (weight: 9).\nNode 1 is connected to node 2 (weight: 10).\nNode 3 is connected to nodes 8 (weight: 4), 0 (weight: 8), 6 (weight: 7), 1 (weight: 2).\nNode 7 is connected to nodes 8 (weight: 8), 4 (weight: 6).\nNode 8 is connected to nodes 4 (weight: 2), 5 (weight: 4), 1 (weight: 2), 3 (weight: 10).\nNode 5 is connected to nodes 6 (weight: 3), 3 (weight: 6), 8 (weight: 1).\nNode 2 is connected to nodes 0 (weight: 3), 7 (weight: 5).\nNode 6 is connected to node 0 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming weight is 1 if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 276, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 12 is connected to nodes 11 (weight: 8), 8 (weight: 9), 1 (weight: 8), 7 (weight: 3), 6 (weight: 8), 0 (weight: 10), 9 (weight: 5).\nNode 11 is connected to nodes 8 (weight: 7), 1 (weight: 7), 4 (weight: 5), 7 (weight: 5).\nNode 8 is connected to nodes 3 (weight: 5), 4 (weight: 3).\nNode 1 is connected to nodes 4 (weight: 6), 0 (weight: 2), 9 (weight: 4), 11 (weight: 4).\nNode 7 is connected to nodes 0 (weight: 3), 2 (weight: 3), 8 (weight: 5).\nNode 6 is connected to nodes 0 (weight: 5), 9 (weight: 6), 8 (weight: 6), 10 (weight: 7), 7 (weight: 1).\nNode 0 is connected to nodes 11 (weight: 3), 2 (weight: 2), 8 (weight: 9), 1 (weight: 5), 6 (weight: 2).\nNode 9 is connected to node 7 (weight: 4).\nNode 4 is connected to nodes 6 (weight: 1), 0 (weight: 5), 8 (weight: 1), 10 (weight: 2), 3 (weight: 10), 1 (weight: 10).\nNode 3 is connected to nodes 0 (weight: 9), 12 (weight: 2), 5 (weight: 6), 11 (weight: 1), 2 (weight: 1), 8 (weight: 2), 10 (weight: 7).\nNode 2 is connected to nodes 8 (weight: 8), 10 (weight: 9), 7 (weight: 10), 6 (weight: 2), 0 (weight: 2), 11 (weight: 5).\nNode 10 is connected to nodes 1 (weight: 3), 4 (weight: 6), 7 (weight: 9), 0 (weight: 6), 12 (weight: 4), 8 (weight: 5).\nNode 5 is connected to nodes 11 (weight: 7), 8 (weight: 6), 3 (weight: 2), 6 (weight: 3), 0 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 8\nshortest_path_length = nx.shortest_path_length(G, source=0, target=8, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 277, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 8 is connected to nodes 11 (weight: 3), 3 (weight: 9), 1 (weight: 10).\nNode 11 is connected to nodes 8 (weight: 3), 6 (weight: 7), 2 (weight: 2).\nNode 3 is connected to nodes 8 (weight: 9), 13 (weight: 1), 4 (weight: 5), 10 (weight: 8).\nNode 1 is connected to nodes 8 (weight: 10), 0 (weight: 8).\nNode 6 is connected to nodes 11 (weight: 7), 4 (weight: 6), 2 (weight: 1), 0 (weight: 1).\nNode 2 is connected to nodes 11 (weight: 2), 4 (weight: 5), 7 (weight: 2), 9 (weight: 10), 6 (weight: 1), 0 (weight: 9).\nNode 13 is connected to nodes 3 (weight: 1), 4 (weight: 1), 10 (weight: 3).\nNode 4 is connected to nodes 3 (weight: 5), 13 (weight: 1), 6 (weight: 6), 2 (weight: 5).\nNode 10 is connected to nodes 3 (weight: 8), 13 (weight: 3), 5 (weight: 1).\nNode 0 is connected to nodes 1 (weight: 8), 14 (weight: 8), 2 (weight: 9), 6 (weight: 1).\nNode 5 is connected to nodes 10 (weight: 1), 14 (weight: 10).\nNode 12 is connected to node 7 (weight: 3).\nNode 7 is connected to nodes 12 (weight: 3), 14 (weight: 9), 2 (weight: 2).\nNode 14 is connected to nodes 7 (weight: 9), 5 (weight: 10), 0 (weight: 8).\nNode 9 is connected to node 2 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=12, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 278, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 6 (weight: 7), 7 (weight: 9), 3 (weight: 10), 4 (weight: 4), 2 (weight: 8), 0 (weight: 8), 1 (weight: 4).\nNode 6 is connected to nodes 5 (weight: 7), 7 (weight: 3).\nNode 7 is connected to nodes 5 (weight: 9), 6 (weight: 3), 2 (weight: 9).\nNode 3 is connected to nodes 5 (weight: 10), 2 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 4), 2 (weight: 1).\nNode 2 is connected to nodes 5 (weight: 8), 7 (weight: 9), 3 (weight: 7), 4 (weight: 1), 0 (weight: 7).\nNode 0 is connected to nodes 5 (weight: 8), 2 (weight: 7).\nNode 1 is connected to node 5 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 0 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=0, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 279, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 4 (weight: 4), 0 (weight: 5), 3 (weight: 4), 2 (weight: 4), 6 (weight: 9), 7 (weight: 6), 5 (weight: 10).\nNode 4 is connected to nodes 1 (weight: 4), 6 (weight: 6).\nNode 0 is connected to nodes 1 (weight: 5), 5 (weight: 8), 7 (weight: 1).\nNode 3 is connected to nodes 1 (weight: 4), 7 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 4), 6 (weight: 4).\nNode 6 is connected to nodes 1 (weight: 9), 4 (weight: 6), 2 (weight: 4), 7 (weight: 4).\nNode 7 is connected to nodes 1 (weight: 6), 0 (weight: 1), 3 (weight: 3), 6 (weight: 4), 8 (weight: 1).\nNode 5 is connected to nodes 1 (weight: 10), 0 (weight: 8).\nNode 8 is connected to node 7 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=2, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 280, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 2 (weight: 8), 1 (weight: 6), 7 (weight: 5), 5 (weight: 6), 6 (weight: 7).\nNode 2 is connected to nodes 4 (weight: 8), 1 (weight: 10), 7 (weight: 5), 3 (weight: 5), 6 (weight: 8).\nNode 1 is connected to nodes 4 (weight: 6), 2 (weight: 10), 0 (weight: 9), 7 (weight: 9), 5 (weight: 6), 6 (weight: 9).\nNode 7 is connected to nodes 4 (weight: 5), 2 (weight: 5), 1 (weight: 9), 0 (weight: 10), 5 (weight: 3).\nNode 5 is connected to nodes 4 (weight: 6), 1 (weight: 6), 7 (weight: 3), 3 (weight: 6).\nNode 6 is connected to nodes 4 (weight: 7), 2 (weight: 8), 1 (weight: 9), 0 (weight: 3).\nNode 3 is connected to nodes 2 (weight: 5), 5 (weight: 6).\nNode 0 is connected to nodes 1 (weight: 9), 7 (weight: 10), 6 (weight: 3).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=2, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 281, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 5 (weight: 3), 2 (weight: 8).\nNode 5 is connected to nodes 11 (weight: 2), 7 (weight: 2), 6 (weight: 10).\nNode 2 is connected to nodes 8 (weight: 10), 9 (weight: 8), 5 (weight: 8).\nNode 11 is connected to nodes 7 (weight: 7), 3 (weight: 9), 1 (weight: 1), 9 (weight: 7).\nNode 7 is connected to node 4 (weight: 1).\nNode 8 is connected to nodes 9 (weight: 1), 3 (weight: 9).\nNode 9 is connected to nodes 5 (weight: 4), 10 (weight: 4), 3 (weight: 4), 6 (weight: 5).\nNode 3 is connected to nodes 8 (weight: 10), 5 (weight: 1), 7 (weight: 4), 10 (weight: 1).\nNode 4 is connected to nodes 0 (weight: 9), 5 (weight: 8), 7 (weight: 4), 10 (weight: 8), 3 (weight: 6).\nNode 1 is connected to nodes 4 (weight: 10), 9 (weight: 2), 5 (weight: 1), 11 (weight: 2), 7 (weight: 3).\nNode 0 is connected to nodes 9 (weight: 8), 6 (weight: 7), 4 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 9\nshortest_path_length = nx.shortest_path_length(G, source=3, target=9, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 282, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 3 (weight: 1), 2 (weight: 5), 9 (weight: 2).\nNode 3 is connected to nodes 1 (weight: 1), 12 (weight: 10), 11 (weight: 3), 0 (weight: 5), 8 (weight: 9).\nNode 2 is connected to nodes 1 (weight: 5), 7 (weight: 9), 5 (weight: 7), 9 (weight: 8).\nNode 9 is connected to nodes 1 (weight: 2), 2 (weight: 8), 7 (weight: 9), 4 (weight: 8).\nNode 12 is connected to nodes 3 (weight: 10), 10 (weight: 7), 5 (weight: 8), 13 (weight: 6).\nNode 11 is connected to nodes 3 (weight: 3), 0 (weight: 1), 7 (weight: 8), 8 (weight: 5).\nNode 0 is connected to nodes 3 (weight: 5), 11 (weight: 1), 13 (weight: 3), 7 (weight: 5), 10 (weight: 2).\nNode 8 is connected to nodes 3 (weight: 9), 11 (weight: 5), 5 (weight: 10).\nNode 7 is connected to nodes 2 (weight: 9), 9 (weight: 9), 11 (weight: 8), 0 (weight: 5), 5 (weight: 9).\nNode 5 is connected to nodes 2 (weight: 7), 12 (weight: 8), 8 (weight: 10), 10 (weight: 6), 7 (weight: 9).\nNode 4 is connected to nodes 9 (weight: 8), 10 (weight: 10), 6 (weight: 2).\nNode 10 is connected to nodes 12 (weight: 7), 0 (weight: 2), 6 (weight: 4), 5 (weight: 6), 4 (weight: 10).\nNode 13 is connected to nodes 12 (weight: 6), 0 (weight: 3), 6 (weight: 2).\nNode 6 is connected to nodes 10 (weight: 4), 13 (weight: 2), 4 (weight: 2).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 0\nshortest_path_length = nx.shortest_path_length(G, source=11, target=0, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 283, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 6 (weight: 4), 4 (weight: 6), 5 (weight: 5), 0 (weight: 6), 3 (weight: 3), 1 (weight: 3), 2 (weight: 3), 8 (weight: 9), 9 (weight: 5).\nNode 6 is connected to nodes 7 (weight: 4), 10 (weight: 9), 5 (weight: 8), 0 (weight: 9), 1 (weight: 10), 2 (weight: 9), 8 (weight: 6), 9 (weight: 8).\nNode 4 is connected to nodes 7 (weight: 6), 10 (weight: 2), 5 (weight: 10), 0 (weight: 3), 3 (weight: 10), 1 (weight: 3), 2 (weight: 1), 9 (weight: 8).\nNode 5 is connected to nodes 7 (weight: 5), 6 (weight: 8), 4 (weight: 10), 0 (weight: 9), 3 (weight: 8), 2 (weight: 10), 9 (weight: 4).\nNode 0 is connected to nodes 7 (weight: 6), 6 (weight: 9), 4 (weight: 3), 5 (weight: 9), 10 (weight: 3), 3 (weight: 7), 2 (weight: 4), 8 (weight: 5).\nNode 3 is connected to nodes 7 (weight: 3), 4 (weight: 10), 5 (weight: 8), 0 (weight: 7), 10 (weight: 7), 1 (weight: 8), 2 (weight: 2), 8 (weight: 5), 9 (weight: 5).\nNode 1 is connected to nodes 7 (weight: 3), 6 (weight: 10), 4 (weight: 3), 3 (weight: 8), 9 (weight: 3).\nNode 2 is connected to nodes 7 (weight: 3), 6 (weight: 9), 4 (weight: 1), 5 (weight: 10), 0 (weight: 4), 3 (weight: 2), 10 (weight: 2).\nNode 8 is connected to nodes 7 (weight: 9), 6 (weight: 6), 0 (weight: 5), 3 (weight: 5), 10 (weight: 1), 9 (weight: 7).\nNode 9 is connected to nodes 7 (weight: 5), 6 (weight: 8), 4 (weight: 8), 5 (weight: 4), 3 (weight: 5), 1 (weight: 3), 8 (weight: 7), 10 (weight: 5).\nNode 10 is connected to nodes 6 (weight: 9), 4 (weight: 2), 0 (weight: 3), 3 (weight: 7), 2 (weight: 2), 8 (weight: 1), 9 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=9, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 284, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to node 6 (weight: 7).\nNode 6 is connected to nodes 5 (weight: 7), 1 (weight: 5), 2 (weight: 1), 8 (weight: 5).\nNode 1 is connected to node 6 (weight: 5).\nNode 2 is connected to nodes 6 (weight: 1), 9 (weight: 3), 3 (weight: 2).\nNode 8 is connected to nodes 6 (weight: 5), 0 (weight: 8).\nNode 9 is connected to nodes 2 (weight: 3), 7 (weight: 1).\nNode 3 is connected to nodes 2 (weight: 2), 0 (weight: 6).\nNode 0 is connected to nodes 8 (weight: 8), 3 (weight: 6).\nNode 7 is connected to nodes 9 (weight: 1), 4 (weight: 4).\nNode 4 is connected to node 7 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+\\()).'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.strip().strip('()').split(', '))\n    for neighbor in neighbors:\n        weight = 1  # Assuming default weight if not specified\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate the length of the shortest path from node 8 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=8, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 285, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 9 (weight: 8), 6 (weight: 6), 5 (weight: 1), 0 (weight: 10), 1 (weight: 8).\nNode 9 is connected to nodes 6 (weight: 5), 5 (weight: 7), 3 (weight: 4), 1 (weight: 9).\nNode 6 is connected to nodes 4 (weight: 7), 8 (weight: 9).\nNode 5 is connected to nodes 3 (weight: 8), 2 (weight: 6), 7 (weight: 6), 9 (weight: 8).\nNode 0 is connected to nodes 1 (weight: 9), 4 (weight: 8), 8 (weight: 4), 7 (weight: 10), 3 (weight: 1).\nNode 1 is connected to nodes 3 (weight: 3), 0 (weight: 9), 2 (weight: 4).\nNode 3 is connected to nodes 0 (weight: 8), 1 (weight: 2), 4 (weight: 4).\nNode 8 is connected to node 3 (weight: 9).\nNode 2 is connected to nodes 1 (weight: 1), 4 (weight: 6), 5 (weight: 5), 0 (weight: 9).\nNode 7 is connected to nodes 6 (weight: 9), 3 (weight: 7), 2 (weight: 7), 4 (weight: 1), 8 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=9, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 286, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 9 (weight: 5), 7 (weight: 10), 6 (weight: 9), 4 (weight: 1), 8 (weight: 6), 1 (weight: 8).\nNode 9 is connected to nodes 5 (weight: 5), 3 (weight: 9).\nNode 7 is connected to nodes 5 (weight: 10), 3 (weight: 4).\nNode 6 is connected to nodes 5 (weight: 9), 0 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 1), 3 (weight: 9), 2 (weight: 1), 0 (weight: 1), 8 (weight: 4), 1 (weight: 2).\nNode 8 is connected to nodes 5 (weight: 6), 4 (weight: 4).\nNode 1 is connected to nodes 5 (weight: 8), 4 (weight: 2).\nNode 3 is connected to nodes 9 (weight: 9), 7 (weight: 4), 4 (weight: 9), 2 (weight: 5), 0 (weight: 10).\nNode 0 is connected to nodes 6 (weight: 7), 4 (weight: 1), 3 (weight: 10).\nNode 2 is connected to nodes 4 (weight: 1), 3 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=6, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 287, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 2 is connected to nodes 4 (weight: 9), 3 (weight: 9).\nNode 4 is connected to nodes 2 (weight: 9), 5 (weight: 3).\nNode 3 is connected to node 2 (weight: 9).\nNode 5 is connected to nodes 4 (weight: 3), 0 (weight: 2), 1 (weight: 8).\nNode 0 is connected to nodes 5 (weight: 2), 6 (weight: 3).\nNode 1 is connected to nodes 5 (weight: 8), 7 (weight: 5).\nNode 6 is connected to nodes 0 (weight: 3), 7 (weight: 4).\nNode 7 is connected to nodes 6 (weight: 4), 1 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 7\nshortest_path_length = nx.shortest_path_length(G, source=2, target=7, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 288, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 2 (weight: 8), 13 (weight: 2).\nNode 2 is connected to nodes 7 (weight: 3), 0 (weight: 7), 5 (weight: 8), 8 (weight: 7).\nNode 13 is connected to nodes 7 (weight: 9), 0 (weight: 2).\nNode 7 is connected to nodes 0 (weight: 6), 11 (weight: 6), 10 (weight: 3), 9 (weight: 10).\nNode 0 is connected to nodes 8 (weight: 3), 9 (weight: 4), 13 (weight: 6).\nNode 5 is connected to nodes 12 (weight: 1), 0 (weight: 4), 6 (weight: 10).\nNode 8 is connected to nodes 9 (weight: 5), 7 (weight: 10), 6 (weight: 4), 5 (weight: 5).\nNode 12 is connected to nodes 1 (weight: 10), 8 (weight: 9), 2 (weight: 10).\nNode 6 is connected to nodes 5 (weight: 5), 12 (weight: 4), 0 (weight: 7).\nNode 11 is connected to nodes 1 (weight: 1), 2 (weight: 8), 4 (weight: 3), 3 (weight: 7), 7 (weight: 10).\nNode 10 is connected to nodes 5 (weight: 6), 8 (weight: 9).\nNode 4 is connected to nodes 0 (weight: 8), 14 (weight: 7), 5 (weight: 2), 2 (weight: 5).\nNode 14 is connected to nodes 2 (weight: 8), 4 (weight: 10), 12 (weight: 4), 3 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 4 to node 12\nshortest_path_length = nx.shortest_path_length(G, source=4, target=12, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 289, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 8 (weight: 5), 4 (weight: 8), 0 (weight: 9), 12 (weight: 3), 9 (weight: 1).\nNode 8 is connected to nodes 1 (weight: 5), 0 (weight: 5), 5 (weight: 10).\nNode 4 is connected to nodes 1 (weight: 8), 12 (weight: 5), 13 (weight: 1).\nNode 0 is connected to nodes 1 (weight: 9), 8 (weight: 5), 6 (weight: 8), 5 (weight: 1).\nNode 12 is connected to nodes 1 (weight: 3), 4 (weight: 5), 7 (weight: 5), 13 (weight: 1).\nNode 9 is connected to nodes 1 (weight: 1), 3 (weight: 6), 10 (weight: 6).\nNode 5 is connected to nodes 8 (weight: 10), 0 (weight: 1), 3 (weight: 7), 6 (weight: 3).\nNode 13 is connected to nodes 4 (weight: 1), 12 (weight: 1), 7 (weight: 8), 11 (weight: 2), 2 (weight: 1).\nNode 6 is connected to nodes 0 (weight: 8), 5 (weight: 3), 3 (weight: 1), 10 (weight: 8).\nNode 7 is connected to nodes 12 (weight: 5), 13 (weight: 8), 3 (weight: 1), 10 (weight: 6), 11 (weight: 7).\nNode 3 is connected to nodes 9 (weight: 6), 5 (weight: 7), 6 (weight: 1), 7 (weight: 1), 10 (weight: 2).\nNode 10 is connected to nodes 9 (weight: 6), 6 (weight: 8), 7 (weight: 6), 3 (weight: 2), 2 (weight: 4).\nNode 11 is connected to nodes 13 (weight: 2), 7 (weight: 7), 2 (weight: 6).\nNode 2 is connected to nodes 13 (weight: 1), 10 (weight: 4), 11 (weight: 6).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=9, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 290, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 6 is connected to nodes 3 (weight: 7), 8 (weight: 2), 4 (weight: 9), 7 (weight: 2), 10 (weight: 8).\nNode 3 is connected to nodes 8 (weight: 8), 6 (weight: 1).\nNode 8 is connected to nodes 1 (weight: 7), 7 (weight: 7).\nNode 4 is connected to node 10 (weight: 3).\nNode 7 is connected to nodes 6 (weight: 9), 3 (weight: 3), 8 (weight: 5), 9 (weight: 6), 4 (weight: 6).\nNode 10 is connected to nodes 5 (weight: 7), 1 (weight: 7), 7 (weight: 6).\nNode 1 is connected to nodes 6 (weight: 8), 9 (weight: 7), 0 (weight: 4).\nNode 9 is connected to nodes 4 (weight: 5), 6 (weight: 8), 8 (weight: 5).\nNode 5 is connected to nodes 3 (weight: 3), 0 (weight: 9).\nNode 0 is connected to nodes 8 (weight: 10), 9 (weight: 6).\nNode 2 is connected to node 6 (weight: 5).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 1\nshortest_path_length = nx.shortest_path_length(G, source=2, target=1, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 291, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 5 is connected to nodes 1 (weight: 2), 9 (weight: 1), 7 (weight: 5), 0 (weight: 2), 8 (weight: 4), 6 (weight: 10), 3 (weight: 9), 10 (weight: 9), 11 (weight: 7), 2 (weight: 8).\nNode 1 is connected to nodes 5 (weight: 2), 3 (weight: 1), 0 (weight: 2), 7 (weight: 3), 4 (weight: 3), 10 (weight: 6), 8 (weight: 7).\nNode 9 is connected to nodes 5 (weight: 1), 7 (weight: 9), 2 (weight: 5).\nNode 7 is connected to nodes 5 (weight: 5), 1 (weight: 3), 9 (weight: 9), 10 (weight: 3), 2 (weight: 9), 6 (weight: 1).\nNode 0 is connected to nodes 5 (weight: 2), 1 (weight: 2), 10 (weight: 3).\nNode 8 is connected to nodes 5 (weight: 4), 1 (weight: 7), 10 (weight: 6).\nNode 6 is connected to nodes 5 (weight: 10), 7 (weight: 1), 10 (weight: 8), 3 (weight: 1), 4 (weight: 8).\nNode 3 is connected to nodes 5 (weight: 9), 1 (weight: 1), 6 (weight: 1), 4 (weight: 10).\nNode 10 is connected to nodes 5 (weight: 9), 1 (weight: 6), 7 (weight: 3), 0 (weight: 3), 8 (weight: 6), 6 (weight: 8).\nNode 11 is connected to node 5 (weight: 7).\nNode 2 is connected to nodes 5 (weight: 8), 9 (weight: 5), 7 (weight: 9).\nNode 4 is connected to nodes 1 (weight: 3), 6 (weight: 8), 3 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 3 to node 6\nshortest_path_length = nx.shortest_path_length(G, source=3, target=6, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 292, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 10 is connected to nodes 7 (weight: 1), 5 (weight: 10).\nNode 7 is connected to node 10 (weight: 1).\nNode 5 is connected to nodes 10 (weight: 10), 3 (weight: 5), 0 (weight: 2), 6 (weight: 2), 9 (weight: 10).\nNode 3 is connected to nodes 5 (weight: 5), 2 (weight: 10), 1 (weight: 5).\nNode 0 is connected to node 5 (weight: 2).\nNode 6 is connected to node 5 (weight: 2).\nNode 9 is connected to node 5 (weight: 10).\nNode 2 is connected to nodes 3 (weight: 10), 4 (weight: 10), 8 (weight: 4).\nNode 1 is connected to node 3 (weight: 5).\nNode 4 is connected to node 2 (weight: 10).\nNode 8 is connected to node 2 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=7, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 293, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 11 is connected to nodes 13 (weight: 4), 10 (weight: 5), 2 (weight: 4), 5 (weight: 7), 4 (weight: 10), 0 (weight: 10), 6 (weight: 5), 8 (weight: 10).\nNode 13 is connected to nodes 11 (weight: 4), 12 (weight: 1), 10 (weight: 3), 5 (weight: 7), 4 (weight: 10), 0 (weight: 5), 8 (weight: 10), 7 (weight: 9).\nNode 10 is connected to nodes 11 (weight: 5), 13 (weight: 3), 12 (weight: 10), 2 (weight: 7), 1 (weight: 2), 5 (weight: 1), 4 (weight: 5), 0 (weight: 6), 6 (weight: 8), 7 (weight: 4).\nNode 2 is connected to nodes 11 (weight: 4), 10 (weight: 7), 1 (weight: 10), 5 (weight: 8), 4 (weight: 2), 9 (weight: 10), 0 (weight: 8), 3 (weight: 8).\nNode 5 is connected to nodes 11 (weight: 7), 13 (weight: 7), 10 (weight: 1), 2 (weight: 8), 12 (weight: 7), 1 (weight: 5), 4 (weight: 7), 9 (weight: 10), 0 (weight: 4), 6 (weight: 7), 8 (weight: 3).\nNode 4 is connected to nodes 11 (weight: 10), 13 (weight: 10), 10 (weight: 5), 2 (weight: 2), 5 (weight: 7), 1 (weight: 1), 9 (weight: 7), 0 (weight: 6), 8 (weight: 8), 3 (weight: 3), 7 (weight: 8).\nNode 0 is connected to nodes 11 (weight: 10), 13 (weight: 5), 10 (weight: 6), 2 (weight: 8), 5 (weight: 4), 4 (weight: 6), 12 (weight: 6), 1 (weight: 6), 9 (weight: 1), 8 (weight: 9), 3 (weight: 1), 7 (weight: 5).\nNode 6 is connected to nodes 11 (weight: 5), 10 (weight: 8), 5 (weight: 7), 12 (weight: 7), 1 (weight: 3), 3 (weight: 10), 7 (weight: 3).\nNode 8 is connected to nodes 11 (weight: 10), 13 (weight: 10), 5 (weight: 3), 4 (weight: 8), 0 (weight: 9), 1 (weight: 5), 3 (weight: 8), 7 (weight: 5).\nNode 12 is connected to nodes 13 (weight: 1), 10 (weight: 10), 5 (weight: 7), 0 (weight: 6), 6 (weight: 7), 1 (weight: 7), 3 (weight: 6).\nNode 7 is connected to nodes 13 (weight: 9), 10 (weight: 4), 4 (weight: 8), 0 (weight: 5), 6 (weight: 3), 8 (weight: 5), 1 (weight: 1), 9 (weight: 10).\nNode 1 is connected to nodes 10 (weight: 2), 2 (weight: 10), 5 (weight: 5), 4 (weight: 1), 0 (weight: 6), 6 (weight: 3), 8 (weight: 5), 12 (weight: 7), 3 (weight: 10), 7 (weight: 1).\nNode 9 is connected to nodes 2 (weight: 10), 5 (weight: 10), 4 (weight: 7), 0 (weight: 1), 7 (weight: 10).\nNode 3 is connected to nodes 2 (weight: 8), 4 (weight: 3), 0 (weight: 1), 6 (weight: 10), 8 (weight: 8), 12 (weight: 6), 1 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 2 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=2, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 294, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 4 (weight: 8), 8 (weight: 9), 6 (weight: 2), 7 (weight: 6), 9 (weight: 3), 3 (weight: 5).\nNode 4 is connected to nodes 6 (weight: 7), 0 (weight: 9), 9 (weight: 10), 3 (weight: 2).\nNode 8 is connected to nodes 5 (weight: 10), 6 (weight: 3), 0 (weight: 2), 3 (weight: 7), 2 (weight: 6).\nNode 6 is connected to nodes 10 (weight: 3), 11 (weight: 9), 1 (weight: 8), 4 (weight: 6), 5 (weight: 2).\nNode 7 is connected to nodes 11 (weight: 1), 3 (weight: 4), 4 (weight: 9), 8 (weight: 8), 10 (weight: 6).\nNode 9 is connected to nodes 3 (weight: 10), 8 (weight: 9), 10 (weight: 2), 7 (weight: 2).\nNode 3 is connected to nodes 5 (weight: 1), 0 (weight: 2), 9 (weight: 9).\nNode 0 is connected to nodes 7 (weight: 1), 11 (weight: 10), 3 (weight: 3), 6 (weight: 9).\nNode 5 is connected to nodes 0 (weight: 8), 7 (weight: 1), 11 (weight: 7), 4 (weight: 3).\nNode 2 is connected to nodes 1 (weight: 9), 4 (weight: 8), 8 (weight: 3), 5 (weight: 2), 0 (weight: 4), 7 (weight: 10), 11 (weight: 4), 9 (weight: 8), 3 (weight: 2).\nNode 10 is connected to node 0 (weight: 10).\nNode 11 is connected to nodes 3 (weight: 2), 8 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 11 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=11, target=4, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 295, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 4 is connected to nodes 6 (weight: 2), 2 (weight: 8).\nNode 6 is connected to nodes 4 (weight: 2), 1 (weight: 3).\nNode 2 is connected to nodes 4 (weight: 8), 5 (weight: 8).\nNode 1 is connected to nodes 6 (weight: 3), 3 (weight: 1).\nNode 5 is connected to nodes 2 (weight: 8), 7 (weight: 7).\nNode 3 is connected to nodes 1 (weight: 1), 0 (weight: 6).\nNode 0 is connected to nodes 3 (weight: 6), 7 (weight: 9).\nNode 7 is connected to nodes 0 (weight: 9), 5 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 7 to node 3\nshortest_path_length = nx.shortest_path_length(G, source=7, target=3, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 296, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 8 (weight: 6), 5 (weight: 7), 2 (weight: 3), 6 (weight: 7), 7 (weight: 3), 3 (weight: 4), 0 (weight: 7).\nNode 8 is connected to nodes 1 (weight: 6), 5 (weight: 2), 2 (weight: 2), 6 (weight: 3), 7 (weight: 7), 0 (weight: 4), 9 (weight: 10).\nNode 5 is connected to nodes 1 (weight: 7), 8 (weight: 2), 7 (weight: 1), 4 (weight: 6), 3 (weight: 3), 9 (weight: 7).\nNode 2 is connected to nodes 1 (weight: 3), 8 (weight: 2), 6 (weight: 8), 7 (weight: 5), 4 (weight: 2), 3 (weight: 9), 9 (weight: 6).\nNode 6 is connected to nodes 1 (weight: 7), 8 (weight: 3), 2 (weight: 8), 7 (weight: 4), 3 (weight: 10), 0 (weight: 8).\nNode 7 is connected to nodes 1 (weight: 3), 8 (weight: 7), 5 (weight: 1), 2 (weight: 5), 6 (weight: 4), 3 (weight: 4), 0 (weight: 9), 9 (weight: 6).\nNode 3 is connected to nodes 1 (weight: 4), 5 (weight: 3), 2 (weight: 9), 6 (weight: 10), 7 (weight: 4), 4 (weight: 6).\nNode 0 is connected to nodes 1 (weight: 7), 8 (weight: 4), 6 (weight: 8), 7 (weight: 9), 4 (weight: 6), 9 (weight: 7).\nNode 9 is connected to nodes 8 (weight: 10), 5 (weight: 7), 2 (weight: 6), 7 (weight: 6), 0 (weight: 7), 4 (weight: 7).\nNode 4 is connected to nodes 5 (weight: 6), 2 (weight: 2), 3 (weight: 6), 0 (weight: 6), 9 (weight: 7).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 6 to node 2\nshortest_path_length = nx.shortest_path_length(G, source=6, target=2, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 297, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 7 is connected to nodes 1 (weight: 7), 11 (weight: 3), 3 (weight: 6), 14 (weight: 10), 0 (weight: 7).\nNode 1 is connected to nodes 7 (weight: 7), 3 (weight: 3), 0 (weight: 3), 4 (weight: 8), 5 (weight: 2).\nNode 11 is connected to nodes 7 (weight: 3), 8 (weight: 8), 3 (weight: 4), 10 (weight: 9), 2 (weight: 3), 14 (weight: 1), 0 (weight: 5).\nNode 3 is connected to nodes 7 (weight: 6), 1 (weight: 3), 11 (weight: 4), 10 (weight: 6), 2 (weight: 8), 12 (weight: 3), 0 (weight: 10), 9 (weight: 8).\nNode 14 is connected to nodes 7 (weight: 10), 11 (weight: 1), 8 (weight: 5), 13 (weight: 9), 10 (weight: 2), 2 (weight: 5), 12 (weight: 6), 0 (weight: 1), 4 (weight: 3).\nNode 0 is connected to nodes 7 (weight: 7), 1 (weight: 3), 11 (weight: 5), 3 (weight: 10), 14 (weight: 1), 8 (weight: 10), 6 (weight: 3), 10 (weight: 8), 12 (weight: 1), 9 (weight: 5), 5 (weight: 4).\nNode 4 is connected to nodes 1 (weight: 8), 14 (weight: 3), 8 (weight: 3), 13 (weight: 4), 6 (weight: 6), 10 (weight: 10), 12 (weight: 3).\nNode 5 is connected to nodes 1 (weight: 2), 0 (weight: 4), 8 (weight: 9), 13 (weight: 10), 12 (weight: 4).\nNode 8 is connected to nodes 11 (weight: 8), 14 (weight: 5), 0 (weight: 10), 4 (weight: 3), 5 (weight: 9), 13 (weight: 2), 6 (weight: 4), 10 (weight: 1), 2 (weight: 1).\nNode 10 is connected to nodes 11 (weight: 9), 3 (weight: 6), 14 (weight: 2), 0 (weight: 8), 4 (weight: 10), 8 (weight: 1), 12 (weight: 3).\nNode 2 is connected to nodes 11 (weight: 3), 3 (weight: 8), 14 (weight: 5), 8 (weight: 1), 12 (weight: 10), 9 (weight: 5).\nNode 12 is connected to nodes 3 (weight: 3), 14 (weight: 6), 0 (weight: 1), 4 (weight: 3), 5 (weight: 4), 13 (weight: 9), 10 (weight: 3), 2 (weight: 10), 9 (weight: 1).\nNode 9 is connected to nodes 3 (weight: 8), 0 (weight: 5), 13 (weight: 3), 2 (weight: 5), 12 (weight: 1).\nNode 13 is connected to nodes 14 (weight: 9), 4 (weight: 4), 5 (weight: 10), 8 (weight: 2), 12 (weight: 9), 9 (weight: 3).\nNode 6 is connected to nodes 0 (weight: 3), 4 (weight: 6), 8 (weight: 4).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 12 to node 11\nshortest_path_length = nx.shortest_path_length(G, source=12, target=11, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 298, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"\"\"Node 4 is connected to nodes 7 (weight: 8), 5 (weight: 9).\nNode 7 is connected to nodes 9 (weight: 10), 0 (weight: 6).\nNode 5 is connected to nodes 8 (weight: 9), 3 (weight: 3).\nNode 9 is connected to nodes 5 (weight: 10), 0 (weight: 1), 8 (weight: 5), 1 (weight: 9), 2 (weight: 9).\nNode 0 is connected to nodes 8 (weight: 3), 7 (weight: 1), 9 (weight: 5), 3 (weight: 8), 6 (weight: 5).\nNode 8 is connected to nodes 2 (weight: 7), 3 (weight: 1), 0 (weight: 1).\nNode 3 is connected to nodes 5 (weight: 9), 4 (weight: 1), 9 (weight: 3).\nNode 6 is connected to nodes 5 (weight: 10), 2 (weight: 8), 9 (weight: 3).\nNode 2 is connected to nodes 4 (weight: 8), 0 (weight: 4).\nNode 1 is connected to nodes 2 (weight: 6), 4 (weight: 10), 8 (weight: 1).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 9 to node 5\nshortest_path_length = nx.shortest_path_length(G, source=9, target=5, weight='weight')\nprint(shortest_path_length)\n```"}, {"id": 299, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"Node 1 is connected to nodes 0 (weight: 10), 2 (weight: 7), 10 (weight: 10), 9 (weight: 2), 5 (weight: 8), 7 (weight: 7), 8 (weight: 10), 3 (weight: 2).\nNode 0 is connected to node 1 (weight: 10).\nNode 2 is connected to node 1 (weight: 7).\nNode 10 is connected to node 1 (weight: 10).\nNode 9 is connected to node 1 (weight: 2).\nNode 5 is connected to node 1 (weight: 8).\nNode 7 is connected to node 1 (weight: 7).\nNode 8 is connected to nodes 1 (weight: 10), 6 (weight: 1).\nNode 3 is connected to node 1 (weight: 2).\nNode 6 is connected to nodes 8 (weight: 1), 4 (weight: 10).\nNode 4 is connected to node 6 (weight: 10).\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ()weight:]+)\\.'\nmatches = re.findall(pattern, graph)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges with weights to the graph\nfor node, connections in matches:\n    node = int(node)\n    edges = re.findall(r'(\\d+) \\(weight: (\\d+)\\)', connections)\n    for neighbor, weight in edges:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate the length of the shortest path from node 10 to node 4\nshortest_path_length = nx.shortest_path_length(G, source=10, target=4, weight='weight')\nprint(shortest_path_length)\n```"}]