[{"id": 0, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 10, and the edges are: an edge from node 0 to node 10 with capacity 1, an edge from node 3 to node 0 with capacity 17, an edge from node 3 to node 2 with capacity 15, an edge from node 4 to node 0 with capacity 13, an edge from node 4 to node 2 with capacity 14, an edge from node 5 to node 1 with capacity 7, an edge from node 5 to node 4 with capacity 16, an edge from node 6 to node 7 with capacity 19, an edge from node 6 to node 10 with capacity 3, an edge from node 6 to node 1 with capacity 18, an edge from node 6 to node 8 with capacity 10, an edge from node 7 to node 8 with capacity 4, an edge from node 7 to node 3 with capacity 15, an edge from node 8 to node 7 with capacity 18, an edge from node 8 to node 0 with capacity 7, an edge from node 8 to node 4 with capacity 19, an edge from node 8 to node 2 with capacity 14, an edge from node 9 to node 1 with capacity 8, an edge from node 9 to node 8 with capacity 12, an edge from node 9 to node 4 with capacity 7, an edge from node 10 to node 8 with capacity 9, an edge from node 10 to node 6 with capacity 1, an edge from node 10 to node 5 with capacity 18.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 1, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 8 with capacity 9,\nan edge from node 0 to node 6 with capacity 8,\nan edge from node 0 to node 5 with capacity 1,\nan edge from node 1 to node 11 with capacity 12,\nan edge from node 3 to node 5 with capacity 6,\nan edge from node 3 to node 0 with capacity 17,\nan edge from node 4 to node 11 with capacity 7,\nan edge from node 4 to node 8 with capacity 17,\nan edge from node 4 to node 9 with capacity 4,\nan edge from node 5 to node 11 with capacity 19,\nan edge from node 6 to node 7 with capacity 11,\nan edge from node 6 to node 10 with capacity 15,\nan edge from node 6 to node 1 with capacity 12,\nan edge from node 6 to node 0 with capacity 3,\nan edge from node 7 to node 3 with capacity 3,\nan edge from node 7 to node 0 with capacity 12,\nan edge from node 9 to node 2 with capacity 7,\nan edge from node 9 to node 1 with capacity 19,\nan edge from node 10 to node 5 with capacity 4,\nan edge from node 10 to node 9 with capacity 13,\nan edge from node 10 to node 1 with capacity 12,\nan edge from node 10 to node 3 with capacity 2,\nan edge from node 11 to node 10 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 11\nflow_value, flow_dict = nx.maximum_flow(G, 10, 11, capacity='weight')\nprint(flow_value)\n```"}, {"id": 2, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 6 with capacity 3, an edge from node 0 to node 1 with capacity 4, an edge from node 0 to node 4 with capacity 7, an edge from node 0 to node 5 with capacity 2, an edge from node 1 to node 6 with capacity 8, an edge from node 1 to node 0 with capacity 6, an edge from node 1 to node 4 with capacity 9, an edge from node 2 to node 6 with capacity 7, an edge from node 2 to node 0 with capacity 5, an edge from node 2 to node 3 with capacity 5, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 5 with capacity 1, an edge from node 4 to node 6 with capacity 7, an edge from node 4 to node 3 with capacity 6, an edge from node 5 to node 0 with capacity 9, an edge from node 5 to node 1 with capacity 6, an edge from node 5 to node 4 with capacity 2, an edge from node 6 to node 0 with capacity 10, an edge from node 6 to node 3 with capacity 7, an edge from node 6 to node 2 with capacity 2, an edge from node 6 to node 1 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 3, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(7, weight:20), (10, weight:7), (17, weight:4), (5, weight:12)],\nnode1: [(2, weight:14), (12, weight:12), (10, weight:2)],\nnode2: [(7, weight:3), (4, weight:1), (14, weight:16), (16, weight:11), (9, weight:11)],\nnode3: [(13, weight:19), (1, weight:9), (12, weight:19), (0, weight:4)],\nnode4: [(13, weight:18), (8, weight:5), (17, weight:11), (15, weight:20), (5, weight:17)],\nnode5: [(11, weight:9), (16, weight:5), (9, weight:18)],\nnode6: [(2, weight:11), (4, weight:2), (0, weight:5), (10, weight:20), (14, weight:10)],\nnode7: [(13, weight:5), (1, weight:9), (2, weight:1), (3, weight:12), (9, weight:3)],\nnode8: [(7, weight:13), (2, weight:2), (11, weight:15), (6, weight:15), (9, weight:13), (5, weight:20)],\nnode9: [(7, weight:10), (1, weight:1), (6, weight:1), (14, weight:9), (16, weight:6)],\nnode10: [(13, weight:8), (1, weight:14), (11, weight:9), (15, weight:11)],\nnode11: [(7, weight:20), (12, weight:20)],\nnode12: [(13, weight:16), (3, weight:14), (6, weight:15)],\nnode13: [(0, weight:9), (17, weight:5), (9, weight:2)],\nnode14: [(1, weight:4), (8, weight:5), (5, weight:17)],\nnode15: [(1, weight:4), (0, weight:9), (10, weight:2)],\nnode16: [(7, weight:6), (1, weight:18), (3, weight:5), (17, weight:7), (5, weight:4)],\nnode17: [(13, weight:5), (7, weight:7), (2, weight:7), (12, weight:6)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 4, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(1, weight:19), (8, weight:13), (7, weight:1), (2, weight:19)],\nnode1: [(9, weight:5), (14, weight:5), (5, weight:17)],\nnode2: [(7, weight:19), (0, weight:12), (4, weight:5)],\nnode3: [(10, weight:11), (6, weight:17), (16, weight:18)],\nnode4: [(1, weight:3), (3, weight:17), (9, weight:14), (0, weight:1), (11, weight:4), (5, weight:12)],\nnode5: [(8, weight:13), (10, weight:5), (13, weight:1)],\nnode6: [(0, weight:13)],\nnode7: [(1, weight:17)],\nnode8: [(1, weight:17), (15, weight:6), (14, weight:17), (13, weight:10), (16, weight:5), (4, weight:8)],\nnode9: [(7, weight:11), (14, weight:11), (12, weight:4), (0, weight:12), (4, weight:6)],\nnode10: [(1, weight:18)],\nnode11: [(1, weight:6), (3, weight:18), (8, weight:13), (12, weight:14), (16, weight:6), (4, weight:10), (5, weight:13)],\nnode12: [(7, weight:14), (10, weight:9), (16, weight:1), (4, weight:1)],\nnode13: [(8, weight:2), (9, weight:5), (15, weight:19), (6, weight:5), (5, weight:5)],\nnode14: [(10, weight:6), (11, weight:6), (5, weight:9)],\nnode15: [(7, weight:19), (11, weight:9)],\nnode16: [(1, weight:7), (7, weight:14), (9, weight:4), (10, weight:19), (2, weight:12), (5, weight:20)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 7, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 5, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 6 with capacity 5, an edge from node 0 to node 3 with capacity 7, an edge from node 1 to node 7 with capacity 7, an edge from node 1 to node 2 with capacity 3, an edge from node 2 to node 7 with capacity 7, an edge from node 2 to node 4 with capacity 5, an edge from node 3 to node 5 with capacity 7, an edge from node 3 to node 1 with capacity 8, an edge from node 4 to node 0 with capacity 3, an edge from node 5 to node 7 with capacity 5, an edge from node 6 to node 5 with capacity 6, an edge from node 6 to node 7 with capacity 6, an edge from node 6 to node 0 with capacity 9, an edge from node 7 to node 4 with capacity 4, an edge from node 7 to node 1 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 6, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [node18 (weight:16), node11 (weight:10)],\nnode1: [node12 (weight:3), node4 (weight:1), node8 (weight:18)],\nnode2: [node9 (weight:9), node16 (weight:15), node17 (weight:2), node4 (weight:5)],\nnode3: [node18 (weight:1), node10 (weight:15), node6 (weight:12), node0 (weight:10)],\nnode4: [node11 (weight:15), node0 (weight:11), node7 (weight:20)],\nnode5: [node15 (weight:2), node12 (weight:13)],\nnode6: [node16 (weight:13), node17 (weight:17), node18 (weight:9), node14 (weight:11), node13 (weight:13), node0 (weight:19), node3 (weight:6)],\nnode7: [node17 (weight:9), node18 (weight:19), node12 (weight:20)],\nnode8: [node15 (weight:10), node12 (weight:1), node4 (weight:12), node3 (weight:1)],\nnode9: [node6 (weight:6), node0 (weight:1), node4 (weight:4), node8 (weight:11), node3 (weight:16)],\nnode10: [node6 (weight:6), node11 (weight:5), node13 (weight:17), node3 (weight:13)],\nnode11: [node10 (weight:11), node6 (weight:20), node12 (weight:3)],\nnode12: [node6 (weight:16)],\nnode13: [node2 (weight:16), node17 (weight:7), node18 (weight:4), node10 (weight:13), node5 (weight:4), node12 (weight:1)],\nnode14: [node2 (weight:2), node9 (weight:3), node17 (weight:6), node18 (weight:10), node5 (weight:16), node4 (weight:10)],\nnode15: [node18 (weight:1), node10 (weight:1), node5 (weight:4), node14 (weight:18), node13 (weight:3)],\nnode16: [node2 (weight:17), node9 (weight:7), node14 (weight:3), node13 (weight:3), node12 (weight:20)],\nnode17: [node9 (weight:4), node4 (weight:1), node3 (weight:2)],\nnode18: [node9 (weight:19), node16 (weight:17), node17 (weight:6), node14 (weight:9)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[([^\\]]*)\\]'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = [int(neighbor.strip('()').split(' (weight:') for neighbor in neighbors.strip('[]').split(', '))]\n    for neighbor, weight in neighbors:\n        G.add_edge(node, neighbor, weight=int(weight))\n\n# Calculate maximum flow from node 18 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 18, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 7, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, weight:9), (7, weight:17), (14, weight:15), (5, weight:17)],\nnode1: [(15, weight:10), (10, weight:16), (6, weight:11), (12, weight:7)],\nnode2: [(10, weight:17), (11, weight:20), (5, weight:6)],\nnode3: [(1, weight:18), (2, weight:1), (0, weight:4), (11, weight:2)],\nnode4: [(16, weight:5), (12, weight:20), (5, weight:11)],\nnode5: [(4, weight:11), (7, weight:5), (2, weight:9), (0, weight:12)],\nnode6: [(1, weight:7), (10, weight:8), (2, weight:9), (0, weight:17), (5, weight:16)],\nnode7: [(13, weight:4), (6, weight:6)],\nnode8: [(15, weight:7), (10, weight:18), (13, weight:16)],\nnode9: [(7, weight:19), (3, weight:6), (13, weight:8), (5, weight:20)],\nnode10: [(16, weight:11), (11, weight:15), (12, weight:11), (5, weight:19)],\nnode11: [(4, weight:16), (10, weight:18), (2, weight:8), (13, weight:3)],\nnode12: [(14, weight:2)],\nnode13: [(1, weight:8), (4, weight:13), (15, weight:12), (16, weight:12), (9, weight:6)],\nnode14: [(4, weight:8), (2, weight:20), (13, weight:1), (9, weight:11), (6, weight:13), (8, weight:3), (5, weight:16)],\nnode15: [(10, weight:8), (8, weight:6)],\nnode16: [(7, weight:5)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 15 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 15, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 8, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 9 with capacity 15,\nan edge from node 0 to node 1 with capacity 20,\nan edge from node 0 to node 7 with capacity 16,\nan edge from node 1 to node 3 with capacity 10,\nan edge from node 1 to node 8 with capacity 15,\nan edge from node 1 to node 0 with capacity 6,\nan edge from node 1 to node 5 with capacity 2,\nan edge from node 2 to node 4 with capacity 13,\nan edge from node 2 to node 8 with capacity 4,\nan edge from node 2 to node 1 with capacity 7,\nan edge from node 2 to node 7 with capacity 16,\nan edge from node 4 to node 3 with capacity 20,\nan edge from node 4 to node 8 with capacity 16,\nan edge from node 4 to node 0 with capacity 12,\nan edge from node 4 to node 9 with capacity 12,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 5 to node 3 with capacity 10,\nan edge from node 5 to node 10 with capacity 14,\nan edge from node 6 to node 4 with capacity 3,\nan edge from node 6 to node 8 with capacity 19,\nan edge from node 6 to node 5 with capacity 10,\nan edge from node 6 to node 1 with capacity 10,\nan edge from node 7 to node 3 with capacity 17,\nan edge from node 7 to node 8 with capacity 12,\nan edge from node 7 to node 0 with capacity 4,\nan edge from node 7 to node 1 with capacity 6,\nan edge from node 7 to node 10 with capacity 10,\nan edge from node 8 to node 11 with capacity 17,\nan edge from node 8 to node 3 with capacity 11,\nan edge from node 8 to node 0 with capacity 1,\nan edge from node 8 to node 5 with capacity 15,\nan edge from node 8 to node 2 with capacity 2,\nan edge from node 8 to node 6 with capacity 14,\nan edge from node 8 to node 1 with capacity 14,\nan edge from node 8 to node 10 with capacity 5,\nan edge from node 9 to node 4 with capacity 6,\nan edge from node 9 to node 8 with capacity 7,\nan edge from node 9 to node 5 with capacity 5,\nan edge from node 10 to node 11 with capacity 18,\nan edge from node 10 to node 3 with capacity 1,\nan edge from node 10 to node 8 with capacity 11,\nan edge from node 10 to node 2 with capacity 2,\nan edge from node 10 to node 7 with capacity 13,\nan edge from node 11 to node 0 with capacity 3,\nan edge from node 11 to node 10 with capacity 5.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 2, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 9, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 7 with capacity 14,\nan edge from node 0 to node 1 with capacity 10,\nan edge from node 0 to node 3 with capacity 5,\nan edge from node 1 to node 6 with capacity 15,\nan edge from node 1 to node 2 with capacity 3,\nan edge from node 1 to node 10 with capacity 5,\nan edge from node 1 to node 5 with capacity 16,\nan edge from node 1 to node 17 with capacity 18,\nan edge from node 1 to node 4 with capacity 20,\nan edge from node 2 to node 15 with capacity 2,\nan edge from node 2 to node 11 with capacity 19,\nan edge from node 2 to node 12 with capacity 16,\nan edge from node 3 to node 10 with capacity 12,\nan edge from node 3 to node 18 with capacity 9,\nan edge from node 3 to node 5 with capacity 16,\nan edge from node 3 to node 13 with capacity 12,\nan edge from node 3 to node 8 with capacity 11,\nan edge from node 3 to node 4 with capacity 5,\nan edge from node 4 to node 2 with capacity 7,\nan edge from node 4 to node 16 with capacity 12,\nan edge from node 4 to node 12 with capacity 13,\nan edge from node 5 to node 1 with capacity 5,\nan edge from node 5 to node 11 with capacity 16,\nan edge from node 5 to node 12 with capacity 7,\nan edge from node 6 to node 2 with capacity 5,\nan edge from node 6 to node 11 with capacity 13,\nan edge from node 6 to node 3 with capacity 10,\nan edge from node 6 to node 17 with capacity 6,\nan edge from node 7 to node 2 with capacity 6,\nan edge from node 7 to node 3 with capacity 9,\nan edge from node 7 to node 0 with capacity 10,\nan edge from node 7 to node 12 with capacity 4,\nan edge from node 8 to node 7 with capacity 9,\nan edge from node 8 to node 18 with capacity 16,\nan edge from node 8 to node 16 with capacity 5,\nan edge from node 8 to node 5 with capacity 3,\nan edge from node 8 to node 3 with capacity 8,\nan edge from node 9 to node 6 with capacity 16,\nan edge from node 9 to node 14 with capacity 7,\nan edge from node 9 to node 10 with capacity 15,\nan edge from node 9 to node 3 with capacity 12,\nan edge from node 9 to node 8 with capacity 9,\nan edge from node 10 to node 14 with capacity 12,\nan edge from node 10 to node 18 with capacity 6,\nan edge from node 10 to node 16 with capacity 16,\nan edge from node 10 to node 5 with capacity 17,\nan edge from node 10 to node 17 with capacity 9,\nan edge from node 11 to node 6 with capacity 10,\nan edge from node 11 to node 2 with capacity 12,\nan edge from node 11 to node 16 with capacity 8,\nan edge from node 11 to node 3 with capacity 15,\nan edge from node 11 to node 12 with capacity 19,\nan edge from node 12 to node 6 with capacity 5,\nan edge from node 12 to node 11 with capacity 10,\nan edge from node 12 to node 8 with capacity 16,\nan edge from node 13 to node 6 with capacity 15,\nan edge from node 13 to node 4 with capacity 2,\nan edge from node 14 to node 10 with capacity 8,\nan edge from node 14 to node 18 with capacity 13,\nan edge from node 14 to node 5 with capacity 11,\nan edge from node 14 to node 0 with capacity 4,\nan edge from node 14 to node 4 with capacity 18,\nan edge from node 15 to node 14 with capacity 7,\nan edge from node 15 to node 7 with capacity 5,\nan edge from node 15 to node 1 with capacity 7,\nan edge from node 15 to node 0 with capacity 2,\nan edge from node 15 to node 12 with capacity 18,\nan edge from node 16 to node 2 with capacity 9,\nan edge from node 16 to node 10 with capacity 19,\nan edge from node 16 to node 17 with capacity 1,\nan edge from node 16 to node 8 with capacity 7,\nan edge from node 16 to node 4 with capacity 6,\nan edge from node 17 to node 2 with capacity 7,\nan edge from node 17 to node 14 with capacity 19,\nan edge from node 17 to node 1 with capacity 14,\nan edge from node 17 to node 18 with capacity 14,\nan edge from node 17 to node 5 with capacity 4,\nan edge from node 17 to node 12 with capacity 2,\nan edge from node 18 to node 10 with capacity 19,\nan edge from node 18 to node 11 with capacity 10,\nan edge from node 18 to node 3 with capacity 6,\nan edge from node 18 to node 12 with capacity 12.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 10, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(5, weight:20), (15, weight:11), (12, weight:12), (14, weight:12)],\nnode1: [(9, weight:2), (12, weight:12), (17, weight:6), (14, weight:14)],\nnode2: [(9, weight:9), (4, weight:15), (8, weight:3)],\nnode3: [(18, weight:3), (15, weight:2), (4, weight:13), (7, weight:13), (14, weight:3), (10, weight:1)],\nnode4: [(12, weight:6), (14, weight:1)],\nnode5: [(8, weight:12), (14, weight:2), (10, weight:12)],\nnode6: [(11, weight:16), (9, weight:14), (7, weight:16), (17, weight:17), (10, weight:7)],\nnode7: [(11, weight:1), (3, weight:14)],\nnode8: [(6, weight:8), (11, weight:6), (3, weight:2), (9, weight:10), (10, weight:5)],\nnode9: [(16, weight:17), (5, weight:3), (3, weight:12), (15, weight:8), (8, weight:5), (13, weight:16)],\nnode10: [(3, weight:11), (4, weight:16), (17, weight:6), (14, weight:4)],\nnode11: [(6, weight:13), (16, weight:19), (3, weight:3), (8, weight:19), (0, weight:6)],\nnode12: [(2, weight:13), (5, weight:5), (7, weight:12), (14, weight:4)],\nnode13: [(1, weight:18), (5, weight:13), (12, weight:17)],\nnode14: [(18, weight:4), (2, weight:1), (16, weight:7), (4, weight:8), (12, weight:11), (10, weight:4)],\nnode15: [(9, weight:10), (8, weight:15), (0, weight:11)],\nnode16: [(11, weight:2), (12, weight:20), (8, weight:5)],\nnode17: [(12, weight:8), (7, weight:20), (8, weight:3)],\nnode18: [(6, weight:9), (5, weight:20), (3, weight:6), (4, weight:17)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 16\nflow_value, flow_dict = nx.maximum_flow(G, 6, 16, capacity='weight')\nprint(flow_value)\n```"}, {"id": 11, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 5 with capacity 8, an edge from node 2 to node 0 with capacity 8, an edge from node 3 to node 6 with capacity 4, an edge from node 4 to node 6 with capacity 3, an edge from node 5 to node 1 with capacity 3, an edge from node 5 to node 3 with capacity 8, an edge from node 6 to node 5 with capacity 4, an edge from node 6 to node 1 with capacity 10, an edge from node 6 to node 7 with capacity 10, an edge from node 7 to node 5 with capacity 8, an edge from node 7 to node 2 with capacity 10, an edge from node 7 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 12, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 1 to node 3 with capacity 6, an edge from node 1 to node 0 with capacity 9, an edge from node 2 to node 1 with capacity 4, an edge from node 3 to node 1 with capacity 4, an edge from node 4 to node 3 with capacity 1, an edge from node 4 to node 5 with capacity 2, an edge from node 5 to node 1 with capacity 4, an edge from node 5 to node 0 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 13, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(3, capacity:16), (15, capacity:5), (4, capacity:11)],\nnode1: [(10, capacity:5), (7, capacity:4), (15, capacity:17), (12, capacity:16), (0, capacity:15)],\nnode2: [(13, capacity:16), (3, capacity:9), (4, capacity:10)],\nnode3: [(4, capacity:20), (11, capacity:2)],\nnode4: [(13, capacity:14), (3, capacity:16), (12, capacity:20)],\nnode5: [(16, capacity:18), (15, capacity:1), (4, capacity:2), (17, capacity:12)],\nnode6: [(13, capacity:5), (3, capacity:17), (15, capacity:12), (4, capacity:20), (0, capacity:10)],\nnode7: [(8, capacity:15), (16, capacity:1), (1, capacity:13), (5, capacity:13), (15, capacity:17), (4, capacity:10), (14, capacity:9), (6, capacity:1)],\nnode8: [(7, capacity:10), (14, capacity:17), (6, capacity:12)],\nnode9: [(8, capacity:16), (10, capacity:16), (2, capacity:15), (7, capacity:18)],\nnode10: [(8, capacity:18), (15, capacity:8), (12, capacity:8), (0, capacity:13)],\nnode11: [(16, capacity:17), (1, capacity:14), (17, capacity:7)],\nnode12: [(13, capacity:1), (16, capacity:3), (15, capacity:7), (17, capacity:2), (6, capacity:1)],\nnode13: [(16, capacity:16), (9, capacity:5), (12, capacity:8)],\nnode14: [(8, capacity:11), (17, capacity:16), (0, capacity:18), (11, capacity:19)],\nnode15: [(13, capacity:14), (10, capacity:17), (4, capacity:2), (9, capacity:19)],\nnode16: [(13, capacity:18), (8, capacity:10), (15, capacity:2), (17, capacity:10), (12, capacity:16), (6, capacity:9), (11, capacity:3)],\nnode17: [(10, capacity:19), (2, capacity:13)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 11 to node 17\nflow_value, flow_dict = nx.maximum_flow(G, 11, 17, capacity='weight')\nprint(flow_value)\n```"}, {"id": 14, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(1, weight:10), (8, weight:14), (2, weight:3), (3, weight:14), (16, weight:6)],\nnode1: [(12, weight:18), (6, weight:7), (5, weight:19)],\nnode2: [(11, weight:14), (5, weight:3), (16, weight:9), (10, weight:6)],\nnode3: [(8, weight:10)],\nnode4: [(9, weight:14), (15, weight:15), (11, weight:16), (8, weight:3)],\nnode5: [(11, weight:16), (13, weight:7)],\nnode6: [(9, weight:2), (7, weight:5), (8, weight:20), (4, weight:6), (5, weight:13)],\nnode7: [(17, weight:20), (15, weight:3), (8, weight:3), (2, weight:15), (5, weight:15)],\nnode8: [(2, weight:14), (13, weight:10)],\nnode9: [(7, weight:3), (15, weight:4), (14, weight:10), (2, weight:17)],\nnode10: [(17, weight:17), (9, weight:8), (14, weight:20), (13, weight:12), (5, weight:6), (16, weight:13)],\nnode11: [(1, weight:20), (12, weight:16), (4, weight:18), (10, weight:20)],\nnode12: [(1, weight:10), (17, weight:14), (2, weight:13), (4, weight:1), (6, weight:9), (0, weight:20), (3, weight:15)],\nnode13: [(1, weight:20), (17, weight:18), (14, weight:8), (8, weight:17)],\nnode15: [(11, weight:13), (4, weight:8)],\nnode16: [(7, weight:12), (15, weight:16), (8, weight:16), (4, weight:14), (10, weight:14)],\nnode17: [(15, weight:10), (11, weight:1), (14, weight:11), (2, weight:18), (13, weight:11)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 8\nflow_value, flow_dict = nx.maximum_flow(G, 3, 8, capacity='weight')\nprint(flow_value)\n```"}, {"id": 15, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 3 with capacity 2,\nan edge from node 0 to node 1 with capacity 10,\nan edge from node 0 to node 9 with capacity 3,\nan edge from node 0 to node 6 with capacity 3,\nan edge from node 0 to node 5 with capacity 12,\nan edge from node 0 to node 8 with capacity 11,\nan edge from node 1 to node 0 with capacity 11,\nan edge from node 1 to node 3 with capacity 11,\nan edge from node 1 to node 10 with capacity 10,\nan edge from node 1 to node 5 with capacity 17,\nan edge from node 2 to node 1 with capacity 15,\nan edge from node 2 to node 11 with capacity 18,\nan edge from node 2 to node 6 with capacity 17,\nan edge from node 3 to node 11 with capacity 17,\nan edge from node 3 to node 9 with capacity 2,\nan edge from node 3 to node 12 with capacity 10,\nan edge from node 4 to node 0 with capacity 19,\nan edge from node 4 to node 7 with capacity 8,\nan edge from node 4 to node 6 with capacity 15,\nan edge from node 4 to node 12 with capacity 2,\nan edge from node 5 to node 0 with capacity 13,\nan edge from node 5 to node 10 with capacity 16,\nan edge from node 5 to node 9 with capacity 4,\nan edge from node 5 to node 6 with capacity 9,\nan edge from node 5 to node 12 with capacity 18,\nan edge from node 6 to node 2 with capacity 17,\nan edge from node 6 to node 1 with capacity 8,\nan edge from node 6 to node 8 with capacity 5,\nan edge from node 7 to node 3 with capacity 17,\nan edge from node 7 to node 9 with capacity 9,\nan edge from node 7 to node 5 with capacity 20,\nan edge from node 7 to node 4 with capacity 10,\nan edge from node 8 to node 2 with capacity 2,\nan edge from node 8 to node 0 with capacity 4,\nan edge from node 8 to node 1 with capacity 13,\nan edge from node 8 to node 4 with capacity 14,\nan edge from node 9 to node 5 with capacity 19,\nan edge from node 10 to node 9 with capacity 18,\nan edge from node 10 to node 4 with capacity 11,\nan edge from node 12 to node 10 with capacity 2,\nan edge from node 12 to node 11 with capacity 8,\nan edge from node 12 to node 7 with capacity 17,\nan edge from node 12 to node 4 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 12 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 12, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 16, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 1 with capacity 16,\nan edge from node 0 to node 7 with capacity 10,\nan edge from node 0 to node 3 with capacity 18,\nan edge from node 0 to node 9 with capacity 8,\nan edge from node 0 to node 5 with capacity 1,\nan edge from node 1 to node 7 with capacity 15,\nan edge from node 1 to node 6 with capacity 7,\nan edge from node 1 to node 9 with capacity 9,\nan edge from node 1 to node 4 with capacity 13,\nan edge from node 1 to node 13 with capacity 7,\nan edge from node 2 to node 6 with capacity 9,\nan edge from node 3 to node 1 with capacity 10,\nan edge from node 3 to node 6 with capacity 19,\nan edge from node 3 to node 4 with capacity 2,\nan edge from node 3 to node 11 with capacity 17,\nan edge from node 4 to node 6 with capacity 2,\nan edge from node 4 to node 11 with capacity 9,\nan edge from node 4 to node 8 with capacity 6,\nan edge from node 5 to node 7 with capacity 2,\nan edge from node 5 to node 0 with capacity 8,\nan edge from node 5 to node 3 with capacity 5,\nan edge from node 5 to node 4 with capacity 7,\nan edge from node 6 to node 0 with capacity 8,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 6 to node 4 with capacity 7,\nan edge from node 6 to node 13 with capacity 8,\nan edge from node 6 to node 8 with capacity 18,\nan edge from node 7 to node 3 with capacity 16,\nan edge from node 7 to node 9 with capacity 2,\nan edge from node 7 to node 10 with capacity 15,\nan edge from node 7 to node 12 with capacity 5,\nan edge from node 8 to node 1 with capacity 15,\nan edge from node 8 to node 3 with capacity 13,\nan edge from node 8 to node 13 with capacity 13,\nan edge from node 8 to node 2 with capacity 20,\nan edge from node 8 to node 5 with capacity 9,\nan edge from node 8 to node 10 with capacity 9,\nan edge from node 8 to node 12 with capacity 6,\nan edge from node 9 to node 1 with capacity 18,\nan edge from node 9 to node 4 with capacity 10,\nan edge from node 9 to node 13 with capacity 14,\nan edge from node 10 to node 1 with capacity 15,\nan edge from node 10 to node 11 with capacity 3,\nan edge from node 10 to node 5 with capacity 5,\nan edge from node 11 to node 3 with capacity 14,\nan edge from node 11 to node 9 with capacity 12,\nan edge from node 11 to node 2 with capacity 7,\nan edge from node 12 to node 13 with capacity 1,\nan edge from node 13 to node 7 with capacity 16,\nan edge from node 13 to node 11 with capacity 1,\nan edge from node 13 to node 8 with capacity 13,\nan edge from node 13 to node 12 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 12\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 12, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 17, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 1 with capacity 19,\nan edge from node 0 to node 3 with capacity 13,\nan edge from node 0 to node 2 with capacity 9,\nan edge from node 0 to node 8 with capacity 12,\nan edge from node 2 to node 6 with capacity 17,\nan edge from node 2 to node 3 with capacity 7,\nan edge from node 3 to node 0 with capacity 13,\nan edge from node 3 to node 1 with capacity 12,\nan edge from node 4 to node 6 with capacity 1,\nan edge from node 4 to node 1 with capacity 17,\nan edge from node 4 to node 3 with capacity 4,\nan edge from node 5 to node 4 with capacity 20,\nan edge from node 5 to node 2 with capacity 3,\nan edge from node 6 to node 9 with capacity 13,\nan edge from node 6 to node 4 with capacity 18,\nan edge from node 6 to node 3 with capacity 12,\nan edge from node 6 to node 7 with capacity 4,\nan edge from node 6 to node 10 with capacity 11,\nan edge from node 7 to node 9 with capacity 16,\nan edge from node 7 to node 0 with capacity 9,\nan edge from node 7 to node 1 with capacity 7,\nan edge from node 8 to node 9 with capacity 14,\nan edge from node 9 to node 1 with capacity 1,\nan edge from node 10 to node 6 with capacity 20,\nan edge from node 10 to node 8 with capacity 12.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 6, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 18, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 4 with capacity 1,\nan edge from node 0 to node 10 with capacity 17,\nan edge from node 0 to node 8 with capacity 19,\nan edge from node 2 to node 6 with capacity 1,\nan edge from node 2 to node 5 with capacity 14,\nan edge from node 3 to node 7 with capacity 5,\nan edge from node 3 to node 6 with capacity 3,\nan edge from node 3 to node 8 with capacity 19,\nan edge from node 3 to node 11 with capacity 12,\nan edge from node 3 to node 2 with capacity 13,\nan edge from node 3 to node 5 with capacity 13,\nan edge from node 4 to node 1 with capacity 1,\nan edge from node 4 to node 0 with capacity 11,\nan edge from node 5 to node 10 with capacity 6,\nan edge from node 5 to node 3 with capacity 3,\nan edge from node 6 to node 4 with capacity 5,\nan edge from node 6 to node 1 with capacity 12,\nan edge from node 6 to node 5 with capacity 2,\nan edge from node 7 to node 6 with capacity 1,\nan edge from node 8 to node 1 with capacity 8,\nan edge from node 9 to node 7 with capacity 6,\nan edge from node 9 to node 3 with capacity 15,\nan edge from node 9 to node 0 with capacity 2,\nan edge from node 10 to node 4 with capacity 6,\nan edge from node 10 to node 1 with capacity 2,\nan edge from node 11 to node 7 with capacity 7,\nan edge from node 11 to node 6 with capacity 18.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 19, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 6 with capacity 1, an edge from node 0 to node 7 with capacity 10, an edge from node 2 to node 1 with capacity 9, an edge from node 2 to node 7 with capacity 8, an edge from node 3 to node 1 with capacity 9, an edge from node 3 to node 6 with capacity 10, an edge from node 3 to node 4 with capacity 7, an edge from node 4 to node 6 with capacity 4, an edge from node 5 to node 3 with capacity 7, an edge from node 5 to node 2 with capacity 9, an edge from node 6 to node 4 with capacity 1, an edge from node 7 to node 5 with capacity 8, an edge from node 7 to node 6 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 20, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 1 to node 0 with capacity 4, an edge from node 1 to node 3 with capacity 6, an edge from node 1 to node 4 with capacity 1, an edge from node 3 to node 1 with capacity 3, an edge from node 3 to node 4 with capacity 6, an edge from node 3 to node 2 with capacity 6, an edge from node 4 to node 1 with capacity 7, an edge from node 4 to node 2 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 21, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 3 with capacity 6, an edge from node 0 to node 6 with capacity 1, an edge from node 1 to node 5 with capacity 1, an edge from node 1 to node 0 with capacity 7, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 6 with capacity 5, an edge from node 4 to node 2 with capacity 8, an edge from node 4 to node 0 with capacity 8, an edge from node 5 to node 3 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 6\nflow_value, flow_dict = nx.maximum_flow(G, 1, 6, capacity='weight')\nprint(flow_value)\n```"}, {"id": 22, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 3 with capacity 17,\nan edge from node 0 to node 1 with capacity 16,\nan edge from node 1 to node 3 with capacity 8,\nan edge from node 1 to node 0 with capacity 11,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 9 with capacity 4,\nan edge from node 2 to node 4 with capacity 5,\nan edge from node 3 to node 8 with capacity 7,\nan edge from node 3 to node 10 with capacity 10,\nan edge from node 4 to node 1 with capacity 8,\nan edge from node 5 to node 6 with capacity 13,\nan edge from node 5 to node 10 with capacity 12,\nan edge from node 5 to node 9 with capacity 18,\nan edge from node 6 to node 3 with capacity 14,\nan edge from node 6 to node 4 with capacity 3,\nan edge from node 6 to node 13 with capacity 9,\nan edge from node 6 to node 9 with capacity 13,\nan edge from node 6 to node 1 with capacity 13,\nan edge from node 7 to node 4 with capacity 11,\nan edge from node 7 to node 0 with capacity 8,\nan edge from node 7 to node 5 with capacity 12,\nan edge from node 7 to node 10 with capacity 13,\nan edge from node 7 to node 1 with capacity 3,\nan edge from node 8 to node 11 with capacity 9,\nan edge from node 8 to node 4 with capacity 11,\nan edge from node 8 to node 7 with capacity 1,\nan edge from node 8 to node 10 with capacity 11,\nan edge from node 9 to node 2 with capacity 2,\nan edge from node 9 to node 5 with capacity 18,\nan edge from node 9 to node 8 with capacity 7,\nan edge from node 10 to node 0 with capacity 20,\nan edge from node 10 to node 1 with capacity 14,\nan edge from node 11 to node 0 with capacity 11,\nan edge from node 11 to node 6 with capacity 13,\nan edge from node 11 to node 7 with capacity 14,\nan edge from node 12 to node 2 with capacity 8,\nan edge from node 12 to node 5 with capacity 13,\nan edge from node 12 to node 8 with capacity 15,\nan edge from node 12 to node 10 with capacity 10,\nan edge from node 13 to node 3 with capacity 2,\nan edge from node 13 to node 0 with capacity 19.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 6, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 23, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 1 with capacity 7, an edge from node 0 to node 3 with capacity 5, an edge from node 0 to node 2 with capacity 1, an edge from node 1 to node 5 with capacity 8, an edge from node 2 to node 5 with capacity 8, an edge from node 3 to node 1 with capacity 1, an edge from node 3 to node 4 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 5\nflow_value, flow_dict = nx.maximum_flow(G, 0, 5, capacity='weight')\nprint(flow_value)\n```"}, {"id": 24, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(10, capacity:10),\nnode1: [(13, capacity:16),\nnode2: [(11, capacity:2), (9, capacity:20), (14, capacity:9), (3, capacity:20)],\nnode3: [(0, capacity:16), (13, capacity:10), (11, capacity:3), (14, capacity:6), (1, capacity:1)],\nnode4: [(7, capacity:15), (13, capacity:9)],\nnode5: [(0, capacity:13), (13, capacity:7), (4, capacity:14), (15, capacity:15)],\nnode6: [(7, capacity:20), (9, capacity:17), (5, capacity:2), (14, capacity:12), (3, capacity:6)],\nnode7: [(0, capacity:9), (12, capacity:13), (3, capacity:8)],\nnode8: [(6, capacity:10), (14, capacity:18), (15, capacity:5), (2, capacity:15)],\nnode9: [(13, capacity:9), (11, capacity:9), (4, capacity:14), (5, capacity:2)],\nnode10: [(6, capacity:7), (4, capacity:18), (14, capacity:10), (12, capacity:19)],\nnode11: [(0, capacity:14), (4, capacity:7), (14, capacity:5), (15, capacity:2), (1, capacity:17), (8, capacity:20), (2, capacity:20)],\nnode12: [(7, capacity:20), (13, capacity:16), (9, capacity:3), (4, capacity:3)],\nnode13: [(10, capacity:14), (11, capacity:17), (9, capacity:13)],\nnode14: [(10, capacity:6), (11, capacity:3), (12, capacity:16), (3, capacity:20), (15, capacity:4), (2, capacity:14)],\nnode15: [(4, capacity:10), (3, capacity:9)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 3 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 3, 9, capacity='capacity')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 25, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an edge from node 0 to node 1 with capacity 4, an edge from node 1 to node 7 with capacity 4, an edge from node 1 to node 2 with capacity 3, an edge from node 1 to node 6 with capacity 5, an edge from node 2 to node 8 with capacity 5, an edge from node 2 to node 0 with capacity 10, an edge from node 2 to node 1 with capacity 4, an edge from node 3 to node 5 with capacity 1, an edge from node 3 to node 4 with capacity 1, an edge from node 4 to node 0 with capacity 9, an edge from node 4 to node 1 with capacity 6, an edge from node 4 to node 3 with capacity 2, an edge from node 5 to node 8 with capacity 1, an edge from node 5 to node 1 with capacity 8, an edge from node 6 to node 2 with capacity 3, an edge from node 6 to node 9 with capacity 2, an edge from node 7 to node 4 with capacity 7, an edge from node 8 to node 2 with capacity 8, an edge from node 8 to node 6 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 26, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 5 with capacity 9, an edge from node 0 to node 3 with capacity 4, an edge from node 0 to node 6 with capacity 4, an edge from node 0 to node 2 with capacity 9, an edge from node 1 to node 5 with capacity 5, an edge from node 2 to node 0 with capacity 1, an edge from node 4 to node 2 with capacity 3, an edge from node 5 to node 3 with capacity 5, an edge from node 5 to node 2 with capacity 4, an edge from node 6 to node 5 with capacity 2, an edge from node 6 to node 1 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 27, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 10 with capacity 15,\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 0 to node 3 with capacity 18,\nan edge from node 1 to node 5 with capacity 2,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 4 with capacity 3,\nan edge from node 2 to node 5 with capacity 16,\nan edge from node 2 to node 10 with capacity 14,\nan edge from node 2 to node 1 with capacity 6,\nan edge from node 3 to node 9 with capacity 3,\nan edge from node 3 to node 4 with capacity 5,\nan edge from node 3 to node 12 with capacity 6,\nan edge from node 4 to node 10 with capacity 7,\nan edge from node 4 to node 6 with capacity 4,\nan edge from node 4 to node 9 with capacity 8,\nan edge from node 5 to node 10 with capacity 18,\nan edge from node 5 to node 1 with capacity 6,\nan edge from node 5 to node 4 with capacity 8,\nan edge from node 6 to node 0 with capacity 17,\nan edge from node 6 to node 1 with capacity 3,\nan edge from node 6 to node 12 with capacity 13,\nan edge from node 7 to node 5 with capacity 5,\nan edge from node 7 to node 6 with capacity 7,\nan edge from node 7 to node 11 with capacity 1,\nan edge from node 7 to node 12 with capacity 6,\nan edge from node 8 to node 5 with capacity 17,\nan edge from node 8 to node 6 with capacity 14,\nan edge from node 8 to node 9 with capacity 4,\nan edge from node 8 to node 4 with capacity 6,\nan edge from node 9 to node 0 with capacity 9,\nan edge from node 9 to node 6 with capacity 13,\nan edge from node 9 to node 4 with capacity 2,\nan edge from node 10 to node 5 with capacity 10,\nan edge from node 10 to node 8 with capacity 3,\nan edge from node 10 to node 6 with capacity 8,\nan edge from node 10 to node 9 with capacity 14,\nan edge from node 10 to node 3 with capacity 19,\nan edge from node 11 to node 5 with capacity 9,\nan edge from node 11 to node 2 with capacity 15,\nan edge from node 11 to node 7 with capacity 3,\nan edge from node 11 to node 4 with capacity 10,\nan edge from node 12 to node 11 with capacity 15,\nan edge from node 12 to node 9 with capacity 8,\nan edge from node 12 to node 1 with capacity 11,\nan edge from node 12 to node 3 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 12 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 12, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 28, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(15, capacity:4), (11, capacity:2), (16, capacity:8), (14, capacity:18)],\nnode1: [(4, capacity:20)],\nnode2: [(4, capacity:20), (7, capacity:14), (11, capacity:3), (8, capacity:17)],\nnode3: [(0, capacity:3), (6, capacity:12)],\nnode4: [(16, capacity:5)],\nnode5: [(2, capacity:9), (15, capacity:14), (12, capacity:11), (3, capacity:6), (11, capacity:12), (9, capacity:19)],\nnode6: [(2, capacity:9), (15, capacity:7), (12, capacity:1), (1, capacity:12), (16, capacity:2), (14, capacity:20)],\nnode7: [(4, capacity:18), (5, capacity:9), (10, capacity:6), (11, capacity:5), (16, capacity:16), (6, capacity:3)],\nnode8: [(15, capacity:8), (4, capacity:11)],\nnode9: [(2, capacity:6), (4, capacity:6), (12, capacity:10), (7, capacity:20), (5, capacity:18), (11, capacity:15)],\nnode10: [(5, capacity:11), (3, capacity:6), (11, capacity:15), (13, capacity:5)],\nnode11: [(15, capacity:9), (5, capacity:3), (1, capacity:8), (9, capacity:2), (13, capacity:14), (14, capacity:4)],\nnode12: [(6, capacity:13)],\nnode13: [(7, capacity:16)],\nnode14: [(15, capacity:20), (7, capacity:15), (0, capacity:7), (5, capacity:19), (1, capacity:10), (9, capacity:13)],\nnode15: [(1, capacity:17), (9, capacity:6), (14, capacity:4), (8, capacity:15), (6, capacity:1)],\nnode16: [(12, capacity:12), (5, capacity:11), (10, capacity:1), (3, capacity:16), (9, capacity:6), (6, capacity:16)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 10, 14, capacity='capacity')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 29, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 2 with capacity 9, an edge from node 2 to node 1 with capacity 8, an edge from node 2 to node 4 with capacity 8, an edge from node 3 to node 0 with capacity 5, an edge from node 3 to node 1 with capacity 4, an edge from node 3 to node 2 with capacity 5, an edge from node 4 to node 1 with capacity 7, an edge from node 4 to node 3 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 30, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 2 with capacity 2,\nan edge from node 0 to node 6 with capacity 2,\nan edge from node 0 to node 15 with capacity 13,\nan edge from node 0 to node 16 with capacity 17,\nan edge from node 0 to node 5 with capacity 12,\nan edge from node 1 to node 10 with capacity 8,\nan edge from node 1 to node 4 with capacity 5,\nan edge from node 1 to node 2 with capacity 15,\nan edge from node 1 to node 0 with capacity 7,\nan edge from node 1 to node 6 with capacity 9,\nan edge from node 1 to node 9 with capacity 19,\nan edge from node 1 to node 5 with capacity 4,\nan edge from node 2 to node 10 with capacity 15,\nan edge from node 2 to node 4 with capacity 8,\nan edge from node 2 to node 9 with capacity 5,\nan edge from node 2 to node 8 with capacity 2,\nan edge from node 2 to node 3 with capacity 8,\nan edge from node 2 to node 5 with capacity 6,\nan edge from node 2 to node 11 with capacity 7,\nan edge from node 3 to node 17 with capacity 13,\nan edge from node 3 to node 14 with capacity 4,\nan edge from node 3 to node 2 with capacity 13,\nan edge from node 3 to node 0 with capacity 5,\nan edge from node 3 to node 8 with capacity 13,\nan edge from node 3 to node 7 with capacity 12,\nan edge from node 4 to node 17 with capacity 20,\nan edge from node 4 to node 10 with capacity 3,\nan edge from node 4 to node 15 with capacity 20,\nan edge from node 5 to node 12 with capacity 20,\nan edge from node 5 to node 14 with capacity 13,\nan edge from node 5 to node 9 with capacity 2,\nan edge from node 5 to node 11 with capacity 6,\nan edge from node 6 to node 10 with capacity 20,\nan edge from node 6 to node 2 with capacity 11,\nan edge from node 6 to node 15 with capacity 13,\nan edge from node 6 to node 9 with capacity 14,\nan edge from node 6 to node 8 with capacity 16,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 6 to node 7 with capacity 3,\nan edge from node 7 to node 1 with capacity 15,\nan edge from node 7 to node 19 with capacity 15,\nan edge from node 8 to node 12 with capacity 18,\nan edge from node 8 to node 15 with capacity 2,\nan edge from node 8 to node 18 with capacity 10,\nan edge from node 8 to node 19 with capacity 11,\nan edge from node 8 to node 5 with capacity 7,\nan edge from node 8 to node 7 with capacity 10,\nan edge from node 9 to node 12 with capacity 17,\nan edge from node 9 to node 4 with capacity 11,\nan edge from node 9 to node 1 with capacity 5,\nan edge from node 9 to node 6 with capacity 15,\nan edge from node 9 to node 15 with capacity 20,\nan edge from node 9 to node 18 with capacity 14,\nan edge from node 9 to node 8 with capacity 8,\nan edge from node 9 to node 7 with capacity 19,\nan edge from node 10 to node 12 with capacity 4,\nan edge from node 10 to node 17 with capacity 19,\nan edge from node 10 to node 8 with capacity 12,\nan edge from node 10 to node 11 with capacity 13,\nan edge from node 11 to node 13 with capacity 18,\nan edge from node 11 to node 6 with capacity 15,\nan edge from node 12 to node 17 with capacity 7,\nan edge from node 12 to node 14 with capacity 19,\nan edge from node 12 to node 10 with capacity 1,\nan edge from node 12 to node 2 with capacity 1,\nan edge from node 12 to node 5 with capacity 20,\nan edge from node 13 to node 17 with capacity 9,\nan edge from node 13 to node 6 with capacity 16,\nan edge from node 13 to node 18 with capacity 18,\nan edge from node 13 to node 8 with capacity 20,\nan edge from node 13 to node 19 with capacity 8,\nan edge from node 13 to node 7 with capacity 20,\nan edge from node 14 to node 10 with capacity 7,\nan edge from node 14 to node 6 with capacity 3,\nan edge from node 14 to node 18 with capacity 13,\nan edge from node 14 to node 8 with capacity 13,\nan edge from node 14 to node 11 with capacity 20,\nan edge from node 15 to node 6 with capacity 18,\nan edge from node 15 to node 9 with capacity 18,\nan edge from node 15 to node 19 with capacity 9,\nan edge from node 15 to node 7 with capacity 3,\nan edge from node 16 to node 17 with capacity 4,\nan edge from node 16 to node 14 with capacity 17,\nan edge from node 16 to node 2 with capacity 5,\nan edge from node 16 to node 0 with capacity 18,\nan edge from node 16 to node 3 with capacity 12,\nan edge from node 16 to node 11 with capacity 5,\nan edge from node 17 to node 3 with capacity 15,\nan edge from node 18 to node 12 with capacity 7,\nan edge from node 18 to node 10 with capacity 6,\nan edge from node 18 to node 4 with capacity 10,\nan edge from node 18 to node 0 with capacity 5,\nan edge from node 18 to node 15 with capacity 18,\nan edge from node 18 to node 11 with capacity 7,\nan edge from node 19 to node 12 with capacity 9,\nan edge from node 19 to node 2 with capacity 4,\nan edge from node 19 to node 0 with capacity 9,\nan edge from node 19 to node 9 with capacity 16,\nan edge from node 19 to node 8 with capacity 11,\nan edge from node 19 to node 16 with capacity 17,\nan edge from node 19 to node 11 with capacity 8,\nan edge from node 19 to node 7 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 31, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(14, weight:9), (13, weight:12), (2, weight:5), (1, weight:12), (5, weight:7)],\nnode1: [(14, weight:5), (3, weight:8)],\nnode2: [(4, weight:19)],\nnode3: [(8, weight:11), (0, weight:3), (11, weight:5), (1, weight:7), (12, weight:8)],\nnode4: [(14, weight:12), (3, weight:16), (10, weight:11), (11, weight:18), (7, weight:10), (6, weight:11)],\nnode5: [(13, weight:16), (0, weight:8), (15, weight:18), (11, weight:5)],\nnode6: [(5, weight:8), (12, weight:13)],\nnode7: [(14, weight:12), (0, weight:1), (3, weight:10), (9, weight:17), (17, weight:16), (1, weight:18), (4, weight:3), (12, weight:13)],\nnode8: [(3, weight:6), (4, weight:9)],\nnode9: [(13, weight:12), (0, weight:13), (2, weight:2), (12, weight:6)],\nnode10: [(16, weight:20), (0, weight:18), (3, weight:4), (2, weight:7), (9, weight:13), (6, weight:9)],\nnode11: [(14, weight:14), (0, weight:7), (9, weight:5), (17, weight:18)],\nnode12: [(13, weight:7), (0, weight:17), (17, weight:3), (1, weight:10), (6, weight:18)],\nnode13: [(0, weight:6), (9, weight:2), (1, weight:20)],\nnode14: [(0, weight:3), (3, weight:20), (10, weight:18), (11, weight:13)],\nnode15: [(8, weight:14), (0, weight:8), (2, weight:2), (11, weight:15), (1, weight:1), (6, weight:6), (4, weight:14)],\nnode16: [(14, weight:1), (0, weight:2), (15, weight:16), (2, weight:1), (9, weight:11), (11, weight:1), (5, weight:15)],\nnode17: [(14, weight:11), (8, weight:14), (12, weight:6)]\"\"\"\n\n# Regular expression\npattern = r\"node(\\d+):\\s*\\[(.*?)\\]\"\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor match in matches:\n    node = int(match[0])\n    edges = match[1].split(\"), (\")\n    for edge in edges:\n        edge = edge.strip(\"()\").split(\", \")\n        neighbor = int(edge[0])\n        weight = int(edge[1].split(\":\")[1])\n        G.add_edge(node, neighbor, weight=weight)\n\n# Calculate maximum flow from node 16 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 16, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 32, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 6 with capacity 9, an edge from node 1 to node 2 with capacity 2, an edge from node 1 to node 3 with capacity 7, an edge from node 3 to node 1 with capacity 6, an edge from node 6 to node 3 with capacity 8, an edge from node 7 to node 0 with capacity 10, an edge from node 7 to node 8 with capacity 5, an edge from node 8 to node 3 with capacity 5, an edge from node 8 to node 1 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 7, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 33, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 2 with capacity 18,\nan edge from node 0 to node 12 with capacity 10,\nan edge from node 0 to node 1 with capacity 14,\nan edge from node 0 to node 4 with capacity 1,\nan edge from node 1 to node 9 with capacity 10,\nan edge from node 1 to node 8 with capacity 12,\nan edge from node 1 to node 3 with capacity 16,\nan edge from node 2 to node 0 with capacity 6,\nan edge from node 2 to node 3 with capacity 13,\nan edge from node 2 to node 14 with capacity 10,\nan edge from node 2 to node 10 with capacity 13,\nan edge from node 2 to node 6 with capacity 14,\nan edge from node 3 to node 12 with capacity 8,\nan edge from node 3 to node 8 with capacity 20,\nan edge from node 3 to node 4 with capacity 12,\nan edge from node 4 to node 0 with capacity 19,\nan edge from node 4 to node 6 with capacity 18,\nan edge from node 5 to node 11 with capacity 11,\nan edge from node 5 to node 3 with capacity 13,\nan edge from node 5 to node 1 with capacity 1,\nan edge from node 5 to node 14 with capacity 8,\nan edge from node 5 to node 4 with capacity 1,\nan edge from node 5 to node 7 with capacity 10,\nan edge from node 5 to node 6 with capacity 18,\nan edge from node 6 to node 11 with capacity 7,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 6 to node 14 with capacity 10,\nan edge from node 6 to node 10 with capacity 20,\nan edge from node 7 to node 0 with capacity 11,\nan edge from node 7 to node 8 with capacity 6,\nan edge from node 7 to node 1 with capacity 9,\nan edge from node 7 to node 10 with capacity 17,\nan edge from node 8 to node 3 with capacity 6,\nan edge from node 9 to node 11 with capacity 9,\nan edge from node 9 to node 2 with capacity 12,\nan edge from node 9 to node 4 with capacity 4,\nan edge from node 10 to node 2 with capacity 14,\nan edge from node 10 to node 0 with capacity 17,\nan edge from node 10 to node 3 with capacity 9,\nan edge from node 11 to node 2 with capacity 8,\nan edge from node 11 to node 3 with capacity 11,\nan edge from node 11 to node 4 with capacity 17,\nan edge from node 11 to node 7 with capacity 4,\nan edge from node 12 to node 5 with capacity 13,\nan edge from node 12 to node 3 with capacity 2,\nan edge from node 13 to node 9 with capacity 13,\nan edge from node 14 to node 0 with capacity 7,\nan edge from node 14 to node 12 with capacity 10,\nan edge from node 14 to node 10 with capacity 6,\nan edge from node 14 to node 7 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 34, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 6, an edge from node 1 to node 5 with capacity 2, an edge from node 2 to node 4 with capacity 7, an edge from node 2 to node 5 with capacity 2, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 5 with capacity 2, an edge from node 4 to node 3 with capacity 3, an edge from node 5 to node 2 with capacity 10, an edge from node 5 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 35, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 5, an edge from node 1 to node 0 with capacity 5, an edge from node 2 to node 3 with capacity 4, an edge from node 2 to node 1 with capacity 1, an edge from node 3 to node 0 with capacity 7, an edge from node 3 to node 4 with capacity 8, an edge from node 4 to node 0 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 36, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 1, an edge from node 1 to node 4 with capacity 5, an edge from node 2 to node 1 with capacity 6, an edge from node 2 to node 3 with capacity 2, an edge from node 2 to node 0 with capacity 10, an edge from node 3 to node 0 with capacity 9, an edge from node 4 to node 0 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 37, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 11 with capacity 5,\nan edge from node 0 to node 9 with capacity 19,\nan edge from node 0 to node 2 with capacity 9,\nan edge from node 2 to node 10 with capacity 17,\nan edge from node 2 to node 6 with capacity 20,\nan edge from node 3 to node 9 with capacity 9,\nan edge from node 3 to node 0 with capacity 8,\nan edge from node 4 to node 11 with capacity 15,\nan edge from node 4 to node 8 with capacity 20,\nan edge from node 4 to node 7 with capacity 5,\nan edge from node 4 to node 2 with capacity 9,\nan edge from node 4 to node 6 with capacity 15,\nan edge from node 4 to node 0 with capacity 14,\nan edge from node 5 to node 11 with capacity 13,\nan edge from node 5 to node 3 with capacity 12,\nan edge from node 5 to node 1 with capacity 15,\nan edge from node 6 to node 8 with capacity 18,\nan edge from node 6 to node 4 with capacity 7,\nan edge from node 6 to node 1 with capacity 4,\nan edge from node 6 to node 0 with capacity 4,\nan edge from node 7 to node 11 with capacity 19,\nan edge from node 7 to node 4 with capacity 10,\nan edge from node 7 to node 10 with capacity 5,\nan edge from node 8 to node 2 with capacity 10,\nan edge from node 8 to node 3 with capacity 14,\nan edge from node 9 to node 2 with capacity 6,\nan edge from node 9 to node 0 with capacity 9,\nan edge from node 10 to node 6 with capacity 12,\nan edge from node 10 to node 3 with capacity 8,\nan edge from node 10 to node 0 with capacity 12,\nan edge from node 11 to node 8 with capacity 18,\nan edge from node 11 to node 7 with capacity 19,\nan edge from node 11 to node 1 with capacity 9,\nan edge from node 11 to node 0 with capacity 1.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 6\nflow_value, flow_dict = nx.maximum_flow(G, 10, 6, capacity='weight')\nprint(flow_value)\n```"}, {"id": 38, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 6, an edge from node 0 to node 3 with capacity 3, an edge from node 1 to node 3 with capacity 1, an edge from node 2 to node 0 with capacity 5, an edge from node 2 to node 3 with capacity 5, an edge from node 4 to node 3 with capacity 5, an edge from node 4 to node 2 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 39, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 8 with capacity 7,\nan edge from node 0 to node 3 with capacity 13,\nan edge from node 0 to node 5 with capacity 18,\nan edge from node 0 to node 9 with capacity 3,\nan edge from node 0 to node 10 with capacity 11,\nan edge from node 1 to node 3 with capacity 18,\nan edge from node 1 to node 9 with capacity 15,\nan edge from node 1 to node 10 with capacity 20,\nan edge from node 2 to node 8 with capacity 4,\nan edge from node 2 to node 3 with capacity 5,\nan edge from node 2 to node 5 with capacity 14,\nan edge from node 2 to node 10 with capacity 14,\nan edge from node 3 to node 0 with capacity 3,\nan edge from node 3 to node 10 with capacity 15,\nan edge from node 4 to node 3 with capacity 17,\nan edge from node 4 to node 2 with capacity 1,\nan edge from node 4 to node 6 with capacity 5,\nan edge from node 5 to node 8 with capacity 8,\nan edge from node 5 to node 3 with capacity 7,\nan edge from node 5 to node 11 with capacity 14,\nan edge from node 5 to node 10 with capacity 18,\nan edge from node 6 to node 4 with capacity 6,\nan edge from node 6 to node 5 with capacity 8,\nan edge from node 6 to node 1 with capacity 1,\nan edge from node 7 to node 3 with capacity 19,\nan edge from node 7 to node 2 with capacity 18,\nan edge from node 8 to node 1 with capacity 16,\nan edge from node 8 to node 11 with capacity 2,\nan edge from node 8 to node 10 with capacity 18,\nan edge from node 9 to node 4 with capacity 5,\nan edge from node 9 to node 5 with capacity 7,\nan edge from node 9 to node 2 with capacity 12,\nan edge from node 9 to node 1 with capacity 12,\nan edge from node 9 to node 11 with capacity 2,\nan edge from node 10 to node 4 with capacity 17,\nan edge from node 10 to node 2 with capacity 15,\nan edge from node 10 to node 1 with capacity 11,\nan edge from node 11 to node 8 with capacity 2,\nan edge from node 11 to node 9 with capacity 18,\nan edge from node 11 to node 6 with capacity 16,\nan edge from node 11 to node 1 with capacity 17,\nan edge from node 11 to node 10 with capacity 18.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 11, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 40, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(10, weight:1), (12, weight:7)],\nnode2: [(13, weight:10), (9, weight:4), (7, weight:2)],\nnode3: [(2, weight:10), (6, weight:19), (15, weight:1), (14, weight:6)],\nnode4: [(13, weight:19), (16, weight:1), (9, weight:8), (6, weight:7), (12, weight:16)],\nnode5: [(0, weight:8), (6, weight:11), (4, weight:1)],\nnode6: [(5, weight:3)],\nnode7: [(17, weight:8), (13, weight:11), (0, weight:11), (9, weight:1), (14, weight:3), (1, weight:19)],\nnode8: [(3, weight:16), (6, weight:10), (10, weight:16), (12, weight:3), (14, weight:2)],\nnode9: [(0, weight:19), (8, weight:11), (4, weight:3), (1, weight:13)],\nnode10: [(2, weight:7), (9, weight:17), (4, weight:9)],\nnode11: [(2, weight:19), (5, weight:16), (16, weight:2), (9, weight:4)],\nnode12: [(6, weight:7), (15, weight:18)],\nnode13: [(5, weight:3), (17, weight:4), (16, weight:4), (8, weight:19), (4, weight:9)],\nnode14: [(5, weight:10), (16, weight:13), (11, weight:15)],\nnode15: [(5, weight:14), (0, weight:9), (9, weight:19), (8, weight:20), (7, weight:2), (4, weight:19)],\nnode16: [(3, weight:11), (8, weight:4), (14, weight:13)],\nnode17: [(8, weight:2)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 5, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 41, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 4, an edge from node 1 to node 4 with capacity 8, an edge from node 2 to node 4 with capacity 10, an edge from node 2 to node 0 with capacity 5, an edge from node 3 to node 0 with capacity 9, an edge from node 4 to node 3 with capacity 5, an edge from node 4 to node 0 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 42, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 6 with capacity 10, an edge from node 1 to node 6 with capacity 2, an edge from node 1 to node 5 with capacity 5, an edge from node 2 to node 4 with capacity 1, an edge from node 2 to node 3 with capacity 3, an edge from node 2 to node 6 with capacity 9, an edge from node 3 to node 2 with capacity 10, an edge from node 4 to node 6 with capacity 5, an edge from node 4 to node 5 with capacity 10, an edge from node 6 to node 4 with capacity 9, an edge from node 6 to node 3 with capacity 10, an edge from node 6 to node 0 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 43, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(17, capacity:13), (6, capacity:19), (13, capacity:19)],\nnode1: [(16, capacity:11), (11, capacity:1), (3, capacity:18), (14, capacity:16)],\nnode2: [(0, capacity:8), (11, capacity:11), (17, capacity:10), (9, capacity:18), (13, capacity:20), (10, capacity:17), (4, capacity:20)],\nnode3: [(2, capacity:15), (11, capacity:13), (6, capacity:15), (12, capacity:16), (7, capacity:9)],\nnode4: [(11, capacity:14), (3, capacity:4), (5, capacity:16), (8, capacity:2), (12, capacity:17), (1, capacity:12), (10, capacity:3)],\nnode5: [(15, capacity:7), (6, capacity:7), (1, capacity:2)],\nnode6: [(11, capacity:14), (12, capacity:9), (13, capacity:12), (10, capacity:18), (7, capacity:16)],\nnode7: [(2, capacity:13), (11, capacity:3), (9, capacity:1)],\nnode8: [(4, capacity:4)],\nnode9: [(8, capacity:18), (6, capacity:15), (12, capacity:7), (13, capacity:2)],\nnode10: [(2, capacity:16), (3, capacity:16)],\nnode11: [(5, capacity:19), (15, capacity:5), (4, capacity:13)],\nnode12: [(16, capacity:11), (7, capacity:5)],\nnode13: [(0, capacity:11), (5, capacity:4), (8, capacity:16), (15, capacity:10), (9, capacity:1), (4, capacity:11)],\nnode14: [(12, capacity:2), (13, capacity:4)],\nnode15: [(16, capacity:4), (5, capacity:20), (6, capacity:8), (1, capacity:11), (10, capacity:20), (4, capacity:11)],\nnode16: [(8, capacity:20), (14, capacity:2), (15, capacity:8), (6, capacity:9)],\nnode17: [(0, capacity:18), (5, capacity:4), (8, capacity:8), (9, capacity:10)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+) capacity:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 17, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 44, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 9, an edge from node 0 to node 2 with capacity 10, an edge from node 1 to node 4 with capacity 9, an edge from node 1 to node 0 with capacity 7, an edge from node 1 to node 2 with capacity 10, an edge from node 4 to node 3 with capacity 1, an edge from node 4 to node 2 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 45, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 4 with capacity 3,\nan edge from node 0 to node 2 with capacity 12,\nan edge from node 0 to node 9 with capacity 4,\nan edge from node 0 to node 8 with capacity 11,\nan edge from node 1 to node 5 with capacity 14,\nan edge from node 1 to node 4 with capacity 20,\nan edge from node 1 to node 0 with capacity 4,\nan edge from node 1 to node 8 with capacity 7,\nan edge from node 2 to node 7 with capacity 19,\nan edge from node 2 to node 0 with capacity 9,\nan edge from node 2 to node 10 with capacity 8,\nan edge from node 2 to node 1 with capacity 19,\nan edge from node 3 to node 7 with capacity 7,\nan edge from node 3 to node 2 with capacity 18,\nan edge from node 3 to node 9 with capacity 17,\nan edge from node 4 to node 2 with capacity 13,\nan edge from node 5 to node 11 with capacity 5,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 5 to node 3 with capacity 6,\nan edge from node 6 to node 7 with capacity 18,\nan edge from node 6 to node 4 with capacity 1,\nan edge from node 6 to node 9 with capacity 19,\nan edge from node 6 to node 0 with capacity 19,\nan edge from node 7 to node 5 with capacity 5,\nan edge from node 7 to node 3 with capacity 15,\nan edge from node 8 to node 9 with capacity 6,\nan edge from node 8 to node 0 with capacity 9,\nan edge from node 8 to node 10 with capacity 1,\nan edge from node 9 to node 3 with capacity 15,\nan edge from node 10 to node 4 with capacity 10,\nan edge from node 10 to node 6 with capacity 15,\nan edge from node 10 to node 0 with capacity 12,\nan edge from node 10 to node 3 with capacity 16,\nan edge from node 10 to node 8 with capacity 17,\nan edge from node 10 to node 1 with capacity 6,\nan edge from node 11 to node 7 with capacity 9,\nan edge from node 11 to node 2 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 7, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 46, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 12 with capacity 3,\nan edge from node 0 to node 3 with capacity 16,\nan edge from node 1 to node 4 with capacity 20,\nan edge from node 1 to node 11 with capacity 5,\nan edge from node 2 to node 7 with capacity 20,\nan edge from node 3 to node 2 with capacity 10,\nan edge from node 3 to node 8 with capacity 11,\nan edge from node 4 to node 6 with capacity 7,\nan edge from node 4 to node 1 with capacity 12,\nan edge from node 4 to node 7 with capacity 4,\nan edge from node 4 to node 11 with capacity 17,\nan edge from node 4 to node 5 with capacity 18,\nan edge from node 4 to node 8 with capacity 4,\nan edge from node 5 to node 6 with capacity 10,\nan edge from node 5 to node 2 with capacity 5,\nan edge from node 6 to node 2 with capacity 9,\nan edge from node 6 to node 3 with capacity 1,\nan edge from node 6 to node 8 with capacity 9,\nan edge from node 7 to node 5 with capacity 2,\nan edge from node 8 to node 10 with capacity 12,\nan edge from node 8 to node 4 with capacity 16,\nan edge from node 9 to node 1 with capacity 6,\nan edge from node 9 to node 11 with capacity 17,\nan edge from node 10 to node 2 with capacity 12,\nan edge from node 10 to node 7 with capacity 13,\nan edge from node 10 to node 4 with capacity 19,\nan edge from node 10 to node 3 with capacity 6,\nan edge from node 10 to node 5 with capacity 11,\nan edge from node 11 to node 9 with capacity 17,\nan edge from node 11 to node 12 with capacity 17,\nan edge from node 11 to node 7 with capacity 1,\nan edge from node 11 to node 4 with capacity 11,\nan edge from node 11 to node 8 with capacity 12,\nan edge from node 12 to node 4 with capacity 19,\nan edge from node 12 to node 0 with capacity 19.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 10, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 47, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 6 with capacity 17,\nan edge from node 0 to node 14 with capacity 7,\nan edge from node 0 to node 15 with capacity 8,\nan edge from node 0 to node 5 with capacity 3,\nan edge from node 1 to node 6 with capacity 14,\nan edge from node 1 to node 14 with capacity 6,\nan edge from node 1 to node 4 with capacity 4,\nan edge from node 1 to node 0 with capacity 2,\nan edge from node 1 to node 3 with capacity 4,\nan edge from node 1 to node 2 with capacity 17,\nan edge from node 1 to node 9 with capacity 4,\nan edge from node 1 to node 12 with capacity 6,\nan edge from node 1 to node 5 with capacity 13,\nan edge from node 2 to node 6 with capacity 14,\nan edge from node 2 to node 0 with capacity 6,\nan edge from node 2 to node 7 with capacity 17,\nan edge from node 2 to node 8 with capacity 16,\nan edge from node 2 to node 5 with capacity 12,\nan edge from node 3 to node 14 with capacity 17,\nan edge from node 3 to node 10 with capacity 7,\nan edge from node 3 to node 16 with capacity 10,\nan edge from node 3 to node 0 with capacity 14,\nan edge from node 3 to node 9 with capacity 8,\nan edge from node 3 to node 11 with capacity 6,\nan edge from node 4 to node 6 with capacity 15,\nan edge from node 4 to node 10 with capacity 14,\nan edge from node 4 to node 16 with capacity 13,\nan edge from node 5 to node 6 with capacity 16,\nan edge from node 5 to node 16 with capacity 12,\nan edge from node 5 to node 2 with capacity 3,\nan edge from node 5 to node 13 with capacity 6,\nan edge from node 6 to node 7 with capacity 10,\nan edge from node 6 to node 12 with capacity 4,\nan edge from node 6 to node 5 with capacity 7,\nan edge from node 7 to node 6 with capacity 20,\nan edge from node 7 to node 1 with capacity 17,\nan edge from node 7 to node 2 with capacity 9,\nan edge from node 7 to node 11 with capacity 10,\nan edge from node 8 to node 14 with capacity 11,\nan edge from node 8 to node 16 with capacity 17,\nan edge from node 8 to node 7 with capacity 11,\nan edge from node 8 to node 11 with capacity 1,\nan edge from node 8 to node 15 with capacity 3,\nan edge from node 8 to node 5 with capacity 15,\nan edge from node 9 to node 1 with capacity 19,\nan edge from node 9 to node 11 with capacity 19,\nan edge from node 9 to node 15 with capacity 13,\nan edge from node 10 to node 9 with capacity 20,\nan edge from node 10 to node 13 with capacity 14,\nan edge from node 11 to node 3 with capacity 5,\nan edge from node 11 to node 2 with capacity 7,\nan edge from node 11 to node 9 with capacity 19,\nan edge from node 11 to node 12 with capacity 7,\nan edge from node 12 to node 6 with capacity 10,\nan edge from node 12 to node 16 with capacity 7,\nan edge from node 12 to node 3 with capacity 11,\nan edge from node 12 to node 13 with capacity 18,\nan edge from node 12 to node 8 with capacity 18,\nan edge from node 13 to node 10 with capacity 6,\nan edge from node 13 to node 3 with capacity 19,\nan edge from node 13 to node 12 with capacity 8,\nan edge from node 13 to node 5 with capacity 3,\nan edge from node 14 to node 7 with capacity 19,\nan edge from node 14 to node 12 with capacity 14,\nan edge from node 15 to node 6 with capacity 4,\nan edge from node 15 to node 14 with capacity 8,\nan edge from node 15 to node 10 with capacity 1,\nan edge from node 15 to node 3 with capacity 2,\nan edge from node 15 to node 9 with capacity 18,\nan edge from node 16 to node 14 with capacity 20,\nan edge from node 16 to node 10 with capacity 20,\nan edge from node 16 to node 4 with capacity 6,\nan edge from node 16 to node 1 with capacity 14,\nan edge from node 16 to node 2 with capacity 9,\nan edge from node 16 to node 12 with capacity 5,\nan edge from node 16 to node 15 with capacity 17,\nan edge from node 16 to node 5 with capacity 8.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 15 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 15, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 48, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 3 with capacity 7, an edge from node 0 to node 2 with capacity 4, an edge from node 2 to node 3 with capacity 4, an edge from node 2 to node 6 with capacity 9, an edge from node 3 to node 2 with capacity 6, an edge from node 4 to node 0 with capacity 10, an edge from node 5 to node 2 with capacity 3, an edge from node 5 to node 6 with capacity 3, an edge from node 6 to node 0 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 5, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 49, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 2 with capacity 13,\nan edge from node 0 to node 7 with capacity 17,\nan edge from node 1 to node 2 with capacity 11,\nan edge from node 1 to node 3 with capacity 4,\nan edge from node 1 to node 5 with capacity 14,\nan edge from node 1 to node 9 with capacity 17,\nan edge from node 2 to node 6 with capacity 8,\nan edge from node 4 to node 3 with capacity 15,\nan edge from node 5 to node 8 with capacity 6,\nan edge from node 5 to node 9 with capacity 11,\nan edge from node 5 to node 6 with capacity 2,\nan edge from node 6 to node 2 with capacity 12,\nan edge from node 6 to node 4 with capacity 12,\nan edge from node 6 to node 9 with capacity 14,\nan edge from node 7 to node 0 with capacity 14,\nan edge from node 7 to node 6 with capacity 16,\nan edge from node 7 to node 1 with capacity 15,\nan edge from node 8 to node 10 with capacity 18,\nan edge from node 8 to node 5 with capacity 15,\nan edge from node 8 to node 9 with capacity 10,\nan edge from node 9 to node 8 with capacity 11,\nan edge from node 9 to node 5 with capacity 19,\nan edge from node 9 to node 7 with capacity 8,\nan edge from node 10 to node 5 with capacity 18,\nan edge from node 10 to node 7 with capacity 19,\nan edge from node 10 to node 1 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 6, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 50, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 5 with capacity 16,\nan edge from node 0 to node 7 with capacity 18,\nan edge from node 0 to node 11 with capacity 7,\nan edge from node 0 to node 1 with capacity 19,\nan edge from node 0 to node 10 with capacity 19,\nan edge from node 0 to node 8 with capacity 5,\nan edge from node 0 to node 18 with capacity 8,\nan edge from node 1 to node 4 with capacity 7,\nan edge from node 1 to node 7 with capacity 4,\nan edge from node 1 to node 17 with capacity 15,\nan edge from node 1 to node 12 with capacity 14,\nan edge from node 1 to node 14 with capacity 7,\nan edge from node 1 to node 18 with capacity 11,\nan edge from node 2 to node 4 with capacity 4,\nan edge from node 2 to node 9 with capacity 3,\nan edge from node 2 to node 3 with capacity 5,\nan edge from node 3 to node 1 with capacity 18,\nan edge from node 3 to node 6 with capacity 15,\nan edge from node 3 to node 0 with capacity 11,\nan edge from node 4 to node 5 with capacity 9,\nan edge from node 4 to node 1 with capacity 16,\nan edge from node 4 to node 9 with capacity 3,\nan edge from node 4 to node 2 with capacity 17,\nan edge from node 4 to node 8 with capacity 10,\nan edge from node 4 to node 3 with capacity 1,\nan edge from node 5 to node 7 with capacity 4,\nan edge from node 5 to node 17 with capacity 9,\nan edge from node 5 to node 12 with capacity 2,\nan edge from node 5 to node 2 with capacity 5,\nan edge from node 5 to node 6 with capacity 13,\nan edge from node 5 to node 15 with capacity 10,\nan edge from node 5 to node 18 with capacity 14,\nan edge from node 5 to node 16 with capacity 16,\nan edge from node 6 to node 4 with capacity 5,\nan edge from node 6 to node 7 with capacity 10,\nan edge from node 6 to node 11 with capacity 18,\nan edge from node 6 to node 8 with capacity 9,\nan edge from node 6 to node 0 with capacity 13,\nan edge from node 6 to node 18 with capacity 8,\nan edge from node 6 to node 3 with capacity 2,\nan edge from node 7 to node 5 with capacity 6,\nan edge from node 7 to node 17 with capacity 6,\nan edge from node 7 to node 12 with capacity 18,\nan edge from node 7 to node 9 with capacity 11,\nan edge from node 7 to node 13 with capacity 15,\nan edge from node 7 to node 14 with capacity 13,\nan edge from node 7 to node 15 with capacity 18,\nan edge from node 7 to node 3 with capacity 19,\nan edge from node 8 to node 4 with capacity 17,\nan edge from node 8 to node 12 with capacity 14,\nan edge from node 8 to node 11 with capacity 19,\nan edge from node 8 to node 1 with capacity 15,\nan edge from node 8 to node 2 with capacity 11,\nan edge from node 8 to node 15 with capacity 7,\nan edge from node 8 to node 0 with capacity 17,\nan edge from node 9 to node 14 with capacity 2,\nan edge from node 9 to node 15 with capacity 4,\nan edge from node 9 to node 16 with capacity 10,\nan edge from node 9 to node 3 with capacity 2,\nan edge from node 10 to node 7 with capacity 20,\nan edge from node 10 to node 17 with capacity 17,\nan edge from node 10 to node 12 with capacity 11,\nan edge from node 10 to node 8 with capacity 1,\nan edge from node 10 to node 6 with capacity 8,\nan edge from node 10 to node 3 with capacity 2,\nan edge from node 11 to node 8 with capacity 19,\nan edge from node 11 to node 15 with capacity 2,\nan edge from node 12 to node 13 with capacity 9,\nan edge from node 12 to node 15 with capacity 8,\nan edge from node 12 to node 0 with capacity 16,\nan edge from node 13 to node 4 with capacity 3,\nan edge from node 13 to node 5 with capacity 20,\nan edge from node 13 to node 11 with capacity 10,\nan edge from node 13 to node 2 with capacity 14,\nan edge from node 13 to node 8 with capacity 20,\nan edge from node 13 to node 6 with capacity 16,\nan edge from node 13 to node 0 with capacity 10,\nan edge from node 13 to node 16 with capacity 16,\nan edge from node 14 to node 10 with capacity 8,\nan edge from node 14 to node 15 with capacity 3,\nan edge from node 14 to node 18 with capacity 6,\nan edge from node 15 to node 4 with capacity 6,\nan edge from node 15 to node 12 with capacity 3,\nan edge from node 15 to node 11 with capacity 9,\nan edge from node 15 to node 9 with capacity 18,\nan edge from node 15 to node 13 with capacity 20,\nan edge from node 16 to node 7 with capacity 5,\nan edge from node 16 to node 8 with capacity 6,\nan edge from node 16 to node 6 with capacity 8,\nan edge from node 16 to node 15 with capacity 16,\nan edge from node 16 to node 3 with capacity 19,\nan edge from node 17 to node 7 with capacity 13,\nan edge from node 17 to node 12 with capacity 9,\nan edge from node 17 to node 8 with capacity 11,\nan edge from node 17 to node 6 with capacity 15,\nan edge from node 17 to node 0 with capacity 5,\nan edge from node 18 to node 4 with capacity 14,\nan edge from node 18 to node 13 with capacity 20,\nan edge from node 18 to node 15 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 9, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 51, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 8 with capacity 8, an edge from node 1 to node 3 with capacity 9, an edge from node 1 to node 2 with capacity 3, an edge from node 2 to node 6 with capacity 5, an edge from node 2 to node 8 with capacity 8, an edge from node 3 to node 8 with capacity 7, an edge from node 4 to node 3 with capacity 3, an edge from node 5 to node 7 with capacity 2, an edge from node 5 to node 6 with capacity 1, an edge from node 5 to node 2 with capacity 8, an edge from node 6 to node 8 with capacity 8, an edge from node 7 to node 8 with capacity 2, an edge from node 7 to node 5 with capacity 5, an edge from node 8 to node 7 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 52, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 1 with capacity 14,\nan edge from node 0 to node 2 with capacity 4,\nan edge from node 1 to node 6 with capacity 20,\nan edge from node 1 to node 7 with capacity 14,\nan edge from node 1 to node 0 with capacity 13,\nan edge from node 1 to node 10 with capacity 13,\nan edge from node 2 to node 7 with capacity 8,\nan edge from node 2 to node 1 with capacity 7,\nan edge from node 2 to node 3 with capacity 5,\nan edge from node 2 to node 10 with capacity 20,\nan edge from node 3 to node 4 with capacity 9,\nan edge from node 3 to node 6 with capacity 14,\nan edge from node 4 to node 9 with capacity 11,\nan edge from node 4 to node 7 with capacity 10,\nan edge from node 4 to node 0 with capacity 13,\nan edge from node 4 to node 2 with capacity 17,\nan edge from node 5 to node 4 with capacity 3,\nan edge from node 5 to node 7 with capacity 4,\nan edge from node 5 to node 0 with capacity 14,\nan edge from node 6 to node 9 with capacity 2,\nan edge from node 6 to node 1 with capacity 4,\nan edge from node 6 to node 2 with capacity 18,\nan edge from node 6 to node 3 with capacity 15,\nan edge from node 6 to node 5 with capacity 7,\nan edge from node 7 to node 4 with capacity 12,\nan edge from node 7 to node 3 with capacity 2,\nan edge from node 7 to node 10 with capacity 14,\nan edge from node 7 to node 5 with capacity 1,\nan edge from node 8 to node 9 with capacity 16,\nan edge from node 8 to node 0 with capacity 15,\nan edge from node 8 to node 2 with capacity 19,\nan edge from node 8 to node 10 with capacity 15,\nan edge from node 9 to node 2 with capacity 13,\nan edge from node 9 to node 3 with capacity 12,\nan edge from node 10 to node 9 with capacity 14,\nan edge from node 10 to node 8 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 53, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 19 with capacity 2,\nan edge from node 0 to node 7 with capacity 1,\nan edge from node 0 to node 1 with capacity 3,\nan edge from node 0 to node 5 with capacity 15,\nan edge from node 0 to node 16 with capacity 17,\nan edge from node 1 to node 17 with capacity 5,\nan edge from node 1 to node 9 with capacity 18,\nan edge from node 2 to node 12 with capacity 6,\nan edge from node 2 to node 5 with capacity 20,\nan edge from node 2 to node 0 with capacity 11,\nan edge from node 2 to node 9 with capacity 3,\nan edge from node 2 to node 15 with capacity 1,\nan edge from node 3 to node 19 with capacity 16,\nan edge from node 3 to node 0 with capacity 12,\nan edge from node 3 to node 15 with capacity 7,\nan edge from node 4 to node 19 with capacity 19,\nan edge from node 4 to node 1 with capacity 3,\nan edge from node 4 to node 16 with capacity 20,\nan edge from node 4 to node 9 with capacity 10,\nan edge from node 4 to node 6 with capacity 6,\nan edge from node 4 to node 14 with capacity 20,\nan edge from node 5 to node 10 with capacity 17,\nan edge from node 5 to node 13 with capacity 8,\nan edge from node 5 to node 1 with capacity 14,\nan edge from node 5 to node 17 with capacity 18,\nan edge from node 5 to node 15 with capacity 6,\nan edge from node 5 to node 8 with capacity 12,\nan edge from node 6 to node 10 with capacity 11,\nan edge from node 6 to node 1 with capacity 14,\nan edge from node 6 to node 9 with capacity 15,\nan edge from node 6 to node 3 with capacity 18,\nan edge from node 6 to node 14 with capacity 4,\nan edge from node 7 to node 12 with capacity 10,\nan edge from node 7 to node 10 with capacity 9,\nan edge from node 7 to node 1 with capacity 17,\nan edge from node 7 to node 6 with capacity 2,\nan edge from node 8 to node 12 with capacity 4,\nan edge from node 8 to node 7 with capacity 20,\nan edge from node 8 to node 5 with capacity 16,\nan edge from node 8 to node 0 with capacity 11,\nan edge from node 8 to node 16 with capacity 14,\nan edge from node 8 to node 4 with capacity 17,\nan edge from node 8 to node 2 with capacity 3,\nan edge from node 9 to node 1 with capacity 20,\nan edge from node 9 to node 5 with capacity 19,\nan edge from node 9 to node 15 with capacity 8,\nan edge from node 9 to node 6 with capacity 10,\nan edge from node 10 to node 11 with capacity 14,\nan edge from node 10 to node 6 with capacity 11,\nan edge from node 11 to node 10 with capacity 13,\nan edge from node 11 to node 13 with capacity 16,\nan edge from node 11 to node 7 with capacity 16,\nan edge from node 11 to node 14 with capacity 2,\nan edge from node 12 to node 18 with capacity 4,\nan edge from node 12 to node 13 with capacity 20,\nan edge from node 12 to node 3 with capacity 18,\nan edge from node 13 to node 19 with capacity 8,\nan edge from node 13 to node 0 with capacity 14,\nan edge from node 13 to node 3 with capacity 4,\nan edge from node 14 to node 5 with capacity 17,\nan edge from node 14 to node 3 with capacity 17,\nan edge from node 15 to node 17 with capacity 2,\nan edge from node 15 to node 9 with capacity 12,\nan edge from node 15 to node 3 with capacity 17,\nan edge from node 15 to node 14 with capacity 19,\nan edge from node 16 to node 19 with capacity 20,\nan edge from node 16 to node 0 with capacity 5,\nan edge from node 16 to node 4 with capacity 16,\nan edge from node 16 to node 17 with capacity 9,\nan edge from node 16 to node 15 with capacity 9,\nan edge from node 16 to node 14 with capacity 10,\nan edge from node 17 to node 18 with capacity 4,\nan edge from node 17 to node 5 with capacity 8,\nan edge from node 17 to node 9 with capacity 11,\nan edge from node 17 to node 11 with capacity 3,\nan edge from node 17 to node 6 with capacity 11,\nan edge from node 18 to node 0 with capacity 19,\nan edge from node 18 to node 6 with capacity 17,\nan edge from node 19 to node 18 with capacity 9,\nan edge from node 19 to node 9 with capacity 15,\nan edge from node 19 to node 14 with capacity 20.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 19 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 19, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 54, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 12 with capacity 20,\nan edge from node 0 to node 11 with capacity 11,\nan edge from node 1 to node 4 with capacity 16,\nan edge from node 1 to node 11 with capacity 7,\nan edge from node 2 to node 7 with capacity 14,\nan edge from node 2 to node 11 with capacity 6,\nan edge from node 3 to node 9 with capacity 20,\nan edge from node 3 to node 4 with capacity 4,\nan edge from node 3 to node 11 with capacity 16,\nan edge from node 4 to node 8 with capacity 7,\nan edge from node 4 to node 5 with capacity 8,\nan edge from node 4 to node 0 with capacity 6,\nan edge from node 5 to node 8 with capacity 13,\nan edge from node 5 to node 9 with capacity 11,\nan edge from node 5 to node 3 with capacity 17,\nan edge from node 5 to node 4 with capacity 3,\nan edge from node 6 to node 10 with capacity 7,\nan edge from node 6 to node 7 with capacity 11,\nan edge from node 6 to node 2 with capacity 12,\nan edge from node 6 to node 5 with capacity 10,\nan edge from node 6 to node 13 with capacity 6,\nan edge from node 6 to node 4 with capacity 1,\nan edge from node 6 to node 0 with capacity 12,\nan edge from node 7 to node 6 with capacity 11,\nan edge from node 8 to node 10 with capacity 1,\nan edge from node 8 to node 13 with capacity 6,\nan edge from node 9 to node 8 with capacity 17,\nan edge from node 9 to node 1 with capacity 14,\nan edge from node 9 to node 13 with capacity 4,\nan edge from node 9 to node 0 with capacity 1,\nan edge from node 10 to node 12 with capacity 19,\nan edge from node 10 to node 1 with capacity 8,\nan edge from node 10 to node 2 with capacity 15,\nan edge from node 10 to node 0 with capacity 4,\nan edge from node 11 to node 6 with capacity 18,\nan edge from node 11 to node 8 with capacity 14,\nan edge from node 11 to node 9 with capacity 4,\nan edge from node 11 to node 10 with capacity 15,\nan edge from node 11 to node 1 with capacity 8,\nan edge from node 11 to node 2 with capacity 4,\nan edge from node 12 to node 6 with capacity 11,\nan edge from node 12 to node 8 with capacity 1,\nan edge from node 12 to node 7 with capacity 15,\nan edge from node 12 to node 13 with capacity 9,\nan edge from node 12 to node 4 with capacity 18,\nan edge from node 13 to node 10 with capacity 19,\nan edge from node 13 to node 5 with capacity 12,\nan edge from node 13 to node 11 with capacity 5,\nan edge from node 13 to node 0 with capacity 5.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 13\nflow_value, flow_dict = nx.maximum_flow(G, 2, 13, capacity='weight')\nprint(flow_value)\n```"}, {"id": 55, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(17, weight:19), (11, weight:10), (7, weight:8), (10, weight:9), (9, weight:2), (1, weight:11)],\nnode1: [(11, weight:19), (10, weight:1), (16, weight:16), (6, weight:10)],\nnode2: [(17, weight:2), (15, weight:17), (19, weight:13), (7, weight:15), (4, weight:9)],\nnode3: [(17, weight:2), (5, weight:2), (9, weight:3)],\nnode4: [(0, weight:2), (17, weight:7), (7, weight:20), (10, weight:5), (2, weight:16), (1, weight:10), (16, weight:14)],\nnode5: [(3, weight:3), (17, weight:13), (14, weight:13), (11, weight:16), (8, weight:6), (1, weight:13)],\nnode6: [(0, weight:12), (17, weight:11), (16, weight:9)],\nnode7: [(10, weight:11), (5, weight:10), (2, weight:16), (1, weight:7), (16, weight:14), (6, weight:18)],\nnode8: [(17, weight:7), (7, weight:18), (5, weight:8), (16, weight:4)],\nnode9: [(15, weight:12), (11, weight:18), (13, weight:17), (4, weight:9), (12, weight:11)],\nnode10: [(14, weight:9), (9, weight:8), (2, weight:7)],\nnode11: [(15, weight:1), (12, weight:4)],\nnode12: [(14, weight:17), (7, weight:10), (8, weight:15), (13, weight:17), (4, weight:20), (5, weight:18), (9, weight:8), (2, weight:6), (1, weight:19)],\nnode13: [(3, weight:7), (18, weight:8), (4, weight:19), (9, weight:6)],\nnode14: [(13, weight:13), (5, weight:12), (1, weight:12)],\nnode15: [(3, weight:10), (7, weight:5), (8, weight:12), (10, weight:8), (5, weight:19), (6, weight:17)],\nnode16: [(17, weight:12), (11, weight:1), (8, weight:7), (12, weight:8)],\nnode17: [(15, weight:19), (11, weight:7), (8, weight:9), (12, weight:12), (2, weight:3), (6, weight:6)],\nnode18: [(19, weight:5)],\nnode19: [(0, weight:15), (17, weight:15), (15, weight:19), (18, weight:11), (11, weight:9), (9, weight:5), (2, weight:7), (1, weight:4)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+) \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 16\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 13, 16, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 56, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, capacity:15), (13, capacity:3), (7, capacity:15), (1, capacity:18)],\nnode1: [(14, capacity:2), (11, capacity:4), (9, capacity:11), (6, capacity:3)],\nnode2: [(4, capacity:12), (14, capacity:7), (10, capacity:18), (6, capacity:20), (8, capacity:20)],\nnode3: [(2, capacity:2), (1, capacity:5)],\nnode4: [(14, capacity:2), (11, capacity:20), (1, capacity:12)],\nnode5: [(4, capacity:18), (14, capacity:6), (10, capacity:10), (8, capacity:1)],\nnode6: [(4, capacity:8), (11, capacity:18), (12, capacity:13), (10, capacity:16)],\nnode7: [(4, capacity:19), (3, capacity:8), (12, capacity:14), (1, capacity:9)],\nnode8: [(9, capacity:8), (0, capacity:20), (12, capacity:6), (7, capacity:6), (6, capacity:19), (2, capacity:18)],\nnode9: [(4, capacity:10), (14, capacity:4), (5, capacity:3), (13, capacity:1), (7, capacity:14), (10, capacity:12)],\nnode10: [(4, capacity:4), (2, capacity:11)],\nnode11: [(14, capacity:8)],\nnode12: [(4, capacity:17), (5, capacity:3), (9, capacity:7), (13, capacity:9)],\nnode13: [(12, capacity:19), (10, capacity:10), (8, capacity:16)],\nnode14: [(11, capacity:5), (12, capacity:4), (8, capacity:8)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 3 to node 14\nflow_value, flow_dict = nx.maximum_flow(G, 3, 14, capacity='capacity')\nprint(flow_value)\n```"}, {"id": 57, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 5 with capacity 2, an edge from node 0 to node 4 with capacity 4, an edge from node 1 to node 0 with capacity 8, an edge from node 2 to node 3 with capacity 3, an edge from node 3 to node 4 with capacity 8, an edge from node 4 to node 2 with capacity 5, an edge from node 4 to node 0 with capacity 6, an edge from node 4 to node 3 with capacity 8, an edge from node 5 to node 4 with capacity 5, an edge from node 5 to node 3 with capacity 8, an edge from node 6 to node 1 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 58, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 4, an edge from node 1 to node 0 with capacity 9, an edge from node 2 to node 0 with capacity 3, an edge from node 3 to node 0 with capacity 1, an edge from node 4 to node 0 with capacity 8, an edge from node 4 to node 2 with capacity 8, an edge from node 4 to node 3 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 59, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an edge from node 0 to node 3 with capacity 7, an edge from node 0 to node 2 with capacity 9, an edge from node 1 to node 7 with capacity 10, an edge from node 1 to node 6 with capacity 8, an edge from node 1 to node 3 with capacity 4, an edge from node 2 to node 1 with capacity 3, an edge from node 2 to node 5 with capacity 9, an edge from node 3 to node 5 with capacity 2, an edge from node 3 to node 6 with capacity 4, an edge from node 4 to node 8 with capacity 4, an edge from node 4 to node 0 with capacity 9, an edge from node 5 to node 6 with capacity 1, an edge from node 7 to node 1 with capacity 1, an edge from node 7 to node 8 with capacity 8, an edge from node 7 to node 0 with capacity 6, an edge from node 7 to node 2 with capacity 9, an edge from node 8 to node 3 with capacity 9, an edge from node 8 to node 2 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 6\nflow_value, flow_dict = nx.maximum_flow(G, 0, 6, capacity='weight')\nprint(flow_value)\n```"}, {"id": 60, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(10, capacity:5), (7, capacity:13), (4, capacity:20), (3, capacity:2), (9, capacity:18)],\nnode1: [(5, capacity:8), (4, capacity:19), (13, capacity:1), (9, capacity:2)],\nnode2: [(8, capacity:7), (9, capacity:18)],\nnode3: [(0, capacity:16), (2, capacity:14), (7, capacity:12)],\nnode4: [(0, capacity:16), (12, capacity:15), (15, capacity:17), (3, capacity:2), (6, capacity:3)],\nnode5: [(0, capacity:9), (2, capacity:2), (7, capacity:7), (11, capacity:12)],\nnode6: [(11, capacity:10), (13, capacity:6)],\nnode7: [(10, capacity:1), (12, capacity:10), (8, capacity:14), (13, capacity:7), (3, capacity:19)],\nnode8: [(2, capacity:2), (10, capacity:8), (3, capacity:13)],\nnode9: [(8, capacity:16), (6, capacity:13)],\nnode10: [(2, capacity:15), (7, capacity:2), (12, capacity:9), (8, capacity:2), (5, capacity:9), (3, capacity:11), (9, capacity:6), (6, capacity:16)],\nnode11: [(0, capacity:17), (14, capacity:17), (4, capacity:20)],\nnode12: [(7, capacity:11), (8, capacity:20), (9, capacity:13), (6, capacity:4)],\nnode13: [(2, capacity:19), (11, capacity:3)],\nnode14: [(10, capacity:11), (7, capacity:2), (11, capacity:9), (4, capacity:17), (3, capacity:20), (6, capacity:7)],\nnode15: [(7, capacity:6), (12, capacity:20), (1, capacity:7), (4, capacity:18)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 9, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 61, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 2 with capacity 5, an edge from node 0 to node 1 with capacity 6, an edge from node 0 to node 6 with capacity 6, an edge from node 1 to node 8 with capacity 10, an edge from node 2 to node 1 with capacity 6, an edge from node 2 to node 4 with capacity 7, an edge from node 3 to node 1 with capacity 1, an edge from node 3 to node 7 with capacity 2, an edge from node 3 to node 0 with capacity 10, an edge from node 4 to node 1 with capacity 8, an edge from node 5 to node 3 with capacity 7, an edge from node 5 to node 7 with capacity 1, an edge from node 6 to node 5 with capacity 6, an edge from node 6 to node 3 with capacity 10, an edge from node 6 to node 4 with capacity 9, an edge from node 7 to node 5 with capacity 5, an edge from node 7 to node 8 with capacity 6, an edge from node 7 to node 4 with capacity 3, an edge from node 8 to node 1 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 8\nflow_value, flow_dict = nx.maximum_flow(G, 7, 8, capacity='weight')\nprint(flow_value)\n```"}, {"id": 62, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(1, capacity:15), (13, capacity:14), (17, capacity:7), (2, capacity:17), (8, capacity:4), (9, capacity:5), (11, capacity:11), (5, capacity:4)],\nnode1: [(14, capacity:16), (13, capacity:10), (9, capacity:2), (18, capacity:4)],\nnode2: [(3, capacity:3), (0, capacity:9), (14, capacity:6), (8, capacity:8), (12, capacity:18), (11, capacity:5)],\nnode3: [(8, capacity:17), (11, capacity:19)],\nnode4: [(3, capacity:17), (14, capacity:11), (13, capacity:15), (18, capacity:5), (5, capacity:20)],\nnode5: [(6, capacity:18), (9, capacity:14)],\nnode6: [(3, capacity:14), (0, capacity:4), (1, capacity:5), (10, capacity:19), (2, capacity:15), (16, capacity:12), (7, capacity:12), (18, capacity:18), (4, capacity:20)],\nnode7: [(3, capacity:8), (14, capacity:14), (1, capacity:16), (10, capacity:9), (6, capacity:10), (9, capacity:18), (18, capacity:13), (4, capacity:13)],\nnode8: [(0, capacity:16), (14, capacity:13), (1, capacity:3), (6, capacity:15), (4, capacity:9)],\nnode9: [(0, capacity:10), (17, capacity:6), (6, capacity:10), (11, capacity:6)],\nnode10: [(1, capacity:3), (17, capacity:3), (18, capacity:2)],\nnode11: [(0, capacity:15), (14, capacity:5), (16, capacity:4), (6, capacity:8), (9, capacity:12), (18, capacity:6), (5, capacity:8)],\nnode12: [(1, capacity:4), (17, capacity:4), (8, capacity:18), (15, capacity:11)],\nnode13: [(14, capacity:3), (1, capacity:18), (6, capacity:10)],\nnode14: [(13, capacity:20), (2, capacity:18), (7, capacity:14), (6, capacity:19), (15, capacity:14), (18, capacity:10)],\nnode15: [(13, capacity:11), (10, capacity:10), (8, capacity:11), (18, capacity:19), (4, capacity:5)],\nnode16: [(0, capacity:8), (18, capacity:3), (5, capacity:5)],\nnode17: [(3, capacity:10), (13, capacity:13), (16, capacity:18), (12, capacity:15), (11, capacity:17), (4, capacity:3), (5, capacity:4)],\nnode18: [(3, capacity:14), (13, capacity:7), (17, capacity:16), (12, capacity:1), (15, capacity:3)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for edge, weight in edge_matches:\n        G.add_edge(int(node), int(edge), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 12\nflow_value, flow_dict = nx.maximum_flow(G, 1, 12, capacity='weight')\nprint(flow_value)\n```"}, {"id": 63, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 6 with capacity 14,\nan edge from node 0 to node 4 with capacity 4,\nan edge from node 0 to node 1 with capacity 14,\nan edge from node 0 to node 12 with capacity 12,\nan edge from node 1 to node 7 with capacity 10,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 9 with capacity 8,\nan edge from node 2 to node 0 with capacity 5,\nan edge from node 2 to node 4 with capacity 13,\nan edge from node 3 to node 13 with capacity 5,\nan edge from node 4 to node 12 with capacity 17,\nan edge from node 4 to node 11 with capacity 1,\nan edge from node 5 to node 7 with capacity 5,\nan edge from node 5 to node 6 with capacity 4,\nan edge from node 5 to node 3 with capacity 13,\nan edge from node 6 to node 2 with capacity 9,\nan edge from node 6 to node 1 with capacity 6,\nan edge from node 6 to node 13 with capacity 17,\nan edge from node 7 to node 8 with capacity 15,\nan edge from node 7 to node 6 with capacity 15,\nan edge from node 7 to node 1 with capacity 12,\nan edge from node 8 to node 4 with capacity 9,\nan edge from node 9 to node 5 with capacity 16,\nan edge from node 10 to node 6 with capacity 12,\nan edge from node 10 to node 1 with capacity 2,\nan edge from node 10 to node 13 with capacity 11,\nan edge from node 10 to node 11 with capacity 5,\nan edge from node 11 to node 5 with capacity 19,\nan edge from node 11 to node 12 with capacity 15,\nan edge from node 12 to node 7 with capacity 12,\nan edge from node 12 to node 4 with capacity 13,\nan edge from node 12 to node 3 with capacity 19,\nan edge from node 13 to node 10 with capacity 13,\nan edge from node 13 to node 7 with capacity 8,\nan edge from node 13 to node 8 with capacity 1,\nan edge from node 13 to node 5 with capacity 9,\nan edge from node 13 to node 9 with capacity 2,\nan edge from node 13 to node 6 with capacity 19.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 64, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(7, weight:17), (13, weight:9)],\nnode1: [(9, weight:3)],\nnode2: [(4, weight:8), (15, weight:20), (5, weight:13), (10, weight:9), (0, weight:5)],\nnode3: [(15, weight:10)],\nnode4: [(7, weight:6), (15, weight:11), (1, weight:3), (5, weight:11), (17, weight:4), (12, weight:4), (2, weight:2)],\nnode5: [(1, weight:19), (17, weight:2), (3, weight:7), (12, weight:8), (11, weight:10)],\nnode6: [(8, weight:1), (11, weight:12), (16, weight:3), (14, weight:19)],\nnode7: [(1, weight:16), (6, weight:3)],\nnode8: [(15, weight:18)],\nnode9: [(15, weight:12), (3, weight:2), (8, weight:16), (10, weight:1), (16, weight:14)],\nnode10: [(7, weight:17), (13, weight:15), (6, weight:18)],\nnode11: [(4, weight:17), (5, weight:18), (8, weight:10), (13, weight:12), (0, weight:7)],\nnode12: [(4, weight:2), (15, weight:2), (13, weight:2)],\nnode13: [(7, weight:10), (3, weight:18), (12, weight:5), (16, weight:6)],\nnode14: [(7, weight:8), (4, weight:12), (17, weight:17), (3, weight:1), (0, weight:5)],\nnode15: [(12, weight:4), (6, weight:1)],\nnode16: [(15, weight:16), (5, weight:20)],\nnode17: [(7, weight:19), (4, weight:7), (15, weight:12), (0, weight:1)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 10\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 13, 10, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 65, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 6 with capacity 14,\nan edge from node 0 to node 10 with capacity 6,\nan edge from node 0 to node 7 with capacity 1,\nan edge from node 0 to node 8 with capacity 9,\nan edge from node 1 to node 7 with capacity 17,\nan edge from node 1 to node 8 with capacity 7,\nan edge from node 3 to node 4 with capacity 15,\nan edge from node 3 to node 9 with capacity 6,\nan edge from node 3 to node 5 with capacity 14,\nan edge from node 4 to node 1 with capacity 13,\nan edge from node 4 to node 7 with capacity 7,\nan edge from node 5 to node 1 with capacity 7,\nan edge from node 5 to node 7 with capacity 4,\nan edge from node 6 to node 8 with capacity 17,\nan edge from node 7 to node 4 with capacity 1,\nan edge from node 7 to node 3 with capacity 6,\nan edge from node 8 to node 6 with capacity 5,\nan edge from node 8 to node 9 with capacity 9,\nan edge from node 8 to node 5 with capacity 3,\nan edge from node 8 to node 0 with capacity 17,\nan edge from node 8 to node 2 with capacity 2,\nan edge from node 9 to node 1 with capacity 12,\nan edge from node 9 to node 10 with capacity 12,\nan edge from node 9 to node 7 with capacity 20,\nan edge from node 10 to node 4 with capacity 17,\nan edge from node 10 to node 9 with capacity 5,\nan edge from node 10 to node 5 with capacity 13,\nan edge from node 10 to node 0 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 66, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 9 with capacity 17,\nan edge from node 0 to node 8 with capacity 17,\nan edge from node 0 to node 17 with capacity 6,\nan edge from node 0 to node 3 with capacity 2,\nan edge from node 0 to node 4 with capacity 19,\nan edge from node 0 to node 10 with capacity 2,\nan edge from node 1 to node 9 with capacity 7,\nan edge from node 1 to node 16 with capacity 5,\nan edge from node 1 to node 4 with capacity 18,\nan edge from node 1 to node 13 with capacity 2,\nan edge from node 1 to node 6 with capacity 5,\nan edge from node 1 to node 15 with capacity 12,\nan edge from node 2 to node 1 with capacity 12,\nan edge from node 2 to node 17 with capacity 11,\nan edge from node 2 to node 4 with capacity 18,\nan edge from node 2 to node 13 with capacity 15,\nan edge from node 2 to node 5 with capacity 12,\nan edge from node 3 to node 4 with capacity 3,\nan edge from node 3 to node 0 with capacity 6,\nan edge from node 3 to node 6 with capacity 2,\nan edge from node 3 to node 15 with capacity 1,\nan edge from node 3 to node 10 with capacity 4,\nan edge from node 4 to node 17 with capacity 20,\nan edge from node 4 to node 13 with capacity 13,\nan edge from node 4 to node 7 with capacity 12,\nan edge from node 4 to node 12 with capacity 12,\nan edge from node 5 to node 11 with capacity 10,\nan edge from node 6 to node 9 with capacity 19,\nan edge from node 6 to node 2 with capacity 8,\nan edge from node 6 to node 5 with capacity 17,\nan edge from node 6 to node 12 with capacity 10,\nan edge from node 7 to node 9 with capacity 12,\nan edge from node 7 to node 16 with capacity 16,\nan edge from node 7 to node 4 with capacity 9,\nan edge from node 7 to node 2 with capacity 11,\nan edge from node 7 to node 11 with capacity 14,\nan edge from node 8 to node 9 with capacity 15,\nan edge from node 8 to node 1 with capacity 8,\nan edge from node 8 to node 3 with capacity 3,\nan edge from node 8 to node 4 with capacity 7,\nan edge from node 8 to node 11 with capacity 15,\nan edge from node 9 to node 13 with capacity 12,\nan edge from node 9 to node 2 with capacity 3,\nan edge from node 9 to node 5 with capacity 2,\nan edge from node 9 to node 10 with capacity 1,\nan edge from node 10 to node 9 with capacity 6,\nan edge from node 10 to node 1 with capacity 20,\nan edge from node 10 to node 3 with capacity 7,\nan edge from node 10 to node 4 with capacity 9,\nan edge from node 10 to node 6 with capacity 17,\nan edge from node 10 to node 11 with capacity 3,\nan edge from node 10 to node 7 with capacity 17,\nan edge from node 11 to node 9 with capacity 14,\nan edge from node 11 to node 3 with capacity 18,\nan edge from node 11 to node 16 with capacity 11,\nan edge from node 11 to node 4 with capacity 16,\nan edge from node 11 to node 0 with capacity 6,\nan edge from node 12 to node 3 with capacity 5,\nan edge from node 12 to node 16 with capacity 11,\nan edge from node 12 to node 6 with capacity 3,\nan edge from node 13 to node 14 with capacity 19,\nan edge from node 13 to node 1 with capacity 18,\nan edge from node 13 to node 3 with capacity 17,\nan edge from node 13 to node 6 with capacity 6,\nan edge from node 14 to node 4 with capacity 3,\nan edge from node 14 to node 2 with capacity 19,\nan edge from node 14 to node 10 with capacity 11,\nan edge from node 15 to node 14 with capacity 8,\nan edge from node 15 to node 9 with capacity 19,\nan edge from node 15 to node 8 with capacity 17,\nan edge from node 15 to node 5 with capacity 6,\nan edge from node 15 to node 11 with capacity 9,\nan edge from node 15 to node 7 with capacity 9,\nan edge from node 16 to node 9 with capacity 7,\nan edge from node 16 to node 0 with capacity 20,\nan edge from node 16 to node 5 with capacity 14,\nan edge from node 16 to node 12 with capacity 8,\nan edge from node 16 to node 10 with capacity 12,\nan edge from node 17 to node 9 with capacity 14,\nan edge from node 17 to node 15 with capacity 18,\nan edge from node 17 to node 2 with capacity 20,\nan edge from node 17 to node 7 with capacity 18,\nan edge from node 17 to node 10 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 14 to node 4\nflow_value, flow_dict = nx.maximum_flow_cutoff(G, 14, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 67, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 5 with capacity 4, an edge from node 0 to node 2 with capacity 2, an edge from node 0 to node 8 with capacity 3, an edge from node 1 to node 4 with capacity 7, an edge from node 3 to node 5 with capacity 4, an edge from node 3 to node 0 with capacity 3, an edge from node 3 to node 8 with capacity 7, an edge from node 5 to node 6 with capacity 6, an edge from node 8 to node 5 with capacity 1, an edge from node 8 to node 3 with capacity 3, an edge from node 8 to node 7 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 68, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 4 with capacity 5, an edge from node 0 to node 3 with capacity 2, an edge from node 1 to node 9 with capacity 3, an edge from node 1 to node 2 with capacity 7, an edge from node 1 to node 7 with capacity 1, an edge from node 2 to node 0 with capacity 2, an edge from node 2 to node 8 with capacity 8, an edge from node 3 to node 2 with capacity 3, an edge from node 3 to node 7 with capacity 2, an edge from node 5 to node 9 with capacity 1, an edge from node 5 to node 6 with capacity 4, an edge from node 6 to node 0 with capacity 8, an edge from node 7 to node 4 with capacity 7, an edge from node 7 to node 5 with capacity 1, an edge from node 7 to node 2 with capacity 9, an edge from node 8 to node 1 with capacity 2, an edge from node 8 to node 2 with capacity 2, an edge from node 8 to node 6 with capacity 1, an edge from node 9 to node 5 with capacity 6, an edge from node 9 to node 8 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 69, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 5 with capacity 10, an edge from node 0 to node 1 with capacity 8, an edge from node 1 to node 5 with capacity 3, an edge from node 2 to node 5 with capacity 10, an edge from node 2 to node 0 with capacity 9, an edge from node 2 to node 3 with capacity 3, an edge from node 3 to node 6 with capacity 8, an edge from node 4 to node 1 with capacity 9, an edge from node 5 to node 2 with capacity 4, an edge from node 5 to node 3 with capacity 6, an edge from node 6 to node 0 with capacity 3, an edge from node 8 to node 5 with capacity 2, an edge from node 8 to node 1 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 0, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 70, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 5 with capacity 5, an edge from node 0 to node 2 with capacity 1, an edge from node 1 to node 3 with capacity 5, an edge from node 2 to node 3 with capacity 10, an edge from node 3 to node 1 with capacity 9, an edge from node 4 to node 3 with capacity 4, an edge from node 4 to node 1 with capacity 1, an edge from node 4 to node 2 with capacity 4, an edge from node 5 to node 2 with capacity 1, an edge from node 5 to node 0 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 71, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 1 with capacity 3, an edge from node 0 to node 5 with capacity 1, an edge from node 1 to node 5 with capacity 9, an edge from node 2 to node 4 with capacity 10, an edge from node 2 to node 3 with capacity 10, an edge from node 2 to node 0 with capacity 5, an edge from node 3 to node 0 with capacity 2, an edge from node 4 to node 3 with capacity 8, an edge from node 4 to node 5 with capacity 8, an edge from node 4 to node 6 with capacity 1, an edge from node 5 to node 0 with capacity 5, an edge from node 6 to node 4 with capacity 9, an edge from node 6 to node 5 with capacity 8, an edge from node 6 to node 0 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 72, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(14, weight:11), (8, weight:18), (10, weight:1), (18, weight:18), (2, weight:19)],\nnode1: [(11, weight:7), (14, weight:16), (17, weight:14), (9, weight:16), (0, weight:5), (3, weight:4), (15, weight:5), (13, weight:14)],\nnode2: [(5, weight:17), (14, weight:18), (17, weight:19), (15, weight:18), (18, weight:8), (19, weight:17), (4, weight:4), (1, weight:15), (13, weight:19)],\nnode3: [(5, weight:1), (7, weight:10)],\nnode4: [(5, weight:17), (17, weight:13)],\nnode5: [(12, weight:18), (16, weight:19), (0, weight:10), (8, weight:1), (19, weight:18), (1, weight:12)],\nnode6: [(11, weight:7), (0, weight:8), (15, weight:6), (18, weight:3), (2, weight:8), (7, weight:17)],\nnode7: [(5, weight:2), (16, weight:14), (17, weight:7), (9, weight:5), (0, weight:9), (3, weight:16), (15, weight:12), (2, weight:11), (1, weight:10), (13, weight:5)],\nnode8: [(12, weight:5), (16, weight:10), (0, weight:14), (18, weight:16), (4, weight:13)],\nnode9: [(12, weight:6), (17, weight:11), (19, weight:1), (7, weight:4)],\nnode10: [(9, weight:13), (3, weight:1), (8, weight:5), (6, weight:2)],\nnode11: [(5, weight:7), (17, weight:3), (9, weight:11), (15, weight:4), (18, weight:15), (4, weight:18)],\nnode12: [(11, weight:8), (5, weight:5), (0, weight:2), (18, weight:8), (19, weight:14), (13, weight:5)],\nnode13: [(5, weight:13), (10, weight:16), (15, weight:4), (4, weight:17)],\nnode14: [(11, weight:20), (12, weight:18), (10, weight:14), (15, weight:1), (4, weight:3)],\nnode15: [(16, weight:9), (10, weight:10), (18, weight:3), (2, weight:12)],\nnode16: [(11, weight:14), (5, weight:12), (12, weight:12), (6, weight:19), (19, weight:8), (4, weight:13)],\nnode17: [(11, weight:4), (12, weight:18), (19, weight:13), (13, weight:19)],\nnode18: [(14, weight:2), (12, weight:13), (17, weight:4), (1, weight:6), (13, weight:5)],\nnode19: [(12, weight:12), (3, weight:5), (15, weight:12), (6, weight:6), (7, weight:5), (13, weight:7)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 16\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 11, 16, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 73, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 1 to node 0 with capacity 6, an edge from node 1 to node 5 with capacity 5, an edge from node 2 to node 1 with capacity 8, an edge from node 2 to node 4 with capacity 8, an edge from node 3 to node 1 with capacity 2, an edge from node 3 to node 2 with capacity 9, an edge from node 3 to node 4 with capacity 4, an edge from node 4 to node 5 with capacity 4, an edge from node 5 to node 2 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 74, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 8, an edge from node 1 to node 3 with capacity 3, an edge from node 2 to node 4 with capacity 2, an edge from node 2 to node 3 with capacity 3, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 0 with capacity 6, an edge from node 4 to node 1 with capacity 1, an edge from node 4 to node 3 with capacity 3, an edge from node 4 to node 0 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 2, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 75, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 5 with capacity 8, an edge from node 1 to node 2 with capacity 6, an edge from node 1 to node 5 with capacity 3, an edge from node 1 to node 4 with capacity 6, an edge from node 3 to node 1 with capacity 7, an edge from node 3 to node 4 with capacity 3, an edge from node 3 to node 0 with capacity 5, an edge from node 4 to node 6 with capacity 3, an edge from node 4 to node 2 with capacity 1, an edge from node 5 to node 3 with capacity 2, an edge from node 5 to node 0 with capacity 5, an edge from node 6 to node 4 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 76, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 5 with capacity 9,\nan edge from node 0 to node 8 with capacity 14,\nan edge from node 1 to node 11 with capacity 18,\nan edge from node 1 to node 9 with capacity 12,\nan edge from node 1 to node 5 with capacity 14,\nan edge from node 1 to node 4 with capacity 12,\nan edge from node 2 to node 0 with capacity 2,\nan edge from node 2 to node 6 with capacity 19,\nan edge from node 2 to node 1 with capacity 11,\nan edge from node 2 to node 4 with capacity 10,\nan edge from node 3 to node 6 with capacity 13,\nan edge from node 4 to node 7 with capacity 11,\nan edge from node 5 to node 4 with capacity 5,\nan edge from node 6 to node 7 with capacity 6,\nan edge from node 6 to node 10 with capacity 13,\nan edge from node 6 to node 2 with capacity 3,\nan edge from node 7 to node 11 with capacity 12,\nan edge from node 7 to node 10 with capacity 19,\nan edge from node 7 to node 5 with capacity 18,\nan edge from node 7 to node 8 with capacity 3,\nan edge from node 7 to node 1 with capacity 4,\nan edge from node 8 to node 7 with capacity 4,\nan edge from node 10 to node 12 with capacity 15,\nan edge from node 10 to node 6 with capacity 7,\nan edge from node 10 to node 2 with capacity 15,\nan edge from node 11 to node 8 with capacity 2,\nan edge from node 11 to node 1 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 11\nflow_value, flow_dict = nx.maximum_flow(G, 8, 11, capacity='weight')\nprint(flow_value)\n```"}, {"id": 77, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 1 to node 3 with capacity 9, an edge from node 1 to node 8 with capacity 8, an edge from node 1 to node 6 with capacity 7, an edge from node 2 to node 1 with capacity 8, an edge from node 2 to node 7 with capacity 4, an edge from node 3 to node 8 with capacity 10, an edge from node 4 to node 1 with capacity 3, an edge from node 4 to node 5 with capacity 3, an edge from node 4 to node 6 with capacity 8, an edge from node 5 to node 4 with capacity 4, an edge from node 5 to node 8 with capacity 5, an edge from node 6 to node 7 with capacity 3, an edge from node 6 to node 5 with capacity 10, an edge from node 6 to node 8 with capacity 4, an edge from node 7 to node 3 with capacity 9, an edge from node 8 to node 0 with capacity 2, an edge from node 8 to node 5 with capacity 6, an edge from node 8 to node 3 with capacity 9, an edge from node 8 to node 4 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 78, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(9, weight:12), (11, weight:18), (10, weight:9), (12, weight:9)],\nnode1: [(11, weight:11), (10, weight:12), (12, weight:12)],\nnode2: [(9, weight:10), (6, weight:19), (14, weight:11)],\nnode3: [(4, weight:13), (5, weight:6), (2, weight:12), (12, weight:15)],\nnode4: [(6, weight:20), (3, weight:1)],\nnode5: [(9, weight:17), (0, weight:20)],\nnode6: [(7, weight:3), (12, weight:11), (13, weight:4)],\nnode7: [(8, weight:13), (0, weight:18), (12, weight:17), (13, weight:10)],\nnode8: [(7, weight:7), (10, weight:5)],\nnode9: [(7, weight:3), (11, weight:17), (6, weight:5), (10, weight:12), (15, weight:1), (3, weight:16), (13, weight:4)],\nnode10: [(9, weight:13), (11, weight:9)],\nnode11: [(7, weight:3), (1, weight:3), (5, weight:17), (8, weight:13), (14, weight:2)],\nnode12: [(11, weight:16), (10, weight:18)],\nnode13: [(7, weight:12), (1, weight:5), (14, weight:3), (12, weight:14)],\nnode14: [(6, weight:10), (8, weight:14), (2, weight:5), (13, weight:16)],\nnode15: [(10, weight:3), (8, weight:17), (2, weight:18), (14, weight:10)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 79, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(16, weight:9), (15, weight:5)],\nnode1: [(14, weight:9), (4, weight:17), (13, weight:11)],\nnode2: [(9, weight:11), (15, weight:9), (0, weight:4)],\nnode3: [(16, weight:13), (2, weight:11), (12, weight:13)],\nnode4: [(9, weight:14), (7, weight:20), (12, weight:18), (15, weight:4), (5, weight:12)],\nnode5: [(16, weight:19), (6, weight:9)],\nnode6: [(9, weight:17), (7, weight:12), (5, weight:6), (17, weight:15)],\nnode7: [(11, weight:5), (6, weight:14), (3, weight:3), (15, weight:14)],\nnode8: [(2, weight:2), (7, weight:15), (12, weight:16), (17, weight:13), (0, weight:6)],\nnode9: [(6, weight:4), (7, weight:8), (0, weight:3)],\nnode10: [(11, weight:9), (14, weight:17), (1, weight:19), (9, weight:18), (3, weight:3), (4, weight:9), (5, weight:3), (17, weight:13)],\nnode11: [(16, weight:8), (2, weight:6), (8, weight:18), (4, weight:13)],\nnode12: [(11, weight:19), (1, weight:17), (8, weight:16), (15, weight:13)],\nnode13: [(16, weight:20), (14, weight:9), (6, weight:14), (9, weight:16), (8, weight:7), (7, weight:1), (5, weight:7), (17, weight:14)],\nnode14: [(8, weight:14), (12, weight:8), (13, weight:4), (0, weight:12)],\nnode15: [(10, weight:13), (2, weight:14), (12, weight:14), (17, weight:5)],\nnode16: [(14, weight:20), (7, weight:17), (5, weight:16), (13, weight:1)],\nnode17: [(10, weight:20), (1, weight:17), (12, weight:3), (15, weight:9)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 13\nflow_value, flow_dict = nx.maximum_flow(G, 1, 13, capacity='weight')\nprint(flow_value)\n```"}, {"id": 80, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 5 with capacity 7, an edge from node 0 to node 1 with capacity 4, an edge from node 0 to node 4 with capacity 10, an edge from node 0 to node 2 with capacity 4, an edge from node 1 to node 5 with capacity 7, an edge from node 1 to node 2 with capacity 8, an edge from node 2 to node 3 with capacity 8, an edge from node 3 to node 5 with capacity 2, an edge from node 3 to node 1 with capacity 2, an edge from node 3 to node 4 with capacity 10, an edge from node 3 to node 2 with capacity 7, an edge from node 4 to node 0 with capacity 6, an edge from node 4 to node 5 with capacity 1, an edge from node 4 to node 1 with capacity 2, an edge from node 4 to node 2 with capacity 2, an edge from node 5 to node 4 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 81, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(18, capacity:1), (16, capacity:4), (3, capacity:6), (4, capacity:6), (11, capacity:11), (12, capacity:20)],\nnode1: [(9, capacity:13), (10, capacity:17), (12, capacity:3)],\nnode2: [(9, capacity:10), (0, capacity:11), (10, capacity:16), (4, capacity:17), (14, capacity:13), (1, capacity:15)],\nnode3: [(4, capacity:17), (7, capacity:6), (11, capacity:15)],\nnode4: [(9, capacity:10), (18, capacity:1), (16, capacity:10), (6, capacity:14), (12, capacity:7)],\nnode5: [(10, capacity:15)],\nnode6: [(9, capacity:15), (18, capacity:8), (16, capacity:19), (8, capacity:1), (2, capacity:1), (1, capacity:10)],\nnode7: [(18, capacity:16), (16, capacity:14), (8, capacity:3), (6, capacity:14), (17, capacity:10), (12, capacity:8)],\nnode8: [(18, capacity:2), (0, capacity:12), (16, capacity:13), (7, capacity:1), (11, capacity:14)],\nnode9: [(13, capacity:1), (14, capacity:19), (17, capacity:1), (1, capacity:10)],\nnode10: [(0, capacity:2), (8, capacity:11), (2, capacity:7), (12, capacity:13)],\nnode11: [(10, capacity:4), (15, capacity:3), (1, capacity:16), (12, capacity:2)],\nnode12: [(18, capacity:9), (0, capacity:12), (10, capacity:6), (5, capacity:18)],\nnode13: [(15, capacity:19), (14, capacity:5), (1, capacity:8)],\nnode14: [(16, capacity:5), (2, capacity:13), (7, capacity:4)],\nnode15: [(9, capacity:8), (5, capacity:15), (16, capacity:15), (17, capacity:11), (2, capacity:18), (11, capacity:17)],\nnode16: [(5, capacity:1)],\nnode17: [(3, capacity:9), (1, capacity:1)],\nnode18: [(13, capacity:2), (0, capacity:5), (16, capacity:13), (14, capacity:7), (7, capacity:11), (11, capacity:5)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 0 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 0, 1, capacity='capacity')\nprint(flow_value)\n```"}, {"id": 82, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode8: an edge from node 0 to node 7 with capacity 9,\nan edge from node 0 to node 9 with capacity 10,\nan edge from node 1 to node 6 with capacity 8,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 4 with capacity 3,\nan edge from node 2 to node 7 with capacity 4,\nan edge from node 2 to node 9 with capacity 10,\nan edge from node 2 to node 8 with capacity 2,\nan edge from node 3 to node 7 with capacity 10,\nan edge from node 3 to node 2 with capacity 3,\nan edge from node 3 to node 1 with capacity 3,\nan edge from node 3 to node 8 with capacity 2,\nan edge from node 4 to node 2 with capacity 3,\nan edge from node 4 to node 9 with capacity 10,\nan edge from node 4 to node 3 with capacity 1,\nan edge from node 5 to node 7 with capacity 7,\nan edge from node 6 to node 1 with capacity 1,\nan edge from node 7 to node 6 with capacity 4,\nan edge from node 7 to node 1 with capacity 7,\nan edge from node 8 to node 2 with capacity 9,\nan edge from node 9 to node 6 with capacity 8,\nan edge from node 9 to node 2 with capacity 4,\nan edge from node 9 to node 0 with capacity 3,\nan edge from node 9 to node 1 with capacity 3,\nan edge from node 9 to node 8 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 4, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 83, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 3 with capacity 7, an edge from node 1 to node 7 with capacity 9, an edge from node 2 to node 5 with capacity 3, an edge from node 3 to node 5 with capacity 1, an edge from node 3 to node 4 with capacity 7, an edge from node 3 to node 1 with capacity 10, an edge from node 3 to node 0 with capacity 2, an edge from node 5 to node 1 with capacity 7, an edge from node 5 to node 6 with capacity 1, an edge from node 6 to node 7 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 0, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 84, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 1 to node 8 with capacity 16,\nan edge from node 1 to node 0 with capacity 10,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 4 with capacity 13,\nan edge from node 2 to node 0 with capacity 19,\nan edge from node 2 to node 3 with capacity 11,\nan edge from node 2 to node 5 with capacity 10,\nan edge from node 3 to node 8 with capacity 15,\nan edge from node 3 to node 1 with capacity 13,\nan edge from node 3 to node 7 with capacity 13,\nan edge from node 3 to node 5 with capacity 11,\nan edge from node 4 to node 8 with capacity 12,\nan edge from node 4 to node 2 with capacity 7,\nan edge from node 5 to node 9 with capacity 14,\nan edge from node 5 to node 1 with capacity 1,\nan edge from node 6 to node 8 with capacity 7,\nan edge from node 6 to node 7 with capacity 9,\nan edge from node 6 to node 5 with capacity 15,\nan edge from node 7 to node 5 with capacity 18,\nan edge from node 7 to node 2 with capacity 1,\nan edge from node 8 to node 6 with capacity 17,\nan edge from node 8 to node 2 with capacity 12,\nan edge from node 9 to node 7 with capacity 17,\nan edge from node 9 to node 5 with capacity 17,\nan edge from node 10 to node 9 with capacity 1,\nan edge from node 10 to node 4 with capacity 5,\nan edge from node 10 to node 2 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 85, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(8, weight:1), (12, weight:18), (4, weight:4), (5, weight:16), (10, weight:11), (9, weight:2), (2, weight:5), (7, weight:15)],\nnode1: [(4, weight:10), (3, weight:5), (11, weight:15)],\nnode2: [(8, weight:14), (14, weight:14), (5, weight:18), (9, weight:9), (0, weight:13)],\nnode3: [(13, weight:13), (15, weight:14), (11, weight:16), (9, weight:8)],\nnode4: [(13, weight:17), (5, weight:18), (3, weight:4)],\nnode5: [(12, weight:17), (1, weight:13), (16, weight:7), (6, weight:3)],\nnode6: [(4, weight:6), (14, weight:6), (7, weight:9)],\nnode7: [(10, weight:13), (0, weight:11)],\nnode8: [(1, weight:13), (13, weight:13), (6, weight:13), (7, weight:3)],\nnode9: [(1, weight:6), (16, weight:15)],\nnode10: [(13, weight:13), (3, weight:10), (15, weight:5), (9, weight:20)],\nnode11: [(12, weight:4), (4, weight:18), (10, weight:2), (2, weight:3)],\nnode12: [(5, weight:20), (6, weight:9)],\nnode13: [(4, weight:11), (1, weight:14), (15, weight:3), (2, weight:3)],\nnode14: [(13, weight:3), (3, weight:16), (15, weight:10), (11, weight:11), (6, weight:3)],\nnode15: [(16, weight:17)],\nnode16: [(2, weight:5), (7, weight:12)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 16\nflow_value, flow_dict = nx.maximum_flow(G, 1, 16, capacity='weight')\nprint(flow_value)\n```"}, {"id": 86, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 6 with capacity 8, an edge from node 1 to node 6 with capacity 1, an edge from node 2 to node 1 with capacity 6, an edge from node 3 to node 1 with capacity 7, an edge from node 3 to node 7 with capacity 8, an edge from node 4 to node 5 with capacity 8, an edge from node 5 to node 3 with capacity 4, an edge from node 5 to node 1 with capacity 2, an edge from node 5 to node 4 with capacity 4, an edge from node 6 to node 4 with capacity 6, an edge from node 7 to node 2 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 87, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 9 with capacity 17,\nan edge from node 0 to node 7 with capacity 7,\nan edge from node 0 to node 11 with capacity 19,\nan edge from node 1 to node 9 with capacity 20,\nan edge from node 1 to node 0 with capacity 20,\nan edge from node 1 to node 10 with capacity 12,\nan edge from node 2 to node 4 with capacity 20,\nan edge from node 2 to node 9 with capacity 10,\nan edge from node 2 to node 5 with capacity 11,\nan edge from node 2 to node 3 with capacity 8,\nan edge from node 2 to node 11 with capacity 20,\nan edge from node 3 to node 4 with capacity 13,\nan edge from node 3 to node 9 with capacity 20,\nan edge from node 3 to node 7 with capacity 19,\nan edge from node 3 to node 8 with capacity 7,\nan edge from node 4 to node 9 with capacity 16,\nan edge from node 4 to node 7 with capacity 18,\nan edge from node 4 to node 8 with capacity 20,\nan edge from node 4 to node 12 with capacity 18,\nan edge from node 5 to node 2 with capacity 7,\nan edge from node 5 to node 9 with capacity 15,\nan edge from node 5 to node 3 with capacity 5,\nan edge from node 5 to node 11 with capacity 15,\nan edge from node 5 to node 12 with capacity 12,\nan edge from node 6 to node 5 with capacity 11,\nan edge from node 6 to node 0 with capacity 19,\nan edge from node 6 to node 11 with capacity 8,\nan edge from node 6 to node 12 with capacity 17,\nan edge from node 7 to node 2 with capacity 17,\nan edge from node 7 to node 0 with capacity 1,\nan edge from node 7 to node 3 with capacity 8,\nan edge from node 8 to node 4 with capacity 16,\nan edge from node 8 to node 1 with capacity 13,\nan edge from node 8 to node 9 with capacity 13,\nan edge from node 8 to node 11 with capacity 17,\nan edge from node 8 to node 6 with capacity 10,\nan edge from node 9 to node 4 with capacity 16,\nan edge from node 9 to node 6 with capacity 4,\nan edge from node 10 to node 2 with capacity 8,\nan edge from node 10 to node 11 with capacity 6,\nan edge from node 10 to node 12 with capacity 9,\nan edge from node 11 to node 5 with capacity 5,\nan edge from node 11 to node 3 with capacity 19,\nan edge from node 11 to node 8 with capacity 9,\nan edge from node 11 to node 12 with capacity 4,\nan edge from node 12 to node 5 with capacity 11,\nan edge from node 12 to node 0 with capacity 4,\nan edge from node 12 to node 3 with capacity 19,\nan edge from node 12 to node 8 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 88, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(13, weight:2), (6, weight:2), (16, weight:13), (7, weight:10), (17, weight:2), (14, weight:11)],\nnode1: [(16, weight:19), (17, weight:5)],\nnode2: [(10, weight:9), (11, weight:4), (5, weight:10), (1, weight:13)],\nnode3: [(15, weight:18), (5, weight:14)],\nnode4: [(16, weight:2), (15, weight:7), (14, weight:13)],\nnode5: [(8, weight:6), (3, weight:20), (15, weight:13), (14, weight:14)],\nnode6: [(8, weight:20), (10, weight:18), (11, weight:6), (5, weight:17), (0, weight:2), (9, weight:8), (12, weight:15)],\nnode7: [(8, weight:12), (6, weight:9), (10, weight:10), (15, weight:15), (17, weight:4)],\nnode8: [(2, weight:10), (0, weight:3), (7, weight:6), (12, weight:5), (1, weight:10), (14, weight:12)],\nnode9: [(13, weight:10), (3, weight:19), (4, weight:17), (16, weight:15), (11, weight:10), (5, weight:3), (0, weight:15)],\nnode10: [(16, weight:1), (15, weight:17), (5, weight:3), (7, weight:16)],\nnode11: [(15, weight:7), (5, weight:13), (9, weight:12), (17, weight:3), (14, weight:7)],\nnode12: [(13, weight:20), (5, weight:4), (17, weight:2)],\nnode13: [(3, weight:14), (4, weight:1)],\nnode14: [(8, weight:10), (6, weight:19), (5, weight:16), (7, weight:19), (17, weight:13)],\nnode15: [(8, weight:6), (16, weight:20)],\nnode16: [(10, weight:9), (9, weight:18)],\nnode17: [(13, weight:13), (8, weight:4), (5, weight:19), (12, weight:2), (14, weight:16)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 8, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 89, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 5 with capacity 3, an edge from node 1 to node 4 with capacity 2, an edge from node 1 to node 7 with capacity 3, an edge from node 2 to node 1 with capacity 8, an edge from node 3 to node 6 with capacity 5, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 5 with capacity 5, an edge from node 4 to node 6 with capacity 7, an edge from node 4 to node 2 with capacity 3, an edge from node 5 to node 6 with capacity 2, an edge from node 5 to node 2 with capacity 2, an edge from node 7 to node 6 with capacity 2, an edge from node 7 to node 0 with capacity 2, an edge from node 7 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 90, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 3, an edge from node 0 to node 1 with capacity 6, an edge from node 0 to node 2 with capacity 3, an edge from node 1 to node 2 with capacity 4, an edge from node 1 to node 0 with capacity 4, an edge from node 2 to node 4 with capacity 9, an edge from node 2 to node 3 with capacity 7, an edge from node 3 to node 4 with capacity 4, an edge from node 3 to node 0 with capacity 5, an edge from node 4 to node 1 with capacity 4, an edge from node 4 to node 2 with capacity 4, an edge from node 4 to node 0 with capacity 2, an edge from node 5 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 91, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(2, capacity:13), (10, capacity:15), (12, capacity:18)],\nnode1: [(2, capacity:9), (5, capacity:6), (8, capacity:7), (9, capacity:19)],\nnode2: [(10, capacity:7), (14, capacity:2), (9, capacity:1), (1, capacity:9), (12, capacity:3), (4, capacity:8)],\nnode3: [(10, capacity:7)],\nnode4: [(13, capacity:19), (1, capacity:11), (0, capacity:9)],\nnode5: [(11, capacity:14), (1, capacity:17)],\nnode6: [(2, capacity:1), (9, capacity:8)],\nnode7: [(13, capacity:3)],\nnode8: [(10, capacity:5), (13, capacity:7), (11, capacity:9), (1, capacity:4)],\nnode9: [(2, capacity:18), (6, capacity:13), (7, capacity:17), (0, capacity:1), (15, capacity:20)],\nnode10: [(11, capacity:3), (7, capacity:16), (0, capacity:6), (12, capacity:12)],\nnode11: [(10, capacity:16), (1, capacity:5), (12, capacity:3), (4, capacity:8)],\nnode12: [(2, capacity:8), (1, capacity:14), (4, capacity:1)],\nnode13: [(2, capacity:11), (10, capacity:8), (8, capacity:19), (12, capacity:1), (4, capacity:17)],\nnode14: [(10, capacity:15), (8, capacity:2)],\nnode15: [(10, capacity:18), (14, capacity:6), (8, capacity:16), (13, capacity:9), (11, capacity:10), (3, capacity:15), (4, capacity:15)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 15, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 92, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 4 with capacity 1, an edge from node 0 to node 1 with capacity 3, an edge from node 0 to node 7 with capacity 2, an edge from node 1 to node 4 with capacity 7, an edge from node 1 to node 9 with capacity 4, an edge from node 1 to node 5 with capacity 2, an edge from node 2 to node 1 with capacity 4, an edge from node 2 to node 8 with capacity 2, an edge from node 2 to node 7 with capacity 6, an edge from node 3 to node 0 with capacity 7, an edge from node 3 to node 7 with capacity 2, an edge from node 4 to node 0 with capacity 2, an edge from node 4 to node 6 with capacity 4, an edge from node 6 to node 5 with capacity 10, an edge from node 6 to node 8 with capacity 5, an edge from node 8 to node 6 with capacity 9, an edge from node 9 to node 4 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 93, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 3 with capacity 9, an edge from node 0 to node 1 with capacity 3, an edge from node 1 to node 3 with capacity 1, an edge from node 4 to node 0 with capacity 10, an edge from node 4 to node 1 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 94, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 3 with capacity 3, an edge from node 0 to node 1 with capacity 6, an edge from node 0 to node 2 with capacity 3, an edge from node 1 to node 5 with capacity 10, an edge from node 2 to node 5 with capacity 8, an edge from node 2 to node 1 with capacity 9, an edge from node 3 to node 4 with capacity 10, an edge from node 3 to node 5 with capacity 4, an edge from node 4 to node 2 with capacity 1, an edge from node 5 to node 0 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 5, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 95, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 7, an edge from node 1 to node 0 with capacity 4, an edge from node 1 to node 4 with capacity 1, an edge from node 2 to node 0 with capacity 1, an edge from node 2 to node 4 with capacity 1, an edge from node 3 to node 0 with capacity 9, an edge from node 4 to node 1 with capacity 5, an edge from node 4 to node 0 with capacity 10, an edge from node 4 to node 2 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 2, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 96, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 4 with capacity 3, an edge from node 1 to node 6 with capacity 1, an edge from node 3 to node 0 with capacity 7, an edge from node 3 to node 6 with capacity 6, an edge from node 3 to node 1 with capacity 1, an edge from node 4 to node 3 with capacity 7, an edge from node 5 to node 3 with capacity 2, an edge from node 5 to node 6 with capacity 2, an edge from node 5 to node 1 with capacity 5, an edge from node 6 to node 5 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 97, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 10 with capacity 8,\nan edge from node 0 to node 11 with capacity 13,\nan edge from node 0 to node 8 with capacity 2,\nan edge from node 0 to node 7 with capacity 13,\nan edge from node 0 to node 4 with capacity 16,\nan edge from node 1 to node 2 with capacity 20,\nan edge from node 1 to node 5 with capacity 7,\nan edge from node 2 to node 0 with capacity 5,\nan edge from node 2 to node 12 with capacity 4,\nan edge from node 3 to node 10 with capacity 11,\nan edge from node 3 to node 0 with capacity 17,\nan edge from node 3 to node 2 with capacity 2,\nan edge from node 3 to node 9 with capacity 15,\nan edge from node 3 to node 13 with capacity 9,\nan edge from node 4 to node 10 with capacity 6,\nan edge from node 4 to node 8 with capacity 1,\nan edge from node 4 to node 12 with capacity 15,\nan edge from node 4 to node 5 with capacity 3,\nan edge from node 4 to node 13 with capacity 8,\nan edge from node 5 to node 10 with capacity 10,\nan edge from node 5 to node 3 with capacity 16,\nan edge from node 5 to node 8 with capacity 7,\nan edge from node 5 to node 12 with capacity 16,\nan edge from node 6 to node 7 with capacity 9,\nan edge from node 6 to node 9 with capacity 4,\nan edge from node 7 to node 0 with capacity 20,\nan edge from node 7 to node 2 with capacity 5,\nan edge from node 7 to node 1 with capacity 11,\nan edge from node 7 to node 9 with capacity 1,\nan edge from node 8 to node 10 with capacity 7,\nan edge from node 8 to node 3 with capacity 2,\nan edge from node 8 to node 11 with capacity 11,\nan edge from node 8 to node 4 with capacity 10,\nan edge from node 8 to node 6 with capacity 19,\nan edge from node 9 to node 0 with capacity 17,\nan edge from node 9 to node 7 with capacity 16,\nan edge from node 9 to node 5 with capacity 16,\nan edge from node 10 to node 12 with capacity 17,\nan edge from node 10 to node 7 with capacity 5,\nan edge from node 10 to node 4 with capacity 8,\nan edge from node 11 to node 8 with capacity 2,\nan edge from node 11 to node 2 with capacity 12,\nan edge from node 12 to node 9 with capacity 9,\nan edge from node 12 to node 13 with capacity 1,\nan edge from node 13 to node 10 with capacity 5,\nan edge from node 13 to node 0 with capacity 9,\nan edge from node 13 to node 11 with capacity 15,\nan edge from node 13 to node 1 with capacity 2,\nan edge from node 13 to node 4 with capacity 14,\nan edge from node 13 to node 9 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 98, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 7 with capacity 3, an edge from node 0 to node 1 with capacity 3, an edge from node 2 to node 8 with capacity 6, an edge from node 4 to node 7 with capacity 3, an edge from node 4 to node 5 with capacity 7, an edge from node 4 to node 3 with capacity 7, an edge from node 5 to node 7 with capacity 6, an edge from node 6 to node 1 with capacity 7, an edge from node 7 to node 2 with capacity 10, an edge from node 9 to node 8 with capacity 2, an edge from node 9 to node 5 with capacity 5, an edge from node 9 to node 4 with capacity 3, an edge from node 9 to node 3 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 9, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 99, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 3 with capacity 9, an edge from node 1 to node 0 with capacity 6, an edge from node 2 to node 4 with capacity 3, an edge from node 2 to node 0 with capacity 7, an edge from node 3 to node 5 with capacity 3, an edge from node 4 to node 6 with capacity 8, an edge from node 5 to node 6 with capacity 8, an edge from node 5 to node 0 with capacity 4, an edge from node 6 to node 4 with capacity 7, an edge from node 6 to node 2 with capacity 2, an edge from node 7 to node 3 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 100, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 1, an edge from node 0 to node 3 with capacity 3, an edge from node 2 to node 0 with capacity 1, an edge from node 2 to node 3 with capacity 7, an edge from node 3 to node 2 with capacity 8, an edge from node 4 to node 1 with capacity 2, an edge from node 4 to node 2 with capacity 6, an edge from node 4 to node 3 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 101, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 1 to node 0 with capacity 7, an edge from node 1 to node 3 with capacity 3, an edge from node 1 to node 2 with capacity 1, an edge from node 1 to node 4 with capacity 9, an edge from node 2 to node 0 with capacity 9, an edge from node 2 to node 3 with capacity 7, an edge from node 3 to node 0 with capacity 9, an edge from node 3 to node 4 with capacity 1, an edge from node 4 to node 3 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 1, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 102, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 2 with capacity 9, an edge from node 0 to node 8 with capacity 1, an edge from node 1 to node 8 with capacity 5, an edge from node 2 to node 8 with capacity 9, an edge from node 2 to node 3 with capacity 9, an edge from node 2 to node 7 with capacity 2, an edge from node 4 to node 6 with capacity 10, an edge from node 4 to node 8 with capacity 5, an edge from node 5 to node 6 with capacity 7, an edge from node 5 to node 8 with capacity 2, an edge from node 6 to node 8 with capacity 3, an edge from node 7 to node 3 with capacity 7, an edge from node 8 to node 2 with capacity 5, an edge from node 8 to node 3 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 8, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 103, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 3 with capacity 8, an edge from node 0 to node 1 with capacity 9, an edge from node 1 to node 5 with capacity 5, an edge from node 1 to node 0 with capacity 8, an edge from node 2 to node 6 with capacity 7, an edge from node 2 to node 0 with capacity 2, an edge from node 3 to node 0 with capacity 2, an edge from node 3 to node 1 with capacity 8, an edge from node 4 to node 5 with capacity 8, an edge from node 4 to node 0 with capacity 7, an edge from node 4 to node 1 with capacity 8, an edge from node 5 to node 3 with capacity 2, an edge from node 5 to node 2 with capacity 9, an edge from node 6 to node 5 with capacity 10, an edge from node 6 to node 0 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 104, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 6 with capacity 3, an edge from node 0 to node 1 with capacity 7, an edge from node 1 to node 0 with capacity 7, an edge from node 2 to node 4 with capacity 6, an edge from node 2 to node 0 with capacity 8, an edge from node 3 to node 5 with capacity 2, an edge from node 4 to node 6 with capacity 3, an edge from node 5 to node 1 with capacity 6, an edge from node 5 to node 2 with capacity 6, an edge from node 5 to node 4 with capacity 1, an edge from node 5 to node 0 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 105, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, weight:18), (3, weight:4)],\nnode1: [(0, weight:1), (7, weight:5)],\nnode2: [(15, weight:4), (0, weight:15), (12, weight:8), (5, weight:6), (8, weight:13), (7, weight:11)],\nnode3: [(4, weight:6), (15, weight:14), (5, weight:17), (8, weight:9), (11, weight:8)],\nnode4: [(14, weight:19), (12, weight:5), (5, weight:17), (6, weight:2)],\nnode5: [(0, weight:6), (12, weight:5), (1, weight:8), (7, weight:18), (6, weight:16)],\nnode6: [(3, weight:15), (0, weight:6)],\nnode7: [(4, weight:1), (13, weight:15), (0, weight:8), (16, weight:20), (12, weight:18), (8, weight:16)],\nnode8: [(4, weight:3), (2, weight:18), (10, weight:7), (16, weight:5), (6, weight:10)],\nnode9: [(3, weight:3), (10, weight:7), (14, weight:8), (7, weight:9), (6, weight:10)],\nnode10: [(15, weight:15), (16, weight:3), (1, weight:6), (6, weight:14), (11, weight:11)],\nnode11: [(4, weight:2), (10, weight:12), (7, weight:17)],\nnode12: [(2, weight:14), (13, weight:11), (10, weight:3), (1, weight:7), (6, weight:4)],\nnode13: [(4, weight:6), (8, weight:5), (7, weight:15)],\nnode14: [(10, weight:16), (8, weight:3), (6, weight:19), (11, weight:15)],\nnode15: [(13, weight:10), (0, weight:18), (10, weight:9), (8, weight:14), (9, weight:20)],\nnode16: [(5, weight:5), (9, weight:12)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 8, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 106, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 16 with capacity 12,\nan edge from node 0 to node 4 with capacity 13,\nan edge from node 0 to node 17 with capacity 5,\nan edge from node 1 to node 10 with capacity 13,\nan edge from node 1 to node 16 with capacity 7,\nan edge from node 1 to node 4 with capacity 1,\nan edge from node 1 to node 0 with capacity 1,\nan edge from node 1 to node 9 with capacity 6,\nan edge from node 1 to node 5 with capacity 8,\nan edge from node 1 to node 13 with capacity 5,\nan edge from node 1 to node 14 with capacity 3,\nan edge from node 2 to node 11 with capacity 16,\nan edge from node 2 to node 10 with capacity 5,\nan edge from node 2 to node 19 with capacity 1,\nan edge from node 2 to node 7 with capacity 5,\nan edge from node 2 to node 6 with capacity 8,\nan edge from node 3 to node 16 with capacity 15,\nan edge from node 3 to node 0 with capacity 12,\nan edge from node 3 to node 6 with capacity 17,\nan edge from node 4 to node 2 with capacity 14,\nan edge from node 4 to node 0 with capacity 10,\nan edge from node 4 to node 3 with capacity 12,\nan edge from node 4 to node 13 with capacity 3,\nan edge from node 4 to node 6 with capacity 6,\nan edge from node 5 to node 11 with capacity 8,\nan edge from node 5 to node 19 with capacity 3,\nan edge from node 5 to node 6 with capacity 17,\nan edge from node 6 to node 0 with capacity 4,\nan edge from node 6 to node 9 with capacity 9,\nan edge from node 6 to node 17 with capacity 18,\nan edge from node 6 to node 13 with capacity 13,\nan edge from node 6 to node 12 with capacity 9,\nan edge from node 6 to node 7 with capacity 1,\nan edge from node 6 to node 14 with capacity 13,\nan edge from node 6 to node 18 with capacity 19,\nan edge from node 7 to node 8 with capacity 16,\nan edge from node 7 to node 11 with capacity 3,\nan edge from node 7 to node 15 with capacity 6,\nan edge from node 7 to node 4 with capacity 15,\nan edge from node 7 to node 9 with capacity 5,\nan edge from node 7 to node 14 with capacity 16,\nan edge from node 8 to node 0 with capacity 12,\nan edge from node 8 to node 1 with capacity 1,\nan edge from node 8 to node 9 with capacity 14,\nan edge from node 8 to node 7 with capacity 13,\nan edge from node 8 to node 6 with capacity 19,\nan edge from node 8 to node 14 with capacity 8,\nan edge from node 8 to node 18 with capacity 7,\nan edge from node 9 to node 10 with capacity 10,\nan edge from node 9 to node 16 with capacity 16,\nan edge from node 9 to node 1 with capacity 17,\nan edge from node 9 to node 3 with capacity 6,\nan edge from node 9 to node 19 with capacity 18,\nan edge from node 9 to node 5 with capacity 18,\nan edge from node 9 to node 18 with capacity 12,\nan edge from node 10 to node 8 with capacity 6,\nan edge from node 10 to node 11 with capacity 19,\nan edge from node 10 to node 15 with capacity 19,\nan edge from node 11 to node 16 with capacity 14,\nan edge from node 11 to node 4 with capacity 2,\nan edge from node 11 to node 0 with capacity 13,\nan edge from node 11 to node 7 with capacity 19,\nan edge from node 12 to node 4 with capacity 18,\nan edge from node 12 to node 1 with capacity 10,\nan edge from node 12 to node 17 with capacity 18,\nan edge from node 12 to node 3 with capacity 19,\nan edge from node 12 to node 13 with capacity 10,\nan edge from node 13 to node 4 with capacity 9,\nan edge from node 13 to node 18 with capacity 7,\nan edge from node 14 to node 8 with capacity 4,\nan edge from node 14 to node 2 with capacity 8,\nan edge from node 14 to node 1 with capacity 16,\nan edge from node 14 to node 17 with capacity 8,\nan edge from node 14 to node 19 with capacity 5,\nan edge from node 14 to node 13 with capacity 18,\nan edge from node 14 to node 12 with capacity 4,\nan edge from node 15 to node 8 with capacity 14,\nan edge from node 15 to node 16 with capacity 9,\nan edge from node 15 to node 4 with capacity 10,\nan edge from node 15 to node 9 with capacity 16,\nan edge from node 15 to node 12 with capacity 9,\nan edge from node 16 to node 9 with capacity 20,\nan edge from node 16 to node 3 with capacity 1,\nan edge from node 18 to node 16 with capacity 6,\nan edge from node 18 to node 3 with capacity 6,\nan edge from node 18 to node 12 with capacity 3,\nan edge from node 18 to node 6 with capacity 14,\nan edge from node 18 to node 14 with capacity 6,\nan edge from node 19 to node 10 with capacity 14,\nan edge from node 19 to node 16 with capacity 1,\nan edge from node 19 to node 4 with capacity 20,\nan edge from node 19 to node 0 with capacity 8,\nan edge from node 19 to node 5 with capacity 16,\nan edge from node 19 to node 7 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 17\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 17, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 107, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 4 with capacity 17,\nan edge from node 0 to node 3 with capacity 19,\nan edge from node 0 to node 1 with capacity 10,\nan edge from node 0 to node 5 with capacity 1,\nan edge from node 1 to node 4 with capacity 7,\nan edge from node 1 to node 3 with capacity 6,\nan edge from node 1 to node 7 with capacity 12,\nan edge from node 1 to node 5 with capacity 8,\nan edge from node 2 to node 11 with capacity 2,\nan edge from node 3 to node 9 with capacity 2,\nan edge from node 3 to node 1 with capacity 11,\nan edge from node 4 to node 0 with capacity 15,\nan edge from node 4 to node 10 with capacity 5,\nan edge from node 4 to node 1 with capacity 18,\nan edge from node 5 to node 9 with capacity 17,\nan edge from node 5 to node 3 with capacity 17,\nan edge from node 6 to node 9 with capacity 10,\nan edge from node 6 to node 7 with capacity 19,\nan edge from node 7 to node 8 with capacity 9,\nan edge from node 7 to node 1 with capacity 13,\nan edge from node 7 to node 5 with capacity 9,\nan edge from node 8 to node 0 with capacity 14,\nan edge from node 8 to node 2 with capacity 9,\nan edge from node 8 to node 4 with capacity 19,\nan edge from node 8 to node 9 with capacity 16,\nan edge from node 8 to node 11 with capacity 11,\nan edge from node 8 to node 3 with capacity 11,\nan edge from node 9 to node 4 with capacity 19,\nan edge from node 9 to node 10 with capacity 19,\nan edge from node 9 to node 11 with capacity 12,\nan edge from node 9 to node 3 with capacity 18,\nan edge from node 10 to node 4 with capacity 1,\nan edge from node 10 to node 8 with capacity 11,\nan edge from node 10 to node 7 with capacity 6,\nan edge from node 11 to node 12 with capacity 7,\nan edge from node 11 to node 7 with capacity 10,\nan edge from node 12 to node 4 with capacity 14,\nan edge from node 12 to node 10 with capacity 19,\nan edge from node 12 to node 1 with capacity 1,\nan edge from node 12 to node 7 with capacity 19,\nan edge from node 12 to node 5 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 108, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 5 with capacity 6,\nan edge from node 0 to node 7 with capacity 12,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 3 with capacity 1,\nan edge from node 2 to node 9 with capacity 13,\nan edge from node 2 to node 10 with capacity 10,\nan edge from node 2 to node 6 with capacity 11,\nan edge from node 3 to node 11 with capacity 14,\nan edge from node 3 to node 5 with capacity 16,\nan edge from node 3 to node 10 with capacity 12,\nan edge from node 4 to node 1 with capacity 12,\nan edge from node 4 to node 10 with capacity 9,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 5 to node 4 with capacity 12,\nan edge from node 5 to node 7 with capacity 10,\nan edge from node 6 to node 5 with capacity 12,\nan edge from node 7 to node 3 with capacity 7,\nan edge from node 7 to node 6 with capacity 12,\nan edge from node 8 to node 11 with capacity 6,\nan edge from node 8 to node 9 with capacity 13,\nan edge from node 9 to node 3 with capacity 20,\nan edge from node 10 to node 5 with capacity 3,\nan edge from node 10 to node 3 with capacity 9,\nan edge from node 10 to node 4 with capacity 14,\nan edge from node 11 to node 10 with capacity 20.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 109, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 15, and the edges are:\nan edge from node 0 to node 1 with capacity 5,\nan edge from node 0 to node 15 with capacity 3,\nan edge from node 1 to node 0 with capacity 6,\nan edge from node 1 to node 8 with capacity 3,\nan edge from node 1 to node 6 with capacity 13,\nan edge from node 2 to node 0 with capacity 7,\nan edge from node 2 to node 13 with capacity 18,\nan edge from node 2 to node 1 with capacity 20,\nan edge from node 2 to node 3 with capacity 4,\nan edge from node 3 to node 13 with capacity 11,\nan edge from node 3 to node 10 with capacity 20,\nan edge from node 3 to node 1 with capacity 4,\nan edge from node 3 to node 2 with capacity 15,\nan edge from node 3 to node 7 with capacity 1,\nan edge from node 3 to node 15 with capacity 8,\nan edge from node 4 to node 1 with capacity 10,\nan edge from node 4 to node 8 with capacity 13,\nan edge from node 4 to node 9 with capacity 4,\nan edge from node 4 to node 7 with capacity 19,\nan edge from node 4 to node 15 with capacity 11,\nan edge from node 5 to node 2 with capacity 6,\nan edge from node 5 to node 3 with capacity 7,\nan edge from node 5 to node 15 with capacity 17,\nan edge from node 6 to node 0 with capacity 3,\nan edge from node 6 to node 11 with capacity 20,\nan edge from node 6 to node 10 with capacity 13,\nan edge from node 6 to node 3 with capacity 17,\nan edge from node 7 to node 6 with capacity 17,\nan edge from node 7 to node 5 with capacity 15,\nan edge from node 8 to node 0 with capacity 11,\nan edge from node 8 to node 11 with capacity 8,\nan edge from node 8 to node 14 with capacity 15,\nan edge from node 8 to node 2 with capacity 10,\nan edge from node 9 to node 1 with capacity 8,\nan edge from node 9 to node 14 with capacity 2,\nan edge from node 9 to node 6 with capacity 8,\nan edge from node 9 to node 7 with capacity 1,\nan edge from node 10 to node 1 with capacity 17,\nan edge from node 11 to node 13 with capacity 17,\nan edge from node 11 to node 8 with capacity 18,\nan edge from node 11 to node 5 with capacity 18,\nan edge from node 11 to node 15 with capacity 6,\nan edge from node 12 to node 0 with capacity 2,\nan edge from node 12 to node 14 with capacity 3,\nan edge from node 12 to node 5 with capacity 15,\nan edge from node 13 to node 10 with capacity 15,\nan edge from node 14 to node 0 with capacity 7,\nan edge from node 15 to node 2 with capacity 13,\nan edge from node 15 to node 6 with capacity 15,\nan edge from node 15 to node 7 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 14\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 6, 14, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 110, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 11 with capacity 17,\nan edge from node 0 to node 2 with capacity 16,\nan edge from node 1 to node 9 with capacity 11,\nan edge from node 1 to node 0 with capacity 15,\nan edge from node 1 to node 2 with capacity 9,\nan edge from node 2 to node 3 with capacity 15,\nan edge from node 3 to node 8 with capacity 7,\nan edge from node 4 to node 0 with capacity 15,\nan edge from node 4 to node 1 with capacity 4,\nan edge from node 4 to node 3 with capacity 19,\nan edge from node 4 to node 7 with capacity 16,\nan edge from node 5 to node 9 with capacity 10,\nan edge from node 5 to node 2 with capacity 13,\nan edge from node 6 to node 11 with capacity 3,\nan edge from node 7 to node 10 with capacity 15,\nan edge from node 7 to node 11 with capacity 15,\nan edge from node 7 to node 6 with capacity 10,\nan edge from node 7 to node 0 with capacity 10,\nan edge from node 7 to node 8 with capacity 5,\nan edge from node 7 to node 3 with capacity 16,\nan edge from node 7 to node 2 with capacity 10,\nan edge from node 8 to node 4 with capacity 2,\nan edge from node 8 to node 11 with capacity 15,\nan edge from node 8 to node 6 with capacity 8,\nan edge from node 8 to node 3 with capacity 6,\nan edge from node 8 to node 2 with capacity 16,\nan edge from node 9 to node 1 with capacity 8,\nan edge from node 9 to node 3 with capacity 18,\nan edge from node 9 to node 2 with capacity 6,\nan edge from node 10 to node 4 with capacity 17,\nan edge from node 10 to node 5 with capacity 13,\nan edge from node 10 to node 1 with capacity 10,\nan edge from node 10 to node 3 with capacity 5,\nan edge from node 10 to node 2 with capacity 1,\nan edge from node 11 to node 4 with capacity 3,\nan edge from node 11 to node 6 with capacity 3,\nan edge from node 11 to node 9 with capacity 9,\nan edge from node 11 to node 8 with capacity 16,\nan edge from node 11 to node 1 with capacity 3,\nan edge from node 11 to node 3 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 111, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 5 with capacity 6, an edge from node 0 to node 6 with capacity 7, an edge from node 0 to node 3 with capacity 1, an edge from node 2 to node 9 with capacity 3, an edge from node 4 to node 3 with capacity 7, an edge from node 5 to node 2 with capacity 9, an edge from node 5 to node 1 with capacity 2, an edge from node 6 to node 8 with capacity 6, an edge from node 6 to node 7 with capacity 10, an edge from node 7 to node 3 with capacity 6, an edge from node 8 to node 3 with capacity 8, an edge from node 8 to node 1 with capacity 7, an edge from node 9 to node 0 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 9, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 112, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 2 with capacity 6, an edge from node 0 to node 1 with capacity 7, an edge from node 1 to node 0 with capacity 9, an edge from node 1 to node 7 with capacity 2, an edge from node 2 to node 1 with capacity 3, an edge from node 2 to node 7 with capacity 10, an edge from node 3 to node 2 with capacity 3, an edge from node 3 to node 8 with capacity 2, an edge from node 3 to node 7 with capacity 6, an edge from node 4 to node 0 with capacity 10, an edge from node 5 to node 6 with capacity 7, an edge from node 5 to node 1 with capacity 6, an edge from node 5 to node 3 with capacity 1, an edge from node 7 to node 2 with capacity 9, an edge from node 7 to node 1 with capacity 6, an edge from node 8 to node 6 with capacity 1, an edge from node 8 to node 0 with capacity 7, an edge from node 8 to node 9 with capacity 9, an edge from node 9 to node 6 with capacity 5, an edge from node 9 to node 3 with capacity 5, an edge from node 9 to node 5 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 0, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 113, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(16, weight:19), (9, weight:6), (7, weight:1)],\nnode1: [(4, weight:1), (10, weight:16), (6, weight:10), (5, weight:2), (19, weight:5), (2, weight:11)],\nnode2: [(3, weight:5), (7, weight:11), (13, weight:9)],\nnode3: [(9, weight:3), (5, weight:19), (19, weight:10), (13, weight:12), (17, weight:15)],\nnode4: [(16, weight:6), (10, weight:10), (7, weight:11), (18, weight:14), (13, weight:14)],\nnode5: [(4, weight:17), (9, weight:19), (11, weight:19), (7, weight:16), (1, weight:18)],\nnode6: [(16, weight:11), (14, weight:18), (5, weight:15), (7, weight:11), (18, weight:6), (1, weight:11), (2, weight:4)],\nnode7: [(0, weight:18), (14, weight:9), (9, weight:15), (3, weight:17), (15, weight:7), (19, weight:5), (8, weight:17)],\nnode8: [(14, weight:16), (6, weight:12), (15, weight:8), (13, weight:11)],\nnode9: [(16, weight:5), (0, weight:16), (4, weight:16)],\nnode10: [(4, weight:20), (9, weight:18), (5, weight:19)],\nnode11: [(7, weight:3), (18, weight:8), (8, weight:12)],\nnode12: [(4, weight:11), (11, weight:13), (2, weight:4)],\nnode13: [(0, weight:6), (4, weight:16), (10, weight:11), (6, weight:4), (3, weight:13), (7, weight:7), (17, weight:18)],\nnode14: [(10, weight:5), (5, weight:8), (8, weight:17)],\nnode15: [(14, weight:1), (9, weight:11), (7, weight:2), (19, weight:3), (17, weight:16)],\nnode16: [(4, weight:16), (10, weight:1), (9, weight:3), (5, weight:13), (7, weight:4), (13, weight:2)],\nnode17: [(14, weight:11), (10, weight:18), (9, weight:20), (11, weight:14), (15, weight:10), (13, weight:11), (8, weight:20), (2, weight:6)],\nnode18: [(0, weight:4), (11, weight:12)],\nnode19: [(16, weight:1), (0, weight:9), (4, weight:10), (9, weight:4), (3, weight:8), (7, weight:1), (1, weight:2), (13, weight:11)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+)\\/weight:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 6, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 114, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 3, an edge from node 1 to node 4 with capacity 4, an edge from node 1 to node 3 with capacity 9, an edge from node 2 to node 4 with capacity 2, an edge from node 2 to node 3 with capacity 9, an edge from node 4 to node 2 with capacity 1, an edge from node 4 to node 3 with capacity 6, an edge from node 4 to node 0 with capacity 2, an edge from node 5 to node 4 with capacity 9, an edge from node 5 to node 3 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 115, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 8 with capacity 6,\nan edge from node 0 to node 12 with capacity 5,\nan edge from node 0 to node 2 with capacity 11,\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 0 to node 11 with capacity 17,\nan edge from node 0 to node 1 with capacity 11,\nan edge from node 1 to node 3 with capacity 19,\nan edge from node 1 to node 9 with capacity 10,\nan edge from node 1 to node 11 with capacity 19,\nan edge from node 1 to node 6 with capacity 19,\nan edge from node 2 to node 3 with capacity 1,\nan edge from node 2 to node 1 with capacity 6,\nan edge from node 3 to node 7 with capacity 5,\nan edge from node 3 to node 8 with capacity 2,\nan edge from node 3 to node 12 with capacity 18,\nan edge from node 3 to node 2 with capacity 2,\nan edge from node 3 to node 9 with capacity 15,\nan edge from node 4 to node 13 with capacity 6,\nan edge from node 4 to node 8 with capacity 8,\nan edge from node 4 to node 2 with capacity 19,\nan edge from node 4 to node 0 with capacity 6,\nan edge from node 5 to node 1 with capacity 18,\nan edge from node 6 to node 3 with capacity 15,\nan edge from node 6 to node 10 with capacity 3,\nan edge from node 6 to node 1 with capacity 11,\nan edge from node 6 to node 5 with capacity 4,\nan edge from node 7 to node 9 with capacity 3,\nan edge from node 8 to node 1 with capacity 4,\nan edge from node 8 to node 0 with capacity 5,\nan edge from node 9 to node 13 with capacity 5,\nan edge from node 9 to node 7 with capacity 3,\nan edge from node 9 to node 8 with capacity 20,\nan edge from node 9 to node 6 with capacity 10,\nan edge from node 9 to node 1 with capacity 9,\nan edge from node 10 to node 13 with capacity 14,\nan edge from node 10 to node 9 with capacity 17,\nan edge from node 10 to node 4 with capacity 20,\nan edge from node 10 to node 1 with capacity 12,\nan edge from node 11 to node 2 with capacity 15,\nan edge from node 11 to node 4 with capacity 7,\nan edge from node 12 to node 2 with capacity 18,\nan edge from node 12 to node 9 with capacity 6,\nan edge from node 12 to node 11 with capacity 18,\nan edge from node 12 to node 10 with capacity 10,\nan edge from node 12 to node 6 with capacity 1,\nan edge from node 12 to node 1 with capacity 2,\nan edge from node 13 to node 8 with capacity 20,\nan edge from node 13 to node 12 with capacity 15,\nan edge from node 13 to node 11 with capacity 8,\nan edge from node 13 to node 10 with capacity 16,\nan edge from node 13 to node 1 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 116, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(16, capacity:12), (10, capacity:3), (1, capacity:16), (3, capacity:2), (9, capacity:1)],\nnode1: [(17, capacity:4), (5, capacity:20), (12, capacity:3), (14, capacity:7), (11, capacity:7)],\nnode2: [(16, capacity:12), (10, capacity:8), (12, capacity:2), (9, capacity:20)],\nnode3: [(16, capacity:19), (4, capacity:1), (13, capacity:18)],\nnode4: [(17, capacity:15), (10, capacity:2), (6, capacity:17), (3, capacity:10)],\nnode5: [(7, capacity:2), (6, capacity:15), (13, capacity:13), (9, capacity:8)],\nnode6: [(7, capacity:13), (13, capacity:7), (12, capacity:6), (9, capacity:7)],\nnode7: [(5, capacity:7), (2, capacity:13), (9, capacity:19)],\nnode8: [(10, capacity:3), (4, capacity:6), (13, capacity:6), (12, capacity:9)],\nnode9: [(2, capacity:13), (1, capacity:14), (0, capacity:15), (11, capacity:11)],\nnode10: [(5, capacity:15), (2, capacity:15), (6, capacity:1), (4, capacity:18), (11, capacity:8)],\nnode11: [(6, capacity:18), (15, capacity:9)],\nnode12: [(0, capacity:14), (13, capacity:8)],\nnode13: [(5, capacity:16), (10, capacity:14), (2, capacity:1), (4, capacity:10), (15, capacity:20), (14, capacity:18)],\nnode14: [(5, capacity:3), (16, capacity:5), (10, capacity:16), (1, capacity:7), (0, capacity:19), (11, capacity:1), (3, capacity:20)],\nnode15: [(7, capacity:7), (8, capacity:7), (14, capacity:11)],\nnode16: [(8, capacity:12), (13, capacity:13), (12, capacity:19)],\nnode17: [(2, capacity:19), (1, capacity:4), (0, capacity:18), (15, capacity:2), (12, capacity:19), (9, capacity:12)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 15 to node 16\nflow_value, flow_dict = nx.maximum_flow(G, 15, 16, capacity='weight')\nprint(flow_value)\n```"}, {"id": 117, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 5 with capacity 19,\nan edge from node 0 to node 13 with capacity 19,\nan edge from node 0 to node 10 with capacity 4,\nan edge from node 0 to node 15 with capacity 4,\nan edge from node 0 to node 4 with capacity 17,\nan edge from node 1 to node 5 with capacity 6,\nan edge from node 1 to node 7 with capacity 1,\nan edge from node 1 to node 8 with capacity 7,\nan edge from node 1 to node 3 with capacity 1,\nan edge from node 1 to node 6 with capacity 14,\nan edge from node 2 to node 5 with capacity 5,\nan edge from node 2 to node 11 with capacity 1,\nan edge from node 2 to node 3 with capacity 4,\nan edge from node 2 to node 1 with capacity 18,\nan edge from node 3 to node 8 with capacity 12,\nan edge from node 3 to node 18 with capacity 18,\nan edge from node 3 to node 14 with capacity 1,\nan edge from node 3 to node 16 with capacity 14,\nan edge from node 3 to node 4 with capacity 4,\nan edge from node 3 to node 17 with capacity 5,\nan edge from node 3 to node 0 with capacity 19,\nan edge from node 4 to node 11 with capacity 1,\nan edge from node 4 to node 3 with capacity 7,\nan edge from node 4 to node 12 with capacity 6,\nan edge from node 4 to node 13 with capacity 12,\nan edge from node 4 to node 10 with capacity 13,\nan edge from node 4 to node 1 with capacity 6,\nan edge from node 4 to node 16 with capacity 1,\nan edge from node 5 to node 11 with capacity 11,\nan edge from node 5 to node 7 with capacity 20,\nan edge from node 5 to node 1 with capacity 17,\nan edge from node 5 to node 16 with capacity 20,\nan edge from node 6 to node 11 with capacity 20,\nan edge from node 6 to node 3 with capacity 6,\nan edge from node 6 to node 18 with capacity 6,\nan edge from node 7 to node 9 with capacity 16,\nan edge from node 7 to node 2 with capacity 15,\nan edge from node 7 to node 3 with capacity 17,\nan edge from node 7 to node 14 with capacity 11,\nan edge from node 7 to node 15 with capacity 6,\nan edge from node 7 to node 17 with capacity 12,\nan edge from node 8 to node 7 with capacity 19,\nan edge from node 8 to node 6 with capacity 20,\nan edge from node 8 to node 1 with capacity 7,\nan edge from node 8 to node 16 with capacity 3,\nan edge from node 8 to node 4 with capacity 2,\nan edge from node 8 to node 17 with capacity 12,\nan edge from node 9 to node 2 with capacity 20,\nan edge from node 9 to node 8 with capacity 2,\nan edge from node 9 to node 6 with capacity 17,\nan edge from node 9 to node 13 with capacity 2,\nan edge from node 9 to node 1 with capacity 20,\nan edge from node 9 to node 4 with capacity 13,\nan edge from node 9 to node 17 with capacity 9,\nan edge from node 10 to node 9 with capacity 18,\nan edge from node 10 to node 5 with capacity 18,\nan edge from node 10 to node 11 with capacity 16,\nan edge from node 11 to node 9 with capacity 20,\nan edge from node 11 to node 5 with capacity 10,\nan edge from node 11 to node 7 with capacity 18,\nan edge from node 11 to node 10 with capacity 12,\nan edge from node 11 to node 18 with capacity 6,\nan edge from node 11 to node 16 with capacity 10,\nan edge from node 12 to node 9 with capacity 18,\nan edge from node 12 to node 3 with capacity 7,\nan edge from node 12 to node 1 with capacity 1,\nan edge from node 13 to node 9 with capacity 4,\nan edge from node 13 to node 2 with capacity 4,\nan edge from node 13 to node 5 with capacity 17,\nan edge from node 13 to node 14 with capacity 12,\nan edge from node 13 to node 17 with capacity 8,\nan edge from node 14 to node 11 with capacity 10,\nan edge from node 14 to node 3 with capacity 5,\nan edge from node 14 to node 18 with capacity 5,\nan edge from node 15 to node 3 with capacity 2,\nan edge from node 15 to node 1 with capacity 9,\nan edge from node 15 to node 0 with capacity 13,\nan edge from node 16 to node 11 with capacity 5,\nan edge from node 16 to node 8 with capacity 4,\nan edge from node 16 to node 18 with capacity 16,\nan edge from node 16 to node 0 with capacity 15,\nan edge from node 17 to node 7 with capacity 8,\nan edge from node 17 to node 18 with capacity 12,\nan edge from node 17 to node 14 with capacity 13,\nan edge from node 18 to node 8 with capacity 14,\nan edge from node 18 to node 12 with capacity 12,\nan edge from node 18 to node 14 with capacity 13,\nan edge from node 18 to node 4 with capacity 15,\nan edge from node 18 to node 0 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 6, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 118, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(13, weight:5), (3, weight:15), (5, weight:1), (1, weight:16), (8, weight:18), (11, weight:5)],\nnode1: [(13, weight:3), (5, weight:2), (0, weight:6), (6, weight:11)],\nnode2: [(3, weight:18), (15, weight:8), (4, weight:5), (5, weight:6), (10, weight:12), (0, weight:12)],\nnode3: [(16, weight:20), (14, weight:7), (12, weight:1), (6, weight:17)],\nnode4: [(15, weight:15), (9, weight:20), (16, weight:4), (10, weight:2), (12, weight:2), (0, weight:17)],\nnode5: [(13, weight:3), (3, weight:4), (7, weight:11), (9, weight:17), (16, weight:17), (17, weight:14), (14, weight:12), (6, weight:20)],\nnode6: [(7, weight:5), (18, weight:2), (10, weight:13), (12, weight:18), (11, weight:14), (2, weight:5)],\nnode7: [(4, weight:2), (9, weight:10), (16, weight:10), (0, weight:19), (6, weight:5)],\nnode8: [(4, weight:16), (9, weight:9), (10, weight:11), (14, weight:3), (12, weight:17)],\nnode9: [(13, weight:12), (10, weight:9), (2, weight:10), (19, weight:3), (6, weight:13)],\nnode10: [(13, weight:18), (3, weight:19), (15, weight:18), (5, weight:20), (16, weight:12), (0, weight:2), (6, weight:1)],\nnode11: [(17, weight:6), (18, weight:14), (10, weight:13), (14, weight:3)],\nnode12: [(18, weight:19), (14, weight:11), (8, weight:13), (11, weight:20)],\nnode13: [(3, weight:17), (15, weight:9), (5, weight:4), (14, weight:5), (12, weight:20), (11, weight:9), (2, weight:14), (19, weight:18)],\nnode14: [(3, weight:4), (4, weight:15), (18, weight:15)],\nnode15: [(7, weight:7), (5, weight:20), (1, weight:2), (14, weight:15), (2, weight:8), (6, weight:5)],\nnode16: [(13, weight:20), (7, weight:13), (12, weight:4), (11, weight:2)],\nnode17: [(3, weight:17), (7, weight:11), (18, weight:16), (10, weight:6), (8, weight:13), (0, weight:11)],\nnode18: [(3, weight:13), (15, weight:18), (4, weight:13), (17, weight:8), (12, weight:9), (19, weight:15), (6, weight:14)],\nnode19: [(7, weight:4), (17, weight:3), (12, weight:15)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 119, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 1, an edge from node 0 to node 2 with capacity 9, an edge from node 1 to node 3 with capacity 6, an edge from node 1 to node 4 with capacity 2, an edge from node 1 to node 0 with capacity 1, an edge from node 1 to node 2 with capacity 3, an edge from node 3 to node 0 with capacity 1, an edge from node 4 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 120, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 1 with capacity 8, an edge from node 1 to node 2 with capacity 1, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 3 with capacity 7, an edge from node 3 to node 5 with capacity 8, an edge from node 3 to node 1 with capacity 2, an edge from node 4 to node 5 with capacity 2, an edge from node 5 to node 0 with capacity 3, an edge from node 5 to node 3 with capacity 8, an edge from node 5 to node 1 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 121, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 3 with capacity 10, an edge from node 0 to node 1 with capacity 7, an edge from node 1 to node 4 with capacity 1, an edge from node 1 to node 2 with capacity 1, an edge from node 2 to node 0 with capacity 6, an edge from node 3 to node 7 with capacity 3, an edge from node 4 to node 3 with capacity 7, an edge from node 5 to node 3 with capacity 4, an edge from node 5 to node 2 with capacity 3, an edge from node 6 to node 5 with capacity 6, an edge from node 7 to node 0 with capacity 4, an edge from node 7 to node 5 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 122, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 2 with capacity 11,\nan edge from node 0 to node 18 with capacity 6,\nan edge from node 0 to node 15 with capacity 9,\nan edge from node 0 to node 17 with capacity 3,\nan edge from node 1 to node 7 with capacity 14,\nan edge from node 1 to node 15 with capacity 3,\nan edge from node 1 to node 12 with capacity 2,\nan edge from node 1 to node 10 with capacity 12,\nan edge from node 2 to node 5 with capacity 7,\nan edge from node 2 to node 6 with capacity 17,\nan edge from node 2 to node 15 with capacity 4,\nan edge from node 2 to node 14 with capacity 5,\nan edge from node 2 to node 13 with capacity 12,\nan edge from node 3 to node 6 with capacity 18,\nan edge from node 3 to node 0 with capacity 14,\nan edge from node 3 to node 15 with capacity 10,\nan edge from node 3 to node 16 with capacity 14,\nan edge from node 3 to node 17 with capacity 7,\nan edge from node 4 to node 7 with capacity 3,\nan edge from node 4 to node 5 with capacity 11,\nan edge from node 4 to node 2 with capacity 11,\nan edge from node 4 to node 18 with capacity 4,\nan edge from node 4 to node 15 with capacity 4,\nan edge from node 4 to node 13 with capacity 3,\nan edge from node 4 to node 16 with capacity 15,\nan edge from node 4 to node 17 with capacity 20,\nan edge from node 5 to node 11 with capacity 15,\nan edge from node 6 to node 7 with capacity 20,\nan edge from node 6 to node 2 with capacity 3,\nan edge from node 6 to node 19 with capacity 19,\nan edge from node 6 to node 18 with capacity 18,\nan edge from node 6 to node 0 with capacity 19,\nan edge from node 6 to node 14 with capacity 5,\nan edge from node 6 to node 12 with capacity 16,\nan edge from node 6 to node 10 with capacity 8,\nan edge from node 6 to node 17 with capacity 2,\nan edge from node 7 to node 6 with capacity 2,\nan edge from node 7 to node 15 with capacity 2,\nan edge from node 7 to node 10 with capacity 2,\nan edge from node 7 to node 9 with capacity 6,\nan edge from node 8 to node 11 with capacity 18,\nan edge from node 8 to node 13 with capacity 5,\nan edge from node 8 to node 9 with capacity 7,\nan edge from node 9 to node 19 with capacity 18,\nan edge from node 9 to node 18 with capacity 2,\nan edge from node 9 to node 11 with capacity 9,\nan edge from node 9 to node 15 with capacity 14,\nan edge from node 10 to node 7 with capacity 6,\nan edge from node 10 to node 19 with capacity 2,\nan edge from node 10 to node 0 with capacity 16,\nan edge from node 10 to node 15 with capacity 7,\nan edge from node 10 to node 8 with capacity 4,\nan edge from node 10 to node 1 with capacity 10,\nan edge from node 11 to node 0 with capacity 15,\nan edge from node 11 to node 16 with capacity 5,\nan edge from node 11 to node 9 with capacity 19,\nan edge from node 12 to node 2 with capacity 13,\nan edge from node 12 to node 19 with capacity 17,\nan edge from node 12 to node 18 with capacity 2,\nan edge from node 13 to node 5 with capacity 19,\nan edge from node 13 to node 6 with capacity 15,\nan edge from node 13 to node 11 with capacity 7,\nan edge from node 13 to node 0 with capacity 20,\nan edge from node 13 to node 3 with capacity 18,\nan edge from node 13 to node 10 with capacity 16,\nan edge from node 14 to node 2 with capacity 8,\nan edge from node 14 to node 15 with capacity 1,\nan edge from node 14 to node 1 with capacity 16,\nan edge from node 15 to node 7 with capacity 15,\nan edge from node 15 to node 2 with capacity 1,\nan edge from node 15 to node 6 with capacity 16,\nan edge from node 15 to node 3 with capacity 18,\nan edge from node 15 to node 17 with capacity 9,\nan edge from node 16 to node 7 with capacity 12,\nan edge from node 16 to node 6 with capacity 19,\nan edge from node 16 to node 18 with capacity 16,\nan edge from node 16 to node 12 with capacity 7,\nan edge from node 17 to node 0 with capacity 10,\nan edge from node 17 to node 10 with capacity 3,\nan edge from node 18 to node 7 with capacity 11,\nan edge from node 18 to node 5 with capacity 16,\nan edge from node 18 to node 4 with capacity 15,\nan edge from node 18 to node 2 with capacity 18,\nan edge from node 18 to node 13 with capacity 18,\nan edge from node 18 to node 3 with capacity 19,\nan edge from node 19 to node 7 with capacity 16,\nan edge from node 19 to node 0 with capacity 20,\nan edge from node 19 to node 10 with capacity 11,\nan edge from node 19 to node 1 with capacity 11.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 4, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 123, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 3 with capacity 1, an edge from node 0 to node 6 with capacity 9, an edge from node 1 to node 4 with capacity 6, an edge from node 1 to node 6 with capacity 1, an edge from node 2 to node 4 with capacity 10, an edge from node 3 to node 5 with capacity 7, an edge from node 3 to node 1 with capacity 8, an edge from node 3 to node 6 with capacity 8, an edge from node 4 to node 1 with capacity 8, an edge from node 4 to node 2 with capacity 2, an edge from node 5 to node 6 with capacity 4, an edge from node 6 to node 3 with capacity 5, an edge from node 6 to node 1 with capacity 9, an edge from node 7 to node 4 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 0, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 124, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 1 to node 4 with capacity 4, an edge from node 2 to node 8 with capacity 3, an edge from node 3 to node 2 with capacity 3, an edge from node 3 to node 6 with capacity 10, an edge from node 3 to node 1 with capacity 6, an edge from node 4 to node 8 with capacity 2, an edge from node 5 to node 7 with capacity 4, an edge from node 5 to node 8 with capacity 2, an edge from node 6 to node 2 with capacity 10, an edge from node 7 to node 2 with capacity 9, an edge from node 8 to node 4 with capacity 1, an edge from node 8 to node 3 with capacity 1, an edge from node 8 to node 5 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 4, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 125, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 3 with capacity 19,\nan edge from node 0 to node 4 with capacity 19,\nan edge from node 0 to node 10 with capacity 18,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 2 with capacity 4,\nan edge from node 1 to node 6 with capacity 15,\nan edge from node 1 to node 7 with capacity 16,\nan edge from node 2 to node 3 with capacity 14,\nan edge from node 2 to node 1 with capacity 3,\nan edge from node 2 to node 9 with capacity 14,\nan edge from node 3 to node 4 with capacity 17,\nan edge from node 3 to node 10 with capacity 10,\nan edge from node 3 to node 11 with capacity 20,\nan edge from node 4 to node 0 with capacity 13,\nan edge from node 4 to node 5 with capacity 5,\nan edge from node 4 to node 6 with capacity 8,\nan edge from node 4 to node 7 with capacity 3,\nan edge from node 5 to node 4 with capacity 7,\nan edge from node 5 to node 11 with capacity 19,\nan edge from node 6 to node 4 with capacity 13,\nan edge from node 6 to node 5 with capacity 17,\nan edge from node 6 to node 7 with capacity 14,\nan edge from node 7 to node 3 with capacity 6,\nan edge from node 7 to node 9 with capacity 10,\nan edge from node 7 to node 12 with capacity 3,\nan edge from node 7 to node 11 with capacity 14,\nan edge from node 8 to node 3 with capacity 4,\nan edge from node 8 to node 9 with capacity 20,\nan edge from node 8 to node 6 with capacity 3,\nan edge from node 8 to node 11 with capacity 19,\nan edge from node 9 to node 3 with capacity 2,\nan edge from node 9 to node 8 with capacity 16,\nan edge from node 9 to node 10 with capacity 18,\nan edge from node 10 to node 5 with capacity 10,\nan edge from node 10 to node 1 with capacity 9,\nan edge from node 11 to node 4 with capacity 1,\nan edge from node 11 to node 1 with capacity 13,\nan edge from node 11 to node 6 with capacity 20,\nan edge from node 11 to node 7 with capacity 14,\nan edge from node 12 to node 4 with capacity 18,\nan edge from node 12 to node 8 with capacity 11,\nan edge from node 12 to node 5 with capacity 10,\nan edge from node 12 to node 9 with capacity 3,\nan edge from node 12 to node 11 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 8, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 126, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 7 with capacity 18,\nan edge from node 0 to node 8 with capacity 20,\nan edge from node 1 to node 11 with capacity 2,\nan edge from node 1 to node 7 with capacity 11,\nan edge from node 1 to node 6 with capacity 5,\nan edge from node 1 to node 10 with capacity 2,\nan edge from node 1 to node 9 with capacity 3,\nan edge from node 1 to node 13 with capacity 8,\nan edge from node 2 to node 11 with capacity 14,\nan edge from node 2 to node 12 with capacity 12,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 5 with capacity 20,\nan edge from node 3 to node 11 with capacity 8,\nan edge from node 3 to node 1 with capacity 2,\nan edge from node 3 to node 12 with capacity 3,\nan edge from node 3 to node 2 with capacity 11,\nan edge from node 3 to node 0 with capacity 6,\nan edge from node 3 to node 5 with capacity 10,\nan edge from node 3 to node 13 with capacity 8,\nan edge from node 4 to node 1 with capacity 18,\nan edge from node 4 to node 10 with capacity 4,\nan edge from node 4 to node 2 with capacity 19,\nan edge from node 4 to node 13 with capacity 5,\nan edge from node 5 to node 2 with capacity 1,\nan edge from node 5 to node 13 with capacity 19,\nan edge from node 6 to node 10 with capacity 4,\nan edge from node 6 to node 0 with capacity 13,\nan edge from node 6 to node 13 with capacity 20,\nan edge from node 7 to node 1 with capacity 15,\nan edge from node 8 to node 4 with capacity 15,\nan edge from node 8 to node 2 with capacity 18,\nan edge from node 9 to node 4 with capacity 6,\nan edge from node 9 to node 13 with capacity 16,\nan edge from node 10 to node 3 with capacity 17,\nan edge from node 10 to node 5 with capacity 7,\nan edge from node 11 to node 4 with capacity 20,\nan edge from node 12 to node 11 with capacity 2,\nan edge from node 12 to node 7 with capacity 12,\nan edge from node 12 to node 6 with capacity 11,\nan edge from node 12 to node 0 with capacity 7,\nan edge from node 12 to node 9 with capacity 4,\nan edge from node 12 to node 5 with capacity 8,\nan edge from node 13 to node 4 with capacity 4,\nan edge from node 13 to node 7 with capacity 15,\nan edge from node 13 to node 12 with capacity 11,\nan edge from node 13 to node 9 with capacity 8.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 13\nflow_value, flow_dict = nx.maximum_flow(G, 4, 13, capacity='weight')\nprint(flow_value)\n```"}, {"id": 127, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(12, weight:18), (16, weight:13), (2, weight:2)],\nnode1: [(15, weight:20), (4, weight:7), (5, weight:2), (12, weight:16), (11, weight:18), (0, weight:7)],\nnode2: [(13, weight:16), (10, weight:9), (6, weight:16), (16, weight:9)],\nnode3: [(0, weight:11)],\nnode4: [(7, weight:18), (12, weight:2), (1, weight:16), (0, weight:12), (2, weight:5)],\nnode5: [(15, weight:6), (3, weight:5), (2, weight:17)],\nnode6: [(15, weight:17), (7, weight:8), (10, weight:5), (5, weight:3), (12, weight:3)],\nnode7: [(15, weight:1), (3, weight:12), (4, weight:5), (8, weight:12)],\nnode8: [(3, weight:15), (11, weight:16), (1, weight:2)],\nnode9: [(13, weight:14), (3, weight:14), (1, weight:17), (14, weight:2)],\nnode10: [(13, weight:9), (5, weight:16), (16, weight:20), (1, weight:8), (0, weight:13)],\nnode11: [(6, weight:10), (5, weight:19), (1, weight:19), (14, weight:4)],\nnode12: [(15, weight:13), (7, weight:19), (3, weight:4), (9, weight:8)],\nnode13: [(10, weight:2), (4, weight:15)],\nnode14: [(7, weight:3), (4, weight:13), (12, weight:5), (9, weight:13), (8, weight:12), (11, weight:1), (2, weight:11)],\nnode15: [(10, weight:11), (5, weight:5), (1, weight:7)],\nnode16: [(1, weight:5), (0, weight:8), (2, weight:19)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 11\nflow_value, flow_dict = nx.maximum_flow(G, 8, 11, capacity='weight')\nprint(flow_value)\n```"}, {"id": 128, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 1 with capacity 10,\nan edge from node 1 to node 9 with capacity 16,\nan edge from node 1 to node 8 with capacity 17,\nan edge from node 2 to node 8 with capacity 10,\nan edge from node 2 to node 4 with capacity 6,\nan edge from node 3 to node 7 with capacity 9,\nan edge from node 3 to node 8 with capacity 3,\nan edge from node 3 to node 10 with capacity 6,\nan edge from node 4 to node 0 with capacity 17,\nan edge from node 4 to node 10 with capacity 3,\nan edge from node 5 to node 8 with capacity 14,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 6 to node 2 with capacity 17,\nan edge from node 6 to node 8 with capacity 7,\nan edge from node 7 to node 1 with capacity 18,\nan edge from node 8 to node 6 with capacity 17,\nan edge from node 8 to node 1 with capacity 4,\nan edge from node 8 to node 0 with capacity 5,\nan edge from node 9 to node 5 with capacity 11,\nan edge from node 9 to node 8 with capacity 9,\nan edge from node 9 to node 0 with capacity 9,\nan edge from node 9 to node 3 with capacity 17,\nan edge from node 10 to node 1 with capacity 17,\nan edge from node 11 to node 6 with capacity 17,\nan edge from node 11 to node 1 with capacity 13,\nan edge from node 11 to node 2 with capacity 8,\nan edge from node 11 to node 4 with capacity 11.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 129, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 1 with capacity 13,\nan edge from node 0 to node 4 with capacity 19,\nan edge from node 0 to node 3 with capacity 12,\nan edge from node 0 to node 2 with capacity 7,\nan edge from node 1 to node 9 with capacity 20,\nan edge from node 1 to node 0 with capacity 6,\nan edge from node 2 to node 6 with capacity 10,\nan edge from node 2 to node 5 with capacity 10,\nan edge from node 2 to node 10 with capacity 5,\nan edge from node 2 to node 0 with capacity 2,\nan edge from node 3 to node 1 with capacity 10,\nan edge from node 3 to node 9 with capacity 9,\nan edge from node 4 to node 10 with capacity 15,\nan edge from node 4 to node 9 with capacity 20,\nan edge from node 4 to node 2 with capacity 4,\nan edge from node 5 to node 10 with capacity 20,\nan edge from node 5 to node 0 with capacity 20,\nan edge from node 6 to node 1 with capacity 19,\nan edge from node 6 to node 3 with capacity 3,\nan edge from node 6 to node 7 with capacity 15,\nan edge from node 6 to node 8 with capacity 11,\nan edge from node 7 to node 10 with capacity 6,\nan edge from node 8 to node 6 with capacity 5,\nan edge from node 8 to node 5 with capacity 11,\nan edge from node 8 to node 9 with capacity 19,\nan edge from node 8 to node 0 with capacity 19,\nan edge from node 9 to node 6 with capacity 13,\nan edge from node 9 to node 7 with capacity 14,\nan edge from node 9 to node 2 with capacity 14,\nan edge from node 9 to node 0 with capacity 2,\nan edge from node 10 to node 3 with capacity 12,\nan edge from node 10 to node 0 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 130, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 9 with capacity 4,\nan edge from node 0 to node 2 with capacity 5,\nan edge from node 1 to node 0 with capacity 18,\nan edge from node 1 to node 5 with capacity 1,\nan edge from node 2 to node 4 with capacity 12,\nan edge from node 2 to node 11 with capacity 7,\nan edge from node 3 to node 5 with capacity 10,\nan edge from node 3 to node 12 with capacity 19,\nan edge from node 4 to node 5 with capacity 17,\nan edge from node 4 to node 10 with capacity 16,\nan edge from node 4 to node 6 with capacity 17,\nan edge from node 5 to node 8 with capacity 8,\nan edge from node 5 to node 4 with capacity 18,\nan edge from node 5 to node 11 with capacity 9,\nan edge from node 6 to node 5 with capacity 14,\nan edge from node 6 to node 4 with capacity 8,\nan edge from node 6 to node 9 with capacity 19,\nan edge from node 6 to node 1 with capacity 4,\nan edge from node 6 to node 10 with capacity 4,\nan edge from node 7 to node 3 with capacity 6,\nan edge from node 7 to node 4 with capacity 5,\nan edge from node 7 to node 10 with capacity 5,\nan edge from node 8 to node 9 with capacity 13,\nan edge from node 9 to node 4 with capacity 17,\nan edge from node 10 to node 8 with capacity 5,\nan edge from node 10 to node 5 with capacity 9,\nan edge from node 10 to node 1 with capacity 20,\nan edge from node 10 to node 12 with capacity 6,\nan edge from node 11 to node 4 with capacity 10,\nan edge from node 11 to node 1 with capacity 8,\nan edge from node 11 to node 12 with capacity 19,\nan edge from node 12 to node 5 with capacity 16,\nan edge from node 12 to node 4 with capacity 1,\nan edge from node 12 to node 7 with capacity 1.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 11\nflow_value, flow_dict = nx.maximum_flow(G, 10, 11, capacity='weight')\nprint(flow_value)\n```"}, {"id": 131, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 4 with capacity 8, an edge from node 0 to node 1 with capacity 8, an edge from node 1 to node 4 with capacity 4, an edge from node 1 to node 3 with capacity 2, an edge from node 3 to node 2 with capacity 8, an edge from node 4 to node 7 with capacity 5, an edge from node 4 to node 6 with capacity 1, an edge from node 4 to node 2 with capacity 9, an edge from node 4 to node 1 with capacity 5, an edge from node 5 to node 0 with capacity 8, an edge from node 5 to node 4 with capacity 10, an edge from node 5 to node 1 with capacity 9, an edge from node 7 to node 5 with capacity 9, an edge from node 7 to node 3 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 132, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 7 with capacity 5, an edge from node 2 to node 4 with capacity 1, an edge from node 2 to node 1 with capacity 10, an edge from node 3 to node 2 with capacity 5, an edge from node 4 to node 6 with capacity 9, an edge from node 5 to node 2 with capacity 8, an edge from node 5 to node 3 with capacity 6, an edge from node 6 to node 7 with capacity 7, an edge from node 6 to node 1 with capacity 8, an edge from node 7 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 133, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 1 to node 3 with capacity 8, an edge from node 1 to node 5 with capacity 2, an edge from node 1 to node 6 with capacity 3, an edge from node 1 to node 2 with capacity 2, an edge from node 3 to node 0 with capacity 3, an edge from node 4 to node 8 with capacity 3, an edge from node 4 to node 0 with capacity 9, an edge from node 4 to node 6 with capacity 8, an edge from node 8 to node 1 with capacity 8, an edge from node 8 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 134, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 3, an edge from node 0 to node 2 with capacity 3, an edge from node 0 to node 4 with capacity 3, an edge from node 1 to node 3 with capacity 1, an edge from node 2 to node 0 with capacity 10, an edge from node 3 to node 2 with capacity 8, an edge from node 3 to node 4 with capacity 2, an edge from node 4 to node 2 with capacity 8, an edge from node 4 to node 0 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 0, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 135, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 6 with capacity 4, an edge from node 1 to node 5 with capacity 5, an edge from node 2 to node 3 with capacity 6, an edge from node 3 to node 1 with capacity 9, an edge from node 3 to node 7 with capacity 5, an edge from node 4 to node 0 with capacity 10, an edge from node 4 to node 6 with capacity 7, an edge from node 4 to node 5 with capacity 7, an edge from node 5 to node 0 with capacity 1, an edge from node 5 to node 7 with capacity 3, an edge from node 6 to node 1 with capacity 5, an edge from node 6 to node 2 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 136, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 10, an edge from node 1 to node 4 with capacity 10, an edge from node 2 to node 0 with capacity 3, an edge from node 2 to node 1 with capacity 4, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 5 with capacity 6, an edge from node 4 to node 3 with capacity 2, an edge from node 5 to node 1 with capacity 5, an edge from node 5 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 137, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(12, weight:1), (4, weight:10), (18, weight:18), (14, weight:17), (1, weight:2), (13, weight:6)],\nnode1: [(7, weight:19), (8, weight:8)],\nnode2: [(12, weight:9), (4, weight:5), (7, weight:18), (5, weight:16), (0, weight:8), (13, weight:4), (11, weight:4)],\nnode3: [(4, weight:6), (15, weight:17), (0, weight:3), (6, weight:20)],\nnode4: [(7, weight:10), (15, weight:12), (16, weight:12), (5, weight:20), (1, weight:12), (2, weight:17), (13, weight:1)],\nnode5: [(4, weight:4), (14, weight:11), (1, weight:20), (0, weight:6), (13, weight:2), (6, weight:5)],\nnode6: [(4, weight:14), (5, weight:20), (9, weight:5), (0, weight:20), (17, weight:8)],\nnode7: [(3, weight:14), (15, weight:19), (18, weight:4), (10, weight:5), (5, weight:20), (1, weight:20), (8, weight:12)],\nnode8: [(12, weight:19), (15, weight:14), (10, weight:16), (14, weight:20), (5, weight:15), (11, weight:3)],\nnode9: [(7, weight:3), (15, weight:15), (16, weight:4), (10, weight:15), (14, weight:8), (13, weight:15), (17, weight:2), (11, weight:12)],\nnode10: [(4, weight:11), (3, weight:20), (11, weight:14)],\nnode11: [(7, weight:11), (16, weight:17), (14, weight:11), (9, weight:20), (8, weight:20)],\nnode12: [(7, weight:6), (3, weight:5), (18, weight:18)],\nnode13: [(12, weight:11), (4, weight:16), (15, weight:6), (16, weight:18), (18, weight:17), (17, weight:2), (6, weight:19)],\nnode14: [(13, weight:13)],\nnode15: [(7, weight:2), (18, weight:20), (1, weight:15), (13, weight:6), (8, weight:5)],\nnode16: [(12, weight:16), (7, weight:16), (10, weight:1), (9, weight:9), (0, weight:5)],\nnode17: [(3, weight:4), (9, weight:19), (2, weight:7), (11, weight:19)],\nnode18: [(12, weight:8), (16, weight:16), (1, weight:7), (13, weight:16), (17, weight:8)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+)\\/weight:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 18 to node 12\nflow_value, flow_dict = nx.maximum_flow_cutoff(G, 18, 12, capacity='weight')\nprint(flow_value)\n```"}, {"id": 138, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(16, weight:11), (7, weight:20), (17, weight:7), (6, weight:10)],\nnode1: [(18, weight:15), (16, weight:19), (10, weight:16), (4, weight:13), (3, weight:19), (13, weight:20)],\nnode2: [(18, weight:14), (15, weight:1), (16, weight:2), (5, weight:8)],\nnode3: [(16, weight:19), (8, weight:17), (11, weight:5), (17, weight:7), (13, weight:1), (9, weight:5)],\nnode4: [(18, weight:6), (8, weight:7), (12, weight:11), (14, weight:3), (1, weight:5)],\nnode5: [(4, weight:8), (12, weight:16), (17, weight:4), (9, weight:17)],\nnode6: [(15, weight:16), (5, weight:2), (13, weight:20)],\nnode7: [(2, weight:16), (15, weight:14), (4, weight:13), (12, weight:11), (1, weight:16)],\nnode8: [(16, weight:6), (0, weight:13), (10, weight:4), (3, weight:16), (17, weight:6), (1, weight:8), (9, weight:6)],\nnode9: [(2, weight:6), (0, weight:18)],\nnode10: [(18, weight:2), (15, weight:4), (0, weight:11), (5, weight:14), (7, weight:13), (12, weight:19), (17, weight:3)],\nnode11: [(7, weight:12), (8, weight:12), (14, weight:20), (6, weight:5)],\nnode12: [(18, weight:18), (7, weight:4), (8, weight:9), (3, weight:20), (11, weight:10), (14, weight:12)],\nnode13: [(2, weight:7), (0, weight:20), (12, weight:7), (3, weight:15), (14, weight:4), (9, weight:1)],\nnode14: [(15, weight:12), (0, weight:15), (12, weight:20), (13, weight:6)],\nnode15: [(12, weight:20), (17, weight:2), (13, weight:1)],\nnode16: [(5, weight:5), (7, weight:4), (4, weight:4), (3, weight:10), (11, weight:14), (17, weight:16), (14, weight:7)],\nnode17: [(0, weight:5), (5, weight:17), (3, weight:4), (13, weight:1), (14, weight:6)],\nnode18: [(16, weight:5), (4, weight:16), (3, weight:13), (11, weight:19), (9, weight:18)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 5, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 139, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 12 with capacity 6,\nan edge from node 0 to node 7 with capacity 3,\nan edge from node 0 to node 13 with capacity 4,\nan edge from node 1 to node 11 with capacity 14,\nan edge from node 1 to node 3 with capacity 20,\nan edge from node 1 to node 7 with capacity 11,\nan edge from node 1 to node 5 with capacity 11,\nan edge from node 2 to node 11 with capacity 13,\nan edge from node 2 to node 13 with capacity 12,\nan edge from node 2 to node 9 with capacity 4,\nan edge from node 2 to node 10 with capacity 11,\nan edge from node 3 to node 11 with capacity 15,\nan edge from node 3 to node 13 with capacity 1,\nan edge from node 4 to node 6 with capacity 12,\nan edge from node 5 to node 12 with capacity 5,\nan edge from node 5 to node 0 with capacity 20,\nan edge from node 5 to node 1 with capacity 4,\nan edge from node 5 to node 3 with capacity 15,\nan edge from node 5 to node 2 with capacity 16,\nan edge from node 5 to node 13 with capacity 13,\nan edge from node 6 to node 11 with capacity 7,\nan edge from node 6 to node 13 with capacity 8,\nan edge from node 6 to node 5 with capacity 4,\nan edge from node 7 to node 13 with capacity 14,\nan edge from node 7 to node 5 with capacity 3,\nan edge from node 7 to node 10 with capacity 5,\nan edge from node 8 to node 12 with capacity 1,\nan edge from node 8 to node 3 with capacity 1,\nan edge from node 8 to node 2 with capacity 12,\nan edge from node 9 to node 0 with capacity 14,\nan edge from node 9 to node 3 with capacity 5,\nan edge from node 9 to node 2 with capacity 13,\nan edge from node 9 to node 13 with capacity 20,\nan edge from node 9 to node 10 with capacity 12,\nan edge from node 10 to node 8 with capacity 1,\nan edge from node 10 to node 12 with capacity 20,\nan edge from node 10 to node 1 with capacity 8,\nan edge from node 10 to node 2 with capacity 14,\nan edge from node 10 to node 7 with capacity 13,\nan edge from node 11 to node 12 with capacity 4,\nan edge from node 11 to node 2 with capacity 12,\nan edge from node 11 to node 5 with capacity 20,\nan edge from node 11 to node 9 with capacity 20,\nan edge from node 12 to node 4 with capacity 8,\nan edge from node 12 to node 11 with capacity 12,\nan edge from node 12 to node 1 with capacity 18,\nan edge from node 12 to node 2 with capacity 13,\nan edge from node 12 to node 5 with capacity 1,\nan edge from node 12 to node 10 with capacity 6,\nan edge from node 13 to node 8 with capacity 16,\nan edge from node 13 to node 11 with capacity 3,\nan edge from node 13 to node 10 with capacity 19.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 140, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 10 with capacity 3,\nan edge from node 0 to node 5 with capacity 4,\nan edge from node 0 to node 13 with capacity 14,\nan edge from node 0 to node 8 with capacity 11,\nan edge from node 0 to node 9 with capacity 4,\nan edge from node 1 to node 3 with capacity 5,\nan edge from node 1 to node 11 with capacity 4,\nan edge from node 1 to node 13 with capacity 10,\nan edge from node 2 to node 3 with capacity 7,\nan edge from node 2 to node 7 with capacity 1,\nan edge from node 3 to node 10 with capacity 12,\nan edge from node 3 to node 7 with capacity 15,\nan edge from node 4 to node 13 with capacity 17,\nan edge from node 5 to node 10 with capacity 5,\nan edge from node 5 to node 2 with capacity 17,\nan edge from node 6 to node 0 with capacity 18,\nan edge from node 6 to node 7 with capacity 18,\nan edge from node 6 to node 9 with capacity 6,\nan edge from node 7 to node 4 with capacity 6,\nan edge from node 7 to node 6 with capacity 10,\nan edge from node 7 to node 13 with capacity 19,\nan edge from node 7 to node 8 with capacity 9,\nan edge from node 7 to node 9 with capacity 20,\nan edge from node 8 to node 4 with capacity 3,\nan edge from node 8 to node 1 with capacity 15,\nan edge from node 8 to node 13 with capacity 4,\nan edge from node 8 to node 7 with capacity 13,\nan edge from node 9 to node 6 with capacity 18,\nan edge from node 9 to node 5 with capacity 10,\nan edge from node 9 to node 12 with capacity 6,\nan edge from node 10 to node 7 with capacity 10,\nan edge from node 10 to node 12 with capacity 6,\nan edge from node 11 to node 4 with capacity 5,\nan edge from node 11 to node 0 with capacity 9,\nan edge from node 11 to node 1 with capacity 20,\nan edge from node 11 to node 2 with capacity 4,\nan edge from node 11 to node 13 with capacity 11,\nan edge from node 11 to node 8 with capacity 7,\nan edge from node 12 to node 10 with capacity 10,\nan edge from node 12 to node 13 with capacity 18,\nan edge from node 12 to node 9 with capacity 15,\nan edge from node 13 to node 6 with capacity 5,\nan edge from node 13 to node 2 with capacity 4.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 141, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 12 with capacity 1,\nan edge from node 1 to node 3 with capacity 2,\nan edge from node 1 to node 10 with capacity 10,\nan edge from node 1 to node 2 with capacity 17,\nan edge from node 2 to node 0 with capacity 10,\nan edge from node 2 to node 3 with capacity 15,\nan edge from node 2 to node 10 with capacity 2,\nan edge from node 2 to node 4 with capacity 15,\nan edge from node 3 to node 7 with capacity 15,\nan edge from node 4 to node 0 with capacity 6,\nan edge from node 4 to node 7 with capacity 12,\nan edge from node 4 to node 11 with capacity 6,\nan edge from node 4 to node 2 with capacity 13,\nan edge from node 5 to node 11 with capacity 8,\nan edge from node 6 to node 0 with capacity 8,\nan edge from node 7 to node 2 with capacity 2,\nan edge from node 7 to node 1 with capacity 4,\nan edge from node 8 to node 0 with capacity 8,\nan edge from node 8 to node 9 with capacity 12,\nan edge from node 8 to node 10 with capacity 11,\nan edge from node 8 to node 7 with capacity 8,\nan edge from node 8 to node 2 with capacity 17,\nan edge from node 8 to node 6 with capacity 3,\nan edge from node 8 to node 1 with capacity 8,\nan edge from node 9 to node 3 with capacity 4,\nan edge from node 9 to node 11 with capacity 13,\nan edge from node 9 to node 4 with capacity 13,\nan edge from node 9 to node 1 with capacity 11,\nan edge from node 9 to node 8 with capacity 13,\nan edge from node 10 to node 9 with capacity 4,\nan edge from node 10 to node 2 with capacity 13,\nan edge from node 10 to node 5 with capacity 19,\nan edge from node 11 to node 3 with capacity 11,\nan edge from node 11 to node 9 with capacity 14,\nan edge from node 11 to node 10 with capacity 9,\nan edge from node 11 to node 4 with capacity 18,\nan edge from node 11 to node 1 with capacity 6,\nan edge from node 12 to node 0 with capacity 6,\nan edge from node 12 to node 7 with capacity 1,\nan edge from node 12 to node 6 with capacity 13,\nan edge from node 12 to node 5 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 142, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 14 with capacity 13,\nan edge from node 1 to node 4 with capacity 15,\nan edge from node 1 to node 9 with capacity 9,\nan edge from node 1 to node 14 with capacity 7,\nan edge from node 2 to node 4 with capacity 13,\nan edge from node 2 to node 9 with capacity 2,\nan edge from node 2 to node 14 with capacity 13,\nan edge from node 3 to node 2 with capacity 10,\nan edge from node 3 to node 1 with capacity 19,\nan edge from node 3 to node 10 with capacity 3,\nan edge from node 3 to node 6 with capacity 16,\nan edge from node 3 to node 9 with capacity 3,\nan edge from node 3 to node 7 with capacity 18,\nan edge from node 3 to node 13 with capacity 2,\nan edge from node 4 to node 12 with capacity 9,\nan edge from node 4 to node 1 with capacity 7,\nan edge from node 4 to node 3 with capacity 14,\nan edge from node 4 to node 6 with capacity 7,\nan edge from node 4 to node 13 with capacity 12,\nan edge from node 5 to node 4 with capacity 6,\nan edge from node 5 to node 14 with capacity 7,\nan edge from node 6 to node 8 with capacity 14,\nan edge from node 6 to node 1 with capacity 15,\nan edge from node 6 to node 9 with capacity 16,\nan edge from node 6 to node 14 with capacity 14,\nan edge from node 6 to node 7 with capacity 13,\nan edge from node 6 to node 13 with capacity 6,\nan edge from node 6 to node 0 with capacity 19,\nan edge from node 7 to node 2 with capacity 3,\nan edge from node 7 to node 1 with capacity 17,\nan edge from node 7 to node 3 with capacity 11,\nan edge from node 7 to node 9 with capacity 5,\nan edge from node 7 to node 0 with capacity 11,\nan edge from node 8 to node 12 with capacity 18,\nan edge from node 8 to node 6 with capacity 16,\nan edge from node 8 to node 9 with capacity 18,\nan edge from node 8 to node 11 with capacity 14,\nan edge from node 9 to node 5 with capacity 15,\nan edge from node 9 to node 3 with capacity 8,\nan edge from node 9 to node 13 with capacity 7,\nan edge from node 10 to node 1 with capacity 6,\nan edge from node 10 to node 4 with capacity 7,\nan edge from node 10 to node 0 with capacity 14,\nan edge from node 11 to node 2 with capacity 1,\nan edge from node 11 to node 5 with capacity 4,\nan edge from node 11 to node 3 with capacity 5,\nan edge from node 11 to node 14 with capacity 19,\nan edge from node 11 to node 13 with capacity 7,\nan edge from node 12 to node 2 with capacity 10,\nan edge from node 12 to node 5 with capacity 1,\nan edge from node 12 to node 13 with capacity 14,\nan edge from node 13 to node 12 with capacity 5,\nan edge from node 13 to node 4 with capacity 20,\nan edge from node 13 to node 3 with capacity 15,\nan edge from node 13 to node 7 with capacity 8,\nan edge from node 14 to node 8 with capacity 8,\nan edge from node 14 to node 10 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 13\nflow_value, flow_dict = nx.maximum_flow(G, 0, 13, capacity='weight')\nprint(flow_value)\n```"}, {"id": 143, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 1 to node 0 with capacity 2,\nan edge from node 1 to node 12 with capacity 17,\nan edge from node 1 to node 7 with capacity 11,\nan edge from node 2 to node 3 with capacity 9,\nan edge from node 2 to node 9 with capacity 18,\nan edge from node 2 to node 4 with capacity 7,\nan edge from node 2 to node 7 with capacity 6,\nan edge from node 2 to node 5 with capacity 15,\nan edge from node 3 to node 8 with capacity 2,\nan edge from node 5 to node 8 with capacity 5,\nan edge from node 5 to node 1 with capacity 18,\nan edge from node 5 to node 2 with capacity 3,\nan edge from node 6 to node 3 with capacity 5,\nan edge from node 6 to node 1 with capacity 11,\nan edge from node 6 to node 9 with capacity 17,\nan edge from node 7 to node 0 with capacity 7,\nan edge from node 7 to node 10 with capacity 6,\nan edge from node 7 to node 11 with capacity 3,\nan edge from node 7 to node 6 with capacity 20,\nan edge from node 8 to node 1 with capacity 15,\nan edge from node 8 to node 12 with capacity 8,\nan edge from node 8 to node 4 with capacity 20,\nan edge from node 8 to node 11 with capacity 1,\nan edge from node 9 to node 12 with capacity 19,\nan edge from node 9 to node 10 with capacity 13,\nan edge from node 9 to node 5 with capacity 20,\nan edge from node 10 to node 8 with capacity 10,\nan edge from node 10 to node 12 with capacity 12,\nan edge from node 10 to node 2 with capacity 19,\nan edge from node 10 to node 11 with capacity 17,\nan edge from node 11 to node 0 with capacity 5,\nan edge from node 11 to node 9 with capacity 12,\nan edge from node 11 to node 12 with capacity 11,\nan edge from node 11 to node 2 with capacity 9,\nan edge from node 12 to node 1 with capacity 12,\nan edge from node 12 to node 4 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 9, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 144, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 3 with capacity 5, an edge from node 1 to node 0 with capacity 7, an edge from node 1 to node 6 with capacity 3, an edge from node 1 to node 7 with capacity 1, an edge from node 1 to node 4 with capacity 1, an edge from node 3 to node 1 with capacity 8, an edge from node 4 to node 0 with capacity 2, an edge from node 4 to node 5 with capacity 5, an edge from node 4 to node 7 with capacity 8, an edge from node 5 to node 2 with capacity 9, an edge from node 5 to node 1 with capacity 1, an edge from node 6 to node 0 with capacity 4, an edge from node 6 to node 5 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 145, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(9, capacity:4), (14, capacity:7), (13, capacity:2), (3, capacity:3), (8, capacity:3), (2, capacity:13)],\nnode1: [(12, capacity:3), (10, capacity:11), (11, capacity:8), (4, capacity:2), (7, capacity:7)],\nnode2: [(5, capacity:4), (9, capacity:11), (14, capacity:13), (13, capacity:11), (4, capacity:10)],\nnode3: [(12, capacity:8), (14, capacity:12), (13, capacity:11), (8, capacity:3), (10, capacity:14)],\nnode4: [(12, capacity:2), (9, capacity:12), (13, capacity:16), (3, capacity:13)],\nnode5: [(0, capacity:1), (4, capacity:12), (7, capacity:4), (1, capacity:16)],\nnode6: [(5, capacity:12), (0, capacity:16), (9, capacity:17), (4, capacity:14)],\nnode7: [(5, capacity:20), (0, capacity:20), (8, capacity:8), (10, capacity:3), (6, capacity:16)],\nnode8: [(0, capacity:11), (12, capacity:15), (2, capacity:20)],\nnode9: [(5, capacity:10), (8, capacity:8), (11, capacity:3)],\nnode11: [(5, capacity:15), (13, capacity:5), (3, capacity:2), (4, capacity:18)],\nnode12: [(6, capacity:19)],\nnode13: [(5, capacity:2), (12, capacity:17), (14, capacity:17), (8, capacity:1)],\nnode14: [(0, capacity:11), (12, capacity:8), (11, capacity:8)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 11 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 11, 4, capacity='capacity')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 146, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 6 with capacity 6, an edge from node 1 to node 3 with capacity 2, an edge from node 1 to node 8 with capacity 8, an edge from node 2 to node 1 with capacity 1, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 6 with capacity 8, an edge from node 2 to node 0 with capacity 2, an edge from node 3 to node 6 with capacity 8, an edge from node 4 to node 5 with capacity 1, an edge from node 5 to node 2 with capacity 2, an edge from node 5 to node 4 with capacity 7, an edge from node 5 to node 3 with capacity 10, an edge from node 6 to node 2 with capacity 9, an edge from node 7 to node 5 with capacity 6, an edge from node 7 to node 0 with capacity 5, an edge from node 8 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 147, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 1 with capacity 5,\nan edge from node 0 to node 12 with capacity 18,\nan edge from node 0 to node 13 with capacity 13,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 9 with capacity 20,\nan edge from node 2 to node 10 with capacity 11,\nan edge from node 2 to node 8 with capacity 18,\nan edge from node 2 to node 9 with capacity 7,\nan edge from node 3 to node 6 with capacity 14,\nan edge from node 3 to node 10 with capacity 7,\nan edge from node 3 to node 8 with capacity 15,\nan edge from node 3 to node 5 with capacity 13,\nan edge from node 3 to node 12 with capacity 1,\nan edge from node 4 to node 3 with capacity 4,\nan edge from node 4 to node 2 with capacity 11,\nan edge from node 4 to node 13 with capacity 12,\nan edge from node 5 to node 4 with capacity 14,\nan edge from node 5 to node 2 with capacity 12,\nan edge from node 5 to node 13 with capacity 4,\nan edge from node 6 to node 10 with capacity 2,\nan edge from node 6 to node 12 with capacity 18,\nan edge from node 7 to node 4 with capacity 6,\nan edge from node 7 to node 6 with capacity 13,\nan edge from node 7 to node 9 with capacity 7,\nan edge from node 7 to node 2 with capacity 15,\nan edge from node 8 to node 0 with capacity 20,\nan edge from node 8 to node 4 with capacity 9,\nan edge from node 8 to node 6 with capacity 7,\nan edge from node 8 to node 5 with capacity 12,\nan edge from node 8 to node 2 with capacity 20,\nan edge from node 8 to node 12 with capacity 4,\nan edge from node 8 to node 13 with capacity 10,\nan edge from node 9 to node 10 with capacity 11,\nan edge from node 10 to node 3 with capacity 11,\nan edge from node 10 to node 13 with capacity 17,\nan edge from node 11 to node 7 with capacity 7,\nan edge from node 11 to node 6 with capacity 15,\nan edge from node 11 to node 10 with capacity 14,\nan edge from node 11 to node 8 with capacity 20,\nan edge from node 12 to node 11 with capacity 12,\nan edge from node 12 to node 5 with capacity 16,\nan edge from node 13 to node 10 with capacity 5,\nan edge from node 13 to node 5 with capacity 6,\nan edge from node 13 to node 2 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 148, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 6, an edge from node 0 to node 4 with capacity 10, an edge from node 1 to node 2 with capacity 1, an edge from node 1 to node 3 with capacity 9, an edge from node 1 to node 0 with capacity 7, an edge from node 2 to node 4 with capacity 7, an edge from node 3 to node 0 with capacity 7, an edge from node 3 to node 4 with capacity 3, an edge from node 4 to node 2 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 3, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 149, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(6, weight:8), (5, weight:15), (8, weight:20), (2, weight:6)],\nnode1: [(6, weight:5), (13, weight:9), (11, weight:2), (4, weight:13), (15, weight:15), (7, weight:11)],\nnode2: [(6, weight:15), (3, weight:15), (5, weight:17), (4, weight:7), (15, weight:8), (1, weight:20)],\nnode3: [(0, weight:4), (16, weight:4), (2, weight:8)],\nnode4: [(10, weight:8), (16, weight:12), (8, weight:15), (2, weight:5)],\nnode5: [(6, weight:16), (3, weight:3), (11, weight:7), (1, weight:6)],\nnode6: [(10, weight:20), (14, weight:12), (8, weight:13)],\nnode8: [(6, weight:5), (10, weight:17), (4, weight:7), (15, weight:10), (12, weight:5), (1, weight:15)],\nnode9: [(1, weight:8), (8, weight:13), (2, weight:15)],\nnode10: [(9, weight:17), (12, weight:8)],\nnode11: [(0, weight:18), (5, weight:4), (16, weight:20), (4, weight:7), (9, weight:14), (2, weight:4)],\nnode12: [(13, weight:5), (5, weight:13), (15, weight:9), (1, weight:16), (2, weight:5)],\nnode13: [(0, weight:20), (4, weight:12), (9, weight:12), (8, weight:9), (2, weight:19)],\nnode14: [(16, weight:12), (7, weight:16), (1, weight:14)],\nnode15: [(6, weight:17), (13, weight:17), (14, weight:18), (4, weight:9), (9, weight:19), (7, weight:10), (1, weight:15)],\nnode16: [(0, weight:18), (3, weight:10), (9, weight:18), (7, weight:6), (12, weight:5)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 6, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 150, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 6 with capacity 10, an edge from node 0 to node 1 with capacity 2, an edge from node 1 to node 3 with capacity 3, an edge from node 1 to node 2 with capacity 1, an edge from node 1 to node 0 with capacity 5, an edge from node 1 to node 7 with capacity 3, an edge from node 2 to node 5 with capacity 10, an edge from node 3 to node 2 with capacity 10, an edge from node 3 to node 7 with capacity 4, an edge from node 4 to node 2 with capacity 6, an edge from node 4 to node 5 with capacity 1, an edge from node 6 to node 3 with capacity 9, an edge from node 6 to node 0 with capacity 4, an edge from node 6 to node 5 with capacity 9, an edge from node 7 to node 3 with capacity 8, an edge from node 7 to node 1 with capacity 7, an edge from node 7 to node 2 with capacity 7, an edge from node 8 to node 0 with capacity 6, an edge from node 8 to node 5 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 0, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 151, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 3 with capacity 5,\nan edge from node 0 to node 4 with capacity 4,\nan edge from node 1 to node 5 with capacity 9,\nan edge from node 1 to node 3 with capacity 2,\nan edge from node 1 to node 4 with capacity 10,\nan edge from node 1 to node 9 with capacity 3,\nan edge from node 2 to node 8 with capacity 18,\nan edge from node 2 to node 3 with capacity 1,\nan edge from node 3 to node 5 with capacity 1,\nan edge from node 3 to node 2 with capacity 9,\nan edge from node 4 to node 2 with capacity 8,\nan edge from node 4 to node 3 with capacity 12,\nan edge from node 5 to node 8 with capacity 2,\nan edge from node 5 to node 1 with capacity 17,\nan edge from node 5 to node 0 with capacity 16,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 6 to node 1 with capacity 18,\nan edge from node 6 to node 0 with capacity 9,\nan edge from node 7 to node 5 with capacity 19,\nan edge from node 7 to node 6 with capacity 20,\nan edge from node 7 to node 10 with capacity 9,\nan edge from node 7 to node 4 with capacity 9,\nan edge from node 7 to node 9 with capacity 12,\nan edge from node 9 to node 6 with capacity 3,\nan edge from node 9 to node 4 with capacity 12,\nan edge from node 9 to node 0 with capacity 9,\nan edge from node 10 to node 5 with capacity 11,\nan edge from node 10 to node 1 with capacity 16.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 152, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 2 with capacity 6, an edge from node 0 to node 3 with capacity 9, an edge from node 0 to node 1 with capacity 4, an edge from node 1 to node 3 with capacity 3, an edge from node 2 to node 0 with capacity 7, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 0 with capacity 9, an edge from node 4 to node 2 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 0, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 153, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 15, and the edges are:\nan edge from node 0 to node 15 with capacity 10,\nan edge from node 0 to node 4 with capacity 9,\nan edge from node 0 to node 11 with capacity 16,\nan edge from node 0 to node 8 with capacity 15,\nan edge from node 0 to node 10 with capacity 11,\nan edge from node 1 to node 13 with capacity 11,\nan edge from node 1 to node 14 with capacity 10,\nan edge from node 2 to node 7 with capacity 16,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 10 with capacity 6,\nan edge from node 3 to node 0 with capacity 7,\nan edge from node 3 to node 8 with capacity 2,\nan edge from node 3 to node 1 with capacity 17,\nan edge from node 4 to node 0 with capacity 19,\nan edge from node 4 to node 11 with capacity 20,\nan edge from node 5 to node 0 with capacity 10,\nan edge from node 5 to node 11 with capacity 1,\nan edge from node 5 to node 8 with capacity 1,\nan edge from node 5 to node 3 with capacity 2,\nan edge from node 5 to node 9 with capacity 17,\nan edge from node 6 to node 14 with capacity 9,\nan edge from node 7 to node 0 with capacity 1,\nan edge from node 7 to node 15 with capacity 2,\nan edge from node 7 to node 4 with capacity 11,\nan edge from node 7 to node 13 with capacity 8,\nan edge from node 7 to node 6 with capacity 9,\nan edge from node 8 to node 13 with capacity 10,\nan edge from node 8 to node 6 with capacity 5,\nan edge from node 8 to node 2 with capacity 18,\nan edge from node 8 to node 3 with capacity 9,\nan edge from node 9 to node 13 with capacity 3,\nan edge from node 9 to node 12 with capacity 16,\nan edge from node 10 to node 5 with capacity 3,\nan edge from node 10 to node 15 with capacity 17,\nan edge from node 10 to node 7 with capacity 11,\nan edge from node 10 to node 14 with capacity 15,\nan edge from node 10 to node 11 with capacity 1,\nan edge from node 10 to node 1 with capacity 18,\nan edge from node 10 to node 3 with capacity 5,\nan edge from node 10 to node 9 with capacity 2,\nan edge from node 11 to node 5 with capacity 16,\nan edge from node 11 to node 2 with capacity 11,\nan edge from node 12 to node 5 with capacity 19,\nan edge from node 12 to node 4 with capacity 18,\nan edge from node 12 to node 13 with capacity 10,\nan edge from node 12 to node 14 with capacity 4,\nan edge from node 12 to node 11 with capacity 1,\nan edge from node 12 to node 8 with capacity 1,\nan edge from node 13 to node 9 with capacity 14,\nan edge from node 14 to node 11 with capacity 17,\nan edge from node 14 to node 12 with capacity 5,\nan edge from node 14 to node 2 with capacity 4,\nan edge from node 15 to node 5 with capacity 14,\nan edge from node 15 to node 7 with capacity 13,\nan edge from node 15 to node 6 with capacity 16,\nan edge from node 15 to node 1 with capacity 7,\nan edge from node 15 to node 3 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 11\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 0, 11, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 154, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 6 with capacity 2,\nan edge from node 1 to node 3 with capacity 2,\nan edge from node 1 to node 6 with capacity 6,\nan edge from node 1 to node 11 with capacity 17,\nan edge from node 1 to node 7 with capacity 16,\nan edge from node 1 to node 8 with capacity 13,\nan edge from node 1 to node 5 with capacity 12,\nan edge from node 2 to node 4 with capacity 1,\nan edge from node 2 to node 0 with capacity 16,\nan edge from node 2 to node 9 with capacity 7,\nan edge from node 2 to node 6 with capacity 10,\nan edge from node 2 to node 7 with capacity 13,\nan edge from node 2 to node 13 with capacity 15,\nan edge from node 2 to node 10 with capacity 11,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 5 with capacity 7,\nan edge from node 3 to node 4 with capacity 16,\nan edge from node 3 to node 0 with capacity 19,\nan edge from node 3 to node 7 with capacity 2,\nan edge from node 3 to node 1 with capacity 15,\nan edge from node 4 to node 3 with capacity 3,\nan edge from node 4 to node 9 with capacity 12,\nan edge from node 4 to node 13 with capacity 8,\nan edge from node 5 to node 12 with capacity 9,\nan edge from node 5 to node 3 with capacity 6,\nan edge from node 5 to node 2 with capacity 12,\nan edge from node 5 to node 4 with capacity 11,\nan edge from node 5 to node 8 with capacity 2,\nan edge from node 7 to node 3 with capacity 16,\nan edge from node 7 to node 0 with capacity 10,\nan edge from node 7 to node 13 with capacity 10,\nan edge from node 7 to node 8 with capacity 3,\nan edge from node 7 to node 1 with capacity 17,\nan edge from node 8 to node 2 with capacity 20,\nan edge from node 8 to node 0 with capacity 20,\nan edge from node 8 to node 6 with capacity 5,\nan edge from node 8 to node 11 with capacity 8,\nan edge from node 9 to node 11 with capacity 2,\nan edge from node 9 to node 8 with capacity 13,\nan edge from node 10 to node 6 with capacity 7,\nan edge from node 11 to node 9 with capacity 11,\nan edge from node 11 to node 7 with capacity 20,\nan edge from node 11 to node 1 with capacity 10,\nan edge from node 12 to node 4 with capacity 16,\nan edge from node 12 to node 0 with capacity 9,\nan edge from node 12 to node 9 with capacity 16,\nan edge from node 12 to node 6 with capacity 9,\nan edge from node 12 to node 7 with capacity 1,\nan edge from node 12 to node 10 with capacity 19,\nan edge from node 13 to node 9 with capacity 4,\nan edge from node 13 to node 11 with capacity 8,\nan edge from node 13 to node 8 with capacity 19,\nan edge from node 13 to node 5 with capacity 12,\nan edge from node 13 to node 1 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 155, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 1 with capacity 10,\nan edge from node 0 to node 4 with capacity 6,\nan edge from node 0 to node 6 with capacity 11,\nan edge from node 0 to node 3 with capacity 12,\nan edge from node 0 to node 2 with capacity 13,\nan edge from node 0 to node 8 with capacity 1,\nan edge from node 1 to node 10 with capacity 14,\nan edge from node 1 to node 5 with capacity 15,\nan edge from node 2 to node 7 with capacity 5,\nan edge from node 2 to node 5 with capacity 11,\nan edge from node 3 to node 7 with capacity 17,\nan edge from node 3 to node 10 with capacity 12,\nan edge from node 3 to node 9 with capacity 9,\nan edge from node 3 to node 0 with capacity 12,\nan edge from node 4 to node 6 with capacity 11,\nan edge from node 4 to node 2 with capacity 13,\nan edge from node 5 to node 1 with capacity 1,\nan edge from node 5 to node 8 with capacity 17,\nan edge from node 6 to node 3 with capacity 5,\nan edge from node 6 to node 5 with capacity 5,\nan edge from node 6 to node 2 with capacity 15,\nan edge from node 7 to node 0 with capacity 12,\nan edge from node 7 to node 8 with capacity 5,\nan edge from node 8 to node 7 with capacity 15,\nan edge from node 8 to node 3 with capacity 19,\nan edge from node 9 to node 3 with capacity 13,\nan edge from node 9 to node 8 with capacity 16,\nan edge from node 10 to node 4 with capacity 11,\nan edge from node 10 to node 5 with capacity 3,\nan edge from node 10 to node 9 with capacity 16.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 156, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 3 with capacity 6, an edge from node 0 to node 8 with capacity 4, an edge from node 1 to node 2 with capacity 6, an edge from node 1 to node 3 with capacity 4, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 8 with capacity 4, an edge from node 4 to node 3 with capacity 6, an edge from node 4 to node 0 with capacity 1, an edge from node 5 to node 7 with capacity 1, an edge from node 6 to node 2 with capacity 10, an edge from node 7 to node 2 with capacity 8, an edge from node 7 to node 1 with capacity 4, an edge from node 7 to node 8 with capacity 6, an edge from node 8 to node 1 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 6, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 157, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 9 with capacity 3, an edge from node 1 to node 7 with capacity 4, an edge from node 1 to node 8 with capacity 8, an edge from node 2 to node 1 with capacity 3, an edge from node 2 to node 8 with capacity 7, an edge from node 3 to node 7 with capacity 1, an edge from node 4 to node 0 with capacity 8, an edge from node 4 to node 1 with capacity 3, an edge from node 4 to node 7 with capacity 9, an edge from node 4 to node 2 with capacity 3, an edge from node 5 to node 0 with capacity 10, an edge from node 5 to node 7 with capacity 6, an edge from node 6 to node 5 with capacity 3, an edge from node 6 to node 1 with capacity 2, an edge from node 6 to node 7 with capacity 7, an edge from node 6 to node 2 with capacity 6, an edge from node 8 to node 7 with capacity 2, an edge from node 8 to node 4 with capacity 7, an edge from node 9 to node 0 with capacity 1, an edge from node 9 to node 8 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 158, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 1 to node 2 with capacity 3, an edge from node 1 to node 6 with capacity 5, an edge from node 2 to node 5 with capacity 1, an edge from node 2 to node 4 with capacity 10, an edge from node 3 to node 2 with capacity 1, an edge from node 3 to node 6 with capacity 5, an edge from node 3 to node 5 with capacity 1, an edge from node 3 to node 0 with capacity 8, an edge from node 5 to node 2 with capacity 6, an edge from node 6 to node 2 with capacity 6, an edge from node 6 to node 1 with capacity 3, an edge from node 6 to node 0 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 3, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 159, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 7 with capacity 4, an edge from node 1 to node 3 with capacity 10, an edge from node 2 to node 0 with capacity 5, an edge from node 3 to node 6 with capacity 7, an edge from node 3 to node 4 with capacity 2, an edge from node 3 to node 7 with capacity 7, an edge from node 3 to node 2 with capacity 5, an edge from node 4 to node 7 with capacity 6, an edge from node 5 to node 7 with capacity 1, an edge from node 6 to node 4 with capacity 5, an edge from node 6 to node 0 with capacity 8, an edge from node 6 to node 3 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 1, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 160, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 18 with capacity 11,\nan edge from node 0 to node 16 with capacity 15,\nan edge from node 0 to node 6 with capacity 2,\nan edge from node 0 to node 15 with capacity 14,\nan edge from node 1 to node 3 with capacity 3,\nan edge from node 1 to node 16 with capacity 11,\nan edge from node 1 to node 15 with capacity 13,\nan edge from node 2 to node 7 with capacity 3,\nan edge from node 2 to node 0 with capacity 10,\nan edge from node 2 to node 12 with capacity 17,\nan edge from node 2 to node 6 with capacity 4,\nan edge from node 2 to node 17 with capacity 14,\nan edge from node 3 to node 4 with capacity 18,\nan edge from node 4 to node 5 with capacity 16,\nan edge from node 4 to node 3 with capacity 2,\nan edge from node 4 to node 13 with capacity 9,\nan edge from node 4 to node 17 with capacity 4,\nan edge from node 4 to node 10 with capacity 6,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 5 to node 4 with capacity 15,\nan edge from node 5 to node 2 with capacity 16,\nan edge from node 5 to node 0 with capacity 11,\nan edge from node 5 to node 17 with capacity 1,\nan edge from node 6 to node 14 with capacity 17,\nan edge from node 6 to node 5 with capacity 6,\nan edge from node 6 to node 3 with capacity 13,\nan edge from node 6 to node 18 with capacity 12,\nan edge from node 6 to node 0 with capacity 11,\nan edge from node 6 to node 15 with capacity 11,\nan edge from node 7 to node 4 with capacity 13,\nan edge from node 7 to node 5 with capacity 2,\nan edge from node 7 to node 3 with capacity 20,\nan edge from node 7 to node 13 with capacity 4,\nan edge from node 7 to node 0 with capacity 14,\nan edge from node 7 to node 16 with capacity 2,\nan edge from node 7 to node 17 with capacity 14,\nan edge from node 7 to node 15 with capacity 13,\nan edge from node 8 to node 3 with capacity 1,\nan edge from node 8 to node 2 with capacity 4,\nan edge from node 8 to node 1 with capacity 11,\nan edge from node 8 to node 12 with capacity 3,\nan edge from node 8 to node 6 with capacity 19,\nan edge from node 8 to node 9 with capacity 15,\nan edge from node 9 to node 5 with capacity 2,\nan edge from node 9 to node 7 with capacity 16,\nan edge from node 9 to node 8 with capacity 13,\nan edge from node 10 to node 11 with capacity 12,\nan edge from node 10 to node 2 with capacity 14,\nan edge from node 10 to node 6 with capacity 17,\nan edge from node 10 to node 17 with capacity 12,\nan edge from node 10 to node 9 with capacity 2,\nan edge from node 11 to node 14 with capacity 13,\nan edge from node 11 to node 5 with capacity 2,\nan edge from node 11 to node 18 with capacity 1,\nan edge from node 11 to node 15 with capacity 7,\nan edge from node 12 to node 11 with capacity 19,\nan edge from node 12 to node 5 with capacity 9,\nan edge from node 12 to node 8 with capacity 3,\nan edge from node 12 to node 15 with capacity 5,\nan edge from node 13 to node 3 with capacity 8,\nan edge from node 13 to node 2 with capacity 14,\nan edge from node 13 to node 18 with capacity 8,\nan edge from node 13 to node 16 with capacity 14,\nan edge from node 13 to node 6 with capacity 20,\nan edge from node 14 to node 3 with capacity 19,\nan edge from node 14 to node 16 with capacity 5,\nan edge from node 14 to node 17 with capacity 9,\nan edge from node 14 to node 9 with capacity 15,\nan edge from node 14 to node 15 with capacity 19,\nan edge from node 15 to node 3 with capacity 11,\nan edge from node 15 to node 18 with capacity 20,\nan edge from node 16 to node 4 with capacity 18,\nan edge from node 16 to node 1 with capacity 1,\nan edge from node 16 to node 18 with capacity 15,\nan edge from node 16 to node 0 with capacity 7,\nan edge from node 16 to node 6 with capacity 20,\nan edge from node 16 to node 8 with capacity 7,\nan edge from node 17 to node 4 with capacity 15,\nan edge from node 17 to node 3 with capacity 3,\nan edge from node 17 to node 18 with capacity 5,\nan edge from node 17 to node 0 with capacity 7,\nan edge from node 17 to node 6 with capacity 9,\nan edge from node 17 to node 9 with capacity 11,\nan edge from node 18 to node 1 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 10, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 161, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(9, weight:14), (1, weight:15), (5, weight:13), (10, weight:4)],\nnode1: [(4, weight:12), (0, weight:8), (3, weight:17)],\nnode2: [(9, weight:17), (1, weight:18), (12, weight:14), (14, weight:19), (5, weight:13), (10, weight:15)],\nnode3: [(9, weight:3), (2, weight:18), (13, weight:1)],\nnode4: [(9, weight:15), (12, weight:15), (14, weight:1), (8, weight:14)],\nnode5: [(9, weight:17), (2, weight:9), (7, weight:9)],\nnode6: [(12, weight:14), (11, weight:3), (5, weight:10), (0, weight:14), (3, weight:12), (8, weight:14)],\nnode7: [(12, weight:2), (0, weight:1), (6, weight:11)],\nnode8: [(1, weight:7), (13, weight:11), (15, weight:16)],\nnode9: [(4, weight:16), (5, weight:17), (3, weight:16), (8, weight:6)],\nnode10: [(9, weight:10), (12, weight:2), (7, weight:1), (11, weight:5), (3, weight:17), (13, weight:14), (8, weight:8)],\nnode11: [(7, weight:4), (13, weight:1), (15, weight:17)],\nnode12: [(9, weight:11), (1, weight:13), (7, weight:16)],\nnode13: [(1, weight:1), (15, weight:1)],\nnode14: [(9, weight:19), (2, weight:13)],\nnode15: [(0, weight:5), (3, weight:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 4, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 162, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 7 with capacity 15,\nan edge from node 0 to node 4 with capacity 2,\nan edge from node 0 to node 5 with capacity 4,\nan edge from node 0 to node 8 with capacity 16,\nan edge from node 1 to node 6 with capacity 6,\nan edge from node 1 to node 11 with capacity 7,\nan edge from node 1 to node 10 with capacity 6,\nan edge from node 2 to node 6 with capacity 2,\nan edge from node 2 to node 4 with capacity 11,\nan edge from node 2 to node 3 with capacity 14,\nan edge from node 2 to node 5 with capacity 10,\nan edge from node 2 to node 0 with capacity 3,\nan edge from node 3 to node 4 with capacity 4,\nan edge from node 3 to node 0 with capacity 15,\nan edge from node 4 to node 3 with capacity 9,\nan edge from node 4 to node 0 with capacity 12,\nan edge from node 5 to node 4 with capacity 20,\nan edge from node 5 to node 2 with capacity 14,\nan edge from node 6 to node 10 with capacity 7,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 6 to node 2 with capacity 18,\nan edge from node 7 to node 10 with capacity 10,\nan edge from node 7 to node 1 with capacity 1,\nan edge from node 7 to node 4 with capacity 14,\nan edge from node 7 to node 0 with capacity 5,\nan edge from node 8 to node 11 with capacity 8,\nan edge from node 8 to node 7 with capacity 4,\nan edge from node 9 to node 11 with capacity 3,\nan edge from node 9 to node 0 with capacity 14,\nan edge from node 10 to node 6 with capacity 1,\nan edge from node 10 to node 7 with capacity 3,\nan edge from node 10 to node 0 with capacity 11,\nan edge from node 11 to node 9 with capacity 9,\nan edge from node 11 to node 3 with capacity 16,\nan edge from node 11 to node 2 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 163, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 4 with capacity 6,\nan edge from node 0 to node 3 with capacity 13,\nan edge from node 1 to node 8 with capacity 11,\nan edge from node 1 to node 0 with capacity 15,\nan edge from node 1 to node 3 with capacity 10,\nan edge from node 2 to node 1 with capacity 10,\nan edge from node 2 to node 13 with capacity 5,\nan edge from node 2 to node 0 with capacity 2,\nan edge from node 2 to node 3 with capacity 5,\nan edge from node 3 to node 5 with capacity 4,\nan edge from node 3 to node 8 with capacity 7,\nan edge from node 3 to node 4 with capacity 20,\nan edge from node 3 to node 7 with capacity 9,\nan edge from node 3 to node 11 with capacity 8,\nan edge from node 3 to node 6 with capacity 4,\nan edge from node 4 to node 5 with capacity 9,\nan edge from node 4 to node 1 with capacity 10,\nan edge from node 4 to node 7 with capacity 6,\nan edge from node 4 to node 2 with capacity 11,\nan edge from node 5 to node 2 with capacity 18,\nan edge from node 6 to node 8 with capacity 20,\nan edge from node 6 to node 4 with capacity 2,\nan edge from node 6 to node 1 with capacity 17,\nan edge from node 6 to node 3 with capacity 8,\nan edge from node 7 to node 12 with capacity 4,\nan edge from node 7 to node 5 with capacity 4,\nan edge from node 7 to node 11 with capacity 1,\nan edge from node 7 to node 6 with capacity 10,\nan edge from node 8 to node 12 with capacity 2,\nan edge from node 8 to node 5 with capacity 6,\nan edge from node 8 to node 9 with capacity 12,\nan edge from node 8 to node 13 with capacity 4,\nan edge from node 8 to node 0 with capacity 10,\nan edge from node 8 to node 3 with capacity 20,\nan edge from node 8 to node 2 with capacity 9,\nan edge from node 9 to node 2 with capacity 5,\nan edge from node 9 to node 10 with capacity 10,\nan edge from node 10 to node 8 with capacity 13,\nan edge from node 10 to node 7 with capacity 5,\nan edge from node 11 to node 4 with capacity 9,\nan edge from node 11 to node 2 with capacity 6,\nan edge from node 11 to node 10 with capacity 9,\nan edge from node 12 to node 5 with capacity 18,\nan edge from node 12 to node 11 with capacity 2,\nan edge from node 12 to node 3 with capacity 4,\nan edge from node 13 to node 12 with capacity 16,\nan edge from node 13 to node 3 with capacity 3,\nan edge from node 13 to node 10 with capacity 17.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 164, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 15, and the edges are:\nan edge from node 1 to node 7 with capacity 2,\nan edge from node 1 to node 3 with capacity 18,\nan edge from node 1 to node 9 with capacity 16,\nan edge from node 1 to node 6 with capacity 5,\nan edge from node 1 to node 8 with capacity 16,\nan edge from node 2 to node 5 with capacity 11,\nan edge from node 2 to node 13 with capacity 8,\nan edge from node 2 to node 1 with capacity 14,\nan edge from node 2 to node 10 with capacity 7,\nan edge from node 3 to node 6 with capacity 17,\nan edge from node 6 to node 12 with capacity 3,\nan edge from node 6 to node 13 with capacity 9,\nan edge from node 7 to node 15 with capacity 8,\nan edge from node 7 to node 2 with capacity 8,\nan edge from node 7 to node 9 with capacity 3,\nan edge from node 7 to node 4 with capacity 13,\nan edge from node 7 to node 1 with capacity 6,\nan edge from node 7 to node 10 with capacity 11,\nan edge from node 8 to node 13 with capacity 2,\nan edge from node 8 to node 3 with capacity 17,\nan edge from node 8 to node 1 with capacity 13,\nan edge from node 8 to node 10 with capacity 11,\nan edge from node 9 to node 12 with capacity 9,\nan edge from node 9 to node 13 with capacity 18,\nan edge from node 9 to node 10 with capacity 3,\nan edge from node 9 to node 0 with capacity 7,\nan edge from node 9 to node 14 with capacity 1,\nan edge from node 10 to node 15 with capacity 5,\nan edge from node 10 to node 13 with capacity 15,\nan edge from node 10 to node 3 with capacity 13,\nan edge from node 10 to node 6 with capacity 4,\nan edge from node 10 to node 0 with capacity 4,\nan edge from node 11 to node 2 with capacity 12,\nan edge from node 11 to node 4 with capacity 12,\nan edge from node 11 to node 6 with capacity 20,\nan edge from node 11 to node 10 with capacity 15,\nan edge from node 12 to node 15 with capacity 7,\nan edge from node 12 to node 11 with capacity 2,\nan edge from node 12 to node 2 with capacity 11,\nan edge from node 12 to node 3 with capacity 6,\nan edge from node 12 to node 4 with capacity 13,\nan edge from node 12 to node 0 with capacity 17,\nan edge from node 13 to node 0 with capacity 8,\nan edge from node 14 to node 12 with capacity 18,\nan edge from node 14 to node 15 with capacity 1,\nan edge from node 14 to node 5 with capacity 6,\nan edge from node 14 to node 13 with capacity 7,\nan edge from node 14 to node 7 with capacity 3,\nan edge from node 14 to node 9 with capacity 4,\nan edge from node 14 to node 0 with capacity 19,\nan edge from node 15 to node 5 with capacity 15,\nan edge from node 15 to node 10 with capacity 15,\nan edge from node 15 to node 0 with capacity 11.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 15 to node 14\nflow_value, flow_dict = nx.maximum_flow(G, 15, 14, capacity='weight')\nprint(flow_value)\n```"}, {"id": 165, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 4 with capacity 14,\nan edge from node 0 to node 2 with capacity 11,\nan edge from node 1 to node 0 with capacity 9,\nan edge from node 1 to node 5 with capacity 13,\nan edge from node 1 to node 7 with capacity 17,\nan edge from node 2 to node 6 with capacity 19,\nan edge from node 2 to node 0 with capacity 3,\nan edge from node 2 to node 9 with capacity 14,\nan edge from node 3 to node 9 with capacity 4,\nan edge from node 3 to node 2 with capacity 9,\nan edge from node 4 to node 6 with capacity 15,\nan edge from node 4 to node 1 with capacity 7,\nan edge from node 5 to node 6 with capacity 13,\nan edge from node 5 to node 0 with capacity 6,\nan edge from node 5 to node 10 with capacity 20,\nan edge from node 6 to node 4 with capacity 14,\nan edge from node 6 to node 9 with capacity 4,\nan edge from node 6 to node 10 with capacity 9,\nan edge from node 7 to node 10 with capacity 15,\nan edge from node 9 to node 6 with capacity 18,\nan edge from node 9 to node 7 with capacity 17,\nan edge from node 9 to node 3 with capacity 14,\nan edge from node 10 to node 2 with capacity 8.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 9, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 166, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 9, an edge from node 1 to node 2 with capacity 2, an edge from node 3 to node 0 with capacity 4, an edge from node 4 to node 0 with capacity 3, an edge from node 4 to node 3 with capacity 5, an edge from node 4 to node 2 with capacity 9, an edge from node 4 to node 1 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 167, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 6 with capacity 9, an edge from node 0 to node 1 with capacity 3, an edge from node 0 to node 2 with capacity 9, an edge from node 1 to node 4 with capacity 1, an edge from node 1 to node 8 with capacity 8, an edge from node 2 to node 0 with capacity 6, an edge from node 3 to node 4 with capacity 4, an edge from node 4 to node 7 with capacity 3, an edge from node 4 to node 2 with capacity 2, an edge from node 5 to node 1 with capacity 4, an edge from node 6 to node 5 with capacity 6, an edge from node 6 to node 3 with capacity 7, an edge from node 6 to node 1 with capacity 7, an edge from node 6 to node 2 with capacity 6, an edge from node 7 to node 4 with capacity 8, an edge from node 7 to node 8 with capacity 7, an edge from node 8 to node 6 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 168, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 4 with capacity 9,\nan edge from node 0 to node 10 with capacity 18,\nan edge from node 1 to node 6 with capacity 9,\nan edge from node 1 to node 3 with capacity 19,\nan edge from node 1 to node 10 with capacity 1,\nan edge from node 1 to node 5 with capacity 4,\nan edge from node 2 to node 8 with capacity 18,\nan edge from node 2 to node 6 with capacity 1,\nan edge from node 2 to node 0 with capacity 11,\nan edge from node 2 to node 9 with capacity 1,\nan edge from node 3 to node 1 with capacity 13,\nan edge from node 3 to node 10 with capacity 19,\nan edge from node 4 to node 10 with capacity 19,\nan edge from node 4 to node 5 with capacity 20,\nan edge from node 5 to node 1 with capacity 10,\nan edge from node 5 to node 9 with capacity 8,\nan edge from node 6 to node 1 with capacity 4,\nan edge from node 6 to node 7 with capacity 9,\nan edge from node 6 to node 0 with capacity 17,\nan edge from node 6 to node 2 with capacity 16,\nan edge from node 6 to node 5 with capacity 5,\nan edge from node 7 to node 10 with capacity 9,\nan edge from node 7 to node 5 with capacity 16,\nan edge from node 8 to node 4 with capacity 8,\nan edge from node 8 to node 7 with capacity 7,\nan edge from node 8 to node 5 with capacity 12,\nan edge from node 8 to node 9 with capacity 16,\nan edge from node 9 to node 8 with capacity 12,\nan edge from node 9 to node 10 with capacity 1,\nan edge from node 10 to node 4 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 169, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 13 with capacity 17,\nan edge from node 1 to node 7 with capacity 2,\nan edge from node 1 to node 0 with capacity 6,\nan edge from node 1 to node 6 with capacity 16,\nan edge from node 1 to node 5 with capacity 19,\nan edge from node 2 to node 12 with capacity 12,\nan edge from node 2 to node 8 with capacity 5,\nan edge from node 2 to node 9 with capacity 4,\nan edge from node 2 to node 6 with capacity 8,\nan edge from node 2 to node 4 with capacity 5,\nan edge from node 2 to node 5 with capacity 7,\nan edge from node 3 to node 1 with capacity 17,\nan edge from node 3 to node 10 with capacity 15,\nan edge from node 3 to node 0 with capacity 1,\nan edge from node 3 to node 9 with capacity 19,\nan edge from node 4 to node 2 with capacity 18,\nan edge from node 4 to node 12 with capacity 2,\nan edge from node 4 to node 7 with capacity 3,\nan edge from node 5 to node 3 with capacity 10,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 5 to node 4 with capacity 3,\nan edge from node 6 to node 10 with capacity 6,\nan edge from node 8 to node 3 with capacity 8,\nan edge from node 8 to node 7 with capacity 2,\nan edge from node 8 to node 11 with capacity 16,\nan edge from node 9 to node 3 with capacity 10,\nan edge from node 10 to node 12 with capacity 14,\nan edge from node 10 to node 0 with capacity 10,\nan edge from node 10 to node 8 with capacity 6,\nan edge from node 10 to node 9 with capacity 7,\nan edge from node 10 to node 4 with capacity 12,\nan edge from node 11 to node 1 with capacity 14,\nan edge from node 11 to node 7 with capacity 8,\nan edge from node 11 to node 0 with capacity 13,\nan edge from node 11 to node 9 with capacity 16,\nan edge from node 12 to node 10 with capacity 1,\nan edge from node 12 to node 13 with capacity 3,\nan edge from node 12 to node 7 with capacity 4,\nan edge from node 12 to node 0 with capacity 20,\nan edge from node 12 to node 9 with capacity 10,\nan edge from node 13 to node 9 with capacity 19.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 11\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 9, 11, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 170, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 6 with capacity 8, an edge from node 1 to node 5 with capacity 3, an edge from node 1 to node 2 with capacity 3, an edge from node 2 to node 6 with capacity 8, an edge from node 2 to node 1 with capacity 3, an edge from node 3 to node 4 with capacity 1, an edge from node 4 to node 6 with capacity 8, an edge from node 4 to node 3 with capacity 1, an edge from node 4 to node 2 with capacity 4, an edge from node 5 to node 0 with capacity 5, an edge from node 6 to node 5 with capacity 6, an edge from node 6 to node 2 with capacity 9, an edge from node 7 to node 0 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 171, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, weight:3), (2, weight:13), (13, weight:20), (6, weight:6)],\nnode1: [(0, weight:18), (5, weight:2), (15, weight:13), (8, weight:7), (9, weight:20), (13, weight:18), (11, weight:2)],\nnode2: [(0, weight:16), (4, weight:15), (8, weight:9), (11, weight:5), (6, weight:13)],\nnode3: [(10, weight:7), (15, weight:10), (14, weight:15)],\nnode4: [(10, weight:8), (2, weight:3), (3, weight:16), (9, weight:6), (13, weight:9), (11, weight:20), (6, weight:2)],\nnode5: [(6, weight:6)],\nnode6: [(0, weight:8), (7, weight:15), (15, weight:19), (14, weight:2), (8, weight:1), (9, weight:17)],\nnode7: [(0, weight:17), (8, weight:5)],\nnode8: [(9, weight:5), (11, weight:17), (6, weight:12)],\nnode9: [(0, weight:13), (5, weight:20), (7, weight:3), (2, weight:20), (12, weight:14), (3, weight:11)],\nnode10: [(5, weight:19), (14, weight:7)],\nnode11: [(0, weight:3), (15, weight:6), (12, weight:15), (8, weight:2), (3, weight:13)],\nnode12: [(0, weight:13), (4, weight:11), (2, weight:2), (15, weight:14), (6, weight:5)],\nnode13: [(4, weight:14), (2, weight:10), (15, weight:20), (8, weight:14), (3, weight:11), (1, weight:12), (11, weight:5), (6, weight:8)],\nnode14: [(10, weight:14), (4, weight:15), (12, weight:9), (3, weight:9), (13, weight:8), (6, weight:8)],\nnode15: [(10, weight:1), (4, weight:3)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 15, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 172, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 8 with capacity 10, an edge from node 0 to node 2 with capacity 5, an edge from node 0 to node 4 with capacity 2, an edge from node 1 to node 2 with capacity 2, an edge from node 1 to node 9 with capacity 4, an edge from node 1 to node 6 with capacity 7, an edge from node 1 to node 4 with capacity 3, an edge from node 2 to node 5 with capacity 8, an edge from node 2 to node 3 with capacity 8, an edge from node 3 to node 4 with capacity 1, an edge from node 4 to node 9 with capacity 7, an edge from node 5 to node 6 with capacity 5, an edge from node 5 to node 0 with capacity 10, an edge from node 5 to node 1 with capacity 10, an edge from node 6 to node 3 with capacity 4, an edge from node 7 to node 3 with capacity 8, an edge from node 7 to node 4 with capacity 7, an edge from node 8 to node 7 with capacity 7, an edge from node 8 to node 5 with capacity 9, an edge from node 9 to node 5 with capacity 5, an edge from node 9 to node 4 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 173, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(3, weight:5), (18, weight:9), (6, weight:1)],\nnode1: [(3, weight:3), (11, weight:13), (6, weight:7)],\nnode2: [(10, weight:5), (18, weight:1)],\nnode3: [(16, weight:11), (17, weight:4), (14, weight:4), (10, weight:12), (11, weight:7), (7, weight:4), (15, weight:12)],\nnode4: [(16, weight:8), (2, weight:10), (3, weight:5), (9, weight:2)],\nnode5: [(13, weight:10), (4, weight:20)],\nnode6: [(17, weight:15), (14, weight:14), (10, weight:8), (3, weight:14), (9, weight:4), (11, weight:5), (7, weight:9), (15, weight:8)],\nnode7: [(14, weight:1), (10, weight:14), (4, weight:7), (12, weight:17)],\nnode8: [(14, weight:10), (18, weight:7), (11, weight:5), (7, weight:3), (6, weight:8)],\nnode9: [(5, weight:16), (14, weight:14), (1, weight:14)],\nnode10: [(3, weight:2), (4, weight:14), (1, weight:15), (6, weight:18)],\nnode11: [(16, weight:10), (10, weight:9), (1, weight:17), (7, weight:8), (6, weight:4)],\nnode12: [(0, weight:14), (13, weight:17), (5, weight:4), (14, weight:16), (10, weight:10), (3, weight:17), (15, weight:8)],\nnode13: [(0, weight:19), (3, weight:5), (18, weight:4), (12, weight:1)],\nnode14: [(16, weight:11), (5, weight:11), (10, weight:18), (11, weight:17), (15, weight:9)],\nnode15: [(5, weight:7), (3, weight:10), (9, weight:3)],\nnode16: [(10, weight:3), (9, weight:17), (8, weight:7), (6, weight:2), (15, weight:3)],\nnode17: [(5, weight:9), (14, weight:5), (12, weight:18)],\nnode18: [(16, weight:3), (17, weight:3), (6, weight:6)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 14 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 14, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 174, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 8 with capacity 10,\nan edge from node 0 to node 1 with capacity 8,\nan edge from node 0 to node 4 with capacity 10,\nan edge from node 0 to node 9 with capacity 17,\nan edge from node 1 to node 5 with capacity 20,\nan edge from node 1 to node 0 with capacity 18,\nan edge from node 1 to node 2 with capacity 11,\nan edge from node 2 to node 8 with capacity 5,\nan edge from node 2 to node 5 with capacity 5,\nan edge from node 2 to node 0 with capacity 14,\nan edge from node 2 to node 3 with capacity 16,\nan edge from node 2 to node 12 with capacity 2,\nan edge from node 3 to node 5 with capacity 17,\nan edge from node 3 to node 7 with capacity 19,\nan edge from node 3 to node 11 with capacity 15,\nan edge from node 3 to node 12 with capacity 11,\nan edge from node 4 to node 5 with capacity 7,\nan edge from node 4 to node 3 with capacity 6,\nan edge from node 4 to node 9 with capacity 4,\nan edge from node 4 to node 2 with capacity 10,\nan edge from node 5 to node 6 with capacity 7,\nan edge from node 5 to node 1 with capacity 16,\nan edge from node 6 to node 9 with capacity 7,\nan edge from node 6 to node 2 with capacity 5,\nan edge from node 7 to node 10 with capacity 17,\nan edge from node 7 to node 9 with capacity 9,\nan edge from node 8 to node 9 with capacity 3,\nan edge from node 9 to node 8 with capacity 9,\nan edge from node 9 to node 7 with capacity 1,\nan edge from node 9 to node 1 with capacity 19,\nan edge from node 9 to node 2 with capacity 4,\nan edge from node 10 to node 8 with capacity 10,\nan edge from node 10 to node 6 with capacity 17,\nan edge from node 11 to node 1 with capacity 5,\nan edge from node 11 to node 12 with capacity 17.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 5, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 175, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(17, weight:17), (5, weight:17), (11, weight:16), (16, weight:10)],\nnode1: [(15, weight:20), (5, weight:13), (0, weight:18), (16, weight:6)],\nnode2: [(8, weight:12), (1, weight:7), (6, weight:6)],\nnode3: [(15, weight:14), (13, weight:13), (9, weight:20)],\nnode4: [(12, weight:18), (1, weight:11), (14, weight:9), (11, weight:19), (9, weight:16), (16, weight:18)],\nnode5: [(17, weight:5), (8, weight:14), (3, weight:12), (12, weight:15), (10, weight:7), (6, weight:8)],\nnode6: [(2, weight:20), (4, weight:2), (12, weight:7), (10, weight:1), (11, weight:5)],\nnode7: [(15, weight:15), (17, weight:14), (2, weight:11), (4, weight:8)],\nnode8: [(13, weight:1), (12, weight:9)],\nnode9: [(17, weight:9), (0, weight:9)],\nnode10: [(7, weight:13)],\nnode11: [(17, weight:12), (1, weight:20), (6, weight:20)],\nnode12: [(5, weight:12), (14, weight:1), (10, weight:15)],\nnode13: [(7, weight:17), (4, weight:12), (14, weight:4)],\nnode14: [(13, weight:4), (3, weight:2), (2, weight:3), (12, weight:18)],\nnode15: [(5, weight:11), (2, weight:9), (1, weight:16)],\nnode16: [(13, weight:14), (7, weight:3), (4, weight:14), (6, weight:15)],\nnode17: [(15, weight:9), (3, weight:7), (11, weight:5)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 12 to node 14\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 12, 14, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 176, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(14, weight:10), (13, weight:7), (1, weight:6), (10, weight:11), (2, weight:4), (11, weight:17), (4, weight:17)],\nnode1: [(0, weight:2)],\nnode2: [(4, weight:20)],\nnode3: [(16, weight:12), (1, weight:1), (10, weight:13), (12, weight:13), (5, weight:5), (11, weight:4)],\nnode4: [(10, weight:8), (6, weight:2), (5, weight:10), (0, weight:11)],\nnode5: [(13, weight:20), (9, weight:7), (10, weight:9), (11, weight:14), (8, weight:2)],\nnode6: [(16, weight:8), (2, weight:9), (12, weight:1), (15, weight:8)],\nnode8: [(16, weight:9), (2, weight:12), (7, weight:4), (5, weight:16), (15, weight:1), (0, weight:19)],\nnode9: [(0, weight:12)],\nnode10: [(14, weight:1), (7, weight:13), (0, weight:20), (8, weight:12)],\nnode11: [(13, weight:7), (1, weight:3), (10, weight:13), (3, weight:1), (5, weight:19)],\nnode12: [(16, weight:5), (10, weight:15), (0, weight:3), (4, weight:17)],\nnode13: [(16, weight:2), (9, weight:2), (1, weight:18), (10, weight:4), (2, weight:9), (7, weight:1)],\nnode14: [(1, weight:16), (2, weight:14), (5, weight:11), (8, weight:1)],\nnode15: [(14, weight:19), (9, weight:12), (2, weight:14)],\nnode16: [(6, weight:12), (8, weight:16)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 13, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 177, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 12 with capacity 1,\nan edge from node 0 to node 18 with capacity 14,\nan edge from node 0 to node 7 with capacity 18,\nan edge from node 0 to node 19 with capacity 14,\nan edge from node 1 to node 14 with capacity 11,\nan edge from node 1 to node 18 with capacity 14,\nan edge from node 1 to node 6 with capacity 20,\nan edge from node 1 to node 15 with capacity 20,\nan edge from node 1 to node 9 with capacity 12,\nan edge from node 1 to node 4 with capacity 20,\nan edge from node 1 to node 2 with capacity 15,\nan edge from node 2 to node 1 with capacity 9,\nan edge from node 2 to node 12 with capacity 12,\nan edge from node 2 to node 18 with capacity 8,\nan edge from node 2 to node 6 with capacity 4,\nan edge from node 2 to node 7 with capacity 16,\nan edge from node 2 to node 19 with capacity 1,\nan edge from node 2 to node 9 with capacity 5,\nan edge from node 2 to node 0 with capacity 12,\nan edge from node 3 to node 1 with capacity 9,\nan edge from node 3 to node 12 with capacity 12,\nan edge from node 3 to node 15 with capacity 3,\nan edge from node 3 to node 19 with capacity 10,\nan edge from node 4 to node 6 with capacity 16,\nan edge from node 4 to node 7 with capacity 11,\nan edge from node 4 to node 9 with capacity 4,\nan edge from node 4 to node 0 with capacity 13,\nan edge from node 4 to node 17 with capacity 6,\nan edge from node 5 to node 1 with capacity 6,\nan edge from node 5 to node 10 with capacity 12,\nan edge from node 5 to node 4 with capacity 11,\nan edge from node 6 to node 10 with capacity 8,\nan edge from node 6 to node 9 with capacity 16,\nan edge from node 6 to node 4 with capacity 16,\nan edge from node 6 to node 13 with capacity 13,\nan edge from node 7 to node 18 with capacity 20,\nan edge from node 7 to node 3 with capacity 9,\nan edge from node 7 to node 10 with capacity 12,\nan edge from node 7 to node 9 with capacity 11,\nan edge from node 7 to node 11 with capacity 3,\nan edge from node 8 to node 14 with capacity 12,\nan edge from node 8 to node 18 with capacity 12,\nan edge from node 8 to node 7 with capacity 14,\nan edge from node 8 to node 19 with capacity 6,\nan edge from node 8 to node 4 with capacity 4,\nan edge from node 9 to node 14 with capacity 6,\nan edge from node 9 to node 12 with capacity 8,\nan edge from node 9 to node 2 with capacity 9,\nan edge from node 9 to node 0 with capacity 11,\nan edge from node 10 to node 14 with capacity 16,\nan edge from node 10 to node 18 with capacity 9,\nan edge from node 10 to node 9 with capacity 14,\nan edge from node 10 to node 4 with capacity 14,\nan edge from node 10 to node 17 with capacity 2,\nan edge from node 10 to node 11 with capacity 8,\nan edge from node 11 to node 1 with capacity 1,\nan edge from node 11 to node 16 with capacity 13,\nan edge from node 11 to node 12 with capacity 6,\nan edge from node 11 to node 18 with capacity 1,\nan edge from node 11 to node 3 with capacity 10,\nan edge from node 11 to node 15 with capacity 6,\nan edge from node 11 to node 17 with capacity 15,\nan edge from node 12 to node 3 with capacity 5,\nan edge from node 12 to node 0 with capacity 17,\nan edge from node 14 to node 5 with capacity 5,\nan edge from node 14 to node 3 with capacity 10,\nan edge from node 14 to node 15 with capacity 9,\nan edge from node 14 to node 19 with capacity 12,\nan edge from node 14 to node 4 with capacity 6,\nan edge from node 14 to node 0 with capacity 4,\nan edge from node 15 to node 1 with capacity 20,\nan edge from node 15 to node 16 with capacity 1,\nan edge from node 15 to node 10 with capacity 8,\nan edge from node 15 to node 4 with capacity 16,\nan edge from node 15 to node 0 with capacity 14,\nan edge from node 16 to node 3 with capacity 16,\nan edge from node 16 to node 7 with capacity 17,\nan edge from node 16 to node 10 with capacity 15,\nan edge from node 16 to node 9 with capacity 14,\nan edge from node 16 to node 2 with capacity 2,\nan edge from node 16 to node 0 with capacity 4,\nan edge from node 16 to node 11 with capacity 2,\nan edge from node 17 to node 1 with capacity 14,\nan edge from node 17 to node 18 with capacity 12,\nan edge from node 17 to node 8 with capacity 18,\nan edge from node 17 to node 6 with capacity 8,\nan edge from node 17 to node 10 with capacity 18,\nan edge from node 17 to node 9 with capacity 9,\nan edge from node 17 to node 2 with capacity 14,\nan edge from node 18 to node 1 with capacity 20,\nan edge from node 18 to node 12 with capacity 19,\nan edge from node 18 to node 19 with capacity 16,\nan edge from node 18 to node 2 with capacity 16,\nan edge from node 19 to node 1 with capacity 8,\nan edge from node 19 to node 14 with capacity 10,\nan edge from node 19 to node 5 with capacity 7,\nan edge from node 19 to node 3 with capacity 7,\nan edge from node 19 to node 8 with capacity 7,\nan edge from node 19 to node 15 with capacity 19,\nan edge from node 19 to node 9 with capacity 7,\nan edge from node 19 to node 0 with capacity 3.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 178, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(18, weight:6), (5, weight:18), (7, weight:11)],\nnode1: [(3, weight:1), (4, weight:13), (0, weight:1), (10, weight:10), (15, weight:19)],\nnode2: [(4, weight:14), (6, weight:20), (1, weight:9), (13, weight:9), (16, weight:7), (18, weight:20), (17, weight:17), (5, weight:7)],\nnode3: [(9, weight:12), (0, weight:7), (1, weight:17), (14, weight:10), (15, weight:2), (17, weight:4), (7, weight:16), (12, weight:9)],\nnode4: [(1, weight:11), (8, weight:19)],\nnode5: [(10, weight:7)],\nnode6: [(3, weight:2), (4, weight:9), (13, weight:18), (10, weight:19), (19, weight:2), (5, weight:9), (12, weight:12)],\nnode7: [(3, weight:20), (6, weight:1), (10, weight:5), (15, weight:3), (17, weight:2), (12, weight:5)],\nnode8: [(9, weight:20), (4, weight:13), (16, weight:16), (5, weight:1), (7, weight:16), (12, weight:16)],\nnode9: [(4, weight:12), (6, weight:3), (0, weight:10), (10, weight:5), (19, weight:16), (12, weight:10)],\nnode10: [(9, weight:8), (2, weight:18), (0, weight:6), (14, weight:9), (19, weight:2), (5, weight:10), (7, weight:8)],\nnode11: [(9, weight:8), (0, weight:7), (16, weight:7), (19, weight:2), (12, weight:17)],\nnode12: [(3, weight:19), (4, weight:15), (11, weight:18), (17, weight:6), (5, weight:1), (7, weight:15)],\nnode13: [(6, weight:17), (0, weight:16), (16, weight:7), (7, weight:13)],\nnode14: [(9, weight:7), (4, weight:15), (16, weight:8), (11, weight:1), (15, weight:8), (7, weight:6)],\nnode15: [(3, weight:9), (2, weight:10), (1, weight:12), (16, weight:19), (10, weight:10)],\nnode16: [(3, weight:14), (0, weight:12), (14, weight:19), (17, weight:9), (19, weight:3)],\nnode17: [(3, weight:13), (4, weight:18), (1, weight:15), (16, weight:14), (19, weight:8), (8, weight:12)],\nnode18: [(6, weight:2), (0, weight:7), (13, weight:5), (10, weight:3), (11, weight:17), (14, weight:20), (15, weight:17), (5, weight:8)],\nnode19: [(6, weight:8), (1, weight:8), (16, weight:19), (18, weight:11), (12, weight:17)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 16 to node 10\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 16, 10, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 179, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 14 with capacity 19,\nan edge from node 0 to node 1 with capacity 19,\nan edge from node 1 to node 14 with capacity 18,\nan edge from node 1 to node 5 with capacity 2,\nan edge from node 1 to node 13 with capacity 7,\nan edge from node 2 to node 0 with capacity 3,\nan edge from node 2 to node 3 with capacity 10,\nan edge from node 2 to node 12 with capacity 8,\nan edge from node 2 to node 1 with capacity 20,\nan edge from node 3 to node 6 with capacity 12,\nan edge from node 3 to node 9 with capacity 10,\nan edge from node 3 to node 8 with capacity 18,\nan edge from node 3 to node 4 with capacity 7,\nan edge from node 4 to node 6 with capacity 2,\nan edge from node 4 to node 0 with capacity 3,\nan edge from node 4 to node 9 with capacity 9,\nan edge from node 4 to node 3 with capacity 13,\nan edge from node 4 to node 12 with capacity 10,\nan edge from node 4 to node 13 with capacity 18,\nan edge from node 5 to node 6 with capacity 8,\nan edge from node 5 to node 9 with capacity 3,\nan edge from node 5 to node 13 with capacity 14,\nan edge from node 6 to node 10 with capacity 8,\nan edge from node 6 to node 5 with capacity 11,\nan edge from node 6 to node 2 with capacity 1,\nan edge from node 6 to node 13 with capacity 5,\nan edge from node 8 to node 0 with capacity 7,\nan edge from node 8 to node 14 with capacity 13,\nan edge from node 8 to node 13 with capacity 2,\nan edge from node 9 to node 0 with capacity 5,\nan edge from node 9 to node 13 with capacity 12,\nan edge from node 9 to node 4 with capacity 15,\nan edge from node 10 to node 5 with capacity 16,\nan edge from node 11 to node 0 with capacity 7,\nan edge from node 11 to node 12 with capacity 9,\nan edge from node 11 to node 13 with capacity 19,\nan edge from node 11 to node 4 with capacity 14,\nan edge from node 12 to node 3 with capacity 19,\nan edge from node 12 to node 7 with capacity 4,\nan edge from node 13 to node 10 with capacity 17,\nan edge from node 13 to node 14 with capacity 6,\nan edge from node 13 to node 4 with capacity 1.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 180, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 19 with capacity 19,\nan edge from node 0 to node 18 with capacity 2,\nan edge from node 0 to node 7 with capacity 18,\nan edge from node 1 to node 17 with capacity 16,\nan edge from node 1 to node 19 with capacity 14,\nan edge from node 2 to node 13 with capacity 1,\nan edge from node 2 to node 18 with capacity 3,\nan edge from node 2 to node 7 with capacity 7,\nan edge from node 2 to node 11 with capacity 14,\nan edge from node 3 to node 17 with capacity 7,\nan edge from node 3 to node 13 with capacity 11,\nan edge from node 3 to node 15 with capacity 9,\nan edge from node 3 to node 12 with capacity 20,\nan edge from node 3 to node 0 with capacity 16,\nan edge from node 4 to node 9 with capacity 1,\nan edge from node 4 to node 14 with capacity 1,\nan edge from node 4 to node 12 with capacity 13,\nan edge from node 4 to node 18 with capacity 1,\nan edge from node 5 to node 3 with capacity 17,\nan edge from node 5 to node 6 with capacity 5,\nan edge from node 5 to node 14 with capacity 16,\nan edge from node 5 to node 8 with capacity 14,\nan edge from node 5 to node 2 with capacity 15,\nan edge from node 5 to node 11 with capacity 2,\nan edge from node 6 to node 3 with capacity 4,\nan edge from node 6 to node 19 with capacity 17,\nan edge from node 6 to node 12 with capacity 15,\nan edge from node 7 to node 17 with capacity 9,\nan edge from node 7 to node 6 with capacity 14,\nan edge from node 7 to node 14 with capacity 15,\nan edge from node 7 to node 16 with capacity 3,\nan edge from node 7 to node 15 with capacity 13,\nan edge from node 7 to node 18 with capacity 14,\nan edge from node 7 to node 11 with capacity 11,\nan edge from node 8 to node 0 with capacity 18,\nan edge from node 9 to node 3 with capacity 8,\nan edge from node 9 to node 10 with capacity 17,\nan edge from node 9 to node 4 with capacity 12,\nan edge from node 10 to node 13 with capacity 19,\nan edge from node 10 to node 2 with capacity 13,\nan edge from node 10 to node 11 with capacity 15,\nan edge from node 11 to node 19 with capacity 8,\nan edge from node 11 to node 13 with capacity 6,\nan edge from node 11 to node 12 with capacity 19,\nan edge from node 11 to node 0 with capacity 18,\nan edge from node 12 to node 13 with capacity 18,\nan edge from node 12 to node 14 with capacity 5,\nan edge from node 12 to node 8 with capacity 16,\nan edge from node 12 to node 1 with capacity 3,\nan edge from node 12 to node 15 with capacity 10,\nan edge from node 13 to node 17 with capacity 2,\nan edge from node 13 to node 8 with capacity 19,\nan edge from node 13 to node 16 with capacity 16,\nan edge from node 13 to node 1 with capacity 3,\nan edge from node 13 to node 12 with capacity 8,\nan edge from node 13 to node 18 with capacity 14,\nan edge from node 13 to node 0 with capacity 1,\nan edge from node 14 to node 5 with capacity 18,\nan edge from node 14 to node 9 with capacity 6,\nan edge from node 14 to node 10 with capacity 14,\nan edge from node 14 to node 15 with capacity 16,\nan edge from node 14 to node 11 with capacity 12,\nan edge from node 15 to node 14 with capacity 7,\nan edge from node 15 to node 8 with capacity 17,\nan edge from node 15 to node 7 with capacity 12,\nan edge from node 16 to node 17 with capacity 19,\nan edge from node 16 to node 19 with capacity 10,\nan edge from node 16 to node 8 with capacity 15,\nan edge from node 16 to node 10 with capacity 1,\nan edge from node 16 to node 12 with capacity 6,\nan edge from node 17 to node 13 with capacity 20,\nan edge from node 17 to node 2 with capacity 4,\nan edge from node 18 to node 5 with capacity 2,\nan edge from node 18 to node 6 with capacity 9,\nan edge from node 18 to node 13 with capacity 1,\nan edge from node 18 to node 8 with capacity 19,\nan edge from node 18 to node 10 with capacity 1,\nan edge from node 18 to node 15 with capacity 12,\nan edge from node 18 to node 4 with capacity 1,\nan edge from node 18 to node 7 with capacity 9,\nan edge from node 19 to node 17 with capacity 11,\nan edge from node 19 to node 13 with capacity 11,\nan edge from node 19 to node 9 with capacity 15,\nan edge from node 19 to node 8 with capacity 20,\nan edge from node 19 to node 10 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 181, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(18, weight:9), (1, weight:17), (4, weight:12), (2, weight:1), (5, weight:15), (9, weight:10), (15, weight:1), (19, weight:3), (13, weight:5), (14, weight:9)],\nnode1: [(3, weight:14), (12, weight:19), (5, weight:5), (9, weight:18), (7, weight:14)],\nnode2: [(18, weight:8), (4, weight:2), (0, weight:19), (8, weight:12)],\nnode3: [(16, weight:8), (2, weight:20), (12, weight:11), (15, weight:10), (19, weight:2), (17, weight:10)],\nnode4: [(18, weight:10), (1, weight:17), (15, weight:3), (7, weight:4), (14, weight:1)],\nnode5: [(3, weight:5), (1, weight:17), (4, weight:17), (2, weight:18), (12, weight:4), (9, weight:9), (0, weight:9), (15, weight:2), (17, weight:6), (13, weight:7), (10, weight:5)],\nnode6: [(9, weight:1), (0, weight:13), (15, weight:9)],\nnode7: [(18, weight:16), (16, weight:20), (1, weight:17), (12, weight:10), (9, weight:13)],\nnode8: [(18, weight:17), (16, weight:11), (3, weight:12), (2, weight:8), (6, weight:14), (15, weight:11), (19, weight:6), (10, weight:19)],\nnode9: [(16, weight:9), (12, weight:5), (11, weight:1), (13, weight:20)],\nnode10: [(1, weight:8), (2, weight:18), (9, weight:1), (11, weight:14), (8, weight:10), (19, weight:17), (17, weight:11), (13, weight:9), (14, weight:17)],\nnode11: [(18, weight:14), (16, weight:13), (12, weight:6), (19, weight:13), (10, weight:12), (14, weight:15)],\nnode12: [(11, weight:10), (15, weight:20), (10, weight:3)],\nnode13: [(3, weight:10), (6, weight:9), (11, weight:11), (15, weight:15), (7, weight:11)],\nnode14: [(1, weight:5), (12, weight:14)],\nnode15: [(16, weight:6), (6, weight:15), (5, weight:20), (11, weight:18), (8, weight:11)],\nnode16: [(11, weight:15), (19, weight:16), (17, weight:11)],\nnode17: [(1, weight:20), (2, weight:15), (12, weight:3), (8, weight:6)],\nnode18: [(9, weight:7), (7, weight:16), (13, weight:2)],\nnode19: [(9, weight:18), (0, weight:3), (14, weight:8)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r\"node(\\d+): \\[\\((.*?)\\)\\]\"\nedge_pattern = r\"\\((\\d+), weight:(\\d+)\\)\"\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 5, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 182, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(13, capacity:10), (12, capacity:10), (6, capacity:4)],\nnode1: [(11, capacity:19), (2, capacity:4), (14, capacity:17)],\nnode2: [(13, capacity:10), (3, capacity:9), (11, capacity:12), (14, capacity:14), (4, capacity:17)],\nnode3: [(11, capacity:8), (6, capacity:5), (15, capacity:5), (4, capacity:3)],\nnode4: [(13, capacity:7), (10, capacity:8), (9, capacity:14), (11, capacity:12), (2, capacity:2), (15, capacity:9)],\nnode5: [(12, capacity:12), (8, capacity:11), (9, capacity:7)],\nnode6: [(9, capacity:1), (11, capacity:7), (15, capacity:18)],\nnode7: [(9, capacity:12), (15, capacity:4), (5, capacity:11)],\nnode8: [(10, capacity:9), (2, capacity:9), (0, capacity:19), (15, capacity:9)],\nnode9: [(13, capacity:5), (7, capacity:15), (3, capacity:15), (14, capacity:5), (10, capacity:10)],\nnode10: [(3, capacity:9), (9, capacity:10), (14, capacity:4)],\nnode11: [(15, capacity:2)],\nnode12: [(1, capacity:6), (8, capacity:8), (3, capacity:15), (9, capacity:10), (2, capacity:11), (0, capacity:13), (5, capacity:15)],\nnode13: [(10, capacity:16), (9, capacity:18), (15, capacity:10), (4, capacity:12)],\nnode14: [(12, capacity:16), (7, capacity:1), (9, capacity:5), (11, capacity:6)],\nnode15: [(1, capacity:16), (12, capacity:2), (9, capacity:7), (5, capacity:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 8\nflow_value, flow_dict = nx.maximum_flow(G, 10, 8, capacity='weight')\nprint(flow_value)\n```"}, {"id": 183, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 2, an edge from node 1 to node 5 with capacity 6, an edge from node 1 to node 0 with capacity 9, an edge from node 2 to node 0 with capacity 4, an edge from node 3 to node 4 with capacity 8, an edge from node 3 to node 0 with capacity 8, an edge from node 4 to node 5 with capacity 10, an edge from node 5 to node 4 with capacity 1, an edge from node 5 to node 0 with capacity 4, an edge from node 5 to node 3 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 5, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 184, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 1 to node 5 with capacity 8, an edge from node 1 to node 4 with capacity 5, an edge from node 1 to node 0 with capacity 1, an edge from node 2 to node 0 with capacity 5, an edge from node 3 to node 1 with capacity 7, an edge from node 4 to node 0 with capacity 10, an edge from node 5 to node 2 with capacity 4.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 185, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 3 with capacity 9, an edge from node 0 to node 6 with capacity 5, an edge from node 1 to node 5 with capacity 10, an edge from node 1 to node 6 with capacity 6, an edge from node 1 to node 2 with capacity 4, an edge from node 2 to node 5 with capacity 10, an edge from node 2 to node 6 with capacity 8, an edge from node 2 to node 0 with capacity 8, an edge from node 3 to node 0 with capacity 7, an edge from node 4 to node 3 with capacity 2, an edge from node 4 to node 1 with capacity 2, an edge from node 4 to node 6 with capacity 3, an edge from node 5 to node 1 with capacity 5, an edge from node 5 to node 4 with capacity 2, an edge from node 6 to node 3 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 186, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 1 with capacity 13,\nan edge from node 0 to node 12 with capacity 12,\nan edge from node 0 to node 2 with capacity 15,\nan edge from node 0 to node 7 with capacity 9,\nan edge from node 1 to node 6 with capacity 19,\nan edge from node 1 to node 2 with capacity 18,\nan edge from node 1 to node 3 with capacity 3,\nan edge from node 2 to node 5 with capacity 9,\nan edge from node 2 to node 12 with capacity 4,\nan edge from node 2 to node 8 with capacity 12,\nan edge from node 2 to node 0 with capacity 6,\nan edge from node 2 to node 7 with capacity 8,\nan edge from node 3 to node 4 with capacity 9,\nan edge from node 3 to node 5 with capacity 20,\nan edge from node 3 to node 12 with capacity 15,\nan edge from node 3 to node 9 with capacity 9,\nan edge from node 3 to node 8 with capacity 18,\nan edge from node 3 to node 10 with capacity 5,\nan edge from node 3 to node 0 with capacity 20,\nan edge from node 3 to node 7 with capacity 12,\nan edge from node 4 to node 6 with capacity 15,\nan edge from node 4 to node 9 with capacity 19,\nan edge from node 4 to node 8 with capacity 17,\nan edge from node 4 to node 3 with capacity 7,\nan edge from node 5 to node 13 with capacity 15,\nan edge from node 5 to node 6 with capacity 2,\nan edge from node 5 to node 0 with capacity 15,\nan edge from node 6 to node 11 with capacity 19,\nan edge from node 6 to node 1 with capacity 9,\nan edge from node 6 to node 5 with capacity 7,\nan edge from node 6 to node 3 with capacity 4,\nan edge from node 7 to node 4 with capacity 14,\nan edge from node 7 to node 1 with capacity 20,\nan edge from node 7 to node 5 with capacity 9,\nan edge from node 7 to node 13 with capacity 20,\nan edge from node 7 to node 10 with capacity 14,\nan edge from node 8 to node 5 with capacity 9,\nan edge from node 9 to node 1 with capacity 20,\nan edge from node 9 to node 5 with capacity 19,\nan edge from node 9 to node 2 with capacity 1,\nan edge from node 9 to node 8 with capacity 18,\nan edge from node 10 to node 1 with capacity 14,\nan edge from node 10 to node 0 with capacity 18,\nan edge from node 10 to node 3 with capacity 16,\nan edge from node 11 to node 5 with capacity 15,\nan edge from node 11 to node 13 with capacity 14,\nan edge from node 11 to node 0 with capacity 15,\nan edge from node 12 to node 13 with capacity 13,\nan edge from node 12 to node 9 with capacity 2,\nan edge from node 13 to node 6 with capacity 17,\nan edge from node 13 to node 9 with capacity 9,\nan edge from node 13 to node 7 with capacity 4.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 13, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 187, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 1 with capacity 5,\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 1 to node 12 with capacity 7,\nan edge from node 1 to node 6 with capacity 9,\nan edge from node 1 to node 3 with capacity 8,\nan edge from node 1 to node 10 with capacity 17,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 9 with capacity 11,\nan edge from node 2 to node 12 with capacity 19,\nan edge from node 2 to node 5 with capacity 9,\nan edge from node 2 to node 0 with capacity 13,\nan edge from node 2 to node 7 with capacity 6,\nan edge from node 2 to node 13 with capacity 11,\nan edge from node 2 to node 11 with capacity 2,\nan edge from node 3 to node 10 with capacity 5,\nan edge from node 3 to node 4 with capacity 18,\nan edge from node 3 to node 7 with capacity 19,\nan edge from node 4 to node 10 with capacity 8,\nan edge from node 4 to node 5 with capacity 7,\nan edge from node 4 to node 8 with capacity 14,\nan edge from node 4 to node 0 with capacity 18,\nan edge from node 5 to node 4 with capacity 16,\nan edge from node 6 to node 12 with capacity 20,\nan edge from node 6 to node 3 with capacity 15,\nan edge from node 6 to node 10 with capacity 8,\nan edge from node 6 to node 8 with capacity 16,\nan edge from node 6 to node 2 with capacity 4,\nan edge from node 6 to node 0 with capacity 7,\nan edge from node 6 to node 4 with capacity 2,\nan edge from node 6 to node 11 with capacity 1,\nan edge from node 7 to node 6 with capacity 2,\nan edge from node 7 to node 3 with capacity 5,\nan edge from node 7 to node 13 with capacity 15,\nan edge from node 8 to node 12 with capacity 2,\nan edge from node 8 to node 6 with capacity 13,\nan edge from node 8 to node 1 with capacity 8,\nan edge from node 8 to node 3 with capacity 16,\nan edge from node 8 to node 9 with capacity 20,\nan edge from node 9 to node 3 with capacity 15,\nan edge from node 9 to node 10 with capacity 9,\nan edge from node 9 to node 5 with capacity 2,\nan edge from node 9 to node 2 with capacity 9,\nan edge from node 10 to node 12 with capacity 17,\nan edge from node 10 to node 1 with capacity 17,\nan edge from node 10 to node 5 with capacity 1,\nan edge from node 10 to node 7 with capacity 18,\nan edge from node 11 to node 8 with capacity 18,\nan edge from node 11 to node 7 with capacity 10,\nan edge from node 12 to node 8 with capacity 4,\nan edge from node 12 to node 2 with capacity 15,\nan edge from node 12 to node 7 with capacity 15,\nan edge from node 13 to node 8 with capacity 16,\nan edge from node 13 to node 7 with capacity 12,\nan edge from node 13 to node 11 with capacity 18.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 188, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an edge from node 0 to node 3 with capacity 2, an edge from node 0 to node 6 with capacity 10, an edge from node 1 to node 2 with capacity 2, an edge from node 1 to node 5 with capacity 9, an edge from node 1 to node 4 with capacity 8, an edge from node 2 to node 5 with capacity 4, an edge from node 2 to node 0 with capacity 3, an edge from node 2 to node 6 with capacity 3, an edge from node 3 to node 1 with capacity 7, an edge from node 5 to node 3 with capacity 6, an edge from node 5 to node 6 with capacity 6, an edge from node 6 to node 2 with capacity 3, an edge from node 6 to node 1 with capacity 5, an edge from node 6 to node 0 with capacity 2, an edge from node 6 to node 3 with capacity 10, an edge from node 6 to node 4 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 189, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 9 with capacity 15,\nan edge from node 0 to node 6 with capacity 1,\nan edge from node 0 to node 3 with capacity 6,\nan edge from node 0 to node 4 with capacity 3,\nan edge from node 1 to node 3 with capacity 9,\nan edge from node 1 to node 5 with capacity 13,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 5 with capacity 3,\nan edge from node 2 to node 1 with capacity 19,\nan edge from node 4 to node 2 with capacity 8,\nan edge from node 4 to node 8 with capacity 4,\nan edge from node 5 to node 10 with capacity 6,\nan edge from node 5 to node 7 with capacity 16,\nan edge from node 6 to node 10 with capacity 19,\nan edge from node 6 to node 7 with capacity 14,\nan edge from node 6 to node 0 with capacity 7,\nan edge from node 7 to node 10 with capacity 1,\nan edge from node 8 to node 3 with capacity 15,\nan edge from node 8 to node 1 with capacity 18,\nan edge from node 9 to node 7 with capacity 3,\nan edge from node 9 to node 6 with capacity 17,\nan edge from node 9 to node 0 with capacity 20,\nan edge from node 9 to node 2 with capacity 9,\nan edge from node 9 to node 4 with capacity 2,\nan edge from node 10 to node 2 with capacity 18.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 190, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(18, weight:17), (7, weight:19), (4, weight:16), (15, weight:7)],\nnode1: [(7, weight:4), (6, weight:10), (10, weight:7), (15, weight:2), (14, weight:2), (17, weight:6)],\nnode2: [(7, weight:1), (11, weight:6), (13, weight:18), (15, weight:8)],\nnode3: [(5, weight:18), (6, weight:15), (9, weight:10), (15, weight:19)],\nnode4: [(0, weight:14), (10, weight:6), (3, weight:14), (12, weight:13)],\nnode5: [(18, weight:5), (7, weight:14), (2, weight:6), (4, weight:16), (17, weight:18), (3, weight:1), (1, weight:13)],\nnode6: [(0, weight:10), (7, weight:17), (11, weight:12), (13, weight:20), (2, weight:18)],\nnode7: [(5, weight:3), (11, weight:17), (13, weight:19), (10, weight:13)],\nnode8: [(18, weight:7), (0, weight:14), (9, weight:14), (2, weight:13), (17, weight:14), (12, weight:17), (1, weight:5)],\nnode9: [(0, weight:7), (2, weight:3), (8, weight:19), (15, weight:6), (3, weight:16), (1, weight:19)],\nnode10: [(5, weight:2), (18, weight:19), (6, weight:5), (13, weight:7), (15, weight:6), (3, weight:20)],\nnode11: [(18, weight:1), (7, weight:5), (9, weight:9), (13, weight:10), (4, weight:12), (14, weight:3)],\nnode12: [(18, weight:9), (9, weight:15), (2, weight:12), (4, weight:15), (15, weight:17), (3, weight:6), (1, weight:6)],\nnode13: [(11, weight:19), (2, weight:13), (14, weight:19), (17, weight:1), (12, weight:15)],\nnode14: [(18, weight:8), (7, weight:1), (11, weight:16), (6, weight:1), (2, weight:8), (16, weight:14), (4, weight:8), (15, weight:9), (17, weight:8)],\nnode15: [(10, weight:7), (2, weight:4), (14, weight:9), (12, weight:7)],\nnode16: [(13, weight:20), (8, weight:7), (15, weight:13)],\nnode17: [(0, weight:12), (6, weight:2), (10, weight:12), (8, weight:18), (12, weight:2)],\nnode18: [(7, weight:8), (2, weight:13), (4, weight:8), (8, weight:19), (15, weight:3), (12, weight:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 2, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 191, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 2 with capacity 11,\nan edge from node 0 to node 1 with capacity 4,\nan edge from node 1 to node 13 with capacity 11,\nan edge from node 1 to node 8 with capacity 18,\nan edge from node 1 to node 11 with capacity 10,\nan edge from node 1 to node 6 with capacity 8,\nan edge from node 2 to node 7 with capacity 7,\nan edge from node 3 to node 13 with capacity 2,\nan edge from node 3 to node 2 with capacity 11,\nan edge from node 3 to node 5 with capacity 5,\nan edge from node 3 to node 6 with capacity 1,\nan edge from node 3 to node 1 with capacity 18,\nan edge from node 4 to node 6 with capacity 16,\nan edge from node 5 to node 7 with capacity 1,\nan edge from node 5 to node 4 with capacity 2,\nan edge from node 5 to node 9 with capacity 17,\nan edge from node 6 to node 2 with capacity 3,\nan edge from node 6 to node 8 with capacity 9,\nan edge from node 6 to node 11 with capacity 14,\nan edge from node 6 to node 12 with capacity 5,\nan edge from node 6 to node 5 with capacity 5,\nan edge from node 6 to node 0 with capacity 16,\nan edge from node 7 to node 13 with capacity 11,\nan edge from node 7 to node 9 with capacity 11,\nan edge from node 7 to node 2 with capacity 9,\nan edge from node 7 to node 11 with capacity 6,\nan edge from node 7 to node 1 with capacity 3,\nan edge from node 8 to node 13 with capacity 10,\nan edge from node 8 to node 9 with capacity 17,\nan edge from node 8 to node 5 with capacity 1,\nan edge from node 8 to node 6 with capacity 19,\nan edge from node 8 to node 1 with capacity 3,\nan edge from node 9 to node 3 with capacity 9,\nan edge from node 9 to node 6 with capacity 16,\nan edge from node 9 to node 0 with capacity 1,\nan edge from node 9 to node 1 with capacity 8,\nan edge from node 10 to node 3 with capacity 20,\nan edge from node 10 to node 2 with capacity 19,\nan edge from node 11 to node 10 with capacity 9,\nan edge from node 11 to node 5 with capacity 19,\nan edge from node 11 to node 0 with capacity 7,\nan edge from node 12 to node 10 with capacity 5,\nan edge from node 12 to node 4 with capacity 15,\nan edge from node 12 to node 3 with capacity 14,\nan edge from node 12 to node 8 with capacity 20,\nan edge from node 12 to node 14 with capacity 5,\nan edge from node 13 to node 10 with capacity 19,\nan edge from node 13 to node 3 with capacity 15,\nan edge from node 13 to node 0 with capacity 3,\nan edge from node 14 to node 7 with capacity 3,\nan edge from node 14 to node 9 with capacity 7,\nan edge from node 14 to node 1 with capacity 3.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 14 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 14, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 192, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 5 with capacity 6, an edge from node 0 to node 3 with capacity 4, an edge from node 1 to node 6 with capacity 4, an edge from node 1 to node 0 with capacity 4, an edge from node 1 to node 3 with capacity 5, an edge from node 4 to node 6 with capacity 5, an edge from node 4 to node 3 with capacity 8, an edge from node 5 to node 2 with capacity 3, an edge from node 6 to node 0 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 193, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 1 with capacity 8, an edge from node 1 to node 6 with capacity 1, an edge from node 2 to node 6 with capacity 5, an edge from node 5 to node 1 with capacity 10, an edge from node 6 to node 7 with capacity 9, an edge from node 7 to node 3 with capacity 7, an edge from node 7 to node 5 with capacity 10, an edge from node 7 to node 6 with capacity 9, an edge from node 7 to node 0 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 194, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 4 with capacity 6,\nan edge from node 0 to node 5 with capacity 19,\nan edge from node 0 to node 10 with capacity 8,\nan edge from node 0 to node 13 with capacity 13,\nan edge from node 0 to node 19 with capacity 8,\nan edge from node 1 to node 3 with capacity 7,\nan edge from node 1 to node 17 with capacity 7,\nan edge from node 1 to node 15 with capacity 2,\nan edge from node 1 to node 16 with capacity 7,\nan edge from node 1 to node 10 with capacity 15,\nan edge from node 1 to node 13 with capacity 11,\nan edge from node 2 to node 12 with capacity 5,\nan edge from node 2 to node 19 with capacity 19,\nan edge from node 3 to node 18 with capacity 12,\nan edge from node 3 to node 17 with capacity 11,\nan edge from node 3 to node 4 with capacity 9,\nan edge from node 3 to node 5 with capacity 4,\nan edge from node 4 to node 0 with capacity 10,\nan edge from node 4 to node 2 with capacity 7,\nan edge from node 4 to node 1 with capacity 1,\nan edge from node 4 to node 16 with capacity 7,\nan edge from node 4 to node 13 with capacity 5,\nan edge from node 4 to node 19 with capacity 20,\nan edge from node 5 to node 18 with capacity 13,\nan edge from node 5 to node 7 with capacity 6,\nan edge from node 5 to node 12 with capacity 5,\nan edge from node 5 to node 6 with capacity 16,\nan edge from node 5 to node 16 with capacity 13,\nan edge from node 6 to node 17 with capacity 7,\nan edge from node 6 to node 7 with capacity 7,\nan edge from node 6 to node 2 with capacity 7,\nan edge from node 6 to node 12 with capacity 5,\nan edge from node 6 to node 16 with capacity 15,\nan edge from node 6 to node 19 with capacity 7,\nan edge from node 7 to node 15 with capacity 20,\nan edge from node 7 to node 4 with capacity 1,\nan edge from node 7 to node 1 with capacity 12,\nan edge from node 7 to node 16 with capacity 19,\nan edge from node 7 to node 11 with capacity 13,\nan edge from node 7 to node 13 with capacity 11,\nan edge from node 8 to node 15 with capacity 20,\nan edge from node 8 to node 0 with capacity 11,\nan edge from node 8 to node 14 with capacity 8,\nan edge from node 8 to node 6 with capacity 1,\nan edge from node 8 to node 11 with capacity 5,\nan edge from node 9 to node 5 with capacity 1,\nan edge from node 9 to node 8 with capacity 19,\nan edge from node 9 to node 10 with capacity 5,\nan edge from node 9 to node 11 with capacity 7,\nan edge from node 9 to node 13 with capacity 6,\nan edge from node 10 to node 4 with capacity 12,\nan edge from node 10 to node 2 with capacity 13,\nan edge from node 10 to node 1 with capacity 6,\nan edge from node 10 to node 11 with capacity 7,\nan edge from node 11 to node 3 with capacity 6,\nan edge from node 11 to node 17 with capacity 16,\nan edge from node 11 to node 8 with capacity 2,\nan edge from node 11 to node 16 with capacity 3,\nan edge from node 11 to node 9 with capacity 1,\nan edge from node 12 to node 3 with capacity 3,\nan edge from node 12 to node 15 with capacity 16,\nan edge from node 12 to node 0 with capacity 17,\nan edge from node 12 to node 1 with capacity 8,\nan edge from node 12 to node 5 with capacity 12,\nan edge from node 12 to node 16 with capacity 14,\nan edge from node 12 to node 10 with capacity 2,\nan edge from node 13 to node 3 with capacity 2,\nan edge from node 13 to node 2 with capacity 19,\nan edge from node 13 to node 16 with capacity 16,\nan edge from node 13 to node 11 with capacity 5,\nan edge from node 13 to node 19 with capacity 8,\nan edge from node 14 to node 5 with capacity 13,\nan edge from node 14 to node 9 with capacity 16,\nan edge from node 15 to node 18 with capacity 13,\nan edge from node 15 to node 17 with capacity 20,\nan edge from node 15 to node 4 with capacity 11,\nan edge from node 15 to node 12 with capacity 6,\nan edge from node 15 to node 10 with capacity 7,\nan edge from node 15 to node 11 with capacity 11,\nan edge from node 16 to node 18 with capacity 3,\nan edge from node 16 to node 15 with capacity 3,\nan edge from node 16 to node 12 with capacity 14,\nan edge from node 16 to node 1 with capacity 4,\nan edge from node 16 to node 5 with capacity 15,\nan edge from node 16 to node 6 with capacity 17,\nan edge from node 16 to node 9 with capacity 19,\nan edge from node 17 to node 15 with capacity 15,\nan edge from node 17 to node 0 with capacity 16,\nan edge from node 17 to node 12 with capacity 6,\nan edge from node 17 to node 1 with capacity 7,\nan edge from node 17 to node 5 with capacity 7,\nan edge from node 17 to node 11 with capacity 18,\nan edge from node 18 to node 7 with capacity 17,\nan edge from node 18 to node 1 with capacity 12,\nan edge from node 18 to node 5 with capacity 17,\nan edge from node 18 to node 8 with capacity 9,\nan edge from node 18 to node 13 with capacity 8,\nan edge from node 19 to node 18 with capacity 3,\nan edge from node 19 to node 17 with capacity 2,\nan edge from node 19 to node 0 with capacity 15,\nan edge from node 19 to node 4 with capacity 12,\nan edge from node 19 to node 2 with capacity 10,\nan edge from node 19 to node 5 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 195, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 1 with capacity 2, an edge from node 2 to node 4 with capacity 9, an edge from node 2 to node 1 with capacity 8, an edge from node 3 to node 0 with capacity 1, an edge from node 4 to node 3 with capacity 10, an edge from node 4 to node 0 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 196, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, weight:14), (5, weight:18), (6, weight:15), (12, weight:14), (18, weight:4), (3, weight:9), (8, weight:7)],\nnode1: [(5, weight:1), (13, weight:15), (2, weight:7), (7, weight:3)],\nnode2: [(0, weight:8), (4, weight:10), (13, weight:2), (6, weight:10), (16, weight:13), (9, weight:1), (7, weight:1)],\nnode3: [(11, weight:2), (12, weight:16), (14, weight:15)],\nnode4: [(11, weight:15), (19, weight:13), (6, weight:1), (17, weight:8), (9, weight:3), (14, weight:18)],\nnode5: [(0, weight:19), (13, weight:1), (18, weight:10), (2, weight:18)],\nnode6: [(0, weight:5), (19, weight:15), (1, weight:15), (12, weight:20), (14, weight:1), (2, weight:9)],\nnode7: [(13, weight:8), (1, weight:18), (6, weight:10), (10, weight:8), (17, weight:1), (14, weight:6), (2, weight:14), (3, weight:14)],\nnode8: [(19, weight:14), (12, weight:11), (16, weight:11)],\nnode9: [(0, weight:15), (5, weight:7), (11, weight:20), (6, weight:9), (17, weight:4), (14, weight:10), (2, weight:17), (7, weight:1)],\nnode10: [(0, weight:3), (17, weight:10), (3, weight:13), (8, weight:2)],\nnode11: [(0, weight:13), (4, weight:12), (6, weight:9), (17, weight:5)],\nnode12: [(5, weight:11), (11, weight:9), (6, weight:11), (10, weight:9), (14, weight:19), (2, weight:15)],\nnode13: [(11, weight:3), (2, weight:13), (8, weight:13)],\nnode14: [(11, weight:12), (10, weight:6), (15, weight:1), (16, weight:5)],\nnode15: [(0, weight:13), (5, weight:5), (1, weight:3), (12, weight:16), (18, weight:8), (14, weight:14)],\nnode16: [(0, weight:10), (4, weight:5), (5, weight:8), (19, weight:16), (12, weight:19), (10, weight:20), (18, weight:18), (3, weight:7)],\nnode17: [(0, weight:17), (4, weight:6), (12, weight:9), (14, weight:6)],\nnode18: [(1, weight:8), (15, weight:13), (8, weight:5)],\nnode19: [(2, weight:1), (8, weight:12)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+) \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 18 to node 19\nflow_value, flow_dict = nx.maximum_flow_cutoff(G, 18, 19, capacity='weight')\nprint(flow_value)\n```"}, {"id": 197, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 1 to node 12 with capacity 6,\nan edge from node 1 to node 7 with capacity 20,\nan edge from node 2 to node 12 with capacity 1,\nan edge from node 2 to node 6 with capacity 7,\nan edge from node 2 to node 11 with capacity 11,\nan edge from node 2 to node 10 with capacity 14,\nan edge from node 2 to node 8 with capacity 17,\nan edge from node 2 to node 13 with capacity 10,\nan edge from node 3 to node 2 with capacity 19,\nan edge from node 3 to node 9 with capacity 7,\nan edge from node 3 to node 4 with capacity 16,\nan edge from node 4 to node 11 with capacity 18,\nan edge from node 4 to node 1 with capacity 20,\nan edge from node 4 to node 7 with capacity 6,\nan edge from node 4 to node 14 with capacity 13,\nan edge from node 5 to node 2 with capacity 4,\nan edge from node 5 to node 9 with capacity 2,\nan edge from node 6 to node 0 with capacity 20,\nan edge from node 6 to node 11 with capacity 8,\nan edge from node 6 to node 7 with capacity 7,\nan edge from node 6 to node 8 with capacity 12,\nan edge from node 7 to node 1 with capacity 8,\nan edge from node 7 to node 9 with capacity 6,\nan edge from node 8 to node 10 with capacity 8,\nan edge from node 8 to node 3 with capacity 10,\nan edge from node 8 to node 4 with capacity 7,\nan edge from node 9 to node 0 with capacity 18,\nan edge from node 9 to node 6 with capacity 14,\nan edge from node 9 to node 7 with capacity 10,\nan edge from node 9 to node 13 with capacity 5,\nan edge from node 9 to node 4 with capacity 7,\nan edge from node 10 to node 7 with capacity 2,\nan edge from node 11 to node 6 with capacity 15,\nan edge from node 11 to node 14 with capacity 19,\nan edge from node 11 to node 13 with capacity 15,\nan edge from node 12 to node 10 with capacity 6,\nan edge from node 12 to node 1 with capacity 14,\nan edge from node 12 to node 5 with capacity 19,\nan edge from node 13 to node 10 with capacity 18,\nan edge from node 13 to node 7 with capacity 8,\nan edge from node 14 to node 10 with capacity 12,\nan edge from node 14 to node 7 with capacity 12,\nan edge from node 14 to node 8 with capacity 12,\nan edge from node 14 to node 9 with capacity 20,\nan edge from node 14 to node 13 with capacity 3.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 198, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(8, weight:7), (10, weight:17), (12, weight:17)],\nnode1: [(0, weight:20)],\nnode2: [(8, weight:5), (11, weight:15)],\nnode3: [(8, weight:8), (14, weight:3), (0, weight:11), (1, weight:1), (2, weight:15), (12, weight:6), (9, weight:16)],\nnode4: [(5, weight:12), (10, weight:12), (14, weight:13), (2, weight:14), (12, weight:14), (9, weight:3)],\nnode5: [(10, weight:17), (13, weight:20), (11, weight:4), (9, weight:3)],\nnode6: [(8, weight:17), (5, weight:15), (13, weight:13), (7, weight:15), (11, weight:10), (9, weight:20)],\nnode7: [(8, weight:19), (10, weight:8), (13, weight:18), (9, weight:6)],\nnode8: [(0, weight:9), (12, weight:1), (4, weight:14), (9, weight:20)],\nnode9: [(10, weight:4), (1, weight:20), (12, weight:16), (4, weight:10)],\nnode10: [(0, weight:16), (3, weight:2), (2, weight:10)],\nnode11: [(8, weight:15), (5, weight:9), (2, weight:18)],\nnode12: [(13, weight:7), (2, weight:16)],\nnode13: [(14, weight:20), (1, weight:11), (9, weight:20)],\nnode14: [(5, weight:11), (10, weight:9), (7, weight:15), (11, weight:8)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 13, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 199, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(15, capacity:12), (3, capacity:10), (6, capacity:9), (10, capacity:1), (7, capacity:6)],\nnode1: [(11, capacity:17), (8, capacity:11), (5, capacity:3), (7, capacity:6), (0, capacity:20)],\nnode2: [(15, capacity:13), (11, capacity:19), (13, capacity:18)],\nnode4: [(10, capacity:10), (0, capacity:13)],\nnode5: [(3, capacity:10), (8, capacity:3), (12, capacity:11), (1, capacity:8)],\nnode6: [(15, capacity:17), (0, capacity:10), (13, capacity:9)],\nnode7: [(15, capacity:15), (9, capacity:16), (4, capacity:8), (14, capacity:1)],\nnode8: [(15, capacity:16), (5, capacity:7), (10, capacity:4), (12, capacity:3), (16, capacity:20), (14, capacity:11), (0, capacity:9)],\nnode9: [(3, capacity:18), (6, capacity:13), (8, capacity:18), (2, capacity:14), (14, capacity:19), (13, capacity:20)],\nnode10: [(11, capacity:20), (9, capacity:7)],\nnode11: [(5, capacity:5), (7, capacity:6), (16, capacity:18)],\nnode12: [(15, capacity:5), (6, capacity:2), (2, capacity:11), (16, capacity:5), (9, capacity:19), (4, capacity:11)],\nnode13: [(11, capacity:7), (3, capacity:5), (6, capacity:17), (5, capacity:6), (7, capacity:10), (0, capacity:7)],\nnode14: [(15, capacity:15), (4, capacity:11)],\nnode15: [(11, capacity:3), (1, capacity:17), (16, capacity:11), (9, capacity:13), (14, capacity:15)],\nnode16: [(15, capacity:17), (6, capacity:19), (8, capacity:16)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 16 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 16, 7, capacity='capacity')\nprint(flow_value)\n```"}, {"id": 200, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(4, weight:3), (16, weight:17), (13, weight:1), (8, weight:4), (1, weight:11)],\nnode1: [(15, weight:9), (6, weight:1), (12, weight:15)],\nnode2: [(15, weight:16), (4, weight:9), (9, weight:6), (3, weight:20), (6, weight:11), (5, weight:17)],\nnode3: [(15, weight:7), (11, weight:16)],\nnode4: [(15, weight:7), (16, weight:17), (8, weight:9)],\nnode5: [(4, weight:16), (0, weight:1), (1, weight:6), (12, weight:2)],\nnode6: [(4, weight:9), (3, weight:4), (5, weight:16), (14, weight:10), (13, weight:16), (8, weight:19), (11, weight:12)],\nnode7: [(0, weight:14), (6, weight:19), (1, weight:7)],\nnode8: [(15, weight:7), (16, weight:15), (2, weight:4), (5, weight:13), (1, weight:15), (12, weight:12)],\nnode9: [(4, weight:15), (16, weight:4), (5, weight:6), (13, weight:20), (10, weight:1), (8, weight:7)],\nnode10: [(4, weight:1), (0, weight:1), (6, weight:13), (12, weight:13), (17, weight:17)],\nnode11: [(4, weight:6), (7, weight:4), (5, weight:18), (14, weight:8), (13, weight:5), (12, weight:13)],\nnode12: [(10, weight:11), (1, weight:3), (11, weight:16), (17, weight:7)],\nnode13: [(15, weight:9), (9, weight:13)],\nnode14: [(15, weight:16), (2, weight:10), (13, weight:1), (12, weight:5)],\nnode15: [(7, weight:10), (5, weight:6), (10, weight:7)],\nnode16: [(15, weight:18), (0, weight:13), (3, weight:17), (6, weight:10), (10, weight:1)],\nnode17: [(0, weight:1), (7, weight:4), (13, weight:10)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 6, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 201, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 10 with capacity 18,\nan edge from node 0 to node 7 with capacity 10,\nan edge from node 0 to node 6 with capacity 11,\nan edge from node 0 to node 9 with capacity 2,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 7 with capacity 4,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 6 with capacity 12,\nan edge from node 1 to node 9 with capacity 18,\nan edge from node 2 to node 10 with capacity 6,\nan edge from node 2 to node 3 with capacity 5,\nan edge from node 2 to node 6 with capacity 1,\nan edge from node 2 to node 9 with capacity 16,\nan edge from node 3 to node 4 with capacity 13,\nan edge from node 4 to node 7 with capacity 20,\nan edge from node 4 to node 8 with capacity 16,\nan edge from node 4 to node 6 with capacity 9,\nan edge from node 5 to node 7 with capacity 10,\nan edge from node 5 to node 6 with capacity 8,\nan edge from node 5 to node 9 with capacity 6,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 6 to node 5 with capacity 14,\nan edge from node 6 to node 3 with capacity 14,\nan edge from node 6 to node 8 with capacity 11,\nan edge from node 6 to node 9 with capacity 18,\nan edge from node 7 to node 10 with capacity 4,\nan edge from node 7 to node 5 with capacity 6,\nan edge from node 7 to node 2 with capacity 10,\nan edge from node 7 to node 3 with capacity 1,\nan edge from node 7 to node 0 with capacity 16,\nan edge from node 7 to node 4 with capacity 13,\nan edge from node 7 to node 6 with capacity 17,\nan edge from node 8 to node 1 with capacity 17,\nan edge from node 8 to node 0 with capacity 16,\nan edge from node 8 to node 9 with capacity 4,\nan edge from node 9 to node 5 with capacity 17,\nan edge from node 9 to node 3 with capacity 4,\nan edge from node 10 to node 3 with capacity 19,\nan edge from node 10 to node 8 with capacity 1,\nan edge from node 10 to node 4 with capacity 3,\nan edge from node 11 to node 2 with capacity 10,\nan edge from node 11 to node 8 with capacity 9,\nan edge from node 11 to node 6 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 1, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 202, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 8 with capacity 4, an edge from node 0 to node 4 with capacity 5, an edge from node 0 to node 3 with capacity 6, an edge from node 1 to node 6 with capacity 4, an edge from node 1 to node 0 with capacity 6, an edge from node 2 to node 6 with capacity 2, an edge from node 3 to node 8 with capacity 1, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 2 with capacity 3, an edge from node 4 to node 0 with capacity 4, an edge from node 4 to node 7 with capacity 8, an edge from node 5 to node 4 with capacity 8, an edge from node 5 to node 0 with capacity 10, an edge from node 5 to node 7 with capacity 4, an edge from node 6 to node 5 with capacity 2, an edge from node 6 to node 3 with capacity 3, an edge from node 6 to node 0 with capacity 3, an edge from node 7 to node 3 with capacity 4, an edge from node 8 to node 4 with capacity 7, an edge from node 8 to node 1 with capacity 1, an edge from node 8 to node 0 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 203, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 2 with capacity 20,\nan edge from node 0 to node 5 with capacity 7,\nan edge from node 0 to node 7 with capacity 4,\nan edge from node 0 to node 3 with capacity 19,\nan edge from node 0 to node 4 with capacity 16,\nan edge from node 1 to node 2 with capacity 7,\nan edge from node 1 to node 3 with capacity 12,\nan edge from node 1 to node 0 with capacity 13,\nan edge from node 1 to node 4 with capacity 2,\nan edge from node 1 to node 9 with capacity 20,\nan edge from node 2 to node 1 with capacity 6,\nan edge from node 2 to node 9 with capacity 1,\nan edge from node 3 to node 10 with capacity 16,\nan edge from node 3 to node 0 with capacity 8,\nan edge from node 3 to node 9 with capacity 14,\nan edge from node 4 to node 2 with capacity 15,\nan edge from node 4 to node 6 with capacity 9,\nan edge from node 4 to node 7 with capacity 1,\nan edge from node 4 to node 8 with capacity 10,\nan edge from node 4 to node 0 with capacity 9,\nan edge from node 4 to node 1 with capacity 19,\nan edge from node 5 to node 8 with capacity 1,\nan edge from node 5 to node 1 with capacity 10,\nan edge from node 7 to node 1 with capacity 3,\nan edge from node 8 to node 6 with capacity 7,\nan edge from node 8 to node 3 with capacity 12,\nan edge from node 8 to node 1 with capacity 11,\nan edge from node 8 to node 4 with capacity 5,\nan edge from node 10 to node 6 with capacity 19,\nan edge from node 10 to node 8 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 204, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 7 with capacity 5,\nan edge from node 1 to node 8 with capacity 18,\nan edge from node 1 to node 0 with capacity 3,\nan edge from node 2 to node 10 with capacity 11,\nan edge from node 3 to node 4 with capacity 12,\nan edge from node 3 to node 6 with capacity 17,\nan edge from node 4 to node 8 with capacity 13,\nan edge from node 4 to node 6 with capacity 14,\nan edge from node 5 to node 7 with capacity 18,\nan edge from node 6 to node 3 with capacity 9,\nan edge from node 6 to node 8 with capacity 10,\nan edge from node 6 to node 11 with capacity 2,\nan edge from node 6 to node 9 with capacity 20,\nan edge from node 7 to node 4 with capacity 1,\nan edge from node 7 to node 11 with capacity 18,\nan edge from node 7 to node 6 with capacity 2,\nan edge from node 8 to node 7 with capacity 10,\nan edge from node 8 to node 10 with capacity 5,\nan edge from node 8 to node 6 with capacity 3,\nan edge from node 8 to node 0 with capacity 9,\nan edge from node 9 to node 3 with capacity 20,\nan edge from node 9 to node 4 with capacity 5,\nan edge from node 9 to node 1 with capacity 1,\nan edge from node 9 to node 7 with capacity 15,\nan edge from node 9 to node 10 with capacity 16,\nan edge from node 9 to node 2 with capacity 15,\nan edge from node 10 to node 3 with capacity 13,\nan edge from node 10 to node 4 with capacity 11,\nan edge from node 10 to node 1 with capacity 12,\nan edge from node 10 to node 7 with capacity 14,\nan edge from node 10 to node 6 with capacity 17,\nan edge from node 10 to node 9 with capacity 19,\nan edge from node 11 to node 1 with capacity 5,\nan edge from node 11 to node 6 with capacity 16.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 205, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 4 with capacity 12,\nan edge from node 0 to node 13 with capacity 20,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 8 with capacity 2,\nan edge from node 1 to node 9 with capacity 9,\nan edge from node 1 to node 11 with capacity 1,\nan edge from node 2 to node 3 with capacity 17,\nan edge from node 2 to node 8 with capacity 8,\nan edge from node 2 to node 9 with capacity 18,\nan edge from node 2 to node 7 with capacity 9,\nan edge from node 3 to node 1 with capacity 6,\nan edge from node 3 to node 5 with capacity 7,\nan edge from node 3 to node 10 with capacity 7,\nan edge from node 4 to node 3 with capacity 19,\nan edge from node 4 to node 8 with capacity 3,\nan edge from node 4 to node 2 with capacity 4,\nan edge from node 4 to node 1 with capacity 15,\nan edge from node 4 to node 0 with capacity 15,\nan edge from node 4 to node 11 with capacity 10,\nan edge from node 5 to node 4 with capacity 9,\nan edge from node 5 to node 6 with capacity 8,\nan edge from node 5 to node 7 with capacity 14,\nan edge from node 5 to node 0 with capacity 16,\nan edge from node 5 to node 10 with capacity 10,\nan edge from node 5 to node 12 with capacity 10,\nan edge from node 6 to node 8 with capacity 2,\nan edge from node 6 to node 7 with capacity 3,\nan edge from node 6 to node 5 with capacity 10,\nan edge from node 6 to node 10 with capacity 19,\nan edge from node 7 to node 13 with capacity 3,\nan edge from node 7 to node 0 with capacity 7,\nan edge from node 8 to node 1 with capacity 19,\nan edge from node 8 to node 9 with capacity 15,\nan edge from node 8 to node 13 with capacity 2,\nan edge from node 8 to node 0 with capacity 3,\nan edge from node 8 to node 12 with capacity 13,\nan edge from node 9 to node 13 with capacity 20,\nan edge from node 9 to node 0 with capacity 3,\nan edge from node 9 to node 11 with capacity 12,\nan edge from node 9 to node 10 with capacity 12,\nan edge from node 10 to node 9 with capacity 3,\nan edge from node 11 to node 9 with capacity 1,\nan edge from node 11 to node 7 with capacity 2,\nan edge from node 11 to node 13 with capacity 16,\nan edge from node 12 to node 3 with capacity 5,\nan edge from node 12 to node 5 with capacity 2,\nan edge from node 13 to node 4 with capacity 20,\nan edge from node 13 to node 0 with capacity 17,\nan edge from node 13 to node 11 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 13, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 206, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 16, and the edges are:\nan edge from node 0 to node 3 with capacity 17,\nan edge from node 0 to node 1 with capacity 16,\nan edge from node 1 to node 3 with capacity 7,\nan edge from node 1 to node 4 with capacity 12,\nan edge from node 1 to node 5 with capacity 4,\nan edge from node 1 to node 15 with capacity 12,\nan edge from node 2 to node 7 with capacity 2,\nan edge from node 2 to node 8 with capacity 19,\nan edge from node 2 to node 16 with capacity 6,\nan edge from node 3 to node 2 with capacity 19,\nan edge from node 3 to node 10 with capacity 16,\nan edge from node 4 to node 13 with capacity 8,\nan edge from node 4 to node 6 with capacity 3,\nan edge from node 4 to node 14 with capacity 15,\nan edge from node 4 to node 9 with capacity 4,\nan edge from node 4 to node 15 with capacity 12,\nan edge from node 5 to node 11 with capacity 17,\nan edge from node 5 to node 3 with capacity 18,\nan edge from node 5 to node 16 with capacity 3,\nan edge from node 6 to node 12 with capacity 3,\nan edge from node 6 to node 1 with capacity 6,\nan edge from node 6 to node 5 with capacity 2,\nan edge from node 7 to node 2 with capacity 6,\nan edge from node 7 to node 6 with capacity 12,\nan edge from node 7 to node 8 with capacity 18,\nan edge from node 8 to node 4 with capacity 14,\nan edge from node 8 to node 14 with capacity 17,\nan edge from node 8 to node 1 with capacity 20,\nan edge from node 9 to node 12 with capacity 20,\nan edge from node 9 to node 3 with capacity 15,\nan edge from node 9 to node 1 with capacity 3,\nan edge from node 10 to node 3 with capacity 19,\nan edge from node 10 to node 16 with capacity 9,\nan edge from node 10 to node 14 with capacity 6,\nan edge from node 11 to node 0 with capacity 3,\nan edge from node 11 to node 7 with capacity 10,\nan edge from node 11 to node 16 with capacity 12,\nan edge from node 11 to node 5 with capacity 12,\nan edge from node 11 to node 9 with capacity 20,\nan edge from node 12 to node 16 with capacity 15,\nan edge from node 12 to node 5 with capacity 18,\nan edge from node 13 to node 3 with capacity 6,\nan edge from node 13 to node 14 with capacity 1,\nan edge from node 13 to node 5 with capacity 5,\nan edge from node 14 to node 7 with capacity 3,\nan edge from node 14 to node 10 with capacity 2,\nan edge from node 14 to node 16 with capacity 5,\nan edge from node 15 to node 12 with capacity 3,\nan edge from node 15 to node 4 with capacity 2,\nan edge from node 15 to node 10 with capacity 17,\nan edge from node 15 to node 16 with capacity 5.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 207, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 7 with capacity 4, an edge from node 0 to node 4 with capacity 9, an edge from node 1 to node 3 with capacity 5, an edge from node 1 to node 8 with capacity 5, an edge from node 2 to node 1 with capacity 3, an edge from node 2 to node 6 with capacity 8, an edge from node 2 to node 8 with capacity 7, an edge from node 3 to node 6 with capacity 8, an edge from node 3 to node 8 with capacity 6, an edge from node 4 to node 1 with capacity 1, an edge from node 4 to node 8 with capacity 3, an edge from node 5 to node 7 with capacity 10, an edge from node 5 to node 4 with capacity 5, an edge from node 6 to node 3 with capacity 2, an edge from node 6 to node 0 with capacity 1, an edge from node 6 to node 5 with capacity 2, an edge from node 6 to node 2 with capacity 10, an edge from node 7 to node 0 with capacity 7, an edge from node 7 to node 8 with capacity 1, an edge from node 8 to node 3 with capacity 6, an edge from node 8 to node 4 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 208, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [node12 (capacity:4), node14 (capacity:11), node13 (capacity:10)],\nnode2: [node15 (capacity:13), node16 (capacity:1)],\nnode3: [node1 (capacity:11), node4 (capacity:10), node10 (capacity:9)],\nnode4: [node11 (capacity:8), node14 (capacity:20), node6 (capacity:14), node0 (capacity:10), node10 (capacity:14), node13 (capacity:2)],\nnode5: [node2 (capacity:17), node6 (capacity:17), node13 (capacity:16)],\nnode6: [node11 (capacity:9), node9 (capacity:14), node13 (capacity:16)],\nnode7: [node14 (capacity:12), node0 (capacity:6)],\nnode8: [node12 (capacity:8), node14 (capacity:2), node7 (capacity:17), node0 (capacity:5), node4 (capacity:19)],\nnode9: [node8 (capacity:9), node2 (capacity:9), node7 (capacity:6), node10 (capacity:14), node13 (capacity:14)],\nnode10: [node8 (capacity:13), node12 (capacity:13), node15 (capacity:7), node2 (capacity:11), node16 (capacity:14), node5 (capacity:5)],\nnode11: [node9 (capacity:18), node6 (capacity:8), node16 (capacity:11), node10 (capacity:17)],\nnode12: [node8 (capacity:12), node2 (capacity:3), node11 (capacity:12), node7 (capacity:7), node6 (capacity:2), node5 (capacity:2), node10 (capacity:8)],\nnode13: [node15 (capacity:17), node7 (capacity:19), node9 (capacity:5), node4 (capacity:18)],\nnode14: [node1 (capacity:10), node15 (capacity:20), node7 (capacity:16), node6 (capacity:6), node13 (capacity:6)],\nnode15: [node12 (capacity:17), node2 (capacity:5), node6 (capacity:9), node0 (capacity:7)],\nnode16: [node14 (capacity:2), node13 (capacity:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[([^\\]]*)\\]'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = [int(neighbor.strip('()').split(': ')[0]) for neighbor in neighbors.strip('[]').split(', ')]\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor, capacity=int(0))  # Assuming capacity is 0 for now\n\n# Set capacity for each edge\nfor u, v, d in G.edges(data=True):\n    d['capacity'] = 1  # Example capacity value\n\n# Calculate maximum flow from node 7 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 7, 4, capacity='capacity')\nprint(flow_value)\n```"}, {"id": 209, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 2 with capacity 5, an edge from node 0 to node 1 with capacity 2, an edge from node 0 to node 5 with capacity 7, an edge from node 1 to node 4 with capacity 8, an edge from node 1 to node 0 with capacity 6, an edge from node 2 to node 3 with capacity 3, an edge from node 2 to node 1 with capacity 4, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 0 with capacity 1, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 5 with capacity 7, an edge from node 3 to node 4 with capacity 9, an edge from node 4 to node 0 with capacity 4, an edge from node 5 to node 2 with capacity 10, an edge from node 5 to node 1 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 5, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 210, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 16, and the edges are:\nan edge from node 0 to node 11 with capacity 13,\nan edge from node 0 to node 16 with capacity 16,\nan edge from node 0 to node 4 with capacity 20,\nan edge from node 1 to node 6 with capacity 13,\nan edge from node 1 to node 11 with capacity 2,\nan edge from node 1 to node 8 with capacity 19,\nan edge from node 2 to node 0 with capacity 19,\nan edge from node 2 to node 6 with capacity 17,\nan edge from node 2 to node 15 with capacity 11,\nan edge from node 2 to node 14 with capacity 8,\nan edge from node 2 to node 3 with capacity 18,\nan edge from node 2 to node 7 with capacity 18,\nan edge from node 2 to node 13 with capacity 13,\nan edge from node 3 to node 14 with capacity 14,\nan edge from node 3 to node 16 with capacity 5,\nan edge from node 3 to node 4 with capacity 12,\nan edge from node 3 to node 9 with capacity 3,\nan edge from node 3 to node 10 with capacity 17,\nan edge from node 4 to node 12 with capacity 1,\nan edge from node 4 to node 2 with capacity 13,\nan edge from node 4 to node 10 with capacity 1,\nan edge from node 5 to node 12 with capacity 14,\nan edge from node 5 to node 13 with capacity 7,\nan edge from node 6 to node 3 with capacity 12,\nan edge from node 6 to node 7 with capacity 14,\nan edge from node 6 to node 12 with capacity 7,\nan edge from node 6 to node 10 with capacity 9,\nan edge from node 7 to node 15 with capacity 15,\nan edge from node 8 to node 6 with capacity 18,\nan edge from node 8 to node 3 with capacity 19,\nan edge from node 8 to node 1 with capacity 17,\nan edge from node 8 to node 16 with capacity 7,\nan edge from node 8 to node 13 with capacity 13,\nan edge from node 8 to node 9 with capacity 14,\nan edge from node 8 to node 10 with capacity 10,\nan edge from node 9 to node 5 with capacity 5,\nan edge from node 9 to node 11 with capacity 11,\nan edge from node 9 to node 12 with capacity 7,\nan edge from node 10 to node 5 with capacity 15,\nan edge from node 10 to node 14 with capacity 6,\nan edge from node 10 to node 3 with capacity 17,\nan edge from node 10 to node 2 with capacity 17,\nan edge from node 11 to node 6 with capacity 2,\nan edge from node 11 to node 1 with capacity 17,\nan edge from node 11 to node 7 with capacity 20,\nan edge from node 11 to node 13 with capacity 1,\nan edge from node 12 to node 14 with capacity 13,\nan edge from node 12 to node 4 with capacity 20,\nan edge from node 13 to node 5 with capacity 7,\nan edge from node 13 to node 3 with capacity 14,\nan edge from node 13 to node 8 with capacity 17,\nan edge from node 13 to node 10 with capacity 11,\nan edge from node 14 to node 3 with capacity 8,\nan edge from node 14 to node 8 with capacity 14,\nan edge from node 14 to node 16 with capacity 16,\nan edge from node 14 to node 9 with capacity 12,\nan edge from node 14 to node 10 with capacity 15,\nan edge from node 15 to node 6 with capacity 6,\nan edge from node 15 to node 5 with capacity 3,\nan edge from node 15 to node 1 with capacity 7,\nan edge from node 15 to node 8 with capacity 13,\nan edge from node 15 to node 16 with capacity 16,\nan edge from node 15 to node 12 with capacity 18,\nan edge from node 16 to node 14 with capacity 11,\nan edge from node 16 to node 11 with capacity 18,\nan edge from node 16 to node 4 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 1\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 1, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 211, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 9, an edge from node 1 to node 4 with capacity 2, an edge from node 2 to node 1 with capacity 2, an edge from node 2 to node 0 with capacity 4, an edge from node 2 to node 4 with capacity 5, an edge from node 3 to node 0 with capacity 5, an edge from node 3 to node 2 with capacity 3, an edge from node 4 to node 3 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 212, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 1 to node 7 with capacity 3, an edge from node 2 to node 3 with capacity 7, an edge from node 2 to node 4 with capacity 10, an edge from node 3 to node 0 with capacity 5, an edge from node 3 to node 1 with capacity 4, an edge from node 3 to node 8 with capacity 6, an edge from node 4 to node 6 with capacity 10, an edge from node 5 to node 1 with capacity 6, an edge from node 5 to node 7 with capacity 3, an edge from node 7 to node 2 with capacity 7, an edge from node 8 to node 6 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 213, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 10 with capacity 12,\nan edge from node 0 to node 7 with capacity 17,\nan edge from node 0 to node 11 with capacity 17,\nan edge from node 1 to node 8 with capacity 20,\nan edge from node 2 to node 8 with capacity 3,\nan edge from node 2 to node 1 with capacity 1,\nan edge from node 2 to node 7 with capacity 18,\nan edge from node 2 to node 11 with capacity 8,\nan edge from node 3 to node 0 with capacity 9,\nan edge from node 3 to node 4 with capacity 11,\nan edge from node 3 to node 6 with capacity 9,\nan edge from node 4 to node 8 with capacity 10,\nan edge from node 4 to node 2 with capacity 19,\nan edge from node 4 to node 5 with capacity 16,\nan edge from node 5 to node 10 with capacity 12,\nan edge from node 5 to node 8 with capacity 5,\nan edge from node 5 to node 1 with capacity 2,\nan edge from node 5 to node 11 with capacity 6,\nan edge from node 5 to node 3 with capacity 16,\nan edge from node 6 to node 9 with capacity 14,\nan edge from node 6 to node 8 with capacity 17,\nan edge from node 7 to node 6 with capacity 15,\nan edge from node 8 to node 2 with capacity 3,\nan edge from node 8 to node 5 with capacity 20,\nan edge from node 8 to node 4 with capacity 18,\nan edge from node 8 to node 7 with capacity 6,\nan edge from node 8 to node 3 with capacity 6,\nan edge from node 9 to node 0 with capacity 16,\nan edge from node 9 to node 10 with capacity 8,\nan edge from node 9 to node 1 with capacity 20,\nan edge from node 9 to node 11 with capacity 16,\nan edge from node 10 to node 0 with capacity 16,\nan edge from node 10 to node 2 with capacity 6,\nan edge from node 10 to node 5 with capacity 5,\nan edge from node 10 to node 1 with capacity 7.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 0, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 214, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 8 with capacity 13,\nan edge from node 0 to node 9 with capacity 9,\nan edge from node 0 to node 12 with capacity 17,\nan edge from node 0 to node 4 with capacity 5,\nan edge from node 0 to node 7 with capacity 19,\nan edge from node 1 to node 11 with capacity 16,\nan edge from node 2 to node 10 with capacity 8,\nan edge from node 2 to node 0 with capacity 15,\nan edge from node 3 to node 8 with capacity 10,\nan edge from node 3 to node 5 with capacity 18,\nan edge from node 4 to node 12 with capacity 5,\nan edge from node 5 to node 6 with capacity 3,\nan edge from node 5 to node 1 with capacity 19,\nan edge from node 7 to node 2 with capacity 7,\nan edge from node 7 to node 12 with capacity 17,\nan edge from node 7 to node 4 with capacity 1,\nan edge from node 7 to node 5 with capacity 20,\nan edge from node 7 to node 3 with capacity 17,\nan edge from node 7 to node 0 with capacity 17,\nan edge from node 8 to node 1 with capacity 10,\nan edge from node 8 to node 10 with capacity 17,\nan edge from node 8 to node 0 with capacity 3,\nan edge from node 9 to node 5 with capacity 1,\nan edge from node 9 to node 1 with capacity 11,\nan edge from node 9 to node 10 with capacity 5,\nan edge from node 9 to node 11 with capacity 17,\nan edge from node 9 to node 7 with capacity 12,\nan edge from node 10 to node 9 with capacity 14,\nan edge from node 10 to node 5 with capacity 7,\nan edge from node 10 to node 11 with capacity 20,\nan edge from node 11 to node 4 with capacity 6,\nan edge from node 11 to node 6 with capacity 13,\nan edge from node 12 to node 4 with capacity 9,\nan edge from node 12 to node 10 with capacity 15.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 2, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 215, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(1, weight:14), (6, weight:7), (9, weight:8), (8, weight:13)],\nnode1: [(11, weight:11), (6, weight:20), (0, weight:10), (2, weight:6)],\nnode2: [(11, weight:18), (5, weight:14), (7, weight:11), (0, weight:4)],\nnode3: [(1, weight:12), (11, weight:10), (12, weight:9), (6, weight:19), (0, weight:10), (2, weight:9)],\nnode4: [(5, weight:15), (12, weight:4), (0, weight:8)],\nnode5: [(3, weight:17), (12, weight:3), (6, weight:2), (7, weight:1), (4, weight:18), (10, weight:9)],\nnode6: [(3, weight:12), (1, weight:9), (13, weight:18), (5, weight:6), (4, weight:8), (2, weight:13)],\nnode7: [(1, weight:1), (0, weight:7), (14, weight:8)],\nnode8: [(13, weight:14), (0, weight:19), (4, weight:18)],\nnode9: [(5, weight:6), (6, weight:12), (7, weight:1), (4, weight:5), (10, weight:5)],\nnode10: [(14, weight:16), (4, weight:18)],\nnode11: [(3, weight:3), (1, weight:1), (12, weight:15), (4, weight:9), (10, weight:18)],\nnode12: [(13, weight:4), (4, weight:12), (2, weight:5)],\nnode13: [(1, weight:15), (12, weight:11), (14, weight:9), (9, weight:6), (8, weight:5), (10, weight:15)],\nnode14: [(1, weight:7), (11, weight:15), (6, weight:19)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 6\nflow_value, flow_dict = nx.maximum_flow(G, 2, 6, capacity='weight')\nprint(flow_value)\n```"}, {"id": 216, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(3, weight:18), (4, weight:15), (10, weight:18), (11, weight:8)],\nnode1: [(12, weight:5), (14, weight:3), (7, weight:4)],\nnode2: [(9, weight:11), (7, weight:14), (15, weight:10), (11, weight:18)],\nnode3: [(1, weight:11), (12, weight:1), (10, weight:5), (13, weight:6), (5, weight:12)],\nnode4: [(3, weight:12), (0, weight:6), (7, weight:7), (16, weight:12), (5, weight:2)],\nnode5: [(9, weight:6), (14, weight:6), (8, weight:11), (13, weight:12), (15, weight:19)],\nnode6: [(8, weight:6), (15, weight:16), (5, weight:11)],\nnode7: [(0, weight:12), (15, weight:4)],\nnode8: [(1, weight:18), (9, weight:6), (4, weight:12), (17, weight:4), (15, weight:6)],\nnode9: [(12, weight:7), (0, weight:7), (10, weight:9), (16, weight:12), (15, weight:6), (2, weight:13)],\nnode10: [(1, weight:17), (0, weight:12), (4, weight:8), (17, weight:9), (8, weight:10), (13, weight:4)],\nnode11: [(1, weight:10), (0, weight:16), (17, weight:10), (8, weight:11), (2, weight:5), (5, weight:17)],\nnode12: [(16, weight:5), (2, weight:19)],\nnode13: [(6, weight:12), (16, weight:12), (11, weight:1)],\nnode14: [(0, weight:20), (11, weight:4)],\nnode15: [(9, weight:8), (7, weight:20), (16, weight:1), (8, weight:2)],\nnode16: [(12, weight:2), (10, weight:15), (8, weight:11)],\nnode17: [(3, weight:12), (11, weight:6)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 3, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 217, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 5 with capacity 2,\nan edge from node 0 to node 9 with capacity 14,\nan edge from node 0 to node 6 with capacity 1,\nan edge from node 0 to node 11 with capacity 4,\nan edge from node 1 to node 16 with capacity 14,\nan edge from node 1 to node 2 with capacity 12,\nan edge from node 1 to node 9 with capacity 19,\nan edge from node 1 to node 14 with capacity 3,\nan edge from node 1 to node 12 with capacity 1,\nan edge from node 1 to node 6 with capacity 3,\nan edge from node 1 to node 8 with capacity 13,\nan edge from node 1 to node 19 with capacity 11,\nan edge from node 2 to node 3 with capacity 7,\nan edge from node 2 to node 6 with capacity 8,\nan edge from node 2 to node 8 with capacity 8,\nan edge from node 3 to node 6 with capacity 2,\nan edge from node 4 to node 5 with capacity 10,\nan edge from node 4 to node 2 with capacity 8,\nan edge from node 4 to node 10 with capacity 5,\nan edge from node 4 to node 12 with capacity 6,\nan edge from node 4 to node 17 with capacity 5,\nan edge from node 4 to node 1 with capacity 5,\nan edge from node 5 to node 4 with capacity 11,\nan edge from node 5 to node 12 with capacity 8,\nan edge from node 5 to node 17 with capacity 10,\nan edge from node 5 to node 0 with capacity 20,\nan edge from node 6 to node 5 with capacity 3,\nan edge from node 6 to node 4 with capacity 1,\nan edge from node 6 to node 18 with capacity 1,\nan edge from node 6 to node 0 with capacity 13,\nan edge from node 6 to node 15 with capacity 20,\nan edge from node 7 to node 4 with capacity 12,\nan edge from node 7 to node 17 with capacity 16,\nan edge from node 7 to node 8 with capacity 5,\nan edge from node 8 to node 4 with capacity 10,\nan edge from node 8 to node 17 with capacity 9,\nan edge from node 8 to node 18 with capacity 2,\nan edge from node 8 to node 19 with capacity 17,\nan edge from node 9 to node 4 with capacity 13,\nan edge from node 9 to node 3 with capacity 7,\nan edge from node 9 to node 14 with capacity 10,\nan edge from node 9 to node 17 with capacity 8,\nan edge from node 9 to node 15 with capacity 8,\nan edge from node 10 to node 5 with capacity 9,\nan edge from node 10 to node 4 with capacity 20,\nan edge from node 10 to node 3 with capacity 12,\nan edge from node 10 to node 14 with capacity 5,\nan edge from node 10 to node 12 with capacity 7,\nan edge from node 10 to node 1 with capacity 12,\nan edge from node 10 to node 8 with capacity 6,\nan edge from node 10 to node 15 with capacity 16,\nan edge from node 11 to node 2 with capacity 18,\nan edge from node 11 to node 14 with capacity 9,\nan edge from node 11 to node 12 with capacity 13,\nan edge from node 11 to node 0 with capacity 3,\nan edge from node 11 to node 15 with capacity 1,\nan edge from node 11 to node 19 with capacity 7,\nan edge from node 12 to node 14 with capacity 13,\nan edge from node 12 to node 15 with capacity 19,\nan edge from node 13 to node 7 with capacity 9,\nan edge from node 13 to node 9 with capacity 17,\nan edge from node 13 to node 14 with capacity 6,\nan edge from node 13 to node 10 with capacity 8,\nan edge from node 13 to node 6 with capacity 14,\nan edge from node 13 to node 17 with capacity 6,\nan edge from node 13 to node 15 with capacity 14,\nan edge from node 14 to node 5 with capacity 2,\nan edge from node 14 to node 9 with capacity 11,\nan edge from node 14 to node 10 with capacity 4,\nan edge from node 14 to node 12 with capacity 13,\nan edge from node 14 to node 18 with capacity 18,\nan edge from node 14 to node 0 with capacity 16,\nan edge from node 14 to node 19 with capacity 3,\nan edge from node 15 to node 16 with capacity 16,\nan edge from node 15 to node 13 with capacity 2,\nan edge from node 15 to node 0 with capacity 13,\nan edge from node 15 to node 1 with capacity 14,\nan edge from node 16 to node 7 with capacity 19,\nan edge from node 16 to node 10 with capacity 13,\nan edge from node 16 to node 17 with capacity 13,\nan edge from node 16 to node 0 with capacity 13,\nan edge from node 16 to node 11 with capacity 10,\nan edge from node 17 to node 2 with capacity 6,\nan edge from node 17 to node 13 with capacity 3,\nan edge from node 17 to node 1 with capacity 10,\nan edge from node 17 to node 11 with capacity 6,\nan edge from node 18 to node 13 with capacity 6,\nan edge from node 18 to node 0 with capacity 9,\nan edge from node 18 to node 15 with capacity 13,\nan edge from node 19 to node 7 with capacity 11,\nan edge from node 19 to node 2 with capacity 19,\nan edge from node 19 to node 14 with capacity 8,\nan edge from node 19 to node 17 with capacity 19,\nan edge from node 19 to node 1 with capacity 16,\nan edge from node 19 to node 8 with capacity 1.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 9, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 218, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 4 with capacity 9, an edge from node 1 to node 8 with capacity 2, an edge from node 1 to node 5 with capacity 7, an edge from node 2 to node 3 with capacity 4, an edge from node 2 to node 0 with capacity 10, an edge from node 2 to node 9 with capacity 1, an edge from node 3 to node 1 with capacity 3, an edge from node 3 to node 7 with capacity 3, an edge from node 3 to node 5 with capacity 6, an edge from node 4 to node 1 with capacity 3, an edge from node 4 to node 0 with capacity 7, an edge from node 4 to node 8 with capacity 2, an edge from node 5 to node 4 with capacity 10, an edge from node 6 to node 1 with capacity 10, an edge from node 7 to node 2 with capacity 3, an edge from node 8 to node 0 with capacity 1, an edge from node 8 to node 6 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 219, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an edge from node 0 to node 8 with capacity 1, an edge from node 0 to node 6 with capacity 10, an edge from node 0 to node 3 with capacity 1, an edge from node 2 to node 7 with capacity 4, an edge from node 2 to node 6 with capacity 4, an edge from node 3 to node 9 with capacity 10, an edge from node 4 to node 8 with capacity 8, an edge from node 4 to node 5 with capacity 4, an edge from node 5 to node 4 with capacity 8, an edge from node 5 to node 7 with capacity 6, an edge from node 5 to node 3 with capacity 5, an edge from node 7 to node 9 with capacity 4, an edge from node 7 to node 6 with capacity 1, an edge from node 7 to node 3 with capacity 7, an edge from node 8 to node 3 with capacity 6, an edge from node 9 to node 4 with capacity 8.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 6\nflow_value, flow_dict = nx.maximum_flow(G, 0, 6, capacity='weight')\nprint(flow_value)\n```"}, {"id": 220, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 10 with capacity 14,\nan edge from node 0 to node 8 with capacity 13,\nan edge from node 1 to node 0 with capacity 1,\nan edge from node 1 to node 7 with capacity 2,\nan edge from node 3 to node 11 with capacity 18,\nan edge from node 3 to node 5 with capacity 16,\nan edge from node 3 to node 10 with capacity 15,\nan edge from node 3 to node 9 with capacity 15,\nan edge from node 3 to node 8 with capacity 5,\nan edge from node 4 to node 1 with capacity 7,\nan edge from node 4 to node 9 with capacity 15,\nan edge from node 4 to node 7 with capacity 8,\nan edge from node 5 to node 0 with capacity 9,\nan edge from node 5 to node 1 with capacity 4,\nan edge from node 5 to node 10 with capacity 8,\nan edge from node 6 to node 0 with capacity 17,\nan edge from node 6 to node 12 with capacity 17,\nan edge from node 6 to node 4 with capacity 7,\nan edge from node 6 to node 10 with capacity 9,\nan edge from node 6 to node 9 with capacity 1,\nan edge from node 6 to node 8 with capacity 17,\nan edge from node 7 to node 12 with capacity 12,\nan edge from node 7 to node 8 with capacity 18,\nan edge from node 8 to node 5 with capacity 11,\nan edge from node 8 to node 6 with capacity 1,\nan edge from node 8 to node 1 with capacity 6,\nan edge from node 8 to node 4 with capacity 4,\nan edge from node 8 to node 13 with capacity 9,\nan edge from node 9 to node 6 with capacity 11,\nan edge from node 9 to node 12 with capacity 1,\nan edge from node 9 to node 8 with capacity 17,\nan edge from node 10 to node 11 with capacity 17,\nan edge from node 10 to node 3 with capacity 8,\nan edge from node 10 to node 9 with capacity 19,\nan edge from node 11 to node 4 with capacity 1,\nan edge from node 11 to node 10 with capacity 19,\nan edge from node 11 to node 2 with capacity 8,\nan edge from node 12 to node 11 with capacity 14,\nan edge from node 12 to node 10 with capacity 16,\nan edge from node 12 to node 9 with capacity 17,\nan edge from node 12 to node 7 with capacity 17,\nan edge from node 12 to node 13 with capacity 19,\nan edge from node 12 to node 8 with capacity 7,\nan edge from node 13 to node 0 with capacity 15,\nan edge from node 13 to node 5 with capacity 11,\nan edge from node 13 to node 10 with capacity 7,\nan edge from node 13 to node 2 with capacity 1,\nan edge from node 13 to node 8 with capacity 11.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 221, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 3 with capacity 2,\nan edge from node 0 to node 13 with capacity 8,\nan edge from node 0 to node 2 with capacity 20,\nan edge from node 0 to node 10 with capacity 17,\nan edge from node 1 to node 9 with capacity 4,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 2 to node 4 with capacity 16,\nan edge from node 2 to node 14 with capacity 14,\nan edge from node 2 to node 1 with capacity 11,\nan edge from node 2 to node 5 with capacity 18,\nan edge from node 3 to node 2 with capacity 18,\nan edge from node 3 to node 0 with capacity 14,\nan edge from node 3 to node 7 with capacity 6,\nan edge from node 3 to node 9 with capacity 12,\nan edge from node 3 to node 10 with capacity 17,\nan edge from node 4 to node 7 with capacity 1,\nan edge from node 4 to node 11 with capacity 15,\nan edge from node 4 to node 8 with capacity 4,\nan edge from node 5 to node 4 with capacity 17,\nan edge from node 5 to node 11 with capacity 11,\nan edge from node 5 to node 14 with capacity 16,\nan edge from node 5 to node 8 with capacity 5,\nan edge from node 6 to node 8 with capacity 20,\nan edge from node 6 to node 10 with capacity 4,\nan edge from node 6 to node 1 with capacity 13,\nan edge from node 7 to node 8 with capacity 7,\nan edge from node 8 to node 13 with capacity 3,\nan edge from node 8 to node 14 with capacity 5,\nan edge from node 9 to node 3 with capacity 19,\nan edge from node 9 to node 6 with capacity 16,\nan edge from node 9 to node 0 with capacity 14,\nan edge from node 9 to node 5 with capacity 6,\nan edge from node 10 to node 3 with capacity 5,\nan edge from node 10 to node 2 with capacity 3,\nan edge from node 11 to node 3 with capacity 18,\nan edge from node 11 to node 13 with capacity 6,\nan edge from node 11 to node 6 with capacity 13,\nan edge from node 11 to node 0 with capacity 6,\nan edge from node 11 to node 12 with capacity 7,\nan edge from node 11 to node 8 with capacity 3,\nan edge from node 12 to node 2 with capacity 19,\nan edge from node 12 to node 7 with capacity 8,\nan edge from node 12 to node 8 with capacity 20,\nan edge from node 13 to node 0 with capacity 4,\nan edge from node 14 to node 6 with capacity 10,\nan edge from node 14 to node 0 with capacity 9,\nan edge from node 14 to node 11 with capacity 19,\nan edge from node 14 to node 9 with capacity 3,\nan edge from node 14 to node 5 with capacity 12.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 222, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 8 with capacity 3, an edge from node 1 to node 3 with capacity 6, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 4 with capacity 4, an edge from node 2 to node 3 with capacity 6, an edge from node 3 to node 5 with capacity 5, an edge from node 3 to node 6 with capacity 10, an edge from node 4 to node 2 with capacity 2, an edge from node 5 to node 8 with capacity 7, an edge from node 8 to node 4 with capacity 8, an edge from node 8 to node 6 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 223, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 4 with capacity 10, an edge from node 1 to node 4 with capacity 3, an edge from node 1 to node 2 with capacity 9, an edge from node 1 to node 0 with capacity 8, an edge from node 2 to node 1 with capacity 9, an edge from node 2 to node 0 with capacity 5, an edge from node 3 to node 5 with capacity 9, an edge from node 4 to node 2 with capacity 6, an edge from node 5 to node 4 with capacity 2, an edge from node 5 to node 2 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 224, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 15, and the edges are:\nan edge from node 0 to node 8 with capacity 17,\nan edge from node 0 to node 3 with capacity 8,\nan edge from node 0 to node 12 with capacity 1,\nan edge from node 0 to node 2 with capacity 15,\nan edge from node 0 to node 15 with capacity 10,\nan edge from node 1 to node 10 with capacity 9,\nan edge from node 1 to node 4 with capacity 5,\nan edge from node 1 to node 12 with capacity 18,\nan edge from node 1 to node 0 with capacity 19,\nan edge from node 1 to node 11 with capacity 10,\nan edge from node 1 to node 2 with capacity 10,\nan edge from node 2 to node 11 with capacity 4,\nan edge from node 2 to node 14 with capacity 13,\nan edge from node 3 to node 5 with capacity 9,\nan edge from node 3 to node 10 with capacity 3,\nan edge from node 3 to node 12 with capacity 4,\nan edge from node 3 to node 13 with capacity 6,\nan edge from node 3 to node 7 with capacity 3,\nan edge from node 3 to node 11 with capacity 10,\nan edge from node 4 to node 5 with capacity 13,\nan edge from node 4 to node 10 with capacity 14,\nan edge from node 4 to node 11 with capacity 19,\nan edge from node 4 to node 2 with capacity 1,\nan edge from node 4 to node 14 with capacity 13,\nan edge from node 5 to node 2 with capacity 11,\nan edge from node 6 to node 10 with capacity 11,\nan edge from node 7 to node 10 with capacity 12,\nan edge from node 7 to node 3 with capacity 13,\nan edge from node 7 to node 1 with capacity 19,\nan edge from node 7 to node 11 with capacity 11,\nan edge from node 7 to node 14 with capacity 9,\nan edge from node 8 to node 12 with capacity 3,\nan edge from node 8 to node 13 with capacity 20,\nan edge from node 8 to node 2 with capacity 17,\nan edge from node 8 to node 9 with capacity 6,\nan edge from node 8 to node 14 with capacity 13,\nan edge from node 9 to node 12 with capacity 4,\nan edge from node 9 to node 7 with capacity 13,\nan edge from node 9 to node 2 with capacity 9,\nan edge from node 10 to node 6 with capacity 8,\nan edge from node 11 to node 5 with capacity 16,\nan edge from node 12 to node 3 with capacity 12,\nan edge from node 12 to node 4 with capacity 9,\nan edge from node 13 to node 4 with capacity 19,\nan edge from node 13 to node 7 with capacity 9,\nan edge from node 13 to node 1 with capacity 3,\nan edge from node 13 to node 14 with capacity 8,\nan edge from node 14 to node 10 with capacity 8,\nan edge from node 14 to node 13 with capacity 11,\nan edge from node 14 to node 2 with capacity 10,\nan edge from node 15 to node 10 with capacity 9,\nan edge from node 15 to node 12 with capacity 2,\nan edge from node 15 to node 13 with capacity 15,\nan edge from node 15 to node 7 with capacity 12,\nan edge from node 15 to node 11 with capacity 5.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 225, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 2 with capacity 2, an edge from node 1 to node 3 with capacity 3, an edge from node 1 to node 0 with capacity 10, an edge from node 1 to node 4 with capacity 5, an edge from node 2 to node 1 with capacity 9, an edge from node 2 to node 4 with capacity 10, an edge from node 3 to node 0 with capacity 6, an edge from node 4 to node 1 with capacity 8, an edge from node 4 to node 2 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 226, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nan edge from node 0 to node 7 with capacity 3,\nan edge from node 0 to node 14 with capacity 3,\nan edge from node 0 to node 13 with capacity 10,\nan edge from node 0 to node 9 with capacity 17,\nan edge from node 1 to node 6 with capacity 5,\nan edge from node 1 to node 10 with capacity 3,\nan edge from node 1 to node 16 with capacity 3,\nan edge from node 2 to node 14 with capacity 4,\nan edge from node 2 to node 1 with capacity 17,\nan edge from node 2 to node 5 with capacity 9,\nan edge from node 2 to node 17 with capacity 18,\nan edge from node 2 to node 15 with capacity 4,\nan edge from node 2 to node 12 with capacity 12,\nan edge from node 2 to node 8 with capacity 13,\nan edge from node 2 to node 0 with capacity 12,\nan edge from node 3 to node 14 with capacity 3,\nan edge from node 3 to node 1 with capacity 18,\nan edge from node 3 to node 12 with capacity 13,\nan edge from node 3 to node 8 with capacity 4,\nan edge from node 3 to node 16 with capacity 10,\nan edge from node 4 to node 6 with capacity 8,\nan edge from node 4 to node 14 with capacity 20,\nan edge from node 4 to node 3 with capacity 1,\nan edge from node 4 to node 17 with capacity 19,\nan edge from node 4 to node 9 with capacity 3,\nan edge from node 4 to node 16 with capacity 6,\nan edge from node 5 to node 6 with capacity 13,\nan edge from node 5 to node 14 with capacity 11,\nan edge from node 5 to node 15 with capacity 10,\nan edge from node 5 to node 4 with capacity 15,\nan edge from node 5 to node 2 with capacity 17,\nan edge from node 5 to node 0 with capacity 3,\nan edge from node 6 to node 7 with capacity 15,\nan edge from node 6 to node 13 with capacity 11,\nan edge from node 6 to node 1 with capacity 12,\nan edge from node 6 to node 5 with capacity 10,\nan edge from node 6 to node 17 with capacity 20,\nan edge from node 7 to node 3 with capacity 14,\nan edge from node 7 to node 11 with capacity 16,\nan edge from node 7 to node 8 with capacity 6,\nan edge from node 8 to node 13 with capacity 16,\nan edge from node 8 to node 12 with capacity 1,\nan edge from node 8 to node 0 with capacity 11,\nan edge from node 8 to node 16 with capacity 16,\nan edge from node 9 to node 1 with capacity 1,\nan edge from node 9 to node 17 with capacity 9,\nan edge from node 9 to node 10 with capacity 1,\nan edge from node 9 to node 12 with capacity 11,\nan edge from node 9 to node 4 with capacity 6,\nan edge from node 10 to node 1 with capacity 1,\nan edge from node 10 to node 11 with capacity 12,\nan edge from node 10 to node 4 with capacity 7,\nan edge from node 10 to node 0 with capacity 17,\nan edge from node 11 to node 14 with capacity 5,\nan edge from node 11 to node 2 with capacity 1,\nan edge from node 12 to node 14 with capacity 16,\nan edge from node 12 to node 13 with capacity 6,\nan edge from node 12 to node 15 with capacity 16,\nan edge from node 12 to node 2 with capacity 9,\nan edge from node 12 to node 8 with capacity 7,\nan edge from node 13 to node 14 with capacity 18,\nan edge from node 13 to node 2 with capacity 1,\nan edge from node 13 to node 8 with capacity 12,\nan edge from node 13 to node 0 with capacity 12,\nan edge from node 13 to node 16 with capacity 3,\nan edge from node 14 to node 17 with capacity 16,\nan edge from node 14 to node 12 with capacity 4,\nan edge from node 15 to node 1 with capacity 15,\nan edge from node 15 to node 10 with capacity 7,\nan edge from node 15 to node 12 with capacity 1,\nan edge from node 15 to node 0 with capacity 7,\nan edge from node 16 to node 5 with capacity 17,\nan edge from node 16 to node 10 with capacity 15,\nan edge from node 16 to node 9 with capacity 13,\nan edge from node 16 to node 11 with capacity 17,\nan edge from node 16 to node 15 with capacity 13,\nan edge from node 16 to node 2 with capacity 10,\nan edge from node 16 to node 8 with capacity 17,\nan edge from node 17 to node 3 with capacity 2,\nan edge from node 17 to node 9 with capacity 9,\nan edge from node 17 to node 12 with capacity 17,\nan edge from node 17 to node 2 with capacity 19,\nan edge from node 17 to node 16 with capacity 1.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 15\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 4, 15, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 227, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(11, capacity:20), (14, capacity:20), (10, capacity:17), (4, capacity:8), (6, capacity:7)],\nnode1: [(14, capacity:18), (10, capacity:19), (4, capacity:18), (6, capacity:15), (2, capacity:14), (12, capacity:9)],\nnode2: [(7, capacity:17), (8, capacity:8), (1, capacity:7), (9, capacity:14)],\nnode3: [(13, capacity:15), (14, capacity:17), (4, capacity:20), (0, capacity:3), (5, capacity:10), (12, capacity:1)],\nnode4: [(8, capacity:18), (5, capacity:1)],\nnode5: [(11, capacity:2), (13, capacity:9), (3, capacity:20), (0, capacity:9), (1, capacity:11)],\nnode6: [(10, capacity:12), (0, capacity:11), (1, capacity:17)],\nnode7: [(13, capacity:13), (10, capacity:13), (4, capacity:20), (9, capacity:3)],\nnode8: [(11, capacity:10), (10, capacity:7), (4, capacity:20), (1, capacity:19), (9, capacity:8)],\nnode9: [(11, capacity:10), (13, capacity:19), (14, capacity:1), (7, capacity:19), (8, capacity:2)],\nnode10: [(13, capacity:8), (8, capacity:17), (0, capacity:3), (12, capacity:5)],\nnode11: [(4, capacity:13), (3, capacity:13), (1, capacity:20), (12, capacity:16)],\nnode12: [(13, capacity:11), (6, capacity:13), (2, capacity:12), (5, capacity:7)],\nnode13: [(14, capacity:11), (5, capacity:15)],\nnode14: [(13, capacity:5), (0, capacity:5), (5, capacity:17), (12, capacity:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(int(node), int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 4, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 228, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(7, weight:12), (18, weight:17), (8, weight:10), (15, weight:5), (2, weight:17), (14, weight:4)],\nnode1: [(7, weight:2), (10, weight:7), (18, weight:7), (15, weight:9), (14, weight:4)],\nnode2: [(9, weight:18), (7, weight:16), (0, weight:13), (18, weight:1)],\nnode3: [(19, weight:9), (8, weight:20)],\nnode4: [(0, weight:2), (15, weight:9), (14, weight:11)],\nnode5: [(12, weight:1), (19, weight:14), (2, weight:20)],\nnode6: [(3, weight:4), (7, weight:2), (12, weight:3), (19, weight:15), (10, weight:11), (4, weight:4), (14, weight:20)],\nnode7: [(19, weight:18), (0, weight:1), (5, weight:6), (2, weight:1)],\nnode8: [(7, weight:7), (12, weight:19), (6, weight:4), (10, weight:10), (0, weight:4), (5, weight:2), (1, weight:9), (14, weight:11)],\nnode9: [(3, weight:1), (19, weight:7), (1, weight:5), (14, weight:1)],\nnode10: [(19, weight:4), (6, weight:6), (5, weight:15), (15, weight:11), (13, weight:17), (11, weight:5)],\nnode11: [(3, weight:18), (7, weight:19), (19, weight:8), (18, weight:4), (8, weight:19), (5, weight:3), (13, weight:13), (14, weight:11)],\nnode12: [(7, weight:4), (19, weight:3), (16, weight:17), (17, weight:13)],\nnode13: [(12, weight:17), (10, weight:16), (18, weight:15), (15, weight:3), (2, weight:6), (16, weight:6), (14, weight:1)],\nnode14: [(12, weight:11), (6, weight:6), (0, weight:9), (2, weight:11), (4, weight:3), (17, weight:18)],\nnode15: [(6, weight:5), (11, weight:2), (14, weight:1)],\nnode16: [(10, weight:4), (18, weight:16), (15, weight:16), (14, weight:8)],\nnode17: [(9, weight:3), (10, weight:8), (0, weight:18), (18, weight:4), (5, weight:20), (15, weight:4), (1, weight:16), (11, weight:3), (14, weight:6)],\nnode18: [(9, weight:15), (3, weight:17), (10, weight:12), (8, weight:15)],\nnode19: [(3, weight:13), (2, weight:14), (11, weight:14)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 16 to node 10\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 16, 10, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 229, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 3 with capacity 4,\nan edge from node 0 to node 5 with capacity 6,\nan edge from node 1 to node 6 with capacity 9,\nan edge from node 1 to node 2 with capacity 17,\nan edge from node 1 to node 10 with capacity 3,\nan edge from node 2 to node 3 with capacity 12,\nan edge from node 2 to node 11 with capacity 17,\nan edge from node 2 to node 4 with capacity 14,\nan edge from node 3 to node 2 with capacity 9,\nan edge from node 3 to node 1 with capacity 5,\nan edge from node 3 to node 8 with capacity 8,\nan edge from node 3 to node 4 with capacity 1,\nan edge from node 4 to node 7 with capacity 12,\nan edge from node 4 to node 2 with capacity 10,\nan edge from node 4 to node 3 with capacity 12,\nan edge from node 4 to node 5 with capacity 20,\nan edge from node 5 to node 9 with capacity 17,\nan edge from node 5 to node 2 with capacity 5,\nan edge from node 5 to node 3 with capacity 6,\nan edge from node 5 to node 8 with capacity 17,\nan edge from node 5 to node 10 with capacity 10,\nan edge from node 6 to node 7 with capacity 20,\nan edge from node 6 to node 0 with capacity 19,\nan edge from node 6 to node 10 with capacity 10,\nan edge from node 7 to node 2 with capacity 20,\nan edge from node 8 to node 5 with capacity 10,\nan edge from node 8 to node 4 with capacity 12,\nan edge from node 9 to node 7 with capacity 13,\nan edge from node 9 to node 6 with capacity 6,\nan edge from node 9 to node 0 with capacity 17,\nan edge from node 10 to node 1 with capacity 16,\nan edge from node 10 to node 5 with capacity 19,\nan edge from node 11 to node 0 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 230, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(2, capacity:3), (6, capacity:12)],\nnode1: [(5, capacity:18)],\nnode2: [(5, capacity:13)],\nnode3: [(0, capacity:3), (10, capacity:1)],\nnode4: [(10, capacity:12)],\nnode5: [(2, capacity:11), (8, capacity:5), (6, capacity:4), (10, capacity:11), (1, capacity:20), (11, capacity:14)],\nnode6: [(0, capacity:9), (8, capacity:14), (4, capacity:6), (5, capacity:6)],\nnode7: [(8, capacity:16)],\nnode8: [(0, capacity:4), (2, capacity:12), (6, capacity:4), (1, capacity:9), (4, capacity:10), (11, capacity:2), (5, capacity:20)],\nnode9: [(11, capacity:14)],\nnode10: [(1, capacity:1), (4, capacity:1)],\nnode11: [(6, capacity:10), (3, capacity:4), (1, capacity:17)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='capacity')\nprint(flow_value)\n```"}, {"id": 231, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 2 to node 5 with capacity 9, an edge from node 2 to node 0 with capacity 6, an edge from node 2 to node 3 with capacity 5, an edge from node 3 to node 1 with capacity 8, an edge from node 3 to node 0 with capacity 5, an edge from node 4 to node 5 with capacity 4, an edge from node 4 to node 0 with capacity 3, an edge from node 4 to node 3 with capacity 9, an edge from node 5 to node 2 with capacity 9, an edge from node 5 to node 3 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 5, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 232, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 9, and the edges are:\nan edge from node 0 to node 1 with capacity 7,\nan edge from node 0 to node 2 with capacity 6,\nan edge from node 0 to node 3 with capacity 5,\nan edge from node 1 to node 0 with capacity 4,\nan edge from node 1 to node 7 with capacity 10,\nan edge from node 2 to node 7 with capacity 2,\nan edge from node 2 to node 3 with capacity 2,\nan edge from node 3 to node 1 with capacity 1,\nan edge from node 3 to node 2 with capacity 4,\nan edge from node 3 to node 0 with capacity 4,\nan edge from node 3 to node 5 with capacity 9,\nan edge from node 4 to node 5 with capacity 10,\nan edge from node 5 to node 0 with capacity 2,\nan edge from node 5 to node 3 with capacity 2,\nan edge from node 6 to node 1 with capacity 8,\nan edge from node 6 to node 0 with capacity 9,\nan edge from node 7 to node 9 with capacity 4,\nan edge from node 8 to node 0 with capacity 10,\nan edge from node 8 to node 7 with capacity 6,\nan edge from node 8 to node 5 with capacity 9,\nan edge from node 8 to node 6 with capacity 10,\nan edge from node 9 to node 2 with capacity 6,\nan edge from node 9 to node 0 with capacity 4,\nan edge from node 9 to node 4 with capacity 1,\nan edge from node 9 to node 5 with capacity 4,\nan edge from node 9 to node 8 with capacity 2.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 233, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 4 with capacity 7, an edge from node 0 to node 3 with capacity 6, an edge from node 2 to node 7 with capacity 8, an edge from node 2 to node 8 with capacity 2, an edge from node 2 to node 1 with capacity 6, an edge from node 3 to node 8 with capacity 9, an edge from node 3 to node 1 with capacity 3, an edge from node 5 to node 2 with capacity 6, an edge from node 5 to node 4 with capacity 7, an edge from node 5 to node 3 with capacity 5, an edge from node 6 to node 3 with capacity 10, an edge from node 7 to node 2 with capacity 6, an edge from node 7 to node 4 with capacity 1, an edge from node 7 to node 1 with capacity 6, an edge from node 8 to node 4 with capacity 7, an edge from node 8 to node 0 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 234, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(16, weight:2), (15, weight:10), (8, weight:10)],\nnode1: [(16, weight:2), (14, weight:1), (2, weight:11), (11, weight:19), (12, weight:3), (4, weight:18)],\nnode2: [(10, weight:14), (9, weight:10), (4, weight:4)],\nnode3: [(5, weight:13), (11, weight:12), (0, weight:7), (15, weight:6), (12, weight:18)],\nnode4: [(2, weight:16), (15, weight:18)],\nnode5: [(7, weight:2), (16, weight:20), (12, weight:7)],\nnode6: [(7, weight:15), (3, weight:10)],\nnode7: [(10, weight:7), (6, weight:6)],\nnode8: [(7, weight:3), (14, weight:11), (9, weight:4), (2, weight:10), (1, weight:12)],\nnode9: [(8, weight:5)],\nnode10: [(5, weight:17), (13, weight:1), (12, weight:10), (1, weight:4)],\nnode11: [(5, weight:15), (2, weight:12), (1, weight:18)],\nnode12: [(7, weight:12), (10, weight:8), (5, weight:4), (0, weight:20), (8, weight:17), (4, weight:17)],\nnode13: [(3, weight:9), (2, weight:13), (11, weight:7), (1, weight:7)],\nnode14: [(16, weight:19), (5, weight:7), (11, weight:4), (6, weight:4), (8, weight:3)],\nnode15: [(10, weight:10), (3, weight:5), (13, weight:14), (2, weight:15), (12, weight:6)],\nnode16: [(14, weight:17), (8, weight:11), (4, weight:3)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 12 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 12, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 235, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(6, weight:9), (10, weight:5), (8, weight:7), (13, weight:11), (17, weight:19), (15, weight:6), (4, weight:10)],\nnode1: [(11, weight:14), (4, weight:14)],\nnode2: [(16, weight:2), (17, weight:9), (12, weight:9), (14, weight:3)],\nnode3: [(11, weight:6), (9, weight:15), (17, weight:17), (0, weight:7), (1, weight:4)],\nnode4: [(11, weight:6), (9, weight:1)],\nnode5: [(6, weight:18), (11, weight:19), (12, weight:8), (14, weight:1)],\nnode6: [(8, weight:20), (9, weight:10), (17, weight:4), (3, weight:13), (4, weight:9)],\nnode7: [(11, weight:20), (13, weight:5), (17, weight:17), (1, weight:12)],\nnode8: [(6, weight:17), (11, weight:10), (9, weight:5), (3, weight:14), (15, weight:19), (12, weight:13), (5, weight:15), (1, weight:2)],\nnode9: [(12, weight:3), (4, weight:13)],\nnode10: [(7, weight:10), (9, weight:2), (5, weight:14), (1, weight:1), (14, weight:13)],\nnode11: [(2, weight:12), (15, weight:12), (14, weight:14)],\nnode12: [(6, weight:17), (17, weight:18), (0, weight:6), (5, weight:19), (4, weight:3), (14, weight:12)],\nnode13: [(17, weight:8), (12, weight:3), (5, weight:12)],\nnode14: [(7, weight:15), (17, weight:1), (3, weight:16), (15, weight:6)],\nnode15: [(13, weight:20), (2, weight:3), (4, weight:14)],\nnode16: [(7, weight:5), (3, weight:14), (0, weight:10), (4, weight:3)],\nnode17: [(11, weight:13)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 10, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 236, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 1 to node 3 with capacity 13,\nan edge from node 1 to node 0 with capacity 5,\nan edge from node 1 to node 13 with capacity 18,\nan edge from node 1 to node 10 with capacity 11,\nan edge from node 1 to node 5 with capacity 16,\nan edge from node 1 to node 2 with capacity 18,\nan edge from node 2 to node 8 with capacity 20,\nan edge from node 2 to node 1 with capacity 15,\nan edge from node 2 to node 5 with capacity 1,\nan edge from node 3 to node 6 with capacity 20,\nan edge from node 3 to node 11 with capacity 19,\nan edge from node 4 to node 12 with capacity 14,\nan edge from node 4 to node 1 with capacity 14,\nan edge from node 5 to node 14 with capacity 4,\nan edge from node 5 to node 9 with capacity 20,\nan edge from node 5 to node 7 with capacity 1,\nan edge from node 5 to node 0 with capacity 16,\nan edge from node 5 to node 2 with capacity 17,\nan edge from node 6 to node 9 with capacity 1,\nan edge from node 8 to node 7 with capacity 15,\nan edge from node 8 to node 3 with capacity 2,\nan edge from node 8 to node 0 with capacity 3,\nan edge from node 9 to node 12 with capacity 12,\nan edge from node 9 to node 5 with capacity 13,\nan edge from node 10 to node 6 with capacity 9,\nan edge from node 10 to node 0 with capacity 5,\nan edge from node 10 to node 12 with capacity 7,\nan edge from node 10 to node 11 with capacity 14,\nan edge from node 11 to node 6 with capacity 20,\nan edge from node 11 to node 12 with capacity 17,\nan edge from node 12 to node 7 with capacity 12,\nan edge from node 12 to node 0 with capacity 11,\nan edge from node 12 to node 13 with capacity 10,\nan edge from node 12 to node 1 with capacity 15,\nan edge from node 12 to node 4 with capacity 20,\nan edge from node 13 to node 6 with capacity 9,\nan edge from node 13 to node 8 with capacity 17,\nan edge from node 13 to node 0 with capacity 16,\nan edge from node 13 to node 10 with capacity 16,\nan edge from node 13 to node 2 with capacity 13,\nan edge from node 13 to node 11 with capacity 3,\nan edge from node 14 to node 3 with capacity 1,\nan edge from node 14 to node 4 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 7\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 9, 7, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 237, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 1 to node 4 with capacity 3, an edge from node 2 to node 0 with capacity 8, an edge from node 3 to node 7 with capacity 2, an edge from node 3 to node 2 with capacity 5, an edge from node 5 to node 7 with capacity 5, an edge from node 5 to node 3 with capacity 3, an edge from node 6 to node 8 with capacity 8, an edge from node 7 to node 5 with capacity 4, an edge from node 7 to node 0 with capacity 7, an edge from node 8 to node 1 with capacity 5, an edge from node 8 to node 4 with capacity 6, an edge from node 8 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 238, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(17, weight:20), (18, weight:16), (8, weight:6), (6, weight:6), (7, weight:10)],\nnode1: [(4, weight:20), (10, weight:1), (9, weight:2), (2, weight:14), (7, weight:13)],\nnode2: [(1, weight:8), (14, weight:17), (15, weight:7)],\nnode3: [(1, weight:16), (14, weight:5), (11, weight:3)],\nnode4: [(1, weight:4), (14, weight:17), (3, weight:12), (15, weight:5)],\nnode5: [(16, weight:9), (12, weight:13)],\nnode6: [(17, weight:11), (16, weight:20), (14, weight:14), (10, weight:5), (9, weight:3), (18, weight:11), (11, weight:12), (12, weight:5)],\nnode7: [(17, weight:16), (16, weight:14), (4, weight:3), (14, weight:7), (8, weight:13), (6, weight:3), (15, weight:2)],\nnode8: [(17, weight:15), (10, weight:11), (3, weight:1), (2, weight:10), (13, weight:13), (12, weight:2), (15, weight:11)],\nnode9: [(17, weight:7), (16, weight:12), (4, weight:13), (7, weight:10)],\nnode10: [(1, weight:5), (17, weight:11), (9, weight:13), (13, weight:20), (7, weight:5), (15, weight:17)],\nnode11: [(8, weight:8), (5, weight:6)],\nnode12: [(1, weight:17), (3, weight:15), (2, weight:7)],\nnode13: [(10, weight:8), (3, weight:17), (2, weight:11), (11, weight:14), (7, weight:9), (0, weight:19)],\nnode14: [(3, weight:9), (2, weight:2), (8, weight:17), (5, weight:10), (12, weight:16)],\nnode15: [(17, weight:5), (10, weight:6), (9, weight:20), (3, weight:12), (11, weight:7), (12, weight:7), (0, weight:9)],\nnode16: [(17, weight:12), (14, weight:18), (3, weight:4), (18, weight:2), (2, weight:5), (8, weight:4), (0, weight:1)],\nnode17: [(6, weight:5), (11, weight:10), (5, weight:17), (15, weight:8)],\nnode18: [(1, weight:9), (16, weight:11), (14, weight:6), (10, weight:11), (8, weight:13), (6, weight:17)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 5, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 239, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an edge from node 0 to node 2 with capacity 2, an edge from node 0 to node 3 with capacity 1, an edge from node 0 to node 6 with capacity 10, an edge from node 0 to node 5 with capacity 8, an edge from node 1 to node 2 with capacity 1, an edge from node 1 to node 0 with capacity 6, an edge from node 1 to node 6 with capacity 7, an edge from node 2 to node 3 with capacity 7, an edge from node 2 to node 5 with capacity 4, an edge from node 3 to node 5 with capacity 1, an edge from node 3 to node 4 with capacity 7, an edge from node 4 to node 2 with capacity 5, an edge from node 4 to node 1 with capacity 6, an edge from node 4 to node 0 with capacity 4, an edge from node 4 to node 6 with capacity 9, an edge from node 5 to node 1 with capacity 9, an edge from node 5 to node 6 with capacity 6, an edge from node 6 to node 5 with capacity 6, an edge from node 6 to node 4 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 240, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 1 with capacity 5, an edge from node 0 to node 4 with capacity 1, an edge from node 1 to node 4 with capacity 5, an edge from node 2 to node 5 with capacity 7, an edge from node 2 to node 4 with capacity 4, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 2 with capacity 2, an edge from node 3 to node 0 with capacity 10, an edge from node 4 to node 5 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 241, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 9 with capacity 10, an edge from node 0 to node 1 with capacity 7, an edge from node 1 to node 4 with capacity 1, an edge from node 2 to node 1 with capacity 10, an edge from node 3 to node 4 with capacity 3, an edge from node 4 to node 3 with capacity 10, an edge from node 5 to node 8 with capacity 3, an edge from node 5 to node 3 with capacity 2, an edge from node 6 to node 5 with capacity 5, an edge from node 6 to node 2 with capacity 5, an edge from node 7 to node 2 with capacity 10, an edge from node 7 to node 8 with capacity 10, an edge from node 8 to node 5 with capacity 3, an edge from node 8 to node 2 with capacity 4, an edge from node 8 to node 7 with capacity 5, an edge from node 8 to node 3 with capacity 5, an edge from node 9 to node 5 with capacity 2, an edge from node 9 to node 1 with capacity 10, an edge from node 9 to node 3 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 4\nflow_value, flow_dict = nx.maximum_flow(G, 0, 4, capacity='weight')\nprint(flow_value)\n```"}, {"id": 242, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 8 with capacity 9, an edge from node 1 to node 7 with capacity 7, an edge from node 2 to node 6 with capacity 2, an edge from node 2 to node 0 with capacity 9, an edge from node 4 to node 3 with capacity 9, an edge from node 6 to node 8 with capacity 7, an edge from node 6 to node 0 with capacity 10, an edge from node 7 to node 1 with capacity 6, an edge from node 7 to node 2 with capacity 5, an edge from node 8 to node 5 with capacity 4, an edge from node 8 to node 3 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 243, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(13, weight:14), (7, weight:15)],\nnode1: [(4, weight:11), (16, weight:18)],\nnode2: [(11, weight:19), (7, weight:5), (9, weight:6), (0, weight:4)],\nnode3: [(13, weight:2), (4, weight:3), (9, weight:18), (0, weight:15), (16, weight:17), (5, weight:17), (12, weight:15)],\nnode4: [(13, weight:10), (1, weight:1), (9, weight:20), (5, weight:16), (14, weight:8)],\nnode5: [(13, weight:16), (1, weight:4), (10, weight:9), (9, weight:6), (14, weight:12), (12, weight:18)],\nnode6: [(11, weight:8), (8, weight:11), (3, weight:5), (0, weight:7), (15, weight:9), (12, weight:20)],\nnode7: [(11, weight:13), (9, weight:17), (3, weight:5), (15, weight:13), (16, weight:16), (5, weight:3), (14, weight:11)],\nnode8: [(11, weight:17), (9, weight:16), (6, weight:14), (2, weight:12), (3, weight:15), (14, weight:14)],\nnode9: [(13, weight:17), (4, weight:16), (0, weight:13)],\nnode10: [(1, weight:8)],\nnode11: [(8, weight:15), (15, weight:11), (14, weight:10), (12, weight:8)],\nnode12: [(11, weight:4), (9, weight:14), (3, weight:9), (14, weight:4)],\nnode13: [(10, weight:11), (4, weight:16), (15, weight:8), (12, weight:20)],\nnode14: [(10, weight:1), (15, weight:3), (16, weight:19)],\nnode15: [(4, weight:3), (6, weight:5), (3, weight:7), (0, weight:8)],\nnode16: [(7, weight:19), (6, weight:15), (3, weight:13), (0, weight:20), (15, weight:15), (5, weight:6)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 1, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 244, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 3 with capacity 18,\nan edge from node 0 to node 6 with capacity 9,\nan edge from node 0 to node 8 with capacity 4,\nan edge from node 0 to node 1 with capacity 18,\nan edge from node 0 to node 7 with capacity 4,\nan edge from node 0 to node 4 with capacity 5,\nan edge from node 0 to node 10 with capacity 20,\nan edge from node 1 to node 2 with capacity 8,\nan edge from node 2 to node 6 with capacity 4,\nan edge from node 2 to node 8 with capacity 3,\nan edge from node 2 to node 1 with capacity 19,\nan edge from node 2 to node 9 with capacity 11,\nan edge from node 2 to node 10 with capacity 5,\nan edge from node 3 to node 8 with capacity 20,\nan edge from node 3 to node 7 with capacity 16,\nan edge from node 3 to node 4 with capacity 8,\nan edge from node 4 to node 2 with capacity 18,\nan edge from node 4 to node 7 with capacity 2,\nan edge from node 5 to node 2 with capacity 5,\nan edge from node 5 to node 9 with capacity 15,\nan edge from node 6 to node 7 with capacity 20,\nan edge from node 6 to node 4 with capacity 3,\nan edge from node 6 to node 10 with capacity 19,\nan edge from node 7 to node 3 with capacity 10,\nan edge from node 7 to node 4 with capacity 9,\nan edge from node 8 to node 2 with capacity 11,\nan edge from node 8 to node 4 with capacity 16,\nan edge from node 9 to node 0 with capacity 19,\nan edge from node 9 to node 3 with capacity 17,\nan edge from node 9 to node 8 with capacity 12,\nan edge from node 9 to node 2 with capacity 3,\nan edge from node 10 to node 9 with capacity 11.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 245, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 5 with capacity 9, an edge from node 0 to node 6 with capacity 3, an edge from node 1 to node 3 with capacity 10, an edge from node 2 to node 5 with capacity 10, an edge from node 2 to node 6 with capacity 3, an edge from node 3 to node 6 with capacity 9, an edge from node 5 to node 1 with capacity 8, an edge from node 6 to node 5 with capacity 4, an edge from node 6 to node 3 with capacity 6, an edge from node 6 to node 7 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 246, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(10, capacity:8), (3, capacity:20), (12, capacity:12), (2, capacity:1), (6, capacity:9)],\nnode1: [(3, capacity:15), (5, capacity:20), (8, capacity:9), (0, capacity:1), (6, capacity:12)],\nnode2: [(5, capacity:10), (11, capacity:17), (1, capacity:11), (8, capacity:17), (14, capacity:7), (6, capacity:3)],\nnode3: [(15, capacity:9), (11, capacity:15), (6, capacity:19)],\nnode4: [(10, capacity:18), (3, capacity:14), (11, capacity:15), (13, capacity:14), (6, capacity:3)],\nnode5: [(11, capacity:18), (8, capacity:9), (13, capacity:2), (0, capacity:17)],\nnode6: [(4, capacity:19), (15, capacity:11), (7, capacity:1), (1, capacity:15)],\nnode7: [(13, capacity:14)],\nnode8: [(9, capacity:5), (10, capacity:12), (3, capacity:9), (11, capacity:9), (13, capacity:17), (0, capacity:5), (6, capacity:5)],\nnode9: [(4, capacity:3), (3, capacity:13), (5, capacity:7), (7, capacity:18)],\nnode10: [(3, capacity:7), (15, capacity:19), (8, capacity:10)],\nnode11: [(3, capacity:20), (2, capacity:12), (0, capacity:16)],\nnode12: [(4, capacity:16), (5, capacity:11), (11, capacity:15), (8, capacity:3), (2, capacity:8), (14, capacity:13)],\nnode13: [(3, capacity:6), (7, capacity:5), (8, capacity:2)],\nnode14: [(10, capacity:12), (5, capacity:17), (8, capacity:19)],\nnode15: [(5, capacity:8), (1, capacity:5), (2, capacity:9)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), capacity:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), capacity=int(weight))\n\n# Calculate maximum flow\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 5, 12, capacity='capacity')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 247, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 16, and the edges are:\nan edge from node 0 to node 7 with capacity 5,\nan edge from node 0 to node 8 with capacity 16,\nan edge from node 1 to node 0 with capacity 3,\nan edge from node 2 to node 15 with capacity 9,\nan edge from node 2 to node 11 with capacity 15,\nan edge from node 2 to node 5 with capacity 16,\nan edge from node 3 to node 16 with capacity 14,\nan edge from node 3 to node 14 with capacity 18,\nan edge from node 3 to node 13 with capacity 17,\nan edge from node 3 to node 7 with capacity 18,\nan edge from node 3 to node 1 with capacity 15,\nan edge from node 4 to node 3 with capacity 20,\nan edge from node 4 to node 2 with capacity 18,\nan edge from node 4 to node 12 with capacity 16,\nan edge from node 4 to node 8 with capacity 10,\nan edge from node 5 to node 3 with capacity 3,\nan edge from node 5 to node 15 with capacity 20,\nan edge from node 5 to node 2 with capacity 9,\nan edge from node 5 to node 6 with capacity 1,\nan edge from node 6 to node 10 with capacity 20,\nan edge from node 6 to node 4 with capacity 18,\nan edge from node 7 to node 9 with capacity 7,\nan edge from node 7 to node 14 with capacity 6,\nan edge from node 7 to node 1 with capacity 11,\nan edge from node 8 to node 11 with capacity 7,\nan edge from node 8 to node 14 with capacity 11,\nan edge from node 9 to node 3 with capacity 16,\nan edge from node 9 to node 16 with capacity 8,\nan edge from node 9 to node 13 with capacity 12,\nan edge from node 9 to node 4 with capacity 20,\nan edge from node 10 to node 2 with capacity 8,\nan edge from node 10 to node 11 with capacity 11,\nan edge from node 10 to node 4 with capacity 6,\nan edge from node 10 to node 0 with capacity 6,\nan edge from node 10 to node 8 with capacity 13,\nan edge from node 11 to node 16 with capacity 15,\nan edge from node 11 to node 14 with capacity 6,\nan edge from node 12 to node 16 with capacity 16,\nan edge from node 13 to node 9 with capacity 10,\nan edge from node 13 to node 2 with capacity 17,\nan edge from node 13 to node 11 with capacity 16,\nan edge from node 13 to node 7 with capacity 9,\nan edge from node 14 to node 9 with capacity 14,\nan edge from node 14 to node 11 with capacity 5,\nan edge from node 14 to node 13 with capacity 8,\nan edge from node 14 to node 4 with capacity 3,\nan edge from node 15 to node 3 with capacity 5,\nan edge from node 15 to node 13 with capacity 10,\nan edge from node 15 to node 12 with capacity 18,\nan edge from node 16 to node 3 with capacity 19,\nan edge from node 16 to node 9 with capacity 16,\nan edge from node 16 to node 14 with capacity 13,\nan edge from node 16 to node 13 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 248, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 1 with capacity 15,\nan edge from node 0 to node 8 with capacity 19,\nan edge from node 0 to node 3 with capacity 3,\nan edge from node 0 to node 9 with capacity 5,\nan edge from node 0 to node 2 with capacity 5,\nan edge from node 1 to node 10 with capacity 4,\nan edge from node 2 to node 5 with capacity 4,\nan edge from node 3 to node 6 with capacity 6,\nan edge from node 3 to node 8 with capacity 20,\nan edge from node 3 to node 5 with capacity 8,\nan edge from node 4 to node 8 with capacity 14,\nan edge from node 4 to node 2 with capacity 18,\nan edge from node 5 to node 0 with capacity 13,\nan edge from node 5 to node 6 with capacity 13,\nan edge from node 6 to node 8 with capacity 1,\nan edge from node 6 to node 9 with capacity 18,\nan edge from node 7 to node 6 with capacity 15,\nan edge from node 7 to node 8 with capacity 9,\nan edge from node 7 to node 5 with capacity 12,\nan edge from node 8 to node 1 with capacity 20,\nan edge from node 9 to node 0 with capacity 7,\nan edge from node 9 to node 7 with capacity 17,\nan edge from node 9 to node 8 with capacity 15,\nan edge from node 9 to node 4 with capacity 8,\nan edge from node 9 to node 5 with capacity 15,\nan edge from node 9 to node 2 with capacity 19,\nan edge from node 9 to node 10 with capacity 19,\nan edge from node 10 to node 6 with capacity 12,\nan edge from node 10 to node 3 with capacity 3,\nan edge from node 10 to node 5 with capacity 20,\nan edge from node 10 to node 2 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 10\nflow_value, flow_dict = nx.maximum_flow(G, 3, 10, capacity='weight')\nprint(flow_value)\n```"}, {"id": 249, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(9, weight:5), (2, weight:17), (15, weight:7), (1, weight:9), (3, weight:19), (7, weight:18), (10, weight:8)],\nnode1: [(2, weight:12), (15, weight:20)],\nnode2: [(8, weight:7), (0, weight:17), (9, weight:6), (6, weight:15), (3, weight:17), (7, weight:13), (12, weight:12)],\nnode3: [(14, weight:13), (15, weight:10), (4, weight:5), (10, weight:10)],\nnode4: [(8, weight:11), (9, weight:2), (2, weight:15), (3, weight:6), (7, weight:5)],\nnode5: [(14, weight:13), (15, weight:15), (11, weight:17), (7, weight:7), (13, weight:20)],\nnode6: [(5, weight:6), (9, weight:1), (11, weight:20), (12, weight:16)],\nnode7: [(5, weight:15), (14, weight:7)],\nnode8: [(1, weight:15), (11, weight:6), (13, weight:12)],\nnode9: [(0, weight:3), (6, weight:16), (13, weight:5), (12, weight:17)],\nnode10: [(4, weight:19), (3, weight:14), (12, weight:12)],\nnode11: [(5, weight:6), (14, weight:1), (9, weight:6), (2, weight:19), (7, weight:6), (12, weight:15)],\nnode12: [(5, weight:11), (6, weight:8), (15, weight:7), (11, weight:1), (13, weight:15)],\nnode13: [(14, weight:7), (15, weight:10), (3, weight:2), (11, weight:16), (7, weight:4), (12, weight:16)],\nnode14: [(0, weight:2), (15, weight:2), (3, weight:6), (7, weight:3), (13, weight:12), (12, weight:15)],\nnode15: [(14, weight:9), (1, weight:16), (7, weight:16)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+)\\/weight:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 12 to node 8\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 12, 8, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 250, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 1 with capacity 15,\nan edge from node 0 to node 7 with capacity 19,\nan edge from node 0 to node 3 with capacity 18,\nan edge from node 0 to node 4 with capacity 14,\nan edge from node 1 to node 12 with capacity 5,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 0 with capacity 16,\nan edge from node 1 to node 4 with capacity 20,\nan edge from node 2 to node 3 with capacity 10,\nan edge from node 2 to node 0 with capacity 15,\nan edge from node 3 to node 11 with capacity 5,\nan edge from node 3 to node 8 with capacity 17,\nan edge from node 4 to node 12 with capacity 14,\nan edge from node 4 to node 11 with capacity 20,\nan edge from node 4 to node 0 with capacity 16,\nan edge from node 4 to node 14 with capacity 17,\nan edge from node 5 to node 6 with capacity 6,\nan edge from node 5 to node 9 with capacity 16,\nan edge from node 5 to node 7 with capacity 11,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 5 to node 4 with capacity 19,\nan edge from node 6 to node 1 with capacity 9,\nan edge from node 6 to node 11 with capacity 6,\nan edge from node 6 to node 10 with capacity 18,\nan edge from node 6 to node 0 with capacity 7,\nan edge from node 7 to node 9 with capacity 13,\nan edge from node 7 to node 5 with capacity 17,\nan edge from node 8 to node 9 with capacity 19,\nan edge from node 8 to node 0 with capacity 4,\nan edge from node 8 to node 14 with capacity 17,\nan edge from node 9 to node 12 with capacity 7,\nan edge from node 10 to node 9 with capacity 15,\nan edge from node 10 to node 5 with capacity 7,\nan edge from node 10 to node 3 with capacity 12,\nan edge from node 11 to node 12 with capacity 9,\nan edge from node 11 to node 9 with capacity 10,\nan edge from node 11 to node 5 with capacity 1,\nan edge from node 11 to node 8 with capacity 11,\nan edge from node 11 to node 3 with capacity 17,\nan edge from node 11 to node 2 with capacity 8,\nan edge from node 12 to node 1 with capacity 12,\nan edge from node 12 to node 13 with capacity 5,\nan edge from node 12 to node 8 with capacity 10,\nan edge from node 12 to node 0 with capacity 5,\nan edge from node 12 to node 4 with capacity 15,\nan edge from node 12 to node 14 with capacity 5,\nan edge from node 13 to node 12 with capacity 3,\nan edge from node 13 to node 11 with capacity 6,\nan edge from node 13 to node 8 with capacity 4,\nan edge from node 13 to node 3 with capacity 18,\nan edge from node 14 to node 1 with capacity 14,\nan edge from node 14 to node 12 with capacity 8,\nan edge from node 14 to node 6 with capacity 20,\nan edge from node 14 to node 9 with capacity 1,\nan edge from node 14 to node 4 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 7, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 251, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 3 with capacity 18,\nan edge from node 0 to node 2 with capacity 5,\nan edge from node 1 to node 4 with capacity 15,\nan edge from node 1 to node 3 with capacity 15,\nan edge from node 1 to node 2 with capacity 1,\nan edge from node 1 to node 7 with capacity 5,\nan edge from node 2 to node 11 with capacity 18,\nan edge from node 2 to node 6 with capacity 20,\nan edge from node 2 to node 10 with capacity 17,\nan edge from node 3 to node 8 with capacity 2,\nan edge from node 3 to node 10 with capacity 12,\nan edge from node 3 to node 5 with capacity 4,\nan edge from node 5 to node 4 with capacity 15,\nan edge from node 5 to node 10 with capacity 8,\nan edge from node 5 to node 9 with capacity 9,\nan edge from node 5 to node 1 with capacity 11,\nan edge from node 5 to node 0 with capacity 17,\nan edge from node 6 to node 11 with capacity 1,\nan edge from node 6 to node 7 with capacity 16,\nan edge from node 6 to node 1 with capacity 5,\nan edge from node 7 to node 3 with capacity 4,\nan edge from node 8 to node 4 with capacity 7,\nan edge from node 8 to node 3 with capacity 12,\nan edge from node 8 to node 2 with capacity 1,\nan edge from node 8 to node 9 with capacity 5,\nan edge from node 8 to node 0 with capacity 10,\nan edge from node 9 to node 11 with capacity 12,\nan edge from node 9 to node 4 with capacity 8,\nan edge from node 9 to node 8 with capacity 7,\nan edge from node 9 to node 10 with capacity 10,\nan edge from node 9 to node 7 with capacity 13,\nan edge from node 9 to node 0 with capacity 2,\nan edge from node 10 to node 3 with capacity 18,\nan edge from node 10 to node 8 with capacity 1,\nan edge from node 10 to node 7 with capacity 10,\nan edge from node 11 to node 6 with capacity 18,\nan edge from node 11 to node 10 with capacity 4,\nan edge from node 11 to node 9 with capacity 17,\nan edge from node 11 to node 1 with capacity 3.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 252, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 5 with capacity 1, an edge from node 0 to node 3 with capacity 5, an edge from node 1 to node 6 with capacity 9, an edge from node 1 to node 7 with capacity 9, an edge from node 3 to node 0 with capacity 2, an edge from node 3 to node 9 with capacity 3, an edge from node 3 to node 1 with capacity 3, an edge from node 4 to node 1 with capacity 2, an edge from node 5 to node 6 with capacity 9, an edge from node 6 to node 9 with capacity 2, an edge from node 6 to node 1 with capacity 1, an edge from node 7 to node 5 with capacity 7, an edge from node 7 to node 4 with capacity 8, an edge from node 7 to node 3 with capacity 10, an edge from node 8 to node 6 with capacity 2, an edge from node 8 to node 3 with capacity 3, an edge from node 8 to node 1 with capacity 7, an edge from node 9 to node 3 with capacity 4, an edge from node 9 to node 7 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 0\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 0, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 253, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 6 with capacity 7,\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 2 with capacity 10,\nan edge from node 2 to node 3 with capacity 18,\nan edge from node 2 to node 10 with capacity 7,\nan edge from node 3 to node 0 with capacity 18,\nan edge from node 3 to node 7 with capacity 19,\nan edge from node 4 to node 6 with capacity 8,\nan edge from node 4 to node 2 with capacity 19,\nan edge from node 4 to node 10 with capacity 8,\nan edge from node 5 to node 6 with capacity 18,\nan edge from node 5 to node 3 with capacity 16,\nan edge from node 6 to node 7 with capacity 8,\nan edge from node 6 to node 2 with capacity 14,\nan edge from node 6 to node 10 with capacity 5,\nan edge from node 7 to node 4 with capacity 16,\nan edge from node 7 to node 6 with capacity 13,\nan edge from node 7 to node 8 with capacity 11,\nan edge from node 7 to node 9 with capacity 14,\nan edge from node 7 to node 10 with capacity 8,\nan edge from node 8 to node 2 with capacity 17,\nan edge from node 9 to node 6 with capacity 9,\nan edge from node 9 to node 2 with capacity 16,\nan edge from node 9 to node 3 with capacity 14,\nan edge from node 9 to node 10 with capacity 18,\nan edge from node 10 to node 7 with capacity 4,\nan edge from node 10 to node 8 with capacity 18,\nan edge from node 10 to node 9 with capacity 17,\nan edge from node 10 to node 5 with capacity 6,\nan edge from node 10 to node 1 with capacity 13.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 9\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 9, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 254, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 14 with capacity 19,\nan edge from node 0 to node 13 with capacity 16,\nan edge from node 0 to node 18 with capacity 20,\nan edge from node 0 to node 12 with capacity 14,\nan edge from node 1 to node 0 with capacity 12,\nan edge from node 2 to node 4 with capacity 5,\nan edge from node 2 to node 15 with capacity 4,\nan edge from node 2 to node 3 with capacity 10,\nan edge from node 2 to node 13 with capacity 4,\nan edge from node 2 to node 1 with capacity 13,\nan edge from node 2 to node 7 with capacity 17,\nan edge from node 2 to node 12 with capacity 12,\nan edge from node 3 to node 2 with capacity 18,\nan edge from node 3 to node 17 with capacity 5,\nan edge from node 3 to node 6 with capacity 8,\nan edge from node 3 to node 0 with capacity 15,\nan edge from node 4 to node 13 with capacity 18,\nan edge from node 4 to node 10 with capacity 12,\nan edge from node 4 to node 7 with capacity 17,\nan edge from node 5 to node 4 with capacity 20,\nan edge from node 5 to node 13 with capacity 1,\nan edge from node 6 to node 4 with capacity 16,\nan edge from node 6 to node 14 with capacity 18,\nan edge from node 6 to node 9 with capacity 6,\nan edge from node 6 to node 5 with capacity 20,\nan edge from node 6 to node 12 with capacity 10,\nan edge from node 7 to node 4 with capacity 14,\nan edge from node 7 to node 15 with capacity 17,\nan edge from node 7 to node 11 with capacity 18,\nan edge from node 8 to node 2 with capacity 3,\nan edge from node 8 to node 16 with capacity 5,\nan edge from node 8 to node 4 with capacity 11,\nan edge from node 8 to node 3 with capacity 3,\nan edge from node 8 to node 9 with capacity 11,\nan edge from node 8 to node 18 with capacity 6,\nan edge from node 9 to node 2 with capacity 13,\nan edge from node 9 to node 17 with capacity 14,\nan edge from node 9 to node 8 with capacity 11,\nan edge from node 9 to node 10 with capacity 4,\nan edge from node 9 to node 1 with capacity 16,\nan edge from node 9 to node 11 with capacity 12,\nan edge from node 9 to node 7 with capacity 11,\nan edge from node 9 to node 18 with capacity 11,\nan edge from node 10 to node 5 with capacity 20,\nan edge from node 11 to node 6 with capacity 10,\nan edge from node 11 to node 15 with capacity 9,\nan edge from node 11 to node 10 with capacity 15,\nan edge from node 11 to node 1 with capacity 4,\nan edge from node 11 to node 5 with capacity 2,\nan edge from node 12 to node 4 with capacity 17,\nan edge from node 12 to node 13 with capacity 14,\nan edge from node 12 to node 11 with capacity 5,\nan edge from node 12 to node 18 with capacity 9,\nan edge from node 12 to node 5 with capacity 15,\nan edge from node 13 to node 8 with capacity 11,\nan edge from node 13 to node 15 with capacity 1,\nan edge from node 13 to node 11 with capacity 1,\nan edge from node 13 to node 7 with capacity 14,\nan edge from node 13 to node 18 with capacity 15,\nan edge from node 13 to node 12 with capacity 17,\nan edge from node 14 to node 17 with capacity 15,\nan edge from node 14 to node 13 with capacity 20,\nan edge from node 14 to node 11 with capacity 20,\nan edge from node 14 to node 18 with capacity 2,\nan edge from node 14 to node 5 with capacity 17,\nan edge from node 15 to node 2 with capacity 12,\nan edge from node 15 to node 16 with capacity 10,\nan edge from node 15 to node 6 with capacity 17,\nan edge from node 15 to node 8 with capacity 14,\nan edge from node 15 to node 0 with capacity 9,\nan edge from node 15 to node 3 with capacity 20,\nan edge from node 15 to node 7 with capacity 2,\nan edge from node 15 to node 9 with capacity 11,\nan edge from node 15 to node 18 with capacity 6,\nan edge from node 15 to node 5 with capacity 20,\nan edge from node 16 to node 0 with capacity 12,\nan edge from node 16 to node 3 with capacity 11,\nan edge from node 16 to node 1 with capacity 9,\nan edge from node 17 to node 2 with capacity 18,\nan edge from node 17 to node 3 with capacity 20,\nan edge from node 17 to node 9 with capacity 9,\nan edge from node 18 to node 2 with capacity 1,\nan edge from node 18 to node 4 with capacity 10,\nan edge from node 18 to node 10 with capacity 11,\nan edge from node 18 to node 1 with capacity 17.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 255, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 1 with capacity 14,\nan edge from node 0 to node 10 with capacity 14,\nan edge from node 0 to node 6 with capacity 6,\nan edge from node 1 to node 9 with capacity 8,\nan edge from node 2 to node 6 with capacity 5,\nan edge from node 2 to node 3 with capacity 18,\nan edge from node 3 to node 5 with capacity 11,\nan edge from node 3 to node 1 with capacity 16,\nan edge from node 3 to node 0 with capacity 15,\nan edge from node 3 to node 4 with capacity 10,\nan edge from node 3 to node 2 with capacity 15,\nan edge from node 3 to node 7 with capacity 13,\nan edge from node 4 to node 5 with capacity 17,\nan edge from node 5 to node 9 with capacity 19,\nan edge from node 5 to node 2 with capacity 20,\nan edge from node 6 to node 1 with capacity 15,\nan edge from node 6 to node 11 with capacity 7,\nan edge from node 6 to node 3 with capacity 11,\nan edge from node 7 to node 5 with capacity 5,\nan edge from node 7 to node 1 with capacity 11,\nan edge from node 7 to node 10 with capacity 2,\nan edge from node 7 to node 8 with capacity 9,\nan edge from node 8 to node 0 with capacity 1,\nan edge from node 8 to node 3 with capacity 17,\nan edge from node 9 to node 1 with capacity 3,\nan edge from node 9 to node 8 with capacity 3,\nan edge from node 9 to node 3 with capacity 15,\nan edge from node 10 to node 5 with capacity 13,\nan edge from node 10 to node 1 with capacity 20,\nan edge from node 11 to node 5 with capacity 12,\nan edge from node 11 to node 1 with capacity 19,\nan edge from node 11 to node 2 with capacity 3,\nan edge from node 11 to node 8 with capacity 10,\nan edge from node 11 to node 7 with capacity 20.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 6, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 256, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 5 with capacity 1, an edge from node 0 to node 2 with capacity 5, an edge from node 1 to node 3 with capacity 8, an edge from node 2 to node 1 with capacity 4, an edge from node 4 to node 3 with capacity 4, an edge from node 4 to node 5 with capacity 10, an edge from node 4 to node 1 with capacity 3, an edge from node 5 to node 3 with capacity 7.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 257, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 9 with capacity 10,\nan edge from node 0 to node 1 with capacity 8,\nan edge from node 0 to node 2 with capacity 11,\nan edge from node 0 to node 4 with capacity 9,\nan edge from node 0 to node 8 with capacity 8,\nan edge from node 1 to node 7 with capacity 15,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 0 with capacity 2,\nan edge from node 1 to node 11 with capacity 6,\nan edge from node 2 to node 6 with capacity 2,\nan edge from node 2 to node 1 with capacity 1,\nan edge from node 2 to node 7 with capacity 3,\nan edge from node 2 to node 4 with capacity 14,\nan edge from node 2 to node 0 with capacity 20,\nan edge from node 3 to node 6 with capacity 11,\nan edge from node 3 to node 8 with capacity 3,\nan edge from node 4 to node 2 with capacity 5,\nan edge from node 4 to node 8 with capacity 20,\nan edge from node 4 to node 12 with capacity 13,\nan edge from node 5 to node 1 with capacity 20,\nan edge from node 5 to node 7 with capacity 11,\nan edge from node 5 to node 0 with capacity 8,\nan edge from node 5 to node 11 with capacity 20,\nan edge from node 6 to node 10 with capacity 20,\nan edge from node 6 to node 4 with capacity 18,\nan edge from node 6 to node 5 with capacity 20,\nan edge from node 6 to node 3 with capacity 6,\nan edge from node 7 to node 9 with capacity 20,\nan edge from node 7 to node 6 with capacity 19,\nan edge from node 7 to node 4 with capacity 17,\nan edge from node 7 to node 5 with capacity 8,\nan edge from node 8 to node 6 with capacity 2,\nan edge from node 8 to node 12 with capacity 13,\nan edge from node 9 to node 2 with capacity 20,\nan edge from node 9 to node 5 with capacity 1,\nan edge from node 9 to node 3 with capacity 10,\nan edge from node 10 to node 4 with capacity 4,\nan edge from node 10 to node 5 with capacity 4,\nan edge from node 10 to node 3 with capacity 16,\nan edge from node 11 to node 7 with capacity 20,\nan edge from node 11 to node 4 with capacity 14,\nan edge from node 12 to node 4 with capacity 10,\nan edge from node 12 to node 5 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 258, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 2 with capacity 3, an edge from node 1 to node 5 with capacity 4, an edge from node 1 to node 0 with capacity 3, an edge from node 1 to node 7 with capacity 3, an edge from node 2 to node 4 with capacity 3, an edge from node 3 to node 4 with capacity 9, an edge from node 3 to node 0 with capacity 3, an edge from node 3 to node 1 with capacity 4, an edge from node 5 to node 6 with capacity 7, an edge from node 6 to node 3 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 6, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 259, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 19, and the edges are:\nan edge from node 0 to node 10 with capacity 10,\nan edge from node 0 to node 5 with capacity 14,\nan edge from node 0 to node 14 with capacity 3,\nan edge from node 0 to node 2 with capacity 20,\nan edge from node 0 to node 15 with capacity 16,\nan edge from node 0 to node 7 with capacity 6,\nan edge from node 0 to node 1 with capacity 9,\nan edge from node 1 to node 6 with capacity 10,\nan edge from node 1 to node 13 with capacity 3,\nan edge from node 1 to node 18 with capacity 12,\nan edge from node 1 to node 5 with capacity 9,\nan edge from node 1 to node 11 with capacity 11,\nan edge from node 1 to node 3 with capacity 17,\nan edge from node 1 to node 14 with capacity 9,\nan edge from node 2 to node 10 with capacity 20,\nan edge from node 2 to node 11 with capacity 14,\nan edge from node 2 to node 15 with capacity 8,\nan edge from node 2 to node 7 with capacity 8,\nan edge from node 3 to node 13 with capacity 18,\nan edge from node 3 to node 8 with capacity 11,\nan edge from node 3 to node 4 with capacity 3,\nan edge from node 3 to node 17 with capacity 6,\nan edge from node 3 to node 16 with capacity 3,\nan edge from node 4 to node 10 with capacity 4,\nan edge from node 4 to node 9 with capacity 5,\nan edge from node 4 to node 5 with capacity 10,\nan edge from node 4 to node 2 with capacity 18,\nan edge from node 4 to node 7 with capacity 6,\nan edge from node 4 to node 12 with capacity 6,\nan edge from node 5 to node 10 with capacity 4,\nan edge from node 5 to node 13 with capacity 2,\nan edge from node 5 to node 8 with capacity 1,\nan edge from node 5 to node 1 with capacity 18,\nan edge from node 6 to node 13 with capacity 7,\nan edge from node 6 to node 18 with capacity 16,\nan edge from node 6 to node 11 with capacity 1,\nan edge from node 6 to node 15 with capacity 6,\nan edge from node 6 to node 19 with capacity 12,\nan edge from node 7 to node 8 with capacity 12,\nan edge from node 7 to node 11 with capacity 19,\nan edge from node 7 to node 2 with capacity 10,\nan edge from node 7 to node 12 with capacity 4,\nan edge from node 8 to node 18 with capacity 19,\nan edge from node 8 to node 3 with capacity 13,\nan edge from node 8 to node 7 with capacity 5,\nan edge from node 9 to node 10 with capacity 2,\nan edge from node 9 to node 18 with capacity 2,\nan edge from node 9 to node 4 with capacity 4,\nan edge from node 9 to node 16 with capacity 2,\nan edge from node 9 to node 1 with capacity 11,\nan edge from node 10 to node 5 with capacity 5,\nan edge from node 11 to node 10 with capacity 17,\nan edge from node 11 to node 13 with capacity 1,\nan edge from node 11 to node 8 with capacity 17,\nan edge from node 11 to node 3 with capacity 11,\nan edge from node 11 to node 2 with capacity 18,\nan edge from node 12 to node 6 with capacity 7,\nan edge from node 12 to node 2 with capacity 8,\nan edge from node 12 to node 17 with capacity 3,\nan edge from node 12 to node 7 with capacity 3,\nan edge from node 13 to node 10 with capacity 6,\nan edge from node 13 to node 3 with capacity 2,\nan edge from node 13 to node 7 with capacity 12,\nan edge from node 14 to node 13 with capacity 9,\nan edge from node 14 to node 18 with capacity 10,\nan edge from node 14 to node 5 with capacity 16,\nan edge from node 14 to node 3 with capacity 20,\nan edge from node 14 to node 19 with capacity 17,\nan edge from node 15 to node 18 with capacity 19,\nan edge from node 15 to node 5 with capacity 19,\nan edge from node 15 to node 3 with capacity 17,\nan edge from node 15 to node 14 with capacity 5,\nan edge from node 15 to node 17 with capacity 15,\nan edge from node 16 to node 10 with capacity 18,\nan edge from node 16 to node 1 with capacity 20,\nan edge from node 17 to node 9 with capacity 13,\nan edge from node 17 to node 18 with capacity 14,\nan edge from node 17 to node 5 with capacity 11,\nan edge from node 17 to node 11 with capacity 15,\nan edge from node 17 to node 19 with capacity 6,\nan edge from node 17 to node 16 with capacity 1,\nan edge from node 17 to node 0 with capacity 10,\nan edge from node 18 to node 10 with capacity 14,\nan edge from node 18 to node 13 with capacity 17,\nan edge from node 18 to node 5 with capacity 4,\nan edge from node 18 to node 3 with capacity 4,\nan edge from node 18 to node 1 with capacity 13,\nan edge from node 19 to node 10 with capacity 3,\nan edge from node 19 to node 4 with capacity 11,\nan edge from node 19 to node 3 with capacity 8,\nan edge from node 19 to node 15 with capacity 1,\nan edge from node 19 to node 1 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 10 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 10, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 260, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 13 with capacity 12,\nan edge from node 0 to node 12 with capacity 10,\nan edge from node 0 to node 5 with capacity 1,\nan edge from node 0 to node 17 with capacity 16,\nan edge from node 0 to node 18 with capacity 20,\nan edge from node 1 to node 9 with capacity 8,\nan edge from node 1 to node 10 with capacity 9,\nan edge from node 2 to node 16 with capacity 16,\nan edge from node 2 to node 3 with capacity 15,\nan edge from node 2 to node 12 with capacity 4,\nan edge from node 2 to node 8 with capacity 6,\nan edge from node 2 to node 7 with capacity 18,\nan edge from node 2 to node 4 with capacity 19,\nan edge from node 3 to node 13 with capacity 4,\nan edge from node 3 to node 16 with capacity 17,\nan edge from node 3 to node 14 with capacity 7,\nan edge from node 3 to node 18 with capacity 15,\nan edge from node 3 to node 15 with capacity 4,\nan edge from node 3 to node 10 with capacity 7,\nan edge from node 4 to node 12 with capacity 15,\nan edge from node 4 to node 2 with capacity 5,\nan edge from node 4 to node 9 with capacity 5,\nan edge from node 4 to node 17 with capacity 2,\nan edge from node 5 to node 12 with capacity 4,\nan edge from node 5 to node 2 with capacity 8,\nan edge from node 5 to node 4 with capacity 3,\nan edge from node 6 to node 13 with capacity 1,\nan edge from node 6 to node 3 with capacity 20,\nan edge from node 6 to node 12 with capacity 15,\nan edge from node 6 to node 7 with capacity 17,\nan edge from node 6 to node 11 with capacity 15,\nan edge from node 7 to node 16 with capacity 1,\nan edge from node 7 to node 6 with capacity 13,\nan edge from node 7 to node 2 with capacity 17,\nan edge from node 7 to node 9 with capacity 14,\nan edge from node 7 to node 1 with capacity 5,\nan edge from node 7 to node 0 with capacity 13,\nan edge from node 7 to node 10 with capacity 18,\nan edge from node 8 to node 6 with capacity 3,\nan edge from node 8 to node 3 with capacity 4,\nan edge from node 8 to node 2 with capacity 14,\nan edge from node 8 to node 4 with capacity 19,\nan edge from node 9 to node 14 with capacity 9,\nan edge from node 9 to node 1 with capacity 8,\nan edge from node 9 to node 15 with capacity 5,\nan edge from node 10 to node 2 with capacity 8,\nan edge from node 10 to node 14 with capacity 6,\nan edge from node 10 to node 8 with capacity 20,\nan edge from node 10 to node 9 with capacity 8,\nan edge from node 10 to node 11 with capacity 10,\nan edge from node 11 to node 3 with capacity 3,\nan edge from node 11 to node 14 with capacity 20,\nan edge from node 11 to node 5 with capacity 17,\nan edge from node 12 to node 6 with capacity 15,\nan edge from node 12 to node 3 with capacity 3,\nan edge from node 12 to node 7 with capacity 9,\nan edge from node 12 to node 11 with capacity 13,\nan edge from node 12 to node 1 with capacity 15,\nan edge from node 12 to node 10 with capacity 2,\nan edge from node 13 to node 3 with capacity 1,\nan edge from node 13 to node 9 with capacity 15,\nan edge from node 13 to node 4 with capacity 2,\nan edge from node 13 to node 17 with capacity 10,\nan edge from node 14 to node 8 with capacity 8,\nan edge from node 14 to node 4 with capacity 19,\nan edge from node 14 to node 17 with capacity 6,\nan edge from node 15 to node 16 with capacity 15,\nan edge from node 15 to node 3 with capacity 4,\nan edge from node 15 to node 12 with capacity 4,\nan edge from node 15 to node 14 with capacity 7,\nan edge from node 15 to node 8 with capacity 15,\nan edge from node 15 to node 0 with capacity 13,\nan edge from node 16 to node 2 with capacity 17,\nan edge from node 16 to node 7 with capacity 16,\nan edge from node 16 to node 11 with capacity 20,\nan edge from node 16 to node 18 with capacity 17,\nan edge from node 16 to node 15 with capacity 10,\nan edge from node 17 to node 16 with capacity 1,\nan edge from node 17 to node 4 with capacity 16,\nan edge from node 17 to node 11 with capacity 18,\nan edge from node 17 to node 18 with capacity 10,\nan edge from node 17 to node 1 with capacity 13,\nan edge from node 18 to node 13 with capacity 14,\nan edge from node 18 to node 6 with capacity 4,\nan edge from node 18 to node 3 with capacity 15,\nan edge from node 18 to node 8 with capacity 8,\nan edge from node 18 to node 7 with capacity 17.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 3, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 261, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 12 with capacity 10,\nan edge from node 0 to node 10 with capacity 17,\nan edge from node 0 to node 9 with capacity 17,\nan edge from node 1 to node 3 with capacity 2,\nan edge from node 1 to node 7 with capacity 12,\nan edge from node 2 to node 4 with capacity 5,\nan edge from node 3 to node 12 with capacity 1,\nan edge from node 3 to node 13 with capacity 1,\nan edge from node 3 to node 11 with capacity 6,\nan edge from node 3 to node 7 with capacity 15,\nan edge from node 3 to node 5 with capacity 11,\nan edge from node 4 to node 1 with capacity 17,\nan edge from node 4 to node 13 with capacity 2,\nan edge from node 4 to node 9 with capacity 15,\nan edge from node 5 to node 12 with capacity 13,\nan edge from node 5 to node 1 with capacity 10,\nan edge from node 5 to node 3 with capacity 12,\nan edge from node 5 to node 0 with capacity 17,\nan edge from node 5 to node 13 with capacity 1,\nan edge from node 5 to node 11 with capacity 18,\nan edge from node 5 to node 7 with capacity 10,\nan edge from node 7 to node 3 with capacity 16,\nan edge from node 7 to node 13 with capacity 13,\nan edge from node 7 to node 14 with capacity 1,\nan edge from node 7 to node 8 with capacity 13,\nan edge from node 8 to node 12 with capacity 1,\nan edge from node 8 to node 1 with capacity 7,\nan edge from node 8 to node 3 with capacity 6,\nan edge from node 8 to node 0 with capacity 7,\nan edge from node 9 to node 6 with capacity 2,\nan edge from node 9 to node 1 with capacity 11,\nan edge from node 9 to node 3 with capacity 18,\nan edge from node 9 to node 0 with capacity 10,\nan edge from node 9 to node 4 with capacity 11,\nan edge from node 9 to node 7 with capacity 4,\nan edge from node 10 to node 1 with capacity 8,\nan edge from node 10 to node 8 with capacity 2,\nan edge from node 11 to node 6 with capacity 1,\nan edge from node 11 to node 3 with capacity 18,\nan edge from node 11 to node 13 with capacity 17,\nan edge from node 11 to node 7 with capacity 1,\nan edge from node 12 to node 0 with capacity 1,\nan edge from node 13 to node 1 with capacity 2,\nan edge from node 13 to node 5 with capacity 10.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 12\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 9, 12, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 262, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 4 with capacity 9, an edge from node 0 to node 1 with capacity 4, an edge from node 0 to node 3 with capacity 4, an edge from node 1 to node 0 with capacity 9, an edge from node 1 to node 2 with capacity 3, an edge from node 2 to node 0 with capacity 3, an edge from node 2 to node 4 with capacity 10, an edge from node 2 to node 3 with capacity 1, an edge from node 3 to node 1 with capacity 4, an edge from node 4 to node 2 with capacity 3, an edge from node 4 to node 3 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 0, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 263, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 14, and the edges are:\nan edge from node 0 to node 4 with capacity 11,\nan edge from node 0 to node 2 with capacity 18,\nan edge from node 0 to node 3 with capacity 13,\nan edge from node 0 to node 11 with capacity 14,\nan edge from node 0 to node 13 with capacity 2,\nan edge from node 1 to node 4 with capacity 6,\nan edge from node 1 to node 2 with capacity 7,\nan edge from node 1 to node 6 with capacity 15,\nan edge from node 1 to node 14 with capacity 2,\nan edge from node 2 to node 5 with capacity 18,\nan edge from node 2 to node 8 with capacity 10,\nan edge from node 2 to node 13 with capacity 14,\nan edge from node 3 to node 12 with capacity 10,\nan edge from node 3 to node 1 with capacity 18,\nan edge from node 3 to node 6 with capacity 12,\nan edge from node 3 to node 13 with capacity 13,\nan edge from node 4 to node 2 with capacity 14,\nan edge from node 4 to node 8 with capacity 7,\nan edge from node 4 to node 0 with capacity 1,\nan edge from node 4 to node 6 with capacity 7,\nan edge from node 4 to node 13 with capacity 13,\nan edge from node 5 to node 0 with capacity 1,\nan edge from node 5 to node 10 with capacity 18,\nan edge from node 6 to node 3 with capacity 18,\nan edge from node 6 to node 11 with capacity 10,\nan edge from node 7 to node 2 with capacity 4,\nan edge from node 7 to node 9 with capacity 9,\nan edge from node 7 to node 1 with capacity 13,\nan edge from node 7 to node 13 with capacity 19,\nan edge from node 8 to node 2 with capacity 2,\nan edge from node 8 to node 0 with capacity 14,\nan edge from node 8 to node 9 with capacity 15,\nan edge from node 8 to node 10 with capacity 5,\nan edge from node 8 to node 13 with capacity 6,\nan edge from node 9 to node 2 with capacity 4,\nan edge from node 9 to node 5 with capacity 18,\nan edge from node 9 to node 14 with capacity 14,\nan edge from node 10 to node 8 with capacity 18,\nan edge from node 10 to node 0 with capacity 12,\nan edge from node 10 to node 6 with capacity 7,\nan edge from node 11 to node 5 with capacity 16,\nan edge from node 11 to node 1 with capacity 19,\nan edge from node 12 to node 5 with capacity 7,\nan edge from node 12 to node 8 with capacity 11,\nan edge from node 12 to node 1 with capacity 13,\nan edge from node 13 to node 5 with capacity 13,\nan edge from node 14 to node 3 with capacity 20,\nan edge from node 14 to node 9 with capacity 16.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 12\nflow_value, flow_dict = nx.maximum_flow(G, 0, 12, capacity='weight')\nprint(flow_value)\n```"}, {"id": 264, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 1 with capacity 5, an edge from node 1 to node 5 with capacity 3, an edge from node 1 to node 4 with capacity 3, an edge from node 2 to node 0 with capacity 2, an edge from node 2 to node 3 with capacity 2, an edge from node 2 to node 1 with capacity 4, an edge from node 3 to node 2 with capacity 10, an edge from node 4 to node 2 with capacity 1, an edge from node 4 to node 1 with capacity 3, an edge from node 5 to node 0 with capacity 6, an edge from node 5 to node 1 with capacity 2, an edge from node 5 to node 4 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 3 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 3, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 265, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(9, weight:12), (7, weight:15), (16, weight:13), (13, weight:2)],\nnode1: [(7, weight:6), (12, weight:12), (11, weight:13)],\nnode2: [(10, weight:19), (0, weight:1), (17, weight:14)],\nnode3: [(9, weight:16), (0, weight:7), (2, weight:20), (8, weight:17), (15, weight:7)],\nnode4: [(3, weight:19), (7, weight:16), (2, weight:5), (16, weight:2), (17, weight:7)],\nnode5: [(9, weight:7)],\nnode6: [(3, weight:4), (1, weight:17), (15, weight:10)],\nnode7: [(9, weight:7), (4, weight:20), (10, weight:14), (13, weight:7), (17, weight:8)],\nnode8: [(3, weight:8), (4, weight:11), (10, weight:18)],\nnode9: [(3, weight:20), (15, weight:14), (13, weight:1)],\nnode10: [(6, weight:3), (2, weight:9), (12, weight:7), (5, weight:6)],\nnode11: [(9, weight:15), (2, weight:16), (8, weight:19), (16, weight:7), (5, weight:17), (17, weight:13)],\nnode12: [(4, weight:15), (13, weight:13)],\nnode13: [(3, weight:18), (14, weight:12), (6, weight:1), (0, weight:13), (8, weight:4), (11, weight:5)],\nnode14: [(7, weight:19), (8, weight:16), (5, weight:7), (15, weight:20), (17, weight:20)],\nnode15: [(6, weight:18), (8, weight:4), (12, weight:1), (5, weight:20)],\nnode16: [(9, weight:2), (1, weight:15), (14, weight:5), (12, weight:2), (17, weight:16)],\nnode17: [(4, weight:7), (0, weight:9), (16, weight:19), (15, weight:12)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+)\\/weight:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 16\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 4, 16, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 266, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 11, and the edges are:\nan edge from node 0 to node 9 with capacity 7,\nan edge from node 0 to node 10 with capacity 15,\nan edge from node 1 to node 10 with capacity 7,\nan edge from node 1 to node 6 with capacity 6,\nan edge from node 1 to node 11 with capacity 15,\nan edge from node 1 to node 7 with capacity 16,\nan edge from node 2 to node 3 with capacity 17,\nan edge from node 2 to node 9 with capacity 19,\nan edge from node 2 to node 6 with capacity 18,\nan edge from node 2 to node 0 with capacity 18,\nan edge from node 2 to node 8 with capacity 13,\nan edge from node 3 to node 6 with capacity 20,\nan edge from node 4 to node 0 with capacity 10,\nan edge from node 4 to node 1 with capacity 11,\nan edge from node 5 to node 9 with capacity 5,\nan edge from node 5 to node 6 with capacity 4,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 5 to node 11 with capacity 6,\nan edge from node 5 to node 8 with capacity 11,\nan edge from node 6 to node 8 with capacity 4,\nan edge from node 6 to node 7 with capacity 8,\nan edge from node 6 to node 1 with capacity 18,\nan edge from node 7 to node 5 with capacity 7,\nan edge from node 7 to node 8 with capacity 16,\nan edge from node 9 to node 5 with capacity 16,\nan edge from node 9 to node 2 with capacity 16,\nan edge from node 9 to node 1 with capacity 4,\nan edge from node 10 to node 0 with capacity 12,\nan edge from node 10 to node 8 with capacity 10,\nan edge from node 11 to node 10 with capacity 12,\nan edge from node 11 to node 4 with capacity 2,\nan edge from node 11 to node 1 with capacity 6.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 11\nflow_value, flow_dict = nx.maximum_flow(G, 0, 11, capacity='weight')\nprint(flow_value)\n```"}, {"id": 267, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 9, and the edges are:\nan edge from node 0 to node 7 with capacity 5,\nan edge from node 0 to node 9 with capacity 1,\nan edge from node 1 to node 9 with capacity 7,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 2 to node 1 with capacity 1,\nan edge from node 2 to node 5 with capacity 4,\nan edge from node 2 to node 3 with capacity 2,\nan edge from node 3 to node 9 with capacity 2,\nan edge from node 4 to node 1 with capacity 3,\nan edge from node 4 to node 6 with capacity 1,\nan edge from node 4 to node 7 with capacity 5,\nan edge from node 4 to node 2 with capacity 9,\nan edge from node 5 to node 4 with capacity 9,\nan edge from node 5 to node 8 with capacity 1,\nan edge from node 6 to node 4 with capacity 3,\nan edge from node 6 to node 7 with capacity 3,\nan edge from node 6 to node 9 with capacity 3,\nan edge from node 8 to node 1 with capacity 8,\nan edge from node 8 to node 7 with capacity 5,\nan edge from node 8 to node 0 with capacity 4,\nan edge from node 8 to node 5 with capacity 10,\nan edge from node 8 to node 3 with capacity 6,\nan edge from node 9 to node 1 with capacity 5,\nan edge from node 9 to node 0 with capacity 8,\nan edge from node 9 to node 3 with capacity 9.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 9 to node 3\nflow_value, flow_dict = nx.maximum_flow(G, 9, 3, capacity='weight')\nprint(flow_value)\n```"}, {"id": 268, "code": "```python\nimport re\nimport networkx as nx\n\n# Graph description\ngraph = \"In a directed graph, the nodes are numbered from 0 to 4, and the edges are: an edge from node 0 to node 3 with capacity 5, an edge from node 1 to node 0 with capacity 3, an edge from node 2 to node 1 with capacity 7, an edge from node 3 to node 0 with capacity 6, an edge from node 3 to node 2 with capacity 10, an edge from node 4 to node 0 with capacity 5, an edge from node 4 to node 3 with capacity 10.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 4, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 269, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 4 with capacity 1, an edge from node 0 to node 8 with capacity 4, an edge from node 1 to node 5 with capacity 7, an edge from node 1 to node 9 with capacity 6, an edge from node 2 to node 5 with capacity 10, an edge from node 2 to node 8 with capacity 4, an edge from node 2 to node 9 with capacity 9, an edge from node 3 to node 1 with capacity 7, an edge from node 3 to node 2 with capacity 2, an edge from node 4 to node 6 with capacity 1, an edge from node 4 to node 1 with capacity 6, an edge from node 5 to node 6 with capacity 3, an edge from node 5 to node 1 with capacity 8, an edge from node 5 to node 2 with capacity 10, an edge from node 7 to node 4 with capacity 5, an edge from node 7 to node 6 with capacity 5, an edge from node 8 to node 0 with capacity 7, an edge from node 9 to node 7 with capacity 10, an edge from node 9 to node 8 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 1, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 270, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 5 with capacity 4, an edge from node 1 to node 0 with capacity 4, an edge from node 1 to node 3 with capacity 6, an edge from node 2 to node 3 with capacity 5, an edge from node 3 to node 1 with capacity 6, an edge from node 3 to node 5 with capacity 2, an edge from node 3 to node 2 with capacity 5, an edge from node 4 to node 3 with capacity 8, an edge from node 5 to node 2 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 271, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 12, and the edges are:\nan edge from node 1 to node 3 with capacity 12,\nan edge from node 1 to node 4 with capacity 16,\nan edge from node 1 to node 5 with capacity 7,\nan edge from node 1 to node 10 with capacity 5,\nan edge from node 1 to node 9 with capacity 12,\nan edge from node 1 to node 12 with capacity 18,\nan edge from node 1 to node 0 with capacity 10,\nan edge from node 2 to node 5 with capacity 10,\nan edge from node 3 to node 4 with capacity 5,\nan edge from node 3 to node 9 with capacity 12,\nan edge from node 4 to node 2 with capacity 8,\nan edge from node 4 to node 12 with capacity 11,\nan edge from node 5 to node 7 with capacity 4,\nan edge from node 5 to node 9 with capacity 6,\nan edge from node 5 to node 8 with capacity 16,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 6 to node 7 with capacity 18,\nan edge from node 6 to node 2 with capacity 9,\nan edge from node 6 to node 0 with capacity 5,\nan edge from node 7 to node 9 with capacity 16,\nan edge from node 7 to node 12 with capacity 9,\nan edge from node 7 to node 0 with capacity 11,\nan edge from node 7 to node 11 with capacity 15,\nan edge from node 8 to node 1 with capacity 15,\nan edge from node 9 to node 0 with capacity 5,\nan edge from node 10 to node 6 with capacity 10,\nan edge from node 10 to node 11 with capacity 11,\nan edge from node 11 to node 3 with capacity 9,\nan edge from node 11 to node 5 with capacity 16,\nan edge from node 11 to node 10 with capacity 1,\nan edge from node 12 to node 3 with capacity 12,\nan edge from node 12 to node 4 with capacity 19,\nan edge from node 12 to node 5 with capacity 15,\nan edge from node 12 to node 8 with capacity 5.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 1, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 272, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 7 with capacity 4, an edge from node 0 to node 4 with capacity 6, an edge from node 0 to node 5 with capacity 4, an edge from node 0 to node 2 with capacity 5, an edge from node 3 to node 7 with capacity 8, an edge from node 3 to node 5 with capacity 9, an edge from node 4 to node 0 with capacity 4, an edge from node 4 to node 3 with capacity 10, an edge from node 4 to node 8 with capacity 4, an edge from node 4 to node 1 with capacity 7, an edge from node 6 to node 7 with capacity 4, an edge from node 6 to node 3 with capacity 7, an edge from node 6 to node 8 with capacity 6, an edge from node 6 to node 1 with capacity 7, an edge from node 7 to node 0 with capacity 3, an edge from node 8 to node 2 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 6 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 6, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 273, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 6 with capacity 5, an edge from node 1 to node 2 with capacity 4, an edge from node 1 to node 0 with capacity 3, an edge from node 1 to node 9 with capacity 6, an edge from node 2 to node 1 with capacity 4, an edge from node 2 to node 9 with capacity 1, an edge from node 3 to node 0 with capacity 9, an edge from node 3 to node 1 with capacity 1, an edge from node 3 to node 4 with capacity 4, an edge from node 3 to node 6 with capacity 7, an edge from node 4 to node 8 with capacity 6, an edge from node 4 to node 3 with capacity 1, an edge from node 4 to node 9 with capacity 5, an edge from node 6 to node 7 with capacity 2, an edge from node 7 to node 4 with capacity 8, an edge from node 9 to node 6 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 9\nflow_value, flow_dict = nx.maximum_flow(G, 0, 9, capacity='weight')\nprint(flow_value)\n```"}, {"id": 274, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 18, and the edges are:\nan edge from node 0 to node 5 with capacity 6,\nan edge from node 0 to node 3 with capacity 20,\nan edge from node 0 to node 9 with capacity 3,\nan edge from node 0 to node 14 with capacity 8,\nan edge from node 0 to node 12 with capacity 18,\nan edge from node 0 to node 2 with capacity 8,\nan edge from node 1 to node 5 with capacity 4,\nan edge from node 1 to node 16 with capacity 15,\nan edge from node 2 to node 11 with capacity 10,\nan edge from node 2 to node 3 with capacity 9,\nan edge from node 2 to node 18 with capacity 4,\nan edge from node 2 to node 7 with capacity 1,\nan edge from node 2 to node 9 with capacity 6,\nan edge from node 2 to node 15 with capacity 19,\nan edge from node 2 to node 4 with capacity 11,\nan edge from node 2 to node 16 with capacity 15,\nan edge from node 2 to node 1 with capacity 18,\nan edge from node 3 to node 16 with capacity 12,\nan edge from node 4 to node 11 with capacity 10,\nan edge from node 4 to node 5 with capacity 6,\nan edge from node 4 to node 3 with capacity 18,\nan edge from node 4 to node 9 with capacity 1,\nan edge from node 4 to node 15 with capacity 15,\nan edge from node 4 to node 14 with capacity 13,\nan edge from node 4 to node 17 with capacity 14,\nan edge from node 4 to node 12 with capacity 4,\nan edge from node 4 to node 8 with capacity 11,\nan edge from node 5 to node 11 with capacity 9,\nan edge from node 5 to node 18 with capacity 17,\nan edge from node 5 to node 7 with capacity 3,\nan edge from node 5 to node 4 with capacity 17,\nan edge from node 6 to node 13 with capacity 10,\nan edge from node 6 to node 10 with capacity 18,\nan edge from node 6 to node 16 with capacity 14,\nan edge from node 6 to node 1 with capacity 15,\nan edge from node 7 to node 13 with capacity 14,\nan edge from node 7 to node 9 with capacity 1,\nan edge from node 7 to node 4 with capacity 13,\nan edge from node 7 to node 2 with capacity 15,\nan edge from node 8 to node 11 with capacity 19,\nan edge from node 8 to node 5 with capacity 2,\nan edge from node 8 to node 6 with capacity 3,\nan edge from node 8 to node 15 with capacity 11,\nan edge from node 8 to node 14 with capacity 13,\nan edge from node 8 to node 16 with capacity 20,\nan edge from node 9 to node 3 with capacity 7,\nan edge from node 9 to node 18 with capacity 9,\nan edge from node 9 to node 0 with capacity 12,\nan edge from node 9 to node 4 with capacity 9,\nan edge from node 9 to node 2 with capacity 4,\nan edge from node 9 to node 1 with capacity 6,\nan edge from node 10 to node 13 with capacity 16,\nan edge from node 10 to node 5 with capacity 16,\nan edge from node 10 to node 3 with capacity 16,\nan edge from node 10 to node 18 with capacity 13,\nan edge from node 10 to node 0 with capacity 7,\nan edge from node 10 to node 6 with capacity 10,\nan edge from node 10 to node 4 with capacity 18,\nan edge from node 10 to node 2 with capacity 17,\nan edge from node 10 to node 8 with capacity 13,\nan edge from node 11 to node 14 with capacity 8,\nan edge from node 11 to node 12 with capacity 5,\nan edge from node 11 to node 8 with capacity 14,\nan edge from node 12 to node 6 with capacity 8,\nan edge from node 12 to node 14 with capacity 18,\nan edge from node 12 to node 2 with capacity 19,\nan edge from node 12 to node 10 with capacity 16,\nan edge from node 12 to node 16 with capacity 3,\nan edge from node 13 to node 11 with capacity 4,\nan edge from node 13 to node 5 with capacity 15,\nan edge from node 13 to node 9 with capacity 15,\nan edge from node 13 to node 12 with capacity 16,\nan edge from node 13 to node 2 with capacity 16,\nan edge from node 14 to node 5 with capacity 5,\nan edge from node 14 to node 9 with capacity 17,\nan edge from node 14 to node 6 with capacity 14,\nan edge from node 14 to node 4 with capacity 13,\nan edge from node 14 to node 17 with capacity 14,\nan edge from node 14 to node 12 with capacity 15,\nan edge from node 14 to node 2 with capacity 2,\nan edge from node 15 to node 0 with capacity 5,\nan edge from node 15 to node 9 with capacity 7,\nan edge from node 15 to node 17 with capacity 6,\nan edge from node 15 to node 8 with capacity 9,\nan edge from node 15 to node 1 with capacity 19,\nan edge from node 16 to node 5 with capacity 2,\nan edge from node 16 to node 6 with capacity 2,\nan edge from node 16 to node 4 with capacity 3,\nan edge from node 17 to node 18 with capacity 4,\nan edge from node 17 to node 14 with capacity 20,\nan edge from node 17 to node 12 with capacity 7,\nan edge from node 17 to node 10 with capacity 10,\nan edge from node 18 to node 11 with capacity 16,\nan edge from node 18 to node 7 with capacity 1,\nan edge from node 18 to node 15 with capacity 9,\nan edge from node 18 to node 14 with capacity 15,\nan edge from node 18 to node 17 with capacity 16,\nan edge from node 18 to node 2 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 14 to node 18\nflow_value, flow_dict = nx.maximum_flow(G, 14, 18, capacity='weight')\nprint(flow_value)\n```"}, {"id": 275, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 2 with capacity 10, an edge from node 0 to node 4 with capacity 2, an edge from node 1 to node 5 with capacity 4, an edge from node 1 to node 3 with capacity 1, an edge from node 3 to node 2 with capacity 4, an edge from node 3 to node 4 with capacity 9, an edge from node 4 to node 2 with capacity 3, an edge from node 4 to node 3 with capacity 5, an edge from node 5 to node 3 with capacity 9.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\nprint(flow_value)\n```"}, {"id": 276, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 5, and the edges are: an edge from node 0 to node 5 with capacity 7, an edge from node 0 to node 1 with capacity 3, an edge from node 1 to node 5 with capacity 5, an edge from node 1 to node 2 with capacity 10, an edge from node 1 to node 4 with capacity 1, an edge from node 1 to node 3 with capacity 5, an edge from node 2 to node 0 with capacity 1, an edge from node 3 to node 1 with capacity 5, an edge from node 4 to node 1 with capacity 6, an edge from node 5 to node 2 with capacity 3, an edge from node 5 to node 4 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 4\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 2, 4, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 277, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(11, weight:17), (1, weight:8), (14, weight:12)],\nnode1: [(3, weight:11), (14, weight:1), (4, weight:7), (9, weight:9)],\nnode2: [(1, weight:16), (3, weight:20), (14, weight:18), (4, weight:3), (8, weight:18), (9, weight:7), (10, weight:13)],\nnode3: [(12, weight:14), (1, weight:17), (14, weight:8), (7, weight:13), (6, weight:18), (13, weight:4)],\nnode4: [(0, weight:19), (1, weight:12), (6, weight:14), (5, weight:17), (13, weight:14)],\nnode5: [(15, weight:7), (8, weight:5), (13, weight:3)],\nnode6: [(14, weight:7)],\nnode7: [(1, weight:12), (16, weight:9), (13, weight:2)],\nnode8: [(11, weight:8), (4, weight:18), (10, weight:1), (16, weight:7)],\nnode9: [(11, weight:8), (1, weight:17), (4, weight:17), (6, weight:15), (5, weight:17), (13, weight:1)],\nnode10: [(0, weight:13), (2, weight:17), (7, weight:17), (6, weight:6)],\nnode11: [(3, weight:1), (4, weight:2), (8, weight:12), (10, weight:17)],\nnode12: [(11, weight:2), (15, weight:15), (2, weight:8), (14, weight:5), (4, weight:7), (9, weight:2)],\nnode13: [(15, weight:16), (14, weight:14), (8, weight:5)],\nnode14: [(2, weight:6), (3, weight:18), (6, weight:13), (9, weight:19), (16, weight:20)],\nnode15: [(12, weight:9), (1, weight:2), (14, weight:1), (10, weight:14), (13, weight:10)],\nnode16: [(0, weight:15), (7, weight:12), (6, weight:16), (8, weight:6)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 13\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 4, 13, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 278, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 13, and the edges are:\nan edge from node 0 to node 11 with capacity 12,\nan edge from node 0 to node 3 with capacity 9,\nan edge from node 0 to node 9 with capacity 2,\nan edge from node 1 to node 10 with capacity 4,\nan edge from node 1 to node 5 with capacity 3,\nan edge from node 1 to node 4 with capacity 8,\nan edge from node 2 to node 11 with capacity 3,\nan edge from node 2 to node 1 with capacity 1,\nan edge from node 2 to node 13 with capacity 20,\nan edge from node 2 to node 7 with capacity 14,\nan edge from node 2 to node 4 with capacity 5,\nan edge from node 3 to node 2 with capacity 7,\nan edge from node 3 to node 10 with capacity 9,\nan edge from node 3 to node 0 with capacity 6,\nan edge from node 3 to node 13 with capacity 2,\nan edge from node 3 to node 7 with capacity 8,\nan edge from node 3 to node 12 with capacity 4,\nan edge from node 3 to node 9 with capacity 20,\nan edge from node 4 to node 11 with capacity 11,\nan edge from node 4 to node 10 with capacity 1,\nan edge from node 4 to node 12 with capacity 8,\nan edge from node 4 to node 3 with capacity 16,\nan edge from node 5 to node 2 with capacity 11,\nan edge from node 5 to node 10 with capacity 20,\nan edge from node 5 to node 8 with capacity 12,\nan edge from node 6 to node 1 with capacity 19,\nan edge from node 6 to node 13 with capacity 4,\nan edge from node 7 to node 11 with capacity 3,\nan edge from node 7 to node 12 with capacity 2,\nan edge from node 8 to node 1 with capacity 9,\nan edge from node 8 to node 5 with capacity 18,\nan edge from node 8 to node 12 with capacity 17,\nan edge from node 8 to node 3 with capacity 3,\nan edge from node 8 to node 9 with capacity 11,\nan edge from node 9 to node 7 with capacity 18,\nan edge from node 9 to node 3 with capacity 10,\nan edge from node 10 to node 2 with capacity 1,\nan edge from node 10 to node 3 with capacity 4,\nan edge from node 10 to node 9 with capacity 8,\nan edge from node 11 to node 13 with capacity 20,\nan edge from node 11 to node 4 with capacity 6,\nan edge from node 12 to node 9 with capacity 5,\nan edge from node 13 to node 11 with capacity 10,\nan edge from node 13 to node 2 with capacity 4,\nan edge from node 13 to node 0 with capacity 10,\nan edge from node 13 to node 8 with capacity 7,\nan edge from node 13 to node 12 with capacity 15,\nan edge from node 13 to node 3 with capacity 6,\nan edge from node 13 to node 4 with capacity 16.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 8 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 8, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 279, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 8, and the edges are: an edge from node 0 to node 3 with capacity 6, an edge from node 0 to node 8 with capacity 9, an edge from node 1 to node 8 with capacity 5, an edge from node 2 to node 5 with capacity 1, an edge from node 2 to node 8 with capacity 6, an edge from node 3 to node 6 with capacity 7, an edge from node 3 to node 7 with capacity 7, an edge from node 4 to node 3 with capacity 10, an edge from node 4 to node 1 with capacity 5, an edge from node 4 to node 8 with capacity 8, an edge from node 4 to node 0 with capacity 10, an edge from node 5 to node 3 with capacity 3, an edge from node 5 to node 1 with capacity 3, an edge from node 5 to node 0 with capacity 10, an edge from node 7 to node 2 with capacity 10, an edge from node 8 to node 0 with capacity 3.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 8\nflow_value, flow_dict = nx.maximum_flow(G, 2, 8, capacity='weight')\nprint(flow_value)\n```"}, {"id": 280, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 0 to node 1 with capacity 1, an edge from node 0 to node 7 with capacity 3, an edge from node 1 to node 3 with capacity 10, an edge from node 1 to node 5 with capacity 4, an edge from node 2 to node 6 with capacity 4, an edge from node 3 to node 4 with capacity 10, an edge from node 3 to node 7 with capacity 3, an edge from node 4 to node 5 with capacity 6, an edge from node 4 to node 1 with capacity 5, an edge from node 4 to node 7 with capacity 2, an edge from node 5 to node 2 with capacity 5, an edge from node 6 to node 5 with capacity 2.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 7\nflow_value, flow_dict = nx.maximum_flow(G, 0, 7, capacity='weight')\nprint(flow_value)\n```"}, {"id": 281, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(1, weight:9),\n        (2, weight:7),\n        (3, weight:1),\n        (4, weight:1),\n        (5, weight:1),\n        (6, weight:1),\n        (7, weight:1),\n        (8, weight:1),\n        (9, weight:1),\n        (10, weight:1),\n        (11, weight:1),\n        (12, weight:1),\n        (13, weight:1),\n        (14, weight:1),\n        (15, weight:1),\n        (16, weight:1),\n        (17, weight:1),\n        (18, weight:1),\n        (19, weight:1)],\nnode1: [(0, weight:9),\n        (7, weight:6),\n        (10, weight:1),\n        (17, weight:13)],\nnode2: [(3, weight:11),\n        (8, weight:7)],\nnode3: [(5, weight:9),\n        (12, weight:19),\n        (4, weight:1),\n        (9, weight:4)],\nnode4: [(18, weight:3),\n        (6, weight:9),\n        (12, weight:7),\n        (8, weight:10),\n        (17, weight:8)],\nnode5: [(19, weight:6),\n        (3, weight:15),\n        (4, weight:11),\n        (17, weight:17)],\nnode6: [(5, weight:1),\n        (8, weight:7)],\nnode7: [(1, weight:14),\n        (14, weight:20),\n        (5, weight:7),\n        (16, weight:16)],\nnode8: [(15, weight:6),\n        (18, weight:1),\n        (11, weight:9),\n        (2, weight:15),\n        (9, weight:8),\n        (17, weight:6)],\nnode9: [(14, weight:14),\n        (6, weight:16),\n        (0, weight:6),\n        (7, weight:14)],\nnode10: [(1, weight:11),\n        (5, weight:14),\n        (19, weight:13),\n        (11, weight:14),\n        (3, weight:6),\n        (16, weight:17),\n        (4, weight:18),\n        (8, weight:20)],\nnode11: [(13, weight:3),\n        (16, weight:9),\n        (7, weight:9),\n        (17, weight:13)],\nnode12: [(1, weight:2),\n        (14, weight:16),\n        (15, weight:13),\n        (19, weight:15),\n        (18, weight:4),\n        (6, weight:14),\n        (9, weight:9)],\nnode13: [(5, weight:17),\n        (6, weight:6),\n        (12, weight:15),\n        (3, weight:2),\n        (4, weight:10),\n        (2, weight:19),\n        (0, weight:10)],\nnode14: [(6, weight:9),\n        (12, weight:17),\n        (3, weight:12),\n        (0, weight:4)],\nnode15: [(1, weight:11),\n        (14, weight:10),\n        (19, weight:7),\n        (13, weight:10),\n        (3, weight:13),\n        (9, weight:18)],\nnode16: [(15, weight:11),\n        (11, weight:11),\n        (2, weight:15),\n        (0, weight:14),\n        (17, weight:17)],\nnode17: [(18, weight:12),\n        (6, weight:16),\n        (13, weight:19),\n        (8, weight:5),\n        (0, weight:11),\n        (7, weight:14)],\nnode18: [(14, weight:16),\n        (11, weight:5),\n        (16, weight:11),\n        (0, weight:11),\n        (10, weight:19)],\nnode19: [(1, weight:12),\n        (14, weight:10),\n        (12, weight:19),\n        (3, weight:2),\n        (2, weight:6),\n        (8, weight:10),\n        (10, weight:14),\n        (9, weight:10)]]\n\nG = nx.DiGraph()\nfor line in graph.split('\\n'):\n    node, edges = line.split(':')\n    node = int(node.strip())\n    for edge in edges[1:-1].split('), ('):\n        neighbor, weight = edge.strip('()').split(', ')\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(17, 14, G, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 282, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In an undirected graph, the nodes are numbered from 0 to 9, and the edges are: an edge from node 0 to node 8 with capacity 9, an edge from node 1 to node 8 with capacity 3, an edge from node 1 to node 4 with capacity 4, an edge from node 2 to node 6 with capacity 9, an edge from node 2 to node 8 with capacity 8, an edge from node 2 to node 7 with capacity 2, an edge from node 3 to node 5 with capacity 2, an edge from node 3 to node 0 with capacity 6, an edge from node 3 to node 1 with capacity 3, an edge from node 4 to node 0 with capacity 7, an edge from node 5 to node 2 with capacity 7, an edge from node 5 to node 0 with capacity 9, an edge from node 6 to node 3 with capacity 6, an edge from node 7 to node 1 with capacity 2, an edge from node 8 to node 2 with capacity 1, an edge from node 9 to node 5 with capacity 3, an edge from node 9 to node 4 with capacity 5, an edge from node 9 to node 3 with capacity 4, an edge from node 9 to node 7 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 0\nflow_value, flow_dict = nx.maximum_flow(G, 2, 0, capacity='weight')\nprint(flow_value)\n```"}, {"id": 283, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(3, weight:15), (4, weight:8), (8, weight:4), (11, weight:17), (12, weight:1)],\nnode1: [(3, weight:16), (14, weight:14), (11, weight:5)],\nnode2: [(14, weight:14), (12, weight:8), (7, weight:1)],\nnode3: [(6, weight:16), (1, weight:20), (0, weight:9), (13, weight:15)],\nnode4: [(1, weight:9), (9, weight:13), (15, weight:2), (14, weight:20), (11, weight:5), (2, weight:17)],\nnode5: [(6, weight:20), (1, weight:20), (15, weight:19), (3, weight:16), (10, weight:17)],\nnode6: [(15, weight:11), (3, weight:9), (13, weight:1)],\nnode7: [(4, weight:11), (14, weight:12), (11, weight:3), (12, weight:18), (0, weight:5), (13, weight:3)],\nnode8: [(15, weight:10), (14, weight:2)],\nnode9: [(3, weight:2), (14, weight:17), (12, weight:15), (2, weight:5)],\nnode10: [(6, weight:2), (9, weight:9), (14, weight:4), (11, weight:18), (12, weight:11), (7, weight:3)],\nnode11: [(9, weight:15), (12, weight:3)],\nnode12: [(6, weight:6), (0, weight:14), (10, weight:11)],\nnode13: [(1, weight:11), (9, weight:20), (8, weight:19), (0, weight:14), (2, weight:15)],\nnode14: [(6, weight:20), (1, weight:4), (12, weight:1)],\nnode15: [(9, weight:17), (11, weight:1), (12, weight:9)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node_int = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node_int, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 14 to node 12\nflow_value, flow_dict = nx.maximum_flow(G, 14, 12, capacity='weight')\nprint(flow_value)\n```"}, {"id": 284, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(8, weight:10), (3, weight:9), (13, weight:18), (14, weight:15)],\nnode1: [(8, weight:4), (12, weight:3), (7, weight:4)],\nnode2: [(8, weight:20), (4, weight:1)],\nnode3: [(9, weight:9), (15, weight:9), (12, weight:15), (7, weight:7), (4, weight:13)],\nnode4: [(0, weight:11), (10, weight:15)],\nnode5: [(0, weight:20), (15, weight:7), (12, weight:11), (6, weight:12), (11, weight:18)],\nnode6: [(2, weight:5), (1, weight:15), (12, weight:9), (7, weight:11)],\nnode7: [(10, weight:2), (12, weight:15), (13, weight:19), (6, weight:17), (4, weight:16)],\nnode8: [(9, weight:4)],\nnode9: [(3, weight:2), (15, weight:15), (10, weight:4), (13, weight:19), (11, weight:19), (14, weight:17)],\nnode10: [(11, weight:5)],\nnode11: [(5, weight:8), (6, weight:16), (4, weight:18)],\nnode12: [(9, weight:13), (2, weight:3), (15, weight:8), (1, weight:14), (4, weight:9), (11, weight:5), (14, weight:18)],\nnode13: [(0, weight:9), (10, weight:16), (14, weight:17)],\nnode14: [(3, weight:5), (15, weight:5), (5, weight:18), (6, weight:18)],\nnode15: [(5, weight:13)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'\\((\\d+), weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 2 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 2, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 285, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 7, and the edges are: an edge from node 1 to node 6 with capacity 10, an edge from node 3 to node 0 with capacity 6, an edge from node 4 to node 0 with capacity 6, an edge from node 5 to node 6 with capacity 5, an edge from node 5 to node 1 with capacity 1, an edge from node 6 to node 1 with capacity 2, an edge from node 7 to node 5 with capacity 7, an edge from node 7 to node 4 with capacity 5, an edge from node 7 to node 1 with capacity 10, an edge from node 7 to node 0 with capacity 1.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 7 to node 1\nflow_value, flow_dict = nx.maximum_flow(G, 7, 1, capacity='weight')\nprint(flow_value)\n```"}, {"id": 286, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nthe nodes are numbered from 0 to 12, and the edges are:\nan edge from node 0 to node 2 with capacity 7,\nan edge from node 0 to node 11 with capacity 20,\nan edge from node 0 to node 12 with capacity 2,\nan edge from node 1 to node 5 with capacity 4,\nan edge from node 1 to node 6 with capacity 9,\nan edge from node 1 to node 8 with capacity 5,\nan edge from node 2 to node 4 with capacity 8,\nan edge from node 2 to node 9 with capacity 7,\nan edge from node 3 to node 7 with capacity 11,\nan edge from node 3 to node 6 with capacity 8,\nan edge from node 3 to node 8 with capacity 1,\nan edge from node 4 to node 7 with capacity 20,\nan edge from node 4 to node 8 with capacity 16,\nan edge from node 5 to node 2 with capacity 19,\nan edge from node 6 to node 7 with capacity 13,\nan edge from node 6 to node 4 with capacity 3,\nan edge from node 6 to node 0 with capacity 3,\nan edge from node 6 to node 12 with capacity 15,\nan edge from node 7 to node 11 with capacity 3,\nan edge from node 7 to node 10 with capacity 2,\nan edge from node 7 to node 0 with capacity 4,\nan edge from node 8 to node 1 with capacity 4,\nan edge from node 8 to node 2 with capacity 4,\nan edge from node 8 to node 11 with capacity 18,\nan edge from node 8 to node 9 with capacity 5,\nan edge from node 9 to node 2 with capacity 3,\nan edge from node 9 to node 3 with capacity 7,\nan edge from node 11 to node 2 with capacity 4,\nan edge from node 11 to node 10 with capacity 8,\nan edge from node 11 to node 4 with capacity 7,\nan edge from node 11 to node 6 with capacity 2,\nan edge from node 11 to node 8 with capacity 1,\nan edge from node 12 to node 10 with capacity 8,\nan edge from node 12 to node 7 with capacity 16,\nan edge from node 12 to node 4 with capacity 7,\nan edge from node 12 to node 8 with capacity 14.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 11 to node 5\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 11, 5, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 287, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(11, capacity:10), (5, capacity:2), (10, capacity:3), (9, capacity:11)],\nnode1: [(4, capacity:18), (10, capacity:18), (12, capacity:5), (9, capacity:14), (0, capacity:16)],\nnode2: [(5, capacity:18), (10, capacity:19)],\nnode3: [(4, capacity:17), (15, capacity:14), (13, capacity:13), (12, capacity:16), (9, capacity:2)],\nnode4: [(11, capacity:6), (5, capacity:12), (15, capacity:19), (10, capacity:2), (12, capacity:13), (6, capacity:3), (0, capacity:16)],\nnode5: [(11, capacity:15), (4, capacity:2), (13, capacity:5), (16, capacity:5)],\nnode6: [(15, capacity:16), (14, capacity:14)],\nnode7: [(13, capacity:10)],\nnode8: [(7, capacity:13), (3, capacity:2), (1, capacity:4)],\nnode9: [(4, capacity:18), (10, capacity:19), (8, capacity:18)],\nnode10: [(3, capacity:10), (4, capacity:1), (15, capacity:16), (14, capacity:6), (12, capacity:7)],\nnode11: [(2, capacity:13), (3, capacity:1), (15, capacity:14)],\nnode12: [(2, capacity:5), (8, capacity:7), (6, capacity:14), (1, capacity:1)],\nnode13: [(11, capacity:15), (2, capacity:12), (16, capacity:5), (8, capacity:10), (6, capacity:2), (1, capacity:20)],\nnode14: [(11, capacity:10), (2, capacity:8), (5, capacity:4), (16, capacity:20), (12, capacity:14), (9, capacity:15), (1, capacity:17)],\nnode15: [(5, capacity:16), (3, capacity:3), (4, capacity:4), (13, capacity:16), (9, capacity:1)],\nnode16: [(7, capacity:12), (11, capacity:15), (2, capacity:19), (3, capacity:3), (15, capacity:3), (9, capacity:15)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+) capacity:(\\d+)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Find all matches\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 13 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow_cutoff(G, 13, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 288, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph,\nnode0: [(13, weight:3), (16, weight:1), (14, weight:9)],\nnode1: [(10, weight:17), (15, weight:11)],\nnode2: [(0, weight:19), (12, weight:12), (4, weight:9), (8, weight:17), (17, weight:8)],\nnode3: [(9, weight:15), (12, weight:6), (14, weight:6), (17, weight:3)],\nnode4: [(8, weight:17), (6, weight:15), (11, weight:17), (17, weight:16)],\nnode5: [(10, weight:12), (3, weight:20), (14, weight:15), (7, weight:7), (2, weight:9)],\nnode6: [(13, weight:1), (16, weight:6), (14, weight:10), (18, weight:19), (2, weight:1), (1, weight:15), (5, weight:9)],\nnode7: [(16, weight:13), (8, weight:9), (11, weight:15), (17, weight:18)],\nnode8: [(13, weight:16), (12, weight:5), (15, weight:6), (7, weight:18), (1, weight:6), (11, weight:16), (17, weight:15)],\nnode9: [(15, weight:10), (8, weight:13), (5, weight:3)],\nnode10: [(3, weight:9), (14, weight:16), (4, weight:1), (6, weight:5), (17, weight:19)],\nnode11: [(9, weight:20), (19, weight:3), (13, weight:19)],\nnode12: [(16, weight:14), (6, weight:8)],\nnode13: [(9, weight:13), (12, weight:6), (18, weight:11), (7, weight:14), (6, weight:3)],\nnode14: [(3, weight:7), (4, weight:3), (6, weight:11)],\nnode15: [(19, weight:5), (16, weight:4), (14, weight:3), (4, weight:12), (7, weight:20), (6, weight:1), (1, weight:2), (11, weight:12)],\nnode16: [(14, weight:20), (15, weight:4), (11, weight:8)],\nnode17: [(13, weight:11), (16, weight:3), (4, weight:7), (8, weight:10), (6, weight:5), (5, weight:7)],\nnode18: [(10, weight:5), (9, weight:9), (13, weight:1), (12, weight:12), (16, weight:10), (4, weight:12), (8, weight:2), (2, weight:4)],\nnode19: [(9, weight:8), (12, weight:17), (15, weight:18), (4, weight:6), (6, weight:5), (17, weight:13)]\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'node(\\d+): \\[\\((.*?)\\)\\]'\nedge_pattern = r'(\\d+), \\(weight:(\\d+)\\)'\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Extract nodes and edges\nmatches = re.findall(pattern, graph)\nfor node, edges in matches:\n    node = int(node)\n    edge_matches = re.findall(edge_pattern, edges)\n    for neighbor, weight in edge_matches:\n        G.add_edge(node, int(neighbor), weight=int(weight))\n\n# Calculate maximum flow from node 0 to node 8\nflow_value, flow_dict = nx.maximum_flow(G, 0, 8, capacity='weight')\nprint(flow_value)\n```"}, {"id": 289, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"\"\"In a directed graph, the nodes are numbered from 0 to 10, and the edges are:\nan edge from node 0 to node 5 with capacity 19,\nan edge from node 0 to node 1 with capacity 13,\nan edge from node 1 to node 2 with capacity 8,\nan edge from node 1 to node 8 with capacity 13,\nan edge from node 1 to node 7 with capacity 13,\nan edge from node 1 to node 9 with capacity 9,\nan edge from node 2 to node 3 with capacity 2,\nan edge from node 2 to node 9 with capacity 4,\nan edge from node 2 to node 6 with capacity 8,\nan edge from node 3 to node 6 with capacity 13,\nan edge from node 4 to node 2 with capacity 10,\nan edge from node 4 to node 3 with capacity 16,\nan edge from node 4 to node 8 with capacity 8,\nan edge from node 4 to node 7 with capacity 4,\nan edge from node 5 to node 2 with capacity 17,\nan edge from node 5 to node 0 with capacity 12,\nan edge from node 5 to node 3 with capacity 4,\nan edge from node 5 to node 6 with capacity 15,\nan edge from node 7 to node 4 with capacity 5,\nan edge from node 7 to node 2 with capacity 14,\nan edge from node 7 to node 10 with capacity 7,\nan edge from node 7 to node 0 with capacity 13,\nan edge from node 7 to node 3 with capacity 12,\nan edge from node 7 to node 1 with capacity 6,\nan edge from node 7 to node 6 with capacity 4,\nan edge from node 8 to node 5 with capacity 13,\nan edge from node 8 to node 10 with capacity 16,\nan edge from node 8 to node 6 with capacity 9,\nan edge from node 9 to node 4 with capacity 20,\nan edge from node 9 to node 2 with capacity 15,\nan edge from node 9 to node 8 with capacity 18,\nan edge from node 9 to node 7 with capacity 16,\nan edge from node 10 to node 5 with capacity 17.\"\"\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 4 to node 3\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 4, 3, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 290, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 1 with capacity 10, an edge from node 0 to node 4 with capacity 5, an edge from node 1 to node 0 with capacity 9, an edge from node 1 to node 6 with capacity 8, an edge from node 2 to node 4 with capacity 2, an edge from node 4 to node 1 with capacity 9, an edge from node 4 to node 2 with capacity 2, an edge from node 5 to node 1 with capacity 2, an edge from node 5 to node 2 with capacity 10, an edge from node 5 to node 6 with capacity 6, an edge from node 6 to node 3 with capacity 6.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 5 to node 6\ntry:\n    flow_value, flow_dict = nx.maximum_flow(G, 5, 6, capacity='weight')\n    print(flow_value)\nexcept:\n    print(\"error\")\n```"}, {"id": 291, "code": "```python\nimport re\nimport networkx as nx\n\ngraph = \"In a directed graph, the nodes are numbered from 0 to 6, and the edges are: an edge from node 0 to node 2 with capacity 7, an edge from node 0 to node 5 with capacity 4, an edge from node 1 to node 3 with capacity 4, an edge from node 1 to node 2 with capacity 8, an edge from node 3 to node 6 with capacity 1, an edge from node 5 to node 2 with capacity 1, an edge from node 5 to node 0 with capacity 9, an edge from node 5 to node 4 with capacity 8, an edge from node 6 to node 3 with capacity 9, an edge from node 6 to node 0 with capacity 1, an edge from node 6 to node 4 with capacity 5.\"\n\n# Regular expression to extract edges with weights\npattern = r'an edge from node (\\d+) to node (\\d+) with capacity (\\d+)'\nmatches = re.findall(pattern, graph)\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add edges with weights to the graph\nfor node1, node2, weight in matches:\n    G.add_edge(int(node1), int(node2), weight=int(weight))\n\n# Calculate maximum flow from node 1 to node 2\nflow_value, flow_dict = nx.maximum_flow(G, 1, 2, capacity='weight')\nprint(flow_value)\n```"}]