{"0": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 10, 1), (3, 0, 17), (3, 2, 15), (4, 0, 13), (4, 2, 14),\n    (5, 1, 7), (5, 4, 16), (6, 7, 19), (6, 10, 3), (6, 1, 18),\n    (6, 8, 10), (7, 8, 4), (7, 3, 15), (8, 7, 18), (8, 0, 7),\n    (8, 4, 19), (8, 2, 14), (9, 1, 8), (9, 8, 12), (9, 4, 7),\n    (10, 8, 9), (10, 6, 1), (10, 5, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 7)\nprint(max_flow)\n```"}, "1": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 8, 9), (0, 6, 8), (0, 5, 1), (1, 11, 12), (3, 5, 6), (3, 0, 17),\n    (4, 11, 7), (4, 8, 17), (4, 9, 4), (5, 11, 19), (6, 7, 11), (6, 10, 15),\n    (6, 1, 12), (6, 0, 3), (7, 3, 3), (7, 0, 12), (9, 2, 7), (9, 1, 19),\n    (10, 5, 4), (10, 9, 13), (10, 1, 12), (10, 3, 2), (11, 10, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(10, 11))\n```"}, "2": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 6, 3), (0, 1, 4), (0, 4, 7), (0, 5, 2),\n    (1, 6, 8), (1, 0, 6), (1, 4, 9),\n    (2, 6, 7), (2, 0, 5), (2, 3, 5),\n    (3, 4, 2), (3, 5, 1),\n    (4, 6, 7), (4, 3, 6),\n    (5, 0, 9), (5, 1, 6), (5, 4, 2),\n    (6, 0, 10), (6, 3, 7), (6, 2, 2), (6, 1, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 3))\n```"}, "3": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 7, 20), (0, 10, 7), (0, 17, 4), (0, 5, 12),\n    (1, 2, 14), (1, 12, 12), (1, 10, 2), (2, 7, 3),\n    (2, 4, 1), (2, 14, 16), (2, 16, 11), (2, 9, 11),\n    (3, 13, 19), (3, 1, 9), (3, 12, 19), (3, 0, 4),\n    (4, 13, 18), (4, 8, 5), (4, 17, 11), (4, 15, 20),\n    (4, 5, 17), (5, 11, 9), (5, 16, 5), (5, 9, 18),\n    (6, 2, 11), (6, 4, 2), (6, 0, 5), (6, 10, 20),\n    (6, 14, 10), (7, 13, 5), (7, 1, 9), (7, 2, 1),\n    (7, 3, 12), (7, 9, 3), (8, 7, 13), (8, 2, 2),\n    (8, 11, 15), (8, 6, 15), (8, 9, 13), (8, 5, 20),\n    (9, 7, 10), (9, 1, 1), (9, 6, 1), (9, 14, 9),\n    (9, 16, 6), (10, 13, 8), (10, 1, 14), (10, 11, 9),\n    (10, 15, 11), (11, 7, 20), (11, 12, 20), (12, 13, 16),\n    (12, 3, 14), (12, 6, 15), (13, 0, 9), (13, 17, 5),\n    (13, 9, 2), (14, 1, 4), (14, 8, 5), (14, 5, 17),\n    (15, 1, 4), (15, 0, 9), (15, 10, 2), (16, 7, 6),\n    (16, 1, 18), (16, 3, 5), (16, 17, 7), (16, 5, 4),\n    (17, 13, 5), (17, 7, 7), (17, 2, 7), (17, 12, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "4": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 1, 19), (0, 8, 13), (0, 7, 1), (0, 2, 19),\n    (1, 9, 5), (1, 14, 5), (1, 5, 17), (2, 7, 19),\n    (2, 0, 12), (2, 4, 5), (3, 10, 11), (3, 6, 17),\n    (3, 16, 18), (4, 1, 3), (4, 3, 17), (4, 9, 14),\n    (4, 0, 1), (4, 11, 4), (4, 5, 12), (5, 8, 13),\n    (5, 10, 5), (5, 13, 1), (6, 0, 13), (7, 1, 17),\n    (8, 1, 17), (8, 15, 6), (8, 14, 17), (8, 13, 10),\n    (8, 16, 5), (8, 4, 8), (9, 7, 11), (9, 14, 11),\n    (9, 12, 4), (9, 0, 12), (9, 4, 6), (10, 1, 18),\n    (11, 1, 6), (11, 3, 18), (11, 8, 13), (11, 12, 14),\n    (11, 16, 6), (11, 4, 10), (11, 5, 13), (12, 7, 14),\n    (12, 10, 9), (12, 16, 1), (12, 4, 1), (13, 8, 2),\n    (13, 9, 5), (13, 15, 19), (13, 6, 5), (13, 5, 5),\n    (14, 10, 6), (14, 11, 6), (14, 5, 9), (15, 7, 19),\n    (15, 11, 9), (16, 1, 7), (16, 7, 14), (16, 9, 4),\n    (16, 10, 19), (16, 2, 12), (16, 5, 20)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "5": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 6, 5), (0, 3, 7), (1, 7, 7), (1, 2, 3), (2, 7, 7), (2, 4, 5),\n    (3, 5, 7), (3, 1, 8), (4, 0, 3), (5, 7, 5), (6, 5, 6), (6, 7, 6),\n    (6, 0, 9), (7, 4, 4), (7, 1, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 6)\nprint(max_flow)\n```"}, "6": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 18, 16), (0, 11, 10), (1, 12, 3), (1, 4, 1), (1, 8, 18),\n    (2, 9, 9), (2, 16, 15), (2, 17, 2), (2, 4, 5), (3, 18, 1),\n    (3, 10, 15), (3, 6, 12), (3, 0, 10), (4, 11, 15), (4, 0, 11),\n    (4, 7, 20), (5, 15, 2), (5, 12, 13), (6, 16, 13), (6, 17, 17),\n    (6, 18, 9), (6, 14, 11), (6, 13, 13), (6, 0, 19), (6, 3, 6),\n    (7, 17, 9), (7, 18, 19), (7, 12, 20), (8, 15, 10), (8, 12, 1),\n    (8, 4, 12), (8, 3, 1), (9, 6, 6), (9, 0, 1), (9, 4, 4),\n    (9, 8, 11), (9, 3, 16), (10, 6, 6), (10, 11, 5), (10, 13, 17),\n    (10, 3, 13), (11, 10, 11), (11, 6, 20), (11, 12, 3), (12, 6, 16),\n    (13, 2, 16), (13, 17, 7), (13, 18, 4), (13, 10, 13), (13, 5, 4),\n    (13, 12, 1), (14, 2, 2), (14, 9, 3), (14, 17, 6), (14, 18, 10),\n    (14, 5, 16), (14, 4, 10), (15, 18, 1), (15, 10, 1), (15, 5, 4),\n    (15, 14, 18), (15, 13, 3), (16, 2, 17), (16, 9, 7), (16, 14, 3),\n    (16, 13, 3), (16, 12, 20), (17, 9, 4), (17, 4, 1), (17, 3, 2),\n    (18, 9, 19), (18, 16, 17), (18, 17, 6), (18, 14, 9)\n]\n\ng = Graph(19)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(18, 7))\n```"}, "7": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 4, 9), (0, 7, 17), (0, 14, 15), (0, 5, 17),\n    (1, 15, 10), (1, 10, 16), (1, 6, 11), (1, 12, 7),\n    (2, 10, 17), (2, 11, 20), (2, 5, 6),\n    (3, 1, 18), (3, 2, 1), (3, 0, 4), (3, 11, 2),\n    (4, 16, 5), (4, 12, 20), (4, 5, 11),\n    (5, 4, 11), (5, 7, 5), (5, 2, 9), (5, 0, 12),\n    (6, 1, 7), (6, 10, 8), (6, 2, 9), (6, 0, 17), (6, 5, 16),\n    (7, 13, 4), (7, 6, 6),\n    (8, 15, 7), (8, 10, 18), (8, 13, 16),\n    (9, 7, 19), (9, 3, 6), (9, 13, 8), (9, 5, 20),\n    (10, 16, 11), (10, 11, 15), (10, 12, 11), (10, 5, 19),\n    (11, 4, 16), (11, 10, 18), (11, 2, 8), (11, 13, 3),\n    (12, 14, 2),\n    (13, 1, 8), (13, 4, 13), (13, 15, 12), (13, 16, 12), (13, 9, 6),\n    (14, 4, 8), (14, 2, 20), (14, 13, 1), (14, 9, 11), (14, 6, 13), (14, 8, 3), (14, 5, 16),\n    (15, 10, 8), (15, 8, 6),\n    (16, 7, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 15\nsink = 4\nprint(g.edmonds_karp(source, sink))\n```"}, "8": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 9, 15), (0, 1, 20), (0, 7, 16), (1, 3, 10), (1, 8, 15), (1, 0, 6),\n    (1, 5, 2), (2, 4, 13), (2, 8, 4), (2, 1, 7), (2, 7, 16), (4, 3, 20),\n    (4, 8, 16), (4, 0, 12), (4, 9, 12), (5, 11, 18), (5, 3, 10), (5, 10, 14),\n    (6, 4, 3), (6, 8, 19), (6, 5, 10), (6, 1, 10), (7, 3, 17), (7, 8, 12),\n    (7, 0, 4), (7, 1, 6), (7, 10, 10), (8, 11, 17), (8, 3, 11), (8, 0, 1),\n    (8, 5, 15), (8, 2, 2), (8, 6, 14), (8, 1, 14), (8, 10, 5), (9, 4, 6),\n    (9, 8, 7), (9, 5, 5), (10, 11, 18), (10, 3, 1), (10, 8, 11), (10, 2, 2),\n    (10, 7, 13), (11, 0, 3), (11, 10, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 3))\n```"}, "9": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 7, 14), (0, 1, 10), (0, 3, 5), (1, 6, 15), (1, 2, 3), (1, 10, 5), (1, 5, 16),\n    (1, 17, 18), (1, 4, 20), (2, 15, 2), (2, 11, 19), (2, 12, 16), (3, 10, 12), (3, 18, 9),\n    (3, 5, 16), (3, 13, 12), (3, 8, 11), (3, 4, 5), (4, 2, 7), (4, 16, 12), (4, 12, 13),\n    (5, 1, 5), (5, 11, 16), (5, 12, 7), (6, 2, 5), (6, 11, 13), (6, 3, 10), (6, 17, 6),\n    (7, 2, 6), (7, 3, 9), (7, 0, 10), (7, 12, 4), (8, 7, 9), (8, 18, 16), (8, 16, 5),\n    (8, 5, 3), (8, 3, 8), (9, 6, 16), (9, 14, 7), (9, 10, 15), (9, 3, 12), (9, 8, 9),\n    (10, 14, 12), (10, 18, 6), (10, 16, 16), (10, 5, 17), (10, 17, 9), (11, 6, 10),\n    (11, 2, 12), (11, 16, 8), (11, 3, 15), (11, 12, 19), (12, 6, 5), (12, 11, 10),\n    (12, 8, 16), (13, 6, 15), (13, 4, 2), (14, 10, 8), (14, 18, 13), (14, 5, 11),\n    (14, 0, 4), (14, 4, 18), (15, 14, 7), (15, 7, 5), (15, 1, 7), (15, 0, 2), (15, 12, 18),\n    (16, 2, 9), (16, 10, 19), (16, 17, 1), (16, 8, 7), (16, 4, 6), (17, 2, 7), (17, 14, 19),\n    (17, 1, 14), (17, 18, 14), (17, 5, 4), (17, 12, 2), (18, 10, 19), (18, 11, 10),\n    (18, 3, 6), (18, 12, 12)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(8, 3))\n```"}, "10": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 5, 20), (0, 15, 11), (0, 12, 12), (0, 14, 12),\n    (1, 9, 2), (1, 12, 12), (1, 17, 6), (1, 14, 14),\n    (2, 9, 9), (2, 4, 15), (2, 8, 3), (3, 18, 3),\n    (3, 15, 2), (3, 4, 13), (3, 7, 13), (3, 14, 3),\n    (3, 10, 1), (4, 12, 6), (4, 14, 1), (5, 8, 12),\n    (5, 14, 2), (5, 10, 12), (6, 11, 16), (6, 9, 14),\n    (6, 7, 16), (6, 17, 17), (6, 10, 7), (7, 11, 1),\n    (7, 3, 14), (8, 6, 8), (8, 11, 6), (8, 3, 2),\n    (8, 9, 10), (8, 10, 5), (9, 16, 17), (9, 5, 3),\n    (9, 3, 12), (9, 15, 8), (9, 8, 5), (9, 13, 16),\n    (10, 3, 11), (10, 4, 16), (10, 17, 6), (10, 14, 4),\n    (11, 6, 13), (11, 16, 19), (11, 3, 3), (11, 8, 19),\n    (11, 0, 6), (12, 2, 13), (12, 5, 5), (12, 7, 12),\n    (12, 14, 4), (13, 1, 18), (13, 5, 13), (13, 12, 17),\n    (14, 18, 4), (14, 2, 1), (14, 16, 7), (14, 4, 8),\n    (14, 12, 11), (14, 10, 4), (15, 9, 10), (15, 8, 15),\n    (15, 0, 11), (16, 11, 2), (16, 12, 20), (16, 8, 5),\n    (17, 12, 8), (17, 7, 20), (17, 8, 3), (18, 6, 9),\n    (18, 5, 20), (18, 3, 6), (18, 4, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 16))\n```"}, "11": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (1, 5, 8),\n    (2, 0, 8),\n    (3, 6, 4),\n    (4, 6, 3),\n    (5, 1, 3),\n    (5, 3, 8),\n    (6, 5, 4),\n    (6, 1, 10),\n    (6, 7, 10),\n    (7, 5, 8),\n    (7, 2, 10),\n    (7, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 5))\n```"}, "12": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(1, 3, 6)\ng.add_edge(1, 0, 9)\ng.add_edge(2, 1, 4)\ng.add_edge(3, 1, 4)\ng.add_edge(4, 3, 1)\ng.add_edge(4, 5, 2)\ng.add_edge(5, 1, 4)\ng.add_edge(5, 0, 7)\n\nprint(g.edmonds_karp(4, 0))\n```"}, "13": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 3, 16), (0, 15, 5), (0, 4, 11), (1, 10, 5), (1, 7, 4), (1, 15, 17),\n    (1, 12, 16), (1, 0, 15), (2, 13, 16), (2, 3, 9), (2, 4, 10), (3, 4, 20),\n    (3, 11, 2), (4, 13, 14), (4, 3, 16), (4, 12, 20), (5, 16, 18), (5, 15, 1),\n    (5, 4, 2), (5, 17, 12), (6, 13, 5), (6, 3, 17), (6, 15, 12), (6, 4, 20),\n    (6, 0, 10), (7, 8, 15), (7, 16, 1), (7, 1, 13), (7, 5, 13), (7, 15, 17),\n    (7, 4, 10), (7, 14, 9), (7, 6, 1), (8, 7, 10), (8, 14, 17), (8, 6, 12),\n    (9, 8, 16), (9, 10, 16), (9, 2, 15), (9, 7, 18), (10, 8, 18), (10, 15, 8),\n    (10, 12, 8), (10, 0, 13), (11, 16, 17), (11, 1, 14), (11, 17, 7), (12, 13, 1),\n    (12, 16, 3), (12, 15, 7), (12, 17, 2), (12, 6, 1), (13, 16, 16), (13, 9, 5),\n    (13, 12, 8), (14, 8, 11), (14, 17, 16), (14, 0, 18), (14, 11, 19), (15, 13, 14),\n    (15, 10, 17), (15, 4, 2), (15, 9, 19), (16, 13, 18), (16, 8, 10), (16, 15, 2),\n    (16, 17, 10), (16, 12, 16), (16, 6, 9), (16, 11, 3), (17, 10, 19), (17, 2, 13)\n]\n\ng = Graph(18)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 11\nsink = 17\nprint(g.edmonds_karp(source, sink))\n```"}, "14": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 1, 10), (0, 8, 14), (0, 2, 3), (0, 3, 14), (0, 16, 6),\n    (1, 12, 18), (1, 6, 7), (1, 5, 19), (2, 11, 14), (2, 5, 3),\n    (2, 16, 9), (2, 10, 6), (3, 8, 10), (4, 9, 14), (4, 15, 15),\n    (4, 11, 16), (4, 8, 3), (5, 11, 16), (5, 13, 7), (6, 9, 2),\n    (6, 7, 5), (6, 8, 20), (6, 4, 6), (6, 5, 13), (7, 17, 20),\n    (7, 15, 3), (7, 8, 3), (7, 2, 15), (7, 5, 15), (8, 2, 14),\n    (8, 13, 10), (9, 7, 3), (9, 15, 4), (9, 14, 10), (9, 2, 17),\n    (10, 17, 17), (10, 9, 8), (10, 14, 20), (10, 13, 12), (10, 5, 6),\n    (10, 16, 13), (11, 1, 20), (11, 12, 16), (11, 4, 18), (11, 10, 20),\n    (12, 1, 10), (12, 17, 14), (12, 2, 13), (12, 4, 1), (12, 6, 9),\n    (12, 0, 20), (12, 3, 15), (13, 1, 20), (13, 17, 18), (13, 14, 8),\n    (13, 8, 17), (15, 11, 13), (15, 4, 8), (16, 7, 12), (16, 15, 16),\n    (16, 8, 16), (16, 4, 14), (16, 10, 14), (17, 15, 10), (17, 11, 1),\n    (17, 14, 11), (17, 2, 18), (17, 13, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 8))\n```"}, "15": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 3, 2), (0, 1, 10), (0, 9, 3), (0, 6, 3), (0, 5, 12), (0, 8, 11),\n    (1, 0, 11), (1, 3, 11), (1, 10, 10), (1, 5, 17), (2, 1, 15), (2, 11, 18),\n    (2, 6, 17), (3, 11, 17), (3, 9, 2), (3, 12, 10), (4, 0, 19), (4, 7, 8),\n    (4, 6, 15), (4, 12, 2), (5, 0, 13), (5, 10, 16), (5, 9, 4), (5, 6, 9),\n    (5, 12, 18), (6, 2, 17), (6, 1, 8), (6, 8, 5), (7, 3, 17), (7, 9, 9),\n    (7, 5, 20), (7, 4, 10), (8, 2, 2), (8, 0, 4), (8, 1, 13), (8, 4, 14),\n    (9, 5, 19), (10, 9, 18), (10, 4, 11), (12, 10, 2), (12, 11, 8),\n    (12, 7, 17), (12, 4, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(12, 4))\n```"}, "16": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 1, 16), (0, 7, 10), (0, 3, 18), (0, 9, 8), (0, 5, 1),\n    (1, 7, 15), (1, 6, 7), (1, 9, 9), (1, 4, 13), (1, 13, 7),\n    (2, 6, 9), (3, 1, 10), (3, 6, 19), (3, 4, 2), (3, 11, 17),\n    (4, 6, 2), (4, 11, 9), (4, 8, 6), (5, 7, 2), (5, 0, 8),\n    (5, 3, 5), (5, 4, 7), (6, 0, 8), (6, 3, 8), (6, 4, 7),\n    (6, 13, 8), (6, 8, 18), (7, 3, 16), (7, 9, 2), (7, 10, 15),\n    (7, 12, 5), (8, 1, 15), (8, 3, 13), (8, 13, 13), (8, 2, 20),\n    (8, 5, 9), (8, 10, 9), (8, 12, 6), (9, 1, 18), (9, 4, 10),\n    (9, 13, 14), (10, 1, 15), (10, 11, 3), (10, 5, 5), (11, 3, 14),\n    (11, 9, 12), (11, 2, 7), (12, 13, 1), (13, 7, 16), (13, 11, 1),\n    (13, 8, 13), (13, 12, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 12\nprint(g.edmonds_karp(source, sink))\n```"}, "17": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 1, 19), (0, 3, 13), (0, 2, 9), (0, 8, 12),\n    (2, 6, 17), (2, 3, 7), (3, 0, 13), (3, 1, 12),\n    (4, 6, 1), (4, 1, 17), (4, 3, 4), (5, 4, 20),\n    (5, 2, 3), (6, 9, 13), (6, 4, 18), (6, 3, 12),\n    (6, 7, 4), (6, 10, 11), (7, 9, 16), (7, 0, 9),\n    (7, 1, 7), (8, 9, 14), (9, 1, 1), (10, 6, 20),\n    (10, 8, 12)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 0)\nprint(max_flow)\n```"}, "18": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 4, 1), (0, 10, 17), (0, 8, 19), (2, 6, 1), (2, 5, 14),\n    (3, 7, 5), (3, 6, 3), (3, 8, 19), (3, 11, 12), (3, 2, 13),\n    (3, 5, 13), (4, 1, 1), (4, 0, 11), (5, 10, 6), (5, 3, 3),\n    (6, 4, 5), (6, 1, 12), (6, 5, 2), (7, 6, 1), (8, 1, 8),\n    (9, 7, 6), (9, 3, 15), (9, 0, 2), (10, 4, 6), (10, 1, 2),\n    (11, 7, 7), (11, 6, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "19": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 6, 1),\n    (0, 7, 10),\n    (2, 1, 9),\n    (2, 7, 8),\n    (3, 1, 9),\n    (3, 6, 10),\n    (3, 4, 7),\n    (4, 6, 4),\n    (5, 3, 7),\n    (5, 2, 9),\n    (6, 4, 1),\n    (7, 5, 8),\n    (7, 6, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 4))\n```"}, "20": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(1, 0, 4)\ng.add_edge(1, 3, 6)\ng.add_edge(1, 4, 1)\ng.add_edge(3, 1, 3)\ng.add_edge(3, 4, 6)\ng.add_edge(3, 2, 6)\ng.add_edge(4, 1, 7)\ng.add_edge(4, 2, 4)\n\nprint(g.edmonds_karp(1, 2))\n```"}, "21": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 3, 6),\n    (0, 6, 1),\n    (1, 5, 1),\n    (1, 0, 7),\n    (3, 1, 6),\n    (3, 6, 5),\n    (4, 2, 8),\n    (4, 0, 8),\n    (5, 3, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 6))\n```"}, "22": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 3, 17), (0, 1, 16), (1, 3, 8), (1, 0, 11), (1, 5, 3), (1, 8, 2), (1, 9, 4),\n    (2, 4, 5), (3, 8, 7), (3, 10, 10), (4, 1, 8), (5, 6, 13), (5, 10, 12), (5, 9, 18),\n    (6, 3, 14), (6, 4, 3), (6, 13, 9), (6, 9, 13), (6, 1, 13), (7, 4, 11), (7, 0, 8),\n    (7, 5, 12), (7, 10, 13), (7, 1, 3), (8, 11, 9), (8, 4, 11), (8, 7, 1), (8, 10, 11),\n    (9, 2, 2), (9, 5, 18), (9, 8, 7), (10, 0, 20), (10, 1, 14), (11, 0, 11), (11, 6, 13),\n    (11, 7, 14), (12, 2, 8), (12, 5, 13), (12, 8, 15), (12, 10, 10), (13, 3, 2), (13, 0, 19)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 6\nsink = 0\nprint(g.edmonds_karp(source, sink))\n```"}, "23": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 1, 7)\ng.add_edge(0, 3, 5)\ng.add_edge(0, 2, 1)\ng.add_edge(1, 5, 8)\ng.add_edge(2, 5, 8)\ng.add_edge(3, 1, 1)\ng.add_edge(3, 4, 8)\n\nprint(g.edmonds_karp(0, 5))\n```"}, "24": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 10, 10), (1, 13, 16), (2, 11, 2), (2, 9, 20), (2, 14, 9), (2, 3, 20),\n    (3, 0, 16), (3, 13, 10), (3, 11, 3), (3, 14, 6), (3, 1, 1), (4, 7, 15),\n    (4, 13, 9), (5, 0, 13), (5, 13, 7), (5, 4, 14), (5, 15, 15), (6, 7, 20),\n    (6, 9, 17), (6, 5, 2), (6, 14, 12), (6, 3, 6), (7, 0, 9), (7, 12, 13),\n    (7, 3, 8), (8, 6, 10), (8, 14, 18), (8, 15, 5), (8, 2, 15), (9, 13, 9),\n    (9, 11, 9), (9, 4, 14), (9, 5, 2), (10, 6, 7), (10, 4, 18), (10, 14, 10),\n    (10, 12, 19), (11, 0, 14), (11, 4, 7), (11, 14, 5), (11, 15, 2), (11, 1, 17),\n    (11, 8, 20), (11, 2, 20), (12, 7, 20), (12, 13, 16), (12, 9, 3), (12, 4, 3),\n    (13, 10, 14), (13, 11, 17), (13, 9, 13), (14, 10, 6), (14, 11, 3), (14, 12, 16),\n    (14, 3, 20), (14, 15, 4), (14, 2, 14), (15, 4, 10), (15, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "25": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 1, 4),\n    (1, 7, 4),\n    (1, 2, 3),\n    (1, 6, 5),\n    (2, 8, 5),\n    (2, 0, 10),\n    (2, 1, 4),\n    (3, 5, 1),\n    (3, 4, 1),\n    (4, 0, 9),\n    (4, 1, 6),\n    (4, 3, 2),\n    (5, 8, 1),\n    (5, 1, 8),\n    (6, 2, 3),\n    (6, 9, 2),\n    (7, 4, 7),\n    (8, 2, 8),\n    (8, 6, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 8)\nprint(max_flow)\n```"}, "26": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 5, 9), (0, 3, 4), (0, 6, 4), (0, 2, 9),\n    (1, 5, 5), (2, 0, 1), (4, 2, 3), (5, 3, 5),\n    (5, 2, 4), (6, 5, 2), (6, 1, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 3\nprint(g.edmonds_karp(source, sink))\n```"}, "27": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 10, 15), (0, 9, 1), (0, 3, 18), (1, 5, 2), (1, 8, 2), (1, 4, 3),\n    (2, 5, 16), (2, 10, 14), (2, 1, 6), (3, 9, 3), (3, 4, 5), (3, 12, 6),\n    (4, 10, 7), (4, 6, 4), (4, 9, 8), (5, 10, 18), (5, 1, 6), (5, 4, 8),\n    (6, 0, 17), (6, 1, 3), (6, 12, 13), (7, 5, 5), (7, 6, 7), (7, 11, 1),\n    (7, 12, 6), (8, 5, 17), (8, 6, 14), (8, 9, 4), (8, 4, 6), (9, 0, 9),\n    (9, 6, 13), (9, 4, 2), (10, 5, 10), (10, 8, 3), (10, 6, 8), (10, 9, 14),\n    (10, 3, 19), (11, 5, 9), (11, 2, 15), (11, 7, 3), (11, 4, 10), (12, 11, 15),\n    (12, 9, 8), (12, 1, 11), (12, 3, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(12, 5)\nprint(max_flow)\n```"}, "28": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 15, 4), (0, 11, 2), (0, 16, 8), (0, 14, 18), (1, 4, 20), (2, 4, 20),\n    (2, 7, 14), (2, 11, 3), (2, 8, 17), (3, 0, 3), (3, 6, 12), (4, 16, 5),\n    (5, 2, 9), (5, 15, 14), (5, 12, 11), (5, 3, 6), (5, 11, 12), (5, 9, 19),\n    (6, 2, 9), (6, 15, 7), (6, 12, 1), (6, 1, 12), (6, 16, 2), (6, 14, 20),\n    (7, 4, 18), (7, 5, 9), (7, 10, 6), (7, 11, 5), (7, 16, 16), (7, 6, 3),\n    (8, 15, 8), (8, 4, 11), (9, 2, 6), (9, 4, 6), (9, 12, 10), (9, 7, 20),\n    (9, 5, 18), (9, 11, 15), (10, 5, 11), (10, 3, 6), (10, 11, 15), (10, 13, 5),\n    (11, 15, 9), (11, 5, 3), (11, 1, 8), (11, 9, 2), (11, 13, 14), (11, 14, 4),\n    (12, 6, 13), (13, 7, 16), (14, 15, 20), (14, 7, 15), (14, 0, 7), (14, 5, 19),\n    (14, 1, 10), (14, 9, 13), (15, 1, 17), (15, 9, 6), (15, 14, 4), (15, 8, 15),\n    (15, 6, 1), (16, 12, 12), (16, 5, 11), (16, 10, 1), (16, 3, 16), (16, 9, 6),\n    (16, 6, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 10\nsink = 14\nprint(g.edmonds_karp(source, sink))\n```"}, "29": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append([v, w])\n        self.graph[v].append([u, 0])\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u]:\n                if visited[v] == False and capacity > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                for v, capacity in self.graph[parent[s]]:\n                    if v == s:\n                        path_flow = min(path_flow, capacity)\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                for i, (vertex, capacity) in enumerate(self.graph[u]):\n                    if vertex == v:\n                        self.graph[u][i][1] -= path_flow\n                for i, (vertex, capacity) in enumerate(self.graph[v]):\n                    if vertex == u:\n                        self.graph[v][i][1] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 2, 9)\ng.add_edge(2, 1, 8)\ng.add_edge(2, 4, 8)\ng.add_edge(3, 0, 5)\ng.add_edge(3, 1, 4)\ng.add_edge(3, 2, 5)\ng.add_edge(4, 1, 7)\ng.add_edge(4, 3, 1)\n\nprint(g.edmonds_karp(2, 1))\n```"}, "30": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 2, 2), (0, 6, 2), (0, 15, 13), (0, 16, 17), (0, 5, 12),\n    (1, 10, 8), (1, 4, 5), (1, 2, 15), (1, 0, 7), (1, 6, 9),\n    (1, 9, 19), (1, 5, 4), (2, 10, 15), (2, 4, 8), (2, 9, 5),\n    (2, 8, 2), (2, 3, 8), (2, 5, 6), (2, 11, 7), (3, 17, 13),\n    (3, 14, 4), (3, 2, 13), (3, 0, 5), (3, 8, 13), (3, 7, 12),\n    (4, 17, 20), (4, 10, 3), (4, 15, 20), (5, 12, 20), (5, 14, 13),\n    (5, 9, 2), (5, 11, 6), (6, 10, 20), (6, 2, 11), (6, 15, 13),\n    (6, 9, 14), (6, 8, 16), (6, 3, 8), (6, 7, 3), (7, 1, 15),\n    (7, 19, 15), (8, 12, 18), (8, 15, 2), (8, 18, 10), (8, 19, 11),\n    (8, 5, 7), (8, 7, 10), (9, 12, 17), (9, 4, 11), (9, 1, 5),\n    (9, 6, 15), (9, 15, 20), (9, 18, 14), (9, 8, 8), (9, 7, 19),\n    (10, 12, 4), (10, 17, 19), (10, 8, 12), (10, 11, 13), (11, 13, 18),\n    (11, 6, 15), (12, 17, 7), (12, 14, 19), (12, 10, 1), (12, 2, 1),\n    (12, 5, 20), (13, 17, 9), (13, 6, 16), (13, 18, 18), (13, 8, 20),\n    (13, 19, 8), (13, 7, 20), (14, 10, 7), (14, 6, 3), (14, 18, 13),\n    (14, 8, 13), (14, 11, 20), (15, 6, 18), (15, 9, 18), (15, 19, 9),\n    (15, 7, 3), (16, 17, 4), (16, 14, 17), (16, 2, 5), (16, 0, 18),\n    (16, 3, 12), (16, 11, 5), (17, 3, 15), (18, 12, 7), (18, 10, 6),\n    (18, 4, 10), (18, 0, 5), (18, 15, 18), (18, 11, 7), (19, 12, 9),\n    (19, 2, 4), (19, 0, 9), (19, 9, 16), (19, 8, 11), (19, 16, 17),\n    (19, 11, 8), (19, 7, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 0))\n```"}, "31": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 14, 9), (0, 13, 12), (0, 2, 5), (0, 1, 12), (0, 5, 7),\n    (1, 14, 5), (1, 3, 8), (2, 4, 19), (3, 8, 11), (3, 0, 3),\n    (3, 11, 5), (3, 1, 7), (3, 12, 8), (4, 14, 12), (4, 3, 16),\n    (4, 10, 11), (4, 11, 18), (4, 7, 10), (4, 6, 11), (5, 13, 16),\n    (5, 0, 8), (5, 15, 18), (5, 11, 5), (6, 5, 8), (6, 12, 13),\n    (7, 14, 12), (7, 0, 1), (7, 3, 10), (7, 9, 17), (7, 17, 16),\n    (7, 1, 18), (7, 4, 3), (7, 12, 13), (8, 3, 6), (8, 4, 9),\n    (9, 13, 12), (9, 0, 13), (9, 2, 2), (9, 12, 6), (10, 16, 20),\n    (10, 0, 18), (10, 3, 4), (10, 2, 7), (10, 9, 13), (10, 6, 9),\n    (11, 14, 14), (11, 0, 7), (11, 9, 5), (11, 17, 18), (12, 13, 7),\n    (12, 0, 17), (12, 17, 3), (12, 1, 10), (12, 6, 18), (13, 0, 6),\n    (13, 9, 2), (13, 1, 20), (14, 0, 3), (14, 3, 20), (14, 10, 18),\n    (14, 11, 13), (15, 8, 14), (15, 0, 8), (15, 2, 2), (15, 11, 15),\n    (15, 1, 1), (15, 6, 6), (15, 4, 14), (16, 14, 1), (16, 0, 2),\n    (16, 15, 16), (16, 2, 1), (16, 9, 11), (16, 11, 1), (16, 5, 15),\n    (17, 14, 11), (17, 8, 14), (17, 12, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(16, 1))\n```"}, "32": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\ng.add_edge(0, 6, 9)\ng.add_edge(1, 2, 2)\ng.add_edge(1, 3, 7)\ng.add_edge(3, 1, 6)\ng.add_edge(6, 3, 8)\ng.add_edge(7, 0, 10)\ng.add_edge(7, 8, 5)\ng.add_edge(8, 3, 5)\ng.add_edge(8, 1, 10)\n\nprint(g.edmonds_karp(7, 1))\n```"}, "33": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 2, 18), (0, 12, 10), (0, 1, 14), (0, 4, 1),\n    (1, 9, 10), (1, 8, 12), (1, 3, 16), (2, 0, 6),\n    (2, 3, 13), (2, 14, 10), (2, 10, 13), (2, 6, 14),\n    (3, 12, 8), (3, 8, 20), (3, 4, 12), (4, 0, 19),\n    (4, 6, 18), (5, 11, 11), (5, 3, 13), (5, 1, 1),\n    (5, 14, 8), (5, 4, 1), (5, 7, 10), (5, 6, 18),\n    (6, 11, 7), (6, 3, 8), (6, 14, 10), (6, 10, 20),\n    (7, 0, 11), (7, 8, 6), (7, 1, 9), (7, 10, 17),\n    (8, 3, 6), (9, 11, 9), (9, 2, 12), (9, 4, 4),\n    (10, 2, 14), (10, 0, 17), (10, 3, 9), (11, 2, 8),\n    (11, 3, 11), (11, 4, 17), (11, 7, 4), (12, 5, 13),\n    (12, 3, 2), (13, 9, 13), (14, 0, 7), (14, 12, 10),\n    (14, 10, 6), (14, 7, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 7)\nprint(max_flow)\n```"}, "34": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 4, 6)\ng.add_edge(1, 5, 2)\ng.add_edge(2, 4, 7)\ng.add_edge(2, 5, 2)\ng.add_edge(3, 4, 2)\ng.add_edge(3, 5, 2)\ng.add_edge(4, 3, 3)\ng.add_edge(5, 2, 10)\ng.add_edge(5, 0, 3)\n\nprint(g.edmonds_karp(3, 4))\n```"}, "35": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 5)\ng.add_edge(1, 0, 5)\ng.add_edge(2, 3, 4)\ng.add_edge(2, 1, 1)\ng.add_edge(3, 0, 7)\ng.add_edge(3, 4, 8)\ng.add_edge(4, 0, 1)\n\nprint(g.edmonds_karp(2, 1))\n```"}, "36": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 1)\ng.add_edge(1, 4, 5)\ng.add_edge(2, 1, 6)\ng.add_edge(2, 3, 2)\ng.add_edge(2, 0, 10)\ng.add_edge(3, 0, 9)\ng.add_edge(4, 0, 6)\n\nmax_flow = g.edmonds_karp(2, 4)\nprint(max_flow)\n```"}, "37": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 11, 5), (0, 9, 19), (0, 2, 9), (2, 10, 17), (2, 6, 20),\n    (3, 9, 9), (3, 0, 8), (4, 11, 15), (4, 8, 20), (4, 7, 5),\n    (4, 2, 9), (4, 6, 15), (4, 0, 14), (5, 11, 13), (5, 3, 12),\n    (5, 1, 15), (6, 8, 18), (6, 4, 7), (6, 1, 4), (6, 0, 4),\n    (7, 11, 19), (7, 4, 10), (7, 10, 5), (8, 2, 10), (8, 3, 14),\n    (9, 2, 6), (9, 0, 9), (10, 6, 12), (10, 3, 8), (10, 0, 12),\n    (11, 8, 18), (11, 7, 19), (11, 1, 9), (11, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 6)\nprint(max_flow)\n```"}, "38": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 6)\ng.add_edge(0, 3, 3)\ng.add_edge(1, 3, 1)\ng.add_edge(2, 0, 5)\ng.add_edge(2, 3, 5)\ng.add_edge(4, 3, 5)\ng.add_edge(4, 2, 4)\n\nprint(g.edmonds_karp(4, 3))\n```"}, "39": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 8, 7), (0, 3, 13), (0, 5, 18), (0, 9, 3), (0, 10, 11),\n    (1, 3, 18), (1, 9, 15), (1, 10, 20), (2, 8, 4), (2, 3, 5),\n    (2, 5, 14), (2, 10, 14), (3, 0, 3), (3, 10, 15), (4, 3, 17),\n    (4, 2, 1), (4, 6, 5), (5, 8, 8), (5, 3, 7), (5, 11, 14),\n    (5, 10, 18), (6, 4, 6), (6, 5, 8), (6, 1, 1), (7, 3, 19),\n    (7, 2, 18), (8, 1, 16), (8, 11, 2), (8, 10, 18), (9, 4, 5),\n    (9, 5, 7), (9, 2, 12), (9, 1, 12), (9, 11, 2), (10, 4, 17),\n    (10, 2, 15), (10, 1, 11), (11, 8, 2), (11, 9, 18), (11, 6, 16),\n    (11, 1, 17), (11, 10, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(11, 10))\n```"}, "40": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 10, 1), (0, 12, 7), (2, 13, 10), (2, 9, 4), (2, 7, 2),\n    (3, 2, 10), (3, 6, 19), (3, 15, 1), (3, 14, 6), (4, 13, 19),\n    (4, 16, 1), (4, 9, 8), (4, 6, 7), (4, 12, 16), (5, 0, 8),\n    (5, 6, 11), (5, 4, 1), (6, 5, 3), (7, 17, 8), (7, 13, 11),\n    (7, 0, 11), (7, 9, 1), (7, 14, 3), (7, 1, 19), (8, 3, 16),\n    (8, 6, 10), (8, 10, 16), (8, 12, 3), (8, 14, 2), (9, 0, 19),\n    (9, 8, 11), (9, 4, 3), (9, 1, 13), (10, 2, 7), (10, 9, 17),\n    (10, 4, 9), (11, 2, 19), (11, 5, 16), (11, 16, 2), (11, 9, 4),\n    (12, 6, 7), (12, 15, 18), (13, 5, 3), (13, 17, 4), (13, 16, 4),\n    (13, 8, 19), (13, 4, 9), (14, 5, 10), (14, 16, 13), (14, 11, 15),\n    (15, 5, 14), (15, 0, 9), (15, 9, 19), (15, 8, 20), (15, 7, 2),\n    (15, 4, 19), (16, 3, 11), (16, 8, 4), (16, 14, 13), (17, 8, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 4))\n```"}, "41": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(2, 4, 10)\ng.add_edge(2, 0, 5)\ng.add_edge(4, 0, 7)\n\nprint(g.edmonds_karp(2, 0))\n```"}, "42": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 6, 10),\n    (1, 6, 2),\n    (1, 5, 5),\n    (2, 4, 1),\n    (2, 3, 3),\n    (2, 6, 9),\n    (3, 2, 10),\n    (4, 6, 5),\n    (4, 5, 10),\n    (6, 4, 9),\n    (6, 3, 10),\n    (6, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 3)\nprint(max_flow)\n```"}, "43": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 17, 13), (0, 6, 19), (0, 13, 19), (1, 16, 11), (1, 11, 1), (1, 3, 18),\n    (1, 14, 16), (2, 0, 8), (2, 11, 11), (2, 17, 10), (2, 9, 18), (2, 13, 20),\n    (2, 10, 17), (2, 4, 20), (3, 2, 15), (3, 11, 13), (3, 6, 15), (3, 12, 16),\n    (3, 7, 9), (4, 11, 14), (4, 3, 4), (4, 5, 16), (4, 8, 2), (4, 12, 17),\n    (4, 1, 12), (4, 10, 3), (5, 15, 7), (5, 6, 7), (5, 1, 2), (6, 11, 14),\n    (6, 12, 9), (6, 13, 12), (6, 10, 18), (6, 7, 16), (7, 2, 13), (7, 11, 3),\n    (7, 9, 1), (8, 4, 4), (9, 8, 18), (9, 6, 15), (9, 12, 7), (9, 13, 2),\n    (10, 2, 16), (10, 3, 16), (11, 5, 19), (11, 15, 5), (11, 4, 13), (12, 16, 11),\n    (12, 7, 5), (13, 0, 11), (13, 5, 4), (13, 8, 16), (13, 15, 10), (13, 9, 1),\n    (13, 4, 11), (14, 12, 2), (14, 13, 4), (15, 16, 4), (15, 5, 20), (15, 6, 8),\n    (15, 1, 11), (15, 10, 20), (15, 4, 11), (16, 8, 20), (16, 14, 2), (16, 15, 8),\n    (16, 6, 9), (17, 0, 18), (17, 5, 4), (17, 8, 8), (17, 9, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(17, 9))\n```"}, "44": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 4, 9)\ng.add_edge(0, 2, 10)\ng.add_edge(1, 4, 9)\ng.add_edge(1, 0, 7)\ng.add_edge(1, 2, 10)\ng.add_edge(4, 3, 1)\ng.add_edge(4, 2, 1)\n\nprint(g.edmonds_karp(1, 2))\n```"}, "45": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 4, 3), (0, 2, 12), (0, 9, 4), (0, 8, 11),\n    (1, 5, 14), (1, 4, 20), (1, 0, 4), (1, 8, 7),\n    (2, 7, 19), (2, 0, 9), (2, 10, 8), (2, 1, 19),\n    (3, 7, 7), (3, 2, 18), (3, 9, 17), (4, 2, 13),\n    (5, 11, 5), (5, 0, 12), (5, 3, 6), (6, 7, 18),\n    (6, 4, 1), (6, 9, 19), (6, 0, 19), (7, 5, 5),\n    (7, 3, 15), (8, 9, 6), (8, 0, 9), (8, 10, 1),\n    (9, 3, 15), (10, 4, 10), (10, 6, 15), (10, 0, 12),\n    (10, 3, 16), (10, 8, 17), (10, 1, 6), (11, 7, 9),\n    (11, 2, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 0\nprint(g.edmonds_karp(source, sink))\n```"}, "46": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 12, 3), (0, 3, 16), (1, 4, 20), (1, 11, 5), (2, 7, 20),\n    (3, 2, 10), (3, 8, 11), (4, 6, 7), (4, 1, 12), (4, 7, 4),\n    (4, 11, 17), (4, 5, 18), (4, 8, 4), (5, 6, 10), (5, 2, 5),\n    (6, 2, 9), (6, 3, 1), (6, 8, 9), (7, 5, 2), (8, 10, 12),\n    (8, 4, 16), (9, 1, 6), (9, 11, 17), (10, 2, 12), (10, 7, 13),\n    (10, 4, 19), (10, 3, 6), (10, 5, 11), (11, 9, 17), (11, 12, 17),\n    (11, 7, 1), (11, 4, 11), (11, 8, 12), (12, 4, 19), (12, 0, 19)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 9)\nprint(max_flow)\n```"}, "47": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 6, 17), (0, 14, 7), (0, 15, 8), (0, 5, 3),\n    (1, 6, 14), (1, 14, 6), (1, 4, 4), (1, 0, 2), (1, 3, 4), (1, 2, 17), (1, 9, 4), (1, 12, 6), (1, 5, 13),\n    (2, 6, 14), (2, 0, 6), (2, 7, 17), (2, 8, 16), (2, 5, 12),\n    (3, 14, 17), (3, 10, 7), (3, 16, 10), (3, 0, 14), (3, 9, 8), (3, 11, 6),\n    (4, 6, 15), (4, 10, 14), (4, 16, 13),\n    (5, 6, 16), (5, 16, 12), (5, 2, 3), (5, 13, 6),\n    (6, 7, 10), (6, 12, 4), (6, 5, 7),\n    (7, 6, 20), (7, 1, 17), (7, 2, 9), (7, 11, 10),\n    (8, 14, 11), (8, 16, 17), (8, 7, 11), (8, 11, 1), (8, 15, 3), (8, 5, 15),\n    (9, 1, 19), (9, 11, 19), (9, 15, 13),\n    (10, 9, 20), (10, 13, 14),\n    (11, 3, 5), (11, 2, 7), (11, 9, 19), (11, 12, 7),\n    (12, 6, 10), (12, 16, 7), (12, 3, 11), (12, 13, 18), (12, 8, 18),\n    (13, 10, 6), (13, 3, 19), (13, 12, 8), (13, 5, 3),\n    (14, 7, 19), (14, 12, 14),\n    (15, 6, 4), (15, 14, 8), (15, 10, 1), (15, 3, 2), (15, 9, 18),\n    (16, 14, 20), (16, 10, 20), (16, 4, 6), (16, 1, 14), (16, 2, 9), (16, 12, 5), (16, 15, 17), (16, 5, 8)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(15, 4))\n```"}, "48": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\ng.add_edge(0, 3, 7)\ng.add_edge(0, 2, 4)\ng.add_edge(2, 3, 4)\ng.add_edge(2, 6, 9)\ng.add_edge(3, 2, 6)\ng.add_edge(4, 0, 10)\ng.add_edge(5, 2, 3)\ng.add_edge(5, 6, 3)\ng.add_edge(6, 0, 9)\n\nprint(g.edmonds_karp(5, 2))\n```"}, "49": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 2, 13), (0, 7, 17), (1, 2, 11), (1, 3, 4), (1, 5, 14), (1, 9, 17),\n    (2, 6, 8), (4, 3, 15), (5, 8, 6), (5, 9, 11), (5, 6, 2), (6, 2, 12),\n    (6, 4, 12), (6, 9, 14), (7, 0, 14), (7, 6, 16), (7, 1, 15), (8, 10, 18),\n    (8, 5, 15), (8, 9, 10), (9, 8, 11), (9, 5, 19), (9, 7, 8), (10, 5, 18),\n    (10, 7, 19), (10, 1, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 10)\nprint(max_flow)\n```"}, "50": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 5, 16), (0, 7, 18), (0, 11, 7), (0, 1, 19), (0, 10, 19), (0, 8, 5), (0, 18, 8),\n    (1, 4, 7), (1, 7, 4), (1, 17, 15), (1, 12, 14), (1, 14, 7), (1, 18, 11),\n    (2, 4, 4), (2, 9, 3), (2, 3, 5),\n    (3, 1, 18), (3, 6, 15), (3, 0, 11),\n    (4, 5, 9), (4, 1, 16), (4, 9, 3), (4, 2, 17), (4, 8, 10), (4, 3, 1),\n    (5, 7, 4), (5, 17, 9), (5, 12, 2), (5, 2, 5), (5, 6, 13), (5, 15, 10), (5, 18, 14), (5, 16, 16),\n    (6, 4, 5), (6, 7, 10), (6, 11, 18), (6, 8, 9), (6, 0, 13), (6, 18, 8), (6, 3, 2),\n    (7, 5, 6), (7, 17, 6), (7, 12, 18), (7, 9, 11), (7, 13, 15), (7, 14, 13), (7, 15, 18), (7, 3, 19),\n    (8, 4, 17), (8, 12, 14), (8, 11, 19), (8, 1, 15), (8, 2, 11), (8, 15, 7), (8, 0, 17),\n    (9, 14, 2), (9, 15, 4), (9, 16, 10), (9, 3, 2),\n    (10, 7, 20), (10, 17, 17), (10, 12, 11), (10, 8, 1), (10, 6, 8), (10, 3, 2),\n    (11, 8, 19), (11, 15, 2),\n    (12, 13, 9), (12, 15, 8), (12, 0, 16),\n    (13, 4, 3), (13, 5, 20), (13, 11, 10), (13, 2, 14), (13, 8, 20), (13, 6, 16), (13, 0, 10), (13, 16, 16),\n    (14, 10, 8), (14, 15, 3), (14, 18, 6),\n    (15, 4, 6), (15, 12, 3), (15, 11, 9), (15, 9, 18), (15, 13, 20),\n    (16, 7, 5), (16, 8, 6), (16, 6, 8), (16, 15, 16), (16, 3, 19),\n    (17, 7, 13), (17, 12, 9), (17, 8, 11), (17, 6, 15), (17, 0, 5),\n    (18, 4, 14), (18, 13, 20), (18, 15, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 9\nsink = 7\nprint(g.edmonds_karp(source, sink))\n```"}, "51": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 8, 8),\n    (1, 3, 9),\n    (1, 2, 3),\n    (2, 6, 5),\n    (2, 8, 8),\n    (3, 8, 7),\n    (4, 3, 3),\n    (5, 7, 2),\n    (5, 6, 1),\n    (5, 2, 8),\n    (6, 8, 8),\n    (7, 8, 2),\n    (7, 5, 5),\n    (8, 7, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 8))\n```"}, "52": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 1, 14), (0, 2, 4), (1, 6, 20), (1, 7, 14), (1, 0, 13), (1, 10, 13),\n    (2, 7, 8), (2, 1, 7), (2, 3, 5), (2, 10, 20), (3, 4, 9), (3, 6, 14),\n    (4, 9, 11), (4, 7, 10), (4, 0, 13), (4, 2, 17), (5, 4, 3), (5, 7, 4),\n    (5, 0, 14), (6, 9, 2), (6, 1, 4), (6, 2, 18), (6, 3, 15), (6, 5, 7),\n    (7, 4, 12), (7, 3, 2), (7, 10, 14), (7, 5, 1), (8, 9, 16), (8, 0, 15),\n    (8, 2, 19), (8, 10, 15), (9, 2, 13), (9, 3, 12), (10, 9, 14), (10, 8, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 7)\nprint(max_flow)\n```"}, "53": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 19, 2), (0, 7, 1), (0, 1, 3), (0, 5, 15), (0, 16, 17),\n    (1, 17, 5), (1, 9, 18), (2, 12, 6), (2, 5, 20), (2, 0, 11),\n    (2, 9, 3), (2, 15, 1), (3, 19, 16), (3, 0, 12), (3, 15, 7),\n    (4, 19, 19), (4, 1, 3), (4, 16, 20), (4, 9, 10), (4, 6, 6),\n    (4, 14, 20), (5, 10, 17), (5, 13, 8), (5, 1, 14), (5, 17, 18),\n    (5, 15, 6), (5, 8, 12), (6, 10, 11), (6, 1, 14), (6, 9, 15),\n    (6, 3, 18), (6, 14, 4), (7, 12, 10), (7, 10, 9), (7, 1, 17),\n    (7, 6, 2), (8, 12, 4), (8, 7, 20), (8, 5, 16), (8, 0, 11),\n    (8, 16, 14), (8, 4, 17), (8, 2, 3), (9, 1, 20), (9, 5, 19),\n    (9, 15, 8), (9, 6, 10), (10, 11, 14), (10, 6, 11), (11, 10, 13),\n    (11, 13, 16), (11, 7, 16), (11, 14, 2), (12, 18, 4), (12, 13, 20),\n    (12, 3, 18), (13, 19, 8), (13, 0, 14), (13, 3, 4), (14, 5, 17),\n    (14, 3, 17), (15, 17, 2), (15, 9, 12), (15, 3, 17), (15, 14, 19),\n    (16, 19, 20), (16, 0, 5), (16, 4, 16), (16, 17, 9), (16, 15, 9),\n    (16, 14, 10), (17, 18, 4), (17, 5, 8), (17, 9, 11), (17, 11, 3),\n    (17, 6, 11), (18, 0, 19), (18, 6, 17), (19, 18, 9), (19, 9, 15),\n    (19, 14, 20)\n]\n\ng = Graph(20)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(19, 13))\n```"}, "54": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 12, 20), (0, 11, 11), (1, 4, 16), (1, 11, 7), (2, 7, 14), (2, 11, 6),\n    (3, 9, 20), (3, 4, 4), (3, 11, 16), (4, 8, 7), (4, 5, 8), (4, 0, 6),\n    (5, 8, 13), (5, 9, 11), (5, 3, 17), (5, 4, 3), (6, 10, 7), (6, 7, 11),\n    (6, 2, 12), (6, 5, 10), (6, 13, 6), (6, 4, 1), (6, 0, 12), (7, 6, 11),\n    (8, 10, 1), (8, 13, 6), (9, 8, 17), (9, 1, 14), (9, 13, 4), (9, 0, 1),\n    (10, 12, 19), (10, 1, 8), (10, 2, 15), (10, 0, 4), (11, 6, 18), (11, 8, 14),\n    (11, 9, 4), (11, 10, 15), (11, 1, 8), (11, 2, 4), (12, 6, 11), (12, 8, 1),\n    (12, 7, 15), (12, 13, 9), (12, 4, 18), (13, 10, 19), (13, 5, 12), (13, 11, 5),\n    (13, 0, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 13)\nprint(max_flow)\n```"}, "55": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 17, 19), (0, 11, 10), (0, 7, 8), (0, 10, 9), (0, 9, 2), (0, 1, 11),\n    (1, 11, 19), (1, 10, 1), (1, 16, 16), (1, 6, 10), (2, 17, 2), (2, 15, 17),\n    (2, 19, 13), (2, 7, 15), (2, 4, 9), (3, 17, 2), (3, 5, 2), (3, 9, 3),\n    (4, 0, 2), (4, 17, 7), (4, 7, 20), (4, 10, 5), (4, 2, 16), (4, 1, 10),\n    (4, 16, 14), (5, 3, 3), (5, 17, 13), (5, 14, 13), (5, 11, 16), (5, 8, 6),\n    (5, 1, 13), (6, 0, 12), (6, 17, 11), (6, 16, 9), (7, 10, 11), (7, 5, 10),\n    (7, 2, 16), (7, 1, 7), (7, 16, 14), (7, 6, 18), (8, 17, 7), (8, 7, 18),\n    (8, 5, 8), (8, 16, 4), (9, 15, 12), (9, 11, 18), (9, 13, 17), (9, 4, 9),\n    (9, 12, 11), (10, 14, 9), (10, 9, 8), (10, 2, 7), (11, 15, 1), (11, 12, 4),\n    (12, 14, 17), (12, 7, 10), (12, 8, 15), (12, 13, 17), (12, 4, 20), (12, 5, 18),\n    (12, 9, 8), (12, 2, 6), (12, 1, 19), (13, 3, 7), (13, 18, 8), (13, 4, 19),\n    (13, 9, 6), (14, 13, 13), (14, 5, 12), (14, 1, 12), (15, 3, 10), (15, 7, 5),\n    (15, 8, 12), (15, 10, 8), (15, 5, 19), (15, 6, 17), (16, 17, 12), (16, 11, 1),\n    (16, 8, 7), (16, 12, 8), (17, 15, 19), (17, 11, 7), (17, 8, 9), (17, 12, 12),\n    (17, 2, 3), (17, 6, 6), (18, 19, 5), (19, 0, 15), (19, 17, 15), (19, 15, 19),\n    (19, 18, 11), (19, 11, 9), (19, 9, 5), (19, 2, 7), (19, 1, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(13, 16))\n```"}, "56": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 4, 15), (0, 13, 3), (0, 7, 15), (0, 1, 18),\n    (1, 14, 2), (1, 11, 4), (1, 9, 11), (1, 6, 3),\n    (2, 4, 12), (2, 14, 7), (2, 10, 18), (2, 6, 20),\n    (2, 8, 20), (3, 2, 2), (3, 1, 5), (4, 14, 2),\n    (4, 11, 20), (4, 1, 12), (5, 4, 18), (5, 14, 6),\n    (5, 10, 10), (5, 8, 1), (6, 4, 8), (6, 11, 18),\n    (6, 12, 13), (6, 10, 16), (7, 4, 19), (7, 3, 8),\n    (7, 12, 14), (7, 1, 9), (8, 9, 8), (8, 0, 20),\n    (8, 12, 6), (8, 7, 6), (8, 6, 19), (8, 2, 18),\n    (9, 4, 10), (9, 14, 4), (9, 5, 3), (9, 13, 1),\n    (9, 7, 14), (9, 10, 12), (10, 4, 4), (10, 2, 11),\n    (11, 14, 8), (12, 4, 17), (12, 5, 3), (12, 9, 7),\n    (12, 13, 9), (13, 12, 19), (13, 10, 10), (13, 8, 16),\n    (14, 11, 5), (14, 12, 4), (14, 8, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 14\nprint(g.edmonds_karp(source, sink))\n```"}, "57": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 5, 2),\n    (0, 4, 4),\n    (1, 0, 8),\n    (2, 3, 3),\n    (3, 4, 8),\n    (4, 2, 5),\n    (4, 0, 6),\n    (4, 3, 8),\n    (5, 4, 5),\n    (5, 3, 8),\n    (6, 1, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 3))\n```"}, "58": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 4)\ng.add_edge(1, 0, 9)\ng.add_edge(2, 0, 3)\ng.add_edge(3, 0, 1)\ng.add_edge(4, 0, 8)\ng.add_edge(4, 2, 8)\ng.add_edge(4, 3, 5)\n\nprint(g.edmonds_karp(4, 1))\n```"}, "59": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 3, 7), (0, 2, 9), (1, 7, 10), (1, 6, 8), (1, 3, 4),\n    (2, 1, 3), (2, 5, 9), (3, 5, 2), (3, 6, 4), (4, 8, 4),\n    (4, 0, 9), (5, 6, 1), (7, 1, 1), (7, 8, 8), (7, 0, 6),\n    (7, 2, 9), (8, 3, 9), (8, 2, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 6))\n```"}, "60": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 10, 5), (0, 7, 13), (0, 4, 20), (0, 3, 2), (0, 9, 18),\n    (1, 5, 8), (1, 4, 19), (1, 13, 1), (1, 9, 2),\n    (2, 8, 7), (2, 9, 18),\n    (3, 0, 16), (3, 2, 14), (3, 7, 12),\n    (4, 0, 16), (4, 12, 15), (4, 15, 17), (4, 3, 2), (4, 6, 3),\n    (5, 0, 9), (5, 2, 2), (5, 7, 7), (5, 11, 12),\n    (6, 11, 10), (6, 13, 6),\n    (7, 10, 1), (7, 12, 10), (7, 8, 14), (7, 13, 7), (7, 3, 19),\n    (8, 2, 2), (8, 10, 8), (8, 3, 13),\n    (9, 8, 16), (9, 6, 13),\n    (10, 2, 15), (10, 7, 2), (10, 12, 9), (10, 8, 2), (10, 5, 9), (10, 3, 11), (10, 9, 6), (10, 6, 16),\n    (11, 0, 17), (11, 14, 17), (11, 4, 20),\n    (12, 7, 11), (12, 8, 20), (12, 9, 13), (12, 6, 4),\n    (13, 2, 19), (13, 11, 3),\n    (14, 10, 11), (14, 7, 2), (14, 11, 9), (14, 4, 17), (14, 3, 20), (14, 6, 7),\n    (15, 7, 6), (15, 12, 20), (15, 1, 7), (15, 4, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 1))\n```"}, "61": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 2, 5), (0, 1, 6), (0, 6, 6), (1, 8, 10), (2, 1, 6),\n    (2, 4, 7), (3, 1, 1), (3, 7, 2), (3, 0, 10), (4, 1, 8),\n    (5, 3, 7), (5, 7, 1), (6, 5, 6), (6, 3, 10), (6, 4, 9),\n    (7, 5, 5), (7, 8, 6), (7, 4, 3), (8, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(7, 8))\n```"}, "62": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 1, 15), (0, 13, 14), (0, 17, 7), (0, 2, 17), (0, 8, 4), (0, 9, 5), (0, 11, 11), (0, 5, 4),\n    (1, 14, 16), (1, 13, 10), (1, 9, 2), (1, 18, 4), (2, 3, 3), (2, 0, 9), (2, 14, 6), (2, 8, 8),\n    (2, 12, 18), (2, 11, 5), (3, 8, 17), (3, 11, 19), (4, 3, 17), (4, 14, 11), (4, 13, 15), (4, 18, 5),\n    (4, 5, 20), (5, 6, 18), (5, 9, 14), (6, 3, 14), (6, 0, 4), (6, 1, 5), (6, 10, 19), (6, 2, 15),\n    (6, 16, 12), (6, 7, 12), (6, 18, 18), (6, 4, 20), (7, 3, 8), (7, 14, 14), (7, 1, 16), (7, 10, 9),\n    (7, 6, 10), (7, 9, 18), (7, 18, 13), (7, 4, 13), (8, 0, 16), (8, 14, 13), (8, 1, 3), (8, 6, 15),\n    (8, 4, 9), (9, 0, 10), (9, 17, 6), (9, 6, 10), (9, 11, 6), (10, 1, 3), (10, 17, 3), (10, 18, 2),\n    (11, 0, 15), (11, 14, 5), (11, 16, 4), (11, 6, 8), (11, 9, 12), (11, 18, 6), (11, 5, 8), (12, 1, 4),\n    (12, 17, 4), (12, 8, 18), (12, 15, 11), (13, 14, 3), (13, 1, 18), (13, 6, 10), (14, 13, 20), (14, 2, 18),\n    (14, 7, 14), (14, 6, 19), (14, 15, 14), (14, 18, 10), (15, 13, 11), (15, 10, 10), (15, 8, 11), (15, 18, 19),\n    (15, 4, 5), (16, 0, 8), (16, 18, 3), (16, 5, 5), (17, 3, 10), (17, 13, 13), (17, 16, 18), (17, 12, 15),\n    (17, 11, 17), (17, 4, 3), (17, 5, 4), (18, 3, 14), (18, 13, 7), (18, 17, 16), (18, 12, 1), (18, 15, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 12)\nprint(max_flow)\n```"}, "63": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 6, 14), (0, 4, 4), (0, 1, 14), (0, 12, 12),\n    (1, 7, 10), (1, 5, 3), (1, 9, 8), (2, 0, 5),\n    (2, 4, 13), (3, 13, 5), (4, 12, 17), (4, 11, 1),\n    (5, 7, 5), (5, 6, 4), (5, 3, 13), (6, 2, 9),\n    (6, 1, 6), (6, 13, 17), (7, 8, 15), (7, 6, 15),\n    (7, 1, 12), (8, 4, 9), (9, 5, 16), (10, 6, 12),\n    (10, 1, 2), (10, 13, 11), (10, 11, 5), (11, 5, 19),\n    (11, 12, 15), (12, 7, 12), (12, 4, 13), (12, 3, 19),\n    (13, 10, 13), (13, 7, 8), (13, 8, 1), (13, 5, 9),\n    (13, 9, 2), (13, 6, 19)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 0))\n```"}, "64": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 7, 17), (0, 13, 9), (1, 9, 3), (2, 4, 8), (2, 15, 20), (2, 5, 13),\n    (2, 10, 9), (2, 0, 5), (3, 15, 10), (4, 7, 6), (4, 15, 11), (4, 1, 3),\n    (4, 5, 11), (4, 17, 4), (4, 12, 4), (4, 2, 2), (5, 1, 19), (5, 17, 2),\n    (5, 3, 7), (5, 12, 8), (5, 11, 10), (6, 8, 1), (6, 11, 12), (6, 16, 3),\n    (6, 14, 19), (7, 1, 16), (7, 6, 3), (8, 15, 18), (9, 15, 12), (9, 3, 2),\n    (9, 8, 16), (9, 10, 1), (9, 16, 14), (10, 7, 17), (10, 13, 15), (10, 6, 18),\n    (11, 4, 17), (11, 5, 18), (11, 8, 10), (11, 13, 12), (11, 0, 7), (12, 4, 2),\n    (12, 15, 2), (12, 13, 2), (13, 7, 10), (13, 3, 18), (13, 12, 5), (13, 16, 6),\n    (14, 7, 8), (14, 4, 12), (14, 17, 17), (14, 3, 1), (14, 0, 5), (15, 12, 4),\n    (15, 6, 1), (16, 15, 16), (16, 5, 20), (17, 7, 19), (17, 4, 7), (17, 15, 12),\n    (17, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(13, 10)\nprint(max_flow)\n```"}, "65": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 6, 14), (0, 10, 6), (0, 7, 1), (0, 8, 9),\n    (1, 7, 17), (1, 8, 7), (3, 4, 15), (3, 9, 6),\n    (3, 5, 14), (4, 1, 13), (4, 7, 7), (5, 1, 7),\n    (5, 7, 4), (6, 8, 17), (7, 4, 1), (7, 3, 6),\n    (8, 6, 5), (8, 9, 9), (8, 5, 3), (8, 0, 17),\n    (8, 2, 2), (9, 1, 12), (9, 10, 12), (9, 7, 20),\n    (10, 4, 17), (10, 9, 5), (10, 5, 13), (10, 0, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 3)\nprint(max_flow)\n```"}, "66": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 9, 17), (0, 8, 17), (0, 17, 6), (0, 3, 2), (0, 4, 19), (0, 10, 2),\n    (1, 9, 7), (1, 16, 5), (1, 4, 18), (1, 13, 2), (1, 6, 5), (1, 15, 12),\n    (2, 1, 12), (2, 17, 11), (2, 4, 18), (2, 13, 15), (2, 5, 12),\n    (3, 4, 3), (3, 0, 6), (3, 6, 2), (3, 15, 1), (3, 10, 4),\n    (4, 17, 20), (4, 13, 13), (4, 7, 12), (4, 12, 12),\n    (5, 11, 10),\n    (6, 9, 19), (6, 2, 8), (6, 5, 17), (6, 12, 10),\n    (7, 9, 12), (7, 16, 16), (7, 4, 9), (7, 2, 11), (7, 11, 14),\n    (8, 9, 15), (8, 1, 8), (8, 3, 3), (8, 4, 7), (8, 11, 15),\n    (9, 13, 12), (9, 2, 3), (9, 5, 2), (9, 10, 1),\n    (10, 9, 6), (10, 1, 20), (10, 3, 7), (10, 4, 9), (10, 6, 17), (10, 11, 3), (10, 7, 17),\n    (11, 9, 14), (11, 3, 18), (11, 16, 11), (11, 4, 16), (11, 0, 6),\n    (12, 3, 5), (12, 16, 11), (12, 6, 3),\n    (13, 14, 19), (13, 1, 18), (13, 3, 17), (13, 6, 6),\n    (14, 4, 3), (14, 2, 19), (14, 10, 11),\n    (15, 14, 8), (15, 9, 19), (15, 8, 17), (15, 5, 6), (15, 11, 9), (15, 7, 9),\n    (16, 9, 7), (16, 0, 20), (16, 5, 14), (16, 12, 8), (16, 10, 12),\n    (17, 9, 14), (17, 15, 18), (17, 2, 20), (17, 7, 18), (17, 10, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(14, 4))\n```"}, "67": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def fordFulkerson(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\ng.addEdge(0, 5, 4)\ng.addEdge(0, 2, 2)\ng.addEdge(0, 8, 3)\ng.addEdge(1, 4, 7)\ng.addEdge(3, 5, 4)\ng.addEdge(3, 0, 3)\ng.addEdge(3, 8, 7)\ng.addEdge(5, 6, 6)\ng.addEdge(8, 5, 1)\ng.addEdge(8, 3, 3)\ng.addEdge(8, 7, 2)\n\nsource = 8\nsink = 6\n\nprint(g.fordFulkerson(source, sink))\n```"}, "68": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 4, 5), (0, 3, 2), (1, 9, 3), (1, 2, 7), (1, 7, 1),\n    (2, 0, 2), (2, 8, 8), (3, 2, 3), (3, 7, 2), (5, 9, 1),\n    (5, 6, 4), (6, 0, 8), (7, 4, 7), (7, 5, 1), (7, 2, 9),\n    (8, 1, 2), (8, 2, 2), (8, 6, 1), (9, 5, 6), (9, 8, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 7\nprint(g.edmonds_karp(source, sink))\n```"}, "69": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 5, 10),\n    (0, 1, 8),\n    (1, 5, 3),\n    (2, 5, 10),\n    (2, 0, 9),\n    (2, 3, 3),\n    (3, 6, 8),\n    (4, 1, 9),\n    (5, 2, 4),\n    (5, 3, 6),\n    (6, 0, 3),\n    (8, 5, 2),\n    (8, 1, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 6))\n```"}, "70": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 5, 5),\n    (0, 2, 1),\n    (1, 3, 5),\n    (2, 3, 10),\n    (3, 1, 9),\n    (4, 3, 4),\n    (4, 1, 1),\n    (4, 2, 4),\n    (5, 2, 1),\n    (5, 0, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "71": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 1, 3),\n    (0, 5, 1),\n    (1, 5, 9),\n    (2, 4, 10),\n    (2, 3, 10),\n    (2, 0, 5),\n    (3, 0, 2),\n    (4, 3, 8),\n    (4, 5, 8),\n    (4, 6, 1),\n    (5, 0, 5),\n    (6, 4, 9),\n    (6, 5, 8),\n    (6, 0, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 1)\nprint(max_flow)\n```"}, "72": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 14, 11), (0, 8, 18), (0, 10, 1), (0, 18, 18), (0, 2, 19),\n    (1, 11, 7), (1, 14, 16), (1, 17, 14), (1, 9, 16), (1, 0, 5),\n    (1, 3, 4), (1, 15, 5), (1, 13, 14), (2, 5, 17), (2, 14, 18),\n    (2, 17, 19), (2, 15, 18), (2, 18, 8), (2, 19, 17), (2, 4, 4),\n    (2, 1, 15), (2, 13, 19), (3, 5, 1), (3, 7, 10), (4, 5, 17),\n    (4, 17, 13), (5, 12, 18), (5, 16, 19), (5, 0, 10), (5, 8, 1),\n    (5, 19, 18), (5, 1, 12), (6, 11, 7), (6, 0, 8), (6, 15, 6),\n    (6, 18, 3), (6, 2, 8), (6, 7, 17), (7, 5, 2), (7, 16, 14),\n    (7, 17, 7), (7, 9, 5), (7, 0, 9), (7, 3, 16), (7, 15, 12),\n    (7, 2, 11), (7, 1, 10), (7, 13, 5), (8, 12, 5), (8, 16, 10),\n    (8, 0, 14), (8, 18, 16), (8, 4, 13), (9, 12, 6), (9, 17, 11),\n    (9, 19, 1), (9, 7, 4), (10, 9, 13), (10, 3, 1), (10, 8, 5),\n    (10, 6, 2), (11, 5, 7), (11, 17, 3), (11, 9, 11), (11, 15, 4),\n    (11, 18, 15), (11, 4, 18), (12, 11, 8), (12, 5, 5), (12, 0, 2),\n    (12, 18, 8), (12, 19, 14), (12, 13, 5), (13, 5, 13), (13, 10, 16),\n    (13, 15, 4), (13, 4, 17), (14, 11, 20), (14, 12, 18), (14, 10, 14),\n    (14, 15, 1), (14, 4, 3), (15, 16, 9), (15, 10, 10), (15, 18, 3),\n    (15, 2, 12), (16, 11, 14), (16, 5, 12), (16, 12, 12), (16, 6, 19),\n    (16, 19, 8), (16, 4, 13), (17, 11, 4), (17, 12, 18), (17, 19, 13),\n    (17, 13, 19), (18, 14, 2), (18, 12, 13), (18, 17, 4), (18, 1, 6),\n    (18, 13, 5), (19, 12, 12), (19, 3, 5), (19, 15, 12), (19, 6, 6),\n    (19, 7, 5), (19, 13, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(11, 16))\n```"}, "73": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(1, 0, 6)\ng.add_edge(1, 5, 5)\ng.add_edge(2, 1, 8)\ng.add_edge(2, 4, 8)\ng.add_edge(3, 1, 2)\ng.add_edge(3, 2, 9)\ng.add_edge(3, 4, 4)\ng.add_edge(4, 5, 4)\ng.add_edge(5, 2, 6)\n\nprint(g.edmonds_karp(3, 0))\n```"}, "74": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 4, 8)\ng.add_edge(1, 3, 3)\ng.add_edge(2, 4, 2)\ng.add_edge(2, 3, 3)\ng.add_edge(3, 1, 6)\ng.add_edge(3, 0, 6)\ng.add_edge(4, 1, 1)\ng.add_edge(4, 3, 3)\ng.add_edge(4, 0, 6)\n\nprint(g.edmonds_karp(2, 0))\n```"}, "75": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 5, 8),\n    (1, 2, 6),\n    (1, 5, 3),\n    (1, 4, 6),\n    (3, 1, 7),\n    (3, 4, 3),\n    (3, 0, 5),\n    (4, 6, 3),\n    (4, 2, 1),\n    (5, 3, 2),\n    (5, 0, 5),\n    (6, 4, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 2)\nprint(max_flow)\n```"}, "76": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 5, 9), (0, 8, 14), (1, 11, 18), (1, 9, 12), (1, 5, 14), (1, 4, 12),\n    (2, 0, 2), (2, 6, 19), (2, 1, 11), (2, 4, 10), (3, 6, 13), (4, 7, 11),\n    (5, 4, 5), (6, 7, 6), (6, 10, 13), (6, 2, 3), (7, 11, 12), (7, 10, 19),\n    (7, 5, 18), (7, 8, 3), (7, 1, 4), (8, 7, 4), (10, 12, 15), (10, 6, 7),\n    (10, 2, 15), (11, 8, 2), (11, 1, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 11\nprint(g.edmonds_karp(source, sink))\n```"}, "77": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (1, 3, 9), (1, 8, 8), (1, 6, 7), (2, 1, 8), (2, 7, 4),\n    (3, 8, 10), (4, 1, 3), (4, 5, 3), (4, 6, 8), (5, 4, 4),\n    (5, 8, 5), (6, 7, 3), (6, 5, 10), (6, 8, 4), (7, 3, 9),\n    (8, 0, 2), (8, 5, 6), (8, 3, 9), (8, 4, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "78": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 9, 12), (0, 11, 18), (0, 10, 9), (0, 12, 9),\n    (1, 11, 11), (1, 10, 12), (1, 12, 12), (2, 9, 10),\n    (2, 6, 19), (2, 14, 11), (3, 4, 13), (3, 5, 6),\n    (3, 2, 12), (3, 12, 15), (4, 6, 20), (4, 3, 1),\n    (5, 9, 17), (5, 0, 20), (6, 7, 3), (6, 12, 11),\n    (6, 13, 4), (7, 8, 13), (7, 0, 18), (7, 12, 17),\n    (7, 13, 10), (8, 7, 7), (8, 10, 5), (9, 7, 3),\n    (9, 11, 17), (9, 6, 5), (9, 10, 12), (9, 15, 1),\n    (9, 3, 16), (9, 13, 4), (10, 9, 13), (10, 11, 9),\n    (11, 7, 3), (11, 1, 3), (11, 5, 17), (11, 8, 13),\n    (11, 14, 2), (12, 11, 16), (12, 10, 18), (13, 7, 12),\n    (13, 1, 5), (13, 14, 3), (13, 12, 14), (14, 6, 10),\n    (14, 8, 14), (14, 2, 5), (14, 13, 16), (15, 10, 3),\n    (15, 8, 17), (15, 2, 18), (15, 14, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 8)\nprint(max_flow)\n```"}, "79": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 16, 9), (0, 15, 5), (1, 14, 9), (1, 4, 17), (1, 13, 11),\n    (2, 9, 11), (2, 15, 9), (2, 0, 4), (3, 16, 13), (3, 2, 11),\n    (3, 12, 13), (4, 9, 14), (4, 7, 20), (4, 12, 18), (4, 15, 4),\n    (4, 5, 12), (5, 16, 19), (5, 6, 9), (6, 9, 17), (6, 7, 12),\n    (6, 5, 6), (6, 17, 15), (7, 11, 5), (7, 6, 14), (7, 3, 3),\n    (7, 15, 14), (8, 2, 2), (8, 7, 15), (8, 12, 16), (8, 17, 13),\n    (8, 0, 6), (9, 6, 4), (9, 7, 8), (9, 0, 3), (10, 11, 9),\n    (10, 14, 17), (10, 1, 19), (10, 9, 18), (10, 3, 3), (10, 4, 9),\n    (10, 5, 3), (10, 17, 13), (11, 16, 8), (11, 2, 6), (11, 8, 18),\n    (11, 4, 13), (12, 11, 19), (12, 1, 17), (12, 8, 16), (12, 15, 13),\n    (13, 16, 20), (13, 14, 9), (13, 6, 14), (13, 9, 16), (13, 8, 7),\n    (13, 7, 1), (13, 5, 7), (13, 17, 14), (14, 8, 14), (14, 12, 8),\n    (14, 13, 4), (14, 0, 12), (15, 10, 13), (15, 2, 14), (15, 12, 14),\n    (15, 17, 5), (16, 14, 20), (16, 7, 17), (16, 5, 16), (16, 13, 1),\n    (17, 10, 20), (17, 1, 17), (17, 12, 3), (17, 15, 9)\n]\n\ng = Graph(18)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 13\nprint(g.edmonds_karp(source, sink))\n```"}, "80": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 5, 7), (0, 1, 4), (0, 4, 10), (0, 2, 4),\n    (1, 5, 7), (1, 2, 8),\n    (2, 3, 8),\n    (3, 5, 2), (3, 1, 2), (3, 4, 10), (3, 2, 7),\n    (4, 0, 6), (4, 5, 1), (4, 1, 2), (4, 2, 2),\n    (5, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 0))\n```"}, "81": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 18, 1), (0, 16, 4), (0, 3, 6), (0, 4, 6), (0, 11, 11), (0, 12, 20),\n    (1, 9, 13), (1, 10, 17), (1, 12, 3), (2, 9, 10), (2, 0, 11), (2, 10, 16),\n    (2, 4, 17), (2, 14, 13), (2, 1, 15), (3, 4, 17), (3, 7, 6), (3, 11, 15),\n    (4, 9, 10), (4, 18, 1), (4, 16, 10), (4, 6, 14), (4, 12, 7), (5, 10, 15),\n    (6, 9, 15), (6, 18, 8), (6, 16, 19), (6, 8, 1), (6, 2, 1), (6, 1, 10),\n    (7, 18, 16), (7, 16, 14), (7, 8, 3), (7, 6, 14), (7, 17, 10), (7, 12, 8),\n    (8, 18, 2), (8, 0, 12), (8, 16, 13), (8, 7, 1), (8, 11, 14), (9, 13, 1),\n    (9, 14, 19), (9, 17, 1), (9, 1, 10), (10, 0, 2), (10, 8, 11), (10, 2, 7),\n    (10, 12, 13), (11, 10, 4), (11, 15, 3), (11, 1, 16), (11, 12, 2), (12, 18, 9),\n    (12, 0, 12), (12, 10, 6), (12, 5, 18), (13, 15, 19), (13, 14, 5), (13, 1, 8),\n    (14, 16, 5), (14, 2, 13), (14, 7, 4), (15, 9, 8), (15, 5, 15), (15, 16, 15),\n    (15, 17, 11), (15, 2, 18), (15, 11, 17), (16, 5, 1), (17, 3, 9), (17, 1, 1),\n    (18, 13, 2), (18, 0, 5), (18, 16, 13), (18, 14, 7), (18, 7, 11), (18, 11, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 1))\n```"}, "82": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 7, 9), (0, 9, 10), (1, 6, 8), (1, 8, 2), (1, 4, 3),\n    (2, 7, 4), (2, 9, 10), (2, 8, 2), (3, 7, 10), (3, 2, 3),\n    (3, 1, 3), (3, 8, 2), (4, 2, 3), (4, 9, 10), (4, 3, 1),\n    (5, 7, 7), (6, 1, 1), (7, 6, 4), (7, 1, 7), (8, 2, 9),\n    (9, 6, 8), (9, 2, 4), (9, 0, 3), (9, 1, 3), (9, 8, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 2\nprint(g.edmonds_karp(source, sink))\n```"}, "83": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.add_edge(0, 3, 7)\ng.add_edge(1, 7, 9)\ng.add_edge(2, 5, 3)\ng.add_edge(3, 5, 1)\ng.add_edge(3, 4, 7)\ng.add_edge(3, 1, 10)\ng.add_edge(3, 0, 2)\ng.add_edge(5, 1, 7)\ng.add_edge(5, 6, 1)\ng.add_edge(6, 7, 2)\n\nprint(g.edmonds_karp(0, 7))\n```"}, "84": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph(11)\nedges = [\n    (0, 9, 1), (1, 8, 16), (1, 0, 10), (2, 8, 17), (2, 4, 13),\n    (2, 0, 19), (2, 3, 11), (2, 5, 10), (3, 8, 15), (3, 1, 13),\n    (3, 7, 13), (3, 5, 11), (4, 8, 12), (4, 2, 7), (5, 9, 14),\n    (5, 1, 1), (6, 8, 7), (6, 7, 9), (6, 5, 15), (7, 5, 18),\n    (7, 2, 1), (8, 6, 17), (8, 2, 12), (9, 7, 17), (9, 5, 17),\n    (10, 9, 1), (10, 4, 5), (10, 2, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate maximum flow from node 2 to node 6\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "85": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 8, 1), (0, 12, 18), (0, 4, 4), (0, 5, 16), (0, 10, 11), (0, 9, 2), (0, 2, 5), (0, 7, 15),\n    (1, 4, 10), (1, 3, 5), (1, 11, 15), (2, 8, 14), (2, 14, 14), (2, 5, 18), (2, 9, 9), (2, 0, 13),\n    (3, 13, 13), (3, 15, 14), (3, 11, 16), (3, 9, 8), (4, 13, 17), (4, 5, 18), (4, 3, 4), (5, 12, 17),\n    (5, 1, 13), (5, 16, 7), (5, 6, 3), (6, 4, 6), (6, 14, 6), (6, 7, 9), (7, 10, 13), (7, 0, 11),\n    (8, 1, 13), (8, 13, 13), (8, 6, 13), (8, 7, 3), (9, 1, 6), (9, 16, 15), (10, 13, 13), (10, 3, 10),\n    (10, 15, 5), (10, 9, 20), (11, 12, 4), (11, 4, 18), (11, 10, 2), (11, 2, 3), (12, 5, 20), (12, 6, 9),\n    (13, 4, 11), (13, 1, 14), (13, 15, 3), (13, 2, 3), (14, 13, 3), (14, 3, 16), (14, 15, 10), (14, 11, 11),\n    (14, 6, 3), (15, 16, 17), (16, 2, 5), (16, 7, 12)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 16)\nprint(max_flow)\n```"}, "86": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 6, 8),\n    (1, 6, 1),\n    (2, 1, 6),\n    (3, 1, 7),\n    (3, 7, 8),\n    (4, 5, 8),\n    (5, 3, 4),\n    (5, 1, 2),\n    (5, 4, 4),\n    (6, 4, 6),\n    (7, 2, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 1))\n```"}, "87": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 9, 17), (0, 7, 7), (0, 11, 19), (1, 9, 20), (1, 0, 20), (1, 10, 12),\n    (2, 4, 20), (2, 9, 10), (2, 5, 11), (2, 3, 8), (2, 11, 20), (3, 4, 13),\n    (3, 9, 20), (3, 7, 19), (3, 8, 7), (4, 9, 16), (4, 7, 18), (4, 8, 20),\n    (4, 12, 18), (5, 2, 7), (5, 9, 15), (5, 3, 5), (5, 11, 15), (5, 12, 12),\n    (6, 5, 11), (6, 0, 19), (6, 11, 8), (6, 12, 17), (7, 2, 17), (7, 0, 1),\n    (7, 3, 8), (8, 4, 16), (8, 1, 13), (8, 9, 13), (8, 11, 17), (8, 6, 10),\n    (9, 4, 16), (9, 6, 4), (10, 2, 8), (10, 11, 6), (10, 12, 9), (11, 5, 5),\n    (11, 3, 19), (11, 8, 9), (11, 12, 4), (12, 5, 11), (12, 0, 4), (12, 3, 19),\n    (12, 8, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 4)\nprint(max_flow)\n```"}, "88": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 13, 2), (0, 6, 2), (0, 16, 13), (0, 7, 10), (0, 17, 2), (0, 14, 11),\n    (1, 16, 19), (1, 17, 5), (2, 10, 9), (2, 11, 4), (2, 5, 10), (2, 1, 13),\n    (3, 15, 18), (3, 5, 14), (4, 16, 2), (4, 15, 7), (4, 14, 13), (5, 8, 6),\n    (5, 3, 20), (5, 15, 13), (5, 14, 14), (6, 8, 20), (6, 10, 18), (6, 11, 6),\n    (6, 5, 17), (6, 0, 2), (6, 9, 8), (6, 12, 15), (7, 8, 12), (7, 6, 9),\n    (7, 10, 10), (7, 15, 15), (7, 17, 4), (8, 2, 10), (8, 0, 3), (8, 7, 6),\n    (8, 12, 5), (8, 1, 10), (8, 14, 12), (9, 13, 10), (9, 3, 19), (9, 4, 17),\n    (9, 16, 15), (9, 11, 10), (9, 5, 3), (9, 0, 15), (10, 16, 1), (10, 15, 17),\n    (10, 5, 3), (10, 7, 16), (11, 15, 7), (11, 5, 13), (11, 9, 12), (11, 17, 3),\n    (11, 14, 7), (12, 13, 20), (12, 5, 4), (12, 17, 2), (13, 3, 14), (13, 4, 1),\n    (14, 8, 10), (14, 6, 19), (14, 5, 16), (14, 7, 19), (14, 17, 13), (15, 8, 6),\n    (15, 16, 20), (16, 10, 9), (16, 9, 18), (17, 13, 13), (17, 8, 4), (17, 5, 19),\n    (17, 12, 2), (17, 14, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(8, 9))\n```"}, "89": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 5, 3),\n    (1, 4, 2),\n    (1, 7, 3),\n    (2, 1, 8),\n    (3, 6, 5),\n    (3, 4, 2),\n    (3, 5, 5),\n    (4, 6, 7),\n    (4, 2, 3),\n    (5, 6, 2),\n    (5, 2, 2),\n    (7, 6, 2),\n    (7, 0, 2),\n    (7, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 6))\n```"}, "90": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 4, 3), (0, 1, 6), (0, 2, 3), (1, 2, 4), (1, 0, 4),\n    (2, 4, 9), (2, 3, 7), (3, 4, 4), (3, 0, 5), (4, 1, 4),\n    (4, 2, 4), (4, 0, 2), (5, 0, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 4))\n```"}, "91": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 2, 13), (0, 10, 15), (0, 12, 18), (1, 2, 9), (1, 5, 6), (1, 8, 7), (1, 9, 19),\n    (2, 10, 7), (2, 14, 2), (2, 9, 1), (2, 1, 9), (2, 12, 3), (2, 4, 8), (3, 10, 7),\n    (4, 13, 19), (4, 1, 11), (4, 0, 9), (5, 11, 14), (5, 1, 17), (6, 2, 1), (6, 9, 8),\n    (7, 13, 3), (8, 10, 5), (8, 13, 7), (8, 11, 9), (8, 1, 4), (9, 2, 18), (9, 6, 13),\n    (9, 7, 17), (9, 0, 1), (9, 15, 20), (10, 11, 3), (10, 7, 16), (10, 0, 6), (10, 12, 12),\n    (11, 10, 16), (11, 1, 5), (11, 12, 3), (11, 4, 8), (12, 2, 8), (12, 1, 14), (12, 4, 1),\n    (13, 2, 11), (13, 10, 8), (13, 8, 19), (13, 12, 1), (13, 4, 17), (14, 10, 15), (14, 8, 2),\n    (15, 10, 18), (15, 14, 6), (15, 8, 16), (15, 13, 9), (15, 11, 10), (15, 3, 15), (15, 4, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(15, 13)\nprint(max_flow)\n```"}, "92": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 4, 1), (0, 1, 3), (0, 7, 2), (1, 4, 7), (1, 9, 4), (1, 5, 2),\n    (2, 1, 4), (2, 8, 2), (2, 7, 6), (3, 0, 7), (3, 7, 2), (4, 0, 2),\n    (4, 6, 4), (6, 5, 10), (6, 8, 5), (8, 6, 9), (9, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 5)\nprint(max_flow)\n```"}, "93": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 3, 9)\ng.add_edge(0, 1, 3)\ng.add_edge(1, 3, 1)\ng.add_edge(4, 0, 10)\ng.add_edge(4, 1, 3)\n\nprint(g.edmonds_karp(4, 3))\n```"}, "94": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 3, 3),\n    (0, 1, 6),\n    (0, 2, 3),\n    (1, 5, 10),\n    (2, 5, 8),\n    (2, 1, 9),\n    (3, 4, 10),\n    (3, 5, 4),\n    (4, 2, 1),\n    (5, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "95": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 4, 7)\ng.add_edge(1, 0, 4)\ng.add_edge(1, 4, 1)\ng.add_edge(2, 0, 1)\ng.add_edge(2, 4, 1)\ng.add_edge(3, 0, 9)\ng.add_edge(4, 1, 5)\ng.add_edge(4, 0, 10)\ng.add_edge(4, 2, 9)\n\nmax_flow = g.edmonds_karp(2, 0)\nprint(max_flow)\n```"}, "96": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 4, 3),\n    (1, 6, 1),\n    (3, 0, 7),\n    (3, 6, 6),\n    (3, 1, 1),\n    (4, 3, 7),\n    (5, 3, 2),\n    (5, 6, 2),\n    (5, 1, 5),\n    (6, 5, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 6))\n```"}, "97": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph(14)\nedges = [\n    (0, 10, 8), (0, 11, 13), (0, 8, 2), (0, 7, 13), (0, 4, 16),\n    (1, 2, 20), (1, 5, 7), (2, 0, 5), (2, 12, 4), (3, 10, 11),\n    (3, 0, 17), (3, 2, 2), (3, 9, 15), (3, 13, 9), (4, 10, 6),\n    (4, 8, 1), (4, 12, 15), (4, 5, 3), (4, 13, 8), (5, 10, 10),\n    (5, 3, 16), (5, 8, 7), (5, 12, 16), (6, 7, 9), (6, 9, 4),\n    (7, 0, 20), (7, 2, 5), (7, 1, 11), (7, 9, 1), (8, 10, 7),\n    (8, 3, 2), (8, 11, 11), (8, 4, 10), (8, 6, 19), (9, 0, 17),\n    (9, 7, 16), (9, 5, 16), (10, 12, 17), (10, 7, 5), (10, 4, 8),\n    (11, 8, 2), (11, 2, 12), (12, 9, 9), (12, 13, 1), (13, 10, 5),\n    (13, 0, 9), (13, 11, 15), (13, 1, 2), (13, 4, 14), (13, 9, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate the maximum flow from node 3 to node 9\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "98": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 7, 3), (0, 1, 3), (2, 8, 6), (4, 7, 3), (4, 5, 7),\n    (4, 3, 7), (5, 7, 6), (6, 1, 7), (7, 2, 10), (9, 8, 2),\n    (9, 5, 5), (9, 4, 3), (9, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 8))\n```"}, "99": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.add_edge(1, 3, 9)\ng.add_edge(1, 0, 6)\ng.add_edge(2, 4, 3)\ng.add_edge(2, 0, 7)\ng.add_edge(3, 5, 3)\ng.add_edge(4, 6, 8)\ng.add_edge(5, 6, 8)\ng.add_edge(5, 0, 4)\ng.add_edge(6, 4, 7)\ng.add_edge(6, 2, 2)\ng.add_edge(7, 3, 8)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "100": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 1)\ng.add_edge(0, 3, 3)\ng.add_edge(2, 0, 1)\ng.add_edge(2, 3, 7)\ng.add_edge(3, 2, 8)\ng.add_edge(4, 1, 2)\ng.add_edge(4, 2, 6)\ng.add_edge(4, 3, 7)\n\nprint(g.edmonds_karp(4, 1))\n```"}, "101": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(1, 0, 7)\ng.add_edge(1, 3, 3)\ng.add_edge(1, 2, 1)\ng.add_edge(1, 4, 9)\ng.add_edge(2, 0, 9)\ng.add_edge(2, 3, 7)\ng.add_edge(3, 0, 9)\ng.add_edge(3, 4, 1)\ng.add_edge(4, 3, 8)\n\nprint(g.edmonds_karp(1, 3))\n```"}, "102": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 2, 9), (0, 8, 1), (1, 8, 5), (2, 8, 9), (2, 3, 9),\n    (2, 7, 2), (4, 6, 10), (4, 8, 5), (5, 6, 7), (5, 8, 2),\n    (6, 8, 3), (7, 3, 7), (8, 2, 5), (8, 3, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(8, 3))\n```"}, "103": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 3, 8), (0, 1, 9), (1, 5, 5), (1, 0, 8), (2, 6, 7),\n    (2, 0, 2), (3, 0, 2), (3, 1, 8), (4, 5, 8), (4, 0, 7),\n    (4, 1, 8), (5, 3, 2), (5, 2, 9), (6, 5, 10), (6, 0, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 0\nprint(g.edmonds_karp(source, sink))\n```"}, "104": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 6, 3),\n    (0, 1, 7),\n    (1, 0, 7),\n    (2, 4, 6),\n    (2, 0, 8),\n    (3, 5, 2),\n    (4, 6, 3),\n    (5, 1, 6),\n    (5, 2, 6),\n    (5, 4, 1),\n    (5, 0, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 0)\nprint(max_flow)\n```"}, "105": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 4, 18), (0, 3, 4), (1, 0, 1), (1, 7, 5), (2, 15, 4), (2, 0, 15),\n    (2, 12, 8), (2, 5, 6), (2, 8, 13), (2, 7, 11), (3, 4, 6), (3, 15, 14),\n    (3, 5, 17), (3, 8, 9), (3, 11, 8), (4, 14, 19), (4, 12, 5), (4, 5, 17),\n    (4, 6, 2), (5, 0, 6), (5, 12, 5), (5, 1, 8), (5, 7, 18), (5, 6, 16),\n    (6, 3, 15), (6, 0, 6), (7, 4, 1), (7, 13, 15), (7, 0, 8), (7, 16, 20),\n    (7, 12, 18), (7, 8, 16), (8, 4, 3), (8, 2, 18), (8, 10, 7), (8, 16, 5),\n    (8, 6, 10), (9, 3, 3), (9, 10, 7), (9, 14, 8), (9, 7, 9), (9, 6, 10),\n    (10, 15, 15), (10, 16, 3), (10, 1, 6), (10, 6, 14), (10, 11, 11),\n    (11, 4, 2), (11, 10, 12), (11, 7, 17), (12, 2, 14), (12, 13, 11),\n    (12, 10, 3), (12, 1, 7), (12, 6, 4), (13, 4, 6), (13, 8, 5), (13, 7, 15),\n    (14, 10, 16), (14, 8, 3), (14, 6, 19), (14, 11, 15), (15, 13, 10),\n    (15, 0, 18), (15, 10, 9), (15, 8, 14), (15, 9, 20), (16, 5, 5), (16, 9, 12)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 7\nprint(g.edmonds_karp(source, sink))\n```"}, "106": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 16, 12), (0, 4, 13), (0, 17, 5), (1, 10, 13), (1, 16, 7), (1, 4, 1),\n    (1, 0, 1), (1, 9, 6), (1, 5, 8), (1, 13, 5), (1, 14, 3), (2, 11, 16),\n    (2, 10, 5), (2, 19, 1), (2, 7, 5), (2, 6, 8), (3, 16, 15), (3, 0, 12),\n    (3, 6, 17), (4, 2, 14), (4, 0, 10), (4, 3, 12), (4, 13, 3), (4, 6, 6),\n    (5, 11, 8), (5, 19, 3), (5, 6, 17), (6, 0, 4), (6, 9, 9), (6, 17, 18),\n    (6, 13, 13), (6, 12, 9), (6, 7, 1), (6, 14, 13), (6, 18, 19), (7, 8, 16),\n    (7, 11, 3), (7, 15, 6), (7, 4, 15), (7, 9, 5), (7, 14, 16), (8, 0, 12),\n    (8, 1, 1), (8, 9, 14), (8, 7, 13), (8, 6, 19), (8, 14, 8), (8, 18, 7),\n    (9, 10, 10), (9, 16, 16), (9, 1, 17), (9, 3, 6), (9, 19, 18), (9, 5, 18),\n    (9, 18, 12), (10, 8, 6), (10, 11, 19), (10, 15, 19), (11, 16, 14),\n    (11, 4, 2), (11, 0, 13), (11, 7, 19), (12, 4, 18), (12, 1, 10),\n    (12, 17, 18), (12, 3, 19), (12, 13, 10), (13, 4, 9), (13, 18, 7),\n    (14, 8, 4), (14, 2, 8), (14, 1, 16), (14, 17, 8), (14, 19, 5),\n    (14, 13, 18), (14, 12, 4), (15, 8, 14), (15, 16, 9), (15, 4, 10),\n    (15, 9, 16), (15, 12, 9), (16, 9, 20), (16, 3, 1), (18, 16, 6),\n    (18, 3, 6), (18, 12, 3), (18, 6, 14), (18, 14, 6), (19, 10, 14),\n    (19, 16, 1), (19, 4, 20), (19, 0, 8), (19, 5, 16), (19, 7, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 17\nprint(g.edmonds_karp(source, sink))\n```"}, "107": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 4, 17), (0, 3, 19), (0, 1, 10), (0, 5, 1),\n    (1, 4, 7), (1, 3, 6), (1, 7, 12), (1, 5, 8),\n    (2, 11, 2), (3, 9, 2), (3, 1, 11), (4, 0, 15),\n    (4, 10, 5), (4, 1, 18), (5, 9, 17), (5, 3, 17),\n    (6, 9, 10), (6, 7, 19), (7, 8, 9), (7, 1, 13),\n    (7, 5, 9), (8, 0, 14), (8, 2, 9), (8, 4, 19),\n    (8, 9, 16), (8, 11, 11), (8, 3, 11), (9, 4, 19),\n    (9, 10, 19), (9, 11, 12), (9, 3, 18), (10, 4, 1),\n    (10, 8, 11), (10, 7, 6), (11, 12, 7), (11, 7, 10),\n    (12, 4, 14), (12, 10, 19), (12, 1, 1), (12, 7, 19),\n    (12, 5, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 2))\n```"}, "108": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 5, 6), (0, 7, 12), (1, 8, 2), (1, 3, 1), (2, 9, 13), (2, 10, 10),\n    (2, 6, 11), (3, 11, 14), (3, 5, 16), (3, 10, 12), (4, 1, 12), (4, 10, 9),\n    (5, 11, 18), (5, 4, 12), (5, 7, 10), (6, 5, 12), (7, 3, 7), (7, 6, 12),\n    (8, 11, 6), (8, 9, 13), (9, 3, 20), (10, 5, 3), (10, 3, 9), (10, 4, 14),\n    (11, 10, 20)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 4)\nprint(max_flow)\n```"}, "109": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 1, 5), (0, 15, 3), (1, 0, 6), (1, 8, 3), (1, 6, 13),\n    (2, 0, 7), (2, 13, 18), (2, 1, 20), (2, 3, 4), (3, 13, 11),\n    (3, 10, 20), (3, 1, 4), (3, 2, 15), (3, 7, 1), (3, 15, 8),\n    (4, 1, 10), (4, 8, 13), (4, 9, 4), (4, 7, 19), (4, 15, 11),\n    (5, 2, 6), (5, 3, 7), (5, 15, 17), (6, 0, 3), (6, 11, 20),\n    (6, 10, 13), (6, 3, 17), (7, 6, 17), (7, 5, 15), (8, 0, 11),\n    (8, 11, 8), (8, 14, 15), (8, 2, 10), (9, 1, 8), (9, 14, 2),\n    (9, 6, 8), (9, 7, 1), (10, 1, 17), (11, 13, 17), (11, 8, 18),\n    (11, 5, 18), (11, 15, 6), (12, 0, 2), (12, 14, 3), (12, 5, 15),\n    (13, 10, 15), (14, 0, 7), (15, 2, 13), (15, 6, 15), (15, 7, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 14))\n```"}, "110": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 11, 17), (0, 2, 16), (1, 9, 11), (1, 0, 15), (1, 2, 9),\n    (2, 3, 15), (3, 8, 7), (4, 0, 15), (4, 1, 4), (4, 3, 19),\n    (4, 7, 16), (5, 9, 10), (5, 2, 13), (6, 11, 3), (7, 10, 15),\n    (7, 11, 15), (7, 6, 10), (7, 0, 10), (7, 8, 5), (7, 3, 16),\n    (7, 2, 10), (8, 4, 2), (8, 11, 15), (8, 6, 8), (8, 3, 6),\n    (8, 2, 16), (9, 1, 8), (9, 3, 18), (9, 2, 6), (10, 4, 17),\n    (10, 5, 13), (10, 1, 10), (10, 3, 5), (10, 2, 1), (11, 4, 3),\n    (11, 6, 3), (11, 9, 9), (11, 8, 16), (11, 1, 3), (11, 3, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 3))\n```"}, "111": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 5, 6), (0, 6, 7), (0, 3, 1),\n    (2, 9, 3), (4, 3, 7), (5, 2, 9),\n    (5, 1, 2), (6, 8, 6), (6, 7, 10),\n    (7, 3, 6), (8, 3, 8), (8, 1, 7),\n    (9, 0, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 3))\n```"}, "112": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 2, 6), (0, 1, 7), (1, 0, 9), (1, 7, 2), (2, 1, 3), (2, 7, 10),\n    (3, 2, 3), (3, 8, 2), (3, 7, 6), (4, 0, 10), (5, 6, 7), (5, 1, 6),\n    (5, 3, 1), (7, 2, 9), (7, 1, 6), (8, 6, 1), (8, 0, 7), (8, 9, 9),\n    (9, 6, 5), (9, 3, 5), (9, 5, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 1))\n```"}, "113": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 16, 19), (0, 9, 6), (0, 7, 1), (1, 4, 1), (1, 10, 16), (1, 6, 10),\n    (1, 5, 2), (1, 19, 5), (1, 2, 11), (2, 3, 5), (2, 7, 11), (2, 13, 9),\n    (3, 9, 3), (3, 5, 19), (3, 19, 10), (3, 13, 12), (3, 17, 15), (4, 16, 6),\n    (4, 10, 10), (4, 7, 11), (4, 18, 14), (4, 13, 14), (5, 4, 17), (5, 9, 19),\n    (5, 11, 19), (5, 7, 16), (5, 1, 18), (6, 16, 11), (6, 14, 18), (6, 5, 15),\n    (6, 7, 11), (6, 18, 6), (6, 1, 11), (6, 2, 4), (7, 0, 18), (7, 14, 9),\n    (7, 9, 15), (7, 3, 17), (7, 15, 7), (7, 19, 5), (7, 8, 17), (8, 14, 16),\n    (8, 6, 12), (8, 15, 8), (8, 13, 11), (9, 16, 5), (9, 0, 16), (9, 4, 16),\n    (10, 4, 20), (10, 9, 18), (10, 5, 19), (11, 7, 3), (11, 18, 8), (11, 8, 12),\n    (12, 4, 11), (12, 11, 13), (12, 2, 4), (13, 0, 6), (13, 4, 16), (13, 10, 11),\n    (13, 6, 4), (13, 3, 13), (13, 7, 7), (13, 17, 18), (14, 10, 5), (14, 5, 8),\n    (14, 8, 17), (15, 14, 1), (15, 9, 11), (15, 7, 2), (15, 19, 3), (15, 17, 16),\n    (16, 4, 16), (16, 10, 1), (16, 9, 3), (16, 5, 13), (16, 7, 4), (16, 13, 2),\n    (17, 14, 11), (17, 10, 18), (17, 9, 20), (17, 11, 14), (17, 15, 10), (17, 13, 11),\n    (17, 8, 20), (17, 2, 6), (18, 0, 4), (18, 11, 12), (19, 16, 1), (19, 0, 9),\n    (19, 4, 10), (19, 9, 4), (19, 3, 8), (19, 7, 1), (19, 1, 2), (19, 13, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 3)\nprint(max_flow)\n```"}, "114": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 4, 3),\n    (1, 4, 4),\n    (1, 3, 9),\n    (2, 4, 2),\n    (2, 3, 9),\n    (4, 2, 1),\n    (4, 3, 6),\n    (4, 0, 2),\n    (5, 4, 9),\n    (5, 3, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 3))\n```"}, "115": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 8, 6), (0, 12, 5), (0, 2, 11), (0, 9, 1), (0, 11, 17), (0, 1, 11),\n    (1, 3, 19), (1, 9, 10), (1, 11, 19), (1, 6, 19), (2, 3, 1), (2, 1, 6),\n    (3, 7, 5), (3, 8, 2), (3, 12, 18), (3, 2, 2), (3, 9, 15), (4, 13, 6),\n    (4, 8, 8), (4, 2, 19), (4, 0, 6), (5, 1, 18), (6, 3, 15), (6, 10, 3),\n    (6, 1, 11), (6, 5, 4), (7, 9, 3), (8, 1, 4), (8, 0, 5), (9, 13, 5),\n    (9, 7, 3), (9, 8, 20), (9, 6, 10), (9, 1, 9), (10, 13, 14), (10, 9, 17),\n    (10, 4, 20), (10, 1, 12), (11, 2, 15), (11, 4, 7), (12, 2, 18), (12, 9, 6),\n    (12, 11, 18), (12, 10, 10), (12, 6, 1), (12, 1, 2), (13, 8, 20), (13, 12, 15),\n    (13, 11, 8), (13, 10, 16), (13, 1, 14)\n]\n\ng = Graph(14)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 3\nprint(g.edmonds_karp(source, sink))\n```"}, "116": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 16, 12), (0, 10, 3), (0, 1, 16), (0, 3, 2), (0, 9, 1),\n    (1, 17, 4), (1, 5, 20), (1, 12, 3), (1, 14, 7), (1, 11, 7),\n    (2, 16, 12), (2, 10, 8), (2, 12, 2), (2, 9, 20),\n    (3, 16, 19), (3, 4, 1), (3, 13, 18),\n    (4, 17, 15), (4, 10, 2), (4, 6, 17), (4, 3, 10),\n    (5, 7, 2), (5, 6, 15), (5, 13, 13), (5, 9, 8),\n    (6, 7, 13), (6, 13, 7), (6, 12, 6), (6, 9, 7),\n    (7, 5, 7), (7, 2, 13), (7, 9, 19),\n    (8, 10, 3), (8, 4, 6), (8, 13, 6), (8, 12, 9),\n    (9, 2, 13), (9, 1, 14), (9, 0, 15), (9, 11, 11),\n    (10, 5, 15), (10, 2, 15), (10, 6, 1), (10, 4, 18), (10, 11, 8),\n    (11, 6, 18), (11, 15, 9),\n    (12, 0, 14), (12, 13, 8),\n    (13, 5, 16), (13, 10, 14), (13, 2, 1), (13, 4, 10), (13, 15, 20), (13, 14, 18),\n    (14, 5, 3), (14, 16, 5), (14, 10, 16), (14, 1, 7), (14, 0, 19), (14, 11, 1), (14, 3, 20),\n    (15, 7, 7), (15, 8, 7), (15, 14, 11),\n    (16, 8, 12), (16, 13, 13), (16, 12, 19),\n    (17, 2, 19), (17, 1, 4), (17, 0, 18), (17, 15, 2), (17, 12, 19), (17, 9, 12)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(15, 16))\n```"}, "117": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 5, 19), (0, 13, 19), (0, 10, 4), (0, 15, 4), (0, 4, 17),\n    (1, 5, 6), (1, 7, 1), (1, 8, 7), (1, 3, 1), (1, 6, 14),\n    (2, 5, 5), (2, 11, 1), (2, 3, 4), (2, 1, 18),\n    (3, 8, 12), (3, 18, 18), (3, 14, 1), (3, 16, 14), (3, 4, 4), (3, 17, 5), (3, 0, 19),\n    (4, 11, 1), (4, 3, 7), (4, 12, 6), (4, 13, 12), (4, 10, 13), (4, 1, 6), (4, 16, 1),\n    (5, 11, 11), (5, 7, 20), (5, 1, 17), (5, 16, 20),\n    (6, 11, 20), (6, 3, 6), (6, 18, 6),\n    (7, 9, 16), (7, 2, 15), (7, 3, 17), (7, 14, 11), (7, 15, 6), (7, 17, 12),\n    (8, 7, 19), (8, 6, 20), (8, 1, 7), (8, 16, 3), (8, 4, 2), (8, 17, 12),\n    (9, 2, 20), (9, 8, 2), (9, 6, 17), (9, 13, 2), (9, 1, 20), (9, 4, 13), (9, 17, 9),\n    (10, 9, 18), (10, 5, 18), (10, 11, 16),\n    (11, 9, 20), (11, 5, 10), (11, 7, 18), (11, 10, 12), (11, 18, 6), (11, 16, 10),\n    (12, 9, 18), (12, 3, 7), (12, 1, 1),\n    (13, 9, 4), (13, 2, 4), (13, 5, 17), (13, 14, 12), (13, 17, 8),\n    (14, 11, 10), (14, 3, 5), (14, 18, 5),\n    (15, 3, 2), (15, 1, 9), (15, 0, 13),\n    (16, 11, 5), (16, 8, 4), (16, 18, 16), (16, 0, 15),\n    (17, 7, 8), (17, 18, 12), (17, 14, 13),\n    (18, 8, 14), (18, 12, 12), (18, 14, 13), (18, 4, 15), (18, 0, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 13))\n```"}, "118": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 13, 5), (0, 3, 15), (0, 5, 1), (0, 1, 16), (0, 8, 18), (0, 11, 5),\n    (1, 13, 3), (1, 5, 2), (1, 0, 6), (1, 6, 11), (2, 3, 18), (2, 15, 8),\n    (2, 4, 5), (2, 5, 6), (2, 10, 12), (2, 0, 12), (3, 16, 20), (3, 14, 7),\n    (3, 12, 1), (3, 6, 17), (4, 15, 15), (4, 9, 20), (4, 16, 4), (4, 10, 2),\n    (4, 12, 2), (4, 0, 17), (5, 13, 3), (5, 3, 4), (5, 7, 11), (5, 9, 17),\n    (5, 16, 17), (5, 17, 14), (5, 14, 12), (5, 6, 20), (6, 7, 5), (6, 18, 2),\n    (6, 10, 13), (6, 12, 18), (6, 11, 14), (6, 2, 5), (7, 4, 2), (7, 9, 10),\n    (7, 16, 10), (7, 0, 19), (7, 6, 5), (8, 4, 16), (8, 9, 9), (8, 10, 11),\n    (8, 14, 3), (8, 12, 17), (9, 13, 12), (9, 10, 9), (9, 2, 10), (9, 19, 3),\n    (9, 6, 13), (10, 13, 18), (10, 3, 19), (10, 15, 18), (10, 5, 20), (10, 16, 12),\n    (10, 0, 2), (10, 6, 1), (11, 17, 6), (11, 18, 14), (11, 10, 13), (11, 14, 3),\n    (12, 18, 19), (12, 14, 11), (12, 8, 13), (12, 11, 20), (13, 3, 17), (13, 15, 9),\n    (13, 5, 4), (13, 14, 5), (13, 12, 20), (13, 11, 9), (13, 2, 14), (13, 19, 18),\n    (14, 3, 4), (14, 4, 15), (14, 18, 15), (15, 7, 7), (15, 5, 20), (15, 1, 2),\n    (15, 14, 15), (15, 2, 8), (15, 6, 5), (16, 13, 20), (16, 7, 13), (16, 12, 4),\n    (16, 11, 2), (17, 3, 17), (17, 7, 11), (17, 18, 16), (17, 10, 6), (17, 8, 13),\n    (17, 0, 11), (18, 3, 13), (18, 15, 18), (18, 4, 13), (18, 17, 8), (18, 12, 9),\n    (18, 19, 15), (18, 6, 14), (19, 7, 4), (19, 17, 3), (19, 12, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 7)\nprint(max_flow)\n```"}, "119": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append([v, w])\n        self.graph[v].append([u, 0])\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u]:\n                if visited[v] == False and capacity > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                for v, capacity in self.graph[parent[s]]:\n                    if v == s:\n                        path_flow = min(path_flow, capacity)\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                for i, (vertex, capacity) in enumerate(self.graph[u]):\n                    if vertex == v:\n                        self.graph[u][i][1] -= path_flow\n                for i, (vertex, capacity) in enumerate(self.graph[v]):\n                    if vertex == u:\n                        self.graph[v][i][1] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 1)\ng.add_edge(0, 2, 9)\ng.add_edge(1, 3, 6)\ng.add_edge(1, 4, 2)\ng.add_edge(1, 0, 1)\ng.add_edge(1, 2, 3)\ng.add_edge(3, 0, 1)\ng.add_edge(4, 0, 3)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "120": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 1, 8),\n    (1, 2, 1),\n    (2, 5, 7),\n    (2, 3, 7),\n    (3, 5, 8),\n    (3, 1, 2),\n    (4, 5, 2),\n    (5, 0, 3),\n    (5, 3, 8),\n    (5, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 1))\n```"}, "121": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 3, 10),\n    (0, 1, 7),\n    (1, 4, 1),\n    (1, 2, 1),\n    (2, 0, 6),\n    (3, 7, 3),\n    (4, 3, 7),\n    (5, 3, 4),\n    (5, 2, 3),\n    (6, 5, 6),\n    (7, 0, 4),\n    (7, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "122": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 2, 11), (0, 18, 6), (0, 15, 9), (0, 17, 3), (1, 7, 14), (1, 15, 3),\n    (1, 12, 2), (1, 10, 12), (2, 5, 7), (2, 6, 17), (2, 15, 4), (2, 14, 5),\n    (2, 13, 12), (3, 6, 18), (3, 0, 14), (3, 15, 10), (3, 16, 14), (3, 17, 7),\n    (4, 7, 3), (4, 5, 11), (4, 2, 11), (4, 18, 4), (4, 15, 4), (4, 13, 3),\n    (4, 16, 15), (4, 17, 20), (5, 11, 15), (6, 7, 20), (6, 2, 3), (6, 19, 19),\n    (6, 18, 18), (6, 0, 19), (6, 14, 5), (6, 12, 16), (6, 10, 8), (6, 17, 2),\n    (7, 6, 2), (7, 15, 2), (7, 10, 2), (7, 9, 6), (8, 11, 18), (8, 13, 5),\n    (8, 9, 7), (9, 19, 18), (9, 18, 2), (9, 11, 9), (9, 15, 14), (10, 7, 6),\n    (10, 19, 2), (10, 0, 16), (10, 15, 7), (10, 8, 4), (10, 1, 10), (11, 0, 15),\n    (11, 16, 5), (11, 9, 19), (12, 2, 13), (12, 19, 17), (12, 18, 2), (13, 5, 19),\n    (13, 6, 15), (13, 11, 7), (13, 0, 20), (13, 3, 18), (13, 10, 16), (14, 2, 8),\n    (14, 15, 1), (14, 1, 16), (15, 7, 15), (15, 2, 1), (15, 6, 16), (15, 3, 18),\n    (15, 17, 9), (16, 7, 12), (16, 6, 19), (16, 18, 16), (16, 12, 7), (17, 0, 10),\n    (17, 10, 3), (18, 7, 11), (18, 5, 16), (18, 4, 15), (18, 2, 18), (18, 13, 18),\n    (18, 3, 19), (19, 7, 16), (19, 0, 20), (19, 10, 11), (19, 1, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 15))\n```"}, "123": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 3, 1), (0, 6, 9), (1, 4, 6), (1, 6, 1),\n    (2, 4, 10), (3, 5, 7), (3, 1, 8), (3, 6, 8),\n    (4, 1, 8), (4, 2, 2), (5, 6, 4), (6, 3, 5),\n    (6, 1, 9), (7, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 2)\nprint(max_flow)\n```"}, "124": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (1, 4, 4),\n    (2, 8, 3),\n    (3, 2, 3),\n    (3, 6, 10),\n    (3, 1, 6),\n    (4, 8, 2),\n    (5, 7, 4),\n    (5, 8, 2),\n    (6, 2, 10),\n    (7, 2, 9),\n    (8, 4, 1),\n    (8, 3, 1),\n    (8, 5, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 2))\n```"}, "125": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 3, 19), (0, 4, 19), (0, 10, 18), (1, 4, 6), (1, 8, 2), (1, 2, 4),\n    (1, 6, 15), (1, 7, 16), (2, 3, 14), (2, 1, 3), (2, 9, 14), (3, 4, 17),\n    (3, 10, 10), (3, 11, 20), (4, 0, 13), (4, 5, 5), (4, 6, 8), (4, 7, 3),\n    (5, 4, 7), (5, 11, 19), (6, 4, 13), (6, 5, 17), (6, 7, 14), (7, 3, 6),\n    (7, 9, 10), (7, 12, 3), (7, 11, 14), (8, 3, 4), (8, 9, 20), (8, 6, 3),\n    (8, 11, 19), (9, 3, 2), (9, 8, 16), (9, 10, 18), (10, 5, 10), (10, 1, 9),\n    (11, 4, 1), (11, 1, 13), (11, 6, 20), (11, 7, 14), (12, 4, 18), (12, 8, 11),\n    (12, 5, 10), (12, 9, 3), (12, 11, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 3\nprint(g.edmonds_karp(source, sink))\n```"}, "126": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 7, 18), (0, 8, 20), (1, 11, 2), (1, 7, 11), (1, 6, 5), (1, 10, 2),\n    (1, 9, 3), (1, 13, 8), (2, 11, 14), (2, 12, 12), (2, 8, 17), (2, 5, 20),\n    (3, 11, 8), (3, 1, 2), (3, 12, 3), (3, 2, 11), (3, 0, 6), (3, 5, 10),\n    (3, 13, 8), (4, 1, 18), (4, 10, 4), (4, 2, 19), (4, 13, 5), (5, 2, 1),\n    (5, 13, 19), (6, 10, 4), (6, 0, 13), (6, 13, 20), (7, 1, 15), (8, 4, 15),\n    (8, 2, 18), (9, 4, 6), (9, 13, 16), (10, 3, 17), (10, 5, 7), (11, 4, 20),\n    (12, 11, 2), (12, 7, 12), (12, 6, 11), (12, 0, 7), (12, 9, 4), (12, 5, 8),\n    (13, 4, 4), (13, 7, 15), (13, 12, 11), (13, 9, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 13))\n```"}, "127": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 12, 18), (0, 16, 13), (0, 2, 2), (1, 15, 20), (1, 4, 7), (1, 5, 2),\n    (1, 12, 16), (1, 11, 18), (1, 0, 7), (2, 13, 16), (2, 10, 9), (2, 6, 16),\n    (2, 16, 9), (3, 0, 11), (4, 7, 18), (4, 12, 2), (4, 1, 16), (4, 0, 12),\n    (4, 2, 5), (5, 15, 6), (5, 3, 5), (5, 2, 17), (6, 15, 17), (6, 7, 8),\n    (6, 10, 5), (6, 5, 3), (6, 12, 3), (7, 15, 1), (7, 3, 12), (7, 4, 5),\n    (7, 8, 12), (8, 3, 15), (8, 11, 16), (8, 1, 2), (9, 13, 14), (9, 3, 14),\n    (9, 1, 17), (9, 14, 2), (10, 13, 9), (10, 5, 16), (10, 16, 20), (10, 1, 8),\n    (10, 0, 13), (11, 6, 10), (11, 5, 19), (11, 1, 19), (11, 14, 4), (12, 15, 13),\n    (12, 7, 19), (12, 3, 4), (12, 9, 8), (13, 10, 2), (13, 4, 15), (14, 7, 3),\n    (14, 4, 13), (14, 12, 5), (14, 9, 13), (14, 8, 12), (14, 11, 1), (14, 2, 11),\n    (15, 10, 11), (15, 5, 5), (15, 1, 7), (16, 1, 5), (16, 0, 8), (16, 2, 19)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 11\nprint(g.edmonds_karp(source, sink))\n```"}, "128": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 1, 10), (1, 9, 16), (1, 8, 17), (2, 8, 10), (2, 4, 6),\n    (3, 7, 9), (3, 8, 3), (3, 10, 6), (4, 0, 17), (4, 10, 3),\n    (5, 8, 14), (5, 11, 18), (6, 2, 17), (6, 8, 7), (7, 1, 18),\n    (8, 6, 17), (8, 1, 4), (8, 0, 5), (9, 5, 11), (9, 8, 9),\n    (9, 0, 9), (9, 3, 17), (10, 1, 17), (11, 6, 17), (11, 1, 13),\n    (11, 2, 8), (11, 4, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 2\nprint(g.edmonds_karp(source, sink))\n```"}, "129": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 1, 13), (0, 4, 19), (0, 3, 12), (0, 2, 7),\n    (1, 9, 20), (1, 0, 6), (2, 6, 10), (2, 5, 10),\n    (2, 10, 5), (2, 0, 2), (3, 1, 10), (3, 9, 9),\n    (4, 10, 15), (4, 9, 20), (4, 2, 4), (5, 10, 20),\n    (5, 0, 20), (6, 1, 19), (6, 3, 3), (6, 7, 15),\n    (6, 8, 11), (7, 10, 6), (8, 6, 5), (8, 5, 11),\n    (8, 9, 19), (8, 0, 19), (9, 6, 13), (9, 7, 14),\n    (9, 2, 14), (9, 0, 2), (10, 3, 12), (10, 0, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 9\nprint(g.edmonds_karp(source, sink))\n```"}, "130": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 9, 4), (0, 2, 5), (1, 0, 18), (1, 5, 1), (2, 4, 12), (2, 11, 7),\n    (3, 5, 10), (3, 12, 19), (4, 5, 17), (4, 10, 16), (4, 6, 17), (5, 8, 8),\n    (5, 4, 18), (5, 11, 9), (6, 5, 14), (6, 4, 8), (6, 9, 19), (6, 1, 4),\n    (6, 10, 4), (7, 3, 6), (7, 4, 5), (7, 10, 5), (8, 9, 13), (9, 4, 17),\n    (10, 8, 5), (10, 5, 9), (10, 1, 20), (10, 12, 6), (11, 4, 10), (11, 1, 8),\n    (11, 12, 19), (12, 5, 16), (12, 4, 1), (12, 7, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 10\nsink = 11\nprint(g.edmonds_karp(source, sink))\n```"}, "131": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 4, 8), (0, 1, 8), (1, 4, 4), (1, 3, 2), (3, 2, 8),\n    (4, 7, 5), (4, 6, 1), (4, 2, 9), (4, 1, 5), (5, 0, 8),\n    (5, 4, 10), (5, 1, 9), (7, 5, 9), (7, 3, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 2)\nprint(max_flow)\n```"}, "132": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.add_edge(1, 7, 5)\ng.add_edge(2, 4, 1)\ng.add_edge(2, 1, 10)\ng.add_edge(3, 2, 5)\ng.add_edge(4, 6, 9)\ng.add_edge(5, 2, 8)\ng.add_edge(5, 3, 6)\ng.add_edge(6, 7, 7)\ng.add_edge(6, 1, 8)\ng.add_edge(7, 3, 2)\n\nmax_flow = g.edmonds_karp(5, 3)\nprint(max_flow)\n```"}, "133": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (1, 3, 8),\n    (1, 5, 2),\n    (1, 6, 3),\n    (1, 2, 2),\n    (3, 0, 3),\n    (4, 8, 3),\n    (4, 0, 9),\n    (4, 6, 8),\n    (8, 1, 8),\n    (8, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "134": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v, w])\n\n    def BFS(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque()\n        queue.append(s)\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind, val in enumerate(self.graph[u]):\n                v, w = val\n                if visited[v] == False and w > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return visited[t]\n\n    def FordFulkerson(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.BFS(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                for v, w in self.graph[parent[s]]:\n                    if v == s:\n                        path_flow = min(path_flow, w)\n                        break\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                for i, (vertex, capacity) in enumerate(self.graph[u]):\n                    if vertex == v:\n                        self.graph[u][i][1] -= path_flow\n                        break\n                for i, (vertex, capacity) in enumerate(self.graph[v]):\n                    if vertex == u:\n                        self.graph[v][i][1] += path_flow\n                        break\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.addEdge(0, 1, 3)\ng.addEdge(0, 2, 3)\ng.addEdge(0, 4, 3)\ng.addEdge(1, 3, 1)\ng.addEdge(2, 0, 10)\ng.addEdge(3, 2, 8)\ng.addEdge(3, 4, 2)\ng.addEdge(4, 2, 8)\ng.addEdge(4, 0, 10)\n\nprint(g.FordFulkerson(0, 2))\n```"}, "135": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.add_edge(1, 6, 4)\ng.add_edge(1, 5, 5)\ng.add_edge(2, 3, 6)\ng.add_edge(3, 1, 9)\ng.add_edge(3, 7, 5)\ng.add_edge(4, 0, 10)\ng.add_edge(4, 6, 7)\ng.add_edge(4, 5, 7)\ng.add_edge(5, 0, 1)\ng.add_edge(5, 7, 3)\ng.add_edge(6, 1, 5)\ng.add_edge(6, 2, 2)\n\nprint(g.edmonds_karp(6, 7))\n```"}, "136": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 4, 10),\n    (1, 4, 10),\n    (2, 0, 3),\n    (2, 1, 4),\n    (3, 4, 2),\n    (3, 1, 6),\n    (3, 5, 6),\n    (4, 3, 2),\n    (5, 1, 5),\n    (5, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "137": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 12, 1), (0, 4, 10), (0, 18, 18), (0, 14, 17), (0, 1, 2), (0, 13, 6),\n    (1, 7, 19), (1, 8, 8), (2, 12, 9), (2, 4, 5), (2, 7, 18), (2, 5, 16),\n    (2, 0, 8), (2, 13, 4), (2, 11, 4), (3, 4, 6), (3, 15, 17), (3, 0, 3),\n    (3, 6, 20), (4, 7, 10), (4, 15, 12), (4, 16, 12), (4, 5, 20), (4, 1, 12),\n    (4, 2, 17), (4, 13, 1), (5, 4, 4), (5, 14, 11), (5, 1, 20), (5, 0, 6),\n    (5, 13, 2), (5, 6, 5), (6, 4, 14), (6, 5, 20), (6, 9, 5), (6, 0, 20),\n    (6, 17, 8), (7, 3, 14), (7, 15, 19), (7, 18, 4), (7, 10, 5), (7, 5, 20),\n    (7, 1, 20), (7, 8, 12), (8, 12, 19), (8, 15, 14), (8, 10, 16), (8, 14, 20),\n    (8, 5, 15), (8, 11, 3), (9, 7, 3), (9, 15, 15), (9, 16, 4), (9, 10, 15),\n    (9, 14, 8), (9, 13, 15), (9, 17, 2), (9, 11, 12), (10, 4, 11), (10, 3, 20),\n    (10, 11, 14), (11, 7, 11), (11, 16, 17), (11, 14, 11), (11, 9, 20),\n    (11, 8, 20), (12, 7, 6), (12, 3, 5), (12, 18, 18), (13, 12, 11), (13, 4, 16),\n    (13, 15, 6), (13, 16, 18), (13, 18, 17), (13, 17, 2), (13, 6, 19),\n    (14, 13, 13), (15, 7, 2), (15, 18, 20), (15, 1, 15), (15, 13, 6), (15, 8, 5),\n    (16, 12, 16), (16, 7, 16), (16, 10, 1), (16, 9, 9), (16, 0, 5), (17, 3, 4),\n    (17, 9, 19), (17, 2, 7), (17, 11, 19), (18, 12, 8), (18, 16, 16), (18, 1, 7),\n    (18, 13, 16), (18, 17, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(18, 12)\nprint(max_flow)\n```"}, "138": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 16, 11), (0, 7, 20), (0, 17, 7), (0, 6, 10), (1, 18, 15), (1, 16, 19),\n    (1, 10, 16), (1, 4, 13), (1, 3, 19), (1, 13, 20), (2, 18, 14), (2, 15, 1),\n    (2, 16, 2), (2, 5, 8), (3, 16, 19), (3, 8, 17), (3, 11, 5), (3, 17, 7),\n    (3, 13, 1), (3, 9, 5), (4, 18, 6), (4, 8, 7), (4, 12, 11), (4, 14, 3),\n    (4, 1, 5), (5, 4, 8), (5, 12, 16), (5, 17, 4), (5, 9, 17), (6, 15, 16),\n    (6, 5, 2), (6, 13, 20), (7, 2, 16), (7, 15, 14), (7, 4, 13), (7, 12, 11),\n    (7, 1, 16), (8, 16, 6), (8, 0, 13), (8, 10, 4), (8, 3, 16), (8, 17, 6),\n    (8, 1, 8), (8, 9, 6), (9, 2, 6), (9, 0, 18), (10, 18, 2), (10, 15, 4),\n    (10, 0, 11), (10, 5, 14), (10, 7, 13), (10, 12, 19), (10, 17, 3), (11, 7, 12),\n    (11, 8, 12), (11, 14, 20), (11, 6, 5), (12, 18, 18), (12, 7, 4), (12, 8, 9),\n    (12, 3, 20), (12, 11, 10), (12, 14, 12), (13, 2, 7), (13, 0, 20), (13, 12, 7),\n    (13, 3, 15), (13, 14, 4), (13, 9, 1), (14, 15, 12), (14, 0, 15), (14, 12, 20),\n    (14, 13, 6), (15, 12, 20), (15, 17, 2), (15, 13, 1), (16, 5, 5), (16, 7, 4),\n    (16, 4, 4), (16, 3, 10), (16, 11, 14), (16, 17, 16), (16, 14, 7), (17, 0, 5),\n    (17, 5, 17), (17, 3, 4), (17, 13, 1), (17, 14, 6), (18, 16, 5), (18, 4, 16),\n    (18, 3, 13), (18, 11, 19), (18, 9, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 15))\n```"}, "139": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 12, 6), (0, 7, 3), (0, 13, 4), (1, 11, 14), (1, 3, 20),\n    (1, 7, 11), (1, 5, 11), (2, 11, 13), (2, 13, 12), (2, 9, 4),\n    (2, 10, 11), (3, 11, 15), (3, 13, 1), (4, 6, 12), (5, 12, 5),\n    (5, 0, 20), (5, 1, 4), (5, 3, 15), (5, 2, 16), (5, 13, 13),\n    (6, 11, 7), (6, 13, 8), (6, 5, 4), (7, 13, 14), (7, 5, 3),\n    (7, 10, 5), (8, 12, 1), (8, 3, 1), (8, 2, 12), (9, 0, 14),\n    (9, 3, 5), (9, 2, 13), (9, 13, 20), (9, 10, 12), (10, 8, 1),\n    (10, 12, 20), (10, 1, 8), (10, 2, 14), (10, 7, 13), (11, 12, 4),\n    (11, 2, 12), (11, 5, 20), (11, 9, 20), (12, 4, 8), (12, 11, 12),\n    (12, 1, 18), (12, 2, 13), (12, 5, 1), (12, 10, 6), (13, 8, 16),\n    (13, 11, 3), (13, 10, 19)\n]\n\ng = Graph(14)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 3)\nprint(max_flow)\n```"}, "140": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 10, 3), (0, 5, 4), (0, 13, 14), (0, 8, 11), (0, 9, 4),\n    (1, 3, 5), (1, 11, 4), (1, 13, 10), (2, 3, 7), (2, 7, 1),\n    (3, 10, 12), (3, 7, 15), (4, 13, 17), (5, 10, 5), (5, 2, 17),\n    (6, 0, 18), (6, 7, 18), (6, 9, 6), (7, 4, 6), (7, 6, 10),\n    (7, 13, 19), (7, 8, 9), (7, 9, 20), (8, 4, 3), (8, 1, 15),\n    (8, 13, 4), (8, 7, 13), (9, 6, 18), (9, 5, 10), (9, 12, 6),\n    (10, 7, 10), (10, 12, 6), (11, 4, 5), (11, 0, 9), (11, 1, 20),\n    (11, 2, 4), (11, 13, 11), (11, 8, 7), (12, 10, 10), (12, 13, 18),\n    (12, 9, 15), (13, 6, 5), (13, 2, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 11\nsink = 5\nprint(g.edmonds_karp(source, sink))\n```"}, "141": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 12, 1), (1, 3, 2), (1, 10, 10), (1, 2, 17), (2, 0, 10), (2, 3, 15),\n    (2, 10, 2), (2, 4, 15), (3, 7, 15), (4, 0, 6), (4, 7, 12), (4, 11, 6),\n    (4, 2, 13), (5, 11, 8), (6, 0, 8), (7, 2, 2), (7, 1, 4), (8, 0, 8),\n    (8, 9, 12), (8, 10, 11), (8, 7, 8), (8, 2, 17), (8, 6, 3), (8, 1, 8),\n    (9, 3, 4), (9, 11, 13), (9, 4, 13), (9, 1, 11), (9, 8, 13), (10, 9, 4),\n    (10, 2, 13), (10, 5, 19), (11, 3, 11), (11, 9, 14), (11, 10, 9),\n    (11, 4, 18), (11, 1, 6), (12, 0, 6), (12, 7, 1), (12, 6, 13), (12, 5, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 6)\nprint(max_flow)\n```"}, "142": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 14, 13), (1, 4, 15), (1, 9, 9), (1, 14, 7), (2, 4, 13), (2, 9, 2), (2, 14, 13),\n    (3, 2, 10), (3, 1, 19), (3, 10, 3), (3, 6, 16), (3, 9, 3), (3, 7, 18), (3, 13, 2),\n    (4, 12, 9), (4, 1, 7), (4, 3, 14), (4, 6, 7), (4, 13, 12), (5, 4, 6), (5, 14, 7),\n    (6, 8, 14), (6, 1, 15), (6, 9, 16), (6, 14, 14), (6, 7, 13), (6, 13, 6), (6, 0, 19),\n    (7, 2, 3), (7, 1, 17), (7, 3, 11), (7, 9, 5), (7, 0, 11), (8, 12, 18), (8, 6, 16),\n    (8, 9, 18), (8, 11, 14), (9, 5, 15), (9, 3, 8), (9, 13, 7), (10, 1, 6), (10, 4, 7),\n    (10, 0, 14), (11, 2, 1), (11, 5, 4), (11, 3, 5), (11, 14, 19), (11, 13, 7), (12, 2, 10),\n    (12, 5, 1), (12, 13, 14), (13, 12, 5), (13, 4, 20), (13, 3, 15), (13, 7, 8), (14, 8, 8),\n    (14, 10, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 13))\n```"}, "143": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (1, 0, 2), (1, 12, 17), (1, 7, 11), (2, 3, 9), (2, 9, 18), (2, 4, 7),\n    (2, 7, 6), (2, 5, 15), (3, 8, 2), (5, 8, 5), (5, 1, 18), (5, 2, 3),\n    (6, 3, 5), (6, 1, 11), (6, 9, 17), (7, 0, 7), (7, 10, 6), (7, 11, 3),\n    (7, 6, 20), (8, 1, 15), (8, 12, 8), (8, 4, 20), (8, 11, 1), (9, 12, 19),\n    (9, 10, 13), (9, 5, 20), (10, 8, 10), (10, 12, 12), (10, 2, 19),\n    (10, 11, 17), (11, 0, 5), (11, 9, 12), (11, 12, 11), (11, 2, 9),\n    (12, 1, 12), (12, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 4)\nprint(max_flow)\n```"}, "144": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (1, 3, 5), (1, 0, 7), (1, 6, 3), (1, 7, 1), (1, 4, 1),\n    (3, 1, 8), (4, 0, 2), (4, 5, 5), (4, 7, 8),\n    (5, 2, 9), (5, 1, 1), (6, 0, 4), (6, 5, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 0\nprint(g.edmonds_karp(source, sink))\n```"}, "145": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create a graph given in the above diagram\ng = Graph(15)\nedges = [\n    (0, 9, 4), (0, 14, 7), (0, 13, 2), (0, 3, 3), (0, 8, 3), (0, 2, 13),\n    (1, 12, 3), (1, 10, 11), (1, 11, 8), (1, 4, 2), (1, 7, 7), (2, 5, 4),\n    (2, 9, 11), (2, 14, 13), (2, 13, 11), (2, 4, 10), (3, 12, 8), (3, 14, 12),\n    (3, 13, 11), (3, 8, 3), (3, 10, 14), (4, 12, 2), (4, 9, 12), (4, 13, 16),\n    (4, 3, 13), (5, 0, 1), (5, 4, 12), (5, 7, 4), (5, 1, 16), (6, 5, 12),\n    (6, 0, 16), (6, 9, 17), (6, 4, 14), (7, 5, 20), (7, 0, 20), (7, 8, 8),\n    (7, 10, 3), (7, 6, 16), (8, 0, 11), (8, 12, 15), (8, 2, 20), (9, 5, 10),\n    (9, 8, 8), (9, 11, 3), (11, 5, 15), (11, 13, 5), (11, 3, 2), (11, 4, 18),\n    (12, 6, 19), (13, 5, 2), (13, 12, 17), (13, 14, 17), (13, 8, 1), (14, 0, 11),\n    (14, 12, 8), (14, 11, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 11\nsink = 4\n\nprint(g.edmonds_karp(source, sink))\n```"}, "146": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 6, 6),\n    (1, 3, 2),\n    (1, 8, 8),\n    (2, 1, 1),\n    (2, 5, 7),\n    (2, 6, 8),\n    (2, 0, 2),\n    (3, 6, 8),\n    (4, 5, 1),\n    (5, 2, 2),\n    (5, 4, 7),\n    (5, 3, 10),\n    (6, 2, 9),\n    (7, 5, 6),\n    (7, 0, 5),\n    (8, 0, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "147": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 1, 5), (0, 12, 18), (0, 13, 13), (1, 4, 6), (1, 9, 20),\n    (2, 10, 11), (2, 8, 18), (2, 9, 7), (3, 6, 14), (3, 10, 7),\n    (3, 8, 15), (3, 5, 13), (3, 12, 1), (4, 3, 4), (4, 2, 11),\n    (4, 13, 12), (5, 4, 14), (5, 2, 12), (5, 13, 4), (6, 10, 2),\n    (6, 12, 18), (7, 4, 6), (7, 6, 13), (7, 9, 7), (7, 2, 15),\n    (8, 0, 20), (8, 4, 9), (8, 6, 7), (8, 5, 12), (8, 2, 20),\n    (8, 12, 4), (8, 13, 10), (9, 10, 11), (10, 3, 11), (10, 13, 17),\n    (11, 7, 7), (11, 6, 15), (11, 10, 14), (11, 8, 20), (12, 11, 12),\n    (12, 5, 16), (13, 10, 5), (13, 5, 6), (13, 2, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 1)\nprint(max_flow)\n```"}, "148": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 6)\ng.add_edge(0, 4, 10)\ng.add_edge(1, 2, 1)\ng.add_edge(1, 3, 9)\ng.add_edge(1, 0, 7)\ng.add_edge(2, 4, 7)\ng.add_edge(3, 0, 7)\ng.add_edge(3, 4, 3)\ng.add_edge(4, 2, 9)\n\nprint(g.edmonds_karp(3, 2))\n```"}, "149": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 6, 8), (0, 5, 15), (0, 8, 20), (0, 2, 6),\n    (1, 6, 5), (1, 13, 9), (1, 11, 2), (1, 4, 13), (1, 15, 15), (1, 7, 11),\n    (2, 6, 15), (2, 3, 15), (2, 5, 17), (2, 4, 7), (2, 15, 8), (2, 1, 20),\n    (3, 0, 4), (3, 16, 4), (3, 2, 8),\n    (4, 10, 8), (4, 16, 12), (4, 8, 15), (4, 2, 5),\n    (5, 6, 16), (5, 3, 3), (5, 11, 7), (5, 1, 6),\n    (6, 10, 20), (6, 14, 12), (6, 8, 13),\n    (8, 6, 5), (8, 10, 17), (8, 4, 7), (8, 15, 10), (8, 12, 5), (8, 1, 15),\n    (9, 1, 8), (9, 8, 13), (9, 2, 15),\n    (10, 9, 17), (10, 12, 8),\n    (11, 0, 18), (11, 5, 4), (11, 16, 20), (11, 4, 7), (11, 9, 14), (11, 2, 4),\n    (12, 13, 5), (12, 5, 13), (12, 15, 9), (12, 1, 16), (12, 2, 5),\n    (13, 0, 20), (13, 4, 12), (13, 9, 12), (13, 8, 9), (13, 2, 19),\n    (14, 16, 12), (14, 7, 16), (14, 1, 14),\n    (15, 6, 17), (15, 13, 17), (15, 14, 18), (15, 4, 9), (15, 9, 19), (15, 7, 10), (15, 1, 15),\n    (16, 0, 18), (16, 3, 10), (16, 9, 18), (16, 7, 6), (16, 12, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 1))\n```"}, "150": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 6, 10), (0, 1, 2), (1, 3, 3), (1, 2, 1), (1, 0, 5),\n    (1, 7, 3), (2, 5, 10), (3, 2, 10), (3, 7, 4), (4, 2, 6),\n    (4, 5, 1), (6, 3, 9), (6, 0, 4), (6, 5, 9), (7, 3, 8),\n    (7, 1, 7), (7, 2, 7), (8, 0, 6), (8, 5, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 7))\n```"}, "151": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\n# Create the graph\ng = Graph(11)\nedges = [\n    (0, 3, 5), (0, 4, 4), (1, 5, 9), (1, 3, 2), (1, 4, 10), (1, 9, 3),\n    (2, 8, 18), (2, 3, 1), (3, 5, 1), (3, 2, 9), (4, 2, 8), (4, 3, 12),\n    (5, 8, 2), (5, 1, 17), (5, 0, 16), (6, 3, 8), (6, 1, 18), (6, 0, 9),\n    (7, 5, 19), (7, 6, 20), (7, 10, 9), (7, 4, 9), (7, 9, 12), (9, 6, 3),\n    (9, 4, 12), (9, 0, 9), (10, 5, 11), (10, 1, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\n# Calculate max flow from node 5 to node 3\nmax_flow = g.edmonds_karp(5, 3)\nprint(max_flow)\n```"}, "152": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = defaultdict(lambda: defaultdict(int))\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[u][v] = w\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[u][ind] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[parent[s]][s])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[u][v] -= path_flow\n                self.capacity[v][u] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 2, 6)\ng.add_edge(0, 3, 9)\ng.add_edge(0, 1, 4)\ng.add_edge(1, 3, 3)\ng.add_edge(2, 0, 7)\ng.add_edge(3, 4, 2)\ng.add_edge(3, 0, 9)\ng.add_edge(4, 2, 10)\n\nprint(g.edmonds_karp(0, 2))\n```"}, "153": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 15, 10), (0, 4, 9), (0, 11, 16), (0, 8, 15), (0, 10, 11),\n    (1, 13, 11), (1, 14, 10), (2, 7, 16), (2, 8, 17), (2, 10, 6),\n    (3, 0, 7), (3, 8, 2), (3, 1, 17), (4, 0, 19), (4, 11, 20),\n    (5, 0, 10), (5, 11, 1), (5, 8, 1), (5, 3, 2), (5, 9, 17),\n    (6, 14, 9), (7, 0, 1), (7, 15, 2), (7, 4, 11), (7, 13, 8),\n    (7, 6, 9), (8, 13, 10), (8, 6, 5), (8, 2, 18), (8, 3, 9),\n    (9, 13, 3), (9, 12, 16), (10, 5, 3), (10, 15, 17), (10, 7, 11),\n    (10, 14, 15), (10, 11, 1), (10, 1, 18), (10, 3, 5), (10, 9, 2),\n    (11, 5, 16), (11, 2, 11), (12, 5, 19), (12, 4, 18), (12, 13, 10),\n    (12, 14, 4), (12, 11, 1), (12, 8, 1), (13, 9, 14), (14, 11, 17),\n    (14, 12, 5), (14, 2, 4), (15, 5, 14), (15, 7, 13), (15, 6, 16),\n    (15, 1, 7), (15, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 11))\n```"}, "154": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 6, 2), (1, 3, 2), (1, 6, 6), (1, 11, 17), (1, 7, 16), (1, 8, 13), (1, 5, 12),\n    (2, 4, 1), (2, 0, 16), (2, 9, 7), (2, 6, 10), (2, 7, 13), (2, 13, 15), (2, 10, 11),\n    (2, 8, 17), (2, 5, 7), (3, 4, 16), (3, 0, 19), (3, 7, 2), (3, 1, 15), (4, 3, 3),\n    (4, 9, 12), (4, 13, 8), (5, 12, 9), (5, 3, 6), (5, 2, 12), (5, 4, 11), (5, 8, 2),\n    (7, 3, 16), (7, 0, 10), (7, 13, 10), (7, 8, 3), (7, 1, 17), (8, 2, 20), (8, 0, 20),\n    (8, 6, 5), (8, 11, 8), (9, 11, 2), (9, 8, 13), (10, 6, 7), (11, 9, 11), (11, 7, 20),\n    (11, 1, 10), (12, 4, 16), (12, 0, 9), (12, 9, 16), (12, 6, 9), (12, 7, 1), (12, 10, 19),\n    (13, 9, 4), (13, 11, 8), (13, 8, 19), (13, 5, 12), (13, 1, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 6)\nprint(max_flow)\n```"}, "155": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 1, 10), (0, 4, 6), (0, 6, 11), (0, 3, 12), (0, 2, 13), (0, 8, 1),\n    (1, 10, 14), (1, 5, 15), (2, 7, 5), (2, 5, 11), (3, 7, 17), (3, 10, 12),\n    (3, 9, 9), (3, 0, 12), (4, 6, 11), (4, 2, 13), (5, 1, 1), (5, 8, 17),\n    (6, 3, 5), (6, 5, 5), (6, 2, 15), (7, 0, 12), (7, 8, 5), (8, 7, 15),\n    (8, 3, 19), (9, 3, 13), (9, 8, 16), (10, 4, 11), (10, 5, 3), (10, 9, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 6)\nprint(max_flow)\n```"}, "156": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 3, 6), (0, 8, 4), (1, 2, 6), (1, 3, 4),\n    (2, 5, 7), (2, 8, 4), (4, 3, 6), (4, 0, 1),\n    (5, 7, 1), (6, 2, 10), (7, 2, 8), (7, 1, 4),\n    (7, 8, 6), (8, 1, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 1))\n```"}, "157": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 9, 3),\n    (1, 7, 4),\n    (1, 8, 8),\n    (2, 1, 3),\n    (2, 8, 7),\n    (3, 7, 1),\n    (4, 0, 8),\n    (4, 1, 3),\n    (4, 7, 9),\n    (4, 2, 3),\n    (5, 0, 10),\n    (5, 7, 6),\n    (6, 5, 3),\n    (6, 1, 2),\n    (6, 7, 7),\n    (6, 2, 6),\n    (8, 7, 2),\n    (8, 4, 7),\n    (9, 0, 1),\n    (9, 8, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(8, 7)\nprint(max_flow)\n```"}, "158": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (1, 2, 3),\n    (1, 6, 5),\n    (2, 5, 1),\n    (2, 4, 10),\n    (3, 2, 1),\n    (3, 6, 5),\n    (3, 5, 1),\n    (3, 0, 8),\n    (5, 2, 6),\n    (6, 2, 6),\n    (6, 1, 3),\n    (6, 0, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 2)\nprint(max_flow)\n```"}, "159": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 7, 4),\n    (1, 3, 10),\n    (2, 0, 5),\n    (3, 6, 7),\n    (3, 4, 2),\n    (3, 7, 7),\n    (3, 2, 5),\n    (4, 7, 6),\n    (5, 7, 1),\n    (6, 4, 5),\n    (6, 0, 8),\n    (6, 3, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 7))\n```"}, "160": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 18, 11), (0, 16, 15), (0, 6, 2), (0, 15, 14), (1, 3, 3), (1, 16, 11),\n    (1, 15, 13), (2, 7, 3), (2, 0, 10), (2, 12, 17), (2, 6, 4), (2, 17, 14),\n    (3, 4, 18), (4, 5, 16), (4, 3, 2), (4, 13, 9), (4, 17, 4), (4, 10, 6),\n    (5, 11, 18), (5, 4, 15), (5, 2, 16), (5, 0, 11), (5, 17, 1), (6, 14, 17),\n    (6, 5, 6), (6, 3, 13), (6, 18, 12), (6, 0, 11), (6, 15, 11), (7, 4, 13),\n    (7, 5, 2), (7, 3, 20), (7, 13, 4), (7, 0, 14), (7, 16, 2), (7, 17, 14),\n    (7, 15, 13), (8, 3, 1), (8, 2, 4), (8, 1, 11), (8, 12, 3), (8, 6, 19),\n    (8, 9, 15), (9, 5, 2), (9, 7, 16), (9, 8, 13), (10, 11, 12), (10, 2, 14),\n    (10, 6, 17), (10, 17, 12), (10, 9, 2), (11, 14, 13), (11, 5, 2), (11, 18, 1),\n    (11, 15, 7), (12, 11, 19), (12, 5, 9), (12, 8, 3), (12, 15, 5), (13, 3, 8),\n    (13, 2, 14), (13, 18, 8), (13, 16, 14), (13, 6, 20), (14, 3, 19), (14, 16, 5),\n    (14, 17, 9), (14, 9, 15), (14, 15, 19), (15, 3, 11), (15, 18, 20), (16, 4, 18),\n    (16, 1, 1), (16, 18, 15), (16, 0, 7), (16, 6, 20), (16, 8, 7), (17, 4, 15),\n    (17, 3, 3), (17, 18, 5), (17, 0, 7), (17, 6, 9), (17, 9, 11), (18, 1, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(10, 6))\n```"}, "161": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 9, 14), (0, 1, 15), (0, 5, 13), (0, 10, 4),\n    (1, 4, 12), (1, 0, 8), (1, 3, 17), (2, 9, 17),\n    (2, 1, 18), (2, 12, 14), (2, 14, 19), (2, 5, 13),\n    (2, 10, 15), (3, 9, 3), (3, 2, 18), (3, 13, 1),\n    (4, 9, 15), (4, 12, 15), (4, 14, 1), (4, 8, 14),\n    (5, 9, 17), (5, 2, 9), (5, 7, 9), (6, 12, 14),\n    (6, 11, 3), (6, 5, 10), (6, 0, 14), (6, 3, 12),\n    (6, 8, 14), (7, 12, 2), (7, 0, 1), (7, 6, 11),\n    (8, 1, 7), (8, 13, 11), (8, 15, 16), (9, 4, 16),\n    (9, 5, 17), (9, 3, 16), (9, 8, 6), (10, 9, 10),\n    (10, 12, 2), (10, 7, 1), (10, 11, 5), (10, 3, 17),\n    (10, 13, 14), (10, 8, 8), (11, 7, 4), (11, 13, 1),\n    (11, 15, 17), (12, 9, 11), (12, 1, 13), (12, 7, 16),\n    (13, 1, 1), (13, 15, 1), (14, 9, 19), (14, 2, 13),\n    (15, 0, 5), (15, 3, 14)\n]\n\ng = Graph(16)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 10\nprint(g.edmonds_karp(source, sink))\n```"}, "162": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 7, 15), (0, 4, 2), (0, 5, 4), (0, 8, 16),\n    (1, 6, 6), (1, 11, 7), (1, 10, 6), (2, 6, 2),\n    (2, 4, 11), (2, 3, 14), (2, 5, 10), (2, 0, 3),\n    (3, 4, 4), (3, 0, 15), (4, 3, 9), (4, 0, 12),\n    (5, 4, 20), (5, 2, 14), (6, 10, 7), (6, 3, 8),\n    (6, 2, 18), (7, 10, 10), (7, 1, 1), (7, 4, 14),\n    (7, 0, 5), (8, 11, 8), (8, 7, 4), (9, 11, 3),\n    (9, 0, 14), (10, 6, 1), (10, 7, 3), (10, 0, 11),\n    (11, 9, 9), (11, 3, 16), (11, 2, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 6)\nprint(max_flow)\n```"}, "163": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 4, 6), (0, 3, 13), (1, 8, 11), (1, 0, 15), (1, 3, 10),\n    (2, 1, 10), (2, 13, 5), (2, 0, 2), (2, 3, 5), (3, 5, 4),\n    (3, 8, 7), (3, 4, 20), (3, 7, 9), (3, 11, 8), (3, 6, 4),\n    (4, 5, 9), (4, 1, 10), (4, 7, 6), (4, 2, 11), (5, 2, 18),\n    (6, 8, 20), (6, 4, 2), (6, 1, 17), (6, 3, 8), (7, 12, 4),\n    (7, 5, 4), (7, 11, 1), (7, 6, 10), (8, 12, 2), (8, 5, 6),\n    (8, 9, 12), (8, 13, 4), (8, 0, 10), (8, 3, 20), (8, 2, 9),\n    (9, 2, 5), (9, 10, 10), (10, 8, 13), (10, 7, 5), (11, 4, 9),\n    (11, 2, 6), (11, 10, 9), (12, 5, 18), (12, 11, 2), (12, 3, 4),\n    (13, 12, 16), (13, 3, 3), (13, 10, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 4))\n```"}, "164": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (1, 7, 2), (1, 3, 18), (1, 9, 16), (1, 6, 5), (1, 8, 16),\n    (2, 5, 11), (2, 13, 8), (2, 1, 14), (2, 10, 7),\n    (3, 6, 17),\n    (6, 12, 3), (6, 13, 9),\n    (7, 15, 8), (7, 2, 8), (7, 9, 3), (7, 4, 13), (7, 1, 6), (7, 10, 11),\n    (8, 13, 2), (8, 3, 17), (8, 1, 13), (8, 10, 11),\n    (9, 12, 9), (9, 13, 18), (9, 10, 3), (9, 0, 7), (9, 14, 1),\n    (10, 15, 5), (10, 13, 15), (10, 3, 13), (10, 6, 4), (10, 0, 4),\n    (11, 2, 12), (11, 4, 12), (11, 6, 20), (11, 10, 15),\n    (12, 15, 7), (12, 11, 2), (12, 2, 11), (12, 3, 6), (12, 4, 13), (12, 0, 17),\n    (13, 0, 8),\n    (14, 12, 18), (14, 15, 1), (14, 5, 6), (14, 13, 7), (14, 7, 3), (14, 9, 4), (14, 0, 19),\n    (15, 5, 15), (15, 10, 15), (15, 0, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(15, 14))\n```"}, "165": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 4, 14), (0, 2, 11), (1, 0, 9), (1, 5, 13), (1, 7, 17),\n    (2, 6, 19), (2, 0, 3), (2, 9, 14), (3, 9, 4), (3, 2, 9),\n    (4, 6, 15), (4, 1, 7), (5, 6, 13), (5, 0, 6), (5, 10, 20),\n    (6, 4, 14), (6, 9, 4), (6, 10, 9), (7, 10, 15), (9, 6, 18),\n    (9, 7, 17), (9, 3, 14), (10, 2, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 10)\nprint(max_flow)\n```"}, "166": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 9)\ng.add_edge(1, 2, 2)\ng.add_edge(3, 0, 4)\ng.add_edge(4, 0, 3)\ng.add_edge(4, 3, 5)\ng.add_edge(4, 2, 9)\ng.add_edge(4, 1, 2)\n\nprint(g.edmonds_karp(4, 2))\n```"}, "167": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 6, 9), (0, 1, 3), (0, 2, 9), (1, 4, 1), (1, 8, 8),\n    (2, 0, 6), (3, 4, 4), (4, 7, 3), (4, 2, 2), (5, 1, 4),\n    (6, 5, 6), (6, 3, 7), (6, 1, 7), (6, 2, 6), (7, 4, 8),\n    (7, 8, 7), (8, 6, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 1)\nprint(max_flow)\n```"}, "168": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 4, 9), (0, 10, 18), (1, 6, 9), (1, 3, 19), (1, 10, 1), (1, 5, 4),\n    (2, 8, 18), (2, 6, 1), (2, 0, 11), (2, 9, 1), (3, 1, 13), (3, 10, 19),\n    (4, 10, 19), (4, 5, 20), (5, 1, 10), (5, 9, 8), (6, 1, 4), (6, 7, 9),\n    (6, 0, 17), (6, 2, 16), (6, 5, 5), (7, 10, 9), (7, 5, 16), (8, 4, 8),\n    (8, 7, 7), (8, 5, 12), (8, 9, 16), (9, 8, 12), (9, 10, 1), (10, 4, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 4\nprint(g.edmonds_karp(source, sink))\n```"}, "169": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 13, 17), (1, 7, 2), (1, 0, 6), (1, 6, 16), (1, 5, 19),\n    (2, 12, 12), (2, 8, 5), (2, 9, 4), (2, 6, 8), (2, 4, 5),\n    (2, 5, 7), (3, 1, 17), (3, 10, 15), (3, 0, 1), (3, 9, 19),\n    (4, 2, 18), (4, 12, 2), (4, 7, 3), (5, 3, 10), (5, 0, 12),\n    (5, 4, 3), (6, 10, 6), (8, 3, 8), (8, 7, 2), (8, 11, 16),\n    (9, 3, 10), (10, 12, 14), (10, 0, 10), (10, 8, 6), (10, 9, 7),\n    (10, 4, 12), (11, 1, 14), (11, 7, 8), (11, 0, 13), (11, 9, 16),\n    (12, 10, 1), (12, 13, 3), (12, 7, 4), (12, 0, 20), (12, 9, 10),\n    (13, 9, 19)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 9\nsink = 11\nprint(g.edmonds_karp(source, sink))\n```"}, "170": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 6, 8),\n    (1, 5, 3),\n    (1, 2, 3),\n    (2, 6, 8),\n    (2, 1, 3),\n    (3, 4, 1),\n    (4, 6, 8),\n    (4, 3, 1),\n    (4, 2, 4),\n    (5, 0, 5),\n    (6, 5, 6),\n    (6, 2, 9),\n    (7, 0, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 5))\n```"}, "171": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 4, 3), (0, 2, 13), (0, 13, 20), (0, 6, 6),\n    (1, 0, 18), (1, 5, 2), (1, 15, 13), (1, 8, 7), (1, 9, 20), (1, 13, 18), (1, 11, 2),\n    (2, 0, 16), (2, 4, 15), (2, 8, 9), (2, 11, 5), (2, 6, 13),\n    (3, 10, 7), (3, 15, 10), (3, 14, 15),\n    (4, 10, 8), (4, 2, 3), (4, 3, 16), (4, 9, 6), (4, 13, 9), (4, 11, 20), (4, 6, 2),\n    (5, 6, 6),\n    (6, 0, 8), (6, 7, 15), (6, 15, 19), (6, 14, 2), (6, 8, 1), (6, 9, 17),\n    (7, 0, 17), (7, 8, 5),\n    (8, 9, 5), (8, 11, 17), (8, 6, 12),\n    (9, 0, 13), (9, 5, 20), (9, 7, 3), (9, 2, 20), (9, 12, 14), (9, 3, 11),\n    (10, 5, 19), (10, 14, 7),\n    (11, 0, 3), (11, 15, 6), (11, 12, 15), (11, 8, 2), (11, 3, 13),\n    (12, 0, 13), (12, 4, 11), (12, 2, 2), (12, 15, 14), (12, 6, 5),\n    (13, 4, 14), (13, 2, 10), (13, 15, 20), (13, 8, 14), (13, 3, 11), (13, 1, 12), (13, 11, 5), (13, 6, 8),\n    (14, 10, 14), (14, 4, 15), (14, 12, 9), (14, 3, 9), (14, 13, 8), (14, 6, 8),\n    (15, 10, 1), (15, 4, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(15, 13))\n```"}, "172": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 8, 10), (0, 2, 5), (0, 4, 2),\n    (1, 2, 2), (1, 9, 4), (1, 6, 7), (1, 4, 3),\n    (2, 5, 8), (2, 3, 8),\n    (3, 4, 1),\n    (4, 9, 7),\n    (5, 6, 5), (5, 0, 10), (5, 1, 10),\n    (6, 3, 4),\n    (7, 3, 8), (7, 4, 7),\n    (8, 7, 7), (8, 5, 9),\n    (9, 5, 5), (9, 4, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 3\nprint(g.edmonds_karp(source, sink))\n```"}, "173": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 3, 5), (0, 18, 9), (0, 6, 1), (1, 3, 3), (1, 11, 13), (1, 6, 7),\n    (2, 10, 5), (2, 18, 1), (3, 16, 11), (3, 17, 4), (3, 14, 4), (3, 10, 12),\n    (3, 11, 7), (3, 7, 4), (3, 15, 12), (4, 16, 8), (4, 2, 10), (4, 3, 5),\n    (4, 9, 2), (5, 13, 10), (5, 4, 20), (6, 17, 15), (6, 14, 14), (6, 10, 8),\n    (6, 3, 14), (6, 9, 4), (6, 11, 5), (6, 7, 9), (6, 15, 8), (7, 14, 1),\n    (7, 10, 14), (7, 4, 7), (7, 12, 17), (8, 14, 10), (8, 18, 7), (8, 11, 5),\n    (8, 7, 3), (8, 6, 8), (9, 5, 16), (9, 14, 14), (9, 1, 14), (10, 3, 2),\n    (10, 4, 14), (10, 1, 15), (10, 6, 18), (11, 16, 10), (11, 10, 9),\n    (11, 1, 17), (11, 7, 8), (11, 6, 4), (12, 0, 14), (12, 13, 17),\n    (12, 5, 4), (12, 14, 16), (12, 10, 10), (12, 3, 17), (12, 15, 8),\n    (13, 0, 19), (13, 3, 5), (13, 18, 4), (13, 12, 1), (14, 16, 11),\n    (14, 5, 11), (14, 10, 18), (14, 11, 17), (14, 15, 9), (15, 5, 7),\n    (15, 3, 10), (15, 9, 3), (16, 10, 3), (16, 9, 17), (16, 8, 7),\n    (16, 6, 2), (16, 15, 3), (17, 5, 9), (17, 14, 5), (17, 12, 18),\n    (18, 16, 3), (18, 17, 3), (18, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(14, 15))\n```"}, "174": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 8, 10), (0, 1, 8), (0, 4, 10), (0, 9, 17),\n    (1, 5, 20), (1, 0, 18), (1, 2, 11),\n    (2, 8, 5), (2, 5, 5), (2, 0, 14), (2, 3, 16), (2, 12, 2),\n    (3, 5, 17), (3, 7, 19), (3, 11, 15), (3, 12, 11),\n    (4, 5, 7), (4, 3, 6), (4, 9, 4), (4, 2, 10),\n    (5, 6, 7), (5, 1, 16),\n    (6, 9, 7), (6, 2, 5),\n    (7, 10, 17), (7, 9, 9),\n    (8, 9, 3),\n    (9, 8, 9), (9, 7, 1), (9, 1, 19), (9, 2, 4),\n    (10, 8, 10), (10, 6, 17),\n    (11, 1, 5), (11, 12, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 0))\n```"}, "175": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 17, 17), (0, 5, 17), (0, 11, 16), (0, 16, 10),\n    (1, 15, 20), (1, 5, 13), (1, 0, 18), (1, 16, 6),\n    (2, 8, 12), (2, 1, 7), (2, 6, 6),\n    (3, 15, 14), (3, 13, 13), (3, 9, 20),\n    (4, 12, 18), (4, 1, 11), (4, 14, 9), (4, 11, 19), (4, 9, 16), (4, 16, 18),\n    (5, 17, 5), (5, 8, 14), (5, 3, 12), (5, 12, 15), (5, 10, 7), (5, 6, 8),\n    (6, 2, 20), (6, 4, 2), (6, 12, 7), (6, 10, 1), (6, 11, 5),\n    (7, 15, 15), (7, 17, 14), (7, 2, 11), (7, 4, 8),\n    (8, 13, 1), (8, 12, 9),\n    (9, 17, 9), (9, 0, 9),\n    (10, 7, 13),\n    (11, 17, 12), (11, 1, 20), (11, 6, 20),\n    (12, 5, 12), (12, 14, 1), (12, 10, 15),\n    (13, 7, 17), (13, 4, 12), (13, 14, 4),\n    (14, 13, 4), (14, 3, 2), (14, 2, 3), (14, 12, 18),\n    (15, 5, 11), (15, 2, 9), (15, 1, 16),\n    (16, 13, 14), (16, 7, 3), (16, 4, 14), (16, 6, 15),\n    (17, 15, 9), (17, 3, 7), (17, 11, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 12\nsink = 14\nprint(g.edmonds_karp(source, sink))\n```"}, "176": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 14, 10), (0, 13, 7), (0, 1, 6), (0, 10, 11), (0, 2, 4), (0, 11, 17), (0, 4, 17),\n    (1, 0, 2), (2, 4, 20), (3, 16, 12), (3, 1, 1), (3, 10, 13), (3, 12, 13), (3, 5, 5),\n    (3, 11, 4), (4, 10, 8), (4, 6, 2), (4, 5, 10), (4, 0, 11), (5, 13, 20), (5, 9, 7),\n    (5, 10, 9), (5, 11, 14), (5, 8, 2), (6, 16, 8), (6, 2, 9), (6, 12, 1), (6, 15, 8),\n    (8, 16, 9), (8, 2, 12), (8, 7, 4), (8, 5, 16), (8, 15, 1), (8, 0, 19), (9, 0, 12),\n    (10, 14, 1), (10, 7, 13), (10, 0, 20), (10, 8, 12), (11, 13, 7), (11, 1, 3), (11, 10, 13),\n    (11, 3, 1), (11, 5, 19), (12, 16, 5), (12, 10, 15), (12, 0, 3), (12, 4, 17), (13, 16, 2),\n    (13, 9, 2), (13, 1, 18), (13, 10, 4), (13, 2, 9), (13, 7, 1), (14, 1, 16), (14, 2, 14),\n    (14, 5, 11), (14, 8, 1), (15, 14, 19), (15, 9, 12), (15, 2, 14), (16, 6, 12), (16, 8, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(13, 4))\n```"}, "177": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 12, 1), (0, 18, 14), (0, 7, 18), (0, 19, 14),\n    (1, 14, 11), (1, 18, 14), (1, 6, 20), (1, 15, 20),\n    (1, 9, 12), (1, 4, 20), (1, 2, 15), (2, 1, 9),\n    (2, 12, 12), (2, 18, 8), (2, 6, 4), (2, 7, 16),\n    (2, 19, 1), (2, 9, 5), (2, 0, 12), (3, 1, 9),\n    (3, 12, 12), (3, 15, 3), (3, 19, 10), (4, 6, 16),\n    (4, 7, 11), (4, 9, 4), (4, 0, 13), (4, 17, 6),\n    (5, 1, 6), (5, 10, 12), (5, 4, 11), (6, 10, 8),\n    (6, 9, 16), (6, 4, 16), (6, 13, 13), (7, 18, 20),\n    (7, 3, 9), (7, 10, 12), (7, 9, 11), (7, 11, 3),\n    (8, 14, 12), (8, 18, 12), (8, 7, 14), (8, 19, 6),\n    (8, 4, 4), (9, 14, 6), (9, 12, 8), (9, 2, 9),\n    (9, 0, 11), (10, 14, 16), (10, 18, 9), (10, 9, 14),\n    (10, 4, 14), (10, 17, 2), (10, 11, 8), (11, 1, 1),\n    (11, 16, 13), (11, 12, 6), (11, 18, 1), (11, 3, 10),\n    (11, 15, 6), (11, 17, 15), (12, 3, 5), (12, 0, 17),\n    (14, 5, 5), (14, 3, 10), (14, 15, 9), (14, 19, 12),\n    (14, 4, 6), (14, 0, 4), (15, 1, 20), (15, 16, 1),\n    (15, 10, 8), (15, 4, 16), (15, 0, 14), (16, 3, 16),\n    (16, 7, 17), (16, 10, 15), (16, 9, 14), (16, 2, 2),\n    (16, 0, 4), (16, 11, 2), (17, 1, 14), (17, 18, 12),\n    (17, 8, 18), (17, 6, 8), (17, 10, 18), (17, 9, 9),\n    (17, 2, 14), (18, 1, 20), (18, 12, 19), (18, 19, 16),\n    (18, 2, 16), (19, 1, 8), (19, 14, 10), (19, 5, 7),\n    (19, 3, 7), (19, 8, 7), (19, 15, 19), (19, 9, 7),\n    (19, 0, 3)\n]\n\ng = Graph(20)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 13)\nprint(max_flow)\n```"}, "178": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 18, 6), (0, 5, 18), (0, 7, 11), (1, 3, 1), (1, 4, 13), (1, 0, 1),\n    (1, 10, 10), (1, 15, 19), (2, 4, 14), (2, 6, 20), (2, 1, 9), (2, 13, 9),\n    (2, 16, 7), (2, 18, 20), (2, 17, 17), (2, 5, 7), (3, 9, 12), (3, 0, 7),\n    (3, 1, 17), (3, 14, 10), (3, 15, 2), (3, 17, 4), (3, 7, 16), (3, 12, 9),\n    (4, 1, 11), (4, 8, 19), (5, 10, 7), (6, 3, 2), (6, 4, 9), (6, 13, 18),\n    (6, 10, 19), (6, 19, 2), (6, 5, 9), (6, 12, 12), (7, 3, 20), (7, 6, 1),\n    (7, 10, 5), (7, 15, 3), (7, 17, 2), (7, 12, 5), (8, 9, 20), (8, 4, 13),\n    (8, 16, 16), (8, 5, 1), (8, 7, 16), (8, 12, 16), (9, 4, 12), (9, 6, 3),\n    (9, 0, 10), (9, 10, 5), (9, 19, 16), (9, 12, 10), (10, 9, 8), (10, 2, 18),\n    (10, 0, 6), (10, 14, 9), (10, 19, 2), (10, 5, 10), (10, 7, 8), (11, 9, 8),\n    (11, 0, 7), (11, 16, 7), (11, 19, 2), (11, 12, 17), (12, 3, 19), (12, 4, 15),\n    (12, 11, 18), (12, 17, 6), (12, 5, 1), (12, 7, 15), (13, 6, 17), (13, 0, 16),\n    (13, 16, 7), (13, 7, 13), (14, 9, 7), (14, 4, 15), (14, 16, 8), (14, 11, 1),\n    (14, 15, 8), (14, 7, 6), (15, 3, 9), (15, 2, 10), (15, 1, 12), (15, 16, 19),\n    (15, 10, 10), (16, 3, 14), (16, 0, 12), (16, 14, 19), (16, 17, 9), (16, 19, 3),\n    (17, 3, 13), (17, 4, 18), (17, 1, 15), (17, 16, 14), (17, 19, 8), (17, 8, 12),\n    (18, 6, 2), (18, 0, 7), (18, 13, 5), (18, 10, 3), (18, 11, 17), (18, 14, 20),\n    (18, 15, 17), (18, 5, 8), (19, 6, 8), (19, 1, 8), (19, 16, 19), (19, 18, 11),\n    (19, 12, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(16, 10)\nprint(max_flow)\n```"}, "179": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 14, 19), (0, 1, 19), (1, 14, 18), (1, 5, 2), (1, 13, 7),\n    (2, 0, 3), (2, 3, 10), (2, 12, 8), (2, 1, 20), (3, 6, 12),\n    (3, 9, 10), (3, 8, 18), (3, 4, 7), (4, 6, 2), (4, 0, 3),\n    (4, 9, 9), (4, 3, 13), (4, 12, 10), (4, 13, 18), (5, 6, 8),\n    (5, 9, 3), (5, 13, 14), (6, 10, 8), (6, 5, 11), (6, 2, 1),\n    (6, 13, 5), (8, 0, 7), (8, 14, 13), (8, 13, 2), (9, 0, 5),\n    (9, 13, 12), (9, 4, 15), (10, 5, 16), (11, 0, 7), (11, 12, 9),\n    (11, 13, 19), (11, 4, 14), (12, 3, 19), (12, 7, 4), (13, 10, 17),\n    (13, 14, 6), (13, 4, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 2)\nprint(max_flow)\n```"}, "180": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 19, 19), (0, 18, 2), (0, 7, 18), (1, 17, 16), (1, 19, 14),\n    (2, 13, 1), (2, 18, 3), (2, 7, 7), (2, 11, 14), (3, 17, 7),\n    (3, 13, 11), (3, 15, 9), (3, 12, 20), (3, 0, 16), (4, 9, 1),\n    (4, 14, 1), (4, 12, 13), (4, 18, 1), (5, 3, 17), (5, 6, 5),\n    (5, 14, 16), (5, 8, 14), (5, 2, 15), (5, 11, 2), (6, 3, 4),\n    (6, 19, 17), (6, 12, 15), (7, 17, 9), (7, 6, 14), (7, 14, 15),\n    (7, 16, 3), (7, 15, 13), (7, 18, 14), (7, 11, 11), (8, 0, 18),\n    (9, 3, 8), (9, 10, 17), (9, 4, 12), (10, 13, 19), (10, 2, 13),\n    (10, 11, 15), (11, 19, 8), (11, 13, 6), (11, 12, 19), (11, 0, 18),\n    (12, 13, 18), (12, 14, 5), (12, 8, 16), (12, 1, 3), (12, 15, 10),\n    (13, 17, 2), (13, 8, 19), (13, 16, 16), (13, 1, 3), (13, 12, 8),\n    (13, 18, 14), (13, 0, 1), (14, 5, 18), (14, 9, 6), (14, 10, 14),\n    (14, 15, 16), (14, 11, 12), (15, 14, 7), (15, 8, 17), (15, 7, 12),\n    (16, 17, 19), (16, 19, 10), (16, 8, 15), (16, 10, 1), (16, 12, 6),\n    (17, 13, 20), (17, 2, 4), (18, 5, 2), (18, 6, 9), (18, 13, 1),\n    (18, 8, 19), (18, 10, 1), (18, 15, 12), (18, 4, 1), (18, 7, 9),\n    (19, 17, 11), (19, 13, 11), (19, 9, 15), (19, 8, 20), (19, 10, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(7, 6))\n```"}, "181": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 18, 9), (0, 1, 17), (0, 4, 12), (0, 2, 1), (0, 5, 15), (0, 9, 10),\n    (0, 15, 1), (0, 19, 3), (0, 13, 5), (0, 14, 9), (1, 3, 14), (1, 12, 19),\n    (1, 5, 5), (1, 9, 18), (1, 7, 14), (2, 18, 8), (2, 4, 2), (2, 0, 19),\n    (2, 8, 12), (3, 16, 8), (3, 2, 20), (3, 12, 11), (3, 15, 10), (3, 19, 2),\n    (3, 17, 10), (4, 18, 10), (4, 1, 17), (4, 15, 3), (4, 7, 4), (4, 14, 1),\n    (5, 3, 5), (5, 1, 17), (5, 4, 17), (5, 2, 18), (5, 12, 4), (5, 9, 9),\n    (5, 0, 9), (5, 15, 2), (5, 17, 6), (5, 13, 7), (5, 10, 5), (6, 9, 1),\n    (6, 0, 13), (6, 15, 9), (7, 18, 16), (7, 16, 20), (7, 1, 17), (7, 12, 10),\n    (7, 9, 13), (8, 18, 17), (8, 16, 11), (8, 3, 12), (8, 2, 8), (8, 6, 14),\n    (8, 15, 11), (8, 19, 6), (8, 10, 19), (9, 16, 9), (9, 12, 5), (9, 11, 1),\n    (9, 13, 20), (10, 1, 8), (10, 2, 18), (10, 9, 1), (10, 11, 14), (10, 8, 10),\n    (10, 19, 17), (10, 17, 11), (10, 13, 9), (10, 14, 17), (11, 18, 14),\n    (11, 16, 13), (11, 12, 6), (11, 19, 13), (11, 10, 12), (11, 14, 15),\n    (12, 11, 10), (12, 15, 20), (12, 10, 3), (13, 3, 10), (13, 6, 9),\n    (13, 11, 11), (13, 15, 15), (13, 7, 11), (14, 1, 5), (14, 12, 14),\n    (15, 16, 6), (15, 6, 15), (15, 5, 20), (15, 11, 18), (15, 8, 11),\n    (16, 11, 15), (16, 19, 16), (16, 17, 11), (17, 1, 20), (17, 2, 15),\n    (17, 12, 3), (17, 8, 6), (18, 9, 7), (18, 7, 16), (18, 13, 2),\n    (19, 9, 18), (19, 0, 3), (19, 14, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 0))\n```"}, "182": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 13, 10), (0, 12, 10), (0, 6, 4), (1, 11, 19), (1, 2, 4), (1, 14, 17),\n    (2, 13, 10), (2, 3, 9), (2, 11, 12), (2, 14, 14), (2, 4, 17), (3, 11, 8),\n    (3, 6, 5), (3, 15, 5), (3, 4, 3), (4, 13, 7), (4, 10, 8), (4, 9, 14),\n    (4, 11, 12), (4, 2, 2), (4, 15, 9), (5, 12, 12), (5, 8, 11), (5, 9, 7),\n    (6, 9, 1), (6, 11, 7), (6, 15, 18), (7, 9, 12), (7, 15, 4), (7, 5, 11),\n    (8, 10, 9), (8, 2, 9), (8, 0, 19), (8, 15, 9), (9, 13, 5), (9, 7, 15),\n    (9, 3, 15), (9, 14, 5), (10, 3, 9), (10, 9, 10), (10, 14, 4), (11, 15, 2),\n    (12, 1, 6), (12, 8, 8), (12, 3, 15), (12, 9, 10), (12, 2, 11), (12, 0, 13),\n    (12, 5, 15), (13, 10, 16), (13, 9, 18), (13, 15, 10), (13, 4, 12),\n    (14, 12, 16), (14, 7, 1), (14, 9, 5), (14, 11, 6), (15, 1, 16), (15, 12, 2),\n    (15, 9, 7), (15, 5, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(10, 8))\n```"}, "183": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 4, 2)\ng.add_edge(1, 5, 6)\ng.add_edge(1, 0, 9)\ng.add_edge(2, 0, 4)\ng.add_edge(3, 4, 8)\ng.add_edge(3, 0, 8)\ng.add_edge(4, 5, 10)\ng.add_edge(5, 4, 1)\ng.add_edge(5, 0, 4)\ng.add_edge(5, 3, 8)\n\nprint(g.edmonds_karp(5, 4))\n```"}, "184": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(1, 5, 8)\ng.add_edge(1, 4, 5)\ng.add_edge(1, 0, 1)\ng.add_edge(2, 0, 5)\ng.add_edge(3, 1, 7)\ng.add_edge(4, 0, 10)\ng.add_edge(5, 2, 4)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "185": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 3, 9), (0, 6, 5), (1, 5, 10), (1, 6, 6), (1, 2, 4),\n    (2, 5, 10), (2, 6, 8), (2, 0, 8), (3, 0, 7), (4, 3, 2),\n    (4, 1, 2), (4, 6, 3), (5, 1, 5), (5, 4, 2), (6, 3, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 0)\nprint(max_flow)\n```"}, "186": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 1, 13), (0, 12, 12), (0, 2, 15), (0, 7, 9),\n    (1, 6, 19), (1, 2, 18), (1, 3, 3),\n    (2, 5, 9), (2, 12, 4), (2, 8, 12), (2, 0, 6), (2, 7, 8),\n    (3, 4, 9), (3, 5, 20), (3, 12, 15), (3, 9, 9), (3, 8, 18), (3, 10, 5), (3, 0, 20), (3, 7, 12),\n    (4, 6, 15), (4, 9, 19), (4, 8, 17), (4, 3, 7),\n    (5, 13, 15), (5, 6, 2), (5, 0, 15),\n    (6, 11, 19), (6, 1, 9), (6, 5, 7), (6, 3, 4),\n    (7, 4, 14), (7, 1, 20), (7, 5, 9), (7, 13, 20), (7, 10, 14),\n    (8, 5, 9),\n    (9, 1, 20), (9, 5, 19), (9, 2, 1), (9, 8, 18),\n    (10, 1, 14), (10, 0, 18), (10, 3, 16),\n    (11, 5, 15), (11, 13, 14), (11, 0, 15),\n    (12, 13, 13), (12, 9, 2),\n    (13, 6, 17), (13, 9, 9), (13, 7, 4)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(13, 3)\nprint(max_flow)\n```"}, "187": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 1, 5), (0, 9, 1), (1, 12, 7), (1, 6, 9), (1, 3, 8), (1, 10, 17), (1, 5, 3), (1, 9, 11),\n    (2, 12, 19), (2, 5, 9), (2, 0, 13), (2, 7, 6), (2, 13, 11), (2, 11, 2), (3, 10, 5), (3, 4, 18),\n    (3, 7, 19), (4, 10, 8), (4, 5, 7), (4, 8, 14), (4, 0, 18), (5, 4, 16), (6, 12, 20), (6, 3, 15),\n    (6, 10, 8), (6, 8, 16), (6, 2, 4), (6, 0, 7), (6, 4, 2), (6, 11, 1), (7, 6, 2), (7, 3, 5),\n    (7, 13, 15), (8, 12, 2), (8, 6, 13), (8, 1, 8), (8, 3, 16), (8, 9, 20), (9, 3, 15), (9, 10, 9),\n    (9, 5, 2), (9, 2, 9), (10, 12, 17), (10, 1, 17), (10, 5, 1), (10, 7, 18), (11, 8, 18), (11, 7, 10),\n    (12, 8, 4), (12, 2, 15), (12, 7, 15), (13, 8, 16), (13, 7, 12), (13, 11, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 9\nprint(g.edmonds_karp(source, sink))\n```"}, "188": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 3, 2), (0, 6, 10), (1, 2, 2), (1, 5, 9), (1, 4, 8),\n    (2, 5, 4), (2, 0, 3), (2, 6, 3), (3, 1, 7), (5, 3, 6),\n    (5, 6, 6), (6, 2, 3), (6, 1, 5), (6, 0, 2), (6, 3, 10), (6, 4, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 3)\nprint(max_flow)\n```"}, "189": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 9, 15), (0, 6, 1), (0, 3, 6), (0, 4, 3),\n    (1, 3, 9), (1, 5, 13), (2, 8, 17), (2, 5, 3),\n    (2, 1, 19), (4, 2, 8), (4, 8, 4), (5, 10, 6),\n    (5, 7, 16), (6, 10, 19), (6, 7, 14), (6, 0, 7),\n    (7, 10, 1), (8, 3, 15), (8, 1, 18), (9, 7, 3),\n    (9, 6, 17), (9, 0, 20), (9, 2, 9), (9, 4, 2),\n    (10, 2, 18)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 3)\nprint(max_flow)\n```"}, "190": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 18, 17), (0, 7, 19), (0, 4, 16), (0, 15, 7), (1, 7, 4), (1, 6, 10),\n    (1, 10, 7), (1, 15, 2), (1, 14, 2), (1, 17, 6), (2, 7, 1), (2, 11, 6),\n    (2, 13, 18), (2, 15, 8), (3, 5, 18), (3, 6, 15), (3, 9, 10), (3, 15, 19),\n    (4, 0, 14), (4, 10, 6), (4, 3, 14), (4, 12, 13), (5, 18, 5), (5, 7, 14),\n    (5, 2, 6), (5, 4, 16), (5, 17, 18), (5, 3, 1), (5, 1, 13), (6, 0, 10),\n    (6, 7, 17), (6, 11, 12), (6, 13, 20), (6, 2, 18), (7, 5, 3), (7, 11, 17),\n    (7, 13, 19), (7, 10, 13), (8, 18, 7), (8, 0, 14), (8, 9, 14), (8, 2, 13),\n    (8, 17, 14), (8, 12, 17), (8, 1, 5), (9, 0, 7), (9, 2, 3), (9, 8, 19),\n    (9, 15, 6), (9, 3, 16), (9, 1, 19), (10, 5, 2), (10, 18, 19), (10, 6, 5),\n    (10, 13, 7), (10, 15, 6), (10, 3, 20), (11, 18, 1), (11, 7, 5), (11, 9, 9),\n    (11, 13, 10), (11, 4, 12), (11, 14, 3), (12, 18, 9), (12, 9, 15), (12, 2, 12),\n    (12, 4, 15), (12, 15, 17), (12, 3, 6), (12, 1, 6), (13, 11, 19), (13, 2, 13),\n    (13, 14, 19), (13, 17, 1), (13, 12, 15), (14, 18, 8), (14, 7, 1), (14, 11, 16),\n    (14, 6, 1), (14, 2, 8), (14, 16, 14), (14, 4, 8), (14, 15, 9), (14, 17, 8),\n    (15, 10, 7), (15, 2, 4), (15, 14, 9), (15, 12, 7), (16, 13, 20), (16, 8, 7),\n    (16, 15, 13), (17, 0, 12), (17, 6, 2), (17, 10, 12), (17, 8, 18), (17, 12, 2),\n    (18, 7, 8), (18, 2, 13), (18, 4, 8), (18, 8, 19), (18, 15, 3), (18, 12, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 15)\nprint(max_flow)\n```"}, "191": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 2, 11), (0, 1, 4), (1, 13, 11), (1, 8, 18), (1, 11, 10), (1, 6, 8),\n    (2, 7, 7), (3, 13, 2), (3, 2, 11), (3, 5, 5), (3, 6, 1), (3, 1, 18),\n    (4, 6, 16), (5, 7, 1), (5, 4, 2), (5, 9, 17), (6, 2, 3), (6, 8, 9),\n    (6, 11, 14), (6, 12, 5), (6, 5, 5), (6, 0, 16), (7, 13, 11), (7, 9, 11),\n    (7, 2, 9), (7, 11, 6), (7, 1, 3), (8, 13, 10), (8, 9, 17), (8, 5, 1),\n    (8, 6, 19), (8, 1, 3), (9, 3, 9), (9, 6, 16), (9, 0, 1), (9, 1, 8),\n    (10, 3, 20), (10, 2, 19), (11, 10, 9), (11, 5, 19), (11, 0, 7),\n    (12, 10, 5), (12, 4, 15), (12, 3, 14), (12, 8, 20), (12, 14, 5),\n    (13, 10, 19), (13, 3, 15), (13, 0, 3), (14, 7, 3), (14, 9, 7), (14, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(14, 2)\nprint(max_flow)\n```"}, "192": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 5, 6),\n    (0, 3, 4),\n    (1, 6, 4),\n    (1, 0, 4),\n    (1, 3, 5),\n    (4, 6, 5),\n    (4, 3, 8),\n    (5, 2, 3),\n    (6, 0, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 3))\n```"}, "193": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v, w])\n\n    def BFS(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u]:\n                if visited[v] == False and capacity > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def fordFulkerson(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.BFS(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                for v, capacity in self.graph[parent[s]]:\n                    if v == s:\n                        path_flow = min(path_flow, capacity)\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                for i, (vertex, capacity) in enumerate(self.graph[u]):\n                    if vertex == v:\n                        self.graph[u][i][1] -= path_flow\n                for i, (vertex, capacity) in enumerate(self.graph[v]):\n                    if vertex == u:\n                        self.graph[v][i][1] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.addEdge(0, 1, 8)\ng.addEdge(1, 6, 1)\ng.addEdge(2, 6, 5)\ng.addEdge(5, 1, 10)\ng.addEdge(6, 7, 9)\ng.addEdge(7, 3, 7)\ng.addEdge(7, 5, 10)\ng.addEdge(7, 6, 9)\ng.addEdge(7, 0, 1)\n\nprint(g.fordFulkerson(7, 6))\n```"}, "194": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 4, 6), (0, 5, 19), (0, 10, 8), (0, 13, 13), (0, 19, 8),\n    (1, 3, 7), (1, 17, 7), (1, 15, 2), (1, 16, 7), (1, 10, 15),\n    (1, 13, 11), (2, 12, 5), (2, 19, 19), (3, 18, 12), (3, 17, 11),\n    (3, 4, 9), (3, 5, 4), (4, 0, 10), (4, 2, 7), (4, 1, 1),\n    (4, 16, 7), (4, 13, 5), (4, 19, 20), (5, 18, 13), (5, 7, 6),\n    (5, 12, 5), (5, 6, 16), (5, 16, 13), (6, 17, 7), (6, 7, 7),\n    (6, 2, 7), (6, 12, 5), (6, 16, 15), (6, 19, 7), (7, 15, 20),\n    (7, 4, 1), (7, 1, 12), (7, 16, 19), (7, 11, 13), (7, 13, 11),\n    (8, 15, 20), (8, 0, 11), (8, 14, 8), (8, 6, 1), (8, 11, 5),\n    (9, 5, 1), (9, 8, 19), (9, 10, 5), (9, 11, 7), (9, 13, 6),\n    (10, 4, 12), (10, 2, 13), (10, 1, 6), (10, 11, 7), (11, 3, 6),\n    (11, 17, 16), (11, 8, 2), (11, 16, 3), (11, 9, 1), (12, 3, 3),\n    (12, 15, 16), (12, 0, 17), (12, 1, 8), (12, 5, 12), (12, 16, 14),\n    (12, 10, 2), (13, 3, 2), (13, 2, 19), (13, 16, 16), (13, 11, 5),\n    (13, 19, 8), (14, 5, 13), (14, 9, 16), (15, 18, 13), (15, 17, 20),\n    (15, 4, 11), (15, 12, 6), (15, 10, 7), (15, 11, 11), (16, 18, 3),\n    (16, 15, 3), (16, 12, 14), (16, 1, 4), (16, 5, 15), (16, 6, 17),\n    (16, 9, 19), (17, 15, 15), (17, 0, 16), (17, 12, 6), (17, 1, 7),\n    (17, 5, 7), (17, 11, 18), (18, 7, 17), (18, 1, 12), (18, 5, 17),\n    (18, 8, 9), (18, 13, 8), (19, 18, 3), (19, 17, 2), (19, 0, 15),\n    (19, 4, 12), (19, 2, 10), (19, 5, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 15\nprint(g.edmonds_karp(source, sink))\n```"}, "195": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 1, 2)\ng.add_edge(2, 4, 9)\ng.add_edge(2, 1, 8)\ng.add_edge(3, 0, 1)\ng.add_edge(4, 3, 10)\ng.add_edge(4, 0, 5)\n\nmax_flow = g.edmonds_karp(2, 1)\nprint(max_flow)\n```"}, "196": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 4, 14), (0, 5, 18), (0, 6, 15), (0, 12, 14), (0, 18, 4), (0, 3, 9), (0, 8, 7),\n    (1, 5, 1), (1, 13, 15), (1, 2, 7), (1, 7, 3), (2, 0, 8), (2, 4, 10), (2, 13, 2),\n    (2, 6, 10), (2, 16, 13), (2, 9, 1), (2, 7, 1), (3, 11, 2), (3, 12, 16), (3, 14, 15),\n    (4, 11, 15), (4, 19, 13), (4, 6, 1), (4, 17, 8), (4, 9, 3), (4, 14, 18), (5, 0, 19),\n    (5, 13, 1), (5, 18, 10), (5, 2, 18), (6, 0, 5), (6, 19, 15), (6, 1, 15), (6, 12, 20),\n    (6, 14, 1), (6, 2, 9), (7, 13, 8), (7, 1, 18), (7, 6, 10), (7, 10, 8), (7, 17, 1),\n    (7, 14, 6), (7, 2, 14), (7, 3, 14), (8, 19, 14), (8, 12, 11), (8, 16, 11), (9, 0, 15),\n    (9, 5, 7), (9, 11, 20), (9, 6, 9), (9, 17, 4), (9, 14, 10), (9, 2, 17), (9, 7, 1),\n    (10, 0, 3), (10, 17, 10), (10, 3, 13), (10, 8, 2), (11, 0, 13), (11, 4, 12), (11, 6, 9),\n    (11, 17, 5), (12, 5, 11), (12, 11, 9), (12, 6, 11), (12, 10, 9), (12, 14, 19), (12, 2, 15),\n    (13, 11, 3), (13, 2, 13), (13, 8, 13), (14, 11, 12), (14, 10, 6), (14, 15, 1), (14, 16, 5),\n    (15, 0, 13), (15, 5, 5), (15, 1, 3), (15, 12, 16), (15, 18, 8), (15, 14, 14), (16, 0, 10),\n    (16, 4, 5), (16, 5, 8), (16, 19, 16), (16, 12, 19), (16, 10, 20), (16, 18, 18), (16, 3, 7),\n    (17, 0, 17), (17, 4, 6), (17, 12, 9), (17, 14, 6), (18, 1, 8), (18, 15, 13), (18, 8, 5),\n    (19, 2, 1), (19, 8, 12)\n]\n\ng = Graph(20)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 18\nsink = 19\nprint(g.edmonds_karp(source, sink))\n```"}, "197": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (1, 12, 6), (1, 7, 20), (2, 12, 1), (2, 6, 7), (2, 11, 11), (2, 10, 14),\n    (2, 8, 17), (2, 13, 10), (3, 2, 19), (3, 9, 7), (3, 4, 16), (4, 11, 18),\n    (4, 1, 20), (4, 7, 6), (4, 14, 13), (5, 2, 4), (5, 9, 2), (6, 0, 20),\n    (6, 11, 8), (6, 7, 7), (6, 8, 12), (7, 1, 8), (7, 9, 6), (8, 10, 8),\n    (8, 3, 10), (8, 4, 7), (9, 0, 18), (9, 6, 14), (9, 7, 10), (9, 13, 5),\n    (9, 4, 7), (10, 7, 2), (11, 6, 15), (11, 14, 19), (11, 13, 15), (12, 10, 6),\n    (12, 1, 14), (12, 5, 19), (13, 10, 18), (13, 7, 8), (14, 10, 12), (14, 7, 12),\n    (14, 8, 12), (14, 9, 20), (14, 13, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 0))\n```"}, "198": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 8, 7), (0, 10, 17), (0, 12, 17), (1, 0, 20), (2, 8, 5), (2, 11, 15),\n    (3, 8, 8), (3, 14, 3), (3, 0, 11), (3, 1, 1), (3, 2, 15), (3, 12, 6),\n    (3, 9, 16), (4, 5, 12), (4, 10, 12), (4, 14, 13), (4, 2, 14), (4, 12, 14),\n    (4, 9, 3), (5, 10, 17), (5, 13, 20), (5, 11, 4), (5, 9, 3), (6, 8, 17),\n    (6, 5, 15), (6, 13, 13), (6, 7, 15), (6, 11, 10), (6, 9, 20), (7, 8, 19),\n    (7, 10, 8), (7, 13, 18), (7, 9, 6), (8, 0, 9), (8, 12, 1), (8, 4, 14),\n    (8, 9, 20), (9, 10, 4), (9, 1, 20), (9, 12, 16), (9, 4, 10), (10, 0, 16),\n    (10, 3, 2), (10, 2, 10), (11, 8, 15), (11, 5, 9), (11, 2, 18), (12, 13, 7),\n    (12, 2, 16), (13, 14, 20), (13, 1, 11), (13, 9, 20), (14, 5, 11), (14, 10, 9),\n    (14, 7, 15), (14, 11, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(13, 2)\nprint(max_flow)\n```"}, "199": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 15, 12), (0, 3, 10), (0, 6, 9), (0, 10, 1), (0, 7, 6),\n    (1, 11, 17), (1, 8, 11), (1, 5, 3), (1, 7, 6), (1, 0, 20),\n    (2, 15, 13), (2, 11, 19), (2, 13, 18),\n    (4, 10, 10), (4, 0, 13),\n    (5, 3, 10), (5, 8, 3), (5, 12, 11), (5, 1, 8),\n    (6, 15, 17), (6, 0, 10), (6, 13, 9),\n    (7, 15, 15), (7, 9, 16), (7, 4, 8), (7, 14, 1),\n    (8, 15, 16), (8, 5, 7), (8, 10, 4), (8, 12, 3), (8, 16, 20), (8, 14, 11), (8, 0, 9),\n    (9, 3, 18), (9, 6, 13), (9, 8, 18), (9, 2, 14), (9, 14, 19), (9, 13, 20),\n    (10, 11, 20), (10, 9, 7),\n    (11, 5, 5), (11, 7, 6), (11, 16, 18),\n    (12, 15, 5), (12, 6, 2), (12, 2, 11), (12, 16, 5), (12, 9, 19), (12, 4, 11),\n    (13, 11, 7), (13, 3, 5), (13, 6, 17), (13, 5, 6), (13, 7, 10), (13, 0, 7),\n    (14, 15, 15), (14, 4, 11),\n    (15, 11, 3), (15, 1, 17), (15, 16, 11), (15, 9, 13), (15, 14, 15),\n    (16, 15, 17), (16, 6, 19), (16, 8, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 16\nsink = 7\nprint(g.edmonds_karp(source, sink))\n```"}, "200": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 4, 3), (0, 16, 17), (0, 13, 1), (0, 8, 4), (0, 1, 11),\n    (1, 15, 9), (1, 6, 1), (1, 12, 15), (2, 15, 16), (2, 4, 9),\n    (2, 9, 6), (2, 3, 20), (2, 6, 11), (2, 5, 17), (3, 15, 7),\n    (3, 11, 16), (4, 15, 7), (4, 16, 17), (4, 8, 9), (5, 4, 16),\n    (5, 0, 1), (5, 1, 6), (5, 12, 2), (6, 4, 9), (6, 3, 4),\n    (6, 5, 16), (6, 14, 10), (6, 13, 16), (6, 8, 19), (6, 11, 12),\n    (7, 0, 14), (7, 6, 19), (7, 1, 7), (8, 15, 7), (8, 16, 15),\n    (8, 2, 4), (8, 5, 13), (8, 1, 15), (8, 12, 12), (9, 4, 15),\n    (9, 16, 4), (9, 5, 6), (9, 13, 20), (9, 10, 1), (9, 8, 7),\n    (10, 4, 1), (10, 0, 1), (10, 6, 13), (10, 12, 13), (10, 17, 17),\n    (11, 4, 6), (11, 7, 4), (11, 5, 18), (11, 14, 8), (11, 13, 5),\n    (11, 12, 13), (12, 10, 11), (12, 1, 3), (12, 11, 16), (12, 17, 7),\n    (13, 15, 9), (13, 9, 13), (14, 15, 16), (14, 2, 10), (14, 13, 1),\n    (14, 12, 5), (15, 7, 10), (15, 5, 6), (15, 10, 7), (16, 15, 18),\n    (16, 0, 13), (16, 3, 17), (16, 6, 10), (16, 10, 1), (17, 0, 1),\n    (17, 7, 4), (17, 13, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 5))\n```"}, "201": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 10, 18), (0, 7, 10), (0, 6, 11), (0, 9, 2),\n    (1, 5, 3), (1, 7, 4), (1, 4, 6), (1, 6, 12), (1, 9, 18),\n    (2, 10, 6), (2, 3, 5), (2, 6, 1), (2, 9, 16),\n    (3, 4, 13),\n    (4, 7, 20), (4, 8, 16), (4, 6, 9),\n    (5, 7, 10), (5, 6, 8), (5, 9, 6), (5, 11, 18),\n    (6, 5, 14), (6, 3, 14), (6, 8, 11), (6, 9, 18),\n    (7, 10, 4), (7, 5, 6), (7, 2, 10), (7, 3, 1), (7, 0, 16), (7, 4, 13), (7, 6, 17),\n    (8, 1, 17), (8, 0, 16), (8, 9, 4),\n    (9, 5, 17), (9, 3, 4),\n    (10, 3, 19), (10, 8, 1), (10, 4, 3),\n    (11, 2, 10), (11, 8, 9), (11, 6, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 0)\nprint(max_flow)\n```"}, "202": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 8, 4), (0, 4, 5), (0, 3, 6), (1, 6, 4), (1, 0, 6),\n    (2, 6, 2), (3, 8, 1), (3, 1, 6), (3, 2, 3), (4, 0, 4),\n    (4, 7, 8), (5, 4, 8), (5, 0, 10), (5, 7, 4), (6, 5, 2),\n    (6, 3, 3), (6, 0, 3), (7, 3, 4), (8, 4, 7), (8, 1, 1),\n    (8, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 5\nsink = 3\nprint(g.edmonds_karp(source, sink))\n```"}, "203": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 2, 20), (0, 5, 7), (0, 7, 4), (0, 3, 19), (0, 4, 16),\n    (1, 2, 7), (1, 3, 12), (1, 0, 13), (1, 4, 2), (1, 9, 20),\n    (2, 1, 6), (2, 9, 1), (3, 10, 16), (3, 0, 8), (3, 9, 14),\n    (4, 2, 15), (4, 6, 9), (4, 7, 1), (4, 8, 10), (4, 0, 9),\n    (4, 1, 19), (5, 8, 1), (5, 1, 10), (7, 1, 3), (8, 6, 7),\n    (8, 3, 12), (8, 1, 11), (8, 4, 5), (10, 6, 19), (10, 8, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 9\nprint(g.edmonds_karp(source, sink))\n```"}, "204": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 7, 5), (1, 8, 18), (1, 0, 3), (2, 10, 11), (3, 4, 12), (3, 6, 17),\n    (4, 8, 13), (4, 6, 14), (5, 7, 18), (6, 3, 9), (6, 8, 10), (6, 11, 2),\n    (6, 9, 20), (7, 4, 1), (7, 11, 18), (7, 6, 2), (8, 7, 10), (8, 10, 5),\n    (8, 6, 3), (8, 0, 9), (9, 3, 20), (9, 4, 5), (9, 1, 1), (9, 7, 15),\n    (9, 10, 16), (9, 2, 15), (10, 3, 13), (10, 4, 11), (10, 1, 12), (10, 7, 14),\n    (10, 6, 17), (10, 9, 19), (11, 1, 5), (11, 6, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 2\nprint(g.edmonds_karp(source, sink))\n```"}, "205": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 4, 12), (0, 13, 20), (1, 4, 6), (1, 8, 2), (1, 9, 9), (1, 11, 1),\n    (2, 3, 17), (2, 8, 8), (2, 9, 18), (2, 7, 9), (3, 1, 6), (3, 5, 7),\n    (3, 10, 7), (4, 3, 19), (4, 8, 3), (4, 2, 4), (4, 1, 15), (4, 0, 15),\n    (4, 11, 10), (5, 4, 9), (5, 6, 8), (5, 7, 14), (5, 0, 16), (5, 10, 10),\n    (5, 12, 10), (6, 8, 2), (6, 7, 3), (6, 5, 10), (6, 10, 19), (7, 13, 3),\n    (7, 0, 7), (8, 1, 19), (8, 9, 15), (8, 13, 2), (8, 0, 3), (8, 12, 13),\n    (9, 13, 20), (9, 0, 3), (9, 11, 12), (9, 10, 12), (10, 9, 3), (11, 9, 1),\n    (11, 7, 2), (11, 13, 16), (12, 3, 5), (12, 5, 2), (13, 4, 20), (13, 0, 17),\n    (13, 11, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(13, 4))\n```"}, "206": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 3, 17), (0, 1, 16), (1, 3, 7), (1, 4, 12), (1, 5, 4), (1, 15, 12),\n    (2, 7, 2), (2, 8, 19), (2, 16, 6), (3, 2, 19), (3, 10, 16), (4, 13, 8),\n    (4, 6, 3), (4, 14, 15), (4, 9, 4), (4, 15, 12), (5, 11, 17), (5, 3, 18),\n    (5, 16, 3), (6, 12, 3), (6, 1, 6), (6, 5, 2), (7, 2, 6), (7, 6, 12),\n    (7, 8, 18), (8, 4, 14), (8, 14, 17), (8, 1, 20), (9, 12, 20), (9, 3, 15),\n    (9, 1, 3), (10, 3, 19), (10, 16, 9), (10, 14, 6), (11, 0, 3), (11, 7, 10),\n    (11, 16, 12), (11, 5, 12), (11, 9, 20), (12, 16, 15), (12, 5, 18),\n    (13, 3, 6), (13, 14, 1), (13, 5, 5), (14, 7, 3), (14, 10, 2), (14, 16, 5),\n    (15, 12, 3), (15, 4, 2), (15, 10, 17), (15, 16, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(11, 8)\nprint(max_flow)\n```"}, "207": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 7, 4), (0, 4, 9), (1, 3, 5), (1, 8, 5), (2, 1, 3), (2, 6, 8),\n    (2, 8, 7), (3, 6, 8), (3, 8, 6), (4, 1, 1), (4, 8, 3), (5, 7, 10),\n    (5, 4, 5), (6, 3, 2), (6, 0, 1), (6, 5, 2), (6, 2, 10), (7, 0, 7),\n    (7, 8, 1), (8, 3, 6), (8, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 4)\nprint(max_flow)\n```"}, "208": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 12, 4), (0, 14, 11), (0, 13, 10), (2, 15, 13), (2, 16, 1),\n    (3, 1, 11), (3, 4, 10), (3, 10, 9), (4, 11, 8), (4, 14, 20),\n    (4, 6, 14), (4, 0, 10), (4, 10, 14), (4, 13, 2), (5, 2, 17),\n    (5, 6, 17), (5, 13, 16), (6, 11, 9), (6, 9, 14), (6, 13, 16),\n    (7, 14, 12), (7, 0, 6), (8, 12, 8), (8, 14, 2), (8, 7, 17),\n    (8, 0, 5), (8, 4, 19), (9, 8, 9), (9, 2, 9), (9, 7, 6),\n    (9, 10, 14), (9, 13, 14), (10, 8, 13), (10, 12, 13), (10, 15, 7),\n    (10, 2, 11), (10, 16, 14), (10, 5, 5), (11, 9, 18), (11, 6, 8),\n    (11, 16, 11), (11, 10, 17), (12, 8, 12), (12, 2, 3), (12, 11, 12),\n    (12, 7, 7), (12, 6, 2), (12, 5, 2), (12, 10, 8), (13, 15, 17),\n    (13, 7, 19), (13, 9, 5), (13, 4, 18), (14, 1, 10), (14, 15, 20),\n    (14, 7, 16), (14, 6, 6), (14, 13, 6), (15, 12, 17), (15, 2, 5),\n    (15, 6, 9), (15, 0, 7), (16, 14, 2), (16, 13, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(7, 4)\nprint(max_flow)\n```"}, "209": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 2, 5), (0, 1, 2), (0, 5, 7),\n    (1, 4, 8), (1, 0, 6),\n    (2, 3, 3), (2, 1, 4), (2, 5, 7), (2, 0, 1),\n    (3, 1, 6), (3, 5, 7), (3, 4, 9),\n    (4, 0, 4),\n    (5, 2, 10), (5, 1, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 0))\n```"}, "210": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 11, 13), (0, 16, 16), (0, 4, 20), (1, 6, 13), (1, 11, 2), (1, 8, 19),\n    (2, 0, 19), (2, 6, 17), (2, 15, 11), (2, 14, 8), (2, 3, 18), (2, 7, 18),\n    (2, 13, 13), (3, 14, 14), (3, 16, 5), (3, 4, 12), (3, 9, 3), (3, 10, 17),\n    (4, 12, 1), (4, 2, 13), (4, 10, 1), (5, 12, 14), (5, 13, 7), (6, 3, 12),\n    (6, 7, 14), (6, 12, 7), (6, 10, 9), (7, 15, 15), (8, 6, 18), (8, 3, 19),\n    (8, 1, 17), (8, 16, 7), (8, 13, 13), (8, 9, 14), (8, 10, 10), (9, 5, 5),\n    (9, 11, 11), (9, 12, 7), (10, 5, 15), (10, 14, 6), (10, 3, 17), (10, 2, 17),\n    (11, 6, 2), (11, 1, 17), (11, 7, 20), (11, 13, 1), (12, 14, 13), (12, 4, 20),\n    (13, 5, 7), (13, 3, 14), (13, 8, 17), (13, 10, 11), (14, 3, 8), (14, 8, 14),\n    (14, 16, 16), (14, 9, 12), (14, 10, 15), (15, 6, 6), (15, 5, 3), (15, 1, 7),\n    (15, 8, 13), (15, 16, 16), (15, 12, 18), (16, 14, 11), (16, 11, 18), (16, 4, 2)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "211": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 4, 9)\ng.add_edge(1, 4, 2)\ng.add_edge(2, 1, 2)\ng.add_edge(2, 0, 4)\ng.add_edge(2, 4, 5)\ng.add_edge(3, 0, 5)\ng.add_edge(3, 2, 3)\ng.add_edge(4, 3, 9)\n\nprint(g.edmonds_karp(2, 3))\n```"}, "212": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (1, 7, 3),\n    (2, 3, 7),\n    (2, 4, 10),\n    (3, 0, 5),\n    (3, 1, 4),\n    (3, 8, 6),\n    (4, 6, 10),\n    (5, 1, 6),\n    (5, 7, 3),\n    (7, 2, 7),\n    (8, 6, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 6)\nprint(max_flow)\n```"}, "213": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 10, 12), (0, 7, 17), (0, 11, 17),\n    (1, 8, 20), (2, 8, 3), (2, 1, 1),\n    (2, 7, 18), (2, 11, 8), (3, 0, 9),\n    (3, 4, 11), (3, 6, 9), (4, 8, 10),\n    (4, 2, 19), (4, 5, 16), (5, 10, 12),\n    (5, 8, 5), (5, 1, 2), (5, 11, 6),\n    (5, 3, 16), (6, 9, 14), (6, 8, 17),\n    (7, 6, 15), (8, 2, 3), (8, 5, 20),\n    (8, 4, 18), (8, 7, 6), (8, 3, 6),\n    (9, 0, 16), (9, 10, 8), (9, 1, 20),\n    (9, 11, 16), (10, 0, 16), (10, 2, 6),\n    (10, 5, 5), (10, 1, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 1))\n```"}, "214": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 8, 13), (0, 9, 9), (0, 12, 17), (0, 4, 5), (0, 7, 19),\n    (1, 11, 16), (2, 10, 8), (2, 0, 15), (3, 8, 10), (3, 5, 18),\n    (4, 12, 5), (5, 6, 3), (5, 1, 19), (7, 2, 7), (7, 12, 17),\n    (7, 4, 1), (7, 5, 20), (7, 3, 17), (7, 0, 17), (8, 1, 10),\n    (8, 10, 17), (8, 0, 3), (9, 5, 1), (9, 1, 11), (9, 10, 5),\n    (9, 11, 17), (9, 7, 12), (10, 9, 14), (10, 5, 7), (10, 11, 20),\n    (11, 4, 6), (11, 6, 13), (12, 4, 9), (12, 10, 15)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 0\nprint(g.edmonds_karp(source, sink))\n```"}, "215": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 1, 14), (0, 6, 7), (0, 9, 8), (0, 8, 13),\n    (1, 11, 11), (1, 6, 20), (1, 0, 10), (1, 2, 6),\n    (2, 11, 18), (2, 5, 14), (2, 7, 11), (2, 0, 4),\n    (3, 1, 12), (3, 11, 10), (3, 12, 9), (3, 6, 19),\n    (3, 0, 10), (3, 2, 9), (4, 5, 15), (4, 12, 4),\n    (4, 0, 8), (5, 3, 17), (5, 12, 3), (5, 6, 2),\n    (5, 7, 1), (5, 4, 18), (5, 10, 9), (6, 3, 12),\n    (6, 1, 9), (6, 13, 18), (6, 5, 6), (6, 4, 8),\n    (6, 2, 13), (7, 1, 1), (7, 0, 7), (7, 14, 8),\n    (8, 13, 14), (8, 0, 19), (8, 4, 18), (9, 5, 6),\n    (9, 6, 12), (9, 7, 1), (9, 4, 5), (9, 10, 5),\n    (10, 14, 16), (10, 4, 18), (11, 3, 3), (11, 1, 1),\n    (11, 12, 15), (11, 4, 9), (11, 10, 18), (12, 13, 4),\n    (12, 4, 12), (12, 2, 5), (13, 1, 15), (13, 12, 11),\n    (13, 14, 9), (13, 9, 6), (13, 8, 5), (13, 10, 15),\n    (14, 1, 7), (14, 11, 15), (14, 6, 19)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 6))\n```"}, "216": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 3, 18), (0, 4, 15), (0, 10, 18), (0, 11, 8),\n    (1, 12, 5), (1, 14, 3), (1, 7, 4), (2, 9, 11),\n    (2, 7, 14), (2, 15, 10), (2, 11, 18), (3, 1, 11),\n    (3, 12, 1), (3, 10, 5), (3, 13, 6), (3, 5, 12),\n    (4, 3, 12), (4, 0, 6), (4, 7, 7), (4, 16, 12),\n    (4, 5, 2), (5, 9, 6), (5, 14, 6), (5, 8, 11),\n    (5, 13, 12), (5, 15, 19), (6, 8, 6), (6, 15, 16),\n    (6, 5, 11), (7, 0, 12), (7, 15, 4), (8, 1, 18),\n    (8, 9, 6), (8, 4, 12), (8, 17, 4), (8, 15, 6),\n    (9, 12, 7), (9, 0, 7), (9, 10, 9), (9, 16, 12),\n    (9, 15, 6), (9, 2, 13), (10, 1, 17), (10, 0, 12),\n    (10, 4, 8), (10, 17, 9), (10, 8, 10), (10, 13, 4),\n    (11, 1, 10), (11, 0, 16), (11, 17, 10), (11, 8, 11),\n    (11, 2, 5), (11, 5, 17), (12, 16, 5), (12, 2, 19),\n    (13, 6, 12), (13, 16, 12), (13, 11, 1), (14, 0, 20),\n    (14, 11, 4), (15, 9, 8), (15, 7, 20), (15, 16, 1),\n    (15, 8, 2), (16, 12, 2), (16, 10, 15), (16, 8, 11),\n    (17, 3, 12), (17, 11, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 0))\n```"}, "217": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 5, 2), (0, 9, 14), (0, 6, 1), (0, 11, 4), (1, 16, 14), (1, 2, 12),\n    (1, 9, 19), (1, 14, 3), (1, 12, 1), (1, 6, 3), (1, 8, 13), (1, 19, 11),\n    (2, 3, 7), (2, 6, 8), (2, 8, 8), (3, 6, 2), (4, 5, 10), (4, 2, 8),\n    (4, 10, 5), (4, 12, 6), (4, 17, 5), (4, 1, 5), (5, 4, 11), (5, 12, 8),\n    (5, 17, 10), (5, 0, 20), (6, 5, 3), (6, 4, 1), (6, 18, 1), (6, 0, 13),\n    (6, 15, 20), (7, 4, 12), (7, 17, 16), (7, 8, 5), (8, 4, 10), (8, 17, 9),\n    (8, 18, 2), (8, 19, 17), (9, 4, 13), (9, 3, 7), (9, 14, 10), (9, 17, 8),\n    (9, 15, 8), (10, 5, 9), (10, 4, 20), (10, 3, 12), (10, 14, 5), (10, 12, 7),\n    (10, 1, 12), (10, 8, 6), (10, 15, 16), (11, 2, 18), (11, 14, 9), (11, 12, 13),\n    (11, 0, 3), (11, 15, 1), (11, 19, 7), (12, 14, 13), (12, 15, 19), (13, 7, 9),\n    (13, 9, 17), (13, 14, 6), (13, 10, 8), (13, 6, 14), (13, 17, 6), (13, 15, 14),\n    (14, 5, 2), (14, 9, 11), (14, 10, 4), (14, 12, 13), (14, 18, 18), (14, 0, 16),\n    (14, 19, 3), (15, 16, 16), (15, 13, 2), (15, 0, 13), (15, 1, 14), (16, 7, 19),\n    (16, 10, 13), (16, 17, 13), (16, 0, 13), (16, 11, 10), (17, 2, 6), (17, 13, 3),\n    (17, 1, 10), (17, 11, 6), (18, 13, 6), (18, 0, 9), (18, 15, 13), (19, 7, 11),\n    (19, 2, 19), (19, 14, 8), (19, 17, 19), (19, 1, 16), (19, 8, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 6))\n```"}, "218": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 4, 9),\n    (1, 8, 2),\n    (1, 5, 7),\n    (2, 3, 4),\n    (2, 0, 10),\n    (2, 9, 1),\n    (3, 1, 3),\n    (3, 7, 3),\n    (3, 5, 6),\n    (4, 1, 3),\n    (4, 0, 7),\n    (4, 8, 2),\n    (5, 4, 10),\n    (6, 1, 10),\n    (7, 2, 3),\n    (8, 0, 1),\n    (8, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 0)\nprint(max_flow)\n```"}, "219": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 8, 1),\n    (0, 6, 10),\n    (0, 3, 1),\n    (2, 7, 4),\n    (2, 6, 4),\n    (3, 9, 10),\n    (4, 8, 8),\n    (4, 5, 4),\n    (5, 4, 8),\n    (5, 7, 6),\n    (5, 3, 5),\n    (7, 9, 4),\n    (7, 6, 1),\n    (7, 3, 7),\n    (8, 3, 6),\n    (9, 4, 8)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 6))\n```"}, "220": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 10, 14), (0, 8, 13), (1, 0, 1), (1, 7, 2), (3, 11, 18), (3, 5, 16),\n    (3, 10, 15), (3, 9, 15), (3, 8, 5), (4, 1, 7), (4, 9, 15), (4, 7, 8),\n    (5, 0, 9), (5, 1, 4), (5, 10, 8), (6, 0, 17), (6, 12, 17), (6, 4, 7),\n    (6, 10, 9), (6, 9, 1), (6, 8, 17), (7, 12, 12), (7, 8, 18), (8, 5, 11),\n    (8, 6, 1), (8, 1, 6), (8, 4, 4), (8, 13, 9), (9, 6, 11), (9, 12, 1),\n    (9, 8, 17), (10, 11, 17), (10, 3, 8), (10, 9, 19), (11, 4, 1), (11, 10, 19),\n    (11, 2, 8), (12, 11, 14), (12, 10, 16), (12, 9, 17), (12, 7, 17), (12, 13, 19),\n    (12, 8, 7), (13, 0, 15), (13, 5, 11), (13, 10, 7), (13, 2, 1), (13, 8, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 4))\n```"}, "221": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 3, 2), (0, 13, 8), (0, 2, 20), (0, 10, 17),\n    (1, 9, 4), (1, 5, 3), (2, 4, 16), (2, 14, 14),\n    (2, 1, 11), (2, 5, 18), (3, 2, 18), (3, 0, 14),\n    (3, 7, 6), (3, 9, 12), (3, 10, 17), (4, 7, 1),\n    (4, 11, 15), (4, 8, 4), (5, 4, 17), (5, 11, 11),\n    (5, 14, 16), (5, 8, 5), (6, 8, 20), (6, 10, 4),\n    (6, 1, 13), (7, 8, 7), (8, 13, 3), (8, 14, 5),\n    (9, 3, 19), (9, 6, 16), (9, 0, 14), (9, 5, 6),\n    (10, 3, 5), (10, 2, 3), (11, 3, 18), (11, 13, 6),\n    (11, 6, 13), (11, 0, 6), (11, 12, 7), (11, 8, 3),\n    (12, 2, 19), (12, 7, 8), (12, 8, 20), (13, 0, 4),\n    (14, 6, 10), (14, 0, 9), (14, 11, 19), (14, 9, 3),\n    (14, 5, 12)\n]\n\ng = Graph(15)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 11\nsink = 13\nprint(g.edmonds_karp(source, sink))\n```"}, "222": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 8, 3),\n    (1, 3, 6),\n    (2, 5, 7),\n    (2, 4, 4),\n    (2, 3, 6),\n    (3, 5, 5),\n    (3, 6, 10),\n    (4, 2, 2),\n    (5, 8, 7),\n    (8, 4, 8),\n    (8, 6, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 6))\n```"}, "223": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 4, 10)\ng.add_edge(1, 4, 3)\ng.add_edge(1, 2, 9)\ng.add_edge(1, 0, 8)\ng.add_edge(2, 1, 9)\ng.add_edge(2, 0, 5)\ng.add_edge(3, 5, 9)\ng.add_edge(4, 2, 6)\ng.add_edge(5, 4, 2)\ng.add_edge(5, 2, 9)\n\nprint(g.edmonds_karp(2, 4))\n```"}, "224": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 8, 17), (0, 3, 8), (0, 12, 1), (0, 2, 15), (0, 15, 10),\n    (1, 10, 9), (1, 4, 5), (1, 12, 18), (1, 0, 19), (1, 11, 10),\n    (1, 2, 10), (2, 11, 4), (2, 14, 13), (3, 5, 9), (3, 10, 3),\n    (3, 12, 4), (3, 13, 6), (3, 7, 3), (3, 11, 10), (4, 5, 13),\n    (4, 10, 14), (4, 11, 19), (4, 2, 1), (4, 14, 13), (5, 2, 11),\n    (6, 10, 11), (7, 10, 12), (7, 3, 13), (7, 1, 19), (7, 11, 11),\n    (7, 14, 9), (8, 12, 3), (8, 13, 20), (8, 2, 17), (8, 9, 6),\n    (8, 14, 13), (9, 12, 4), (9, 7, 13), (9, 2, 9), (10, 6, 8),\n    (11, 5, 16), (12, 3, 12), (12, 4, 9), (13, 4, 19), (13, 7, 9),\n    (13, 1, 3), (13, 14, 8), (14, 10, 8), (14, 13, 11), (14, 2, 10),\n    (15, 10, 9), (15, 12, 2), (15, 13, 15), (15, 7, 12), (15, 11, 5)\n]\n\ng = Graph(16)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 7\nsink = 13\nprint(g.edmonds_karp(source, sink))\n```"}, "225": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 2, 2)\ng.add_edge(1, 3, 3)\ng.add_edge(1, 0, 10)\ng.add_edge(1, 4, 5)\ng.add_edge(2, 1, 9)\ng.add_edge(2, 4, 10)\ng.add_edge(3, 0, 6)\ng.add_edge(4, 1, 8)\ng.add_edge(4, 2, 2)\n\nprint(g.edmonds_karp(4, 0))\n```"}, "226": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 7, 3), (0, 14, 3), (0, 13, 10), (0, 9, 17),\n    (1, 6, 5), (1, 10, 3), (1, 16, 3), (2, 14, 4),\n    (2, 1, 17), (2, 5, 9), (2, 17, 18), (2, 15, 4),\n    (2, 12, 12), (2, 8, 13), (2, 0, 12), (3, 14, 3),\n    (3, 1, 18), (3, 12, 13), (3, 8, 4), (3, 16, 10),\n    (4, 6, 8), (4, 14, 20), (4, 3, 1), (4, 17, 19),\n    (4, 9, 3), (4, 16, 6), (5, 6, 13), (5, 14, 11),\n    (5, 15, 10), (5, 4, 15), (5, 2, 17), (5, 0, 3),\n    (6, 7, 15), (6, 13, 11), (6, 1, 12), (6, 5, 10),\n    (6, 17, 20), (7, 3, 14), (7, 11, 16), (7, 8, 6),\n    (8, 13, 16), (8, 12, 1), (8, 0, 11), (8, 16, 16),\n    (9, 1, 1), (9, 17, 9), (9, 10, 1), (9, 12, 11),\n    (9, 4, 6), (10, 1, 1), (10, 11, 12), (10, 4, 7),\n    (10, 0, 17), (11, 14, 5), (11, 2, 1), (12, 14, 16),\n    (12, 13, 6), (12, 15, 16), (12, 2, 9), (12, 8, 7),\n    (13, 14, 18), (13, 2, 1), (13, 8, 12), (13, 0, 12),\n    (13, 16, 3), (14, 17, 16), (14, 12, 4), (15, 1, 15),\n    (15, 10, 7), (15, 12, 1), (15, 0, 7), (16, 5, 17),\n    (16, 10, 15), (16, 9, 13), (16, 11, 17), (16, 15, 13),\n    (16, 2, 10), (16, 8, 17), (17, 3, 2), (17, 9, 9),\n    (17, 12, 17), (17, 2, 19), (17, 16, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 15))\n```"}, "227": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 11, 20), (0, 14, 20), (0, 10, 17), (0, 4, 8), (0, 6, 7),\n    (1, 14, 18), (1, 10, 19), (1, 4, 18), (1, 6, 15), (1, 2, 14), (1, 12, 9),\n    (2, 7, 17), (2, 8, 8), (2, 1, 7), (2, 9, 14),\n    (3, 13, 15), (3, 14, 17), (3, 4, 20), (3, 0, 3), (3, 5, 10), (3, 12, 1),\n    (4, 8, 18), (4, 5, 1),\n    (5, 11, 2), (5, 13, 9), (5, 3, 20), (5, 0, 9), (5, 1, 11),\n    (6, 10, 12), (6, 0, 11), (6, 1, 17),\n    (7, 13, 13), (7, 10, 13), (7, 4, 20), (7, 9, 3),\n    (8, 11, 10), (8, 10, 7), (8, 4, 20), (8, 1, 19), (8, 9, 8),\n    (9, 11, 10), (9, 13, 19), (9, 14, 1), (9, 7, 19), (9, 8, 2),\n    (10, 13, 8), (10, 8, 17), (10, 0, 3), (10, 12, 5),\n    (11, 4, 13), (11, 3, 13), (11, 1, 20), (11, 12, 16),\n    (12, 13, 11), (12, 6, 13), (12, 2, 12), (12, 5, 7),\n    (13, 14, 11), (13, 5, 15),\n    (14, 13, 5), (14, 0, 5), (14, 5, 17), (14, 12, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 4\nsink = 10\nprint(g.edmonds_karp(source, sink))\n```"}, "228": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 7, 12), (0, 18, 17), (0, 8, 10), (0, 15, 5), (0, 2, 17), (0, 14, 4),\n    (1, 7, 2), (1, 10, 7), (1, 18, 7), (1, 15, 9), (1, 14, 4), (2, 9, 18),\n    (2, 7, 16), (2, 0, 13), (2, 18, 1), (3, 19, 9), (3, 8, 20), (4, 0, 2),\n    (4, 15, 9), (4, 14, 11), (5, 12, 1), (5, 19, 14), (5, 2, 20), (6, 3, 4),\n    (6, 7, 2), (6, 12, 3), (6, 19, 15), (6, 10, 11), (6, 4, 4), (6, 14, 20),\n    (7, 19, 18), (7, 0, 1), (7, 5, 6), (7, 2, 1), (8, 7, 7), (8, 12, 19),\n    (8, 6, 4), (8, 10, 10), (8, 0, 4), (8, 5, 2), (8, 1, 9), (8, 14, 11),\n    (9, 3, 1), (9, 19, 7), (9, 1, 5), (9, 14, 1), (10, 19, 4), (10, 6, 6),\n    (10, 5, 15), (10, 15, 11), (10, 13, 17), (10, 11, 5), (11, 3, 18),\n    (11, 7, 19), (11, 19, 8), (11, 18, 4), (11, 8, 19), (11, 5, 3),\n    (11, 13, 13), (11, 14, 11), (12, 7, 4), (12, 19, 3), (12, 16, 17),\n    (12, 17, 13), (13, 12, 17), (13, 10, 16), (13, 18, 15), (13, 15, 3),\n    (13, 2, 6), (13, 16, 6), (13, 14, 1), (14, 12, 11), (14, 6, 6),\n    (14, 0, 9), (14, 2, 11), (14, 4, 3), (14, 17, 18), (15, 6, 5),\n    (15, 11, 2), (15, 14, 1), (16, 10, 4), (16, 18, 16), (16, 15, 16),\n    (16, 14, 8), (17, 9, 3), (17, 10, 8), (17, 0, 18), (17, 18, 4),\n    (17, 5, 20), (17, 15, 4), (17, 1, 16), (17, 11, 3), (17, 14, 6),\n    (18, 9, 15), (18, 3, 17), (18, 10, 12), (18, 8, 15), (19, 3, 13),\n    (19, 2, 14), (19, 11, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(16, 10)\nprint(max_flow)\n```"}, "229": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 3, 4), (0, 5, 6), (1, 6, 9), (1, 2, 17), (1, 10, 3),\n    (2, 3, 12), (2, 11, 17), (2, 4, 14), (3, 2, 9), (3, 1, 5),\n    (3, 8, 8), (3, 4, 1), (4, 7, 12), (4, 2, 10), (4, 3, 12),\n    (4, 5, 20), (5, 9, 17), (5, 2, 5), (5, 3, 6), (5, 8, 17),\n    (5, 10, 10), (6, 7, 20), (6, 0, 19), (6, 10, 10), (7, 2, 20),\n    (8, 5, 10), (8, 4, 12), (9, 7, 13), (9, 6, 6), (9, 0, 17),\n    (10, 1, 16), (10, 5, 19), (11, 0, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 2)\nprint(max_flow)\n```"}, "230": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 2, 3), (0, 6, 12), (1, 5, 18), (2, 5, 13), (3, 0, 3), (3, 10, 1),\n    (4, 10, 12), (5, 2, 11), (5, 8, 5), (5, 6, 4), (5, 10, 11), (5, 1, 20),\n    (5, 11, 14), (6, 0, 9), (6, 8, 14), (6, 4, 6), (6, 5, 6), (7, 8, 16),\n    (8, 0, 4), (8, 2, 12), (8, 6, 4), (8, 1, 9), (8, 4, 10), (8, 11, 2),\n    (8, 5, 20), (9, 11, 14), (10, 1, 1), (10, 4, 1), (11, 6, 10), (11, 3, 4),\n    (11, 1, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(0, 3)\nprint(max_flow)\n```"}, "231": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (2, 5, 9),\n    (2, 0, 6),\n    (2, 3, 5),\n    (3, 1, 8),\n    (3, 0, 5),\n    (4, 5, 4),\n    (4, 0, 3),\n    (4, 3, 9),\n    (5, 2, 9),\n    (5, 3, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 0)\nprint(max_flow)\n```"}, "232": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 1, 7), (0, 2, 6), (0, 3, 5), (1, 0, 4), (1, 7, 10),\n    (2, 7, 2), (2, 3, 2), (3, 1, 1), (3, 2, 4), (3, 0, 4),\n    (3, 5, 9), (4, 5, 10), (5, 0, 2), (5, 3, 2), (6, 1, 8),\n    (6, 0, 9), (7, 9, 4), (8, 0, 10), (8, 7, 6), (8, 5, 9),\n    (8, 6, 10), (9, 2, 6), (9, 0, 4), (9, 4, 1), (9, 5, 4),\n    (9, 8, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 6))\n```"}, "233": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 4, 7), (0, 3, 6), (2, 7, 8), (2, 8, 2), (2, 1, 6),\n    (3, 8, 9), (3, 1, 3), (5, 2, 6), (5, 4, 7), (5, 3, 5),\n    (6, 3, 10), (7, 2, 6), (7, 4, 1), (7, 1, 6), (8, 4, 7), (8, 0, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 4))\n```"}, "234": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append([v, w])\n        self.graph[v].append([u, 0])\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v, capacity in self.graph[u]:\n                if visited[v] == False and capacity > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                for v, capacity in self.graph[parent[s]]:\n                    if v == s:\n                        path_flow = min(path_flow, capacity)\n                        break\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                for i, (vertex, capacity) in enumerate(self.graph[u]):\n                    if vertex == v:\n                        self.graph[u][i][1] -= path_flow\n                for i, (vertex, capacity) in enumerate(self.graph[v]):\n                    if vertex == u:\n                        self.graph[v][i][1] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 16, 2), (0, 15, 10), (0, 8, 10), (1, 16, 2), (1, 14, 1), (1, 2, 11),\n    (1, 11, 19), (1, 12, 3), (1, 4, 18), (2, 10, 14), (2, 9, 10), (2, 4, 4),\n    (3, 5, 13), (3, 11, 12), (3, 0, 7), (3, 15, 6), (3, 12, 18), (4, 2, 16),\n    (4, 15, 18), (5, 7, 2), (5, 16, 20), (5, 12, 7), (6, 7, 15), (6, 3, 10),\n    (7, 10, 7), (7, 6, 6), (8, 7, 3), (8, 14, 11), (8, 9, 4), (8, 2, 10),\n    (8, 1, 12), (9, 8, 5), (10, 5, 17), (10, 13, 1), (10, 12, 10), (10, 1, 4),\n    (11, 5, 15), (11, 2, 12), (11, 1, 18), (12, 7, 12), (12, 10, 8), (12, 5, 4),\n    (12, 9, 17), (12, 0, 20), (12, 8, 17), (12, 4, 17), (13, 3, 9), (13, 2, 13),\n    (13, 11, 7), (13, 1, 7), (14, 16, 19), (14, 5, 7), (14, 11, 4), (14, 6, 4),\n    (14, 8, 3), (15, 10, 10), (15, 3, 5), (15, 13, 14), (15, 2, 15), (15, 12, 6),\n    (16, 14, 17), (16, 8, 11), (16, 4, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(12, 8))\n```"}, "235": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 6, 9), (0, 10, 5), (0, 8, 7), (0, 13, 11), (0, 17, 19), (0, 15, 6), (0, 4, 10),\n    (1, 11, 14), (1, 4, 14), (2, 16, 2), (2, 17, 9), (2, 12, 9), (2, 14, 3), (3, 11, 6),\n    (3, 9, 15), (3, 17, 17), (3, 0, 7), (3, 1, 4), (4, 11, 6), (4, 9, 1), (5, 6, 18),\n    (5, 11, 19), (5, 12, 8), (5, 14, 1), (6, 8, 20), (6, 9, 10), (6, 17, 4), (6, 3, 13),\n    (6, 4, 9), (7, 11, 20), (7, 13, 5), (7, 17, 17), (7, 1, 12), (8, 6, 17), (8, 11, 10),\n    (8, 9, 5), (8, 3, 14), (8, 15, 19), (8, 12, 13), (8, 5, 15), (8, 1, 2), (9, 12, 3),\n    (9, 4, 13), (10, 7, 10), (10, 9, 2), (10, 5, 14), (10, 1, 1), (10, 14, 13), (11, 2, 12),\n    (11, 15, 12), (11, 14, 14), (12, 6, 17), (12, 17, 18), (12, 0, 6), (12, 5, 19), (12, 4, 3),\n    (12, 14, 12), (13, 17, 8), (13, 12, 3), (13, 5, 12), (14, 7, 15), (14, 17, 1), (14, 3, 16),\n    (14, 15, 6), (15, 13, 20), (15, 2, 3), (15, 4, 14), (16, 7, 5), (16, 3, 14), (16, 0, 10),\n    (16, 4, 3), (17, 11, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(10, 9))\n```"}, "236": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (1, 3, 13), (1, 0, 5), (1, 13, 18), (1, 10, 11), (1, 5, 16), (1, 2, 18),\n    (2, 8, 20), (2, 1, 15), (2, 5, 1), (3, 6, 20), (3, 11, 19), (4, 12, 14),\n    (4, 1, 14), (5, 14, 4), (5, 9, 20), (5, 7, 1), (5, 0, 16), (5, 2, 17),\n    (6, 9, 1), (8, 7, 15), (8, 3, 2), (8, 0, 3), (9, 12, 12), (9, 5, 13),\n    (10, 6, 9), (10, 0, 5), (10, 12, 7), (10, 11, 14), (11, 6, 20), (11, 12, 17),\n    (12, 7, 12), (12, 0, 11), (12, 13, 10), (12, 1, 15), (12, 4, 20), (13, 6, 9),\n    (13, 8, 17), (13, 0, 16), (13, 10, 16), (13, 2, 13), (13, 11, 3), (14, 3, 1),\n    (14, 4, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(9, 7)\nprint(max_flow)\n```"}, "237": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (1, 4, 3),\n    (2, 0, 8),\n    (3, 7, 2),\n    (3, 2, 5),\n    (5, 7, 5),\n    (5, 3, 3),\n    (6, 8, 8),\n    (7, 5, 4),\n    (7, 0, 7),\n    (8, 1, 5),\n    (8, 4, 6),\n    (8, 0, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 0))\n```"}, "238": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 17, 20), (0, 18, 16), (0, 8, 6), (0, 6, 6), (0, 7, 10),\n    (1, 4, 20), (1, 10, 1), (1, 9, 2), (1, 2, 14), (1, 7, 13),\n    (2, 1, 8), (2, 14, 17), (2, 15, 7), (3, 1, 16), (3, 14, 5),\n    (3, 11, 3), (4, 1, 4), (4, 14, 17), (4, 3, 12), (4, 15, 5),\n    (5, 16, 9), (5, 12, 13), (6, 17, 11), (6, 16, 20), (6, 14, 14),\n    (6, 10, 5), (6, 9, 3), (6, 18, 11), (6, 11, 12), (6, 12, 5),\n    (7, 17, 16), (7, 16, 14), (7, 4, 3), (7, 14, 7), (7, 8, 13),\n    (7, 6, 3), (7, 15, 2), (8, 17, 15), (8, 10, 11), (8, 3, 1),\n    (8, 2, 10), (8, 13, 13), (8, 12, 2), (8, 15, 11), (9, 17, 7),\n    (9, 16, 12), (9, 4, 13), (9, 7, 10), (10, 1, 5), (10, 17, 11),\n    (10, 9, 13), (10, 13, 20), (10, 7, 5), (10, 15, 17), (11, 8, 8),\n    (11, 5, 6), (12, 1, 17), (12, 3, 15), (12, 2, 7), (13, 10, 8),\n    (13, 3, 17), (13, 2, 11), (13, 11, 14), (13, 7, 9), (13, 0, 19),\n    (14, 3, 9), (14, 2, 2), (14, 8, 17), (14, 5, 10), (14, 12, 16),\n    (15, 17, 5), (15, 10, 6), (15, 9, 20), (15, 3, 12), (15, 11, 7),\n    (15, 12, 7), (15, 0, 9), (16, 17, 12), (16, 14, 18), (16, 3, 4),\n    (16, 18, 2), (16, 2, 5), (16, 8, 4), (16, 0, 1), (17, 6, 5),\n    (17, 11, 10), (17, 5, 17), (17, 15, 8), (18, 1, 9), (18, 16, 11),\n    (18, 14, 6), (18, 10, 11), (18, 8, 13), (18, 6, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(5, 1))\n```"}, "239": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 2, 2), (0, 3, 1), (0, 6, 10), (0, 5, 8),\n    (1, 2, 1), (1, 0, 6), (1, 6, 7), (2, 3, 7),\n    (2, 5, 4), (3, 5, 1), (3, 4, 7), (4, 2, 5),\n    (4, 1, 6), (4, 0, 4), (4, 6, 9), (5, 1, 9),\n    (5, 6, 6), (6, 5, 6), (6, 4, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(1, 2)\nprint(max_flow)\n```"}, "240": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 1, 5)\ng.add_edge(0, 4, 1)\ng.add_edge(1, 4, 5)\ng.add_edge(2, 5, 7)\ng.add_edge(2, 4, 4)\ng.add_edge(3, 1, 6)\ng.add_edge(3, 2, 2)\ng.add_edge(3, 0, 10)\ng.add_edge(4, 5, 7)\n\nmax_flow = g.edmonds_karp(3, 4)\nprint(max_flow)\n```"}, "241": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 9, 10), (0, 1, 7), (1, 4, 1), (2, 1, 10), (3, 4, 3),\n    (4, 3, 10), (5, 8, 3), (5, 3, 2), (6, 5, 5), (6, 2, 5),\n    (7, 2, 10), (7, 8, 10), (8, 5, 3), (8, 2, 4), (8, 7, 5),\n    (8, 3, 5), (9, 5, 2), (9, 1, 10), (9, 3, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 4))\n```"}, "242": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 8, 9),\n    (1, 7, 7),\n    (2, 6, 2),\n    (2, 0, 9),\n    (4, 3, 9),\n    (6, 8, 7),\n    (6, 0, 10),\n    (7, 1, 6),\n    (7, 2, 5),\n    (8, 5, 4),\n    (8, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 5)\nprint(max_flow)\n```"}, "243": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 13, 14), (0, 7, 15), (1, 4, 11), (1, 16, 18), (2, 11, 19), (2, 7, 5),\n    (2, 9, 6), (2, 0, 4), (3, 13, 2), (3, 4, 3), (3, 9, 18), (3, 0, 15),\n    (3, 16, 17), (3, 5, 17), (3, 12, 15), (4, 13, 10), (4, 1, 1), (4, 9, 20),\n    (4, 5, 16), (4, 14, 8), (5, 13, 16), (5, 1, 4), (5, 10, 9), (5, 9, 6),\n    (5, 14, 12), (5, 12, 18), (6, 11, 8), (6, 8, 11), (6, 3, 5), (6, 0, 7),\n    (6, 15, 9), (6, 12, 20), (7, 11, 13), (7, 9, 17), (7, 3, 5), (7, 15, 13),\n    (7, 16, 16), (7, 5, 3), (7, 14, 11), (8, 11, 17), (8, 9, 16), (8, 6, 14),\n    (8, 2, 12), (8, 3, 15), (8, 14, 14), (9, 13, 17), (9, 4, 16), (9, 0, 13),\n    (10, 1, 8), (11, 8, 15), (11, 15, 11), (11, 14, 10), (11, 12, 8), (12, 11, 4),\n    (12, 9, 14), (12, 3, 9), (12, 14, 4), (13, 10, 11), (13, 4, 16), (13, 15, 8),\n    (13, 12, 20), (14, 10, 1), (14, 15, 3), (14, 16, 19), (15, 4, 3), (15, 6, 5),\n    (15, 3, 7), (15, 0, 8), (16, 7, 19), (16, 6, 15), (16, 3, 13), (16, 0, 20),\n    (16, 15, 15), (16, 5, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 10))\n```"}, "244": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 3, 18), (0, 6, 9), (0, 8, 4), (0, 1, 18), (0, 7, 4), (0, 4, 5), (0, 10, 20),\n    (1, 2, 8), (2, 6, 4), (2, 8, 3), (2, 1, 19), (2, 9, 11), (2, 10, 5),\n    (3, 8, 20), (3, 7, 16), (3, 4, 8), (4, 2, 18), (4, 7, 2),\n    (5, 2, 5), (5, 9, 15), (6, 7, 20), (6, 4, 3), (6, 10, 19),\n    (7, 3, 10), (7, 4, 9), (8, 2, 11), (8, 4, 16),\n    (9, 0, 19), (9, 3, 17), (9, 8, 12), (9, 2, 3), (10, 9, 11)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 4)\nprint(max_flow)\n```"}, "245": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 5, 9),\n    (0, 6, 3),\n    (1, 3, 10),\n    (2, 5, 10),\n    (2, 6, 3),\n    (3, 6, 9),\n    (5, 1, 8),\n    (6, 5, 4),\n    (6, 3, 6),\n    (6, 7, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 3))\n```"}, "246": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 10, 8), (0, 3, 20), (0, 12, 12), (0, 2, 1), (0, 6, 9),\n    (1, 3, 15), (1, 5, 20), (1, 8, 9), (1, 0, 1), (1, 6, 12),\n    (2, 5, 10), (2, 11, 17), (2, 1, 11), (2, 8, 17), (2, 14, 7), (2, 6, 3),\n    (3, 15, 9), (3, 11, 15), (3, 6, 19),\n    (4, 10, 18), (4, 3, 14), (4, 11, 15), (4, 13, 14), (4, 6, 3),\n    (5, 11, 18), (5, 8, 9), (5, 13, 2), (5, 0, 17),\n    (6, 4, 19), (6, 15, 11), (6, 7, 1), (6, 1, 15),\n    (7, 13, 14),\n    (8, 9, 5), (8, 10, 12), (8, 3, 9), (8, 11, 9), (8, 13, 17), (8, 0, 5), (8, 6, 5),\n    (9, 4, 3), (9, 3, 13), (9, 5, 7), (9, 7, 18),\n    (10, 3, 7), (10, 15, 19), (10, 8, 10),\n    (11, 3, 20), (11, 2, 12), (11, 0, 16),\n    (12, 4, 16), (12, 5, 11), (12, 11, 15), (12, 8, 3), (12, 2, 8), (12, 14, 13),\n    (13, 3, 6), (13, 7, 5), (13, 8, 2),\n    (14, 10, 12), (14, 5, 17), (14, 8, 19),\n    (15, 5, 8), (15, 1, 5), (15, 2, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(5, 12)\nprint(max_flow)\n```"}, "247": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 7, 5), (0, 8, 16), (1, 0, 3), (2, 15, 9), (2, 11, 15), (2, 5, 16),\n    (3, 16, 14), (3, 14, 18), (3, 13, 17), (3, 7, 18), (3, 1, 15), (4, 3, 20),\n    (4, 2, 18), (4, 12, 16), (4, 8, 10), (5, 3, 3), (5, 15, 20), (5, 2, 9),\n    (5, 6, 1), (6, 10, 20), (6, 4, 18), (7, 9, 7), (7, 14, 6), (7, 1, 11),\n    (8, 11, 7), (8, 14, 11), (9, 3, 16), (9, 16, 8), (9, 13, 12), (9, 4, 20),\n    (10, 2, 8), (10, 11, 11), (10, 4, 6), (10, 0, 6), (10, 8, 13), (11, 16, 15),\n    (11, 14, 6), (12, 16, 16), (13, 9, 10), (13, 2, 17), (13, 11, 16), (13, 7, 9),\n    (14, 9, 14), (14, 11, 5), (14, 13, 8), (14, 4, 3), (15, 3, 5), (15, 13, 10),\n    (15, 12, 18), (16, 3, 19), (16, 9, 16), (16, 14, 13), (16, 13, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 5))\n```"}, "248": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 1, 15), (0, 8, 19), (0, 3, 3), (0, 9, 5), (0, 2, 5),\n    (1, 10, 4), (2, 5, 4), (3, 6, 6), (3, 8, 20), (3, 5, 8),\n    (4, 8, 14), (4, 2, 18), (5, 0, 13), (5, 6, 13), (6, 8, 1),\n    (6, 9, 18), (7, 6, 15), (7, 8, 9), (7, 5, 12), (8, 1, 20),\n    (9, 0, 7), (9, 7, 17), (9, 8, 15), (9, 4, 8), (9, 5, 15),\n    (9, 2, 19), (9, 10, 19), (10, 6, 12), (10, 3, 3), (10, 5, 20),\n    (10, 2, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 10)\nprint(max_flow)\n```"}, "249": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 9, 5), (0, 2, 17), (0, 15, 7), (0, 1, 9), (0, 3, 19), (0, 7, 18), (0, 10, 8),\n    (1, 2, 12), (1, 15, 20), (2, 8, 7), (2, 0, 17), (2, 9, 6), (2, 6, 15), (2, 3, 17),\n    (2, 7, 13), (2, 12, 12), (3, 14, 13), (3, 15, 10), (3, 4, 5), (3, 10, 10), (4, 8, 11),\n    (4, 9, 2), (4, 2, 15), (4, 3, 6), (4, 7, 5), (5, 14, 13), (5, 15, 15), (5, 11, 17),\n    (5, 7, 7), (5, 13, 20), (6, 5, 6), (6, 9, 1), (6, 11, 20), (6, 12, 16), (7, 5, 15),\n    (7, 14, 7), (8, 1, 15), (8, 11, 6), (8, 13, 12), (9, 0, 3), (9, 6, 16), (9, 13, 5),\n    (9, 12, 17), (10, 4, 19), (10, 3, 14), (10, 12, 12), (11, 5, 6), (11, 14, 1), (11, 9, 6),\n    (11, 2, 19), (11, 7, 6), (11, 12, 15), (12, 5, 11), (12, 6, 8), (12, 15, 7), (12, 11, 1),\n    (12, 13, 15), (13, 14, 7), (13, 15, 10), (13, 3, 2), (13, 11, 16), (13, 7, 4), (13, 12, 16),\n    (14, 0, 2), (14, 15, 2), (14, 3, 6), (14, 7, 3), (14, 13, 12), (14, 12, 15), (15, 14, 9),\n    (15, 1, 16), (15, 7, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 12\nsink = 8\nprint(g.edmonds_karp(source, sink))\n```"}, "250": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 1, 15), (0, 7, 19), (0, 3, 18), (0, 4, 14),\n    (1, 12, 5), (1, 5, 3), (1, 0, 16), (1, 4, 20),\n    (2, 3, 10), (2, 0, 15), (3, 11, 5), (3, 8, 17),\n    (4, 12, 14), (4, 11, 20), (4, 0, 16), (4, 14, 17),\n    (5, 6, 6), (5, 9, 16), (5, 7, 11), (5, 0, 12),\n    (5, 4, 19), (6, 1, 9), (6, 11, 6), (6, 10, 18),\n    (6, 0, 7), (7, 9, 13), (7, 5, 17), (8, 9, 19),\n    (8, 0, 4), (8, 14, 17), (9, 12, 7), (10, 9, 15),\n    (10, 5, 7), (10, 3, 12), (11, 12, 9), (11, 9, 10),\n    (11, 5, 1), (11, 8, 11), (11, 3, 17), (11, 2, 8),\n    (12, 1, 12), (12, 13, 5), (12, 8, 10), (12, 0, 5),\n    (12, 4, 15), (12, 14, 5), (13, 12, 3), (13, 11, 6),\n    (13, 8, 4), (13, 3, 18), (14, 1, 14), (14, 12, 8),\n    (14, 6, 20), (14, 9, 1), (14, 4, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(7, 9))\n```"}, "251": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 3, 18), (0, 2, 5), (1, 4, 15), (1, 3, 15), (1, 2, 1), (1, 7, 5),\n    (2, 11, 18), (2, 6, 20), (2, 10, 17), (3, 8, 2), (3, 10, 12), (3, 5, 4),\n    (5, 4, 15), (5, 10, 8), (5, 9, 9), (5, 1, 11), (5, 0, 17), (6, 11, 1),\n    (6, 7, 16), (6, 1, 5), (7, 3, 4), (8, 4, 7), (8, 3, 12), (8, 2, 1),\n    (8, 9, 5), (8, 0, 10), (9, 11, 12), (9, 4, 8), (9, 8, 7), (9, 10, 10),\n    (9, 7, 13), (9, 0, 2), (10, 3, 18), (10, 8, 1), (10, 7, 10), (11, 6, 18),\n    (11, 10, 4), (11, 9, 17), (11, 1, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 2\nsink = 1\nprint(g.edmonds_karp(source, sink))\n```"}, "252": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 5, 1), (0, 3, 5), (1, 6, 9), (1, 7, 9), (3, 0, 2),\n    (3, 9, 3), (3, 1, 3), (4, 1, 2), (5, 6, 9), (6, 9, 2),\n    (6, 1, 1), (7, 5, 7), (7, 4, 8), (7, 3, 10), (8, 6, 2),\n    (8, 3, 3), (8, 1, 7), (9, 3, 4), (9, 7, 7)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 0))\n```"}, "253": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 6, 7), (0, 9, 1), (1, 4, 6), (1, 2, 10), (2, 3, 18), (2, 10, 7),\n    (3, 0, 18), (3, 7, 19), (4, 6, 8), (4, 2, 19), (4, 10, 8), (5, 6, 18),\n    (5, 3, 16), (6, 7, 8), (6, 2, 14), (6, 10, 5), (7, 4, 16), (7, 6, 13),\n    (7, 8, 11), (7, 9, 14), (7, 10, 8), (8, 2, 17), (9, 6, 9), (9, 2, 16),\n    (9, 3, 14), (9, 10, 18), (10, 7, 4), (10, 8, 18), (10, 9, 17), (10, 5, 6),\n    (10, 1, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 9)\nprint(max_flow)\n```"}, "254": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 14, 19), (0, 13, 16), (0, 18, 20), (0, 12, 14), (1, 0, 12),\n    (2, 4, 5), (2, 15, 4), (2, 3, 10), (2, 13, 4), (2, 1, 13),\n    (2, 7, 17), (2, 12, 12), (3, 2, 18), (3, 17, 5), (3, 6, 8),\n    (3, 0, 15), (4, 13, 18), (4, 10, 12), (4, 7, 17), (5, 4, 20),\n    (5, 13, 1), (6, 4, 16), (6, 14, 18), (6, 9, 6), (6, 5, 20),\n    (6, 12, 10), (7, 4, 14), (7, 15, 17), (7, 11, 18), (8, 2, 3),\n    (8, 16, 5), (8, 4, 11), (8, 3, 3), (8, 9, 11), (8, 18, 6),\n    (9, 2, 13), (9, 17, 14), (9, 8, 11), (9, 10, 4), (9, 1, 16),\n    (9, 11, 12), (9, 7, 11), (9, 18, 11), (10, 5, 20), (11, 6, 10),\n    (11, 15, 9), (11, 10, 15), (11, 1, 4), (11, 5, 2), (12, 4, 17),\n    (12, 13, 14), (12, 11, 5), (12, 18, 9), (12, 5, 15), (13, 8, 11),\n    (13, 15, 1), (13, 11, 1), (13, 7, 14), (13, 18, 15), (13, 12, 17),\n    (14, 17, 15), (14, 13, 20), (14, 11, 20), (14, 18, 2), (14, 5, 17),\n    (15, 2, 12), (15, 16, 10), (15, 6, 17), (15, 8, 14), (15, 0, 9),\n    (15, 3, 20), (15, 7, 2), (15, 9, 11), (15, 18, 6), (15, 5, 20),\n    (16, 0, 12), (16, 3, 11), (16, 1, 9), (17, 2, 18), (17, 3, 20),\n    (17, 9, 9), (18, 2, 1), (18, 4, 10), (18, 10, 11), (18, 1, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 13))\n```"}, "255": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 1, 14), (0, 10, 14), (0, 6, 6), (1, 9, 8), (2, 6, 5), (2, 3, 18),\n    (3, 5, 11), (3, 1, 16), (3, 0, 15), (3, 4, 10), (3, 2, 15), (3, 7, 13),\n    (4, 5, 17), (5, 9, 19), (5, 2, 20), (6, 1, 15), (6, 11, 7), (6, 3, 11),\n    (7, 5, 5), (7, 1, 11), (7, 10, 2), (7, 8, 9), (8, 0, 1), (8, 3, 17),\n    (9, 1, 3), (9, 8, 3), (9, 3, 15), (10, 5, 13), (10, 1, 20), (11, 5, 12),\n    (11, 1, 19), (11, 2, 3), (11, 8, 10), (11, 7, 20)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 6\nsink = 9\nprint(g.edmonds_karp(source, sink))\n```"}, "256": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 5, 1)\ng.add_edge(0, 2, 5)\ng.add_edge(1, 3, 8)\ng.add_edge(2, 1, 4)\ng.add_edge(4, 3, 4)\ng.add_edge(4, 5, 10)\ng.add_edge(4, 1, 3)\ng.add_edge(5, 3, 7)\n\nprint(g.edmonds_karp(4, 3))\n```"}, "257": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 9, 10), (0, 1, 8), (0, 2, 11), (0, 4, 9), (0, 8, 8),\n    (1, 7, 15), (1, 5, 3), (1, 0, 2), (1, 11, 6),\n    (2, 6, 2), (2, 1, 1), (2, 7, 3), (2, 4, 14), (2, 0, 20),\n    (3, 6, 11), (3, 8, 3),\n    (4, 2, 5), (4, 8, 20), (4, 12, 13),\n    (5, 1, 20), (5, 7, 11), (5, 0, 8), (5, 11, 20),\n    (6, 10, 20), (6, 4, 18), (6, 5, 20), (6, 3, 6),\n    (7, 9, 20), (7, 6, 19), (7, 4, 17), (7, 5, 8),\n    (8, 6, 2), (8, 12, 13),\n    (9, 2, 20), (9, 5, 1), (9, 3, 10),\n    (10, 4, 4), (10, 5, 4), (10, 3, 16),\n    (11, 7, 20), (11, 4, 14),\n    (12, 4, 10), (12, 5, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(3, 6)\nprint(max_flow)\n```"}, "258": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (0, 2, 3),\n    (1, 5, 4),\n    (1, 0, 3),\n    (1, 7, 3),\n    (2, 4, 3),\n    (3, 4, 9),\n    (3, 0, 3),\n    (3, 1, 4),\n    (5, 6, 7),\n    (6, 3, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(6, 4))\n```"}, "259": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 10, 10), (0, 5, 14), (0, 14, 3), (0, 2, 20), (0, 15, 16), (0, 7, 6), (0, 1, 9),\n    (1, 6, 10), (1, 13, 3), (1, 18, 12), (1, 5, 9), (1, 11, 11), (1, 3, 17), (1, 14, 9),\n    (2, 10, 20), (2, 11, 14), (2, 15, 8), (2, 7, 8),\n    (3, 13, 18), (3, 8, 11), (3, 4, 3), (3, 17, 6), (3, 16, 3),\n    (4, 10, 4), (4, 9, 5), (4, 5, 10), (4, 2, 18), (4, 7, 6), (4, 12, 6),\n    (5, 10, 4), (5, 13, 2), (5, 8, 1), (5, 1, 18),\n    (6, 13, 7), (6, 18, 16), (6, 11, 1), (6, 15, 6), (6, 19, 12),\n    (7, 8, 12), (7, 11, 19), (7, 2, 10), (7, 12, 4),\n    (8, 18, 19), (8, 3, 13), (8, 7, 5),\n    (9, 10, 2), (9, 18, 2), (9, 4, 4), (9, 16, 2), (9, 1, 11),\n    (10, 5, 5),\n    (11, 10, 17), (11, 13, 1), (11, 8, 17), (11, 3, 11), (11, 2, 18),\n    (12, 6, 7), (12, 2, 8), (12, 17, 3), (12, 7, 3),\n    (13, 10, 6), (13, 3, 2), (13, 7, 12),\n    (14, 13, 9), (14, 18, 10), (14, 5, 16), (14, 3, 20), (14, 19, 17),\n    (15, 18, 19), (15, 5, 19), (15, 3, 17), (15, 14, 5), (15, 17, 15),\n    (16, 10, 18), (16, 1, 20),\n    (17, 9, 13), (17, 18, 14), (17, 5, 11), (17, 11, 15), (17, 19, 6), (17, 16, 1), (17, 0, 10),\n    (18, 10, 14), (18, 13, 17), (18, 5, 4), (18, 3, 4), (18, 1, 13),\n    (19, 10, 3), (19, 4, 11), (19, 3, 8), (19, 15, 1), (19, 1, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(10, 3)\nprint(max_flow)\n```"}, "260": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 13, 12), (0, 12, 10), (0, 5, 1), (0, 17, 16), (0, 18, 20),\n    (1, 9, 8), (1, 10, 9), (2, 16, 16), (2, 3, 15), (2, 12, 4),\n    (2, 8, 6), (2, 7, 18), (2, 4, 19), (3, 13, 4), (3, 16, 17),\n    (3, 14, 7), (3, 18, 15), (3, 15, 4), (3, 10, 7), (4, 12, 15),\n    (4, 2, 5), (4, 9, 5), (4, 17, 2), (5, 12, 4), (5, 2, 8),\n    (5, 4, 3), (6, 13, 1), (6, 3, 20), (6, 12, 15), (6, 7, 17),\n    (6, 11, 15), (7, 16, 1), (7, 6, 13), (7, 2, 17), (7, 9, 14),\n    (7, 1, 5), (7, 0, 13), (7, 10, 18), (8, 6, 3), (8, 3, 4),\n    (8, 2, 14), (8, 4, 19), (9, 14, 9), (9, 1, 8), (9, 15, 5),\n    (10, 2, 8), (10, 14, 6), (10, 8, 20), (10, 9, 8), (10, 11, 10),\n    (11, 3, 3), (11, 14, 20), (11, 5, 17), (12, 6, 15), (12, 3, 3),\n    (12, 7, 9), (12, 11, 13), (12, 1, 15), (12, 10, 2), (13, 3, 1),\n    (13, 9, 15), (13, 4, 2), (13, 17, 10), (14, 8, 8), (14, 4, 19),\n    (14, 17, 6), (15, 16, 15), (15, 3, 4), (15, 12, 4), (15, 14, 7),\n    (15, 8, 15), (15, 0, 13), (16, 2, 17), (16, 7, 16), (16, 11, 20),\n    (16, 18, 17), (16, 15, 10), (17, 16, 1), (17, 4, 16), (17, 11, 18),\n    (17, 18, 10), (17, 1, 13), (18, 13, 14), (18, 6, 4), (18, 3, 15),\n    (18, 8, 8), (18, 7, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(3, 5))\n```"}, "261": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 12, 10), (0, 10, 17), (0, 9, 17), (1, 3, 2), (1, 7, 12),\n    (2, 4, 5), (3, 12, 1), (3, 13, 1), (3, 11, 6), (3, 7, 15),\n    (3, 5, 11), (4, 1, 17), (4, 13, 2), (4, 9, 15), (5, 12, 13),\n    (5, 1, 10), (5, 3, 12), (5, 0, 17), (5, 13, 1), (5, 11, 18),\n    (5, 7, 10), (7, 3, 16), (7, 13, 13), (7, 14, 1), (7, 8, 13),\n    (8, 12, 1), (8, 1, 7), (8, 3, 6), (8, 0, 7), (9, 6, 2),\n    (9, 1, 11), (9, 3, 18), (9, 0, 10), (9, 4, 11), (9, 7, 4),\n    (10, 1, 8), (10, 8, 2), (11, 6, 1), (11, 3, 18), (11, 13, 17),\n    (11, 7, 1), (12, 0, 1), (13, 1, 2), (13, 5, 10)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 12))\n```"}, "262": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\nedges = [\n    (0, 4, 9),\n    (0, 1, 4),\n    (0, 3, 4),\n    (1, 0, 9),\n    (1, 2, 3),\n    (2, 0, 3),\n    (2, 4, 10),\n    (2, 3, 1),\n    (3, 1, 4),\n    (4, 2, 3),\n    (4, 3, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 3))\n```"}, "263": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(15)\nedges = [\n    (0, 4, 11), (0, 2, 18), (0, 3, 13), (0, 11, 14), (0, 13, 2),\n    (1, 4, 6), (1, 2, 7), (1, 6, 15), (1, 14, 2), (2, 5, 18),\n    (2, 8, 10), (2, 13, 14), (3, 12, 10), (3, 1, 18), (3, 6, 12),\n    (3, 13, 13), (4, 2, 14), (4, 8, 7), (4, 0, 1), (4, 6, 7),\n    (4, 13, 13), (5, 0, 1), (5, 10, 18), (6, 3, 18), (6, 11, 10),\n    (7, 2, 4), (7, 9, 9), (7, 1, 13), (7, 13, 19), (8, 2, 2),\n    (8, 0, 14), (8, 9, 15), (8, 10, 5), (8, 13, 6), (9, 2, 4),\n    (9, 5, 18), (9, 14, 14), (10, 8, 18), (10, 0, 12), (10, 6, 7),\n    (11, 5, 16), (11, 1, 19), (12, 5, 7), (12, 8, 11), (12, 1, 13),\n    (13, 5, 13), (14, 3, 20), (14, 9, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 12))\n```"}, "264": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\nedges = [\n    (0, 1, 5),\n    (1, 5, 3),\n    (1, 4, 3),\n    (2, 0, 2),\n    (2, 3, 2),\n    (2, 1, 4),\n    (3, 2, 10),\n    (4, 2, 1),\n    (4, 1, 3),\n    (5, 0, 6),\n    (5, 1, 2),\n    (5, 4, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 3\nsink = 4\nprint(g.edmonds_karp(source, sink))\n```"}, "265": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(18)\nedges = [\n    (0, 9, 12), (0, 7, 15), (0, 16, 13), (0, 13, 2),\n    (1, 7, 6), (1, 12, 12), (1, 11, 13),\n    (2, 10, 19), (2, 0, 1), (2, 17, 14),\n    (3, 9, 16), (3, 0, 7), (3, 2, 20), (3, 8, 17), (3, 15, 7),\n    (4, 3, 19), (4, 7, 16), (4, 2, 5), (4, 16, 2), (4, 17, 7),\n    (5, 9, 7),\n    (6, 3, 4), (6, 1, 17), (6, 15, 10),\n    (7, 9, 7), (7, 4, 20), (7, 10, 14), (7, 13, 7), (7, 17, 8),\n    (8, 3, 8), (8, 4, 11), (8, 10, 18),\n    (9, 3, 20), (9, 15, 14), (9, 13, 1),\n    (10, 6, 3), (10, 2, 9), (10, 12, 7), (10, 5, 6),\n    (11, 9, 15), (11, 2, 16), (11, 8, 19), (11, 16, 7), (11, 5, 17), (11, 17, 13),\n    (12, 4, 15), (12, 13, 13),\n    (13, 3, 18), (13, 14, 12), (13, 6, 1), (13, 0, 13), (13, 8, 4), (13, 11, 5),\n    (14, 7, 19), (14, 8, 16), (14, 5, 7), (14, 15, 20), (14, 17, 20),\n    (15, 6, 18), (15, 8, 4), (15, 12, 1), (15, 5, 20),\n    (16, 9, 2), (16, 1, 15), (16, 14, 5), (16, 12, 2), (16, 17, 16),\n    (17, 4, 7), (17, 0, 9), (17, 16, 19), (17, 15, 12)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 16))\n```"}, "266": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    if ind == t:\n                        parent[ind] = u\n                        return True\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(12)\nedges = [\n    (0, 9, 7), (0, 10, 15), (1, 10, 7), (1, 6, 6), (1, 11, 15), (1, 7, 16),\n    (2, 3, 17), (2, 9, 19), (2, 6, 18), (2, 0, 18), (2, 8, 13), (3, 6, 20),\n    (4, 0, 10), (4, 1, 11), (5, 9, 5), (5, 6, 4), (5, 0, 12), (5, 11, 6),\n    (5, 8, 11), (6, 8, 4), (6, 7, 8), (6, 1, 18), (7, 5, 7), (7, 8, 16),\n    (9, 5, 16), (9, 2, 16), (9, 1, 4), (10, 0, 12), (10, 8, 10), (11, 10, 12),\n    (11, 4, 2), (11, 1, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 11))\n```"}, "267": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 7, 5), (0, 9, 1), (1, 9, 7), (1, 5, 3), (2, 1, 1), (2, 5, 4),\n    (2, 3, 2), (3, 9, 2), (4, 1, 3), (4, 6, 1), (4, 7, 5), (4, 2, 9),\n    (5, 4, 9), (5, 8, 1), (6, 4, 3), (6, 7, 3), (6, 9, 3), (8, 1, 8),\n    (8, 7, 5), (8, 0, 4), (8, 5, 10), (8, 3, 6), (9, 1, 5), (9, 0, 8),\n    (9, 3, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(9, 3))\n```"}, "268": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(5)\ng.add_edge(0, 3, 5)\ng.add_edge(1, 0, 3)\ng.add_edge(2, 1, 7)\ng.add_edge(3, 0, 6)\ng.add_edge(3, 2, 10)\ng.add_edge(4, 0, 5)\ng.add_edge(4, 3, 10)\n\nprint(g.edmonds_karp(4, 0))\n```"}, "269": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 4, 1), (0, 8, 4), (1, 5, 7), (1, 9, 6), (2, 5, 10),\n    (2, 8, 4), (2, 9, 9), (3, 1, 7), (3, 2, 2), (4, 6, 1),\n    (4, 1, 6), (5, 6, 3), (5, 1, 8), (5, 2, 10), (7, 4, 5),\n    (7, 6, 5), (8, 0, 7), (9, 7, 10), (9, 8, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 6\nprint(g.edmonds_karp(source, sink))\n```"}, "270": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 5, 4)\ng.add_edge(1, 0, 4)\ng.add_edge(1, 3, 6)\ng.add_edge(2, 3, 5)\ng.add_edge(3, 1, 6)\ng.add_edge(3, 5, 2)\ng.add_edge(3, 2, 5)\ng.add_edge(4, 3, 8)\ng.add_edge(5, 2, 1)\n\nprint(g.edmonds_karp(1, 2))\n```"}, "271": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n        return visited[t]\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (1, 3, 12), (1, 4, 16), (1, 5, 7), (1, 10, 5), (1, 9, 12), (1, 12, 18), (1, 0, 10),\n    (2, 5, 10), (3, 4, 5), (3, 9, 12), (4, 2, 8), (4, 12, 11), (5, 7, 4), (5, 9, 6),\n    (5, 8, 16), (5, 0, 12), (6, 7, 18), (6, 2, 9), (6, 0, 5), (7, 9, 16), (7, 12, 9),\n    (7, 0, 11), (7, 11, 15), (8, 1, 15), (9, 0, 5), (10, 6, 10), (10, 11, 11), (11, 3, 9),\n    (11, 5, 16), (11, 10, 1), (12, 3, 12), (12, 4, 19), (12, 5, 15), (12, 8, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 1\nsink = 9\n\nprint(g.edmonds_karp(source, sink))\n```"}, "272": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 7, 4), (0, 4, 6), (0, 5, 4), (0, 2, 5),\n    (3, 7, 8), (3, 5, 9), (4, 0, 4), (4, 3, 10),\n    (4, 8, 4), (4, 1, 7), (6, 7, 4), (6, 3, 7),\n    (6, 8, 6), (6, 1, 7), (7, 0, 3), (8, 2, 2)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(6, 2)\nprint(max_flow)\n```"}, "273": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 6, 5),\n    (1, 2, 4),\n    (1, 0, 3),\n    (1, 9, 6),\n    (2, 1, 4),\n    (2, 9, 1),\n    (3, 0, 9),\n    (3, 1, 1),\n    (3, 4, 4),\n    (3, 6, 7),\n    (4, 8, 6),\n    (4, 3, 1),\n    (4, 9, 5),\n    (6, 7, 2),\n    (7, 4, 8),\n    (9, 6, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 9))\n```"}, "274": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(19)\nedges = [\n    (0, 5, 6), (0, 3, 20), (0, 9, 3), (0, 14, 8), (0, 12, 18), (0, 2, 8),\n    (1, 5, 4), (1, 16, 15), (2, 11, 10), (2, 3, 9), (2, 18, 4), (2, 7, 1),\n    (2, 9, 6), (2, 15, 19), (2, 4, 11), (2, 16, 15), (2, 1, 18), (3, 16, 12),\n    (4, 11, 10), (4, 5, 6), (4, 3, 18), (4, 9, 1), (4, 15, 15), (4, 14, 13),\n    (4, 17, 14), (4, 12, 4), (4, 8, 11), (5, 11, 9), (5, 18, 17), (5, 7, 3),\n    (5, 4, 17), (6, 13, 10), (6, 10, 18), (6, 16, 14), (6, 1, 15), (7, 13, 14),\n    (7, 9, 1), (7, 4, 13), (7, 2, 15), (8, 11, 19), (8, 5, 2), (8, 6, 3),\n    (8, 15, 11), (8, 14, 13), (8, 16, 20), (9, 3, 7), (9, 18, 9), (9, 0, 12),\n    (9, 4, 9), (9, 2, 4), (9, 1, 6), (10, 13, 16), (10, 5, 16), (10, 3, 16),\n    (10, 18, 13), (10, 0, 7), (10, 6, 10), (10, 4, 18), (10, 2, 17), (10, 8, 13),\n    (11, 14, 8), (11, 12, 5), (11, 8, 14), (12, 6, 8), (12, 14, 18), (12, 2, 19),\n    (12, 10, 16), (12, 16, 3), (13, 11, 4), (13, 5, 15), (13, 9, 15), (13, 12, 16),\n    (13, 2, 16), (14, 5, 5), (14, 9, 17), (14, 6, 14), (14, 4, 13), (14, 17, 14),\n    (14, 12, 15), (14, 2, 2), (15, 0, 5), (15, 9, 7), (15, 17, 6), (15, 8, 9),\n    (15, 1, 19), (16, 5, 2), (16, 6, 2), (16, 4, 3), (17, 18, 4), (17, 14, 20),\n    (17, 12, 7), (17, 10, 10), (18, 11, 16), (18, 7, 1), (18, 15, 9), (18, 14, 15),\n    (18, 17, 16), (18, 2, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(14, 18)\nprint(max_flow)\n```"}, "275": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 2, 10)\ng.add_edge(0, 4, 2)\ng.add_edge(1, 5, 4)\ng.add_edge(1, 3, 1)\ng.add_edge(3, 2, 4)\ng.add_edge(3, 4, 9)\ng.add_edge(4, 2, 3)\ng.add_edge(4, 3, 5)\ng.add_edge(5, 3, 9)\n\nprint(g.edmonds_karp(1, 2))\n```"}, "276": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(6)\ng.add_edge(0, 5, 7)\ng.add_edge(0, 1, 3)\ng.add_edge(1, 5, 5)\ng.add_edge(1, 2, 10)\ng.add_edge(1, 4, 1)\ng.add_edge(1, 3, 5)\ng.add_edge(2, 0, 1)\ng.add_edge(3, 1, 5)\ng.add_edge(4, 1, 6)\ng.add_edge(5, 2, 3)\ng.add_edge(5, 4, 6)\n\nprint(g.edmonds_karp(2, 4))\n```"}, "277": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(17)\nedges = [\n    (0, 11, 17), (0, 1, 8), (0, 14, 12), (1, 3, 11), (1, 14, 1), (1, 4, 7),\n    (1, 9, 9), (2, 1, 16), (2, 3, 20), (2, 14, 18), (2, 4, 3), (2, 8, 18),\n    (2, 9, 7), (2, 10, 13), (3, 12, 14), (3, 1, 17), (3, 14, 8), (3, 7, 13),\n    (3, 6, 18), (3, 13, 4), (4, 0, 19), (4, 1, 12), (4, 6, 14), (4, 5, 17),\n    (4, 13, 14), (5, 15, 7), (5, 8, 5), (5, 13, 3), (6, 14, 7), (7, 1, 12),\n    (7, 16, 9), (7, 13, 2), (8, 11, 8), (8, 4, 18), (8, 10, 1), (8, 16, 7),\n    (9, 11, 8), (9, 1, 17), (9, 4, 17), (9, 6, 15), (9, 5, 17), (9, 13, 1),\n    (10, 0, 13), (10, 2, 17), (10, 7, 17), (10, 6, 6), (11, 3, 1), (11, 4, 2),\n    (11, 8, 12), (11, 10, 17), (12, 11, 2), (12, 15, 15), (12, 2, 8), (12, 14, 5),\n    (12, 4, 7), (12, 9, 2), (13, 15, 16), (13, 14, 14), (13, 8, 5), (14, 2, 6),\n    (14, 3, 18), (14, 6, 13), (14, 9, 19), (14, 16, 20), (15, 12, 9), (15, 1, 2),\n    (15, 14, 1), (15, 10, 14), (15, 13, 10), (16, 0, 15), (16, 7, 12), (16, 6, 16),\n    (16, 8, 6)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(4, 13))\n```"}, "278": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(14)\nedges = [\n    (0, 11, 12), (0, 3, 9), (0, 9, 2), (1, 10, 4), (1, 5, 3), (1, 4, 8),\n    (2, 11, 3), (2, 1, 1), (2, 13, 20), (2, 7, 14), (2, 4, 5), (3, 2, 7),\n    (3, 10, 9), (3, 0, 6), (3, 13, 2), (3, 7, 8), (3, 12, 4), (3, 9, 20),\n    (4, 11, 11), (4, 10, 1), (4, 12, 8), (4, 3, 16), (5, 2, 11), (5, 10, 20),\n    (5, 8, 12), (6, 1, 19), (6, 13, 4), (7, 11, 3), (7, 12, 2), (8, 1, 9),\n    (8, 5, 18), (8, 12, 17), (8, 3, 3), (8, 9, 11), (9, 7, 18), (9, 3, 10),\n    (10, 2, 1), (10, 3, 4), (10, 9, 8), (11, 13, 20), (11, 4, 6), (12, 9, 5),\n    (13, 11, 10), (13, 2, 4), (13, 0, 10), (13, 8, 7), (13, 12, 15), (13, 3, 6),\n    (13, 4, 16)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 8\nsink = 5\nprint(g.edmonds_karp(source, sink))\n```"}, "279": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(9)\nedges = [\n    (0, 3, 6), (0, 8, 9), (1, 8, 5), (2, 5, 1), (2, 8, 6),\n    (3, 6, 7), (3, 7, 7), (4, 3, 10), (4, 1, 5), (4, 8, 8),\n    (4, 0, 10), (5, 3, 3), (5, 1, 3), (5, 0, 10), (7, 2, 10),\n    (8, 0, 3)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(2, 8))\n```"}, "280": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\ng.add_edge(0, 1, 1)\ng.add_edge(0, 7, 3)\ng.add_edge(1, 3, 10)\ng.add_edge(1, 5, 4)\ng.add_edge(2, 6, 4)\ng.add_edge(3, 4, 10)\ng.add_edge(3, 7, 3)\ng.add_edge(4, 5, 6)\ng.add_edge(4, 1, 5)\ng.add_edge(4, 7, 2)\ng.add_edge(5, 2, 5)\ng.add_edge(6, 5, 2)\n\nprint(g.edmonds_karp(0, 7))\n```"}, "281": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def fordFulkerson(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float(\"Inf\")\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(20)\nedges = [\n    (0, 1, 9), (1, 7, 6), (1, 10, 1), (1, 17, 13), (2, 3, 11), (2, 8, 7),\n    (3, 5, 9), (3, 12, 19), (3, 4, 1), (3, 9, 4), (4, 18, 3), (4, 6, 9),\n    (4, 12, 7), (4, 8, 10), (4, 17, 8), (5, 19, 6), (5, 3, 15), (5, 4, 11),\n    (5, 17, 17), (6, 5, 1), (6, 8, 7), (7, 1, 14), (7, 14, 20), (7, 5, 7),\n    (7, 16, 16), (8, 15, 6), (8, 18, 1), (8, 11, 9), (8, 2, 15), (8, 9, 8),\n    (8, 17, 6), (9, 14, 14), (9, 6, 16), (9, 0, 6), (9, 7, 14), (10, 1, 11),\n    (10, 5, 14), (10, 19, 13), (10, 11, 14), (10, 3, 6), (10, 16, 17),\n    (10, 4, 18), (10, 8, 20), (11, 13, 3), (11, 16, 9), (11, 7, 9),\n    (11, 17, 13), (12, 1, 2), (12, 14, 16), (12, 15, 13), (12, 19, 15),\n    (12, 18, 4), (12, 6, 14), (12, 9, 9), (13, 5, 17), (13, 6, 6),\n    (13, 12, 15), (13, 3, 2), (13, 4, 10), (13, 2, 19), (13, 0, 10),\n    (14, 6, 9), (14, 12, 17), (14, 3, 12), (14, 0, 4), (15, 1, 11),\n    (15, 14, 10), (15, 19, 7), (15, 13, 10), (15, 3, 13), (15, 9, 18),\n    (16, 15, 11), (16, 11, 11), (16, 2, 15), (16, 0, 14), (16, 17, 17),\n    (17, 18, 12), (17, 6, 16), (17, 13, 19), (17, 8, 5), (17, 0, 11),\n    (17, 7, 14), (18, 14, 16), (18, 11, 5), (18, 16, 11), (18, 0, 11),\n    (18, 10, 19), (19, 1, 12), (19, 14, 10), (19, 12, 19), (19, 3, 2),\n    (19, 2, 6), (19, 8, 10), (19, 10, 14), (19, 9, 10)\n]\n\nfor u, v, w in edges:\n    g.addEdge(u, v, w)\n\nsource = 17\nsink = 14\nprint(g.fordFulkerson(source, sink))\n```"}, "282": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(10)\nedges = [\n    (0, 8, 9), (1, 8, 3), (1, 4, 4), (2, 6, 9), (2, 8, 8), (2, 7, 2),\n    (3, 5, 2), (3, 0, 6), (3, 1, 3), (4, 0, 7), (5, 2, 7), (5, 0, 9),\n    (6, 3, 6), (7, 1, 2), (8, 2, 1), (9, 5, 3), (9, 4, 5), (9, 3, 4), (9, 7, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 0)\nprint(max_flow)\n```"}, "283": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 3, 15), (0, 4, 8), (0, 8, 4), (0, 11, 17), (0, 12, 1),\n    (1, 3, 16), (1, 14, 14), (1, 11, 5), (2, 14, 14), (2, 12, 8),\n    (2, 7, 1), (3, 6, 16), (3, 1, 20), (3, 0, 9), (3, 13, 15),\n    (4, 1, 9), (4, 9, 13), (4, 15, 2), (4, 14, 20), (4, 11, 5),\n    (4, 2, 17), (5, 6, 20), (5, 1, 20), (5, 15, 19), (5, 3, 16),\n    (5, 10, 17), (6, 15, 11), (6, 3, 9), (6, 13, 1), (7, 4, 11),\n    (7, 14, 12), (7, 11, 3), (7, 12, 18), (7, 0, 5), (7, 13, 3),\n    (8, 15, 10), (8, 14, 2), (9, 3, 2), (9, 14, 17), (9, 12, 15),\n    (9, 2, 5), (10, 6, 2), (10, 9, 9), (10, 14, 4), (10, 11, 18),\n    (10, 12, 11), (10, 7, 3), (11, 9, 15), (11, 12, 3), (12, 6, 6),\n    (12, 0, 14), (12, 10, 11), (13, 1, 11), (13, 9, 20), (13, 8, 19),\n    (13, 0, 14), (13, 2, 15), (14, 6, 20), (14, 1, 4), (14, 12, 1),\n    (15, 9, 17), (15, 11, 1), (15, 12, 9)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 14\nsink = 12\nprint(g.edmonds_karp(source, sink))\n```"}, "284": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(16)\nedges = [\n    (0, 8, 10), (0, 3, 9), (0, 13, 18), (0, 14, 15),\n    (1, 8, 4), (1, 12, 3), (1, 7, 4), (2, 8, 20),\n    (2, 4, 1), (3, 9, 9), (3, 15, 9), (3, 12, 15),\n    (3, 7, 7), (3, 4, 13), (4, 0, 11), (4, 10, 15),\n    (5, 0, 20), (5, 15, 7), (5, 12, 11), (5, 6, 12),\n    (5, 11, 18), (6, 2, 5), (6, 1, 15), (6, 12, 9),\n    (6, 7, 11), (7, 10, 2), (7, 12, 15), (7, 13, 19),\n    (7, 6, 17), (7, 4, 16), (8, 9, 4), (9, 3, 2),\n    (9, 15, 15), (9, 10, 4), (9, 13, 19), (9, 11, 19),\n    (9, 14, 17), (10, 11, 5), (11, 5, 8), (11, 6, 16),\n    (11, 4, 18), (12, 9, 13), (12, 2, 3), (12, 15, 8),\n    (12, 1, 14), (12, 4, 9), (12, 11, 5), (12, 14, 18),\n    (13, 0, 9), (13, 10, 16), (13, 14, 17), (14, 3, 5),\n    (14, 15, 5), (14, 5, 18), (14, 6, 18), (15, 5, 13)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(2, 1)\nprint(max_flow)\n```"}, "285": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(8)\nedges = [\n    (1, 6, 10),\n    (3, 0, 6),\n    (4, 0, 6),\n    (5, 6, 5),\n    (5, 1, 1),\n    (6, 1, 2),\n    (7, 5, 7),\n    (7, 4, 5),\n    (7, 1, 10),\n    (7, 0, 1)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(7, 1))\n```"}, "286": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(13)\nedges = [\n    (0, 2, 7), (0, 11, 20), (0, 12, 2),\n    (1, 5, 4), (1, 6, 9), (1, 8, 5),\n    (2, 4, 8), (2, 9, 7),\n    (3, 7, 11), (3, 6, 8), (3, 8, 1),\n    (4, 7, 20), (4, 8, 16),\n    (5, 2, 19),\n    (6, 7, 13), (6, 4, 3), (6, 0, 3), (6, 12, 15),\n    (7, 11, 3), (7, 10, 2), (7, 0, 4),\n    (8, 1, 4), (8, 2, 4), (8, 11, 18), (8, 9, 5),\n    (9, 2, 3), (9, 3, 7),\n    (11, 2, 4), (11, 10, 8), (11, 4, 7), (11, 6, 2), (11, 8, 1),\n    (12, 10, 8), (12, 7, 16), (12, 4, 7), (12, 8, 14)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nsource = 11\nsink = 5\nprint(g.edmonds_karp(source, sink))\n```"}, "287": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 11, 10), (0, 5, 2), (0, 10, 3), (0, 9, 11),\n    (1, 4, 18), (1, 10, 18), (1, 12, 5), (1, 9, 14),\n    (1, 0, 16), (2, 5, 18), (2, 10, 19), (3, 4, 17),\n    (3, 15, 14), (3, 13, 13), (3, 12, 16), (3, 9, 2),\n    (4, 11, 6), (4, 5, 12), (4, 15, 19), (4, 10, 2),\n    (4, 12, 13), (4, 6, 3), (4, 0, 16), (5, 11, 15),\n    (5, 4, 2), (5, 13, 5), (5, 16, 5), (6, 15, 16),\n    (6, 14, 14), (7, 13, 10), (8, 7, 13), (8, 3, 2),\n    (8, 1, 4), (9, 4, 18), (9, 10, 19), (9, 8, 18),\n    (10, 3, 10), (10, 4, 1), (10, 15, 16), (10, 14, 6),\n    (10, 12, 7), (11, 2, 13), (11, 3, 1), (11, 15, 14),\n    (12, 2, 5), (12, 8, 7), (12, 6, 14), (12, 1, 1),\n    (13, 11, 15), (13, 2, 12), (13, 16, 5), (13, 8, 10),\n    (13, 6, 2), (13, 1, 20), (14, 11, 10), (14, 2, 8),\n    (14, 5, 4), (14, 16, 20), (14, 12, 14), (14, 9, 15),\n    (14, 1, 17), (15, 5, 16), (15, 3, 3), (15, 4, 4),\n    (15, 13, 16), (15, 9, 1), (16, 7, 12), (16, 11, 15),\n    (16, 2, 19), (16, 3, 3), (16, 15, 3), (16, 9, 15)\n]\n\ng = Graph(17)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(13, 6))\n```"}, "288": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    if v == t:\n                        parent[v] = u\n                        return True\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\nedges = [\n    (0, 13, 3), (0, 16, 1), (0, 14, 9), (1, 10, 17), (1, 15, 11),\n    (2, 0, 19), (2, 12, 12), (2, 4, 9), (2, 8, 17), (2, 17, 8),\n    (3, 9, 15), (3, 12, 6), (3, 14, 6), (3, 17, 3), (4, 8, 17),\n    (4, 6, 15), (4, 11, 17), (4, 17, 16), (5, 10, 12), (5, 3, 20),\n    (5, 14, 15), (5, 7, 7), (5, 2, 9), (6, 13, 1), (6, 16, 6),\n    (6, 14, 10), (6, 18, 19), (6, 2, 1), (6, 1, 15), (6, 5, 9),\n    (7, 16, 13), (7, 8, 9), (7, 11, 15), (7, 17, 18), (8, 13, 16),\n    (8, 12, 5), (8, 15, 6), (8, 7, 18), (8, 1, 6), (8, 11, 16),\n    (8, 17, 15), (9, 15, 10), (9, 8, 13), (9, 5, 3), (10, 3, 9),\n    (10, 14, 16), (10, 4, 1), (10, 6, 5), (10, 17, 19), (11, 9, 20),\n    (11, 19, 3), (11, 13, 19), (12, 16, 14), (12, 6, 8), (13, 9, 13),\n    (13, 12, 6), (13, 18, 11), (13, 7, 14), (13, 6, 3), (14, 3, 7),\n    (14, 4, 3), (14, 6, 11), (15, 19, 5), (15, 16, 4), (15, 14, 3),\n    (15, 4, 12), (15, 7, 20), (15, 6, 1), (15, 1, 2), (15, 11, 12),\n    (16, 14, 20), (16, 15, 4), (16, 11, 8), (17, 13, 11), (17, 16, 3),\n    (17, 4, 7), (17, 8, 10), (17, 6, 5), (17, 5, 7), (18, 10, 5),\n    (18, 9, 9), (18, 13, 1), (18, 12, 12), (18, 16, 10), (18, 4, 12),\n    (18, 8, 2), (18, 2, 4), (19, 9, 8), (19, 12, 17), (19, 15, 18),\n    (19, 4, 6), (19, 6, 5), (19, 17, 13)\n]\n\ng = Graph(20)\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(0, 8))\n```"}, "289": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.capacity = {}\n        self.V = vertices\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(11)\nedges = [\n    (0, 5, 19), (0, 1, 13), (1, 2, 8), (1, 8, 13), (1, 7, 13), (1, 9, 9),\n    (2, 3, 2), (2, 9, 4), (2, 6, 8), (3, 6, 13), (4, 2, 10), (4, 3, 16),\n    (4, 8, 8), (4, 7, 4), (5, 2, 17), (5, 0, 12), (5, 3, 4), (5, 6, 15),\n    (7, 4, 5), (7, 2, 14), (7, 10, 7), (7, 0, 13), (7, 3, 12), (7, 1, 6),\n    (7, 6, 4), (8, 5, 13), (8, 10, 16), (8, 6, 9), (9, 4, 20), (9, 2, 15),\n    (9, 8, 18), (9, 7, 16), (10, 5, 17)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nmax_flow = g.edmonds_karp(4, 3)\nprint(max_flow)\n```"}, "290": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.ROW = vertices\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.ROW\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for ind in self.graph[u]:\n                if visited[ind] == False and self.capacity[(u, ind)] > 0:\n                    queue.append(ind)\n                    visited[ind] = True\n                    parent[ind] = u\n\n                    if ind == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.ROW\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n            v = sink\n\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\ng.add_edge(0, 1, 10)\ng.add_edge(0, 4, 5)\ng.add_edge(1, 0, 9)\ng.add_edge(1, 6, 8)\ng.add_edge(2, 4, 2)\ng.add_edge(4, 1, 9)\ng.add_edge(4, 2, 2)\ng.add_edge(5, 1, 2)\ng.add_edge(5, 2, 10)\ng.add_edge(5, 6, 6)\ng.add_edge(6, 3, 6)\n\nprint(g.edmonds_karp(5, 6))\n```"}, "291": {"gpt4": "```python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n        self.capacity = {}\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        self.capacity[(u, v)] = w\n        self.capacity[(v, u)] = 0\n\n    def bfs(self, s, t, parent):\n        visited = [False] * self.V\n        queue = deque([s])\n        visited[s] = True\n\n        while queue:\n            u = queue.popleft()\n\n            for v in self.graph[u]:\n                if not visited[v] and self.capacity[(u, v)] > 0:\n                    queue.append(v)\n                    visited[v] = True\n                    parent[v] = u\n                    if v == t:\n                        return True\n        return False\n\n    def edmonds_karp(self, source, sink):\n        parent = [-1] * self.V\n        max_flow = 0\n\n        while self.bfs(source, sink, parent):\n            path_flow = float('Inf')\n            s = sink\n            while s != source:\n                path_flow = min(path_flow, self.capacity[(parent[s], s)])\n                s = parent[s]\n\n            max_flow += path_flow\n\n            v = sink\n            while v != source:\n                u = parent[v]\n                self.capacity[(u, v)] -= path_flow\n                self.capacity[(v, u)] += path_flow\n                v = parent[v]\n\n        return max_flow\n\ng = Graph(7)\nedges = [\n    (0, 2, 7),\n    (0, 5, 4),\n    (1, 3, 4),\n    (1, 2, 8),\n    (3, 6, 1),\n    (5, 2, 1),\n    (5, 0, 9),\n    (5, 4, 8),\n    (6, 3, 9),\n    (6, 0, 1),\n    (6, 4, 5)\n]\n\nfor u, v, w in edges:\n    g.add_edge(u, v, w)\n\nprint(g.edmonds_karp(1, 2))\n```"}}