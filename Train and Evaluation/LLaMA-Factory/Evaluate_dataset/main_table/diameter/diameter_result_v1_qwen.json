[{"id": 0, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 11, 0, 1, 8, 5.\nNode 11 is connected to nodes 2, 6, 10, 4, 7.\nNode 0 is connected to nodes 2, 1, 9, 4, 7, 5, 10.\nNode 1 is connected to nodes 2, 9, 3, 10, 0, 8.\nNode 8 is connected to nodes 2, 1, 10.\nNode 5 is connected to nodes 2, 9, 0, 4, 6, 10.\nNode 6 is connected to nodes 11, 5, 10.\nNode 10 is connected to nodes 11, 1, 0, 6, 8, 5.\nNode 4 is connected to nodes 11, 3, 0, 5.\nNode 7 is connected to nodes 11, 3, 0.\nNode 9 is connected to nodes 1, 5, 0.\nNode 3 is connected to nodes 1, 4, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 1, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 3, 12.\nNode 3 is connected to nodes 10, 0, 4, 7.\nNode 12 is connected to nodes 10, 0, 11, 6, 1.\nNode 2 is connected to nodes 9, 8, 11, 4, 7, 1.\nNode 9 is connected to nodes 2, 5, 8, 11, 4, 6, 1.\nNode 8 is connected to nodes 2, 9, 0, 11.\nNode 11 is connected to nodes 2, 9, 5, 8, 12, 1.\nNode 4 is connected to nodes 2, 9, 5, 3.\nNode 7 is connected to nodes 2, 5, 3, 1.\nNode 1 is connected to nodes 2, 9, 5, 11, 12, 6, 7.\nNode 5 is connected to nodes 9, 11, 4, 7, 1.\nNode 6 is connected to nodes 9, 12, 1.\nNode 0 is connected to nodes 8, 3, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 2, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 3, 2, 4, 8, 7, 12, 10, 0.\nNode 3 is connected to nodes 5, 4, 8.\nNode 2 is connected to nodes 5, 8, 6.\nNode 4 is connected to nodes 5, 3.\nNode 8 is connected to nodes 5, 3, 2, 0, 6, 7, 9, 11, 10, 1.\nNode 7 is connected to nodes 5, 8.\nNode 12 is connected to nodes 5, 6.\nNode 10 is connected to nodes 5, 8.\nNode 0 is connected to nodes 5, 8, 11.\nNode 6 is connected to nodes 2, 8, 12.\nNode 9 is connected to nodes 8, 11.\nNode 11 is connected to nodes 8, 0, 9.\nNode 1 is connected to node 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 3, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 0, 8, 6, 7, 3, 1.\nNode 0 is connected to nodes 4, 8, 6, 7, 1.\nNode 8 is connected to nodes 4, 0, 6, 3, 5.\nNode 6 is connected to nodes 4, 2, 0, 8, 7, 5.\nNode 7 is connected to nodes 4, 2, 0, 6.\nNode 3 is connected to nodes 4, 8, 5.\nNode 1 is connected to nodes 4, 2, 0, 5.\nNode 2 is connected to nodes 6, 7, 1, 5.\nNode 5 is connected to nodes 2, 8, 6, 3, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 4, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 9, 3, 7, 1.\nNode 9 is connected to nodes 2, 0, 3, 11.\nNode 3 is connected to nodes 2, 9, 5, 8, 1, 10.\nNode 7 is connected to nodes 2, 0, 12, 6.\nNode 1 is connected to nodes 2, 11, 3, 10.\nNode 0 is connected to nodes 9, 6, 7, 5.\nNode 11 is connected to nodes 9, 5, 1, 8, 4.\nNode 6 is connected to nodes 0, 5, 12, 7.\nNode 5 is connected to nodes 0, 11, 3, 6.\nNode 8 is connected to nodes 11, 3, 10, 4.\nNode 4 is connected to nodes 11, 10, 8.\nNode 10 is connected to nodes 3, 8, 1, 4.\nNode 12 is connected to nodes 6, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 5, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 13, 0.\nNode 13 is connected to nodes 3, 5.\nNode 0 is connected to nodes 3, 2.\nNode 5 is connected to nodes 13, 7, 10.\nNode 7 is connected to nodes 6, 5.\nNode 6 is connected to nodes 7, 1.\nNode 1 is connected to nodes 6, 4.\nNode 9 is connected to nodes 12, 4.\nNode 12 is connected to nodes 9, 11.\nNode 4 is connected to nodes 9, 1.\nNode 11 is connected to nodes 12, 8.\nNode 2 is connected to nodes 0, 8.\nNode 8 is connected to nodes 2, 11.\nNode 10 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 6, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 2, 5, 7, 1, 8, 4, 6.\nNode 2 is connected to nodes 3, 6.\nNode 5 is connected to nodes 3, 6, 1.\nNode 7 is connected to nodes 3, 9, 6.\nNode 1 is connected to nodes 3, 5.\nNode 8 is connected to node 3.\nNode 4 is connected to nodes 3, 0, 6.\nNode 6 is connected to nodes 3, 2, 5, 0, 7, 4.\nNode 0 is connected to nodes 9, 6, 4.\nNode 9 is connected to nodes 0, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 7, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 0, 13.\nNode 0 is connected to nodes 3, 2, 1, 11, 4, 6, 9, 8, 13.\nNode 13 is connected to nodes 3, 0, 1, 11, 6.\nNode 14 is connected to nodes 9, 10, 12.\nNode 9 is connected to nodes 14, 0, 1, 4, 10, 12, 8, 5.\nNode 10 is connected to nodes 14, 4, 9.\nNode 12 is connected to nodes 14, 1, 7, 6, 9.\nNode 2 is connected to nodes 0, 7, 6.\nNode 7 is connected to nodes 2, 11, 12.\nNode 6 is connected to nodes 2, 0, 1, 11, 12, 8, 13.\nNode 1 is connected to nodes 0, 6, 9, 12, 5, 13.\nNode 11 is connected to nodes 0, 7, 6, 13.\nNode 4 is connected to nodes 0, 9, 10, 5.\nNode 8 is connected to nodes 0, 6, 9.\nNode 5 is connected to nodes 1, 4, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 8, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 10, 2, 11, 12, 4, 9, 5, 13, 1, 3.\nNode 8 is connected to nodes 0, 7, 10, 2, 11, 4, 9, 5, 6, 3.\nNode 10 is connected to nodes 0, 8, 7, 11, 4, 9, 5, 13, 6.\nNode 2 is connected to nodes 0, 8, 7, 12, 4, 5, 6, 3.\nNode 11 is connected to nodes 0, 8, 7, 10, 12, 4, 5, 1, 6, 3.\nNode 12 is connected to nodes 0, 7, 2, 11, 4, 5, 13, 1, 6.\nNode 4 is connected to nodes 0, 8, 10, 2, 11, 12, 9, 5, 13, 1.\nNode 9 is connected to nodes 0, 8, 10, 4, 5, 13, 6, 3.\nNode 5 is connected to nodes 0, 8, 10, 2, 11, 12, 4, 9, 13.\nNode 13 is connected to nodes 0, 7, 10, 12, 4, 9, 5, 1.\nNode 1 is connected to nodes 0, 7, 11, 12, 4, 13, 6, 3.\nNode 3 is connected to nodes 0, 8, 7, 2, 11, 9, 1.\nNode 7 is connected to nodes 8, 10, 2, 11, 12, 13, 1, 3.\nNode 6 is connected to nodes 8, 10, 2, 11, 12, 9, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 9, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 5, 8, 3, 1, 12, 10, 9, 6, 7, 11, 2.\nNode 5 is connected to nodes 4, 8, 9, 12, 1, 10.\nNode 8 is connected to nodes 4, 5, 10, 1, 7.\nNode 3 is connected to nodes 4, 6, 1, 12.\nNode 1 is connected to nodes 4, 5, 8, 3.\nNode 12 is connected to nodes 4, 5, 10, 9, 6, 2, 3.\nNode 10 is connected to nodes 4, 5, 9, 6, 8, 7, 12.\nNode 9 is connected to nodes 4, 5, 10, 7, 2, 6, 12.\nNode 6 is connected to nodes 4, 10, 9, 7, 12, 3, 11, 0.\nNode 7 is connected to nodes 4, 10, 9, 6, 8.\nNode 11 is connected to nodes 4, 6, 2.\nNode 2 is connected to nodes 4, 9, 11, 12.\nNode 0 is connected to node 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 10, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 7, 11, 1, 12.\nNode 8 is connected to nodes 6, 7, 2, 0, 12.\nNode 7 is connected to nodes 6, 8, 11, 3, 10, 0.\nNode 11 is connected to nodes 6, 7, 10, 9, 4.\nNode 1 is connected to nodes 6, 4.\nNode 12 is connected to nodes 6, 8, 5, 0, 4.\nNode 2 is connected to nodes 8, 9, 5.\nNode 0 is connected to nodes 8, 7, 3, 10, 9, 12, 4.\nNode 3 is connected to nodes 7, 5, 0.\nNode 10 is connected to nodes 7, 11, 5, 0.\nNode 9 is connected to nodes 11, 2, 0.\nNode 4 is connected to nodes 11, 1, 0, 12.\nNode 5 is connected to nodes 3, 10, 2, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 11, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to node 2.\nNode 2 is connected to nodes 4, 9.\nNode 9 is connected to nodes 2, 7, 6, 1.\nNode 3 is connected to nodes 0, 8.\nNode 0 is connected to nodes 3, 5.\nNode 8 is connected to node 3.\nNode 5 is connected to nodes 0, 10.\nNode 7 is connected to nodes 11, 9.\nNode 11 is connected to nodes 7, 6.\nNode 6 is connected to nodes 11, 9.\nNode 10 is connected to nodes 5, 1.\nNode 1 is connected to nodes 10, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 12, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 9, 4, 3, 6, 8.\nNode 2 is connected to nodes 0, 7, 1, 9, 3, 8.\nNode 9 is connected to nodes 0, 7, 2, 1, 4, 3, 6, 8, 5.\nNode 4 is connected to nodes 0, 7, 1, 9, 3, 5.\nNode 3 is connected to nodes 0, 2, 1, 9, 4, 8, 5.\nNode 6 is connected to nodes 0, 7, 1, 9, 8.\nNode 8 is connected to nodes 0, 2, 1, 9, 3, 6, 5.\nNode 7 is connected to nodes 2, 1, 9, 4, 6, 5.\nNode 1 is connected to nodes 7, 2, 9, 4, 3, 6, 8, 5.\nNode 5 is connected to nodes 7, 1, 9, 4, 3, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 13, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 11, 13.\nNode 11 is connected to nodes 6, 4, 1.\nNode 13 is connected to nodes 6, 8.\nNode 4 is connected to nodes 11, 7, 3.\nNode 1 is connected to nodes 11, 0.\nNode 7 is connected to nodes 5, 4.\nNode 5 is connected to nodes 7, 2.\nNode 2 is connected to nodes 5, 9.\nNode 3 is connected to nodes 4, 9, 10.\nNode 9 is connected to nodes 3, 2, 12.\nNode 10 is connected to node 3.\nNode 8 is connected to node 13.\nNode 12 is connected to node 9.\nNode 0 is connected to node 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 14, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 13, 9, 8, 6, 12, 11, 10, 1, 7, 5.\nNode 13 is connected to nodes 4, 2, 9, 6, 12, 11, 10, 3, 1, 7, 5, 0, 14.\nNode 9 is connected to nodes 4, 13, 8, 6, 12, 3, 1, 5.\nNode 8 is connected to nodes 4, 2, 9, 6, 12, 11, 10, 1, 0, 14.\nNode 6 is connected to nodes 4, 2, 13, 9, 8, 10, 1, 5, 0, 14.\nNode 12 is connected to nodes 4, 2, 13, 9, 8, 11, 10, 3, 7, 5, 14.\nNode 11 is connected to nodes 4, 2, 13, 8, 12, 10, 3, 1, 0, 14.\nNode 10 is connected to nodes 4, 13, 8, 6, 12, 11, 3, 1, 7, 5, 0.\nNode 1 is connected to nodes 4, 2, 13, 9, 8, 6, 11, 10, 3, 7, 0.\nNode 7 is connected to nodes 4, 13, 12, 10, 3, 1, 14.\nNode 5 is connected to nodes 4, 13, 9, 6, 12, 10, 14.\nNode 2 is connected to nodes 13, 8, 6, 12, 11, 3, 1, 14.\nNode 3 is connected to nodes 2, 13, 9, 12, 11, 10, 1, 7, 14.\nNode 14 is connected to nodes 2, 13, 8, 6, 12, 11, 3, 7, 5, 0.\nNode 0 is connected to nodes 13, 8, 6, 11, 10, 1, 14.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 15, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 5, 10.\nNode 5 is connected to nodes 2, 0, 4, 9, 7, 1.\nNode 10 is connected to nodes 2, 4, 7.\nNode 3 is connected to nodes 0, 8, 7.\nNode 0 is connected to nodes 3, 5, 8, 4, 6, 9, 7.\nNode 8 is connected to nodes 3, 0.\nNode 7 is connected to nodes 3, 5, 0, 6, 10.\nNode 4 is connected to nodes 5, 0, 10, 1.\nNode 9 is connected to nodes 5, 0, 6, 1.\nNode 1 is connected to nodes 5, 4, 6, 9.\nNode 6 is connected to nodes 0, 9, 7, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 16, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 1, 3, 13.\nNode 1 is connected to nodes 12, 11.\nNode 3 is connected to nodes 12, 4, 5, 2, 0, 6, 8, 10.\nNode 13 is connected to nodes 12, 9.\nNode 11 is connected to node 1.\nNode 4 is connected to nodes 7, 3.\nNode 7 is connected to node 4.\nNode 5 is connected to node 3.\nNode 2 is connected to node 3.\nNode 0 is connected to node 3.\nNode 6 is connected to node 3.\nNode 8 is connected to node 3.\nNode 10 is connected to node 3.\nNode 9 is connected to node 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n```"}, {"id": 17, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 11, 5, 10, 9.\nNode 11 is connected to nodes 12, 1, 7.\nNode 5 is connected to nodes 12, 14.\nNode 10 is connected to nodes 12, 13.\nNode 9 is connected to nodes 12, 8, 4.\nNode 1 is connected to node 11.\nNode 7 is connected to nodes 11, 6, 3.\nNode 0 is connected to nodes 2, 3.\nNode 2 is connected to node 0.\nNode 3 is connected to nodes 0, 7.\nNode 14 is connected to node 5.\nNode 13 is connected to node 10.\nNode 6 is connected to node 7.\nNode 8 is connected to node 9.\nNode 4 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 18, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 6, 7, 3, 1, 0, 9, 10, 11, 12, 2.\nNode 4 is connected to nodes 5, 6, 13, 3, 8, 1, 0, 9, 10, 11, 12, 2.\nNode 6 is connected to nodes 5, 4, 3, 8, 1, 0, 9, 10, 12, 2.\nNode 7 is connected to nodes 5, 13, 1, 0, 9, 10, 11, 12, 2.\nNode 3 is connected to nodes 5, 4, 6, 13, 8, 1, 9, 12, 2.\nNode 1 is connected to nodes 5, 4, 6, 13, 7, 3, 8, 0, 9, 10, 11, 12, 2.\nNode 0 is connected to nodes 5, 4, 6, 13, 7, 8, 1, 9, 10, 2.\nNode 9 is connected to nodes 5, 4, 6, 7, 3, 8, 1, 0, 10, 2.\nNode 10 is connected to nodes 5, 4, 6, 13, 7, 8, 1, 0, 9, 2.\nNode 11 is connected to nodes 5, 4, 13, 7, 8, 1, 2.\nNode 12 is connected to nodes 5, 4, 6, 13, 7, 3, 8, 1, 2.\nNode 2 is connected to nodes 5, 4, 6, 13, 7, 3, 8, 1, 0, 9, 10, 11, 12.\nNode 13 is connected to nodes 4, 7, 3, 8, 1, 0, 10, 11, 12, 2.\nNode 8 is connected to nodes 4, 6, 13, 3, 1, 0, 9, 10, 11, 12, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 19, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 12, 1, 6, 4.\nNode 12 is connected to node 3.\nNode 1 is connected to node 3.\nNode 6 is connected to nodes 3, 2, 0, 13, 9, 7.\nNode 4 is connected to node 3.\nNode 2 is connected to node 6.\nNode 0 is connected to nodes 6, 10.\nNode 13 is connected to nodes 6, 11.\nNode 9 is connected to nodes 6, 5.\nNode 7 is connected to node 6.\nNode 11 is connected to nodes 13, 14.\nNode 14 is connected to node 11.\nNode 10 is connected to node 0.\nNode 5 is connected to nodes 9, 8.\nNode 8 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 20, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 9, 1.\nNode 9 is connected to nodes 0, 10.\nNode 1 is connected to nodes 0, 8, 4.\nNode 10 is connected to nodes 9, 12, 7.\nNode 8 is connected to nodes 2, 1, 5.\nNode 2 is connected to node 8.\nNode 5 is connected to node 8.\nNode 12 is connected to nodes 3, 10, 6.\nNode 3 is connected to nodes 12, 4.\nNode 6 is connected to node 12.\nNode 4 is connected to nodes 3, 1, 11.\nNode 7 is connected to node 10.\nNode 11 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 21, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 0, 6, 1, 3, 7.\nNode 0 is connected to node 2.\nNode 6 is connected to node 2.\nNode 1 is connected to nodes 2, 4.\nNode 3 is connected to nodes 2, 5.\nNode 7 is connected to node 2.\nNode 4 is connected to node 1.\nNode 5 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 22, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 10, 1, 3, 4, 6.\nNode 10 is connected to nodes 5, 0, 9.\nNode 1 is connected to node 5.\nNode 3 is connected to node 5.\nNode 4 is connected to nodes 5, 7.\nNode 6 is connected to node 5.\nNode 0 is connected to nodes 10, 12.\nNode 9 is connected to nodes 10, 8.\nNode 8 is connected to node 9.\nNode 7 is connected to nodes 4, 2, 11.\nNode 2 is connected to node 7.\nNode 11 is connected to node 7.\nNode 12 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 23, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 1, 3, 6, 8, 0.\nNode 1 is connected to nodes 5, 8.\nNode 3 is connected to nodes 5, 8.\nNode 6 is connected to nodes 5, 0.\nNode 8 is connected to nodes 5, 1, 3, 2.\nNode 0 is connected to nodes 5, 6, 2, 4.\nNode 2 is connected to nodes 0, 8, 7, 4.\nNode 4 is connected to nodes 0, 2, 7.\nNode 7 is connected to nodes 2, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 24, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 3, 9, 10, 6, 4, 0, 12, 8, 5, 2, 13, 7.\nNode 3 is connected to nodes 11, 9, 6, 4, 1, 12, 5, 2, 13, 7.\nNode 9 is connected to nodes 11, 3, 10, 6, 1, 0, 12, 8, 2, 13, 7.\nNode 10 is connected to nodes 11, 9, 6, 4, 0, 12, 8, 5, 13.\nNode 6 is connected to nodes 11, 3, 9, 10, 4, 1, 0, 8, 5, 2, 7.\nNode 4 is connected to nodes 11, 3, 10, 6, 1, 0, 12, 8, 5, 2, 13, 7.\nNode 0 is connected to nodes 11, 9, 10, 6, 4, 12, 8, 2, 13.\nNode 12 is connected to nodes 11, 3, 9, 10, 4, 0, 8, 5, 2, 13, 7.\nNode 8 is connected to nodes 11, 9, 10, 6, 4, 1, 0, 12, 2, 13.\nNode 5 is connected to nodes 11, 3, 10, 6, 4, 1, 12, 2, 13, 7.\nNode 2 is connected to nodes 11, 3, 9, 6, 4, 1, 0, 12, 8, 5, 13, 7.\nNode 13 is connected to nodes 11, 3, 9, 10, 4, 1, 0, 12, 8, 5, 2.\nNode 7 is connected to nodes 11, 3, 9, 6, 4, 1, 12, 5, 2.\nNode 1 is connected to nodes 3, 9, 6, 4, 8, 5, 2, 13, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 25, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 11, 0, 12, 3, 8, 2.\nNode 11 is connected to node 9.\nNode 0 is connected to nodes 9, 5.\nNode 12 is connected to nodes 9, 10.\nNode 3 is connected to node 9.\nNode 8 is connected to node 9.\nNode 2 is connected to node 9.\nNode 5 is connected to node 0.\nNode 10 is connected to nodes 12, 6, 1, 4.\nNode 6 is connected to node 10.\nNode 1 is connected to node 10.\nNode 4 is connected to nodes 10, 7.\nNode 7 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 26, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 1, 8, 5, 6, 0, 2, 7, 10, 4.\nNode 1 is connected to nodes 11, 12, 5, 6, 0, 2, 9.\nNode 8 is connected to nodes 11, 12, 5, 6, 2, 9, 7.\nNode 5 is connected to nodes 11, 1, 12, 8, 3, 6, 0, 2, 9, 7, 10, 4.\nNode 6 is connected to nodes 11, 1, 12, 8, 5, 3, 2, 10.\nNode 0 is connected to nodes 11, 1, 12, 5, 2, 9, 7, 10, 4.\nNode 2 is connected to nodes 11, 1, 12, 8, 5, 3, 6, 0, 7, 10.\nNode 7 is connected to nodes 11, 8, 5, 3, 0, 2, 9, 10.\nNode 10 is connected to nodes 11, 12, 5, 3, 6, 0, 2, 7, 4.\nNode 4 is connected to nodes 11, 12, 5, 0, 9, 10.\nNode 12 is connected to nodes 1, 8, 5, 3, 6, 0, 2, 10, 4.\nNode 9 is connected to nodes 1, 8, 5, 3, 0, 7, 4.\nNode 3 is connected to nodes 12, 5, 6, 2, 9, 7, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 27, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to node 6.\nNode 6 is connected to nodes 3, 1, 5, 4.\nNode 1 is connected to nodes 6, 5.\nNode 5 is connected to nodes 6, 1, 8, 7, 4.\nNode 4 is connected to nodes 6, 7, 5.\nNode 2 is connected to node 0.\nNode 0 is connected to nodes 2, 7.\nNode 7 is connected to nodes 0, 8, 5, 4.\nNode 8 is connected to nodes 7, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 28, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 6, 7, 0, 2.\nNode 4 is connected to nodes 5, 3, 6, 2.\nNode 6 is connected to nodes 5, 4, 0, 2.\nNode 7 is connected to nodes 5, 1, 3, 0, 2.\nNode 0 is connected to nodes 5, 1, 3, 6, 7.\nNode 2 is connected to nodes 5, 4, 6, 7.\nNode 3 is connected to nodes 4, 1, 7, 0.\nNode 1 is connected to nodes 3, 7, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 29, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 9, 3, 1, 10, 7, 8, 4, 5.\nNode 2 is connected to nodes 0, 6, 9, 3, 8.\nNode 9 is connected to nodes 0, 2, 3, 10, 7, 4.\nNode 3 is connected to nodes 0, 6, 2, 9, 1, 8, 5.\nNode 1 is connected to nodes 0, 6, 3, 7, 8, 4.\nNode 10 is connected to nodes 0, 6, 9, 7, 8, 4.\nNode 7 is connected to nodes 0, 6, 9, 1, 10.\nNode 8 is connected to nodes 0, 2, 3, 1, 10, 4.\nNode 4 is connected to nodes 0, 6, 9, 1, 10, 8.\nNode 5 is connected to nodes 0, 3.\nNode 6 is connected to nodes 2, 3, 1, 10, 7, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 30, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 12, 5, 7, 1, 13, 4, 11, 8, 0, 9, 6.\nNode 12 is connected to nodes 10, 5, 7, 3, 1, 13, 4, 11, 8, 2, 0, 9, 6.\nNode 5 is connected to nodes 10, 12, 3, 1, 13, 4, 8, 2, 0, 9, 6.\nNode 7 is connected to nodes 10, 12, 3, 1, 4, 11, 8, 0, 9.\nNode 1 is connected to nodes 10, 12, 5, 7, 3, 13, 11, 8, 0, 6.\nNode 13 is connected to nodes 10, 12, 5, 3, 1, 11, 8, 2, 0, 6.\nNode 4 is connected to nodes 10, 12, 5, 7, 3, 11, 0, 9, 6.\nNode 11 is connected to nodes 10, 12, 7, 1, 13, 4, 8, 2, 0, 9, 6.\nNode 8 is connected to nodes 10, 12, 5, 7, 3, 1, 13, 11, 2, 9.\nNode 0 is connected to nodes 10, 12, 5, 7, 3, 1, 13, 4, 11, 2, 6.\nNode 9 is connected to nodes 10, 12, 5, 7, 3, 4, 11, 8, 2.\nNode 6 is connected to nodes 10, 12, 5, 1, 13, 4, 11, 2, 0.\nNode 3 is connected to nodes 12, 5, 7, 1, 13, 4, 8, 2, 0, 9.\nNode 2 is connected to nodes 12, 5, 3, 13, 11, 8, 0, 9, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 31, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 1, 3, 5, 8, 2.\nNode 1 is connected to node 0.\nNode 3 is connected to nodes 0, 7, 4.\nNode 5 is connected to nodes 0, 6.\nNode 8 is connected to node 0.\nNode 2 is connected to node 0.\nNode 7 is connected to node 3.\nNode 4 is connected to node 3.\nNode 6 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 32, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 0, 6, 10, 1, 5, 9, 4.\nNode 0 is connected to nodes 7, 2, 10, 5, 9, 4.\nNode 6 is connected to nodes 7, 2, 3, 5, 4.\nNode 10 is connected to nodes 7, 0, 2, 3, 1, 9, 4.\nNode 1 is connected to nodes 7, 2, 10, 5, 9, 4.\nNode 5 is connected to nodes 7, 0, 2, 8, 3, 6, 1, 9, 4.\nNode 9 is connected to nodes 7, 0, 2, 8, 10, 1, 5.\nNode 4 is connected to nodes 7, 0, 8, 6, 10, 1, 5.\nNode 2 is connected to nodes 0, 8, 6, 10, 1, 5, 9.\nNode 8 is connected to nodes 2, 3, 5, 9, 4.\nNode 3 is connected to nodes 8, 6, 10, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 33, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 2, 5, 4, 1, 6, 9.\nNode 2 is connected to nodes 3, 5, 6, 11, 9, 12.\nNode 5 is connected to nodes 3, 2, 0, 8, 4, 1, 11, 9.\nNode 4 is connected to nodes 3, 5, 0, 10, 1, 11, 9.\nNode 1 is connected to nodes 3, 5, 8, 4, 6, 9, 12.\nNode 6 is connected to nodes 3, 2, 0, 10, 1, 11, 9, 12.\nNode 9 is connected to nodes 3, 2, 5, 0, 8, 4, 1, 6, 7, 11.\nNode 11 is connected to nodes 2, 5, 10, 4, 6, 9, 12.\nNode 12 is connected to nodes 2, 8, 1, 6, 7, 11.\nNode 0 is connected to nodes 5, 8, 4, 6, 7, 9.\nNode 8 is connected to nodes 5, 0, 1, 9, 12.\nNode 7 is connected to nodes 0, 10, 9, 12.\nNode 10 is connected to nodes 4, 6, 7, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 34, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 4, 2, 1.\nNode 4 is connected to nodes 3, 8.\nNode 2 is connected to nodes 3, 1.\nNode 1 is connected to nodes 3, 8, 2, 7, 6.\nNode 8 is connected to nodes 4, 0, 5, 6, 1, 7.\nNode 0 is connected to nodes 8, 7.\nNode 5 is connected to nodes 8, 7.\nNode 6 is connected to nodes 8, 1.\nNode 7 is connected to nodes 8, 0, 5, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 35, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 6, 2.\nNode 6 is connected to nodes 5, 10, 3.\nNode 2 is connected to nodes 5, 0.\nNode 10 is connected to nodes 6, 8.\nNode 3 is connected to nodes 6, 9, 4.\nNode 7 is connected to nodes 9, 1.\nNode 9 is connected to nodes 7, 3.\nNode 1 is connected to nodes 7, 13.\nNode 13 is connected to nodes 1, 12.\nNode 11 is connected to node 12.\nNode 12 is connected to nodes 11, 13.\nNode 8 is connected to nodes 10, 4.\nNode 4 is connected to nodes 8, 3.\nNode 0 is connected to node 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 36, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 4, 3.\nNode 2 is connected to nodes 0, 1, 7, 9.\nNode 4 is connected to nodes 0, 7, 6, 10, 9.\nNode 3 is connected to nodes 0, 1, 8, 5, 9.\nNode 1 is connected to nodes 2, 7, 8, 5, 3.\nNode 7 is connected to nodes 2, 4, 1, 10.\nNode 9 is connected to nodes 2, 4, 3, 10.\nNode 6 is connected to nodes 4, 5, 10.\nNode 10 is connected to nodes 4, 7, 6, 9.\nNode 8 is connected to nodes 1, 5, 3.\nNode 5 is connected to nodes 1, 8, 6, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 37, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 1, 3, 0, 5, 6.\nNode 1 is connected to node 2.\nNode 3 is connected to nodes 2, 8.\nNode 0 is connected to nodes 2, 7.\nNode 5 is connected to nodes 2, 4.\nNode 6 is connected to node 2.\nNode 7 is connected to node 0.\nNode 8 is connected to node 3.\nNode 4 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 38, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 0, 4.\nNode 0 is connected to nodes 7, 5.\nNode 4 is connected to nodes 7, 10, 6.\nNode 5 is connected to nodes 0, 6.\nNode 2 is connected to node 1.\nNode 1 is connected to nodes 2, 9.\nNode 9 is connected to nodes 1, 8.\nNode 8 is connected to nodes 9, 3.\nNode 3 is connected to nodes 8, 10.\nNode 10 is connected to nodes 4, 3.\nNode 6 is connected to nodes 4, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 39, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 1, 5, 3, 10, 6, 0, 9, 4, 2.\nNode 1 is connected to nodes 8, 3, 10, 9, 4, 2.\nNode 5 is connected to nodes 8, 7, 3, 10, 6, 9, 4, 2.\nNode 3 is connected to nodes 8, 7, 1, 5, 10, 6, 9, 2.\nNode 10 is connected to nodes 8, 7, 1, 5, 3, 0, 9.\nNode 6 is connected to nodes 8, 7, 5, 3, 0, 9, 2.\nNode 0 is connected to nodes 8, 7, 10, 6, 9, 4, 2.\nNode 9 is connected to nodes 8, 7, 1, 5, 3, 10, 6, 0, 4, 2.\nNode 4 is connected to nodes 8, 7, 1, 5, 0, 9.\nNode 2 is connected to nodes 8, 7, 1, 5, 3, 6, 0, 9.\nNode 7 is connected to nodes 5, 3, 10, 6, 0, 9, 4, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 40, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 1, 2, 4, 7, 0, 5.\nNode 1 is connected to nodes 6, 5.\nNode 2 is connected to nodes 6, 12.\nNode 4 is connected to nodes 6, 5, 12, 9.\nNode 7 is connected to nodes 6, 5.\nNode 0 is connected to nodes 6, 5.\nNode 5 is connected to nodes 6, 1, 10, 3, 9, 11, 0, 12, 4, 7, 8.\nNode 10 is connected to nodes 5, 8, 3.\nNode 3 is connected to nodes 5, 10.\nNode 9 is connected to nodes 5, 4.\nNode 11 is connected to nodes 5, 12.\nNode 12 is connected to nodes 5, 2, 11, 4.\nNode 8 is connected to nodes 5, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 41, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 0, 7, 2, 4.\nNode 0 is connected to nodes 1, 2.\nNode 7 is connected to nodes 1, 3, 2, 4, 5.\nNode 2 is connected to nodes 1, 0, 7, 4.\nNode 4 is connected to nodes 1, 3, 7, 2, 6.\nNode 3 is connected to nodes 7, 4, 5.\nNode 5 is connected to nodes 3, 7, 6.\nNode 6 is connected to nodes 4, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 42, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 7, 5.\nNode 3 is connected to nodes 0, 4, 2, 13.\nNode 7 is connected to nodes 0, 2, 13.\nNode 5 is connected to nodes 0, 11, 10, 9, 12, 2, 13.\nNode 11 is connected to nodes 4, 9, 5.\nNode 4 is connected to nodes 11, 1, 3, 13.\nNode 9 is connected to nodes 11, 1, 2, 5.\nNode 1 is connected to nodes 4, 9, 12, 8.\nNode 13 is connected to nodes 4, 3, 6, 7, 5.\nNode 12 is connected to nodes 1, 6, 5.\nNode 8 is connected to node 1.\nNode 10 is connected to nodes 2, 5.\nNode 2 is connected to nodes 10, 9, 3, 7, 5.\nNode 6 is connected to nodes 12, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 43, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 1, 3, 7, 2, 0.\nNode 1 is connected to nodes 5, 3, 0, 4.\nNode 3 is connected to nodes 5, 1, 6, 4, 2.\nNode 7 is connected to node 5.\nNode 2 is connected to nodes 5, 3.\nNode 0 is connected to nodes 5, 1.\nNode 4 is connected to nodes 1, 3, 6.\nNode 6 is connected to nodes 3, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 44, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 6, 10, 4, 5.\nNode 6 is connected to nodes 3, 2, 5, 9.\nNode 10 is connected to nodes 3, 7, 8.\nNode 4 is connected to nodes 3, 5, 7, 0, 9.\nNode 5 is connected to nodes 3, 6, 4, 0.\nNode 2 is connected to nodes 6, 9, 1, 0, 8.\nNode 9 is connected to nodes 6, 4, 2, 8.\nNode 0 is connected to nodes 5, 4, 7, 2, 1.\nNode 7 is connected to nodes 4, 10, 0, 8.\nNode 8 is connected to nodes 10, 7, 2, 9.\nNode 1 is connected to nodes 2, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 45, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 9, 6.\nNode 9 is connected to nodes 5, 4, 11.\nNode 6 is connected to nodes 5, 10.\nNode 4 is connected to nodes 9, 3.\nNode 11 is connected to nodes 9, 8.\nNode 1 is connected to nodes 13, 8.\nNode 13 is connected to nodes 1, 3.\nNode 8 is connected to nodes 1, 11, 7.\nNode 3 is connected to nodes 13, 4.\nNode 10 is connected to node 6.\nNode 7 is connected to nodes 8, 0.\nNode 12 is connected to node 0.\nNode 0 is connected to nodes 12, 2, 7.\nNode 2 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 46, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 6, 4, 1, 0, 8, 7, 10, 3, 5.\nNode 6 is connected to nodes 9, 4, 1, 0, 8, 7, 3.\nNode 4 is connected to nodes 9, 2, 6, 1, 0, 7, 10, 3, 5.\nNode 1 is connected to nodes 9, 2, 6, 4, 8, 7, 5.\nNode 0 is connected to nodes 9, 2, 6, 4, 8, 10, 5.\nNode 8 is connected to nodes 9, 2, 6, 1, 0, 7, 10, 5.\nNode 7 is connected to nodes 9, 2, 6, 4, 1, 8, 5.\nNode 10 is connected to nodes 9, 2, 4, 0, 8, 3, 5.\nNode 3 is connected to nodes 9, 6, 4, 10, 5.\nNode 5 is connected to nodes 9, 2, 4, 1, 0, 8, 7, 10, 3.\nNode 2 is connected to nodes 4, 1, 0, 8, 7, 10, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 47, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 7, 0, 4.\nNode 7 is connected to nodes 5, 4, 13, 11.\nNode 0 is connected to nodes 5, 12, 3, 10.\nNode 4 is connected to nodes 5, 7, 1, 14, 2.\nNode 13 is connected to nodes 7, 11, 14.\nNode 11 is connected to nodes 7, 1, 12, 14, 13, 9.\nNode 1 is connected to nodes 11, 14, 4, 12.\nNode 12 is connected to nodes 11, 1, 3, 0, 6.\nNode 14 is connected to nodes 11, 1, 4, 13.\nNode 9 is connected to nodes 11, 8.\nNode 8 is connected to nodes 9, 6, 2, 3.\nNode 6 is connected to nodes 8, 12, 10.\nNode 2 is connected to nodes 8, 3, 10, 4.\nNode 3 is connected to nodes 8, 12, 10, 2, 0.\nNode 10 is connected to nodes 3, 6, 2, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 48, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 4, 8, 5, 0, 7, 2, 3.\nNode 4 is connected to nodes 1, 0, 7, 2, 3.\nNode 8 is connected to nodes 1, 6, 2, 3.\nNode 5 is connected to nodes 1, 7, 2, 3.\nNode 0 is connected to nodes 1, 4, 7, 6.\nNode 7 is connected to nodes 1, 4, 5, 0, 2, 3.\nNode 2 is connected to nodes 1, 4, 8, 5, 7.\nNode 3 is connected to nodes 1, 4, 8, 5, 7, 6.\nNode 6 is connected to nodes 8, 0, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 49, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 5, 6, 1, 4, 2.\nNode 3 is connected to nodes 0, 5, 6, 7, 1, 4, 2.\nNode 5 is connected to nodes 0, 3, 7, 1, 2.\nNode 6 is connected to nodes 0, 3, 7, 1, 4, 2.\nNode 1 is connected to nodes 0, 3, 5, 6, 7, 4, 2.\nNode 4 is connected to nodes 0, 3, 6, 7, 1.\nNode 2 is connected to nodes 0, 3, 5, 6, 7, 1.\nNode 7 is connected to nodes 3, 5, 6, 1, 4, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 50, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 11, 1.\nNode 11 is connected to nodes 10, 14.\nNode 1 is connected to nodes 10, 2.\nNode 14 is connected to nodes 11, 4, 9.\nNode 3 is connected to nodes 4, 5.\nNode 4 is connected to nodes 3, 14.\nNode 5 is connected to nodes 3, 0.\nNode 9 is connected to nodes 14, 13.\nNode 8 is connected to nodes 12, 6.\nNode 12 is connected to nodes 8, 7.\nNode 6 is connected to nodes 8, 0.\nNode 7 is connected to nodes 12, 13.\nNode 13 is connected to nodes 9, 7.\nNode 0 is connected to nodes 6, 5.\nNode 2 is connected to node 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 51, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 5, 0, 3, 4, 9.\nNode 5 is connected to nodes 11, 3, 6, 4, 7, 1, 9.\nNode 0 is connected to nodes 11, 6, 7, 1.\nNode 3 is connected to nodes 11, 5, 2, 6, 10, 4, 7, 1, 9.\nNode 4 is connected to nodes 11, 12, 5, 2, 3, 8, 10, 7, 1.\nNode 9 is connected to nodes 11, 5, 3, 8, 7, 1.\nNode 12 is connected to nodes 6, 4, 1.\nNode 6 is connected to nodes 12, 5, 2, 0, 3, 8, 10.\nNode 1 is connected to nodes 12, 5, 0, 3, 8, 4, 7, 9.\nNode 7 is connected to nodes 5, 0, 3, 8, 4, 1, 9.\nNode 2 is connected to nodes 3, 6, 4.\nNode 10 is connected to nodes 3, 6, 4.\nNode 8 is connected to nodes 6, 4, 7, 1, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 52, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 2, 3, 8.\nNode 2 is connected to nodes 4, 9, 3, 8, 1.\nNode 3 is connected to nodes 4, 2, 7.\nNode 8 is connected to nodes 4, 2, 9, 5, 7.\nNode 9 is connected to nodes 2, 1, 8, 6.\nNode 1 is connected to nodes 2, 9, 5, 0, 7.\nNode 6 is connected to nodes 9, 5, 0.\nNode 5 is connected to nodes 1, 8, 0, 6.\nNode 0 is connected to nodes 1, 5, 6, 7.\nNode 7 is connected to nodes 1, 3, 8, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 53, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 10, 0, 2, 4, 6, 12, 8.\nNode 10 is connected to nodes 9, 2, 3, 4, 1, 11, 7, 6, 12, 8.\nNode 0 is connected to nodes 9, 2, 3, 7, 12, 8.\nNode 2 is connected to nodes 9, 10, 0, 3, 4, 8.\nNode 4 is connected to nodes 9, 10, 2, 1, 6, 12, 8.\nNode 6 is connected to nodes 9, 10, 4, 5, 1, 11, 7.\nNode 12 is connected to nodes 9, 10, 0, 4, 11, 7.\nNode 8 is connected to nodes 9, 10, 0, 2, 3, 4, 5, 1, 11, 7.\nNode 3 is connected to nodes 10, 0, 2, 5, 1, 11, 8.\nNode 1 is connected to nodes 10, 3, 4, 11, 7, 6, 8.\nNode 11 is connected to nodes 10, 3, 5, 1, 6, 12, 8.\nNode 7 is connected to nodes 10, 0, 5, 1, 6, 12, 8.\nNode 5 is connected to nodes 3, 11, 7, 6, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 54, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 7, 8, 6, 4, 1.\nNode 2 is connected to nodes 0, 7, 3, 8, 6, 1.\nNode 7 is connected to nodes 0, 2, 3, 8, 6, 4, 5.\nNode 8 is connected to nodes 0, 2, 7, 3, 6, 5, 1.\nNode 6 is connected to nodes 0, 2, 7, 3, 8, 4, 5, 1.\nNode 4 is connected to nodes 0, 7, 3, 6, 5, 1.\nNode 1 is connected to nodes 0, 2, 8, 6, 4, 5.\nNode 3 is connected to nodes 2, 7, 8, 6, 4, 5.\nNode 5 is connected to nodes 7, 3, 8, 6, 4, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 55, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 9, 12, 6, 4.\nNode 9 is connected to nodes 10, 7, 12, 0.\nNode 12 is connected to nodes 10, 9, 4, 11.\nNode 6 is connected to nodes 10, 5, 3, 2, 11, 1.\nNode 4 is connected to nodes 10, 12, 1, 11.\nNode 7 is connected to nodes 9, 8, 0.\nNode 0 is connected to nodes 9, 5, 7, 11.\nNode 5 is connected to nodes 8, 3, 6, 0.\nNode 8 is connected to nodes 5, 7, 3.\nNode 3 is connected to nodes 5, 8, 2, 6.\nNode 2 is connected to nodes 3, 6, 1.\nNode 11 is connected to nodes 12, 6, 1, 4, 0.\nNode 1 is connected to nodes 6, 4, 11, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 56, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 2.\nNode 1 is connected to nodes 4, 0.\nNode 2 is connected to nodes 4, 5.\nNode 0 is connected to nodes 1, 7.\nNode 6 is connected to nodes 3, 7.\nNode 3 is connected to nodes 6, 5.\nNode 7 is connected to nodes 6, 0.\nNode 5 is connected to nodes 3, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 57, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 7, 6, 0, 4, 3, 9.\nNode 7 is connected to nodes 2, 5, 3.\nNode 6 is connected to nodes 2, 5, 1, 8.\nNode 0 is connected to nodes 2, 3, 5, 9.\nNode 4 is connected to nodes 2, 5, 8.\nNode 3 is connected to nodes 2, 7, 1, 0, 9.\nNode 9 is connected to nodes 2, 3, 1, 0, 8.\nNode 5 is connected to nodes 7, 6, 8, 4, 0.\nNode 1 is connected to nodes 6, 3, 9.\nNode 8 is connected to nodes 6, 5, 9, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 58, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 4, 9, 6, 1.\nNode 4 is connected to nodes 3, 8, 7, 5.\nNode 9 is connected to nodes 3, 10.\nNode 6 is connected to node 3.\nNode 1 is connected to nodes 3, 2, 0.\nNode 8 is connected to node 4.\nNode 7 is connected to node 4.\nNode 5 is connected to node 4.\nNode 2 is connected to node 1.\nNode 0 is connected to node 1.\nNode 10 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 59, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 8, 10, 5, 0, 1, 9, 6, 4, 7.\nNode 8 is connected to nodes 3, 5.\nNode 10 is connected to nodes 3, 9.\nNode 5 is connected to nodes 3, 8, 9, 2, 0, 6.\nNode 0 is connected to nodes 3, 5.\nNode 1 is connected to nodes 3, 2.\nNode 9 is connected to nodes 3, 4, 10, 5.\nNode 6 is connected to nodes 3, 5, 2.\nNode 4 is connected to nodes 3, 9.\nNode 7 is connected to node 3.\nNode 2 is connected to nodes 5, 1, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 60, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 5, 7, 9, 4, 2.\nNode 5 is connected to nodes 8, 6, 7.\nNode 7 is connected to nodes 8, 5, 3, 10, 6.\nNode 9 is connected to nodes 8, 3, 10, 6, 1.\nNode 4 is connected to nodes 8, 1.\nNode 2 is connected to nodes 8, 3.\nNode 6 is connected to nodes 5, 0, 10, 7, 9.\nNode 3 is connected to nodes 2, 7, 1, 9, 0.\nNode 1 is connected to nodes 3, 10, 4, 9.\nNode 0 is connected to nodes 3, 10, 6.\nNode 10 is connected to nodes 0, 7, 9, 6, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 61, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 5, 7, 4, 1, 2, 9.\nNode 5 is connected to nodes 11, 9.\nNode 7 is connected to nodes 11, 0, 4, 6, 3.\nNode 4 is connected to nodes 11, 9, 7, 3, 10.\nNode 1 is connected to nodes 11, 9, 8, 0, 6.\nNode 2 is connected to nodes 11, 9, 0.\nNode 9 is connected to nodes 11, 5, 10, 0, 2, 1, 4.\nNode 10 is connected to nodes 9, 4.\nNode 0 is connected to nodes 9, 8, 7, 2, 1.\nNode 8 is connected to nodes 0, 6, 1.\nNode 6 is connected to nodes 8, 7, 1.\nNode 3 is connected to nodes 7, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 62, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 0, 5, 1.\nNode 0 is connected to nodes 2, 6.\nNode 5 is connected to nodes 2, 7.\nNode 1 is connected to node 2.\nNode 6 is connected to nodes 0, 3, 4.\nNode 3 is connected to node 6.\nNode 4 is connected to node 6.\nNode 7 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 63, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 4, 6, 3, 2, 5.\nNode 4 is connected to nodes 7, 8, 3.\nNode 6 is connected to nodes 7, 8, 3.\nNode 3 is connected to nodes 7, 4, 5, 8, 6, 0.\nNode 2 is connected to nodes 7, 5, 8, 1, 0.\nNode 5 is connected to nodes 7, 8, 2, 0, 9, 1, 3.\nNode 8 is connected to nodes 4, 5, 2, 3, 6.\nNode 0 is connected to nodes 5, 2, 3, 1.\nNode 9 is connected to node 5.\nNode 1 is connected to nodes 5, 2, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 64, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 3, 9, 8, 5, 1.\nNode 3 is connected to nodes 4, 6.\nNode 9 is connected to nodes 4, 0.\nNode 8 is connected to nodes 4, 0.\nNode 5 is connected to nodes 4, 0, 1, 6.\nNode 1 is connected to nodes 4, 5, 2, 7, 6.\nNode 6 is connected to nodes 3, 5, 1, 2, 7.\nNode 0 is connected to nodes 8, 5, 9.\nNode 2 is connected to nodes 1, 6.\nNode 7 is connected to nodes 1, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 65, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 5, 2, 0, 1, 8.\nNode 5 is connected to nodes 7, 4, 6.\nNode 2 is connected to nodes 7, 8.\nNode 0 is connected to nodes 7, 4, 1, 8, 6.\nNode 1 is connected to nodes 7, 0.\nNode 8 is connected to nodes 7, 0, 2, 3.\nNode 4 is connected to nodes 5, 0, 3.\nNode 6 is connected to nodes 5, 0.\nNode 3 is connected to nodes 4, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 66, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 0, 1, 7, 2, 4.\nNode 0 is connected to nodes 5, 6, 3, 7, 4.\nNode 1 is connected to nodes 5, 6, 3, 2.\nNode 7 is connected to nodes 5, 0, 6, 4.\nNode 2 is connected to nodes 5, 1, 3.\nNode 4 is connected to nodes 5, 0, 3, 7.\nNode 6 is connected to nodes 0, 1, 7.\nNode 3 is connected to nodes 0, 1, 2, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 67, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 13, 8.\nNode 13 is connected to node 7.\nNode 8 is connected to nodes 7, 14, 3, 6.\nNode 12 is connected to nodes 0, 1, 5.\nNode 0 is connected to nodes 12, 10.\nNode 1 is connected to node 12.\nNode 5 is connected to nodes 12, 14, 2, 4.\nNode 10 is connected to node 0.\nNode 14 is connected to nodes 8, 5.\nNode 3 is connected to nodes 8, 11, 9.\nNode 6 is connected to node 8.\nNode 2 is connected to node 5.\nNode 4 is connected to node 5.\nNode 11 is connected to node 3.\nNode 9 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 68, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 7, 2, 6, 4, 5, 9, 8, 3.\nNode 7 is connected to nodes 10, 1, 6, 4, 0, 5, 9, 8, 3.\nNode 2 is connected to nodes 10, 6, 4, 5, 9, 3.\nNode 6 is connected to nodes 10, 7, 2, 1, 4, 0, 5, 9, 8, 3.\nNode 4 is connected to nodes 10, 7, 2, 6, 0, 5, 3.\nNode 5 is connected to nodes 10, 7, 2, 6, 4, 0, 9, 8, 3.\nNode 9 is connected to nodes 10, 7, 2, 6, 0, 5, 8.\nNode 8 is connected to nodes 10, 7, 1, 6, 0, 5, 9, 3.\nNode 3 is connected to nodes 10, 7, 2, 1, 6, 4, 5, 8.\nNode 1 is connected to nodes 7, 6, 0, 8, 3.\nNode 0 is connected to nodes 7, 1, 6, 4, 5, 9, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 69, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 7, 8, 2, 4, 5, 0.\nNode 7 is connected to nodes 1, 6, 8, 2, 5, 3, 0.\nNode 8 is connected to nodes 1, 7, 2, 4, 5, 3, 0.\nNode 2 is connected to nodes 1, 6, 7, 8, 5, 3.\nNode 4 is connected to nodes 1, 6, 8, 5, 3, 0.\nNode 5 is connected to nodes 1, 6, 7, 8, 2, 4, 3, 0.\nNode 0 is connected to nodes 1, 7, 8, 4, 5, 3.\nNode 6 is connected to nodes 7, 2, 4, 5, 3.\nNode 3 is connected to nodes 6, 7, 8, 2, 4, 5, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 70, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 4, 6, 1.\nNode 3 is connected to node 0.\nNode 4 is connected to node 0.\nNode 6 is connected to node 0.\nNode 1 is connected to nodes 0, 5, 2.\nNode 5 is connected to nodes 1, 8, 7.\nNode 2 is connected to node 1.\nNode 8 is connected to node 5.\nNode 7 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 71, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 2, 0, 6, 3, 4, 7.\nNode 2 is connected to nodes 5, 0, 6, 3, 4, 1, 7.\nNode 0 is connected to nodes 5, 2, 6, 3, 4, 1, 7.\nNode 6 is connected to nodes 5, 2, 0, 3, 4, 7.\nNode 3 is connected to nodes 5, 2, 0, 6, 4, 1.\nNode 4 is connected to nodes 5, 2, 0, 6, 3, 1.\nNode 7 is connected to nodes 5, 2, 0, 6, 1.\nNode 1 is connected to nodes 2, 0, 3, 4, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 72, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 4, 7, 11.\nNode 4 is connected to nodes 1, 10.\nNode 7 is connected to nodes 1, 3, 9, 11, 8, 5, 0, 6.\nNode 11 is connected to nodes 1, 9, 7.\nNode 10 is connected to nodes 4, 3, 9.\nNode 3 is connected to nodes 10, 8, 7.\nNode 8 is connected to nodes 3, 7, 6.\nNode 9 is connected to nodes 10, 11, 2, 0, 7, 5.\nNode 2 is connected to nodes 9, 5.\nNode 0 is connected to nodes 9, 7.\nNode 5 is connected to nodes 9, 7, 2.\nNode 6 is connected to nodes 7, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 73, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 0, 10, 11, 5, 7, 1, 9, 13, 4, 14, 8, 12.\nNode 0 is connected to nodes 6, 10, 2, 11, 5, 7, 1, 13, 3, 8.\nNode 10 is connected to nodes 6, 0, 2, 11, 5, 7, 1, 3, 14, 8, 12.\nNode 11 is connected to nodes 6, 0, 10, 5, 7, 1, 13, 4, 3, 8, 12.\nNode 5 is connected to nodes 6, 0, 10, 2, 11, 7, 1, 9, 13, 3, 8, 12.\nNode 7 is connected to nodes 6, 0, 10, 11, 5, 1, 13, 4, 3, 12.\nNode 1 is connected to nodes 6, 0, 10, 2, 11, 5, 7, 13, 4, 3, 14.\nNode 9 is connected to nodes 6, 2, 5, 13, 4, 3, 14, 8.\nNode 13 is connected to nodes 6, 0, 2, 11, 5, 7, 1, 9, 14, 12.\nNode 4 is connected to nodes 6, 2, 11, 7, 1, 9, 14, 8, 12.\nNode 14 is connected to nodes 6, 10, 2, 1, 9, 13, 4, 3, 8.\nNode 8 is connected to nodes 6, 0, 10, 2, 11, 5, 9, 4, 3, 14.\nNode 12 is connected to nodes 6, 10, 11, 5, 7, 13, 4, 3.\nNode 2 is connected to nodes 0, 10, 5, 1, 9, 13, 4, 3, 14, 8.\nNode 3 is connected to nodes 0, 10, 2, 11, 5, 7, 1, 9, 14, 8, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 74, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 11, 5, 0, 9, 13, 4.\nNode 11 is connected to nodes 6, 7, 14, 2, 5, 1, 12, 4.\nNode 5 is connected to nodes 6, 3, 11, 13.\nNode 0 is connected to nodes 6, 3, 14, 2, 9, 12, 4.\nNode 9 is connected to nodes 6, 3, 14, 0, 12, 10, 8.\nNode 13 is connected to nodes 6, 14, 2, 5, 12, 10.\nNode 4 is connected to nodes 6, 7, 14, 11, 0, 10.\nNode 7 is connected to nodes 11, 10, 4.\nNode 10 is connected to nodes 7, 9, 13, 4.\nNode 3 is connected to nodes 2, 5, 0, 9, 12.\nNode 2 is connected to nodes 3, 14, 11, 0, 1, 13, 12, 8.\nNode 12 is connected to nodes 3, 2, 11, 0, 9, 13.\nNode 14 is connected to nodes 2, 11, 0, 9, 13, 4, 8.\nNode 8 is connected to nodes 14, 2, 9.\nNode 1 is connected to nodes 2, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 75, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 0, 5.\nNode 0 is connected to node 6.\nNode 5 is connected to nodes 6, 9, 2, 1, 7, 4, 8.\nNode 9 is connected to nodes 3, 5.\nNode 3 is connected to node 9.\nNode 2 is connected to node 5.\nNode 1 is connected to node 5.\nNode 7 is connected to node 5.\nNode 4 is connected to node 5.\nNode 8 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 76, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 3, 5, 0.\nNode 3 is connected to nodes 4, 1.\nNode 5 is connected to nodes 4, 2.\nNode 0 is connected to nodes 4, 2.\nNode 1 is connected to node 3.\nNode 6 is connected to node 2.\nNode 2 is connected to nodes 6, 5, 0, 7.\nNode 7 is connected to node 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 77, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 2, 5.\nNode 2 is connected to nodes 4, 11.\nNode 5 is connected to node 4.\nNode 11 is connected to nodes 2, 1, 8.\nNode 3 is connected to nodes 12, 7.\nNode 12 is connected to nodes 3, 6.\nNode 7 is connected to node 3.\nNode 6 is connected to nodes 12, 9.\nNode 9 is connected to nodes 6, 1, 10.\nNode 1 is connected to nodes 9, 11, 0.\nNode 10 is connected to nodes 9, 8, 13.\nNode 0 is connected to node 1.\nNode 8 is connected to nodes 11, 10.\nNode 13 is connected to node 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 78, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 4, 3, 8, 9, 0.\nNode 4 is connected to nodes 7, 11, 2, 6, 1, 8, 0.\nNode 3 is connected to nodes 7, 11, 6, 10, 1, 9, 5.\nNode 8 is connected to nodes 7, 4, 2, 10, 1, 9.\nNode 9 is connected to nodes 7, 11, 3, 6, 1, 8, 5, 0.\nNode 0 is connected to nodes 7, 4, 2, 6, 10, 9.\nNode 11 is connected to nodes 4, 3, 2, 6, 10, 9, 5.\nNode 2 is connected to nodes 4, 11, 6, 10, 1, 8, 5, 0.\nNode 6 is connected to nodes 4, 11, 3, 2, 1, 9, 5, 0.\nNode 1 is connected to nodes 4, 3, 2, 6, 8, 9.\nNode 10 is connected to nodes 11, 3, 2, 8, 5, 0.\nNode 5 is connected to nodes 11, 3, 2, 6, 10, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 79, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 11, 9, 2, 10, 0, 8, 7, 4.\nNode 11 is connected to nodes 1, 5, 3.\nNode 9 is connected to nodes 1, 7, 8.\nNode 2 is connected to nodes 1, 4, 7.\nNode 10 is connected to nodes 1, 7, 6.\nNode 0 is connected to nodes 1, 7, 6.\nNode 8 is connected to nodes 1, 9, 4, 3, 5, 6.\nNode 7 is connected to nodes 1, 9, 4, 3, 10, 2, 6, 5, 0.\nNode 4 is connected to nodes 1, 8, 7, 2.\nNode 5 is connected to nodes 11, 8, 3, 7.\nNode 3 is connected to nodes 11, 8, 7, 5.\nNode 6 is connected to nodes 8, 7, 10, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 80, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 4, 8, 7.\nNode 4 is connected to nodes 0, 3, 7, 6, 1, 5.\nNode 8 is connected to nodes 0, 9, 5.\nNode 7 is connected to nodes 0, 4, 2.\nNode 3 is connected to nodes 4, 6, 2.\nNode 6 is connected to nodes 4, 3, 9, 2.\nNode 1 is connected to nodes 4, 2.\nNode 5 is connected to nodes 4, 8, 2.\nNode 9 is connected to nodes 8, 6, 2.\nNode 2 is connected to nodes 3, 7, 9, 6, 1, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 81, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 8, 2, 9, 3, 7, 0, 5, 10.\nNode 8 is connected to nodes 4, 1, 11, 9, 0, 5, 10.\nNode 2 is connected to nodes 4, 1, 11, 7, 0, 5.\nNode 9 is connected to nodes 4, 8, 6, 11, 3, 7, 5.\nNode 3 is connected to nodes 4, 1, 6, 11, 9, 7, 0, 5, 10.\nNode 7 is connected to nodes 4, 1, 6, 2, 11, 9, 3, 0, 5.\nNode 0 is connected to nodes 4, 8, 1, 6, 2, 11, 3, 7, 5.\nNode 5 is connected to nodes 4, 8, 6, 2, 11, 9, 3, 7, 0, 10.\nNode 10 is connected to nodes 4, 8, 1, 6, 3, 5.\nNode 1 is connected to nodes 8, 6, 2, 11, 3, 7, 0, 10.\nNode 11 is connected to nodes 8, 1, 2, 9, 3, 7, 0, 5.\nNode 6 is connected to nodes 1, 9, 3, 7, 0, 5, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 82, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 2, 5, 4.\nNode 2 is connected to nodes 12, 4, 13, 3.\nNode 5 is connected to nodes 12, 1, 6, 0, 11.\nNode 4 is connected to nodes 12, 2, 8, 6, 14.\nNode 13 is connected to nodes 2, 3, 7.\nNode 3 is connected to nodes 2, 10, 8, 13.\nNode 10 is connected to nodes 3, 7, 0.\nNode 7 is connected to nodes 10, 8, 0, 13, 14.\nNode 0 is connected to nodes 10, 7, 5, 9.\nNode 8 is connected to nodes 3, 7, 1, 4.\nNode 14 is connected to nodes 7, 9, 4.\nNode 1 is connected to nodes 8, 6, 5, 11.\nNode 6 is connected to nodes 1, 5, 9, 4, 11.\nNode 11 is connected to nodes 1, 5, 6, 9.\nNode 9 is connected to nodes 6, 0, 14, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 83, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 3, 4, 7, 9, 11, 6, 2, 5, 10, 0.\nNode 3 is connected to nodes 1, 9, 6.\nNode 4 is connected to nodes 1, 11, 8.\nNode 7 is connected to nodes 1, 2, 6.\nNode 9 is connected to nodes 1, 3, 0, 10, 2.\nNode 11 is connected to nodes 1, 0, 4.\nNode 6 is connected to nodes 1, 3, 0, 2, 8, 10, 7.\nNode 2 is connected to nodes 1, 9, 8, 10, 7, 6.\nNode 5 is connected to nodes 1, 10.\nNode 10 is connected to nodes 1, 9, 2, 5, 6.\nNode 0 is connected to nodes 1, 9, 11, 6.\nNode 8 is connected to nodes 2, 6, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 84, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 2, 12, 13, 10, 11.\nNode 2 is connected to node 4.\nNode 12 is connected to nodes 4, 9.\nNode 13 is connected to nodes 4, 6, 5, 8.\nNode 10 is connected to nodes 4, 1.\nNode 11 is connected to nodes 4, 7.\nNode 9 is connected to nodes 0, 12.\nNode 0 is connected to node 9.\nNode 1 is connected to node 10.\nNode 6 is connected to nodes 3, 13.\nNode 3 is connected to node 6.\nNode 5 is connected to node 13.\nNode 8 is connected to node 13.\nNode 7 is connected to node 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 85, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to node 6.\nNode 6 is connected to nodes 7, 5.\nNode 5 is connected to nodes 6, 4, 0, 3.\nNode 9 is connected to nodes 2, 10.\nNode 2 is connected to node 9.\nNode 10 is connected to nodes 9, 8, 3.\nNode 1 is connected to node 4.\nNode 4 is connected to nodes 1, 5.\nNode 0 is connected to nodes 5, 8.\nNode 3 is connected to nodes 5, 10.\nNode 8 is connected to nodes 10, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 86, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 5, 0.\nNode 5 is connected to nodes 4, 9.\nNode 0 is connected to nodes 4, 7, 3.\nNode 9 is connected to nodes 5, 10, 8, 6.\nNode 7 is connected to nodes 0, 1.\nNode 1 is connected to node 7.\nNode 3 is connected to node 0.\nNode 10 is connected to nodes 2, 9.\nNode 2 is connected to nodes 10, 8.\nNode 8 is connected to nodes 2, 9.\nNode 6 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 87, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to node 6.\nNode 6 is connected to nodes 1, 0.\nNode 0 is connected to nodes 6, 9.\nNode 9 is connected to nodes 7, 0.\nNode 7 is connected to nodes 9, 8.\nNode 8 is connected to nodes 7, 10, 3, 4.\nNode 10 is connected to nodes 8, 3.\nNode 3 is connected to nodes 8, 10, 5.\nNode 4 is connected to nodes 8, 2.\nNode 5 is connected to node 3.\nNode 2 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 88, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 7, 5, 0.\nNode 7 is connected to node 1.\nNode 5 is connected to nodes 1, 3, 10.\nNode 0 is connected to nodes 1, 3, 2.\nNode 3 is connected to nodes 5, 0.\nNode 10 is connected to nodes 5, 9.\nNode 2 is connected to nodes 0, 6.\nNode 9 is connected to nodes 10, 4.\nNode 4 is connected to nodes 9, 8.\nNode 8 is connected to node 4.\nNode 6 is connected to node 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 89, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 3, 6, 2, 4, 0.\nNode 3 is connected to nodes 5, 6, 2, 7, 4.\nNode 6 is connected to nodes 5, 3, 1, 7, 4, 0.\nNode 2 is connected to nodes 5, 3, 1.\nNode 4 is connected to nodes 5, 3, 6, 0.\nNode 0 is connected to nodes 5, 6, 1, 7, 4.\nNode 7 is connected to nodes 3, 6, 1, 0.\nNode 1 is connected to nodes 6, 2, 7, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 90, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 5, 9, 2, 0, 6.\nNode 5 is connected to nodes 3, 8, 9, 2, 0, 6.\nNode 9 is connected to nodes 3, 1, 5, 4, 7, 0, 6.\nNode 2 is connected to nodes 3, 1, 8, 5, 4, 0.\nNode 0 is connected to nodes 3, 1, 8, 5, 9, 4, 7, 2.\nNode 6 is connected to nodes 3, 1, 8, 5, 9, 4.\nNode 1 is connected to nodes 8, 9, 4, 2, 0, 6.\nNode 8 is connected to nodes 1, 5, 4, 7, 2, 0, 6.\nNode 4 is connected to nodes 1, 8, 9, 7, 2, 0, 6.\nNode 7 is connected to nodes 8, 9, 4, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 91, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 2, 6, 5, 0, 1.\nNode 2 is connected to nodes 7, 6, 0.\nNode 6 is connected to nodes 7, 2.\nNode 5 is connected to nodes 7, 1.\nNode 0 is connected to nodes 7, 2, 1, 3.\nNode 1 is connected to nodes 7, 5, 0, 4.\nNode 4 is connected to nodes 1, 3.\nNode 3 is connected to nodes 0, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 92, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 5, 3, 6.\nNode 5 is connected to nodes 13, 1, 0, 6.\nNode 3 is connected to nodes 13, 12, 8, 2.\nNode 6 is connected to nodes 13, 5, 2, 14.\nNode 1 is connected to nodes 5, 7, 8.\nNode 0 is connected to nodes 5, 10, 9, 14.\nNode 10 is connected to nodes 0, 2, 9, 14.\nNode 9 is connected to nodes 0, 10, 2, 11.\nNode 14 is connected to nodes 0, 10, 11, 6.\nNode 2 is connected to nodes 10, 12, 3, 11, 6, 9, 4.\nNode 12 is connected to nodes 7, 4, 3, 8, 2.\nNode 7 is connected to nodes 12, 1, 8.\nNode 4 is connected to nodes 12, 8, 2.\nNode 8 is connected to nodes 12, 7, 3, 4, 1.\nNode 11 is connected to nodes 2, 9, 14.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 93, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 0, 9, 2, 8.\nNode 0 is connected to nodes 1, 9, 7, 12, 10, 11.\nNode 9 is connected to nodes 1, 0, 3, 2, 11, 6.\nNode 2 is connected to nodes 1, 9, 3, 7.\nNode 8 is connected to nodes 1, 7, 13, 10.\nNode 7 is connected to nodes 0, 2, 10, 8.\nNode 12 is connected to nodes 0, 3.\nNode 10 is connected to nodes 0, 7, 13, 5, 8.\nNode 11 is connected to nodes 0, 9.\nNode 3 is connected to nodes 9, 6, 12, 4, 2.\nNode 6 is connected to nodes 9, 3, 5, 4, 13.\nNode 4 is connected to nodes 3, 6, 13.\nNode 5 is connected to nodes 6, 10.\nNode 13 is connected to nodes 6, 10, 8, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 94, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 5, 6, 0, 4, 8.\nNode 5 is connected to nodes 3, 9.\nNode 6 is connected to nodes 3, 7, 1.\nNode 0 is connected to node 3.\nNode 4 is connected to node 3.\nNode 8 is connected to node 3.\nNode 9 is connected to nodes 5, 2.\nNode 7 is connected to node 6.\nNode 1 is connected to node 6.\nNode 2 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 95, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 4, 0.\nNode 4 is connected to nodes 2, 1.\nNode 0 is connected to nodes 2, 6.\nNode 1 is connected to nodes 4, 5.\nNode 5 is connected to nodes 1, 3.\nNode 3 is connected to nodes 5, 7.\nNode 8 is connected to nodes 6, 7.\nNode 6 is connected to nodes 8, 0.\nNode 7 is connected to nodes 8, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 96, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 3, 8, 6.\nNode 3 is connected to nodes 4, 7.\nNode 8 is connected to nodes 4, 5.\nNode 6 is connected to nodes 4, 9.\nNode 7 is connected to nodes 3, 0.\nNode 1 is connected to nodes 9, 0.\nNode 9 is connected to nodes 1, 6.\nNode 0 is connected to nodes 1, 7.\nNode 5 is connected to nodes 8, 2.\nNode 2 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 97, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 4, 7, 1, 6, 2, 5, 8, 3.\nNode 4 is connected to nodes 0, 1, 2, 5, 8, 3.\nNode 7 is connected to nodes 0, 1, 6, 2, 3.\nNode 1 is connected to nodes 0, 4, 7, 6, 8, 3.\nNode 6 is connected to nodes 0, 7, 1, 2, 5, 8, 3.\nNode 2 is connected to nodes 0, 4, 7, 6, 8, 3.\nNode 5 is connected to nodes 0, 4, 6, 8, 3.\nNode 8 is connected to nodes 0, 4, 1, 6, 2, 5, 3.\nNode 3 is connected to nodes 0, 4, 7, 1, 6, 2, 5, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 98, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 4, 5, 0, 7, 9.\nNode 4 is connected to node 3.\nNode 5 is connected to node 3.\nNode 0 is connected to nodes 3, 8, 10, 1, 13.\nNode 7 is connected to node 3.\nNode 9 is connected to nodes 3, 6.\nNode 6 is connected to nodes 11, 9.\nNode 11 is connected to node 6.\nNode 8 is connected to node 0.\nNode 10 is connected to node 0.\nNode 1 is connected to nodes 0, 2, 12.\nNode 13 is connected to node 0.\nNode 2 is connected to node 1.\nNode 12 is connected to node 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 99, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 11, 9, 5, 7.\nNode 8 is connected to nodes 0, 11, 9, 2, 5, 3, 6.\nNode 11 is connected to nodes 0, 8, 5, 7, 10, 1.\nNode 9 is connected to nodes 0, 8, 4, 2, 7, 3, 6, 1.\nNode 5 is connected to nodes 0, 8, 11, 4, 7, 10, 1.\nNode 7 is connected to nodes 0, 11, 4, 9, 2, 5, 10, 3.\nNode 2 is connected to nodes 8, 9, 7, 3.\nNode 3 is connected to nodes 8, 4, 9, 2, 7, 10, 1.\nNode 6 is connected to nodes 8, 9, 10.\nNode 10 is connected to nodes 11, 4, 5, 7, 3, 6.\nNode 1 is connected to nodes 11, 9, 5, 3.\nNode 4 is connected to nodes 9, 5, 7, 10, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 100, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 2, 1, 11, 6, 5, 10, 9.\nNode 2 is connected to nodes 4, 0, 11, 6, 5, 7, 3.\nNode 1 is connected to nodes 4, 0, 11, 6, 5, 10, 7, 3.\nNode 11 is connected to nodes 4, 2, 1, 5, 10, 9, 3.\nNode 6 is connected to nodes 4, 2, 0, 1, 7, 9, 3.\nNode 5 is connected to nodes 4, 2, 0, 1, 11, 8, 7, 9, 3.\nNode 10 is connected to nodes 4, 0, 1, 11, 7.\nNode 9 is connected to nodes 4, 0, 11, 6, 5, 8, 7.\nNode 0 is connected to nodes 2, 1, 6, 5, 10, 8, 7, 9, 3.\nNode 7 is connected to nodes 2, 0, 1, 6, 5, 10, 9, 3.\nNode 3 is connected to nodes 2, 0, 1, 11, 6, 5, 7.\nNode 8 is connected to nodes 0, 5, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 101, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 0, 5, 4, 6, 8, 3, 11, 9.\nNode 0 is connected to nodes 2, 5, 4, 6, 1, 8, 3, 11, 9, 7.\nNode 5 is connected to nodes 2, 0, 4, 1, 8, 3, 11, 9, 12, 7.\nNode 4 is connected to nodes 2, 0, 5, 8, 3, 11, 9, 10, 12, 7.\nNode 6 is connected to nodes 2, 0, 8, 9, 10, 12, 7.\nNode 8 is connected to nodes 2, 0, 5, 4, 6, 1, 3, 10, 7.\nNode 3 is connected to nodes 2, 0, 5, 4, 1, 8, 11, 9, 10, 12, 7.\nNode 11 is connected to nodes 2, 0, 5, 4, 1, 3, 12, 7.\nNode 9 is connected to nodes 2, 0, 5, 4, 6, 3, 12, 7.\nNode 1 is connected to nodes 0, 5, 8, 3, 11, 10, 12, 7.\nNode 7 is connected to nodes 0, 5, 4, 6, 1, 8, 3, 11, 9, 10, 12.\nNode 12 is connected to nodes 5, 4, 6, 1, 3, 11, 9, 10, 7.\nNode 10 is connected to nodes 4, 6, 1, 8, 3, 12, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 102, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 7, 4.\nNode 7 is connected to nodes 3, 6, 0.\nNode 4 is connected to nodes 3, 5.\nNode 6 is connected to node 7.\nNode 0 is connected to nodes 7, 1.\nNode 5 is connected to nodes 4, 2.\nNode 2 is connected to nodes 5, 1.\nNode 1 is connected to nodes 2, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 103, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 9, 7, 1, 3, 12.\nNode 9 is connected to nodes 8, 13, 5, 2, 10, 11.\nNode 7 is connected to nodes 8, 10, 4, 3, 0, 13.\nNode 1 is connected to nodes 8, 3.\nNode 3 is connected to nodes 8, 7, 5, 1.\nNode 12 is connected to nodes 8, 10, 2, 0.\nNode 13 is connected to nodes 9, 7, 11, 6.\nNode 5 is connected to nodes 9, 6, 3, 2.\nNode 2 is connected to nodes 9, 10, 5, 12.\nNode 10 is connected to nodes 9, 7, 12, 2.\nNode 11 is connected to nodes 9, 13, 4, 6.\nNode 4 is connected to nodes 7, 11, 0.\nNode 0 is connected to nodes 7, 12, 4.\nNode 6 is connected to nodes 11, 13, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 104, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 3, 6, 0, 2.\nNode 3 is connected to nodes 4, 2, 8.\nNode 6 is connected to nodes 4, 10, 9, 1.\nNode 0 is connected to nodes 4, 7, 2.\nNode 2 is connected to nodes 4, 3, 8, 5, 0.\nNode 8 is connected to nodes 3, 10, 5, 2, 1, 9.\nNode 10 is connected to nodes 8, 9, 7, 6.\nNode 5 is connected to nodes 8, 1, 2.\nNode 1 is connected to nodes 8, 5, 9, 6.\nNode 9 is connected to nodes 8, 10, 7, 6, 1.\nNode 7 is connected to nodes 10, 9, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 105, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 2, 0, 7, 1, 4.\nNode 8 is connected to nodes 6, 2, 7, 5.\nNode 2 is connected to nodes 6, 8, 0, 3.\nNode 0 is connected to nodes 6, 2, 3, 5, 4.\nNode 7 is connected to nodes 6, 8, 1.\nNode 1 is connected to nodes 6, 7, 4.\nNode 4 is connected to nodes 6, 0, 3, 1.\nNode 5 is connected to nodes 8, 0, 3.\nNode 3 is connected to nodes 2, 0, 5, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 106, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to node 1.\nNode 1 is connected to nodes 0, 9.\nNode 9 is connected to nodes 1, 4.\nNode 4 is connected to nodes 9, 2.\nNode 2 is connected to nodes 4, 8.\nNode 8 is connected to nodes 2, 3, 5.\nNode 10 is connected to nodes 7, 3.\nNode 7 is connected to nodes 10, 6.\nNode 3 is connected to nodes 10, 8, 6.\nNode 6 is connected to nodes 7, 3.\nNode 5 is connected to node 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 107, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 3, 13, 12, 2, 4, 10, 0, 6, 11, 9.\nNode 3 is connected to nodes 7, 6, 5, 11, 13.\nNode 13 is connected to nodes 7, 3, 2, 4, 11, 0.\nNode 12 is connected to nodes 7, 8, 9, 10, 5.\nNode 2 is connected to nodes 7, 13, 11.\nNode 4 is connected to nodes 7, 13, 9.\nNode 10 is connected to nodes 7, 12, 0, 11.\nNode 0 is connected to nodes 7, 13, 8, 10.\nNode 6 is connected to nodes 7, 3, 1, 11, 5.\nNode 11 is connected to nodes 7, 3, 13, 6, 2, 10.\nNode 9 is connected to nodes 7, 12, 8, 4.\nNode 5 is connected to nodes 3, 12, 6, 1.\nNode 8 is connected to nodes 12, 0, 9, 1.\nNode 1 is connected to nodes 8, 6, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 108, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 10, 0, 3, 8, 7, 9, 5, 11.\nNode 10 is connected to nodes 4, 3, 2, 8, 7, 6, 1, 11.\nNode 0 is connected to nodes 4, 2, 8, 6, 1.\nNode 3 is connected to nodes 4, 10, 2, 7, 9, 6, 5, 11.\nNode 8 is connected to nodes 4, 10, 0, 7, 1, 11.\nNode 7 is connected to nodes 4, 10, 3, 2, 8, 6, 1, 11.\nNode 9 is connected to nodes 4, 3, 6, 11.\nNode 5 is connected to nodes 4, 3, 2, 6, 1, 11.\nNode 11 is connected to nodes 4, 10, 3, 8, 7, 9, 5.\nNode 2 is connected to nodes 10, 0, 3, 7, 6, 5.\nNode 6 is connected to nodes 10, 0, 3, 2, 7, 9, 5.\nNode 1 is connected to nodes 10, 0, 8, 7, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 109, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 4, 7, 6, 1, 5, 2.\nNode 4 is connected to nodes 3, 7, 6, 9, 8, 1, 5, 0, 2.\nNode 7 is connected to nodes 3, 4, 9, 8, 1, 5, 0, 2.\nNode 6 is connected to nodes 3, 4, 5, 0.\nNode 1 is connected to nodes 3, 4, 7, 9, 8, 0, 2.\nNode 5 is connected to nodes 3, 4, 7, 6, 9, 8, 0.\nNode 2 is connected to nodes 3, 4, 7, 8, 1, 0.\nNode 9 is connected to nodes 4, 7, 8, 1, 5.\nNode 8 is connected to nodes 4, 7, 9, 1, 5, 2.\nNode 0 is connected to nodes 4, 7, 6, 1, 5, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 110, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 6, 7, 9, 5.\nNode 8 is connected to nodes 0, 2, 1, 7.\nNode 6 is connected to nodes 0, 7, 9, 5.\nNode 7 is connected to nodes 0, 8, 6, 1, 4.\nNode 9 is connected to nodes 0, 6, 1.\nNode 5 is connected to nodes 0, 6, 2, 4.\nNode 2 is connected to nodes 8, 1, 4, 5.\nNode 1 is connected to nodes 8, 2, 4, 7, 9.\nNode 4 is connected to nodes 2, 3, 1, 7, 5.\nNode 3 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 111, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 9, 3, 4, 2, 8, 7, 5, 6, 1.\nNode 9 is connected to nodes 0, 2.\nNode 3 is connected to nodes 0, 2, 7, 6, 4, 1.\nNode 4 is connected to nodes 0, 3, 8, 5.\nNode 2 is connected to nodes 0, 9, 3, 5, 1, 6.\nNode 8 is connected to nodes 0, 4.\nNode 7 is connected to nodes 0, 3, 1.\nNode 5 is connected to nodes 0, 2, 4.\nNode 6 is connected to nodes 0, 3, 2.\nNode 1 is connected to nodes 0, 3, 2, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 112, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 5, 4.\nNode 5 is connected to nodes 8, 7, 0.\nNode 4 is connected to node 8.\nNode 7 is connected to node 5.\nNode 0 is connected to nodes 5, 2.\nNode 9 is connected to node 6.\nNode 6 is connected to nodes 9, 2, 3.\nNode 2 is connected to nodes 6, 0, 1.\nNode 3 is connected to nodes 6, 10.\nNode 1 is connected to nodes 2, 10.\nNode 10 is connected to nodes 1, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 113, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 5, 3, 12, 9, 6, 8, 2.\nNode 5 is connected to nodes 0, 10.\nNode 3 is connected to nodes 0, 12, 8, 10, 7, 6, 1, 4.\nNode 12 is connected to nodes 0, 3, 1, 2.\nNode 9 is connected to nodes 0, 2.\nNode 6 is connected to nodes 0, 3.\nNode 8 is connected to nodes 0, 3, 4.\nNode 2 is connected to nodes 0, 12, 9.\nNode 10 is connected to nodes 5, 3, 11, 7.\nNode 7 is connected to nodes 3, 10.\nNode 1 is connected to nodes 3, 12.\nNode 4 is connected to nodes 3, 8, 11.\nNode 11 is connected to nodes 10, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 114, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 3, 10.\nNode 3 is connected to node 1.\nNode 10 is connected to nodes 1, 7, 9, 11.\nNode 7 is connected to nodes 8, 10.\nNode 8 is connected to node 7.\nNode 9 is connected to node 10.\nNode 11 is connected to nodes 10, 6.\nNode 6 is connected to nodes 11, 0.\nNode 0 is connected to nodes 6, 5, 2, 4.\nNode 5 is connected to node 0.\nNode 2 is connected to node 0.\nNode 4 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 115, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 0, 7, 4, 5, 6, 2, 1.\nNode 0 is connected to nodes 3, 9, 4, 5, 6, 2, 1.\nNode 7 is connected to nodes 3, 8, 9, 4, 5, 6, 2.\nNode 4 is connected to nodes 3, 0, 8, 9, 7, 5, 2, 1.\nNode 5 is connected to nodes 3, 0, 8, 9, 7, 4, 6, 2, 1.\nNode 6 is connected to nodes 3, 0, 8, 9, 7, 5, 2.\nNode 2 is connected to nodes 3, 0, 8, 9, 7, 4, 5, 6.\nNode 1 is connected to nodes 3, 0, 8, 9, 4, 5.\nNode 9 is connected to nodes 0, 8, 7, 4, 5, 6, 2, 1.\nNode 8 is connected to nodes 9, 7, 4, 5, 6, 2, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 116, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 5, 1, 9.\nNode 5 is connected to nodes 7, 0.\nNode 1 is connected to nodes 7, 4, 3.\nNode 9 is connected to nodes 7, 0.\nNode 0 is connected to nodes 5, 9.\nNode 4 is connected to node 1.\nNode 3 is connected to nodes 1, 6.\nNode 8 is connected to nodes 6, 2.\nNode 6 is connected to nodes 8, 3.\nNode 2 is connected to node 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 117, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 14, 5, 2, 1.\nNode 14 is connected to nodes 7, 0, 13, 6.\nNode 5 is connected to nodes 7, 1, 8.\nNode 2 is connected to nodes 7, 4, 8, 9.\nNode 1 is connected to nodes 7, 5, 12, 4.\nNode 0 is connected to nodes 14, 10, 11, 8.\nNode 13 is connected to nodes 14, 10, 4, 9.\nNode 6 is connected to nodes 14, 10, 3, 11, 4.\nNode 8 is connected to nodes 5, 0, 12, 4, 2.\nNode 12 is connected to nodes 1, 3, 8.\nNode 4 is connected to nodes 1, 6, 13, 8, 2.\nNode 10 is connected to nodes 3, 6, 13, 0, 11.\nNode 3 is connected to nodes 10, 11, 12, 6.\nNode 11 is connected to nodes 10, 3, 0, 6.\nNode 9 is connected to nodes 2, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 118, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 12, 7, 2, 13, 14.\nNode 8 is connected to nodes 0, 12, 4, 6, 7.\nNode 12 is connected to nodes 0, 8, 6, 9, 11.\nNode 7 is connected to nodes 0, 8, 10, 6, 5, 9.\nNode 2 is connected to nodes 0, 10, 4, 6, 5, 13.\nNode 13 is connected to nodes 0, 4, 2, 3.\nNode 14 is connected to nodes 0, 4, 6.\nNode 4 is connected to nodes 8, 11, 2, 13, 14, 3.\nNode 6 is connected to nodes 8, 12, 7, 11, 2, 14.\nNode 1 is connected to node 10.\nNode 10 is connected to nodes 1, 7, 2.\nNode 9 is connected to nodes 12, 5, 7.\nNode 11 is connected to nodes 12, 4, 6, 5.\nNode 3 is connected to nodes 4, 13.\nNode 5 is connected to nodes 7, 9, 11, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 119, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 0, 2, 6, 5.\nNode 0 is connected to nodes 7, 3, 6, 5.\nNode 2 is connected to nodes 7, 6, 5.\nNode 6 is connected to nodes 7, 0, 2, 4.\nNode 5 is connected to nodes 7, 0, 2, 1, 4.\nNode 3 is connected to nodes 0, 1.\nNode 1 is connected to nodes 3, 5.\nNode 4 is connected to nodes 6, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 120, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 1, 8, 9, 0, 2.\nNode 1 is connected to nodes 7, 4, 10.\nNode 8 is connected to nodes 7, 6.\nNode 9 is connected to nodes 7, 5.\nNode 0 is connected to nodes 7, 5, 4, 3, 2, 10.\nNode 2 is connected to nodes 7, 4, 3, 0.\nNode 4 is connected to nodes 1, 0, 2.\nNode 10 is connected to nodes 1, 6, 0.\nNode 5 is connected to nodes 3, 9, 0.\nNode 3 is connected to nodes 5, 0, 2.\nNode 6 is connected to nodes 8, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 121, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 2, 12, 8, 1, 6.\nNode 2 is connected to node 7.\nNode 12 is connected to node 7.\nNode 8 is connected to nodes 7, 9, 10, 11.\nNode 1 is connected to node 7.\nNode 6 is connected to node 7.\nNode 9 is connected to nodes 13, 8.\nNode 13 is connected to nodes 9, 4, 5.\nNode 4 is connected to node 13.\nNode 5 is connected to nodes 13, 0.\nNode 10 is connected to node 8.\nNode 11 is connected to node 8.\nNode 0 is connected to nodes 5, 3.\nNode 3 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n```"}, {"id": 122, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 4, 3.\nNode 4 is connected to nodes 0, 5, 7, 1.\nNode 3 is connected to node 0.\nNode 5 is connected to nodes 4, 2, 6.\nNode 7 is connected to nodes 4, 2.\nNode 1 is connected to node 4.\nNode 2 is connected to nodes 7, 5.\nNode 6 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 123, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 11, 9, 3, 2.\nNode 11 is connected to nodes 7, 4, 10, 1, 6, 5, 9, 3, 0, 2.\nNode 9 is connected to nodes 7, 4, 10, 6, 5, 11, 0, 2.\nNode 3 is connected to nodes 7, 4, 1, 6, 11, 0, 8, 2.\nNode 2 is connected to nodes 7, 4, 10, 1, 6, 11, 9, 3, 0.\nNode 4 is connected to nodes 11, 9, 3, 2.\nNode 10 is connected to nodes 1, 11, 9, 2.\nNode 1 is connected to nodes 10, 5, 11, 3, 0, 2.\nNode 5 is connected to nodes 1, 11, 9, 0, 8.\nNode 0 is connected to nodes 1, 6, 5, 11, 9, 3, 2.\nNode 6 is connected to nodes 11, 9, 3, 0, 2.\nNode 8 is connected to nodes 5, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 124, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 5, 2, 6, 4, 8, 1, 3, 0.\nNode 5 is connected to nodes 7, 2, 6, 3, 0.\nNode 2 is connected to nodes 7, 5, 4, 8, 1, 3, 0.\nNode 6 is connected to nodes 7, 5, 1, 3.\nNode 4 is connected to nodes 7, 2, 8, 1, 3.\nNode 8 is connected to nodes 7, 2, 4, 1, 0.\nNode 1 is connected to nodes 7, 2, 6, 4, 8, 3.\nNode 3 is connected to nodes 7, 5, 2, 6, 4, 1, 0.\nNode 0 is connected to nodes 7, 5, 2, 8, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 125, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 9, 1, 0, 7, 2, 3.\nNode 4 is connected to nodes 5, 8.\nNode 9 is connected to nodes 5, 8.\nNode 1 is connected to nodes 5, 6.\nNode 0 is connected to nodes 5, 6.\nNode 7 is connected to nodes 5, 3, 2, 6, 8.\nNode 2 is connected to nodes 5, 7.\nNode 3 is connected to nodes 5, 7.\nNode 8 is connected to nodes 4, 7, 6, 9.\nNode 6 is connected to nodes 7, 1, 0, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 126, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 6, 2, 3, 10, 7.\nNode 6 is connected to nodes 5, 9, 11, 2, 7, 3, 0, 1.\nNode 2 is connected to nodes 5, 6, 0, 4, 7.\nNode 3 is connected to nodes 5, 6, 9, 4.\nNode 10 is connected to nodes 5, 11, 1, 8.\nNode 7 is connected to nodes 5, 6, 0, 4, 2, 8.\nNode 9 is connected to nodes 6, 8, 3.\nNode 11 is connected to nodes 6, 0, 10.\nNode 0 is connected to nodes 6, 11, 8, 2, 7.\nNode 1 is connected to nodes 6, 4, 10.\nNode 8 is connected to nodes 0, 9, 10, 7.\nNode 4 is connected to nodes 1, 3, 7, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 127, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 7, 1.\nNode 8 is connected to nodes 6, 4.\nNode 7 is connected to nodes 6, 0.\nNode 1 is connected to nodes 6, 4.\nNode 4 is connected to nodes 8, 2, 1.\nNode 0 is connected to node 7.\nNode 2 is connected to nodes 9, 4.\nNode 9 is connected to nodes 2, 5, 3.\nNode 5 is connected to node 9.\nNode 3 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 128, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 11, 12, 5, 13, 7, 6, 0, 10, 4.\nNode 11 is connected to nodes 9, 5, 13, 7, 10, 1.\nNode 12 is connected to nodes 9, 5, 13, 7, 8, 6, 0, 2, 10, 4, 3.\nNode 5 is connected to nodes 9, 11, 12, 13, 7, 8, 2, 4, 1.\nNode 13 is connected to nodes 9, 11, 12, 5, 8, 6, 0, 2, 10, 3, 1.\nNode 7 is connected to nodes 9, 11, 12, 5, 6, 2, 10, 4, 3.\nNode 6 is connected to nodes 9, 12, 13, 7, 8, 0, 2, 10, 4, 3, 1.\nNode 0 is connected to nodes 9, 12, 13, 8, 6, 2, 10, 3, 1.\nNode 10 is connected to nodes 9, 11, 12, 13, 7, 8, 6, 0, 4, 1.\nNode 4 is connected to nodes 9, 12, 5, 7, 8, 6, 2, 10, 1.\nNode 1 is connected to nodes 11, 5, 13, 8, 6, 0, 10, 4, 3.\nNode 8 is connected to nodes 12, 5, 13, 6, 0, 2, 10, 4, 1.\nNode 2 is connected to nodes 12, 5, 13, 7, 8, 6, 0, 4.\nNode 3 is connected to nodes 12, 13, 7, 6, 0, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 129, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to node 5.\nNode 5 is connected to nodes 4, 1, 7.\nNode 1 is connected to nodes 5, 6, 3.\nNode 7 is connected to nodes 5, 2.\nNode 6 is connected to nodes 0, 1.\nNode 0 is connected to nodes 6, 3.\nNode 3 is connected to nodes 0, 1.\nNode 2 is connected to node 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 130, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 12, 8.\nNode 12 is connected to nodes 10, 4, 1.\nNode 8 is connected to node 10.\nNode 4 is connected to node 12.\nNode 1 is connected to nodes 12, 5.\nNode 6 is connected to nodes 9, 7, 11.\nNode 9 is connected to nodes 6, 3.\nNode 7 is connected to nodes 6, 2, 11.\nNode 11 is connected to nodes 6, 7.\nNode 3 is connected to node 9.\nNode 5 is connected to nodes 1, 0.\nNode 0 is connected to nodes 2, 5.\nNode 2 is connected to nodes 0, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 131, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 4, 3, 2, 1, 0, 6.\nNode 4 is connected to nodes 7, 3, 5, 1, 0, 6.\nNode 3 is connected to nodes 7, 4, 2, 1, 0, 6.\nNode 2 is connected to nodes 7, 3, 5, 1, 0.\nNode 1 is connected to nodes 7, 4, 3, 5, 2, 0, 6.\nNode 0 is connected to nodes 7, 4, 3, 5, 2, 1, 6.\nNode 6 is connected to nodes 7, 4, 3, 1, 0.\nNode 5 is connected to nodes 4, 2, 1, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 132, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to node 6.\nNode 6 is connected to nodes 9, 2.\nNode 2 is connected to nodes 6, 8, 3.\nNode 5 is connected to nodes 7, 3, 0.\nNode 7 is connected to nodes 5, 3.\nNode 3 is connected to nodes 5, 7, 2.\nNode 0 is connected to nodes 5, 4.\nNode 4 is connected to nodes 0, 10.\nNode 10 is connected to nodes 4, 1.\nNode 1 is connected to node 10.\nNode 8 is connected to node 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 133, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 9, 4, 2, 3.\nNode 9 is connected to nodes 0, 5, 1, 2.\nNode 4 is connected to nodes 0, 6, 10, 1, 2.\nNode 2 is connected to nodes 0, 9, 10, 4.\nNode 3 is connected to nodes 0, 5, 7, 6, 8.\nNode 5 is connected to nodes 9, 3, 8, 1.\nNode 1 is connected to nodes 9, 5, 4.\nNode 8 is connected to nodes 5, 3, 10.\nNode 7 is connected to nodes 3, 6, 10.\nNode 6 is connected to nodes 3, 7, 10, 4.\nNode 10 is connected to nodes 7, 6, 4, 2, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 134, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 6, 0, 7, 2, 5.\nNode 6 is connected to nodes 3, 4, 10, 5.\nNode 0 is connected to nodes 3, 8, 9, 5, 7.\nNode 7 is connected to nodes 3, 0, 4.\nNode 2 is connected to nodes 3, 8.\nNode 5 is connected to nodes 3, 6, 0, 12, 9, 1.\nNode 4 is connected to nodes 6, 8, 12, 7.\nNode 10 is connected to nodes 6, 8, 11, 1, 12.\nNode 8 is connected to nodes 0, 4, 2, 9, 10.\nNode 9 is connected to nodes 0, 8, 5.\nNode 11 is connected to nodes 10, 1.\nNode 1 is connected to nodes 11, 10, 5, 12.\nNode 12 is connected to nodes 10, 5, 1, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 135, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 3, 4, 5, 9, 2, 1.\nNode 3 is connected to nodes 6, 7, 4, 5, 9, 0, 1.\nNode 4 is connected to nodes 6, 7, 3, 5, 9, 0, 2, 1.\nNode 5 is connected to nodes 6, 8, 7, 3, 4, 9, 2, 1.\nNode 9 is connected to nodes 6, 7, 3, 4, 5, 0, 2, 1.\nNode 2 is connected to nodes 6, 8, 7, 4, 5, 9, 0, 1.\nNode 1 is connected to nodes 6, 7, 3, 4, 5, 9, 2.\nNode 8 is connected to nodes 7, 5, 2.\nNode 7 is connected to nodes 8, 3, 4, 5, 9, 2, 1.\nNode 0 is connected to nodes 3, 4, 9, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 136, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 7, 8, 1.\nNode 7 is connected to nodes 0, 11, 3, 10, 8, 9, 6, 5.\nNode 8 is connected to nodes 0, 7, 9, 4, 11, 12, 6, 3.\nNode 1 is connected to nodes 0, 9, 11, 12, 3, 5, 2.\nNode 11 is connected to nodes 7, 9, 6, 1, 8, 2.\nNode 3 is connected to nodes 7, 8, 1.\nNode 10 is connected to nodes 7, 4, 5, 2.\nNode 9 is connected to nodes 7, 4, 11, 5, 1, 2, 8.\nNode 6 is connected to nodes 7, 11, 8, 5, 2.\nNode 5 is connected to nodes 7, 9, 4, 12, 6, 1, 10.\nNode 4 is connected to nodes 9, 5, 10, 8, 12.\nNode 2 is connected to nodes 9, 11, 6, 1, 10.\nNode 12 is connected to nodes 4, 8, 5, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 137, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 4, 9, 10.\nNode 4 is connected to nodes 2, 6, 7, 10.\nNode 9 is connected to nodes 2, 11, 5, 7.\nNode 10 is connected to nodes 2, 4, 7, 12.\nNode 6 is connected to nodes 4, 0, 11, 5.\nNode 7 is connected to nodes 4, 0, 9, 12, 10.\nNode 8 is connected to nodes 3, 5, 0.\nNode 3 is connected to nodes 8, 0, 5, 1.\nNode 5 is connected to nodes 8, 3, 9, 6, 1.\nNode 0 is connected to nodes 8, 3, 6, 7, 11.\nNode 1 is connected to nodes 3, 11, 5, 12.\nNode 11 is connected to nodes 0, 9, 6, 1.\nNode 12 is connected to nodes 1, 7, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 138, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 3, 6, 0, 7.\nNode 3 is connected to nodes 1, 6, 2, 4, 5.\nNode 6 is connected to nodes 1, 3, 2, 4, 0, 7.\nNode 0 is connected to nodes 1, 6, 7, 5.\nNode 7 is connected to nodes 1, 6, 4, 0.\nNode 2 is connected to nodes 3, 6.\nNode 4 is connected to nodes 3, 6, 7, 5.\nNode 5 is connected to nodes 3, 4, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 139, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 1, 7, 8, 10, 6.\nNode 1 is connected to nodes 0, 5, 8, 10, 9, 6, 4.\nNode 7 is connected to nodes 0, 2, 8, 10, 6, 4.\nNode 8 is connected to nodes 0, 2, 5, 1, 7, 10, 9, 6, 4.\nNode 10 is connected to nodes 0, 2, 1, 7, 8, 3, 6.\nNode 6 is connected to nodes 0, 5, 1, 7, 8, 10, 9, 4.\nNode 2 is connected to nodes 5, 7, 8, 10, 3.\nNode 5 is connected to nodes 2, 1, 8, 6, 4.\nNode 3 is connected to nodes 2, 10, 9, 4.\nNode 4 is connected to nodes 5, 1, 7, 8, 9, 3, 6.\nNode 9 is connected to nodes 1, 8, 3, 6, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 140, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 7, 1, 6, 9, 0.\nNode 7 is connected to nodes 4, 0, 8, 6, 5, 2.\nNode 1 is connected to nodes 4, 5, 8.\nNode 6 is connected to nodes 4, 7, 8, 9, 3.\nNode 9 is connected to nodes 4, 0, 6, 3.\nNode 0 is connected to nodes 4, 7, 9.\nNode 8 is connected to nodes 7, 1, 2, 6.\nNode 5 is connected to nodes 7, 1, 2.\nNode 2 is connected to nodes 7, 5, 8, 3.\nNode 3 is connected to nodes 6, 9, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 141, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 10, 12, 11, 8, 9.\nNode 10 is connected to nodes 1, 8, 11, 5.\nNode 12 is connected to nodes 1, 4, 6, 8, 7, 11.\nNode 11 is connected to nodes 1, 10, 12, 6, 3, 8, 4, 9, 7, 0, 5.\nNode 8 is connected to nodes 1, 10, 12, 6, 3, 4, 11, 7, 5, 2.\nNode 9 is connected to nodes 1, 4, 2, 11.\nNode 5 is connected to nodes 10, 8, 11.\nNode 4 is connected to nodes 12, 6, 8, 9, 11, 2.\nNode 6 is connected to nodes 12, 3, 8, 7, 4, 11.\nNode 7 is connected to nodes 12, 6, 8, 11, 2.\nNode 3 is connected to nodes 6, 2, 8, 11.\nNode 2 is connected to nodes 3, 8, 4, 9, 7, 0.\nNode 0 is connected to nodes 11, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 142, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 1, 7, 4, 3.\nNode 1 is connected to nodes 5, 11, 13, 12.\nNode 7 is connected to nodes 5, 10, 9, 2, 0.\nNode 4 is connected to nodes 5, 6, 3, 12.\nNode 3 is connected to nodes 5, 4, 13, 12.\nNode 11 is connected to nodes 1, 10, 9, 8.\nNode 13 is connected to nodes 1, 8, 3.\nNode 12 is connected to nodes 1, 6, 4, 10, 3.\nNode 6 is connected to nodes 4, 12, 2, 10.\nNode 2 is connected to nodes 6, 7, 10, 0.\nNode 10 is connected to nodes 6, 7, 12, 2, 11.\nNode 9 is connected to nodes 7, 8, 0, 11.\nNode 0 is connected to nodes 7, 9, 2.\nNode 8 is connected to nodes 9, 13, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 143, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 4, 0, 2, 5, 6, 7.\nNode 4 is connected to nodes 1, 9, 0, 5.\nNode 0 is connected to nodes 1, 4, 2, 5, 8, 6.\nNode 2 is connected to nodes 1, 5, 7, 0, 9, 3, 11, 10, 12, 8.\nNode 5 is connected to nodes 1, 4, 2, 9, 0, 7, 12, 11, 3, 6.\nNode 6 is connected to nodes 1, 5, 0, 11.\nNode 7 is connected to nodes 1, 2, 5, 9, 10, 12.\nNode 9 is connected to nodes 4, 2, 5, 8, 3, 7.\nNode 3 is connected to nodes 2, 5, 11, 9, 10.\nNode 11 is connected to nodes 2, 5, 6, 10, 3.\nNode 10 is connected to nodes 2, 11, 3, 7.\nNode 12 is connected to nodes 2, 5, 7.\nNode 8 is connected to nodes 2, 0, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 144, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 11, 9, 5, 7, 10, 13, 1, 2, 4, 8, 0, 3.\nNode 11 is connected to nodes 12, 7, 13, 4, 8, 0.\nNode 9 is connected to nodes 12, 7, 10, 13, 1, 4, 8, 0.\nNode 5 is connected to nodes 12, 7, 10, 6, 13, 2, 4, 8, 3.\nNode 7 is connected to nodes 12, 11, 9, 5, 10, 13, 1, 4, 8, 3.\nNode 10 is connected to nodes 12, 9, 5, 7, 13, 2, 4, 3.\nNode 13 is connected to nodes 12, 11, 9, 5, 7, 10, 6, 1, 2, 4, 8, 0.\nNode 1 is connected to nodes 12, 9, 7, 13, 2, 0.\nNode 2 is connected to nodes 12, 5, 10, 13, 1, 4, 3.\nNode 4 is connected to nodes 12, 11, 9, 5, 7, 10, 13, 2, 8, 0, 3.\nNode 8 is connected to nodes 12, 11, 9, 5, 7, 6, 13, 4, 0.\nNode 0 is connected to nodes 12, 11, 9, 13, 1, 4, 8, 3.\nNode 3 is connected to nodes 12, 5, 7, 10, 6, 2, 4, 0.\nNode 6 is connected to nodes 5, 13, 8, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 145, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 12, 10, 13, 1, 9, 14.\nNode 12 is connected to nodes 3, 0, 13, 8, 9.\nNode 10 is connected to nodes 3, 5, 6, 8, 11, 2, 4, 14.\nNode 13 is connected to nodes 3, 12, 5, 0, 8, 11, 2, 4, 7, 14.\nNode 1 is connected to nodes 3, 5, 6, 0, 8, 11, 9, 7.\nNode 9 is connected to nodes 3, 12, 5, 6, 8, 11, 1, 7.\nNode 14 is connected to nodes 3, 5, 10, 13, 8, 2, 4, 7.\nNode 0 is connected to nodes 12, 13, 8, 11, 1, 2.\nNode 8 is connected to nodes 12, 6, 10, 0, 13, 11, 1, 9, 2, 4, 14.\nNode 5 is connected to nodes 6, 10, 13, 1, 9, 4, 14.\nNode 6 is connected to nodes 5, 10, 8, 1, 9, 2, 4, 7.\nNode 4 is connected to nodes 5, 6, 10, 13, 8, 11, 2, 7, 14.\nNode 2 is connected to nodes 6, 10, 0, 13, 8, 4, 7, 14.\nNode 7 is connected to nodes 6, 13, 11, 1, 9, 2, 4, 14.\nNode 11 is connected to nodes 10, 0, 13, 8, 1, 9, 4, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 146, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 8, 13, 0, 11, 3, 1, 12, 4.\nNode 8 is connected to nodes 10, 5, 9, 13, 7, 0, 11, 1, 12, 2, 4.\nNode 13 is connected to nodes 10, 5, 9, 8, 7, 3, 1, 12.\nNode 0 is connected to nodes 10, 5, 9, 8, 11, 12, 2, 4.\nNode 11 is connected to nodes 10, 5, 9, 8, 7, 0, 1, 12, 4.\nNode 3 is connected to nodes 10, 5, 9, 13, 1, 12, 2, 4.\nNode 1 is connected to nodes 10, 9, 8, 13, 7, 11, 6, 3, 12, 2, 4.\nNode 12 is connected to nodes 10, 5, 9, 8, 13, 0, 11, 3, 1, 2, 4.\nNode 4 is connected to nodes 10, 8, 7, 0, 11, 6, 3, 1, 12, 2.\nNode 5 is connected to nodes 8, 13, 0, 11, 6, 3, 12.\nNode 6 is connected to nodes 5, 9, 7, 1, 2, 4.\nNode 9 is connected to nodes 8, 13, 0, 11, 6, 3, 1, 12, 2.\nNode 2 is connected to nodes 9, 8, 7, 0, 6, 3, 1, 12, 4.\nNode 7 is connected to nodes 8, 13, 11, 6, 1, 2, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 147, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 1, 4, 0, 7.\nNode 1 is connected to nodes 5, 6, 4, 2, 7.\nNode 4 is connected to nodes 5, 1, 2, 0, 7.\nNode 0 is connected to nodes 5, 4, 2, 7, 3.\nNode 7 is connected to nodes 5, 6, 1, 4, 2, 0, 3.\nNode 6 is connected to nodes 1, 7.\nNode 2 is connected to nodes 1, 4, 0, 7, 3.\nNode 3 is connected to nodes 2, 0, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 148, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 3, 2, 6, 4, 9.\nNode 8 is connected to nodes 0, 2, 4, 9.\nNode 3 is connected to nodes 0, 2, 6, 4, 9.\nNode 2 is connected to nodes 0, 8, 3, 4, 1.\nNode 6 is connected to nodes 0, 3, 5.\nNode 4 is connected to nodes 0, 8, 3, 2, 7, 1, 9.\nNode 9 is connected to nodes 0, 8, 3, 4.\nNode 1 is connected to nodes 2, 4.\nNode 5 is connected to nodes 6, 7.\nNode 7 is connected to nodes 4, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 149, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 1, 0, 9, 8, 4, 6, 3, 7.\nNode 1 is connected to nodes 2, 9, 10, 8, 5, 4, 6, 3.\nNode 0 is connected to nodes 2, 9, 10, 5, 4, 6, 3, 7.\nNode 9 is connected to nodes 2, 1, 0, 10, 5, 6, 3, 7.\nNode 8 is connected to nodes 2, 1, 10, 5, 4, 3.\nNode 4 is connected to nodes 2, 1, 0, 10, 8, 5, 6, 3, 7.\nNode 6 is connected to nodes 2, 1, 0, 9, 4, 3, 7.\nNode 3 is connected to nodes 2, 1, 0, 9, 10, 8, 5, 4, 6, 7.\nNode 7 is connected to nodes 2, 0, 9, 10, 5, 4, 6, 3.\nNode 10 is connected to nodes 1, 0, 9, 8, 5, 4, 3, 7.\nNode 5 is connected to nodes 1, 0, 9, 10, 8, 4, 3, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 150, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 4, 6, 0, 14, 9, 7, 3.\nNode 4 is connected to nodes 8, 9.\nNode 6 is connected to nodes 8, 9, 1, 0, 2.\nNode 0 is connected to nodes 8, 6, 10.\nNode 14 is connected to nodes 8, 9.\nNode 9 is connected to nodes 8, 4, 5, 12, 14, 7, 11, 3, 1, 6, 2.\nNode 7 is connected to nodes 8, 9, 10.\nNode 3 is connected to nodes 8, 9.\nNode 5 is connected to nodes 9, 12, 11.\nNode 12 is connected to nodes 9, 5.\nNode 11 is connected to nodes 9, 5.\nNode 1 is connected to nodes 9, 6, 13.\nNode 2 is connected to nodes 9, 6, 13.\nNode 10 is connected to nodes 0, 7.\nNode 13 is connected to nodes 1, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 151, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 12, 0, 9.\nNode 12 is connected to nodes 2, 10, 13, 0.\nNode 0 is connected to nodes 2, 12, 13, 10, 5.\nNode 9 is connected to nodes 2, 4, 1, 13, 8.\nNode 10 is connected to nodes 12, 0, 1, 5.\nNode 13 is connected to nodes 12, 9, 0, 8.\nNode 4 is connected to nodes 9, 3, 7, 6.\nNode 3 is connected to nodes 4, 7, 5, 11.\nNode 7 is connected to nodes 4, 6, 11, 3.\nNode 6 is connected to nodes 4, 1, 8, 7.\nNode 1 is connected to nodes 9, 10, 8, 6.\nNode 8 is connected to nodes 9, 1, 6, 13.\nNode 5 is connected to nodes 0, 10, 3, 11.\nNode 11 is connected to nodes 7, 3, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 152, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to node 8.\nNode 8 is connected to nodes 1, 3, 6, 4, 12.\nNode 3 is connected to nodes 8, 13, 5, 4, 0.\nNode 6 is connected to nodes 8, 11, 2.\nNode 4 is connected to nodes 8, 3, 11, 10, 0.\nNode 12 is connected to nodes 8, 11.\nNode 13 is connected to nodes 3, 14.\nNode 5 is connected to nodes 3, 7, 9.\nNode 0 is connected to nodes 3, 7, 4.\nNode 14 is connected to nodes 13, 11.\nNode 11 is connected to nodes 7, 14, 6, 4, 12.\nNode 7 is connected to nodes 11, 9, 5, 0.\nNode 9 is connected to nodes 7, 5.\nNode 10 is connected to nodes 4, 2.\nNode 2 is connected to nodes 10, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 153, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 6.\nNode 2 is connected to nodes 0, 5, 7.\nNode 6 is connected to nodes 0, 3.\nNode 5 is connected to nodes 2, 1.\nNode 7 is connected to nodes 2, 4.\nNode 1 is connected to node 5.\nNode 3 is connected to nodes 6, 4.\nNode 4 is connected to nodes 3, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 154, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 7, 6, 1, 4, 5, 10, 9, 0, 8.\nNode 7 is connected to nodes 2, 6, 8.\nNode 6 is connected to nodes 2, 7, 9.\nNode 1 is connected to nodes 2, 4, 10, 5, 3.\nNode 4 is connected to nodes 2, 1, 3, 0.\nNode 5 is connected to nodes 2, 1, 3, 9.\nNode 10 is connected to nodes 2, 1, 3, 9.\nNode 9 is connected to nodes 2, 6, 5, 10.\nNode 0 is connected to nodes 2, 4, 3.\nNode 8 is connected to nodes 2, 7, 3.\nNode 3 is connected to nodes 1, 4, 5, 8, 10, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 155, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 11, 0.\nNode 11 is connected to nodes 12, 10.\nNode 0 is connected to nodes 12, 7, 8, 1, 2, 5.\nNode 10 is connected to node 11.\nNode 7 is connected to nodes 6, 3, 4, 0.\nNode 6 is connected to node 7.\nNode 3 is connected to nodes 7, 13.\nNode 4 is connected to nodes 7, 9.\nNode 8 is connected to node 0.\nNode 1 is connected to node 0.\nNode 2 is connected to node 0.\nNode 5 is connected to node 0.\nNode 13 is connected to node 3.\nNode 9 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n```"}, {"id": 156, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 7, 9.\nNode 7 is connected to nodes 13, 5.\nNode 9 is connected to nodes 13, 3.\nNode 5 is connected to nodes 7, 1.\nNode 2 is connected to nodes 4, 10, 8.\nNode 4 is connected to nodes 2, 8.\nNode 10 is connected to nodes 2, 12.\nNode 8 is connected to nodes 2, 4.\nNode 3 is connected to node 9.\nNode 1 is connected to nodes 5, 6.\nNode 6 is connected to nodes 1, 0.\nNode 0 is connected to nodes 6, 11.\nNode 11 is connected to nodes 0, 12.\nNode 12 is connected to nodes 10, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 157, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 2, 1, 4, 0, 7.\nNode 2 is connected to nodes 3, 5, 4, 8, 6, 0, 7.\nNode 1 is connected to nodes 3, 5, 4, 8, 7.\nNode 4 is connected to nodes 3, 2, 5, 1, 0.\nNode 0 is connected to nodes 3, 2, 5, 4, 8, 6, 7.\nNode 7 is connected to nodes 3, 2, 5, 1, 8, 6, 0.\nNode 5 is connected to nodes 2, 1, 4, 8, 6, 0, 7.\nNode 8 is connected to nodes 2, 5, 1, 6, 0, 7.\nNode 6 is connected to nodes 2, 5, 8, 0, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 158, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 7, 0, 11.\nNode 7 is connected to nodes 2, 4, 1, 6, 11, 9.\nNode 0 is connected to nodes 2, 9, 1, 8, 3.\nNode 11 is connected to nodes 2, 7, 4, 3, 8.\nNode 4 is connected to nodes 7, 5, 6, 11.\nNode 1 is connected to nodes 7, 5, 0, 10.\nNode 6 is connected to nodes 7, 5, 4, 10.\nNode 9 is connected to nodes 7, 0, 8.\nNode 5 is connected to nodes 4, 1, 6, 10.\nNode 10 is connected to nodes 5, 3, 6, 1.\nNode 8 is connected to nodes 0, 9, 11.\nNode 3 is connected to nodes 0, 10, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 159, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 10, 2, 6, 3, 0, 9, 5.\nNode 1 is connected to nodes 4, 7, 0, 10.\nNode 10 is connected to nodes 4, 1, 8, 0, 7.\nNode 2 is connected to nodes 4, 9, 8, 0.\nNode 6 is connected to nodes 4, 9, 0.\nNode 3 is connected to nodes 4, 5.\nNode 0 is connected to nodes 4, 1, 10, 9, 2, 6.\nNode 9 is connected to nodes 4, 8, 6, 0, 2, 5, 7.\nNode 5 is connected to nodes 4, 9, 3.\nNode 7 is connected to nodes 1, 10, 9.\nNode 8 is connected to nodes 10, 9, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 160, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 9, 5, 7, 3, 8, 1.\nNode 9 is connected to nodes 2, 8.\nNode 5 is connected to nodes 2, 8.\nNode 7 is connected to nodes 2, 8, 6.\nNode 3 is connected to nodes 2, 8, 6, 4.\nNode 8 is connected to nodes 2, 9, 7, 0, 5, 3, 4, 1.\nNode 1 is connected to nodes 2, 8.\nNode 0 is connected to node 8.\nNode 4 is connected to nodes 8, 3.\nNode 6 is connected to nodes 7, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 161, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 0, 9, 8, 7.\nNode 0 is connected to nodes 2, 4, 7.\nNode 9 is connected to nodes 2, 3, 7, 1.\nNode 8 is connected to nodes 2, 7.\nNode 7 is connected to nodes 2, 0, 9, 3, 4, 6, 8, 5.\nNode 4 is connected to nodes 0, 7.\nNode 3 is connected to nodes 9, 7.\nNode 1 is connected to nodes 9, 5.\nNode 6 is connected to nodes 7, 5.\nNode 5 is connected to nodes 7, 6, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 162, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 1, 0, 7, 2, 13, 4, 5.\nNode 1 is connected to nodes 6, 0, 10, 2, 12, 14, 11, 4.\nNode 0 is connected to nodes 6, 3, 1, 8, 9, 13, 11, 4, 5.\nNode 7 is connected to nodes 6, 10, 8, 14.\nNode 2 is connected to nodes 6, 1, 12, 14, 13.\nNode 13 is connected to nodes 6, 0, 10, 2, 14, 9, 11, 4.\nNode 4 is connected to nodes 6, 3, 1, 0, 10, 12, 8, 14, 9, 13, 5.\nNode 5 is connected to nodes 6, 3, 0, 12, 14, 9, 11, 4.\nNode 3 is connected to nodes 0, 10, 9, 4, 5.\nNode 10 is connected to nodes 3, 1, 7, 12, 8, 13, 11, 4.\nNode 9 is connected to nodes 3, 0, 8, 13, 4, 5.\nNode 12 is connected to nodes 1, 10, 2, 14, 11, 4, 5.\nNode 14 is connected to nodes 1, 7, 2, 12, 13, 4, 5.\nNode 11 is connected to nodes 1, 0, 10, 12, 8, 13, 5.\nNode 8 is connected to nodes 0, 10, 7, 9, 11, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 163, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 8, 1, 10, 0, 6, 3.\nNode 8 is connected to nodes 5, 1, 10, 2, 7, 4, 11, 0, 9, 6, 3.\nNode 1 is connected to nodes 5, 8, 2, 4, 0, 9, 6, 3.\nNode 10 is connected to nodes 5, 8, 4, 11, 0.\nNode 0 is connected to nodes 5, 8, 1, 10, 2, 7, 4, 9, 3.\nNode 6 is connected to nodes 5, 8, 1, 11, 9.\nNode 3 is connected to nodes 5, 8, 1, 7, 11, 0, 9.\nNode 2 is connected to nodes 8, 1, 7, 0.\nNode 7 is connected to nodes 8, 2, 4, 0, 3.\nNode 4 is connected to nodes 8, 1, 10, 7, 11, 0, 9.\nNode 11 is connected to nodes 8, 10, 4, 9, 6, 3.\nNode 9 is connected to nodes 8, 1, 4, 11, 0, 6, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 164, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 1, 6, 3, 0, 4.\nNode 1 is connected to nodes 2, 7, 0, 4.\nNode 6 is connected to nodes 2, 7, 3, 0, 4.\nNode 3 is connected to nodes 2, 5, 6, 0.\nNode 0 is connected to nodes 2, 7, 1, 6, 3, 4.\nNode 4 is connected to nodes 2, 1, 6, 0.\nNode 7 is connected to nodes 5, 1, 6, 0.\nNode 5 is connected to nodes 7, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 165, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 9, 7, 4, 1.\nNode 9 is connected to node 2.\nNode 7 is connected to nodes 2, 0.\nNode 4 is connected to nodes 2, 3.\nNode 1 is connected to nodes 2, 5, 10, 8.\nNode 5 is connected to nodes 1, 6.\nNode 10 is connected to node 1.\nNode 8 is connected to node 1.\nNode 6 is connected to node 5.\nNode 0 is connected to node 7.\nNode 3 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 166, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 7, 6, 5, 1, 3.\nNode 7 is connected to nodes 4, 6, 2, 1.\nNode 6 is connected to nodes 4, 7, 2, 5, 3, 0.\nNode 5 is connected to nodes 4, 6, 2, 1, 0.\nNode 1 is connected to nodes 4, 7, 2, 5, 0.\nNode 3 is connected to nodes 4, 6, 0.\nNode 2 is connected to nodes 7, 6, 5, 1, 0.\nNode 0 is connected to nodes 6, 2, 5, 1, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 167, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 14, 0.\nNode 14 is connected to nodes 11, 7, 4.\nNode 0 is connected to nodes 11, 5, 9.\nNode 7 is connected to nodes 14, 9.\nNode 4 is connected to node 14.\nNode 10 is connected to nodes 8, 13.\nNode 8 is connected to nodes 10, 9.\nNode 13 is connected to nodes 10, 12.\nNode 9 is connected to nodes 8, 7, 0.\nNode 3 is connected to node 2.\nNode 2 is connected to nodes 3, 1.\nNode 1 is connected to nodes 2, 12.\nNode 12 is connected to nodes 13, 1.\nNode 5 is connected to nodes 0, 6.\nNode 6 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n```"}, {"id": 168, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 6, 2, 4, 1.\nNode 3 is connected to nodes 0, 5, 6, 2, 4, 1.\nNode 6 is connected to nodes 0, 5, 3, 2, 7.\nNode 2 is connected to nodes 0, 5, 3, 6, 4.\nNode 4 is connected to nodes 0, 3, 2, 1.\nNode 1 is connected to nodes 0, 3, 4.\nNode 5 is connected to nodes 3, 6, 2, 7.\nNode 7 is connected to nodes 5, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 169, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 8, 4.\nNode 8 is connected to nodes 5, 9, 10, 0, 6.\nNode 4 is connected to nodes 5, 9, 6, 2, 1.\nNode 9 is connected to nodes 8, 4, 1, 3.\nNode 10 is connected to nodes 8, 2, 1, 3.\nNode 0 is connected to nodes 8, 2, 7, 1.\nNode 6 is connected to nodes 8, 4, 2, 7, 3.\nNode 2 is connected to nodes 4, 10, 0, 6, 7.\nNode 1 is connected to nodes 4, 9, 10, 0.\nNode 3 is connected to nodes 9, 10, 6.\nNode 7 is connected to nodes 0, 6, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 170, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 4, 5, 2, 7, 3.\nNode 4 is connected to nodes 1, 9.\nNode 5 is connected to nodes 1, 9.\nNode 2 is connected to nodes 1, 7.\nNode 7 is connected to nodes 1, 8, 3, 9, 0, 2.\nNode 3 is connected to nodes 1, 8, 7, 9.\nNode 9 is connected to nodes 4, 6, 7, 3, 5.\nNode 8 is connected to nodes 6, 7, 3.\nNode 6 is connected to nodes 8, 9.\nNode 0 is connected to node 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 171, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 8, 1, 4, 3, 6, 12, 0, 2.\nNode 8 is connected to nodes 7, 10, 2, 6, 0, 12.\nNode 1 is connected to nodes 7, 2, 3, 9, 6, 11, 12, 4, 5, 0, 10.\nNode 4 is connected to nodes 7, 1, 0, 10.\nNode 3 is connected to nodes 7, 2, 1, 0.\nNode 6 is connected to nodes 7, 8, 1, 0, 11, 12.\nNode 12 is connected to nodes 7, 8, 1, 6.\nNode 0 is connected to nodes 7, 8, 2, 3, 1, 4, 11, 6, 5.\nNode 2 is connected to nodes 7, 8, 3, 1, 5, 0.\nNode 10 is connected to nodes 8, 1, 4, 11, 5.\nNode 5 is connected to nodes 2, 1, 0, 10.\nNode 9 is connected to node 1.\nNode 11 is connected to nodes 1, 0, 10, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 172, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 10, 8.\nNode 10 is connected to nodes 4, 1.\nNode 8 is connected to nodes 4, 6, 3, 7, 0.\nNode 1 is connected to nodes 10, 6, 5.\nNode 6 is connected to nodes 8, 1.\nNode 3 is connected to node 8.\nNode 7 is connected to node 8.\nNode 0 is connected to nodes 8, 2.\nNode 9 is connected to node 2.\nNode 2 is connected to nodes 9, 0.\nNode 5 is connected to nodes 11, 1.\nNode 11 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 173, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 3, 7, 0, 2.\nNode 3 is connected to nodes 1, 4, 7, 0, 6, 2.\nNode 7 is connected to nodes 1, 4, 3, 5, 6, 2.\nNode 0 is connected to nodes 1, 3, 8, 2.\nNode 2 is connected to nodes 1, 3, 7, 0, 8.\nNode 4 is connected to nodes 3, 7, 6.\nNode 6 is connected to nodes 4, 3, 7, 8, 5.\nNode 5 is connected to nodes 7, 8, 6.\nNode 8 is connected to nodes 0, 5, 6, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 174, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 2, 10.\nNode 2 is connected to nodes 1, 0.\nNode 10 is connected to nodes 1, 13.\nNode 0 is connected to nodes 2, 4.\nNode 7 is connected to nodes 8, 3, 11.\nNode 8 is connected to nodes 7, 12.\nNode 3 is connected to nodes 7, 6.\nNode 11 is connected to node 7.\nNode 12 is connected to nodes 8, 13.\nNode 6 is connected to nodes 3, 5.\nNode 5 is connected to nodes 6, 9.\nNode 4 is connected to nodes 9, 0.\nNode 9 is connected to nodes 4, 5.\nNode 13 is connected to nodes 10, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 175, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to node 8.\nNode 8 is connected to nodes 4, 3, 2.\nNode 3 is connected to nodes 8, 1, 2.\nNode 2 is connected to nodes 8, 3.\nNode 1 is connected to nodes 3, 6.\nNode 5 is connected to node 7.\nNode 7 is connected to nodes 5, 0.\nNode 0 is connected to nodes 7, 6.\nNode 6 is connected to nodes 0, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 176, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 5, 6.\nNode 5 is connected to nodes 2, 4, 8.\nNode 6 is connected to nodes 2, 0.\nNode 4 is connected to nodes 5, 3, 7, 10.\nNode 8 is connected to nodes 5, 7.\nNode 3 is connected to nodes 4, 9.\nNode 7 is connected to nodes 4, 8.\nNode 10 is connected to node 4.\nNode 9 is connected to node 3.\nNode 1 is connected to node 0.\nNode 0 is connected to nodes 1, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 177, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 3, 0, 2, 11, 6, 4, 7, 9.\nNode 3 is connected to nodes 12, 10, 5, 4, 7, 9.\nNode 0 is connected to nodes 12, 10, 2, 5, 7.\nNode 2 is connected to nodes 12, 0, 5, 1, 6, 7, 9.\nNode 11 is connected to nodes 12, 8, 6, 4, 9.\nNode 6 is connected to nodes 12, 10, 2, 11, 5, 1, 4.\nNode 4 is connected to nodes 12, 3, 10, 11, 5, 1, 6, 7.\nNode 7 is connected to nodes 12, 3, 10, 0, 2, 8, 4.\nNode 9 is connected to nodes 12, 3, 10, 2, 8, 11.\nNode 10 is connected to nodes 3, 0, 8, 5, 1, 6, 4, 7, 9.\nNode 5 is connected to nodes 3, 10, 0, 2, 8, 1, 6, 4.\nNode 8 is connected to nodes 10, 11, 5, 7, 9.\nNode 1 is connected to nodes 10, 2, 5, 6, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 178, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 5, 6, 7, 8, 0, 3, 2, 1.\nNode 5 is connected to nodes 4, 8, 0, 9, 3, 2, 1.\nNode 6 is connected to nodes 4, 8, 9, 3, 2, 1.\nNode 7 is connected to nodes 4, 8, 0, 9, 3, 2, 1.\nNode 8 is connected to nodes 4, 5, 6, 7, 0, 9, 3, 2.\nNode 0 is connected to nodes 4, 5, 7, 8, 9, 3, 2.\nNode 3 is connected to nodes 4, 5, 6, 7, 8, 0, 9, 2, 1.\nNode 2 is connected to nodes 4, 5, 6, 7, 8, 0, 9, 3, 1.\nNode 1 is connected to nodes 4, 5, 6, 7, 3, 2.\nNode 9 is connected to nodes 5, 6, 7, 8, 0, 3, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 179, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 3, 14.\nNode 3 is connected to nodes 9, 5, 8.\nNode 14 is connected to nodes 9, 6, 13.\nNode 5 is connected to nodes 3, 7.\nNode 8 is connected to nodes 3, 7.\nNode 7 is connected to nodes 5, 8, 10.\nNode 11 is connected to node 0.\nNode 0 is connected to nodes 11, 13.\nNode 13 is connected to nodes 0, 14.\nNode 12 is connected to nodes 4, 1.\nNode 4 is connected to nodes 12, 6, 2.\nNode 1 is connected to node 12.\nNode 6 is connected to nodes 4, 14.\nNode 2 is connected to node 4.\nNode 10 is connected to node 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 180, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 1, 6.\nNode 1 is connected to nodes 9, 6, 2.\nNode 6 is connected to nodes 9, 3, 4, 1, 5, 7.\nNode 3 is connected to nodes 6, 5, 10, 2.\nNode 5 is connected to nodes 3, 0, 6.\nNode 10 is connected to nodes 3, 8.\nNode 2 is connected to nodes 3, 0, 1.\nNode 4 is connected to nodes 8, 6.\nNode 8 is connected to nodes 4, 0, 10, 7.\nNode 0 is connected to nodes 8, 5, 2, 7.\nNode 7 is connected to nodes 0, 8, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 181, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 11, 10, 4.\nNode 11 is connected to nodes 8, 5.\nNode 10 is connected to nodes 8, 9.\nNode 4 is connected to nodes 8, 3.\nNode 5 is connected to nodes 11, 2.\nNode 1 is connected to nodes 7, 6, 0.\nNode 7 is connected to nodes 1, 3.\nNode 6 is connected to node 1.\nNode 0 is connected to node 1.\nNode 3 is connected to nodes 7, 4.\nNode 2 is connected to nodes 5, 9.\nNode 9 is connected to nodes 2, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 182, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 8, 3, 0, 7, 10, 4, 2, 9.\nNode 8 is connected to nodes 1, 2.\nNode 3 is connected to nodes 1, 2, 9.\nNode 0 is connected to nodes 1, 10.\nNode 7 is connected to nodes 1, 10.\nNode 10 is connected to nodes 1, 2, 5, 0, 7, 6.\nNode 4 is connected to nodes 1, 2.\nNode 2 is connected to nodes 1, 8, 3, 4, 5, 10.\nNode 9 is connected to nodes 1, 3.\nNode 5 is connected to nodes 2, 10.\nNode 6 is connected to node 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 183, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 4, 5, 10, 6, 9, 3, 1.\nNode 4 is connected to nodes 2, 5, 7, 10, 6, 9, 3, 1, 8.\nNode 5 is connected to nodes 2, 4, 0, 7, 10, 6, 3, 1.\nNode 10 is connected to nodes 2, 4, 5, 7, 6, 9, 3, 1, 8.\nNode 6 is connected to nodes 2, 4, 5, 0, 7, 10, 9, 3, 8.\nNode 9 is connected to nodes 2, 4, 7, 10, 6, 8.\nNode 3 is connected to nodes 2, 4, 5, 7, 10, 6, 1, 8.\nNode 1 is connected to nodes 2, 4, 5, 0, 7, 10, 3, 8.\nNode 7 is connected to nodes 4, 5, 0, 10, 6, 9, 3, 1.\nNode 8 is connected to nodes 4, 10, 6, 9, 3, 1.\nNode 0 is connected to nodes 5, 7, 6, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 184, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 8, 11.\nNode 8 is connected to nodes 10, 0, 2, 4, 7.\nNode 11 is connected to nodes 10, 2, 5, 3, 1, 7.\nNode 0 is connected to nodes 2, 4, 3, 1, 8, 9.\nNode 2 is connected to nodes 0, 5, 3, 8, 9, 11.\nNode 4 is connected to nodes 0, 8, 7.\nNode 3 is connected to nodes 0, 2, 6, 11.\nNode 1 is connected to nodes 0, 11.\nNode 9 is connected to nodes 0, 2, 5.\nNode 5 is connected to nodes 2, 6, 7, 9, 11.\nNode 6 is connected to nodes 5, 3.\nNode 7 is connected to nodes 5, 4, 8, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 185, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 2, 1, 3, 4.\nNode 2 is connected to nodes 6, 7.\nNode 1 is connected to nodes 6, 7, 0, 8.\nNode 3 is connected to nodes 6, 7.\nNode 4 is connected to nodes 6, 7, 0, 8.\nNode 7 is connected to nodes 2, 3, 1, 4.\nNode 0 is connected to nodes 5, 1, 4.\nNode 5 is connected to nodes 0, 8.\nNode 8 is connected to nodes 5, 1, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 186, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 7, 2, 5.\nNode 7 is connected to node 3.\nNode 2 is connected to nodes 3, 1, 4.\nNode 5 is connected to nodes 3, 0, 6.\nNode 1 is connected to node 2.\nNode 4 is connected to node 2.\nNode 0 is connected to node 5.\nNode 6 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 187, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 7, 3, 6.\nNode 7 is connected to nodes 1, 0, 6.\nNode 3 is connected to nodes 1, 2, 0.\nNode 6 is connected to nodes 1, 7, 0.\nNode 4 is connected to nodes 2, 5.\nNode 2 is connected to nodes 4, 0, 3.\nNode 5 is connected to node 4.\nNode 0 is connected to nodes 2, 7, 3, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 188, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 11, 5, 0, 2.\nNode 11 is connected to nodes 10, 9, 3, 5, 0, 6.\nNode 5 is connected to nodes 10, 7, 9, 3, 8, 11, 0, 1, 2, 6, 4.\nNode 0 is connected to nodes 10, 7, 11, 5, 4.\nNode 2 is connected to nodes 10, 7, 3, 5, 1, 4.\nNode 7 is connected to nodes 9, 3, 8, 5, 0, 2, 6.\nNode 9 is connected to nodes 7, 3, 11, 5, 1, 6, 4.\nNode 3 is connected to nodes 7, 9, 11, 5, 1, 2, 6, 4.\nNode 8 is connected to nodes 7, 5, 1, 4.\nNode 6 is connected to nodes 7, 9, 3, 11, 5, 1, 4.\nNode 1 is connected to nodes 9, 3, 8, 5, 2, 6, 4.\nNode 4 is connected to nodes 9, 3, 8, 5, 0, 1, 2, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 189, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 6, 1, 5, 2, 7, 0.\nNode 6 is connected to nodes 8, 3, 1.\nNode 1 is connected to nodes 8, 6, 3, 9, 4, 2.\nNode 5 is connected to nodes 8, 9.\nNode 2 is connected to nodes 8, 1.\nNode 7 is connected to nodes 8, 9.\nNode 0 is connected to nodes 8, 9.\nNode 3 is connected to nodes 6, 1.\nNode 9 is connected to nodes 1, 4, 5, 0, 7.\nNode 4 is connected to nodes 1, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 190, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 14, 12, 9, 0, 1, 11.\nNode 14 is connected to nodes 5, 2, 9, 0, 13, 7, 3, 8, 6, 11.\nNode 12 is connected to nodes 5, 4, 1, 8.\nNode 9 is connected to nodes 5, 14, 0, 1, 13, 7, 3, 8, 11.\nNode 0 is connected to nodes 5, 14, 4, 9, 10, 1, 13, 7, 8, 6.\nNode 1 is connected to nodes 5, 12, 4, 9, 10, 0, 13, 7, 3, 6.\nNode 11 is connected to nodes 5, 14, 2, 9, 13, 3, 6.\nNode 2 is connected to nodes 14, 4, 11.\nNode 13 is connected to nodes 14, 9, 0, 1, 3, 11.\nNode 7 is connected to nodes 14, 9, 0, 1.\nNode 3 is connected to nodes 14, 4, 9, 1, 13, 8, 6, 11.\nNode 8 is connected to nodes 14, 12, 9, 10, 0, 3.\nNode 6 is connected to nodes 14, 0, 1, 3, 11.\nNode 4 is connected to nodes 2, 12, 10, 0, 1, 3.\nNode 10 is connected to nodes 4, 0, 1, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 191, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 6, 10, 5, 3.\nNode 6 is connected to nodes 2, 9, 4, 10, 7, 3.\nNode 10 is connected to nodes 2, 6, 8, 7, 5, 3.\nNode 5 is connected to nodes 2, 4, 10, 1, 3.\nNode 3 is connected to nodes 2, 6, 10, 1, 5.\nNode 9 is connected to nodes 6, 8, 0, 7.\nNode 8 is connected to nodes 9, 10, 1.\nNode 0 is connected to nodes 9, 7.\nNode 7 is connected to nodes 9, 6, 10, 0.\nNode 4 is connected to nodes 6, 5.\nNode 1 is connected to nodes 8, 5, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 192, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 7, 6, 1, 8, 3, 4, 2.\nNode 7 is connected to nodes 0, 1.\nNode 6 is connected to nodes 0, 4.\nNode 1 is connected to nodes 0, 7, 4, 8.\nNode 8 is connected to nodes 0, 5, 1.\nNode 3 is connected to nodes 0, 4.\nNode 4 is connected to nodes 0, 3, 1, 6, 5.\nNode 2 is connected to node 0.\nNode 5 is connected to nodes 4, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 193, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 13, 12, 8.\nNode 13 is connected to nodes 2, 8, 4, 0.\nNode 12 is connected to nodes 2, 3, 5, 7, 6.\nNode 8 is connected to nodes 2, 13, 0.\nNode 4 is connected to nodes 13, 10, 1, 0.\nNode 0 is connected to nodes 13, 4, 6, 1, 8.\nNode 3 is connected to nodes 5, 7, 12, 11.\nNode 5 is connected to nodes 3, 12, 6, 11.\nNode 7 is connected to nodes 3, 10, 9, 12, 1.\nNode 11 is connected to nodes 3, 5, 9.\nNode 6 is connected to nodes 5, 12, 0.\nNode 10 is connected to nodes 9, 7, 4, 1.\nNode 9 is connected to nodes 10, 1, 7, 11.\nNode 1 is connected to nodes 10, 9, 7, 4, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 194, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 11, 8.\nNode 1 is connected to nodes 4, 7, 6, 9, 2, 11, 8, 3.\nNode 11 is connected to nodes 4, 7, 1, 8.\nNode 8 is connected to nodes 4, 1, 10, 0, 2, 11, 5.\nNode 7 is connected to nodes 6, 1, 9, 11, 5.\nNode 6 is connected to nodes 7, 1, 10, 9, 2, 5.\nNode 9 is connected to nodes 7, 6, 1, 0, 3.\nNode 5 is connected to nodes 7, 6, 8.\nNode 10 is connected to nodes 6, 2, 8, 3.\nNode 2 is connected to nodes 6, 1, 10, 8, 3.\nNode 3 is connected to nodes 1, 10, 9, 2.\nNode 0 is connected to nodes 9, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 195, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 6, 4, 3, 1, 5, 0.\nNode 6 is connected to nodes 7, 4, 3, 1, 5, 0.\nNode 4 is connected to nodes 7, 6, 3, 1, 5, 0, 2.\nNode 3 is connected to nodes 7, 6, 4, 1, 5, 2.\nNode 1 is connected to nodes 7, 6, 4, 3, 5, 0, 2.\nNode 5 is connected to nodes 7, 6, 4, 3, 1, 0.\nNode 0 is connected to nodes 7, 6, 4, 1, 5, 2.\nNode 2 is connected to nodes 4, 3, 1, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 196, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 11, 5, 9, 0.\nNode 1 is connected to nodes 4, 11, 5, 10, 3, 0.\nNode 11 is connected to nodes 4, 1, 12, 7, 9, 3, 0, 2.\nNode 5 is connected to nodes 4, 1, 6, 12, 9, 0.\nNode 9 is connected to nodes 4, 8, 11, 5, 10, 2.\nNode 0 is connected to nodes 4, 1, 8, 11, 5, 2.\nNode 10 is connected to nodes 1, 6, 9, 2.\nNode 3 is connected to nodes 1, 11, 6, 7, 2.\nNode 8 is connected to nodes 12, 9, 0.\nNode 12 is connected to nodes 8, 11, 5.\nNode 7 is connected to nodes 11, 3, 2.\nNode 2 is connected to nodes 11, 6, 7, 9, 10, 3, 0.\nNode 6 is connected to nodes 5, 10, 3, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 197, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 5, 9, 4, 6, 2.\nNode 5 is connected to nodes 1, 8, 4, 0, 10, 6.\nNode 9 is connected to nodes 1, 4, 7, 0, 6, 3.\nNode 4 is connected to nodes 1, 5, 9, 6, 2.\nNode 6 is connected to nodes 1, 5, 9, 8, 4, 0, 10.\nNode 2 is connected to nodes 1, 4, 0, 10.\nNode 8 is connected to nodes 5, 6, 3.\nNode 0 is connected to nodes 5, 9, 6, 2.\nNode 10 is connected to nodes 5, 7, 6, 2.\nNode 7 is connected to nodes 9, 10, 3.\nNode 3 is connected to nodes 9, 8, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 198, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 5, 3, 7, 1, 4, 8.\nNode 5 is connected to nodes 2, 6, 3, 7, 1, 0, 8.\nNode 3 is connected to nodes 2, 6, 5, 7, 4, 0, 8.\nNode 7 is connected to nodes 2, 6, 5, 3, 1, 4, 0, 8.\nNode 1 is connected to nodes 2, 6, 5, 7, 4.\nNode 4 is connected to nodes 2, 6, 3, 7, 1, 0, 8.\nNode 8 is connected to nodes 2, 5, 3, 7, 4, 0.\nNode 6 is connected to nodes 5, 3, 7, 1, 4, 0.\nNode 0 is connected to nodes 6, 5, 3, 7, 4, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 199, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 2, 7, 3.\nNode 2 is connected to nodes 0, 6, 3, 1.\nNode 7 is connected to nodes 0, 3, 4.\nNode 3 is connected to nodes 0, 2, 7, 1, 5.\nNode 6 is connected to nodes 2, 1.\nNode 1 is connected to nodes 2, 6, 3, 4.\nNode 5 is connected to node 3.\nNode 4 is connected to nodes 7, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 200, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 9, 6, 1, 5, 4.\nNode 9 is connected to nodes 7, 2, 8, 0, 6, 1, 5, 4.\nNode 6 is connected to nodes 7, 8, 3, 10, 9, 1, 5.\nNode 1 is connected to nodes 7, 8, 3, 10, 9, 0, 6, 5, 4.\nNode 5 is connected to nodes 7, 8, 10, 9, 0, 6, 1.\nNode 4 is connected to nodes 7, 3, 10, 9, 0, 1.\nNode 2 is connected to nodes 3, 10, 9.\nNode 3 is connected to nodes 2, 8, 10, 6, 1, 4.\nNode 10 is connected to nodes 2, 3, 0, 6, 1, 5, 4.\nNode 8 is connected to nodes 3, 9, 0, 6, 1, 5.\nNode 0 is connected to nodes 8, 10, 9, 1, 5, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 201, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 6, 0, 2, 4, 1, 7.\nNode 6 is connected to nodes 5, 3, 0, 2, 4, 1, 7.\nNode 0 is connected to nodes 5, 6, 2, 1, 7.\nNode 2 is connected to nodes 5, 3, 6, 0, 4, 1, 7.\nNode 4 is connected to nodes 5, 6, 2, 1.\nNode 1 is connected to nodes 5, 3, 6, 0, 2, 4, 7.\nNode 7 is connected to nodes 5, 3, 6, 0, 2, 1.\nNode 3 is connected to nodes 6, 2, 1, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 202, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 4, 2, 8, 5.\nNode 4 is connected to nodes 0, 9, 7.\nNode 2 is connected to nodes 0, 7, 1, 5, 9, 8.\nNode 8 is connected to nodes 0, 2, 7.\nNode 5 is connected to nodes 0, 2.\nNode 9 is connected to nodes 4, 2.\nNode 7 is connected to nodes 4, 2, 8, 6, 3, 1.\nNode 1 is connected to nodes 2, 7.\nNode 6 is connected to nodes 7, 3.\nNode 3 is connected to nodes 7, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 203, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 9, 2, 1, 7.\nNode 9 is connected to nodes 3, 1.\nNode 2 is connected to nodes 3, 7, 1, 0, 4.\nNode 1 is connected to nodes 3, 9, 2, 6, 8.\nNode 7 is connected to nodes 3, 2, 5, 4, 8.\nNode 0 is connected to nodes 2, 6, 5.\nNode 4 is connected to nodes 2, 7.\nNode 6 is connected to nodes 1, 0.\nNode 8 is connected to nodes 1, 7.\nNode 5 is connected to nodes 0, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 204, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to node 4.\nNode 4 is connected to nodes 6, 8, 9.\nNode 8 is connected to nodes 4, 1.\nNode 9 is connected to nodes 4, 5, 11.\nNode 7 is connected to node 2.\nNode 2 is connected to nodes 7, 3, 5.\nNode 3 is connected to nodes 2, 0.\nNode 5 is connected to nodes 2, 1, 9.\nNode 0 is connected to nodes 3, 10.\nNode 10 is connected to node 0.\nNode 1 is connected to nodes 8, 5.\nNode 11 is connected to node 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 205, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 1, 2, 3, 6.\nNode 1 is connected to nodes 7, 2, 3, 5, 4.\nNode 2 is connected to nodes 7, 8, 1, 3, 0, 6.\nNode 3 is connected to nodes 7, 1, 2, 0, 5, 6.\nNode 6 is connected to nodes 7, 8, 2, 3.\nNode 8 is connected to nodes 2, 6.\nNode 5 is connected to nodes 1, 3.\nNode 4 is connected to node 1.\nNode 0 is connected to nodes 2, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 206, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 10, 6, 2, 5, 14, 9, 11, 13, 3.\nNode 10 is connected to nodes 0, 14.\nNode 6 is connected to nodes 0, 12, 7.\nNode 2 is connected to nodes 0, 7.\nNode 5 is connected to nodes 0, 11.\nNode 14 is connected to nodes 0, 10, 1, 11.\nNode 9 is connected to nodes 0, 12.\nNode 11 is connected to nodes 0, 3, 14, 4, 5.\nNode 13 is connected to nodes 0, 8.\nNode 3 is connected to nodes 0, 8, 11, 12, 7.\nNode 8 is connected to nodes 3, 7, 13, 4.\nNode 12 is connected to nodes 3, 6, 1, 9.\nNode 7 is connected to nodes 3, 8, 6, 2.\nNode 4 is connected to nodes 8, 11.\nNode 1 is connected to nodes 14, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 207, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 8, 10, 4.\nNode 8 is connected to nodes 9, 5, 10, 3, 2, 0.\nNode 10 is connected to nodes 9, 8, 6, 4.\nNode 4 is connected to nodes 9, 6, 10, 11.\nNode 5 is connected to nodes 8, 3, 0, 1, 11, 7.\nNode 3 is connected to nodes 8, 5, 6, 0, 1, 7.\nNode 2 is connected to nodes 8, 6, 0, 1.\nNode 0 is connected to nodes 8, 5, 3, 2, 11.\nNode 1 is connected to nodes 5, 3, 2, 7.\nNode 11 is connected to nodes 5, 6, 4, 0, 7.\nNode 7 is connected to nodes 5, 3, 1, 11.\nNode 6 is connected to nodes 10, 3, 2, 4, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 208, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 8, 7, 6.\nNode 8 is connected to nodes 2, 3, 7.\nNode 7 is connected to nodes 2, 5, 9, 8, 1, 4.\nNode 6 is connected to nodes 2, 5, 0.\nNode 5 is connected to nodes 3, 7, 6, 0.\nNode 3 is connected to nodes 5, 9, 8, 10, 4.\nNode 0 is connected to nodes 5, 9, 1, 6, 4.\nNode 9 is connected to nodes 3, 7, 10, 0, 4.\nNode 10 is connected to nodes 3, 9.\nNode 4 is connected to nodes 3, 9, 1, 7, 0.\nNode 1 is connected to nodes 7, 0, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 209, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 5, 2, 4, 0.\nNode 5 is connected to node 6.\nNode 2 is connected to nodes 6, 3.\nNode 4 is connected to nodes 6, 7, 8.\nNode 0 is connected to node 6.\nNode 3 is connected to nodes 2, 1.\nNode 7 is connected to nodes 8, 4.\nNode 8 is connected to nodes 7, 4.\nNode 1 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 210, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 11, 1.\nNode 11 is connected to nodes 4, 0, 7, 5.\nNode 1 is connected to nodes 4, 6.\nNode 0 is connected to nodes 11, 8.\nNode 7 is connected to nodes 11, 9.\nNode 5 is connected to nodes 11, 2.\nNode 6 is connected to nodes 1, 10.\nNode 10 is connected to node 6.\nNode 8 is connected to nodes 0, 3.\nNode 9 is connected to node 7.\nNode 3 is connected to nodes 2, 8.\nNode 2 is connected to nodes 3, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 211, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 10, 1, 13, 4, 8, 12, 3.\nNode 10 is connected to nodes 5, 1, 13, 6, 14, 4, 8, 9, 0, 12, 3.\nNode 1 is connected to nodes 5, 10, 13, 14, 9, 2, 7, 11, 0, 12, 3.\nNode 13 is connected to nodes 5, 10, 1, 6, 8, 9, 7, 0, 3.\nNode 4 is connected to nodes 5, 10, 6, 14, 8, 7, 11, 3.\nNode 8 is connected to nodes 5, 10, 13, 6, 14, 4, 9, 7, 12, 3.\nNode 12 is connected to nodes 5, 10, 1, 14, 8, 9, 7, 11.\nNode 3 is connected to nodes 5, 10, 1, 13, 6, 4, 8, 9, 2, 7, 11, 0.\nNode 6 is connected to nodes 10, 13, 14, 4, 8, 9, 2, 11, 3.\nNode 14 is connected to nodes 10, 1, 6, 4, 8, 7, 12.\nNode 9 is connected to nodes 10, 1, 13, 6, 8, 2, 7, 11, 0, 12, 3.\nNode 0 is connected to nodes 10, 1, 13, 9, 3.\nNode 2 is connected to nodes 1, 6, 9, 7, 11, 3.\nNode 7 is connected to nodes 1, 13, 14, 4, 8, 9, 2, 12, 3.\nNode 11 is connected to nodes 1, 6, 4, 9, 2, 12, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 212, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 3, 11, 1, 4, 5, 2.\nNode 3 is connected to nodes 13, 12, 9.\nNode 11 is connected to nodes 13, 8, 1, 6, 7, 10, 12.\nNode 1 is connected to nodes 13, 8, 4, 9, 6, 11, 7, 5, 12, 0.\nNode 4 is connected to nodes 13, 8, 1, 7, 5.\nNode 5 is connected to nodes 13, 4, 1, 2.\nNode 2 is connected to nodes 13, 7, 5.\nNode 12 is connected to nodes 3, 8, 1, 11.\nNode 9 is connected to nodes 3, 1, 10, 0.\nNode 8 is connected to nodes 4, 0, 11, 12, 1.\nNode 0 is connected to nodes 8, 1, 9.\nNode 7 is connected to nodes 4, 1, 6, 11, 10, 2.\nNode 6 is connected to nodes 1, 11, 7.\nNode 10 is connected to nodes 9, 11, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 213, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 1, 7, 9, 4, 5.\nNode 1 is connected to nodes 0, 10.\nNode 7 is connected to nodes 0, 3, 4.\nNode 9 is connected to nodes 0, 4, 5, 2.\nNode 4 is connected to nodes 0, 7, 10, 8, 9.\nNode 5 is connected to nodes 0, 9.\nNode 10 is connected to nodes 1, 4, 8, 6, 3, 2.\nNode 3 is connected to nodes 7, 10.\nNode 8 is connected to nodes 4, 10, 6.\nNode 6 is connected to nodes 10, 8.\nNode 2 is connected to nodes 10, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 214, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 4, 9, 8, 0.\nNode 4 is connected to nodes 7, 3, 10, 0.\nNode 9 is connected to nodes 7, 5, 3, 6, 8, 1.\nNode 8 is connected to nodes 7, 6, 9, 10.\nNode 0 is connected to nodes 7, 4, 1, 2.\nNode 5 is connected to nodes 9, 1, 10.\nNode 1 is connected to nodes 5, 9, 0.\nNode 10 is connected to nodes 5, 3, 6, 4, 8.\nNode 3 is connected to nodes 4, 9, 10, 2.\nNode 2 is connected to nodes 3, 6, 0.\nNode 6 is connected to nodes 9, 8, 10, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 215, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 2, 10.\nNode 4 is connected to nodes 5, 6, 7, 1.\nNode 2 is connected to nodes 5, 6, 10, 7.\nNode 10 is connected to nodes 5, 9, 6, 2, 0, 3.\nNode 6 is connected to nodes 4, 10, 2.\nNode 7 is connected to nodes 4, 2, 0, 3, 8.\nNode 1 is connected to nodes 4, 9, 8, 11.\nNode 9 is connected to nodes 1, 10, 8, 3.\nNode 8 is connected to nodes 1, 9, 7, 11, 3.\nNode 11 is connected to nodes 1, 8.\nNode 3 is connected to nodes 9, 10, 7, 0, 8.\nNode 0 is connected to nodes 10, 7, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 216, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 6, 5, 7, 8.\nNode 6 is connected to nodes 1, 5.\nNode 5 is connected to nodes 1, 6, 0, 4, 3, 7, 8.\nNode 7 is connected to nodes 1, 5, 2.\nNode 8 is connected to nodes 1, 5, 2, 4, 3.\nNode 0 is connected to node 5.\nNode 4 is connected to nodes 5, 8.\nNode 3 is connected to nodes 5, 8.\nNode 2 is connected to nodes 8, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 217, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 3, 6, 2, 4.\nNode 3 is connected to nodes 7, 1, 0, 5, 2.\nNode 6 is connected to nodes 7, 1, 0, 5, 2, 4.\nNode 2 is connected to nodes 7, 1, 3, 6, 4.\nNode 4 is connected to nodes 7, 1, 6, 0, 2.\nNode 1 is connected to nodes 3, 6, 0, 5, 2, 4.\nNode 0 is connected to nodes 1, 3, 6, 5, 4.\nNode 5 is connected to nodes 1, 3, 6, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 218, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 1, 8.\nNode 1 is connected to nodes 9, 6, 4.\nNode 8 is connected to nodes 9, 0, 2, 4.\nNode 5 is connected to node 0.\nNode 0 is connected to nodes 5, 2, 6, 8.\nNode 2 is connected to nodes 0, 8, 7.\nNode 6 is connected to nodes 0, 4, 1.\nNode 7 is connected to nodes 2, 3.\nNode 4 is connected to nodes 6, 3, 1, 8.\nNode 3 is connected to nodes 4, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 219, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 4, 12.\nNode 4 is connected to nodes 13, 10, 9, 6, 5, 0.\nNode 12 is connected to nodes 13, 9.\nNode 10 is connected to nodes 4, 11, 5, 8.\nNode 9 is connected to nodes 4, 12, 1, 3, 5.\nNode 6 is connected to nodes 4, 1, 7, 5.\nNode 5 is connected to nodes 4, 1, 10, 9, 6, 0, 8.\nNode 0 is connected to nodes 4, 11, 7, 5, 8.\nNode 11 is connected to nodes 3, 10, 0.\nNode 3 is connected to nodes 11, 9, 7, 2.\nNode 1 is connected to nodes 9, 6, 5, 2.\nNode 2 is connected to nodes 1, 3, 7.\nNode 7 is connected to nodes 3, 6, 0, 2.\nNode 8 is connected to nodes 10, 5, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 220, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 7, 6, 9, 11, 1, 0, 3, 5, 2.\nNode 7 is connected to nodes 10, 6, 9, 1, 0, 8, 5, 4, 2.\nNode 6 is connected to nodes 10, 7, 9, 11, 1, 0, 8, 4.\nNode 9 is connected to nodes 10, 7, 6, 11, 1, 0, 3, 4, 2.\nNode 11 is connected to nodes 10, 6, 9, 1, 8, 3, 5, 4.\nNode 1 is connected to nodes 10, 7, 6, 9, 11, 0, 8, 3, 5, 4, 2.\nNode 0 is connected to nodes 10, 7, 6, 9, 1, 8, 5, 2.\nNode 3 is connected to nodes 10, 9, 11, 1, 8, 4, 2.\nNode 5 is connected to nodes 10, 7, 11, 1, 0, 8, 4, 2.\nNode 2 is connected to nodes 10, 7, 9, 1, 0, 8, 3, 5, 4.\nNode 8 is connected to nodes 7, 6, 11, 1, 0, 3, 5, 4, 2.\nNode 4 is connected to nodes 7, 6, 9, 11, 1, 8, 3, 5, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 221, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 14 is connected to nodes 11, 4, 7, 0, 1, 8, 2, 10, 5, 9, 13.\nNode 11 is connected to nodes 14, 4, 6, 7, 0, 3, 1, 8, 5, 12, 9.\nNode 4 is connected to nodes 14, 11, 6, 7, 0, 3, 1, 8, 2, 10, 5, 12, 13.\nNode 7 is connected to nodes 14, 11, 4, 6, 8, 2, 5, 12, 9, 13.\nNode 0 is connected to nodes 14, 11, 4, 6, 3, 2, 10, 5, 12, 13.\nNode 1 is connected to nodes 14, 11, 4, 6, 8, 2, 10, 5, 12, 13.\nNode 8 is connected to nodes 14, 11, 4, 6, 7, 3, 1, 2, 10, 5, 9.\nNode 2 is connected to nodes 14, 4, 6, 7, 0, 3, 1, 8, 10, 5, 12, 9, 13.\nNode 10 is connected to nodes 14, 4, 0, 3, 1, 8, 2, 12, 13.\nNode 5 is connected to nodes 14, 11, 4, 6, 7, 0, 1, 8, 2, 12, 13.\nNode 9 is connected to nodes 14, 11, 6, 7, 3, 8, 2, 12, 13.\nNode 13 is connected to nodes 14, 4, 6, 7, 0, 3, 1, 2, 10, 5, 12, 9.\nNode 6 is connected to nodes 11, 4, 7, 0, 3, 1, 8, 2, 5, 12, 9, 13.\nNode 3 is connected to nodes 11, 4, 6, 0, 8, 2, 10, 12, 9, 13.\nNode 12 is connected to nodes 11, 4, 6, 7, 0, 3, 1, 2, 10, 5, 9, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 222, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 3.\nNode 1 is connected to nodes 4, 8.\nNode 3 is connected to nodes 4, 0, 6.\nNode 8 is connected to nodes 1, 6.\nNode 6 is connected to nodes 8, 3.\nNode 0 is connected to nodes 3, 7.\nNode 7 is connected to nodes 0, 2.\nNode 2 is connected to nodes 7, 5.\nNode 5 is connected to node 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 223, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 2, 3, 9, 0, 8.\nNode 2 is connected to nodes 6, 3, 5, 7, 0, 4, 1.\nNode 3 is connected to nodes 6, 2, 9, 7, 0, 4, 1, 8.\nNode 9 is connected to nodes 6, 3, 7, 0, 1, 8.\nNode 0 is connected to nodes 6, 2, 3, 9, 1, 8.\nNode 8 is connected to nodes 6, 3, 9, 5, 0, 4, 1.\nNode 5 is connected to nodes 2, 7, 1, 8.\nNode 7 is connected to nodes 2, 3, 9, 5, 4, 1.\nNode 4 is connected to nodes 2, 3, 7, 1, 8.\nNode 1 is connected to nodes 2, 3, 9, 5, 7, 0, 4, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 224, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 7, 0, 9.\nNode 4 is connected to node 5.\nNode 7 is connected to node 5.\nNode 0 is connected to nodes 5, 6, 3, 2.\nNode 9 is connected to node 5.\nNode 6 is connected to nodes 1, 0, 8.\nNode 1 is connected to node 6.\nNode 8 is connected to node 6.\nNode 3 is connected to node 0.\nNode 2 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 225, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 5, 12, 2, 0, 6, 3.\nNode 5 is connected to nodes 9, 11, 7, 12, 0, 6, 4, 10, 3, 1.\nNode 12 is connected to nodes 9, 11, 5, 2, 0, 6, 10, 3, 8, 1.\nNode 2 is connected to nodes 9, 11, 12, 0, 6, 4, 1.\nNode 0 is connected to nodes 9, 11, 5, 12, 2, 8, 1.\nNode 6 is connected to nodes 9, 11, 5, 12, 2, 4, 10, 3.\nNode 3 is connected to nodes 9, 11, 7, 5, 12, 6, 4, 10, 8.\nNode 11 is connected to nodes 5, 12, 2, 0, 6, 10, 3, 8.\nNode 10 is connected to nodes 11, 5, 12, 6, 3, 8, 1.\nNode 8 is connected to nodes 11, 7, 12, 0, 10, 3.\nNode 7 is connected to nodes 5, 4, 3, 8, 1.\nNode 4 is connected to nodes 7, 5, 2, 6, 3.\nNode 1 is connected to nodes 7, 5, 12, 2, 0, 10.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 226, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 11 is connected to nodes 7, 4, 2, 5, 9.\nNode 7 is connected to nodes 11, 12.\nNode 4 is connected to nodes 11, 8.\nNode 2 is connected to nodes 11, 10.\nNode 5 is connected to nodes 11, 0.\nNode 9 is connected to node 11.\nNode 12 is connected to nodes 7, 10.\nNode 0 is connected to node 5.\nNode 10 is connected to nodes 2, 1, 12.\nNode 1 is connected to nodes 10, 3.\nNode 6 is connected to node 3.\nNode 3 is connected to nodes 6, 1.\nNode 8 is connected to node 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 227, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 5, 9, 4, 0.\nNode 5 is connected to nodes 7, 4.\nNode 9 is connected to nodes 7, 4, 6.\nNode 4 is connected to nodes 7, 5, 9, 3, 2, 1.\nNode 0 is connected to nodes 7, 3.\nNode 3 is connected to nodes 4, 1, 0, 6, 8.\nNode 2 is connected to nodes 4, 1.\nNode 1 is connected to nodes 4, 3, 2, 8.\nNode 6 is connected to nodes 9, 3.\nNode 8 is connected to nodes 3, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 228, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 8, 7, 13, 6, 11, 10, 3.\nNode 8 is connected to nodes 2, 4, 0, 7, 13, 12, 11, 10, 3, 5.\nNode 7 is connected to nodes 2, 8, 4, 0, 6, 9, 11, 10, 3, 1, 5.\nNode 13 is connected to nodes 2, 8, 4, 0, 12, 10, 3, 5.\nNode 6 is connected to nodes 2, 4, 0, 7, 12, 9, 11, 10, 3, 1, 5.\nNode 11 is connected to nodes 2, 8, 4, 0, 7, 6, 9, 10, 3, 1.\nNode 10 is connected to nodes 2, 8, 4, 0, 7, 13, 12, 6, 9, 11, 3, 5.\nNode 3 is connected to nodes 2, 8, 4, 0, 7, 13, 12, 6, 9, 11, 10, 5.\nNode 4 is connected to nodes 8, 7, 13, 12, 6, 9, 11, 10, 3, 5.\nNode 0 is connected to nodes 8, 7, 13, 6, 11, 10, 3, 1, 5.\nNode 12 is connected to nodes 8, 4, 13, 6, 9, 10, 3, 1, 5.\nNode 5 is connected to nodes 8, 4, 0, 7, 13, 12, 6, 9, 10, 3, 1.\nNode 9 is connected to nodes 4, 7, 12, 6, 11, 10, 3, 1, 5.\nNode 1 is connected to nodes 0, 7, 12, 6, 9, 11, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 229, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 5, 0.\nNode 5 is connected to nodes 6, 3.\nNode 0 is connected to nodes 6, 7, 2.\nNode 3 is connected to node 5.\nNode 1 is connected to node 4.\nNode 4 is connected to nodes 1, 2.\nNode 2 is connected to nodes 4, 0, 7.\nNode 7 is connected to nodes 0, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 230, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 0, 5.\nNode 0 is connected to nodes 8, 7.\nNode 5 is connected to nodes 8, 4.\nNode 7 is connected to nodes 0, 1.\nNode 3 is connected to nodes 6, 1.\nNode 6 is connected to nodes 3, 2.\nNode 1 is connected to nodes 3, 7.\nNode 2 is connected to nodes 6, 4.\nNode 4 is connected to nodes 2, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 231, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 2, 0, 3, 5, 6, 4.\nNode 2 is connected to nodes 1, 0, 3, 5, 6, 4.\nNode 0 is connected to nodes 1, 2, 3, 7, 5.\nNode 3 is connected to nodes 1, 2, 0, 7, 5, 6, 4.\nNode 5 is connected to nodes 1, 2, 0, 3, 7, 6, 4.\nNode 6 is connected to nodes 1, 2, 3, 7, 5, 4.\nNode 4 is connected to nodes 1, 2, 3, 7, 5, 6.\nNode 7 is connected to nodes 0, 3, 5, 6, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 232, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 3, 9.\nNode 3 is connected to nodes 5, 1, 0, 9.\nNode 9 is connected to nodes 5, 6, 3, 0, 10.\nNode 2 is connected to node 7.\nNode 7 is connected to nodes 2, 6.\nNode 6 is connected to nodes 1, 0, 9, 4, 7.\nNode 1 is connected to nodes 6, 3, 0, 8, 10.\nNode 0 is connected to nodes 6, 1, 3, 9, 8.\nNode 4 is connected to nodes 6, 10.\nNode 8 is connected to nodes 1, 0.\nNode 10 is connected to nodes 1, 9, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 233, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 1, 5, 2, 8.\nNode 1 is connected to nodes 12, 7, 5, 6, 2, 13, 0, 4, 9.\nNode 5 is connected to nodes 12, 1, 13, 4.\nNode 2 is connected to nodes 12, 1.\nNode 8 is connected to nodes 12, 0.\nNode 3 is connected to nodes 6, 13, 0, 14, 4, 10.\nNode 6 is connected to nodes 3, 1, 11, 10.\nNode 13 is connected to nodes 3, 1, 5, 10.\nNode 0 is connected to nodes 3, 1, 7, 8, 14, 4, 9.\nNode 14 is connected to nodes 3, 0.\nNode 4 is connected to nodes 3, 1, 5, 0.\nNode 10 is connected to nodes 3, 6, 13, 11, 9.\nNode 7 is connected to nodes 1, 0.\nNode 9 is connected to nodes 1, 0, 11, 10.\nNode 11 is connected to nodes 6, 10, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 234, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 11, 5, 3.\nNode 11 is connected to nodes 9, 2.\nNode 5 is connected to node 9.\nNode 3 is connected to nodes 9, 12.\nNode 2 is connected to nodes 11, 10, 6.\nNode 10 is connected to nodes 2, 1, 4.\nNode 6 is connected to nodes 2, 0.\nNode 0 is connected to nodes 1, 6.\nNode 1 is connected to nodes 0, 10, 8.\nNode 8 is connected to nodes 1, 7.\nNode 4 is connected to node 10.\nNode 7 is connected to node 8.\nNode 12 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 235, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to node 0.\nNode 0 is connected to nodes 6, 8, 1, 2, 3.\nNode 8 is connected to nodes 1, 5, 2, 0, 3, 7.\nNode 1 is connected to nodes 8, 4, 5, 2, 0.\nNode 5 is connected to nodes 8, 1, 4, 3.\nNode 2 is connected to nodes 8, 1, 0, 3, 7.\nNode 3 is connected to nodes 8, 4, 5, 2, 0, 7.\nNode 7 is connected to nodes 8, 4, 2, 3.\nNode 4 is connected to nodes 1, 5, 3, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 236, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 5, 9, 1, 3, 8.\nNode 5 is connected to node 6.\nNode 9 is connected to nodes 6, 7.\nNode 1 is connected to node 6.\nNode 3 is connected to nodes 6, 4.\nNode 8 is connected to nodes 6, 10, 0, 2.\nNode 7 is connected to node 9.\nNode 10 is connected to node 8.\nNode 0 is connected to node 8.\nNode 2 is connected to node 8.\nNode 4 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 237, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 1, 6, 11, 12, 0, 7, 10.\nNode 1 is connected to nodes 9, 4.\nNode 6 is connected to nodes 9, 12.\nNode 11 is connected to nodes 9, 5, 10, 4, 13, 8.\nNode 12 is connected to nodes 9, 5, 6, 2, 3.\nNode 0 is connected to nodes 9, 10.\nNode 7 is connected to nodes 9, 5.\nNode 10 is connected to nodes 9, 0, 11.\nNode 4 is connected to nodes 1, 5, 14, 13, 8, 2, 11.\nNode 5 is connected to nodes 14, 12, 3, 4, 7, 11.\nNode 14 is connected to nodes 5, 4.\nNode 3 is connected to nodes 5, 12.\nNode 2 is connected to nodes 12, 4.\nNode 13 is connected to nodes 4, 11.\nNode 8 is connected to nodes 4, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 238, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 5, 7, 10, 8, 9, 6.\nNode 5 is connected to nodes 1, 0, 7, 10, 9, 4, 6.\nNode 7 is connected to nodes 1, 5, 0, 10, 8, 9, 4, 6, 2.\nNode 10 is connected to nodes 1, 5, 0, 7, 8, 4, 6, 2.\nNode 8 is connected to nodes 1, 0, 7, 10, 6, 2.\nNode 9 is connected to nodes 1, 5, 7, 4, 2.\nNode 6 is connected to nodes 1, 3, 5, 0, 7, 10, 8, 4, 2.\nNode 3 is connected to nodes 4, 6.\nNode 4 is connected to nodes 3, 5, 7, 10, 9, 6, 2.\nNode 0 is connected to nodes 5, 7, 10, 8, 6.\nNode 2 is connected to nodes 7, 10, 8, 9, 4, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 239, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 1, 14, 5, 13, 10.\nNode 1 is connected to nodes 4, 10, 13, 14.\nNode 14 is connected to nodes 4, 1, 11, 7.\nNode 5 is connected to nodes 4, 9, 10, 11.\nNode 13 is connected to nodes 4, 1, 10, 7.\nNode 10 is connected to nodes 4, 1, 9, 5, 13, 12.\nNode 9 is connected to nodes 5, 11, 10.\nNode 11 is connected to nodes 9, 5, 14, 12.\nNode 6 is connected to nodes 0, 2.\nNode 0 is connected to nodes 6, 3, 2.\nNode 2 is connected to nodes 6, 0, 7, 8, 3.\nNode 3 is connected to nodes 0, 7, 8, 2.\nNode 12 is connected to nodes 11, 10, 8.\nNode 7 is connected to nodes 13, 14, 8, 2, 3.\nNode 8 is connected to nodes 7, 2, 12, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 240, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 1, 6, 9, 4, 7, 5.\nNode 1 is connected to node 8.\nNode 6 is connected to node 8.\nNode 9 is connected to node 8.\nNode 4 is connected to nodes 8, 3, 0.\nNode 7 is connected to node 8.\nNode 5 is connected to nodes 8, 2.\nNode 3 is connected to node 4.\nNode 0 is connected to node 4.\nNode 2 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 241, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 0, 1, 3, 5, 4.\nNode 0 is connected to nodes 10, 9, 8, 6, 4.\nNode 1 is connected to nodes 10, 9, 11, 7.\nNode 3 is connected to nodes 10, 11, 4.\nNode 5 is connected to nodes 10, 13, 14, 8.\nNode 4 is connected to nodes 10, 0, 9, 13, 11, 8, 3, 7.\nNode 9 is connected to nodes 0, 11, 1, 6, 4.\nNode 8 is connected to nodes 0, 13, 14, 5, 7, 2, 12, 4.\nNode 6 is connected to nodes 0, 9, 2.\nNode 11 is connected to nodes 9, 1, 3, 12, 4.\nNode 13 is connected to nodes 8, 5, 7, 4.\nNode 7 is connected to nodes 13, 1, 8, 12, 4.\nNode 12 is connected to nodes 11, 14, 8, 7, 2.\nNode 14 is connected to nodes 8, 5, 2, 12.\nNode 2 is connected to nodes 14, 8, 6, 12.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 242, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 7, 0, 6, 5, 1, 4.\nNode 7 is connected to nodes 2, 6, 3.\nNode 0 is connected to nodes 2, 1.\nNode 6 is connected to nodes 2, 7, 5, 4.\nNode 5 is connected to nodes 2, 6, 3.\nNode 1 is connected to nodes 2, 0.\nNode 4 is connected to nodes 2, 6.\nNode 3 is connected to nodes 7, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 243, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to node 0.\nNode 0 is connected to nodes 9, 8.\nNode 8 is connected to nodes 0, 4, 1, 5.\nNode 4 is connected to node 8.\nNode 1 is connected to nodes 8, 7.\nNode 5 is connected to nodes 8, 2, 10.\nNode 2 is connected to nodes 5, 10, 11, 3.\nNode 10 is connected to nodes 2, 5.\nNode 11 is connected to node 2.\nNode 3 is connected to nodes 2, 6.\nNode 6 is connected to node 3.\nNode 7 is connected to node 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 244, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 0, 9, 10, 1.\nNode 0 is connected to nodes 8, 3, 6, 5, 4, 2.\nNode 9 is connected to nodes 8, 3, 6, 10, 7, 1, 2.\nNode 10 is connected to nodes 8, 3, 5, 9, 1.\nNode 1 is connected to nodes 8, 3, 5, 9, 10, 7, 4, 2.\nNode 3 is connected to nodes 0, 6, 5, 9, 10, 7, 1, 2.\nNode 6 is connected to nodes 3, 0, 5, 9.\nNode 5 is connected to nodes 3, 0, 6, 10, 4, 1, 2.\nNode 7 is connected to nodes 3, 9, 4, 1.\nNode 2 is connected to nodes 3, 0, 5, 9, 4, 1.\nNode 4 is connected to nodes 0, 5, 7, 1, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 245, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 3 is connected to nodes 7, 6, 9, 5, 4.\nNode 7 is connected to nodes 3, 2.\nNode 6 is connected to node 3.\nNode 9 is connected to node 3.\nNode 5 is connected to nodes 3, 8, 0, 1.\nNode 4 is connected to node 3.\nNode 2 is connected to node 7.\nNode 8 is connected to node 5.\nNode 0 is connected to node 5.\nNode 1 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 246, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 0, 11, 5, 4, 10.\nNode 0 is connected to nodes 7, 3, 4, 14, 10.\nNode 11 is connected to nodes 7, 3, 12, 14.\nNode 5 is connected to nodes 7, 1, 2, 13, 10.\nNode 4 is connected to nodes 7, 0, 8, 14, 13.\nNode 10 is connected to nodes 7, 0, 5, 8, 1, 6.\nNode 3 is connected to nodes 0, 11, 6.\nNode 14 is connected to nodes 0, 11, 9, 4, 6, 13.\nNode 12 is connected to nodes 11, 8, 6, 13.\nNode 1 is connected to nodes 5, 8, 6, 10.\nNode 2 is connected to node 5.\nNode 13 is connected to nodes 5, 9, 4, 12, 14, 6.\nNode 8 is connected to nodes 1, 4, 12, 10.\nNode 6 is connected to nodes 1, 3, 9, 12, 14, 13, 10.\nNode 9 is connected to nodes 14, 6, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 247, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to node 3.\nNode 3 is connected to nodes 8, 1.\nNode 1 is connected to nodes 3, 2.\nNode 9 is connected to nodes 6, 7.\nNode 6 is connected to nodes 9, 0.\nNode 7 is connected to nodes 9, 4.\nNode 0 is connected to nodes 6, 5.\nNode 5 is connected to nodes 0, 4.\nNode 4 is connected to nodes 5, 7, 2.\nNode 2 is connected to nodes 4, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 248, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 4, 5, 3, 2, 0, 6, 8, 1.\nNode 4 is connected to nodes 7, 3, 1.\nNode 5 is connected to nodes 7, 2, 6, 8.\nNode 3 is connected to nodes 7, 4, 0, 6, 8.\nNode 2 is connected to nodes 7, 5, 6, 8, 1.\nNode 0 is connected to nodes 7, 3, 1.\nNode 6 is connected to nodes 7, 5, 3, 2, 8, 1.\nNode 8 is connected to nodes 7, 5, 3, 2, 6, 1.\nNode 1 is connected to nodes 7, 4, 2, 0, 6, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 249, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 4, 7, 8, 5, 12, 6.\nNode 3 is connected to nodes 0, 1, 7, 9, 11, 8, 12, 6.\nNode 4 is connected to nodes 0, 2, 1, 9, 11, 8, 5, 12, 6, 10.\nNode 7 is connected to nodes 0, 2, 3, 9, 11, 8, 5, 12, 13, 6.\nNode 8 is connected to nodes 0, 2, 3, 1, 4, 7, 11, 5, 6.\nNode 5 is connected to nodes 0, 2, 1, 4, 7, 9, 11, 8, 12, 13, 6, 10.\nNode 12 is connected to nodes 0, 2, 3, 4, 7, 11, 5, 13.\nNode 6 is connected to nodes 0, 3, 1, 4, 7, 9, 8, 5, 10.\nNode 2 is connected to nodes 1, 4, 7, 8, 5, 12, 13.\nNode 1 is connected to nodes 2, 3, 4, 9, 11, 8, 5, 13, 6, 10.\nNode 13 is connected to nodes 2, 1, 7, 9, 11, 5, 12, 10.\nNode 9 is connected to nodes 3, 1, 4, 7, 11, 5, 13, 6.\nNode 11 is connected to nodes 3, 1, 4, 7, 9, 8, 5, 12, 13.\nNode 10 is connected to nodes 1, 4, 5, 13, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 250, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 0, 1, 11, 2, 7, 5, 6.\nNode 0 is connected to nodes 12, 9, 2, 7, 13, 6.\nNode 1 is connected to nodes 12, 11, 3, 4, 7.\nNode 11 is connected to nodes 12, 1, 4, 7, 5.\nNode 2 is connected to nodes 12, 0, 7, 13.\nNode 7 is connected to nodes 12, 0, 1, 11, 4, 2, 13, 8, 6.\nNode 5 is connected to nodes 12, 11, 9, 8.\nNode 6 is connected to nodes 12, 0, 7, 13, 10, 8.\nNode 9 is connected to nodes 0, 10, 8, 5.\nNode 13 is connected to nodes 0, 2, 7, 6.\nNode 3 is connected to node 1.\nNode 4 is connected to nodes 1, 11, 7, 10, 8.\nNode 10 is connected to nodes 9, 4, 6.\nNode 8 is connected to nodes 9, 4, 7, 5, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 251, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 3, 2, 0, 8.\nNode 3 is connected to nodes 6, 4, 2, 5, 1.\nNode 2 is connected to nodes 6, 3, 5, 0, 7.\nNode 0 is connected to nodes 6, 4, 2, 7.\nNode 8 is connected to nodes 6, 4, 9.\nNode 4 is connected to nodes 3, 1, 0, 8.\nNode 1 is connected to nodes 4, 10, 3, 7.\nNode 10 is connected to nodes 5, 1, 9.\nNode 5 is connected to nodes 10, 3, 2, 7.\nNode 9 is connected to nodes 10, 8.\nNode 7 is connected to nodes 2, 5, 1, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 252, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 7.\nNode 3 is connected to node 0.\nNode 7 is connected to nodes 0, 1, 5.\nNode 4 is connected to node 6.\nNode 6 is connected to nodes 4, 5, 2.\nNode 5 is connected to nodes 6, 7.\nNode 2 is connected to nodes 6, 1.\nNode 1 is connected to nodes 2, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 253, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 5, 11, 13, 4.\nNode 5 is connected to nodes 9, 3, 6, 0, 1, 4.\nNode 11 is connected to nodes 9, 6, 12, 13.\nNode 13 is connected to nodes 9, 11, 7.\nNode 4 is connected to nodes 9, 5, 0.\nNode 3 is connected to nodes 5, 1, 8.\nNode 6 is connected to nodes 5, 0, 12, 11, 2, 7.\nNode 0 is connected to nodes 5, 14, 6, 4.\nNode 1 is connected to nodes 5, 3, 8, 10.\nNode 8 is connected to nodes 3, 14, 2, 10, 1.\nNode 14 is connected to nodes 0, 12, 8, 10.\nNode 12 is connected to nodes 14, 6, 11, 2, 7.\nNode 10 is connected to nodes 14, 8, 1.\nNode 2 is connected to nodes 6, 12, 8.\nNode 7 is connected to nodes 6, 12, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 254, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 9 is connected to nodes 0, 4, 6, 11, 3, 5.\nNode 0 is connected to nodes 9, 8, 11, 1, 7, 10.\nNode 4 is connected to nodes 9, 7, 10.\nNode 6 is connected to nodes 9, 8, 10, 3.\nNode 11 is connected to nodes 9, 0, 8, 1, 7, 10.\nNode 3 is connected to nodes 9, 12, 6, 8, 7.\nNode 5 is connected to nodes 9, 10, 2.\nNode 12 is connected to nodes 10, 3.\nNode 10 is connected to nodes 12, 0, 4, 6, 11, 5.\nNode 8 is connected to nodes 0, 6, 11, 1, 3.\nNode 1 is connected to nodes 0, 8, 11, 7.\nNode 7 is connected to nodes 0, 4, 11, 1, 3, 2.\nNode 2 is connected to nodes 7, 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 255, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 2, 5.\nNode 2 is connected to nodes 10, 6, 4, 5.\nNode 5 is connected to nodes 10, 9, 8, 2, 1, 11.\nNode 3 is connected to nodes 6, 9, 8, 7.\nNode 6 is connected to nodes 3, 9, 2, 1.\nNode 9 is connected to nodes 3, 0, 6, 8, 7, 5, 11.\nNode 8 is connected to nodes 3, 0, 9, 5.\nNode 7 is connected to nodes 3, 9, 4, 1.\nNode 0 is connected to nodes 9, 8, 1.\nNode 1 is connected to nodes 0, 6, 7, 5, 11.\nNode 11 is connected to nodes 9, 4, 1, 5.\nNode 4 is connected to nodes 2, 7, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 256, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 5, 3, 8, 1, 4, 2.\nNode 5 is connected to nodes 7, 0, 8, 1, 4, 6.\nNode 3 is connected to nodes 7, 0, 8, 1, 4, 2.\nNode 8 is connected to nodes 7, 0, 5, 3, 1.\nNode 1 is connected to nodes 7, 0, 5, 3, 8, 4, 6.\nNode 4 is connected to nodes 7, 0, 5, 3, 1.\nNode 2 is connected to nodes 7, 0, 3.\nNode 0 is connected to nodes 5, 3, 8, 1, 4, 2.\nNode 6 is connected to nodes 5, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 257, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 4, 3, 5.\nNode 8 is connected to nodes 6, 1, 4, 3, 5, 7.\nNode 4 is connected to nodes 6, 0, 8, 3, 5, 2, 7.\nNode 3 is connected to nodes 6, 1, 0, 8, 4, 5, 2.\nNode 5 is connected to nodes 6, 1, 0, 8, 4, 3.\nNode 1 is connected to nodes 0, 8, 3, 5, 2.\nNode 0 is connected to nodes 1, 4, 3, 5.\nNode 2 is connected to nodes 1, 4, 3, 7.\nNode 7 is connected to nodes 8, 4, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 258, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 6, 2, 3.\nNode 6 is connected to nodes 5, 0, 7.\nNode 2 is connected to nodes 5, 0, 3.\nNode 3 is connected to nodes 5, 1, 2, 4, 0, 8.\nNode 0 is connected to nodes 6, 2, 4, 8, 3.\nNode 7 is connected to node 6.\nNode 1 is connected to node 3.\nNode 4 is connected to nodes 0, 8, 3.\nNode 8 is connected to nodes 4, 0, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 259, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 10, 11, 8, 9.\nNode 10 is connected to node 13.\nNode 11 is connected to node 13.\nNode 8 is connected to node 13.\nNode 9 is connected to nodes 13, 4, 2, 5.\nNode 4 is connected to node 9.\nNode 2 is connected to nodes 9, 6, 3.\nNode 5 is connected to node 9.\nNode 6 is connected to nodes 2, 1, 0.\nNode 3 is connected to nodes 2, 7, 12.\nNode 1 is connected to node 6.\nNode 0 is connected to node 6.\nNode 7 is connected to node 3.\nNode 12 is connected to node 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n```"}, {"id": 260, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 8, 2, 0, 5, 1, 7.\nNode 8 is connected to node 4.\nNode 2 is connected to node 4.\nNode 0 is connected to nodes 4, 3.\nNode 5 is connected to node 4.\nNode 1 is connected to nodes 4, 6.\nNode 7 is connected to node 4.\nNode 3 is connected to node 0.\nNode 6 is connected to node 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 261, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 4, 1, 8.\nNode 4 is connected to nodes 5, 3, 1, 7, 10.\nNode 1 is connected to nodes 5, 4, 0, 8, 3, 10.\nNode 8 is connected to nodes 5, 0, 9, 1.\nNode 3 is connected to nodes 4, 2, 1.\nNode 7 is connected to nodes 4, 0, 6, 9.\nNode 10 is connected to nodes 4, 0, 2, 1.\nNode 0 is connected to nodes 8, 7, 1, 2, 6, 10.\nNode 2 is connected to nodes 0, 3, 10.\nNode 6 is connected to nodes 0, 7, 9.\nNode 9 is connected to nodes 8, 7, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 262, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 12, 3, 8, 10.\nNode 12 is connected to nodes 0, 5, 8, 6, 4.\nNode 3 is connected to nodes 0, 5, 11, 2, 7.\nNode 8 is connected to nodes 0, 12, 10, 4.\nNode 10 is connected to nodes 0, 8, 9, 5.\nNode 5 is connected to nodes 12, 10, 3, 2, 9.\nNode 6 is connected to nodes 12, 4, 7, 9.\nNode 4 is connected to nodes 12, 8, 6, 2, 7.\nNode 9 is connected to nodes 10, 5, 6.\nNode 2 is connected to nodes 5, 4, 11, 3.\nNode 7 is connected to nodes 4, 6, 1, 3.\nNode 11 is connected to nodes 2, 1, 3.\nNode 1 is connected to nodes 11, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 263, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"Node 0 is connected to nodes 2, 7. Node 2 is connected to nodes 0, 3, 1. Node 7 is connected to node 0. Node 3 is connected to nodes 2, 6. Node 1 is connected to nodes 2, 5. Node 6 is connected to nodes 3, 4. Node 4 is connected to nodes 6, 5. Node 5 is connected to nodes 1, 4.\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 264, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 10, 4, 2.\nNode 10 is connected to nodes 7, 2, 3.\nNode 4 is connected to node 7.\nNode 2 is connected to nodes 7, 10, 5, 3, 8, 9.\nNode 3 is connected to nodes 10, 5, 6, 2, 9, 0, 1.\nNode 5 is connected to nodes 6, 3, 2, 1.\nNode 6 is connected to nodes 5, 3.\nNode 1 is connected to nodes 5, 3, 0.\nNode 8 is connected to nodes 2, 9.\nNode 9 is connected to nodes 2, 8, 3.\nNode 0 is connected to nodes 3, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 265, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 6, 4, 8.\nNode 6 is connected to nodes 5, 7, 4, 8, 1.\nNode 4 is connected to nodes 5, 6, 1, 2, 0.\nNode 8 is connected to nodes 5, 7, 6, 1, 2, 0.\nNode 7 is connected to nodes 6, 8, 1.\nNode 1 is connected to nodes 7, 3, 6, 4, 8.\nNode 3 is connected to nodes 1, 2.\nNode 2 is connected to nodes 3, 4, 8, 0.\nNode 0 is connected to nodes 4, 8, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 266, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 0, 7.\nNode 8 is connected to nodes 6, 5, 1, 0, 7.\nNode 0 is connected to nodes 6, 3, 1, 8.\nNode 7 is connected to nodes 6, 5, 8.\nNode 9 is connected to nodes 2, 1.\nNode 2 is connected to nodes 9, 3, 1, 4.\nNode 1 is connected to nodes 9, 2, 5, 8, 0.\nNode 3 is connected to nodes 2, 0, 4.\nNode 4 is connected to nodes 3, 2.\nNode 5 is connected to nodes 1, 8, 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 267, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 6, 10.\nNode 6 is connected to nodes 8, 11.\nNode 10 is connected to nodes 8, 7.\nNode 11 is connected to nodes 6, 2, 4.\nNode 7 is connected to nodes 10, 5.\nNode 5 is connected to nodes 7, 9, 1.\nNode 9 is connected to node 5.\nNode 1 is connected to nodes 5, 2.\nNode 0 is connected to node 3.\nNode 3 is connected to nodes 0, 2.\nNode 2 is connected to nodes 3, 11, 1.\nNode 4 is connected to node 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 268, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 8, 9, 10.\nNode 8 is connected to nodes 0, 1, 9, 6.\nNode 9 is connected to nodes 0, 1, 2, 8, 4, 3.\nNode 10 is connected to nodes 0, 4.\nNode 1 is connected to nodes 2, 8, 9, 5, 7.\nNode 2 is connected to nodes 1, 9, 3.\nNode 5 is connected to nodes 1, 6.\nNode 7 is connected to nodes 1, 4, 6.\nNode 3 is connected to nodes 2, 9, 4, 6.\nNode 6 is connected to nodes 8, 4, 5, 3, 7.\nNode 4 is connected to nodes 9, 10, 3, 7, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 269, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 14 is connected to nodes 8, 9, 3, 5, 6.\nNode 8 is connected to nodes 14, 0, 9, 12, 3, 6, 1.\nNode 9 is connected to nodes 14, 13, 11, 8, 0, 3, 5, 6, 1.\nNode 3 is connected to nodes 14, 2, 8, 0, 9.\nNode 5 is connected to nodes 14, 2, 11, 10, 9.\nNode 6 is connected to nodes 14, 13, 11, 8, 0, 9.\nNode 13 is connected to nodes 2, 10, 4, 9, 12, 6, 1.\nNode 2 is connected to nodes 13, 10, 0, 12, 3, 7, 5.\nNode 10 is connected to nodes 13, 2, 12, 5, 1.\nNode 4 is connected to nodes 13, 11, 0, 12, 1.\nNode 12 is connected to nodes 13, 2, 8, 10, 4, 7.\nNode 1 is connected to nodes 13, 11, 8, 10, 4, 0, 9.\nNode 0 is connected to nodes 2, 11, 8, 4, 9, 3, 7, 6, 1.\nNode 7 is connected to nodes 2, 11, 0, 12.\nNode 11 is connected to nodes 4, 0, 9, 7, 5, 6, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 270, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 4 is connected to nodes 5, 1, 6, 0, 7.\nNode 5 is connected to nodes 4, 7, 6.\nNode 1 is connected to nodes 4, 2.\nNode 6 is connected to nodes 4, 5, 3.\nNode 0 is connected to nodes 4, 7, 3.\nNode 7 is connected to nodes 4, 5, 0, 2.\nNode 2 is connected to nodes 7, 1.\nNode 3 is connected to nodes 0, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 271, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 8, 2, 11.\nNode 8 is connected to nodes 6, 3, 9, 0, 7, 5, 2.\nNode 2 is connected to nodes 6, 9, 7, 4, 8, 10, 11.\nNode 11 is connected to nodes 6, 9, 7, 5, 2.\nNode 3 is connected to nodes 9, 0, 7, 4, 8, 1.\nNode 9 is connected to nodes 3, 0, 7, 4, 8, 10, 1, 2, 11.\nNode 0 is connected to nodes 3, 9, 7, 4, 8, 10.\nNode 7 is connected to nodes 3, 9, 0, 5, 4, 8, 10, 1, 2, 11.\nNode 4 is connected to nodes 3, 9, 0, 7, 2.\nNode 1 is connected to nodes 3, 9, 7, 5.\nNode 10 is connected to nodes 9, 0, 7, 2.\nNode 5 is connected to nodes 7, 8, 1, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 272, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 5, 6, 10, 8, 9.\nNode 5 is connected to nodes 1, 11, 10, 7.\nNode 6 is connected to nodes 1, 10, 0, 12.\nNode 10 is connected to nodes 1, 5, 8, 0, 7, 2, 6.\nNode 8 is connected to nodes 1, 11, 10.\nNode 9 is connected to nodes 1, 0, 12, 2.\nNode 11 is connected to nodes 5, 8, 4, 12, 3.\nNode 7 is connected to nodes 5, 10, 3, 2.\nNode 4 is connected to nodes 11, 3.\nNode 12 is connected to nodes 11, 6, 9, 3.\nNode 3 is connected to nodes 11, 4, 12, 7.\nNode 0 is connected to nodes 10, 6, 9.\nNode 2 is connected to nodes 10, 7, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 273, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 4, 3.\nNode 4 is connected to nodes 2, 5.\nNode 3 is connected to nodes 2, 0.\nNode 5 is connected to nodes 4, 7.\nNode 7 is connected to nodes 9, 5.\nNode 9 is connected to nodes 7, 1.\nNode 1 is connected to nodes 9, 10.\nNode 0 is connected to node 3.\nNode 6 is connected to nodes 8, 10.\nNode 8 is connected to nodes 6, 10.\nNode 10 is connected to nodes 6, 8, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 274, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 10, 3, 9, 0, 2, 1.\nNode 10 is connected to nodes 7, 6.\nNode 3 is connected to nodes 7, 8.\nNode 9 is connected to node 7.\nNode 0 is connected to nodes 7, 4.\nNode 2 is connected to node 7.\nNode 1 is connected to nodes 7, 5.\nNode 6 is connected to node 10.\nNode 8 is connected to node 3.\nNode 5 is connected to node 1.\nNode 4 is connected to node 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 275, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 6, 9, 10, 11, 8, 4.\nNode 6 is connected to nodes 12, 0.\nNode 9 is connected to nodes 12, 10, 1, 3, 4, 11.\nNode 10 is connected to nodes 12, 9, 2, 1, 4.\nNode 11 is connected to nodes 12, 9, 3, 8, 0.\nNode 8 is connected to nodes 12, 11, 7.\nNode 4 is connected to nodes 12, 10, 9, 5.\nNode 0 is connected to nodes 6, 11, 3, 2.\nNode 2 is connected to nodes 10, 3, 0, 7, 5.\nNode 1 is connected to nodes 10, 9, 5.\nNode 3 is connected to nodes 9, 11, 0, 2.\nNode 7 is connected to nodes 2, 8.\nNode 5 is connected to nodes 2, 1, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 276, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 9, 4, 13, 6.\nNode 9 is connected to nodes 8, 0, 3, 14, 10, 5.\nNode 4 is connected to nodes 8, 10, 3, 12, 13.\nNode 13 is connected to nodes 8, 4, 6, 11, 1, 7.\nNode 6 is connected to nodes 8, 14, 13, 12, 2.\nNode 0 is connected to nodes 9, 11, 5, 2.\nNode 3 is connected to nodes 9, 4, 7.\nNode 14 is connected to nodes 9, 6, 7.\nNode 10 is connected to nodes 9, 4, 5.\nNode 5 is connected to nodes 9, 10, 0.\nNode 12 is connected to nodes 4, 6, 11, 2.\nNode 2 is connected to nodes 6, 12, 11, 0.\nNode 7 is connected to nodes 14, 3, 13.\nNode 11 is connected to nodes 12, 0, 2, 1, 13.\nNode 1 is connected to nodes 11, 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 277, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 9, 2, 0, 1, 10, 6.\nNode 9 is connected to nodes 5, 1, 8, 0.\nNode 2 is connected to nodes 5, 4, 7, 0.\nNode 0 is connected to nodes 5, 9, 10, 2.\nNode 1 is connected to nodes 5, 9, 3, 6.\nNode 10 is connected to nodes 5, 3, 0.\nNode 6 is connected to nodes 5, 4, 1.\nNode 8 is connected to nodes 9, 3, 4, 7.\nNode 3 is connected to nodes 10, 8, 1, 7.\nNode 7 is connected to nodes 3, 4, 8, 2.\nNode 4 is connected to nodes 7, 8, 6, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 278, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 7, 5, 4.\nNode 7 is connected to nodes 0, 6, 5, 2, 4.\nNode 5 is connected to nodes 0, 6, 7, 4, 1.\nNode 4 is connected to nodes 0, 7, 5, 2.\nNode 3 is connected to nodes 2, 1.\nNode 2 is connected to nodes 3, 6, 7, 4, 1.\nNode 1 is connected to nodes 3, 6, 5, 2.\nNode 6 is connected to nodes 7, 5, 2, 1.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 279, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 3, 2, 7, 0.\nNode 3 is connected to nodes 12, 4, 1.\nNode 2 is connected to nodes 12, 10, 0, 9.\nNode 7 is connected to nodes 12, 8.\nNode 0 is connected to nodes 12, 4, 2, 6.\nNode 5 is connected to nodes 10, 8.\nNode 10 is connected to nodes 5, 8, 2, 6.\nNode 8 is connected to nodes 5, 10, 7.\nNode 6 is connected to nodes 10, 0, 11.\nNode 4 is connected to nodes 3, 0.\nNode 1 is connected to nodes 3, 9, 11.\nNode 9 is connected to nodes 1, 2.\nNode 11 is connected to nodes 1, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 280, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 1, 0, 9, 3, 5, 7, 2.\nNode 1 is connected to nodes 8, 9, 3, 7, 2.\nNode 0 is connected to nodes 8, 6, 4, 5, 7.\nNode 9 is connected to nodes 8, 6, 1, 4, 5, 2.\nNode 3 is connected to nodes 8, 1, 5, 2.\nNode 5 is connected to nodes 8, 6, 0, 9, 3.\nNode 7 is connected to nodes 8, 1, 0, 2.\nNode 2 is connected to nodes 8, 6, 1, 9, 3, 7.\nNode 6 is connected to nodes 0, 9, 4, 5, 2.\nNode 4 is connected to nodes 6, 0, 9.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 281, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 5, 4, 6.\nNode 5 is connected to nodes 10, 7, 4, 6, 1, 12.\nNode 4 is connected to nodes 10, 5, 6, 2, 3, 12, 8.\nNode 6 is connected to nodes 10, 7, 5, 9, 4, 13, 1, 0, 11.\nNode 7 is connected to nodes 5, 9, 6, 0, 2, 3.\nNode 9 is connected to nodes 7, 6, 2, 12, 11, 8.\nNode 0 is connected to nodes 7, 6.\nNode 2 is connected to nodes 7, 9, 4, 13, 12, 11, 8.\nNode 3 is connected to nodes 7, 4, 1, 8.\nNode 1 is connected to nodes 5, 13, 6, 3, 12, 8.\nNode 12 is connected to nodes 5, 9, 4, 1, 2, 8.\nNode 11 is connected to nodes 9, 6, 2, 8.\nNode 8 is connected to nodes 9, 4, 13, 1, 2, 3, 12, 11.\nNode 13 is connected to nodes 6, 1, 2, 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 282, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 6, 8.\nNode 6 is connected to nodes 10, 8, 7, 9.\nNode 8 is connected to nodes 10, 6, 7, 2, 9.\nNode 7 is connected to nodes 6, 8, 0, 2.\nNode 9 is connected to nodes 6, 8, 5, 3, 0, 4.\nNode 0 is connected to nodes 7, 9, 2.\nNode 2 is connected to nodes 7, 8, 5, 3, 1, 0.\nNode 5 is connected to nodes 9, 4, 1, 2.\nNode 3 is connected to nodes 9, 4, 2.\nNode 4 is connected to nodes 9, 5, 3, 1.\nNode 1 is connected to nodes 5, 4, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 283, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 3, 0, 7, 2.\nNode 3 is connected to nodes 6, 4, 0, 1, 7.\nNode 0 is connected to nodes 6, 4, 3, 1, 2.\nNode 7 is connected to nodes 6, 3, 1, 2.\nNode 2 is connected to nodes 6, 4, 0, 7, 5.\nNode 4 is connected to nodes 3, 0, 1, 5, 2.\nNode 1 is connected to nodes 4, 3, 0, 7.\nNode 5 is connected to nodes 4, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 284, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 3, 6, 5, 2, 7, 9.\nNode 3 is connected to nodes 0, 5, 4, 7.\nNode 6 is connected to nodes 0, 5, 2, 4.\nNode 5 is connected to nodes 0, 3, 7, 2, 6, 8, 4, 1, 9.\nNode 2 is connected to nodes 0, 5, 6.\nNode 7 is connected to nodes 0, 3, 5, 8.\nNode 9 is connected to nodes 0, 5, 8.\nNode 4 is connected to nodes 3, 5, 6, 8.\nNode 8 is connected to nodes 5, 7, 4, 9.\nNode 1 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 285, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 6 is connected to nodes 0, 4.\nNode 0 is connected to node 6.\nNode 4 is connected to nodes 6, 10, 11, 5, 8.\nNode 2 is connected to nodes 3, 1.\nNode 3 is connected to node 2.\nNode 1 is connected to nodes 2, 9.\nNode 9 is connected to nodes 1, 13, 12, 11.\nNode 13 is connected to nodes 9, 7.\nNode 12 is connected to node 9.\nNode 11 is connected to nodes 9, 4.\nNode 10 is connected to node 4.\nNode 5 is connected to node 4.\nNode 8 is connected to node 4.\nNode 7 is connected to node 13.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 286, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 7, 12.\nNode 7 is connected to nodes 10, 8, 9, 6.\nNode 12 is connected to nodes 10, 0, 6, 4.\nNode 8 is connected to nodes 7, 9, 1, 4, 6.\nNode 9 is connected to nodes 7, 1, 8, 2.\nNode 6 is connected to nodes 7, 12, 8.\nNode 0 is connected to nodes 12, 11, 4, 5.\nNode 11 is connected to nodes 0, 4, 3, 2.\nNode 4 is connected to nodes 0, 12, 8, 11, 5, 3.\nNode 5 is connected to nodes 0, 1, 4, 3.\nNode 1 is connected to nodes 9, 8, 5, 2.\nNode 2 is connected to nodes 9, 1, 11, 3.\nNode 3 is connected to nodes 11, 4, 5, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 287, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 7, 1, 5, 11, 3, 4.\nNode 7 is connected to nodes 2, 13.\nNode 1 is connected to nodes 2, 13, 0, 12, 4, 6.\nNode 5 is connected to nodes 2, 10, 12, 9, 11, 6.\nNode 11 is connected to nodes 2, 8, 5, 3, 4, 6.\nNode 3 is connected to nodes 2, 13, 8, 9, 11.\nNode 4 is connected to nodes 2, 0, 10, 1, 11.\nNode 13 is connected to nodes 8, 7, 1, 3.\nNode 8 is connected to nodes 13, 10, 12, 11, 3.\nNode 0 is connected to nodes 10, 1, 12, 9, 4.\nNode 10 is connected to nodes 0, 8, 5, 12, 4.\nNode 12 is connected to nodes 0, 8, 10, 1, 5, 6.\nNode 9 is connected to nodes 0, 5, 3.\nNode 6 is connected to nodes 1, 5, 12, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 288, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 1 is connected to nodes 3, 6, 5, 9, 8, 2, 4, 11.\nNode 3 is connected to nodes 1, 7, 12, 10, 5, 9, 0, 11.\nNode 6 is connected to nodes 1, 7, 12, 10, 5, 9, 8, 4, 11.\nNode 5 is connected to nodes 1, 7, 3, 6, 10, 9, 0, 4, 11.\nNode 9 is connected to nodes 1, 7, 12, 3, 6, 10, 5, 2, 0, 4, 11.\nNode 8 is connected to nodes 1, 7, 12, 6, 2, 4.\nNode 2 is connected to nodes 1, 7, 12, 10, 9, 8, 0, 4, 11.\nNode 4 is connected to nodes 1, 7, 12, 6, 10, 5, 9, 8, 2, 11.\nNode 11 is connected to nodes 1, 3, 6, 10, 5, 9, 2, 0, 4.\nNode 7 is connected to nodes 3, 6, 10, 5, 9, 8, 2, 0, 4.\nNode 10 is connected to nodes 7, 3, 6, 5, 9, 2, 0, 4, 11.\nNode 0 is connected to nodes 7, 12, 3, 10, 5, 9, 2, 11.\nNode 12 is connected to nodes 3, 6, 9, 8, 2, 0, 4.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 289, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 11, 2, 1, 5, 8, 6, 9, 0.\nNode 11 is connected to nodes 10, 3, 1, 5, 8, 7, 6, 9, 0.\nNode 2 is connected to nodes 10, 3, 1, 8, 6, 9, 4, 0.\nNode 1 is connected to nodes 10, 11, 12, 2, 8, 6, 9, 0.\nNode 5 is connected to nodes 10, 11, 12, 3, 7, 6, 9, 4.\nNode 8 is connected to nodes 10, 11, 12, 3, 2, 1, 7, 6.\nNode 6 is connected to nodes 10, 11, 3, 2, 1, 5, 8, 7, 4.\nNode 9 is connected to nodes 10, 11, 12, 3, 2, 1, 5, 7, 4, 0.\nNode 0 is connected to nodes 10, 11, 12, 2, 1, 9, 4.\nNode 3 is connected to nodes 11, 12, 2, 5, 8, 6, 9, 4.\nNode 7 is connected to nodes 11, 5, 8, 6, 9, 4.\nNode 12 is connected to nodes 3, 1, 5, 8, 9, 4, 0.\nNode 4 is connected to nodes 12, 3, 2, 5, 7, 6, 9, 0.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 290, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 5 is connected to nodes 3, 8, 6, 10, 7, 2, 12.\nNode 3 is connected to nodes 5, 1, 12, 2.\nNode 8 is connected to nodes 5, 2, 12, 0.\nNode 6 is connected to nodes 5, 7, 9, 11.\nNode 10 is connected to nodes 5, 7, 9, 1, 4.\nNode 7 is connected to nodes 5, 10, 2, 6, 9, 11, 0.\nNode 2 is connected to nodes 5, 3, 7, 9, 4, 1, 0, 8, 11.\nNode 12 is connected to nodes 5, 3, 9, 8, 0, 1.\nNode 1 is connected to nodes 3, 10, 2, 4, 12.\nNode 9 is connected to nodes 7, 10, 2, 0, 6, 11, 12.\nNode 11 is connected to nodes 7, 2, 9, 6, 4.\nNode 0 is connected to nodes 7, 2, 9, 8, 12.\nNode 4 is connected to nodes 10, 2, 1, 11.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 291, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 14 is connected to nodes 7, 4, 1, 5.\nNode 7 is connected to nodes 14, 13, 0, 11, 12.\nNode 4 is connected to nodes 14, 9, 3, 5.\nNode 1 is connected to nodes 14, 8, 6, 10.\nNode 5 is connected to nodes 14, 11, 3, 4.\nNode 13 is connected to nodes 7, 0, 11, 3, 2.\nNode 0 is connected to nodes 7, 12, 13, 3.\nNode 11 is connected to nodes 7, 13, 2, 5.\nNode 12 is connected to nodes 7, 0, 8.\nNode 3 is connected to nodes 0, 8, 13, 4, 5.\nNode 8 is connected to nodes 12, 1, 6, 3.\nNode 6 is connected to nodes 1, 8, 9, 10, 2.\nNode 10 is connected to nodes 1, 9, 6.\nNode 2 is connected to nodes 13, 6, 11.\nNode 9 is connected to nodes 10, 4, 6.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 292, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 10 is connected to nodes 9, 0.\nNode 9 is connected to nodes 10, 4.\nNode 0 is connected to nodes 10, 12.\nNode 4 is connected to nodes 9, 6.\nNode 1 is connected to nodes 12, 8.\nNode 12 is connected to nodes 1, 0.\nNode 8 is connected to nodes 1, 2.\nNode 2 is connected to nodes 8, 11.\nNode 11 is connected to nodes 2, 7.\nNode 6 is connected to nodes 4, 3.\nNode 3 is connected to nodes 6, 5.\nNode 7 is connected to nodes 11, 5.\nNode 5 is connected to nodes 7, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 293, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 9, 1, 2.\nNode 9 is connected to nodes 7, 2.\nNode 1 is connected to nodes 7, 0, 3, 6, 4, 5, 8.\nNode 2 is connected to nodes 7, 9, 8, 4.\nNode 0 is connected to nodes 1, 8.\nNode 3 is connected to nodes 1, 8, 4, 6.\nNode 6 is connected to nodes 1, 3.\nNode 4 is connected to nodes 1, 2, 3.\nNode 5 is connected to node 1.\nNode 8 is connected to nodes 1, 0, 2, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 294, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 0 is connected to nodes 6, 9.\nNode 6 is connected to node 0.\nNode 9 is connected to nodes 0, 2.\nNode 3 is connected to nodes 13, 12, 11, 5, 8, 4, 1.\nNode 13 is connected to node 3.\nNode 12 is connected to node 3.\nNode 11 is connected to nodes 3, 2.\nNode 5 is connected to node 3.\nNode 8 is connected to node 3.\nNode 4 is connected to node 3.\nNode 1 is connected to node 3.\nNode 2 is connected to nodes 7, 9, 11, 14.\nNode 7 is connected to nodes 2, 10.\nNode 14 is connected to node 2.\nNode 10 is connected to node 7.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 295, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 7 is connected to nodes 8, 12, 9, 11, 0, 3.\nNode 8 is connected to nodes 7, 2, 13, 4, 12, 5, 11, 6, 10, 3.\nNode 12 is connected to nodes 7, 8, 2, 13, 1, 4, 0, 10, 3.\nNode 9 is connected to nodes 7, 4, 5, 11, 0, 6, 10.\nNode 11 is connected to nodes 7, 8, 2, 1, 4, 9, 0, 6, 10, 3.\nNode 0 is connected to nodes 7, 2, 13, 12, 9, 5, 11, 6, 10.\nNode 3 is connected to nodes 7, 8, 2, 13, 1, 4, 12, 5, 11, 6, 10.\nNode 2 is connected to nodes 8, 13, 1, 4, 12, 5, 11, 0, 6, 3.\nNode 13 is connected to nodes 8, 2, 1, 4, 12, 5, 0, 6, 10, 3.\nNode 4 is connected to nodes 8, 2, 13, 12, 9, 5, 11, 10, 3.\nNode 5 is connected to nodes 8, 2, 13, 1, 4, 9, 0, 6, 3.\nNode 6 is connected to nodes 8, 2, 13, 1, 9, 5, 11, 0, 10, 3.\nNode 10 is connected to nodes 8, 13, 1, 4, 12, 9, 11, 0, 6, 3.\nNode 1 is connected to nodes 2, 13, 12, 5, 11, 6, 10, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 296, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 12 is connected to nodes 1, 7, 0, 11, 13, 2, 3, 10.\nNode 1 is connected to nodes 12, 8, 4, 6, 11, 9, 3, 10, 5.\nNode 7 is connected to nodes 12, 8, 0, 4, 6, 11, 9, 13, 2, 3, 10, 5.\nNode 0 is connected to nodes 12, 7, 11, 9, 2, 3, 10, 5.\nNode 11 is connected to nodes 12, 1, 8, 7, 0, 4, 13, 3, 10.\nNode 13 is connected to nodes 12, 8, 7, 6, 11, 3, 10, 5.\nNode 2 is connected to nodes 12, 8, 7, 0, 10, 5.\nNode 3 is connected to nodes 12, 1, 7, 0, 4, 6, 11, 9, 13, 5.\nNode 10 is connected to nodes 12, 1, 8, 7, 0, 6, 11, 9, 13, 2.\nNode 8 is connected to nodes 1, 7, 6, 11, 9, 13, 2, 10, 5.\nNode 4 is connected to nodes 1, 7, 6, 11, 9, 3, 5.\nNode 6 is connected to nodes 1, 8, 7, 4, 9, 13, 3, 10, 5.\nNode 9 is connected to nodes 1, 8, 7, 0, 4, 6, 3, 10, 5.\nNode 5 is connected to nodes 1, 8, 7, 0, 4, 6, 9, 13, 2, 3.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 297, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 2 is connected to nodes 6, 5.\nNode 6 is connected to nodes 2, 7.\nNode 5 is connected to nodes 2, 3, 10.\nNode 7 is connected to nodes 6, 4, 3.\nNode 8 is connected to node 1.\nNode 1 is connected to nodes 8, 3.\nNode 3 is connected to nodes 1, 7, 9, 5.\nNode 4 is connected to node 7.\nNode 9 is connected to nodes 3, 0.\nNode 0 is connected to node 9.\nNode 10 is connected to node 5.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 298, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 13 is connected to nodes 10, 8, 12.\nNode 10 is connected to nodes 13, 11, 0, 6, 12.\nNode 8 is connected to nodes 13, 0, 5, 9.\nNode 12 is connected to nodes 13, 3, 11, 10, 0, 6, 5.\nNode 3 is connected to nodes 1, 12, 5.\nNode 1 is connected to nodes 3, 2, 7.\nNode 5 is connected to nodes 3, 8, 6, 12.\nNode 11 is connected to nodes 2, 10, 0, 6, 12, 7.\nNode 2 is connected to nodes 11, 1, 7.\nNode 0 is connected to nodes 11, 10, 8, 6, 12.\nNode 6 is connected to nodes 11, 10, 0, 12, 5.\nNode 7 is connected to nodes 11, 4, 2, 1.\nNode 4 is connected to node 7.\nNode 9 is connected to node 8.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}, {"id": 299, "code": "```python\nimport re\nimport networkx as nx\n\ntext = \"\"\"Node 8 is connected to nodes 7, 0, 1, 4, 5, 3, 2.\nNode 7 is connected to nodes 8, 6, 0, 4, 3.\nNode 0 is connected to nodes 8, 7, 6, 1, 5, 2.\nNode 1 is connected to nodes 8, 6, 0, 5, 3, 2.\nNode 4 is connected to nodes 8, 7, 2.\nNode 5 is connected to nodes 8, 0, 1, 3, 2.\nNode 3 is connected to nodes 8, 7, 6, 1, 5, 2.\nNode 2 is connected to nodes 8, 6, 0, 1, 4, 5, 3.\nNode 6 is connected to nodes 7, 0, 1, 3, 2.\"\"\"\n\n# Regular expression to extract connections\npattern = r'Node (\\d+) is connected to nodes? ([\\d, ]+)\\.'\nmatches = re.findall(pattern, text)\n\n# Create an undirected graph\nG = nx.Graph()\n\n# Add edges to the graph\nfor node, neighbors in matches:\n    node = int(node)\n    neighbors = map(int, neighbors.split(', '))\n    for neighbor in neighbors:\n        G.add_edge(node, neighbor)\n\n# Calculate the diameter of the graph\ndiameter = nx.diameter(G)\nprint(diameter)\n```\n\n"}]